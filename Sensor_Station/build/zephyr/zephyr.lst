
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

void i2c_dump_msgs(const char *name, const struct i2c_msg *msgs,
		   uint8_t num_msgs, uint16_t addr)
{
	LOG_DBG("I2C msg: %s, addr=%x", name, addr);
	for (unsigned int i = 0; i < num_msgs; i++) {
   0:	30 45 00 20 c9 65 00 00 6b 9e 01 00 81 65 00 00     0E. .e..k....e..
  10:	81 65 00 00 81 65 00 00 81 65 00 00 81 65 00 00     .e...e...e...e..
	...
  2c:	31 57 00 00 81 65 00 00 00 00 00 00 d5 56 00 00     1W...e.......V..
  3c:	81 65 00 00                                         .e..

00000040 <_irq_vector_table>:
  40:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  50:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  60:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  70:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  80:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  90:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  a0:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  b0:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  c0:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  d0:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  e0:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
  f0:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
 100:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
 110:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
 120:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
 130:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
 140:	c1 57 00 00 c1 57 00 00 c1 57 00 00 c1 57 00 00     .W...W...W...W..
 150:	c1 57 00 00                                         .W..

Disassembly of section text:

00000158 <__aeabi_frsub>:
     158:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__addsf3>
     15e:	bf00      	nop

00000160 <__aeabi_fsub>:
     160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000164 <__addsf3>:
     164:	0042      	lsls	r2, r0, #1
     166:	bf1f      	itttt	ne
     168:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     16c:	ea92 0f03 	teqne	r2, r3
     170:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     174:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     178:	d06a      	beq.n	250 <CONFIG_SRAM_SIZE+0x90>
     17a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     17e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     182:	bfc1      	itttt	gt
     184:	18d2      	addgt	r2, r2, r3
     186:	4041      	eorgt	r1, r0
     188:	4048      	eorgt	r0, r1
     18a:	4041      	eorgt	r1, r0
     18c:	bfb8      	it	lt
     18e:	425b      	neglt	r3, r3
     190:	2b19      	cmp	r3, #25
     192:	bf88      	it	hi
     194:	4770      	bxhi	lr
     196:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     19a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     19e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     1a2:	bf18      	it	ne
     1a4:	4240      	negne	r0, r0
     1a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     1ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     1b2:	bf18      	it	ne
     1b4:	4249      	negne	r1, r1
     1b6:	ea92 0f03 	teq	r2, r3
     1ba:	d03f      	beq.n	23c <CONFIG_SRAM_SIZE+0x7c>
     1bc:	f1a2 0201 	sub.w	r2, r2, #1
     1c0:	fa41 fc03 	asr.w	ip, r1, r3
     1c4:	eb10 000c 	adds.w	r0, r0, ip
     1c8:	f1c3 0320 	rsb	r3, r3, #32
     1cc:	fa01 f103 	lsl.w	r1, r1, r3
     1d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     1d4:	d502      	bpl.n	1dc <CONFIG_SRAM_SIZE+0x1c>
     1d6:	4249      	negs	r1, r1
     1d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     1dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     1e0:	d313      	bcc.n	20a <CONFIG_SRAM_SIZE+0x4a>
     1e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     1e6:	d306      	bcc.n	1f6 <CONFIG_SRAM_SIZE+0x36>
     1e8:	0840      	lsrs	r0, r0, #1
     1ea:	ea4f 0131 	mov.w	r1, r1, rrx
     1ee:	f102 0201 	add.w	r2, r2, #1
     1f2:	2afe      	cmp	r2, #254	; 0xfe
     1f4:	d251      	bcs.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     1f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1fe:	bf08      	it	eq
     200:	f020 0001 	biceq.w	r0, r0, #1
     204:	ea40 0003 	orr.w	r0, r0, r3
     208:	4770      	bx	lr
     20a:	0049      	lsls	r1, r1, #1
     20c:	eb40 0000 	adc.w	r0, r0, r0
     210:	3a01      	subs	r2, #1
     212:	bf28      	it	cs
     214:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     218:	d2ed      	bcs.n	1f6 <CONFIG_SRAM_SIZE+0x36>
     21a:	fab0 fc80 	clz	ip, r0
     21e:	f1ac 0c08 	sub.w	ip, ip, #8
     222:	ebb2 020c 	subs.w	r2, r2, ip
     226:	fa00 f00c 	lsl.w	r0, r0, ip
     22a:	bfaa      	itet	ge
     22c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     230:	4252      	neglt	r2, r2
     232:	4318      	orrge	r0, r3
     234:	bfbc      	itt	lt
     236:	40d0      	lsrlt	r0, r2
     238:	4318      	orrlt	r0, r3
     23a:	4770      	bx	lr
     23c:	f092 0f00 	teq	r2, #0
     240:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     244:	bf06      	itte	eq
     246:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     24a:	3201      	addeq	r2, #1
     24c:	3b01      	subne	r3, #1
     24e:	e7b5      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     250:	ea4f 0341 	mov.w	r3, r1, lsl #1
     254:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     258:	bf18      	it	ne
     25a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     25e:	d021      	beq.n	2a4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x24>
     260:	ea92 0f03 	teq	r2, r3
     264:	d004      	beq.n	270 <CONFIG_SRAM_SIZE+0xb0>
     266:	f092 0f00 	teq	r2, #0
     26a:	bf08      	it	eq
     26c:	4608      	moveq	r0, r1
     26e:	4770      	bx	lr
     270:	ea90 0f01 	teq	r0, r1
     274:	bf1c      	itt	ne
     276:	2000      	movne	r0, #0
     278:	4770      	bxne	lr
     27a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     27e:	d104      	bne.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     280:	0040      	lsls	r0, r0, #1
     282:	bf28      	it	cs
     284:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     288:	4770      	bx	lr
     28a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     28e:	bf3c      	itt	cc
     290:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     294:	4770      	bxcc	lr
     296:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     29a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     29e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2a2:	4770      	bx	lr
     2a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     2a8:	bf16      	itet	ne
     2aa:	4608      	movne	r0, r1
     2ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     2b0:	4601      	movne	r1, r0
     2b2:	0242      	lsls	r2, r0, #9
     2b4:	bf06      	itte	eq
     2b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     2ba:	ea90 0f01 	teqeq	r0, r1
     2be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     2c2:	4770      	bx	lr

000002c4 <__aeabi_ui2f>:
     2c4:	f04f 0300 	mov.w	r3, #0
     2c8:	e004      	b.n	2d4 <__aeabi_i2f+0x8>
     2ca:	bf00      	nop

000002cc <__aeabi_i2f>:
     2cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     2d0:	bf48      	it	mi
     2d2:	4240      	negmi	r0, r0
     2d4:	ea5f 0c00 	movs.w	ip, r0
     2d8:	bf08      	it	eq
     2da:	4770      	bxeq	lr
     2dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     2e0:	4601      	mov	r1, r0
     2e2:	f04f 0000 	mov.w	r0, #0
     2e6:	e01c      	b.n	322 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x22>

000002e8 <__aeabi_ul2f>:
     2e8:	ea50 0201 	orrs.w	r2, r0, r1
     2ec:	bf08      	it	eq
     2ee:	4770      	bxeq	lr
     2f0:	f04f 0300 	mov.w	r3, #0
     2f4:	e00a      	b.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	bf00      	nop

000002f8 <__aeabi_l2f>:
     2f8:	ea50 0201 	orrs.w	r2, r0, r1
     2fc:	bf08      	it	eq
     2fe:	4770      	bxeq	lr
     300:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     304:	d502      	bpl.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     306:	4240      	negs	r0, r0
     308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     30c:	ea5f 0c01 	movs.w	ip, r1
     310:	bf02      	ittt	eq
     312:	4684      	moveq	ip, r0
     314:	4601      	moveq	r1, r0
     316:	2000      	moveq	r0, #0
     318:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     31c:	bf08      	it	eq
     31e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     322:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     326:	fabc f28c 	clz	r2, ip
     32a:	3a08      	subs	r2, #8
     32c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     330:	db10      	blt.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     332:	fa01 fc02 	lsl.w	ip, r1, r2
     336:	4463      	add	r3, ip
     338:	fa00 fc02 	lsl.w	ip, r0, r2
     33c:	f1c2 0220 	rsb	r2, r2, #32
     340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     344:	fa20 f202 	lsr.w	r2, r0, r2
     348:	eb43 0002 	adc.w	r0, r3, r2
     34c:	bf08      	it	eq
     34e:	f020 0001 	biceq.w	r0, r0, #1
     352:	4770      	bx	lr
     354:	f102 0220 	add.w	r2, r2, #32
     358:	fa01 fc02 	lsl.w	ip, r1, r2
     35c:	f1c2 0220 	rsb	r2, r2, #32
     360:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     364:	fa21 f202 	lsr.w	r2, r1, r2
     368:	eb43 0002 	adc.w	r0, r3, r2
     36c:	bf08      	it	eq
     36e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     372:	4770      	bx	lr

00000374 <__aeabi_fmul>:
     374:	f04f 0cff 	mov.w	ip, #255	; 0xff
     378:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     37c:	bf1e      	ittt	ne
     37e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     382:	ea92 0f0c 	teqne	r2, ip
     386:	ea93 0f0c 	teqne	r3, ip
     38a:	d06f      	beq.n	46c <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     38c:	441a      	add	r2, r3
     38e:	ea80 0c01 	eor.w	ip, r0, r1
     392:	0240      	lsls	r0, r0, #9
     394:	bf18      	it	ne
     396:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     39a:	d01e      	beq.n	3da <__aeabi_fmul+0x66>
     39c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     3a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     3a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     3a8:	fba0 3101 	umull	r3, r1, r0, r1
     3ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     3b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     3b4:	bf3e      	ittt	cc
     3b6:	0049      	lslcc	r1, r1, #1
     3b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     3bc:	005b      	lslcc	r3, r3, #1
     3be:	ea40 0001 	orr.w	r0, r0, r1
     3c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     3c6:	2afd      	cmp	r2, #253	; 0xfd
     3c8:	d81d      	bhi.n	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     3ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     3d2:	bf08      	it	eq
     3d4:	f020 0001 	biceq.w	r0, r0, #1
     3d8:	4770      	bx	lr
     3da:	f090 0f00 	teq	r0, #0
     3de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     3e2:	bf08      	it	eq
     3e4:	0249      	lsleq	r1, r1, #9
     3e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     3ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     3ee:	3a7f      	subs	r2, #127	; 0x7f
     3f0:	bfc2      	ittt	gt
     3f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     3f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     3fa:	4770      	bxgt	lr
     3fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     400:	f04f 0300 	mov.w	r3, #0
     404:	3a01      	subs	r2, #1
     406:	dc5d      	bgt.n	4c4 <CONFIG_BT_RX_STACK_SIZE+0x14>
     408:	f112 0f19 	cmn.w	r2, #25
     40c:	bfdc      	itt	le
     40e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     412:	4770      	bxle	lr
     414:	f1c2 0200 	rsb	r2, r2, #0
     418:	0041      	lsls	r1, r0, #1
     41a:	fa21 f102 	lsr.w	r1, r1, r2
     41e:	f1c2 0220 	rsb	r2, r2, #32
     422:	fa00 fc02 	lsl.w	ip, r0, r2
     426:	ea5f 0031 	movs.w	r0, r1, rrx
     42a:	f140 0000 	adc.w	r0, r0, #0
     42e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     432:	bf08      	it	eq
     434:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     438:	4770      	bx	lr
     43a:	f092 0f00 	teq	r2, #0
     43e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     442:	bf02      	ittt	eq
     444:	0040      	lsleq	r0, r0, #1
     446:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     44a:	3a01      	subeq	r2, #1
     44c:	d0f9      	beq.n	442 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     44e:	ea40 000c 	orr.w	r0, r0, ip
     452:	f093 0f00 	teq	r3, #0
     456:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     45a:	bf02      	ittt	eq
     45c:	0049      	lsleq	r1, r1, #1
     45e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     462:	3b01      	subeq	r3, #1
     464:	d0f9      	beq.n	45a <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     466:	ea41 010c 	orr.w	r1, r1, ip
     46a:	e78f      	b.n	38c <__aeabi_fmul+0x18>
     46c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     470:	ea92 0f0c 	teq	r2, ip
     474:	bf18      	it	ne
     476:	ea93 0f0c 	teqne	r3, ip
     47a:	d00a      	beq.n	492 <CONFIG_BT_HCI_TX_STACK_SIZE+0x92>
     47c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     480:	bf18      	it	ne
     482:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     486:	d1d8      	bne.n	43a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     488:	ea80 0001 	eor.w	r0, r0, r1
     48c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     490:	4770      	bx	lr
     492:	f090 0f00 	teq	r0, #0
     496:	bf17      	itett	ne
     498:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     49c:	4608      	moveq	r0, r1
     49e:	f091 0f00 	teqne	r1, #0
     4a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     4a6:	d014      	beq.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     4a8:	ea92 0f0c 	teq	r2, ip
     4ac:	d101      	bne.n	4b2 <CONFIG_BT_RX_STACK_SIZE+0x2>
     4ae:	0242      	lsls	r2, r0, #9
     4b0:	d10f      	bne.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     4b2:	ea93 0f0c 	teq	r3, ip
     4b6:	d103      	bne.n	4c0 <CONFIG_BT_RX_STACK_SIZE+0x10>
     4b8:	024b      	lsls	r3, r1, #9
     4ba:	bf18      	it	ne
     4bc:	4608      	movne	r0, r1
     4be:	d108      	bne.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     4c0:	ea80 0001 	eor.w	r0, r0, r1
     4c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     4c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     4cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     4d0:	4770      	bx	lr
     4d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     4d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     4da:	4770      	bx	lr

000004dc <__aeabi_fdiv>:
     4dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     4e4:	bf1e      	ittt	ne
     4e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     4ea:	ea92 0f0c 	teqne	r2, ip
     4ee:	ea93 0f0c 	teqne	r3, ip
     4f2:	d069      	beq.n	5c8 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xb4>
     4f4:	eba2 0203 	sub.w	r2, r2, r3
     4f8:	ea80 0c01 	eor.w	ip, r0, r1
     4fc:	0249      	lsls	r1, r1, #9
     4fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
     502:	d037      	beq.n	574 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x60>
     504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     508:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     50c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     510:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     514:	428b      	cmp	r3, r1
     516:	bf38      	it	cc
     518:	005b      	lslcc	r3, r3, #1
     51a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     51e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     522:	428b      	cmp	r3, r1
     524:	bf24      	itt	cs
     526:	1a5b      	subcs	r3, r3, r1
     528:	ea40 000c 	orrcs.w	r0, r0, ip
     52c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     530:	bf24      	itt	cs
     532:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     536:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     53a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     53e:	bf24      	itt	cs
     540:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     544:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     548:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     54c:	bf24      	itt	cs
     54e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     552:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     556:	011b      	lsls	r3, r3, #4
     558:	bf18      	it	ne
     55a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     55e:	d1e0      	bne.n	522 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xe>
     560:	2afd      	cmp	r2, #253	; 0xfd
     562:	f63f af50 	bhi.w	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     566:	428b      	cmp	r3, r1
     568:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     56c:	bf08      	it	eq
     56e:	f020 0001 	biceq.w	r0, r0, #1
     572:	4770      	bx	lr
     574:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     578:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     57c:	327f      	adds	r2, #127	; 0x7f
     57e:	bfc2      	ittt	gt
     580:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     584:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     588:	4770      	bxgt	lr
     58a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     58e:	f04f 0300 	mov.w	r3, #0
     592:	3a01      	subs	r2, #1
     594:	e737      	b.n	406 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     596:	f092 0f00 	teq	r2, #0
     59a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     59e:	bf02      	ittt	eq
     5a0:	0040      	lsleq	r0, r0, #1
     5a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     5a6:	3a01      	subeq	r2, #1
     5a8:	d0f9      	beq.n	59e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x8a>
     5aa:	ea40 000c 	orr.w	r0, r0, ip
     5ae:	f093 0f00 	teq	r3, #0
     5b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     5b6:	bf02      	ittt	eq
     5b8:	0049      	lsleq	r1, r1, #1
     5ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     5be:	3b01      	subeq	r3, #1
     5c0:	d0f9      	beq.n	5b6 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xa2>
     5c2:	ea41 010c 	orr.w	r1, r1, ip
     5c6:	e795      	b.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     5c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     5cc:	ea92 0f0c 	teq	r2, ip
     5d0:	d108      	bne.n	5e4 <CONFIG_BT_LONG_WQ_STACK_SIZE+0xd0>
     5d2:	0242      	lsls	r2, r0, #9
     5d4:	f47f af7d 	bne.w	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     5d8:	ea93 0f0c 	teq	r3, ip
     5dc:	f47f af70 	bne.w	4c0 <CONFIG_BT_RX_STACK_SIZE+0x10>
     5e0:	4608      	mov	r0, r1
     5e2:	e776      	b.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     5e4:	ea93 0f0c 	teq	r3, ip
     5e8:	d104      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     5ea:	024b      	lsls	r3, r1, #9
     5ec:	f43f af4c 	beq.w	488 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     5f0:	4608      	mov	r0, r1
     5f2:	e76e      	b.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     5f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     5f8:	bf18      	it	ne
     5fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     5fe:	d1ca      	bne.n	596 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x82>
     600:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     604:	f47f af5c 	bne.w	4c0 <CONFIG_BT_RX_STACK_SIZE+0x10>
     608:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     60c:	f47f af3c 	bne.w	488 <CONFIG_BT_HCI_TX_STACK_SIZE+0x88>
     610:	e75f      	b.n	4d2 <CONFIG_BT_RX_STACK_SIZE+0x22>
     612:	bf00      	nop

00000614 <__aeabi_f2uiz>:
     614:	0042      	lsls	r2, r0, #1
     616:	d20e      	bcs.n	636 <__aeabi_f2uiz+0x22>
     618:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     61c:	d30b      	bcc.n	636 <__aeabi_f2uiz+0x22>
     61e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     622:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     626:	d409      	bmi.n	63c <__aeabi_f2uiz+0x28>
     628:	ea4f 2300 	mov.w	r3, r0, lsl #8
     62c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     630:	fa23 f002 	lsr.w	r0, r3, r2
     634:	4770      	bx	lr
     636:	f04f 0000 	mov.w	r0, #0
     63a:	4770      	bx	lr
     63c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     640:	d101      	bne.n	646 <__aeabi_f2uiz+0x32>
     642:	0242      	lsls	r2, r0, #9
     644:	d102      	bne.n	64c <__aeabi_f2uiz+0x38>
     646:	f04f 30ff 	mov.w	r0, #4294967295
     64a:	4770      	bx	lr
     64c:	f04f 0000 	mov.w	r0, #0
     650:	4770      	bx	lr
     652:	bf00      	nop

00000654 <__aeabi_ldivmod>:
     654:	b97b      	cbnz	r3, 676 <__aeabi_ldivmod+0x22>
     656:	b972      	cbnz	r2, 676 <__aeabi_ldivmod+0x22>
     658:	2900      	cmp	r1, #0
     65a:	bfbe      	ittt	lt
     65c:	2000      	movlt	r0, #0
     65e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     662:	e006      	blt.n	672 <__aeabi_ldivmod+0x1e>
     664:	bf08      	it	eq
     666:	2800      	cmpeq	r0, #0
     668:	bf1c      	itt	ne
     66a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     66e:	f04f 30ff 	movne.w	r0, #4294967295
     672:	f000 b857 	b.w	724 <__aeabi_idiv0>
     676:	f1ad 0c08 	sub.w	ip, sp, #8
     67a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     67e:	2900      	cmp	r1, #0
     680:	db09      	blt.n	696 <__aeabi_ldivmod+0x42>
     682:	2b00      	cmp	r3, #0
     684:	db1a      	blt.n	6bc <__aeabi_ldivmod+0x68>
     686:	f000 f84f 	bl	728 <__udivmoddi4>
     68a:	f8dd e004 	ldr.w	lr, [sp, #4]
     68e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     692:	b004      	add	sp, #16
     694:	4770      	bx	lr
     696:	4240      	negs	r0, r0
     698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     69c:	2b00      	cmp	r3, #0
     69e:	db1b      	blt.n	6d8 <__aeabi_ldivmod+0x84>
     6a0:	f000 f842 	bl	728 <__udivmoddi4>
     6a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     6a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     6ac:	b004      	add	sp, #16
     6ae:	4240      	negs	r0, r0
     6b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     6b4:	4252      	negs	r2, r2
     6b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     6ba:	4770      	bx	lr
     6bc:	4252      	negs	r2, r2
     6be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     6c2:	f000 f831 	bl	728 <__udivmoddi4>
     6c6:	f8dd e004 	ldr.w	lr, [sp, #4]
     6ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     6ce:	b004      	add	sp, #16
     6d0:	4240      	negs	r0, r0
     6d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     6d6:	4770      	bx	lr
     6d8:	4252      	negs	r2, r2
     6da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     6de:	f000 f823 	bl	728 <__udivmoddi4>
     6e2:	f8dd e004 	ldr.w	lr, [sp, #4]
     6e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     6ea:	b004      	add	sp, #16
     6ec:	4252      	negs	r2, r2
     6ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     6f2:	4770      	bx	lr

000006f4 <__aeabi_uldivmod>:
     6f4:	b953      	cbnz	r3, 70c <__aeabi_uldivmod+0x18>
     6f6:	b94a      	cbnz	r2, 70c <__aeabi_uldivmod+0x18>
     6f8:	2900      	cmp	r1, #0
     6fa:	bf08      	it	eq
     6fc:	2800      	cmpeq	r0, #0
     6fe:	bf1c      	itt	ne
     700:	f04f 31ff 	movne.w	r1, #4294967295
     704:	f04f 30ff 	movne.w	r0, #4294967295
     708:	f000 b80c 	b.w	724 <__aeabi_idiv0>
     70c:	f1ad 0c08 	sub.w	ip, sp, #8
     710:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     714:	f000 f808 	bl	728 <__udivmoddi4>
     718:	f8dd e004 	ldr.w	lr, [sp, #4]
     71c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     720:	b004      	add	sp, #16
     722:	4770      	bx	lr

00000724 <__aeabi_idiv0>:
     724:	4770      	bx	lr
     726:	bf00      	nop

00000728 <__udivmoddi4>:
     728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     72c:	4607      	mov	r7, r0
     72e:	468c      	mov	ip, r1
     730:	4608      	mov	r0, r1
     732:	9e09      	ldr	r6, [sp, #36]	; 0x24
     734:	4615      	mov	r5, r2
     736:	463c      	mov	r4, r7
     738:	4619      	mov	r1, r3
     73a:	2b00      	cmp	r3, #0
     73c:	f040 80c5 	bne.w	8ca <CONFIG_ISR_STACK_SIZE+0xca>
     740:	4282      	cmp	r2, r0
     742:	fab2 f782 	clz	r7, r2
     746:	d946      	bls.n	7d6 <__udivmoddi4+0xae>
     748:	b14f      	cbz	r7, 75e <__udivmoddi4+0x36>
     74a:	f1c7 0e20 	rsb	lr, r7, #32
     74e:	fa00 f307 	lsl.w	r3, r0, r7
     752:	40bd      	lsls	r5, r7
     754:	fa24 fe0e 	lsr.w	lr, r4, lr
     758:	40bc      	lsls	r4, r7
     75a:	ea4e 0c03 	orr.w	ip, lr, r3
     75e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     762:	fa1f fe85 	uxth.w	lr, r5
     766:	0c22      	lsrs	r2, r4, #16
     768:	fbbc f9f8 	udiv	r9, ip, r8
     76c:	fb08 c319 	mls	r3, r8, r9, ip
     770:	fb09 fa0e 	mul.w	sl, r9, lr
     774:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     778:	459a      	cmp	sl, r3
     77a:	d928      	bls.n	7ce <__udivmoddi4+0xa6>
     77c:	18eb      	adds	r3, r5, r3
     77e:	f109 30ff 	add.w	r0, r9, #4294967295
     782:	d204      	bcs.n	78e <__udivmoddi4+0x66>
     784:	459a      	cmp	sl, r3
     786:	d902      	bls.n	78e <__udivmoddi4+0x66>
     788:	f1a9 0002 	sub.w	r0, r9, #2
     78c:	442b      	add	r3, r5
     78e:	eba3 030a 	sub.w	r3, r3, sl
     792:	b2a4      	uxth	r4, r4
     794:	fbb3 f2f8 	udiv	r2, r3, r8
     798:	fb08 3312 	mls	r3, r8, r2, r3
     79c:	fb02 fe0e 	mul.w	lr, r2, lr
     7a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     7a4:	45a6      	cmp	lr, r4
     7a6:	d914      	bls.n	7d2 <__udivmoddi4+0xaa>
     7a8:	192c      	adds	r4, r5, r4
     7aa:	f102 33ff 	add.w	r3, r2, #4294967295
     7ae:	d203      	bcs.n	7b8 <__udivmoddi4+0x90>
     7b0:	45a6      	cmp	lr, r4
     7b2:	d901      	bls.n	7b8 <__udivmoddi4+0x90>
     7b4:	1e93      	subs	r3, r2, #2
     7b6:	442c      	add	r4, r5
     7b8:	eba4 040e 	sub.w	r4, r4, lr
     7bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     7c0:	b11e      	cbz	r6, 7ca <__udivmoddi4+0xa2>
     7c2:	40fc      	lsrs	r4, r7
     7c4:	2300      	movs	r3, #0
     7c6:	6034      	str	r4, [r6, #0]
     7c8:	6073      	str	r3, [r6, #4]
     7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7ce:	4648      	mov	r0, r9
     7d0:	e7dd      	b.n	78e <__udivmoddi4+0x66>
     7d2:	4613      	mov	r3, r2
     7d4:	e7f0      	b.n	7b8 <__udivmoddi4+0x90>
     7d6:	b902      	cbnz	r2, 7da <__udivmoddi4+0xb2>
     7d8:	deff      	udf	#255	; 0xff
     7da:	bb87      	cbnz	r7, 83e <CONFIG_ISR_STACK_SIZE+0x3e>
     7dc:	1a83      	subs	r3, r0, r2
     7de:	2101      	movs	r1, #1
     7e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     7e4:	b2aa      	uxth	r2, r5
     7e6:	0c20      	lsrs	r0, r4, #16
     7e8:	fbb3 fcfe 	udiv	ip, r3, lr
     7ec:	fb0e 331c 	mls	r3, lr, ip, r3
     7f0:	fb0c f802 	mul.w	r8, ip, r2
     7f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     7f8:	4598      	cmp	r8, r3
     7fa:	d962      	bls.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     7fc:	18eb      	adds	r3, r5, r3
     7fe:	f10c 30ff 	add.w	r0, ip, #4294967295
     802:	d204      	bcs.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     804:	4598      	cmp	r8, r3
     806:	d902      	bls.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     808:	f1ac 0002 	sub.w	r0, ip, #2
     80c:	442b      	add	r3, r5
     80e:	eba3 0308 	sub.w	r3, r3, r8
     812:	b2a4      	uxth	r4, r4
     814:	fbb3 fcfe 	udiv	ip, r3, lr
     818:	fb0e 331c 	mls	r3, lr, ip, r3
     81c:	fb0c f202 	mul.w	r2, ip, r2
     820:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     824:	42a2      	cmp	r2, r4
     826:	d94e      	bls.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
     828:	192c      	adds	r4, r5, r4
     82a:	f10c 33ff 	add.w	r3, ip, #4294967295
     82e:	d204      	bcs.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     830:	42a2      	cmp	r2, r4
     832:	d902      	bls.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     834:	f1ac 0302 	sub.w	r3, ip, #2
     838:	442c      	add	r4, r5
     83a:	1aa4      	subs	r4, r4, r2
     83c:	e7be      	b.n	7bc <__udivmoddi4+0x94>
     83e:	f1c7 0c20 	rsb	ip, r7, #32
     842:	40bd      	lsls	r5, r7
     844:	fa00 f307 	lsl.w	r3, r0, r7
     848:	fa20 f80c 	lsr.w	r8, r0, ip
     84c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     850:	fa24 fc0c 	lsr.w	ip, r4, ip
     854:	40bc      	lsls	r4, r7
     856:	ea4c 0203 	orr.w	r2, ip, r3
     85a:	b2ab      	uxth	r3, r5
     85c:	fbb8 fcfe 	udiv	ip, r8, lr
     860:	0c11      	lsrs	r1, r2, #16
     862:	fb0e 801c 	mls	r0, lr, ip, r8
     866:	fb0c f903 	mul.w	r9, ip, r3
     86a:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     86e:	4581      	cmp	r9, r0
     870:	d923      	bls.n	8ba <CONFIG_ISR_STACK_SIZE+0xba>
     872:	1828      	adds	r0, r5, r0
     874:	f10c 31ff 	add.w	r1, ip, #4294967295
     878:	d204      	bcs.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     87a:	4581      	cmp	r9, r0
     87c:	d902      	bls.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     87e:	f1ac 0102 	sub.w	r1, ip, #2
     882:	4428      	add	r0, r5
     884:	eba0 0009 	sub.w	r0, r0, r9
     888:	b292      	uxth	r2, r2
     88a:	fbb0 fcfe 	udiv	ip, r0, lr
     88e:	fb0e 001c 	mls	r0, lr, ip, r0
     892:	fb0c f803 	mul.w	r8, ip, r3
     896:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     89a:	4598      	cmp	r8, r3
     89c:	d90f      	bls.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     89e:	18eb      	adds	r3, r5, r3
     8a0:	f10c 32ff 	add.w	r2, ip, #4294967295
     8a4:	d204      	bcs.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     8a6:	4598      	cmp	r8, r3
     8a8:	d902      	bls.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     8aa:	f1ac 0202 	sub.w	r2, ip, #2
     8ae:	442b      	add	r3, r5
     8b0:	eba3 0308 	sub.w	r3, r3, r8
     8b4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     8b8:	e792      	b.n	7e0 <__udivmoddi4+0xb8>
     8ba:	4661      	mov	r1, ip
     8bc:	e7e2      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
     8be:	4662      	mov	r2, ip
     8c0:	e7f6      	b.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     8c2:	4660      	mov	r0, ip
     8c4:	e7a3      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     8c6:	4663      	mov	r3, ip
     8c8:	e7b7      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     8ca:	4283      	cmp	r3, r0
     8cc:	d905      	bls.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
     8ce:	b10e      	cbz	r6, 8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8d0:	e9c6 7000 	strd	r7, r0, [r6]
     8d4:	2100      	movs	r1, #0
     8d6:	4608      	mov	r0, r1
     8d8:	e777      	b.n	7ca <__udivmoddi4+0xa2>
     8da:	fab3 f183 	clz	r1, r3
     8de:	b981      	cbnz	r1, 902 <CONFIG_ISR_STACK_SIZE+0x102>
     8e0:	4283      	cmp	r3, r0
     8e2:	d301      	bcc.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     8e4:	42ba      	cmp	r2, r7
     8e6:	d80a      	bhi.n	8fe <CONFIG_ISR_STACK_SIZE+0xfe>
     8e8:	1abc      	subs	r4, r7, r2
     8ea:	eb60 0303 	sbc.w	r3, r0, r3
     8ee:	2001      	movs	r0, #1
     8f0:	469c      	mov	ip, r3
     8f2:	2e00      	cmp	r6, #0
     8f4:	d067      	beq.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
     8f6:	e9c6 4c00 	strd	r4, ip, [r6]
     8fa:	2100      	movs	r1, #0
     8fc:	e765      	b.n	7ca <__udivmoddi4+0xa2>
     8fe:	4608      	mov	r0, r1
     900:	e7f7      	b.n	8f2 <CONFIG_ISR_STACK_SIZE+0xf2>
     902:	f1c1 0c20 	rsb	ip, r1, #32
     906:	408b      	lsls	r3, r1
     908:	fa02 f501 	lsl.w	r5, r2, r1
     90c:	fa22 f40c 	lsr.w	r4, r2, ip
     910:	fa20 fb0c 	lsr.w	fp, r0, ip
     914:	fa27 f20c 	lsr.w	r2, r7, ip
     918:	408f      	lsls	r7, r1
     91a:	431c      	orrs	r4, r3
     91c:	fa00 f301 	lsl.w	r3, r0, r1
     920:	ea4f 4914 	mov.w	r9, r4, lsr #16
     924:	4313      	orrs	r3, r2
     926:	fa1f fe84 	uxth.w	lr, r4
     92a:	0c1a      	lsrs	r2, r3, #16
     92c:	fbbb f8f9 	udiv	r8, fp, r9
     930:	fb09 bb18 	mls	fp, r9, r8, fp
     934:	fb08 fa0e 	mul.w	sl, r8, lr
     938:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     93c:	4592      	cmp	sl, r2
     93e:	d93e      	bls.n	9be <CONFIG_ISR_STACK_SIZE+0x1be>
     940:	18a2      	adds	r2, r4, r2
     942:	f108 30ff 	add.w	r0, r8, #4294967295
     946:	d204      	bcs.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     948:	4592      	cmp	sl, r2
     94a:	d902      	bls.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     94c:	f1a8 0002 	sub.w	r0, r8, #2
     950:	4422      	add	r2, r4
     952:	eba2 020a 	sub.w	r2, r2, sl
     956:	b29b      	uxth	r3, r3
     958:	fbb2 f8f9 	udiv	r8, r2, r9
     95c:	fb09 2218 	mls	r2, r9, r8, r2
     960:	fb08 fe0e 	mul.w	lr, r8, lr
     964:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     968:	4596      	cmp	lr, r2
     96a:	d92a      	bls.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     96c:	18a2      	adds	r2, r4, r2
     96e:	f108 33ff 	add.w	r3, r8, #4294967295
     972:	d204      	bcs.n	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     974:	4596      	cmp	lr, r2
     976:	d902      	bls.n	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     978:	f1a8 0302 	sub.w	r3, r8, #2
     97c:	4422      	add	r2, r4
     97e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     982:	eba2 020e 	sub.w	r2, r2, lr
     986:	fba0 9305 	umull	r9, r3, r0, r5
     98a:	429a      	cmp	r2, r3
     98c:	46ce      	mov	lr, r9
     98e:	4698      	mov	r8, r3
     990:	d302      	bcc.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
     992:	d106      	bne.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     994:	454f      	cmp	r7, r9
     996:	d204      	bcs.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     998:	3801      	subs	r0, #1
     99a:	ebb9 0e05 	subs.w	lr, r9, r5
     99e:	eb63 0804 	sbc.w	r8, r3, r4
     9a2:	b186      	cbz	r6, 9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
     9a4:	ebb7 030e 	subs.w	r3, r7, lr
     9a8:	eb62 0708 	sbc.w	r7, r2, r8
     9ac:	fa07 fc0c 	lsl.w	ip, r7, ip
     9b0:	40cb      	lsrs	r3, r1
     9b2:	40cf      	lsrs	r7, r1
     9b4:	ea4c 0303 	orr.w	r3, ip, r3
     9b8:	e9c6 3700 	strd	r3, r7, [r6]
     9bc:	e79d      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
     9be:	4640      	mov	r0, r8
     9c0:	e7c7      	b.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     9c2:	4643      	mov	r3, r8
     9c4:	e7db      	b.n	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     9c6:	4631      	mov	r1, r6
     9c8:	e6ff      	b.n	7ca <__udivmoddi4+0xa2>
     9ca:	0000      	movs	r0, r0
     9cc:	0000      	movs	r0, r0
	...

000009d0 <axl362_acc_config>:

static int axl362_acc_config(const struct device *dev,
			     enum sensor_channel chan,
			     enum sensor_attribute attr,
			     const struct sensor_value *val)
{
     9d0:	b538      	push	{r3, r4, r5, lr}
     9d2:	4604      	mov	r4, r0
	switch (attr) {
     9d4:	2a00      	cmp	r2, #0
     9d6:	d044      	beq.n	a62 <axl362_acc_config+0x92>
     9d8:	2a07      	cmp	r2, #7
     9da:	d154      	bne.n	a86 <axl362_acc_config+0xb6>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
     9dc:	6818      	ldr	r0, [r3, #0]
     9de:	ea4f 7ee0 	mov.w	lr, r0, asr #31
     9e2:	ea4f 1c4e 	mov.w	ip, lr, lsl #5
     9e6:	ea4c 6cd0 	orr.w	ip, ip, r0, lsr #27
     9ea:	0141      	lsls	r1, r0, #5
     9ec:	1a09      	subs	r1, r1, r0
     9ee:	eb6c 0c0e 	sbc.w	ip, ip, lr
     9f2:	ea4f 2c4c 	mov.w	ip, ip, lsl #9
     9f6:	ea4c 5cd1 	orr.w	ip, ip, r1, lsr #23
     9fa:	0249      	lsls	r1, r1, #9
     9fc:	1809      	adds	r1, r1, r0
     9fe:	eb4e 0c0c 	adc.w	ip, lr, ip
     a02:	ea4f 158c 	mov.w	r5, ip, lsl #6
     a06:	ea45 6591 	orr.w	r5, r5, r1, lsr #26
     a0a:	018a      	lsls	r2, r1, #6
     a0c:	1a52      	subs	r2, r2, r1
     a0e:	eb65 0c0c 	sbc.w	ip, r5, ip
     a12:	1812      	adds	r2, r2, r0
     a14:	eb4e 0e0c 	adc.w	lr, lr, ip
     a18:	6859      	ldr	r1, [r3, #4]
     a1a:	188b      	adds	r3, r1, r2
     a1c:	eb4e 71e1 	adc.w	r1, lr, r1, asr #31

	if (micro_ms2 > 0) {
     a20:	2b01      	cmp	r3, #1
     a22:	f171 0200 	sbcs.w	r2, r1, #0
     a26:	db12      	blt.n	a4e <axl362_acc_config+0x7e>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
     a28:	481d      	ldr	r0, [pc, #116]	; (aa0 <axl362_acc_config+0xd0>)
     a2a:	1818      	adds	r0, r3, r0
     a2c:	a31a      	add	r3, pc, #104	; (adr r3, a98 <axl362_acc_config+0xc8>)
     a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
     a32:	f141 0100 	adc.w	r1, r1, #0
     a36:	f7ff fe0d 	bl	654 <__aeabi_ldivmod>
#if defined(CONFIG_ADXL362_ACCEL_RANGE_RUNTIME)
	case SENSOR_ATTR_FULL_SCALE:
	{
		int range_reg;

		range_reg = adxl362_range_to_reg_val(sensor_ms2_to_g(val));
     a3a:	b280      	uxth	r0, r0
     a3c:	f00f fb60 	bl	10100 <adxl362_range_to_reg_val>
		if (range_reg < 0) {
     a40:	1e01      	subs	r1, r0, #0
     a42:	db23      	blt.n	a8c <axl362_acc_config+0xbc>
			LOG_DBG("invalid range requested.");
			return -ENOTSUP;
		}

		return adxl362_set_range(dev, range_reg);
     a44:	b2c9      	uxtb	r1, r1
     a46:	4620      	mov	r0, r4
     a48:	f01c fade 	bl	1d008 <adxl362_set_range>
     a4c:	e01d      	b.n	a8a <axl362_acc_config+0xba>
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
     a4e:	4815      	ldr	r0, [pc, #84]	; (aa4 <axl362_acc_config+0xd4>)
     a50:	1818      	adds	r0, r3, r0
     a52:	a311      	add	r3, pc, #68	; (adr r3, a98 <axl362_acc_config+0xc8>)
     a54:	e9d3 2300 	ldrd	r2, r3, [r3]
     a58:	f161 0100 	sbc.w	r1, r1, #0
     a5c:	f7ff fdfa 	bl	654 <__aeabi_ldivmod>
     a60:	e7eb      	b.n	a3a <axl362_acc_config+0x6a>
	case SENSOR_ATTR_SAMPLING_FREQUENCY:
	{
		int out_rate;

		out_rate = adxl362_freq_to_odr_val(val->val1,
						   val->val2 / 1000);
     a62:	6859      	ldr	r1, [r3, #4]
     a64:	4a10      	ldr	r2, [pc, #64]	; (aa8 <axl362_acc_config+0xd8>)
     a66:	fb82 0201 	smull	r0, r2, r2, r1
     a6a:	17c9      	asrs	r1, r1, #31
     a6c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
		out_rate = adxl362_freq_to_odr_val(val->val1,
     a70:	b289      	uxth	r1, r1
     a72:	8818      	ldrh	r0, [r3, #0]
     a74:	f00f fb26 	bl	100c4 <adxl362_freq_to_odr_val>
		if (out_rate < 0) {
     a78:	1e01      	subs	r1, r0, #0
     a7a:	db0a      	blt.n	a92 <axl362_acc_config+0xc2>
			LOG_DBG("invalid output rate.");
			return -ENOTSUP;
		}

		return adxl362_set_output_rate(dev, out_rate);
     a7c:	b2c9      	uxtb	r1, r1
     a7e:	4620      	mov	r0, r4
     a80:	f01c fae7 	bl	1d052 <adxl362_set_output_rate>
     a84:	e001      	b.n	a8a <axl362_acc_config+0xba>
	switch (attr) {
     a86:	f06f 0085 	mvn.w	r0, #133	; 0x85
		LOG_DBG("Accel attribute not supported.");
		return -ENOTSUP;
	}

	return 0;
}
     a8a:	bd38      	pop	{r3, r4, r5, pc}
			return -ENOTSUP;
     a8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
     a90:	e7fb      	b.n	a8a <axl362_acc_config+0xba>
			return -ENOTSUP;
     a92:	f06f 0085 	mvn.w	r0, #133	; 0x85
     a96:	e7f8      	b.n	a8a <axl362_acc_config+0xba>
     a98:	0095a33a 	.word	0x0095a33a
     a9c:	00000000 	.word	0x00000000
     aa0:	004ad19d 	.word	0x004ad19d
     aa4:	ffb52e63 	.word	0xffb52e63
     aa8:	10624dd3 	.word	0x10624dd3

00000aac <mpu_ccc_cfg_changed_moi>:
	notify_enable_hum = (value == BT_GATT_CCC_NOTIFY);
	LOG_INF("Notification %s", notify_enable_hum ? "enabled" : "disabled");
}

static void mpu_ccc_cfg_changed_moi(const struct bt_gatt_attr *attr, uint16_t value)
{
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
	ARG_UNUSED(attr);
	notify_enable_moi = (value == BT_GATT_CCC_NOTIFY);
     ab2:	2901      	cmp	r1, #1
     ab4:	bf14      	ite	ne
     ab6:	2100      	movne	r1, #0
     ab8:	2101      	moveq	r1, #1
     aba:	4b2e      	ldr	r3, [pc, #184]	; (b74 <mpu_ccc_cfg_changed_moi+0xc8>)
     abc:	7019      	strb	r1, [r3, #0]
	LOG_INF("Notification %s", notify_enable_moi ? "enabled" : "disabled");
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	2b00      	cmp	r3, #0
     ac2:	d045      	beq.n	b50 <mpu_ccc_cfg_changed_moi+0xa4>
     ac4:	482c      	ldr	r0, [pc, #176]	; (b78 <mpu_ccc_cfg_changed_moi+0xcc>)
     ac6:	2302      	movs	r3, #2
     ac8:	713b      	strb	r3, [r7, #4]
     aca:	b088      	sub	sp, #32
     acc:	466b      	mov	r3, sp
     ace:	f113 0210 	adds.w	r2, r3, #16
     ad2:	d03f      	beq.n	b54 <mpu_ccc_cfg_changed_moi+0xa8>
     ad4:	f04f 0c0d 	mov.w	ip, #13
     ad8:	b122      	cbz	r2, ae4 <mpu_ccc_cfg_changed_moi+0x38>
     ada:	f1bc 0f04 	cmp.w	ip, #4
     ade:	dd01      	ble.n	ae4 <mpu_ccc_cfg_changed_moi+0x38>
     ae0:	4926      	ldr	r1, [pc, #152]	; (b7c <mpu_ccc_cfg_changed_moi+0xd0>)
     ae2:	6159      	str	r1, [r3, #20]
     ae4:	2102      	movs	r1, #2
     ae6:	7039      	strb	r1, [r7, #0]
     ae8:	b11a      	cbz	r2, af2 <mpu_ccc_cfg_changed_moi+0x46>
     aea:	f1bc 0f08 	cmp.w	ip, #8
     aee:	dd00      	ble.n	af2 <mpu_ccc_cfg_changed_moi+0x46>
     af0:	6198      	str	r0, [r3, #24]
     af2:	b11a      	cbz	r2, afc <mpu_ccc_cfg_changed_moi+0x50>
     af4:	f103 011c 	add.w	r1, r3, #28
     af8:	2000      	movs	r0, #0
     afa:	b370      	cbz	r0, b5a <mpu_ccc_cfg_changed_moi+0xae>
     afc:	f1bc 0f0c 	cmp.w	ip, #12
     b00:	dd34      	ble.n	b6c <mpu_ccc_cfg_changed_moi+0xc0>
     b02:	f04f 0c0d 	mov.w	ip, #13
     b06:	b142      	cbz	r2, b1a <mpu_ccc_cfg_changed_moi+0x6e>
     b08:	2103      	movs	r1, #3
     b0a:	7139      	strb	r1, [r7, #4]
     b0c:	2100      	movs	r1, #0
     b0e:	7179      	strb	r1, [r7, #5]
     b10:	71b9      	strb	r1, [r7, #6]
     b12:	2101      	movs	r1, #1
     b14:	71f9      	strb	r1, [r7, #7]
     b16:	6878      	ldr	r0, [r7, #4]
     b18:	6118      	str	r0, [r3, #16]
     b1a:	2100      	movs	r1, #0
     b1c:	f36f 0100 	bfc	r1, #0, #1
     b20:	f36f 0141 	bfc	r1, #1, #1
     b24:	f36f 0182 	bfc	r1, #2, #1
     b28:	f36f 01c5 	bfc	r1, #3, #3
     b2c:	2303      	movs	r3, #3
     b2e:	f363 1188 	bfi	r1, r3, #6, #3
     b32:	f3cc 0c09 	ubfx	ip, ip, #0, #10
     b36:	f36c 2152 	bfi	r1, ip, #9, #10
     b3a:	f36f 41de 	bfc	r1, #19, #12
     b3e:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     b42:	2300      	movs	r3, #0
     b44:	480e      	ldr	r0, [pc, #56]	; (b80 <mpu_ccc_cfg_changed_moi+0xd4>)
     b46:	f002 fdc1 	bl	36cc <z_impl_z_log_msg_static_create>
}
     b4a:	3708      	adds	r7, #8
     b4c:	46bd      	mov	sp, r7
     b4e:	bd80      	pop	{r7, pc}
	LOG_INF("Notification %s", notify_enable_moi ? "enabled" : "disabled");
     b50:	480c      	ldr	r0, [pc, #48]	; (b84 <mpu_ccc_cfg_changed_moi+0xd8>)
     b52:	e7b8      	b.n	ac6 <mpu_ccc_cfg_changed_moi+0x1a>
     b54:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
     b58:	e7be      	b.n	ad8 <mpu_ccc_cfg_changed_moi+0x2c>
     b5a:	f107 0e08 	add.w	lr, r7, #8
     b5e:	4486      	add	lr, r0
     b60:	f81e ec08 	ldrb.w	lr, [lr, #-8]
     b64:	f801 eb01 	strb.w	lr, [r1], #1
     b68:	3001      	adds	r0, #1
     b6a:	e7c6      	b.n	afa <mpu_ccc_cfg_changed_moi+0x4e>
     b6c:	f06f 0c1b 	mvn.w	ip, #27
     b70:	e7c9      	b.n	b06 <mpu_ccc_cfg_changed_moi+0x5a>
     b72:	bf00      	nop
     b74:	20002b71 	.word	0x20002b71
     b78:	00020764 	.word	0x00020764
     b7c:	0002076c 	.word	0x0002076c
     b80:	00020508 	.word	0x00020508
     b84:	00020758 	.word	0x00020758

00000b88 <mpu_ccc_cfg_changed_hum>:
{
     b88:	b580      	push	{r7, lr}
     b8a:	b082      	sub	sp, #8
     b8c:	af00      	add	r7, sp, #0
	notify_enable_hum = (value == BT_GATT_CCC_NOTIFY);
     b8e:	2901      	cmp	r1, #1
     b90:	bf14      	ite	ne
     b92:	2100      	movne	r1, #0
     b94:	2101      	moveq	r1, #1
     b96:	4b2e      	ldr	r3, [pc, #184]	; (c50 <mpu_ccc_cfg_changed_hum+0xc8>)
     b98:	7019      	strb	r1, [r3, #0]
	LOG_INF("Notification %s", notify_enable_hum ? "enabled" : "disabled");
     b9a:	781b      	ldrb	r3, [r3, #0]
     b9c:	2b00      	cmp	r3, #0
     b9e:	d045      	beq.n	c2c <mpu_ccc_cfg_changed_hum+0xa4>
     ba0:	482c      	ldr	r0, [pc, #176]	; (c54 <mpu_ccc_cfg_changed_hum+0xcc>)
     ba2:	2302      	movs	r3, #2
     ba4:	713b      	strb	r3, [r7, #4]
     ba6:	b088      	sub	sp, #32
     ba8:	466b      	mov	r3, sp
     baa:	f113 0210 	adds.w	r2, r3, #16
     bae:	d03f      	beq.n	c30 <mpu_ccc_cfg_changed_hum+0xa8>
     bb0:	f04f 0c0d 	mov.w	ip, #13
     bb4:	b122      	cbz	r2, bc0 <mpu_ccc_cfg_changed_hum+0x38>
     bb6:	f1bc 0f04 	cmp.w	ip, #4
     bba:	dd01      	ble.n	bc0 <mpu_ccc_cfg_changed_hum+0x38>
     bbc:	4926      	ldr	r1, [pc, #152]	; (c58 <mpu_ccc_cfg_changed_hum+0xd0>)
     bbe:	6159      	str	r1, [r3, #20]
     bc0:	2102      	movs	r1, #2
     bc2:	7039      	strb	r1, [r7, #0]
     bc4:	b11a      	cbz	r2, bce <mpu_ccc_cfg_changed_hum+0x46>
     bc6:	f1bc 0f08 	cmp.w	ip, #8
     bca:	dd00      	ble.n	bce <mpu_ccc_cfg_changed_hum+0x46>
     bcc:	6198      	str	r0, [r3, #24]
     bce:	b11a      	cbz	r2, bd8 <mpu_ccc_cfg_changed_hum+0x50>
     bd0:	f103 011c 	add.w	r1, r3, #28
     bd4:	2000      	movs	r0, #0
     bd6:	b370      	cbz	r0, c36 <mpu_ccc_cfg_changed_hum+0xae>
     bd8:	f1bc 0f0c 	cmp.w	ip, #12
     bdc:	dd34      	ble.n	c48 <mpu_ccc_cfg_changed_hum+0xc0>
     bde:	f04f 0c0d 	mov.w	ip, #13
     be2:	b142      	cbz	r2, bf6 <mpu_ccc_cfg_changed_hum+0x6e>
     be4:	2103      	movs	r1, #3
     be6:	7139      	strb	r1, [r7, #4]
     be8:	2100      	movs	r1, #0
     bea:	7179      	strb	r1, [r7, #5]
     bec:	71b9      	strb	r1, [r7, #6]
     bee:	2101      	movs	r1, #1
     bf0:	71f9      	strb	r1, [r7, #7]
     bf2:	6878      	ldr	r0, [r7, #4]
     bf4:	6118      	str	r0, [r3, #16]
     bf6:	2100      	movs	r1, #0
     bf8:	f36f 0100 	bfc	r1, #0, #1
     bfc:	f36f 0141 	bfc	r1, #1, #1
     c00:	f36f 0182 	bfc	r1, #2, #1
     c04:	f36f 01c5 	bfc	r1, #3, #3
     c08:	2303      	movs	r3, #3
     c0a:	f363 1188 	bfi	r1, r3, #6, #3
     c0e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
     c12:	f36c 2152 	bfi	r1, ip, #9, #10
     c16:	f36f 41de 	bfc	r1, #19, #12
     c1a:	f36f 71df 	bfc	r1, #31, #1
     c1e:	2300      	movs	r3, #0
     c20:	480e      	ldr	r0, [pc, #56]	; (c5c <mpu_ccc_cfg_changed_hum+0xd4>)
     c22:	f002 fd53 	bl	36cc <z_impl_z_log_msg_static_create>
}
     c26:	3708      	adds	r7, #8
     c28:	46bd      	mov	sp, r7
     c2a:	bd80      	pop	{r7, pc}
	LOG_INF("Notification %s", notify_enable_hum ? "enabled" : "disabled");
     c2c:	480c      	ldr	r0, [pc, #48]	; (c60 <mpu_ccc_cfg_changed_hum+0xd8>)
     c2e:	e7b8      	b.n	ba2 <mpu_ccc_cfg_changed_hum+0x1a>
     c30:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
     c34:	e7be      	b.n	bb4 <mpu_ccc_cfg_changed_hum+0x2c>
     c36:	f107 0e08 	add.w	lr, r7, #8
     c3a:	4486      	add	lr, r0
     c3c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
     c40:	f801 eb01 	strb.w	lr, [r1], #1
     c44:	3001      	adds	r0, #1
     c46:	e7c6      	b.n	bd6 <mpu_ccc_cfg_changed_hum+0x4e>
     c48:	f06f 0c1b 	mvn.w	ip, #27
     c4c:	e7c9      	b.n	be2 <mpu_ccc_cfg_changed_hum+0x5a>
     c4e:	bf00      	nop
     c50:	20002b70 	.word	0x20002b70
     c54:	00020764 	.word	0x00020764
     c58:	0002076c 	.word	0x0002076c
     c5c:	00020508 	.word	0x00020508
     c60:	00020758 	.word	0x00020758

00000c64 <mpu_ccc_cfg_changed_temp>:
{
     c64:	b580      	push	{r7, lr}
     c66:	b082      	sub	sp, #8
     c68:	af00      	add	r7, sp, #0
	notify_enable_temp = (value == BT_GATT_CCC_NOTIFY);
     c6a:	2901      	cmp	r1, #1
     c6c:	bf14      	ite	ne
     c6e:	2100      	movne	r1, #0
     c70:	2101      	moveq	r1, #1
     c72:	4b2e      	ldr	r3, [pc, #184]	; (d2c <mpu_ccc_cfg_changed_temp+0xc8>)
     c74:	7019      	strb	r1, [r3, #0]
	LOG_INF("Notification %s", notify_enable_temp ? "enabled" : "disabled");
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b00      	cmp	r3, #0
     c7a:	d045      	beq.n	d08 <mpu_ccc_cfg_changed_temp+0xa4>
     c7c:	482c      	ldr	r0, [pc, #176]	; (d30 <mpu_ccc_cfg_changed_temp+0xcc>)
     c7e:	2302      	movs	r3, #2
     c80:	713b      	strb	r3, [r7, #4]
     c82:	b088      	sub	sp, #32
     c84:	466b      	mov	r3, sp
     c86:	f113 0210 	adds.w	r2, r3, #16
     c8a:	d03f      	beq.n	d0c <mpu_ccc_cfg_changed_temp+0xa8>
     c8c:	f04f 0c0d 	mov.w	ip, #13
     c90:	b122      	cbz	r2, c9c <mpu_ccc_cfg_changed_temp+0x38>
     c92:	f1bc 0f04 	cmp.w	ip, #4
     c96:	dd01      	ble.n	c9c <mpu_ccc_cfg_changed_temp+0x38>
     c98:	4926      	ldr	r1, [pc, #152]	; (d34 <mpu_ccc_cfg_changed_temp+0xd0>)
     c9a:	6159      	str	r1, [r3, #20]
     c9c:	2102      	movs	r1, #2
     c9e:	7039      	strb	r1, [r7, #0]
     ca0:	b11a      	cbz	r2, caa <mpu_ccc_cfg_changed_temp+0x46>
     ca2:	f1bc 0f08 	cmp.w	ip, #8
     ca6:	dd00      	ble.n	caa <mpu_ccc_cfg_changed_temp+0x46>
     ca8:	6198      	str	r0, [r3, #24]
     caa:	b11a      	cbz	r2, cb4 <mpu_ccc_cfg_changed_temp+0x50>
     cac:	f103 011c 	add.w	r1, r3, #28
     cb0:	2000      	movs	r0, #0
     cb2:	b370      	cbz	r0, d12 <mpu_ccc_cfg_changed_temp+0xae>
     cb4:	f1bc 0f0c 	cmp.w	ip, #12
     cb8:	dd34      	ble.n	d24 <mpu_ccc_cfg_changed_temp+0xc0>
     cba:	f04f 0c0d 	mov.w	ip, #13
     cbe:	b142      	cbz	r2, cd2 <mpu_ccc_cfg_changed_temp+0x6e>
     cc0:	2103      	movs	r1, #3
     cc2:	7139      	strb	r1, [r7, #4]
     cc4:	2100      	movs	r1, #0
     cc6:	7179      	strb	r1, [r7, #5]
     cc8:	71b9      	strb	r1, [r7, #6]
     cca:	2101      	movs	r1, #1
     ccc:	71f9      	strb	r1, [r7, #7]
     cce:	6878      	ldr	r0, [r7, #4]
     cd0:	6118      	str	r0, [r3, #16]
     cd2:	2100      	movs	r1, #0
     cd4:	f36f 0100 	bfc	r1, #0, #1
     cd8:	f36f 0141 	bfc	r1, #1, #1
     cdc:	f36f 0182 	bfc	r1, #2, #1
     ce0:	f36f 01c5 	bfc	r1, #3, #3
     ce4:	2303      	movs	r3, #3
     ce6:	f363 1188 	bfi	r1, r3, #6, #3
     cea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
     cee:	f36c 2152 	bfi	r1, ip, #9, #10
     cf2:	f36f 41de 	bfc	r1, #19, #12
     cf6:	f36f 71df 	bfc	r1, #31, #1
     cfa:	2300      	movs	r3, #0
     cfc:	480e      	ldr	r0, [pc, #56]	; (d38 <mpu_ccc_cfg_changed_temp+0xd4>)
     cfe:	f002 fce5 	bl	36cc <z_impl_z_log_msg_static_create>
}
     d02:	3708      	adds	r7, #8
     d04:	46bd      	mov	sp, r7
     d06:	bd80      	pop	{r7, pc}
	LOG_INF("Notification %s", notify_enable_temp ? "enabled" : "disabled");
     d08:	480c      	ldr	r0, [pc, #48]	; (d3c <mpu_ccc_cfg_changed_temp+0xd8>)
     d0a:	e7b8      	b.n	c7e <mpu_ccc_cfg_changed_temp+0x1a>
     d0c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
     d10:	e7be      	b.n	c90 <mpu_ccc_cfg_changed_temp+0x2c>
     d12:	f107 0e08 	add.w	lr, r7, #8
     d16:	4486      	add	lr, r0
     d18:	f81e ec08 	ldrb.w	lr, [lr, #-8]
     d1c:	f801 eb01 	strb.w	lr, [r1], #1
     d20:	3001      	adds	r0, #1
     d22:	e7c6      	b.n	cb2 <mpu_ccc_cfg_changed_temp+0x4e>
     d24:	f06f 0c1b 	mvn.w	ip, #27
     d28:	e7c9      	b.n	cbe <mpu_ccc_cfg_changed_temp+0x5a>
     d2a:	bf00      	nop
     d2c:	20002b72 	.word	0x20002b72
     d30:	00020764 	.word	0x00020764
     d34:	0002076c 	.word	0x0002076c
     d38:	00020508 	.word	0x00020508
     d3c:	00020758 	.word	0x00020758

00000d40 <disconnected>:
		}
	}
}

static void disconnected(struct bt_conn *disconn, uint8_t reason)
{
     d40:	b590      	push	{r4, r7, lr}
     d42:	b083      	sub	sp, #12
     d44:	af00      	add	r7, sp, #0
     d46:	460c      	mov	r4, r1
	if (conn)
     d48:	4b22      	ldr	r3, [pc, #136]	; (dd4 <disconnected+0x94>)
     d4a:	6818      	ldr	r0, [r3, #0]
     d4c:	b120      	cbz	r0, d58 <disconnected+0x18>
	{
		bt_conn_unref(conn);
     d4e:	f019 fe56 	bl	1a9fe <bt_conn_unref>
		conn = NULL;
     d52:	4b20      	ldr	r3, [pc, #128]	; (dd4 <disconnected+0x94>)
     d54:	2200      	movs	r2, #0
     d56:	601a      	str	r2, [r3, #0]
	}

	LOG_INF("Disconnected (reason %u)", reason);
     d58:	b088      	sub	sp, #32
     d5a:	466b      	mov	r3, sp
     d5c:	f113 0210 	adds.w	r2, r3, #16
     d60:	d031      	beq.n	dc6 <disconnected+0x86>
     d62:	200c      	movs	r0, #12
     d64:	b11a      	cbz	r2, d6e <disconnected+0x2e>
     d66:	2804      	cmp	r0, #4
     d68:	dd01      	ble.n	d6e <disconnected+0x2e>
     d6a:	491b      	ldr	r1, [pc, #108]	; (dd8 <disconnected+0x98>)
     d6c:	6159      	str	r1, [r3, #20]
     d6e:	b112      	cbz	r2, d76 <disconnected+0x36>
     d70:	2808      	cmp	r0, #8
     d72:	dd00      	ble.n	d76 <disconnected+0x36>
     d74:	619c      	str	r4, [r3, #24]
     d76:	280b      	cmp	r0, #11
     d78:	dd28      	ble.n	dcc <disconnected+0x8c>
     d7a:	f04f 0c0c 	mov.w	ip, #12
     d7e:	b13a      	cbz	r2, d90 <disconnected+0x50>
     d80:	2103      	movs	r1, #3
     d82:	7139      	strb	r1, [r7, #4]
     d84:	2100      	movs	r1, #0
     d86:	7179      	strb	r1, [r7, #5]
     d88:	71b9      	strb	r1, [r7, #6]
     d8a:	71f9      	strb	r1, [r7, #7]
     d8c:	6878      	ldr	r0, [r7, #4]
     d8e:	6118      	str	r0, [r3, #16]
     d90:	2100      	movs	r1, #0
     d92:	f36f 0100 	bfc	r1, #0, #1
     d96:	f36f 0141 	bfc	r1, #1, #1
     d9a:	f36f 0182 	bfc	r1, #2, #1
     d9e:	f36f 01c5 	bfc	r1, #3, #3
     da2:	2303      	movs	r3, #3
     da4:	f363 1188 	bfi	r1, r3, #6, #3
     da8:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
     dac:	f36c 2152 	bfi	r1, ip, #9, #10
     db0:	f36f 41de 	bfc	r1, #19, #12
     db4:	f36f 71df 	bfc	r1, #31, #1
     db8:	2300      	movs	r3, #0
     dba:	4808      	ldr	r0, [pc, #32]	; (ddc <disconnected+0x9c>)
     dbc:	f002 fc86 	bl	36cc <z_impl_z_log_msg_static_create>
}
     dc0:	370c      	adds	r7, #12
     dc2:	46bd      	mov	sp, r7
     dc4:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Disconnected (reason %u)", reason);
     dc6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     dca:	e7cb      	b.n	d64 <disconnected+0x24>
     dcc:	f06f 0c1b 	mvn.w	ip, #27
     dd0:	e7d5      	b.n	d7e <disconnected+0x3e>
     dd2:	bf00      	nop
     dd4:	200018b0 	.word	0x200018b0
     dd8:	0002077c 	.word	0x0002077c
     ddc:	00020508 	.word	0x00020508

00000de0 <connected>:
{
     de0:	b5b0      	push	{r4, r5, r7, lr}
     de2:	b088      	sub	sp, #32
     de4:	af00      	add	r7, sp, #0
	if (err)
     de6:	2900      	cmp	r1, #0
     de8:	d03f      	beq.n	e6a <connected+0x8a>
     dea:	4608      	mov	r0, r1
		LOG_ERR("Connection failed (err %u)", err);
     dec:	466c      	mov	r4, sp
     dee:	b088      	sub	sp, #32
     df0:	466b      	mov	r3, sp
     df2:	f113 0210 	adds.w	r2, r3, #16
     df6:	d032      	beq.n	e5e <connected+0x7e>
     df8:	210c      	movs	r1, #12
     dfa:	b11a      	cbz	r2, e04 <connected+0x24>
     dfc:	2904      	cmp	r1, #4
     dfe:	dd01      	ble.n	e04 <connected+0x24>
     e00:	4d30      	ldr	r5, [pc, #192]	; (ec4 <connected+0xe4>)
     e02:	615d      	str	r5, [r3, #20]
     e04:	b112      	cbz	r2, e0c <connected+0x2c>
     e06:	2908      	cmp	r1, #8
     e08:	dd00      	ble.n	e0c <connected+0x2c>
     e0a:	6198      	str	r0, [r3, #24]
     e0c:	290b      	cmp	r1, #11
     e0e:	dd29      	ble.n	e64 <connected+0x84>
     e10:	f04f 0c0c 	mov.w	ip, #12
     e14:	b13a      	cbz	r2, e26 <connected+0x46>
     e16:	2103      	movs	r1, #3
     e18:	7139      	strb	r1, [r7, #4]
     e1a:	2100      	movs	r1, #0
     e1c:	7179      	strb	r1, [r7, #5]
     e1e:	71b9      	strb	r1, [r7, #6]
     e20:	71f9      	strb	r1, [r7, #7]
     e22:	6878      	ldr	r0, [r7, #4]
     e24:	6118      	str	r0, [r3, #16]
     e26:	2100      	movs	r1, #0
     e28:	f36f 0100 	bfc	r1, #0, #1
     e2c:	f36f 0141 	bfc	r1, #1, #1
     e30:	f36f 0182 	bfc	r1, #2, #1
     e34:	f36f 01c5 	bfc	r1, #3, #3
     e38:	2301      	movs	r3, #1
     e3a:	f363 1188 	bfi	r1, r3, #6, #3
     e3e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
     e42:	f36c 2152 	bfi	r1, ip, #9, #10
     e46:	f36f 41de 	bfc	r1, #19, #12
     e4a:	f36f 71df 	bfc	r1, #31, #1
     e4e:	2300      	movs	r3, #0
     e50:	481d      	ldr	r0, [pc, #116]	; (ec8 <connected+0xe8>)
     e52:	f002 fc3b 	bl	36cc <z_impl_z_log_msg_static_create>
     e56:	46a5      	mov	sp, r4
}
     e58:	3720      	adds	r7, #32
     e5a:	46bd      	mov	sp, r7
     e5c:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Connection failed (err %u)", err);
     e5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     e62:	e7ca      	b.n	dfa <connected+0x1a>
     e64:	f06f 0c1b 	mvn.w	ip, #27
     e68:	e7d4      	b.n	e14 <connected+0x34>
     e6a:	4604      	mov	r4, r0
		LOG_INF("Connected");
     e6c:	4b17      	ldr	r3, [pc, #92]	; (ecc <connected+0xec>)
     e6e:	61fb      	str	r3, [r7, #28]
     e70:	2302      	movs	r3, #2
     e72:	713b      	strb	r3, [r7, #4]
     e74:	2300      	movs	r3, #0
     e76:	717b      	strb	r3, [r7, #5]
     e78:	71bb      	strb	r3, [r7, #6]
     e7a:	71fb      	strb	r3, [r7, #7]
     e7c:	687a      	ldr	r2, [r7, #4]
     e7e:	61ba      	str	r2, [r7, #24]
     e80:	4619      	mov	r1, r3
     e82:	f363 0100 	bfi	r1, r3, #0, #1
     e86:	f363 0141 	bfi	r1, r3, #1, #1
     e8a:	f363 0182 	bfi	r1, r3, #2, #1
     e8e:	f363 01c5 	bfi	r1, r3, #3, #3
     e92:	2203      	movs	r2, #3
     e94:	f362 1188 	bfi	r1, r2, #6, #3
     e98:	2208      	movs	r2, #8
     e9a:	f362 2152 	bfi	r1, r2, #9, #10
     e9e:	f363 41de 	bfi	r1, r3, #19, #12
     ea2:	f363 71df 	bfi	r1, r3, #31, #1
     ea6:	f107 0218 	add.w	r2, r7, #24
     eaa:	4807      	ldr	r0, [pc, #28]	; (ec8 <connected+0xe8>)
     eac:	f002 fc0e 	bl	36cc <z_impl_z_log_msg_static_create>
		if (!conn)
     eb0:	4b07      	ldr	r3, [pc, #28]	; (ed0 <connected+0xf0>)
     eb2:	681b      	ldr	r3, [r3, #0]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d1cf      	bne.n	e58 <connected+0x78>
			conn = bt_conn_ref(connected);
     eb8:	4620      	mov	r0, r4
     eba:	f019 fd83 	bl	1a9c4 <bt_conn_ref>
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <connected+0xf0>)
     ec0:	6018      	str	r0, [r3, #0]
}
     ec2:	e7c9      	b.n	e58 <connected+0x78>
     ec4:	00020798 	.word	0x00020798
     ec8:	00020508 	.word	0x00020508
     ecc:	000207b4 	.word	0x000207b4
     ed0:	200018b0 	.word	0x200018b0

00000ed4 <bt_ready>:
{
     ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed6:	b095      	sub	sp, #84	; 0x54
     ed8:	af02      	add	r7, sp, #8
	if (err)
     eda:	2800      	cmp	r0, #0
     edc:	d03e      	beq.n	f5c <bt_ready+0x88>
     ede:	4604      	mov	r4, r0
		LOG_ERR("Bluetooth init failed (err %d)", err);
     ee0:	466d      	mov	r5, sp
     ee2:	b088      	sub	sp, #32
     ee4:	ab02      	add	r3, sp, #8
     ee6:	f113 0210 	adds.w	r2, r3, #16
     eea:	d031      	beq.n	f50 <bt_ready+0x7c>
     eec:	210c      	movs	r1, #12
     eee:	b11a      	cbz	r2, ef8 <bt_ready+0x24>
     ef0:	2904      	cmp	r1, #4
     ef2:	dd01      	ble.n	ef8 <bt_ready+0x24>
     ef4:	4864      	ldr	r0, [pc, #400]	; (1088 <CONFIG_HEAP_MEM_POOL_SIZE+0x88>)
     ef6:	6158      	str	r0, [r3, #20]
     ef8:	b112      	cbz	r2, f00 <bt_ready+0x2c>
     efa:	2908      	cmp	r1, #8
     efc:	dd00      	ble.n	f00 <bt_ready+0x2c>
     efe:	619c      	str	r4, [r3, #24]
     f00:	290b      	cmp	r1, #11
     f02:	dd28      	ble.n	f56 <bt_ready+0x82>
     f04:	240c      	movs	r4, #12
     f06:	b13a      	cbz	r2, f18 <bt_ready+0x44>
     f08:	2103      	movs	r1, #3
     f0a:	7039      	strb	r1, [r7, #0]
     f0c:	2100      	movs	r1, #0
     f0e:	7079      	strb	r1, [r7, #1]
     f10:	70b9      	strb	r1, [r7, #2]
     f12:	70f9      	strb	r1, [r7, #3]
     f14:	6838      	ldr	r0, [r7, #0]
     f16:	6118      	str	r0, [r3, #16]
     f18:	2100      	movs	r1, #0
     f1a:	f36f 0100 	bfc	r1, #0, #1
     f1e:	f36f 0141 	bfc	r1, #1, #1
     f22:	f36f 0182 	bfc	r1, #2, #1
     f26:	f36f 01c5 	bfc	r1, #3, #3
     f2a:	2301      	movs	r3, #1
     f2c:	f363 1188 	bfi	r1, r3, #6, #3
     f30:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     f34:	f363 2152 	bfi	r1, r3, #9, #10
     f38:	f36f 41de 	bfc	r1, #19, #12
     f3c:	f36f 71df 	bfc	r1, #31, #1
     f40:	2300      	movs	r3, #0
     f42:	4852      	ldr	r0, [pc, #328]	; (108c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>)
     f44:	f002 fbc2 	bl	36cc <z_impl_z_log_msg_static_create>
     f48:	46ad      	mov	sp, r5
}
     f4a:	374c      	adds	r7, #76	; 0x4c
     f4c:	46bd      	mov	sp, r7
     f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Bluetooth init failed (err %d)", err);
     f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     f54:	e7cb      	b.n	eee <bt_ready+0x1a>
     f56:	f06f 041b 	mvn.w	r4, #27
     f5a:	e7d4      	b.n	f06 <bt_ready+0x32>
	LOG_INF("Bluetooth initialized");
     f5c:	4b4c      	ldr	r3, [pc, #304]	; (1090 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>)
     f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
     f60:	2302      	movs	r3, #2
     f62:	703b      	strb	r3, [r7, #0]
     f64:	2400      	movs	r4, #0
     f66:	707c      	strb	r4, [r7, #1]
     f68:	70bc      	strb	r4, [r7, #2]
     f6a:	70fc      	strb	r4, [r7, #3]
     f6c:	683b      	ldr	r3, [r7, #0]
     f6e:	62bb      	str	r3, [r7, #40]	; 0x28
     f70:	4621      	mov	r1, r4
     f72:	f364 0100 	bfi	r1, r4, #0, #1
     f76:	f364 0141 	bfi	r1, r4, #1, #1
     f7a:	f364 0182 	bfi	r1, r4, #2, #1
     f7e:	f364 01c5 	bfi	r1, r4, #3, #3
     f82:	2603      	movs	r6, #3
     f84:	f366 1188 	bfi	r1, r6, #6, #3
     f88:	2308      	movs	r3, #8
     f8a:	f363 2152 	bfi	r1, r3, #9, #10
     f8e:	f364 41de 	bfi	r1, r4, #19, #12
     f92:	f364 71df 	bfi	r1, r4, #31, #1
     f96:	4623      	mov	r3, r4
     f98:	f107 0228 	add.w	r2, r7, #40	; 0x28
     f9c:	483b      	ldr	r0, [pc, #236]	; (108c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>)
     f9e:	f002 fb95 	bl	36cc <z_impl_z_log_msg_static_create>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);
     fa2:	f107 0c04 	add.w	ip, r7, #4
     fa6:	4d3b      	ldr	r5, [pc, #236]	; (1094 <CONFIG_HEAP_MEM_POOL_SIZE+0x94>)
     fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     faa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     fae:	682b      	ldr	r3, [r5, #0]
     fb0:	f8cc 3000 	str.w	r3, [ip]
     fb4:	9400      	str	r4, [sp, #0]
     fb6:	4623      	mov	r3, r4
     fb8:	4632      	mov	r2, r6
     fba:	4937      	ldr	r1, [pc, #220]	; (1098 <CONFIG_HEAP_MEM_POOL_SIZE+0x98>)
     fbc:	1d38      	adds	r0, r7, #4
     fbe:	f009 fdf7 	bl	abb0 <bt_le_adv_start>
	if (err)
     fc2:	4604      	mov	r4, r0
     fc4:	2800      	cmp	r0, #0
     fc6:	d03b      	beq.n	1040 <CONFIG_HEAP_MEM_POOL_SIZE+0x40>
		LOG_ERR("Advertising failed to start (err %d)", err);
     fc8:	466d      	mov	r5, sp
     fca:	b088      	sub	sp, #32
     fcc:	ab02      	add	r3, sp, #8
     fce:	f113 0210 	adds.w	r2, r3, #16
     fd2:	d02f      	beq.n	1034 <CONFIG_HEAP_MEM_POOL_SIZE+0x34>
     fd4:	210c      	movs	r1, #12
     fd6:	b11a      	cbz	r2, fe0 <bt_ready+0x10c>
     fd8:	2904      	cmp	r1, #4
     fda:	dd01      	ble.n	fe0 <bt_ready+0x10c>
     fdc:	482f      	ldr	r0, [pc, #188]	; (109c <CONFIG_HEAP_MEM_POOL_SIZE+0x9c>)
     fde:	6158      	str	r0, [r3, #20]
     fe0:	b112      	cbz	r2, fe8 <bt_ready+0x114>
     fe2:	2908      	cmp	r1, #8
     fe4:	dd00      	ble.n	fe8 <bt_ready+0x114>
     fe6:	619c      	str	r4, [r3, #24]
     fe8:	290b      	cmp	r1, #11
     fea:	dd26      	ble.n	103a <CONFIG_HEAP_MEM_POOL_SIZE+0x3a>
     fec:	240c      	movs	r4, #12
     fee:	b13a      	cbz	r2, 1000 <CONFIG_HEAP_MEM_POOL_SIZE>
     ff0:	2103      	movs	r1, #3
     ff2:	7039      	strb	r1, [r7, #0]
     ff4:	2100      	movs	r1, #0
     ff6:	7079      	strb	r1, [r7, #1]
     ff8:	70b9      	strb	r1, [r7, #2]
     ffa:	70f9      	strb	r1, [r7, #3]
     ffc:	6838      	ldr	r0, [r7, #0]
     ffe:	6118      	str	r0, [r3, #16]
    1000:	2100      	movs	r1, #0
    1002:	f36f 0100 	bfc	r1, #0, #1
    1006:	f36f 0141 	bfc	r1, #1, #1
    100a:	f36f 0182 	bfc	r1, #2, #1
    100e:	f36f 01c5 	bfc	r1, #3, #3
    1012:	2301      	movs	r3, #1
    1014:	f363 1188 	bfi	r1, r3, #6, #3
    1018:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    101c:	f363 2152 	bfi	r1, r3, #9, #10
    1020:	f36f 41de 	bfc	r1, #19, #12
    1024:	f36f 71df 	bfc	r1, #31, #1
    1028:	2300      	movs	r3, #0
    102a:	4818      	ldr	r0, [pc, #96]	; (108c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>)
    102c:	f002 fb4e 	bl	36cc <z_impl_z_log_msg_static_create>
    1030:	46ad      	mov	sp, r5
		return;
    1032:	e78a      	b.n	f4a <bt_ready+0x76>
		LOG_ERR("Advertising failed to start (err %d)", err);
    1034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1038:	e7cd      	b.n	fd6 <bt_ready+0x102>
    103a:	f06f 041b 	mvn.w	r4, #27
    103e:	e7d6      	b.n	fee <bt_ready+0x11a>
	LOG_INF("Configuration mode: waiting connections...");
    1040:	4b17      	ldr	r3, [pc, #92]	; (10a0 <CONFIG_HEAP_MEM_POOL_SIZE+0xa0>)
    1042:	647b      	str	r3, [r7, #68]	; 0x44
    1044:	2302      	movs	r3, #2
    1046:	703b      	strb	r3, [r7, #0]
    1048:	2300      	movs	r3, #0
    104a:	707b      	strb	r3, [r7, #1]
    104c:	70bb      	strb	r3, [r7, #2]
    104e:	70fb      	strb	r3, [r7, #3]
    1050:	683a      	ldr	r2, [r7, #0]
    1052:	643a      	str	r2, [r7, #64]	; 0x40
    1054:	4619      	mov	r1, r3
    1056:	f363 0100 	bfi	r1, r3, #0, #1
    105a:	f363 0141 	bfi	r1, r3, #1, #1
    105e:	f363 0182 	bfi	r1, r3, #2, #1
    1062:	f363 01c5 	bfi	r1, r3, #3, #3
    1066:	2203      	movs	r2, #3
    1068:	f362 1188 	bfi	r1, r2, #6, #3
    106c:	2208      	movs	r2, #8
    106e:	f362 2152 	bfi	r1, r2, #9, #10
    1072:	f363 41de 	bfi	r1, r3, #19, #12
    1076:	f363 71df 	bfi	r1, r3, #31, #1
    107a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    107e:	4803      	ldr	r0, [pc, #12]	; (108c <CONFIG_HEAP_MEM_POOL_SIZE+0x8c>)
    1080:	f002 fb24 	bl	36cc <z_impl_z_log_msg_static_create>
    1084:	e761      	b.n	f4a <bt_ready+0x76>
    1086:	bf00      	nop
    1088:	000207c0 	.word	0x000207c0
    108c:	00020508 	.word	0x00020508
    1090:	000207e0 	.word	0x000207e0
    1094:	00020670 	.word	0x00020670
    1098:	000208bc 	.word	0x000208bc
    109c:	000207f8 	.word	0x000207f8
    10a0:	00020820 	.word	0x00020820

000010a4 <main>:
	.connected = connected,
	.disconnected = disconnected,
};

void main(void)
{
    10a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a8:	b0a3      	sub	sp, #140	; 0x8c
    10aa:	af00      	add	r7, sp, #0
	// Initialize the Sensor Subsystem
	int err = sensor_init();
    10ac:	f000 fbc0 	bl	1830 <sensor_init>
	if (err)
    10b0:	2800      	cmp	r0, #0
    10b2:	d03c      	beq.n	112e <main+0x8a>
    10b4:	4684      	mov	ip, r0
	{
		LOG_ERR("Failed to initialize sensor: %d", err);
    10b6:	46e8      	mov	r8, sp
    10b8:	b088      	sub	sp, #32
    10ba:	466b      	mov	r3, sp
    10bc:	f113 0210 	adds.w	r2, r3, #16
    10c0:	f000 8087 	beq.w	11d2 <main+0x12e>
    10c4:	210c      	movs	r1, #12
    10c6:	b11a      	cbz	r2, 10d0 <main+0x2c>
    10c8:	2904      	cmp	r1, #4
    10ca:	dd01      	ble.n	10d0 <main+0x2c>
    10cc:	484f      	ldr	r0, [pc, #316]	; (120c <main+0x168>)
    10ce:	6158      	str	r0, [r3, #20]
    10d0:	b11a      	cbz	r2, 10da <main+0x36>
    10d2:	2908      	cmp	r1, #8
    10d4:	dd01      	ble.n	10da <main+0x36>
    10d6:	f8c3 c018 	str.w	ip, [r3, #24]
    10da:	290b      	cmp	r1, #11
    10dc:	dd7c      	ble.n	11d8 <main+0x134>
    10de:	f04f 0c0c 	mov.w	ip, #12
    10e2:	b15a      	cbz	r2, 10fc <main+0x58>
    10e4:	2103      	movs	r1, #3
    10e6:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    10ea:	2100      	movs	r1, #0
    10ec:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    10f0:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    10f4:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    10f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    10fa:	6118      	str	r0, [r3, #16]
    10fc:	2100      	movs	r1, #0
    10fe:	f36f 0100 	bfc	r1, #0, #1
    1102:	f36f 0141 	bfc	r1, #1, #1
    1106:	f36f 0182 	bfc	r1, #2, #1
    110a:	f36f 01c5 	bfc	r1, #3, #3
    110e:	2301      	movs	r3, #1
    1110:	f363 1188 	bfi	r1, r3, #6, #3
    1114:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    1118:	f363 2152 	bfi	r1, r3, #9, #10
    111c:	f36f 41de 	bfc	r1, #19, #12
    1120:	f36f 71df 	bfc	r1, #31, #1
    1124:	2300      	movs	r3, #0
    1126:	483a      	ldr	r0, [pc, #232]	; (1210 <main+0x16c>)
    1128:	f002 fad0 	bl	36cc <z_impl_z_log_msg_static_create>
    112c:	46c5      	mov	sp, r8
	}

	// Initialize the Bluetooth Subsystem
	err = bt_enable(bt_ready);
    112e:	4839      	ldr	r0, [pc, #228]	; (1214 <main+0x170>)
    1130:	f008 fe0e 	bl	9d50 <bt_enable>
	if (err)
    1134:	4684      	mov	ip, r0
    1136:	b3d0      	cbz	r0, 11ae <main+0x10a>
	{
		LOG_ERR("Bluetooth init failed (err %d)", err);
    1138:	46e8      	mov	r8, sp
    113a:	b088      	sub	sp, #32
    113c:	466b      	mov	r3, sp
    113e:	f113 0210 	adds.w	r2, r3, #16
    1142:	d04c      	beq.n	11de <main+0x13a>
    1144:	210c      	movs	r1, #12
    1146:	b11a      	cbz	r2, 1150 <main+0xac>
    1148:	2904      	cmp	r1, #4
    114a:	dd01      	ble.n	1150 <main+0xac>
    114c:	4832      	ldr	r0, [pc, #200]	; (1218 <main+0x174>)
    114e:	6158      	str	r0, [r3, #20]
    1150:	b11a      	cbz	r2, 115a <main+0xb6>
    1152:	2908      	cmp	r1, #8
    1154:	dd01      	ble.n	115a <main+0xb6>
    1156:	f8c3 c018 	str.w	ip, [r3, #24]
    115a:	290b      	cmp	r1, #11
    115c:	dd42      	ble.n	11e4 <main+0x140>
    115e:	f04f 0c0c 	mov.w	ip, #12
    1162:	b15a      	cbz	r2, 117c <main+0xd8>
    1164:	2103      	movs	r1, #3
    1166:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    116a:	2100      	movs	r1, #0
    116c:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    1170:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    1174:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    1178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    117a:	6118      	str	r0, [r3, #16]
    117c:	2100      	movs	r1, #0
    117e:	f36f 0100 	bfc	r1, #0, #1
    1182:	f36f 0141 	bfc	r1, #1, #1
    1186:	f36f 0182 	bfc	r1, #2, #1
    118a:	f36f 01c5 	bfc	r1, #3, #3
    118e:	2301      	movs	r3, #1
    1190:	f363 1188 	bfi	r1, r3, #6, #3
    1194:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    1198:	f363 2152 	bfi	r1, r3, #9, #10
    119c:	f36f 41de 	bfc	r1, #19, #12
    11a0:	f36f 71df 	bfc	r1, #31, #1
    11a4:	2300      	movs	r3, #0
    11a6:	481a      	ldr	r0, [pc, #104]	; (1210 <main+0x16c>)
    11a8:	f002 fa90 	bl	36cc <z_impl_z_log_msg_static_create>
    11ac:	46c5      	mov	sp, r8
	}

	gpio_pin_configure_dt(&counters, GPIO_INPUT);
    11ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    11b2:	481a      	ldr	r0, [pc, #104]	; (121c <main+0x178>)
    11b4:	f016 fdf8 	bl	17da8 <gpio_pin_configure_dt>
	gpio_pin_configure_dt(&enabler, GPIO_INPUT);
    11b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    11bc:	4818      	ldr	r0, [pc, #96]	; (1220 <main+0x17c>)
    11be:	f016 fdf3 	bl	17da8 <gpio_pin_configure_dt>
	uint16_t counter = 0;
	uint16_t counterMemory = 0;
	int flagSave = 0;
	int flagIN = 0;
	int flagOUT = 0;
    11c2:	2300      	movs	r3, #0
    11c4:	613b      	str	r3, [r7, #16]
	int flagIN = 0;
    11c6:	60fb      	str	r3, [r7, #12]
	int flagSave = 0;
    11c8:	617b      	str	r3, [r7, #20]
	uint16_t counterMemory = 0;
    11ca:	60bb      	str	r3, [r7, #8]
	uint16_t counter = 0;
    11cc:	61fb      	str	r3, [r7, #28]
    11ce:	46a0      	mov	r8, r4
    11d0:	e1ef      	b.n	15b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22a>
		LOG_ERR("Failed to initialize sensor: %d", err);
    11d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    11d6:	e776      	b.n	10c6 <main+0x22>
    11d8:	f06f 0c1b 	mvn.w	ip, #27
    11dc:	e781      	b.n	10e2 <main+0x3e>
		LOG_ERR("Bluetooth init failed (err %d)", err);
    11de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    11e2:	e7b0      	b.n	1146 <main+0xa2>
    11e4:	f06f 0c1b 	mvn.w	ip, #27
    11e8:	e7bb      	b.n	1162 <main+0xbe>
		if (!gpio_pin_get_dt(&enabler))
		{
			flagSave = 1;
			if (!gpio_pin_get_dt(&counters))
			{
				flagIN = true;
    11ea:	2301      	movs	r3, #1
    11ec:	60fb      	str	r3, [r7, #12]
    11ee:	e211      	b.n	1614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28c>
				flagOUT = false;
			}
			if (gpio_pin_get_dt(&counters))
			{
				flagOUT = true;
    11f0:	2301      	movs	r3, #1
    11f2:	613b      	str	r3, [r7, #16]
			}
			if (flagOUT && flagIN)
    11f4:	68fa      	ldr	r2, [r7, #12]
    11f6:	2a00      	cmp	r2, #0
    11f8:	f000 82dc 	beq.w	17b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42c>
			{
				flagIN = false;
				flagOUT = false;
				counter++;
    11fc:	69fb      	ldr	r3, [r7, #28]
    11fe:	3301      	adds	r3, #1
    1200:	b29b      	uxth	r3, r3
    1202:	61fb      	str	r3, [r7, #28]
				flagOUT = false;
    1204:	613c      	str	r4, [r7, #16]
			flagSave = 1;
    1206:	617a      	str	r2, [r7, #20]
				flagIN = false;
    1208:	60fc      	str	r4, [r7, #12]
    120a:	e1ce      	b.n	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
    120c:	0002084c 	.word	0x0002084c
    1210:	00020508 	.word	0x00020508
    1214:	00000ed5 	.word	0x00000ed5
    1218:	000207c0 	.word	0x000207c0
    121c:	000209c4 	.word	0x000209c4
    1220:	000209cc 	.word	0x000209cc
			}
		}
		else
		{
			float temps = 0;
    1224:	2300      	movs	r3, #0
    1226:	623b      	str	r3, [r7, #32]
			float hums = 0;
    1228:	627b      	str	r3, [r7, #36]	; 0x24

			if (flagSave)
    122a:	697b      	ldr	r3, [r7, #20]
    122c:	2b00      	cmp	r3, #0
    122e:	f040 820d 	bne.w	164c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c4>
    1232:	69fb      	ldr	r3, [r7, #28]
    1234:	61bb      	str	r3, [r7, #24]
    1236:	68bb      	ldr	r3, [r7, #8]
    1238:	61fb      	str	r3, [r7, #28]
				counterMemory = counter;
				flagSave = 0;
				counter = 0;
			}

			int err = sensor_update_measurements();
    123a:	f000 fb33 	bl	18a4 <sensor_update_measurements>
			if (err)
    123e:	2800      	cmp	r0, #0
    1240:	f040 8208 	bne.w	1654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2cc>
			{
				LOG_ERR("Failed to update sensor");
			}

			sensor_get_temperature(&temps);
    1244:	f107 0020 	add.w	r0, r7, #32
    1248:	f000 fb66 	bl	1918 <sensor_get_temperature>
			sensor_get_humidity(&hums);
    124c:	f107 0024 	add.w	r0, r7, #36	; 0x24
    1250:	f000 fc0e 	bl	1a70 <sensor_get_humidity>

			temp = (uint16_t)(temps * 100);
    1254:	49b7      	ldr	r1, [pc, #732]	; (1534 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ac>)
    1256:	6a38      	ldr	r0, [r7, #32]
    1258:	f7ff f88c 	bl	374 <__aeabi_fmul>
    125c:	f7ff f9da 	bl	614 <__aeabi_f2uiz>
    1260:	b280      	uxth	r0, r0
    1262:	4bb5      	ldr	r3, [pc, #724]	; (1538 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b0>)
    1264:	8018      	strh	r0, [r3, #0]
			LOG_INF("%d", temp/100);
    1266:	4bb5      	ldr	r3, [pc, #724]	; (153c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b4>)
    1268:	fba3 3000 	umull	r3, r0, r3, r0
    126c:	0940      	lsrs	r0, r0, #5
    126e:	466c      	mov	r4, sp
    1270:	b088      	sub	sp, #32
    1272:	466b      	mov	r3, sp
    1274:	f113 0210 	adds.w	r2, r3, #16
    1278:	f000 8213 	beq.w	16a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31a>
    127c:	210c      	movs	r1, #12
    127e:	b12a      	cbz	r2, 128c <main+0x1e8>
    1280:	2904      	cmp	r1, #4
    1282:	dd03      	ble.n	128c <main+0x1e8>
    1284:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
    1288:	f8c3 c014 	str.w	ip, [r3, #20]
    128c:	b112      	cbz	r2, 1294 <main+0x1f0>
    128e:	2908      	cmp	r1, #8
    1290:	dd00      	ble.n	1294 <main+0x1f0>
    1292:	6198      	str	r0, [r3, #24]
    1294:	290b      	cmp	r1, #11
    1296:	f340 8207 	ble.w	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
    129a:	210c      	movs	r1, #12
    129c:	b15a      	cbz	r2, 12b6 <main+0x212>
    129e:	2003      	movs	r0, #3
    12a0:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    12a4:	2000      	movs	r0, #0
    12a6:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    12aa:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    12ae:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    12b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    12b4:	6118      	str	r0, [r3, #16]
    12b6:	f36f 0500 	bfc	r5, #0, #1
    12ba:	f36f 0541 	bfc	r5, #1, #1
    12be:	f36f 0582 	bfc	r5, #2, #1
    12c2:	f36f 05c5 	bfc	r5, #3, #3
    12c6:	2303      	movs	r3, #3
    12c8:	f363 1588 	bfi	r5, r3, #6, #3
    12cc:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
    12d0:	f361 2552 	bfi	r5, r1, #9, #10
    12d4:	f36f 45de 	bfc	r5, #19, #12
    12d8:	f36f 75df 	bfc	r5, #31, #1
    12dc:	2300      	movs	r3, #0
    12de:	4629      	mov	r1, r5
    12e0:	4898      	ldr	r0, [pc, #608]	; (1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>)
    12e2:	f002 f9f3 	bl	36cc <z_impl_z_log_msg_static_create>
    12e6:	46a5      	mov	sp, r4
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    12e8:	2021      	movs	r0, #33	; 0x21
    12ea:	2100      	movs	r1, #0
    12ec:	f015 fe2a 	bl	16f44 <z_impl_k_sleep>
			k_msleep(1);
			hum = (uint16_t)hums;
    12f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    12f2:	f7ff f98f 	bl	614 <__aeabi_f2uiz>
    12f6:	b280      	uxth	r0, r0
    12f8:	4b93      	ldr	r3, [pc, #588]	; (1548 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c0>)
    12fa:	8018      	strh	r0, [r3, #0]
			LOG_INF("%d", hum);
    12fc:	466c      	mov	r4, sp
    12fe:	b088      	sub	sp, #32
    1300:	466b      	mov	r3, sp
    1302:	f113 0210 	adds.w	r2, r3, #16
    1306:	f000 81d2 	beq.w	16ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x326>
    130a:	210c      	movs	r1, #12
    130c:	b12a      	cbz	r2, 131a <main+0x276>
    130e:	2904      	cmp	r1, #4
    1310:	dd03      	ble.n	131a <main+0x276>
    1312:	f8df c22c 	ldr.w	ip, [pc, #556]	; 1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
    1316:	f8c3 c014 	str.w	ip, [r3, #20]
    131a:	b112      	cbz	r2, 1322 <main+0x27e>
    131c:	2908      	cmp	r1, #8
    131e:	dd00      	ble.n	1322 <main+0x27e>
    1320:	6198      	str	r0, [r3, #24]
    1322:	290b      	cmp	r1, #11
    1324:	f340 81c6 	ble.w	16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>
    1328:	210c      	movs	r1, #12
    132a:	b15a      	cbz	r2, 1344 <main+0x2a0>
    132c:	2003      	movs	r0, #3
    132e:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    1332:	2000      	movs	r0, #0
    1334:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    1338:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    133c:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    1340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1342:	6118      	str	r0, [r3, #16]
    1344:	f36f 0600 	bfc	r6, #0, #1
    1348:	f36f 0641 	bfc	r6, #1, #1
    134c:	f36f 0682 	bfc	r6, #2, #1
    1350:	f36f 06c5 	bfc	r6, #3, #3
    1354:	2303      	movs	r3, #3
    1356:	f363 1688 	bfi	r6, r3, #6, #3
    135a:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
    135e:	f361 2652 	bfi	r6, r1, #9, #10
    1362:	f36f 46de 	bfc	r6, #19, #12
    1366:	f36f 76df 	bfc	r6, #31, #1
    136a:	2300      	movs	r3, #0
    136c:	4631      	mov	r1, r6
    136e:	4875      	ldr	r0, [pc, #468]	; (1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>)
    1370:	f002 f9ac 	bl	36cc <z_impl_z_log_msg_static_create>
    1374:	46a5      	mov	sp, r4
    1376:	2021      	movs	r0, #33	; 0x21
    1378:	2100      	movs	r1, #0
    137a:	f015 fde3 	bl	16f44 <z_impl_k_sleep>
			k_msleep(1);
			hum = hum << 8;
    137e:	4a72      	ldr	r2, [pc, #456]	; (1548 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c0>)
    1380:	8813      	ldrh	r3, [r2, #0]
    1382:	021b      	lsls	r3, r3, #8
    1384:	b29b      	uxth	r3, r3
    1386:	8013      	strh	r3, [r2, #0]
			hum += counterMemory;
    1388:	69f9      	ldr	r1, [r7, #28]
    138a:	440b      	add	r3, r1
    138c:	8013      	strh	r3, [r2, #0]
			moi = counterMemory;
    138e:	4b6f      	ldr	r3, [pc, #444]	; (154c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c4>)
    1390:	8019      	strh	r1, [r3, #0]
			LOG_INF("%d", moi);
    1392:	4608      	mov	r0, r1
    1394:	466c      	mov	r4, sp
    1396:	b088      	sub	sp, #32
    1398:	466b      	mov	r3, sp
    139a:	f113 0210 	adds.w	r2, r3, #16
    139e:	f000 818c 	beq.w	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
    13a2:	210c      	movs	r1, #12
    13a4:	b12a      	cbz	r2, 13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
    13a6:	2904      	cmp	r1, #4
    13a8:	dd03      	ble.n	13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
    13aa:	f8df c194 	ldr.w	ip, [pc, #404]	; 1540 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b8>
    13ae:	f8c3 c014 	str.w	ip, [r3, #20]
    13b2:	b112      	cbz	r2, 13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    13b4:	2908      	cmp	r1, #8
    13b6:	dd00      	ble.n	13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    13b8:	6198      	str	r0, [r3, #24]
    13ba:	290b      	cmp	r1, #11
    13bc:	f340 8180 	ble.w	16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>
    13c0:	210c      	movs	r1, #12
    13c2:	b15a      	cbz	r2, 13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13c4:	2003      	movs	r0, #3
    13c6:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    13ca:	2000      	movs	r0, #0
    13cc:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    13d0:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    13d4:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    13d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    13da:	6118      	str	r0, [r3, #16]
    13dc:	f36f 0a00 	bfc	sl, #0, #1
    13e0:	f36f 0a41 	bfc	sl, #1, #1
    13e4:	f36f 0a82 	bfc	sl, #2, #1
    13e8:	f36f 0ac5 	bfc	sl, #3, #3
    13ec:	2303      	movs	r3, #3
    13ee:	f363 1a88 	bfi	sl, r3, #6, #3
    13f2:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
    13f6:	f361 2a52 	bfi	sl, r1, #9, #10
    13fa:	f36f 4ade 	bfc	sl, #19, #12
    13fe:	f36f 7adf 	bfc	sl, #31, #1
    1402:	2300      	movs	r3, #0
    1404:	4651      	mov	r1, sl
    1406:	484f      	ldr	r0, [pc, #316]	; (1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>)
    1408:	f002 f960 	bl	36cc <z_impl_z_log_msg_static_create>
    140c:	46a5      	mov	sp, r4
    140e:	2021      	movs	r0, #33	; 0x21
    1410:	2100      	movs	r1, #0
    1412:	f015 fd97 	bl	16f44 <z_impl_k_sleep>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    1416:	2218      	movs	r2, #24
    1418:	2100      	movs	r1, #0
    141a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    141e:	f018 fe43 	bl	1a0a8 <memset>

	params.attr = attr;
    1422:	4b4b      	ldr	r3, [pc, #300]	; (1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>)
    1424:	62fb      	str	r3, [r7, #44]	; 0x2c
	params.data = data;
    1426:	4b44      	ldr	r3, [pc, #272]	; (1538 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1b0>)
    1428:	633b      	str	r3, [r7, #48]	; 0x30
	params.len = len;
    142a:	2302      	movs	r3, #2
    142c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    142e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1432:	2000      	movs	r0, #0
    1434:	f00d fd02 	bl	ee3c <bt_gatt_notify_cb>
			k_msleep(1);

			err = bt_gatt_notify(NULL, &stsensor_svc.attrs[2],
								 &temp, sizeof(temp));
			if (err)
    1438:	4684      	mov	ip, r0
    143a:	2800      	cmp	r0, #0
    143c:	f000 8149 	beq.w	16d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34a>
			{
				LOG_ERR("Notify error: %d", err);
    1440:	466c      	mov	r4, sp
    1442:	b088      	sub	sp, #32
    1444:	466b      	mov	r3, sp
    1446:	f113 0210 	adds.w	r2, r3, #16
    144a:	f000 813c 	beq.w	16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    144e:	210c      	movs	r1, #12
    1450:	b11a      	cbz	r2, 145a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd2>
    1452:	2904      	cmp	r1, #4
    1454:	dd01      	ble.n	145a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd2>
    1456:	483f      	ldr	r0, [pc, #252]	; (1554 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1cc>)
    1458:	6158      	str	r0, [r3, #20]
    145a:	b11a      	cbz	r2, 1464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc>
    145c:	2908      	cmp	r1, #8
    145e:	dd01      	ble.n	1464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc>
    1460:	f8c3 c018 	str.w	ip, [r3, #24]
    1464:	290b      	cmp	r1, #11
    1466:	f340 8131 	ble.w	16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>
    146a:	210c      	movs	r1, #12
    146c:	b15a      	cbz	r2, 1486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfe>
    146e:	2003      	movs	r0, #3
    1470:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    1474:	2000      	movs	r0, #0
    1476:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    147a:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    147e:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    1482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1484:	6118      	str	r0, [r3, #16]
    1486:	f36f 0800 	bfc	r8, #0, #1
    148a:	f36f 0841 	bfc	r8, #1, #1
    148e:	f36f 0882 	bfc	r8, #2, #1
    1492:	f36f 08c5 	bfc	r8, #3, #3
    1496:	2301      	movs	r3, #1
    1498:	f363 1888 	bfi	r8, r3, #6, #3
    149c:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
    14a0:	f363 2852 	bfi	r8, r3, #9, #10
    14a4:	f36f 48de 	bfc	r8, #19, #12
    14a8:	f36f 78df 	bfc	r8, #31, #1
    14ac:	2300      	movs	r3, #0
    14ae:	4641      	mov	r1, r8
    14b0:	4824      	ldr	r0, [pc, #144]	; (1544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1bc>)
    14b2:	f002 f90b 	bl	36cc <z_impl_z_log_msg_static_create>
    14b6:	46a5      	mov	sp, r4
    14b8:	f640 40cd 	movw	r0, #3277	; 0xccd
    14bc:	2100      	movs	r1, #0
    14be:	f015 fd41 	bl	16f44 <z_impl_k_sleep>
	memset(&params, 0, sizeof(params));
    14c2:	2218      	movs	r2, #24
    14c4:	2100      	movs	r1, #0
    14c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
    14ca:	f018 fded 	bl	1a0a8 <memset>
	params.attr = attr;
    14ce:	4b22      	ldr	r3, [pc, #136]	; (1558 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d0>)
    14d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	params.data = data;
    14d2:	4b1d      	ldr	r3, [pc, #116]	; (1548 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c0>)
    14d4:	633b      	str	r3, [r7, #48]	; 0x30
	params.len = len;
    14d6:	2302      	movs	r3, #2
    14d8:	86bb      	strh	r3, [r7, #52]	; 0x34
	return bt_gatt_notify_cb(conn, &params);
    14da:	f107 0128 	add.w	r1, r7, #40	; 0x28
    14de:	2000      	movs	r0, #0
    14e0:	f00d fcac 	bl	ee3c <bt_gatt_notify_cb>
				temp = (temp == 0) ? 0x100 : 0;
			}
			k_msleep(100);
			err = bt_gatt_notify(NULL, &stsensor_svc.attrs[5],
								 &hum, sizeof(hum));
			if (err)
    14e4:	4684      	mov	ip, r0
    14e6:	2800      	cmp	r0, #0
    14e8:	f000 812b 	beq.w	1742 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ba>
			{
				LOG_ERR("Notify error: %d", err);
    14ec:	466c      	mov	r4, sp
    14ee:	b088      	sub	sp, #32
    14f0:	466b      	mov	r3, sp
    14f2:	f113 0210 	adds.w	r2, r3, #16
    14f6:	f000 811e 	beq.w	1736 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ae>
    14fa:	210c      	movs	r1, #12
    14fc:	b11a      	cbz	r2, 1506 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17e>
    14fe:	2904      	cmp	r1, #4
    1500:	dd01      	ble.n	1506 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17e>
    1502:	4814      	ldr	r0, [pc, #80]	; (1554 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1cc>)
    1504:	6158      	str	r0, [r3, #20]
    1506:	b11a      	cbz	r2, 1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>
    1508:	2908      	cmp	r1, #8
    150a:	dd01      	ble.n	1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>
    150c:	f8c3 c018 	str.w	ip, [r3, #24]
    1510:	290b      	cmp	r1, #11
    1512:	f340 8113 	ble.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
    1516:	210c      	movs	r1, #12
    1518:	b302      	cbz	r2, 155c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d4>
    151a:	2003      	movs	r0, #3
    151c:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
    1520:	2000      	movs	r0, #0
    1522:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
    1526:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
    152a:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
    152e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1530:	6118      	str	r0, [r3, #16]
    1532:	e013      	b.n	155c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d4>
    1534:	42c80000 	.word	0x42c80000
    1538:	20002b6c 	.word	0x20002b6c
    153c:	51eb851f 	.word	0x51eb851f
    1540:	000224b8 	.word	0x000224b8
    1544:	00020508 	.word	0x00020508
    1548:	20002b68 	.word	0x20002b68
    154c:	20002b6a 	.word	0x20002b6a
    1550:	000208fc 	.word	0x000208fc
    1554:	00020884 	.word	0x00020884
    1558:	00020938 	.word	0x00020938
    155c:	f36f 0b00 	bfc	fp, #0, #1
    1560:	f36f 0b41 	bfc	fp, #1, #1
    1564:	f36f 0b82 	bfc	fp, #2, #1
    1568:	f36f 0bc5 	bfc	fp, #3, #3
    156c:	2301      	movs	r3, #1
    156e:	f363 1b88 	bfi	fp, r3, #6, #3
    1572:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
    1576:	f363 2b52 	bfi	fp, r3, #9, #10
    157a:	f36f 4bde 	bfc	fp, #19, #12
    157e:	f36f 7bdf 	bfc	fp, #31, #1
    1582:	2300      	movs	r3, #0
    1584:	4659      	mov	r1, fp
    1586:	488d      	ldr	r0, [pc, #564]	; (17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>)
    1588:	f002 f8a0 	bl	36cc <z_impl_z_log_msg_static_create>
    158c:	46a5      	mov	sp, r4
    158e:	f640 40cd 	movw	r0, #3277	; 0xccd
    1592:	2100      	movs	r1, #0
    1594:	f015 fcd6 	bl	16f44 <z_impl_k_sleep>
    1598:	f640 40cd 	movw	r0, #3277	; 0xccd
    159c:	2100      	movs	r1, #0
    159e:	f015 fcd1 	bl	16f44 <z_impl_k_sleep>
    15a2:	69fb      	ldr	r3, [r7, #28]
    15a4:	60bb      	str	r3, [r7, #8]
    15a6:	69bb      	ldr	r3, [r7, #24]
    15a8:	61fb      	str	r3, [r7, #28]
    15aa:	2021      	movs	r0, #33	; 0x21
    15ac:	2100      	movs	r1, #0
    15ae:	f015 fcc9 	bl	16f44 <z_impl_k_sleep>
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
    15b2:	4883      	ldr	r0, [pc, #524]	; (17c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x438>)
    15b4:	6903      	ldr	r3, [r0, #16]
    15b6:	61bb      	str	r3, [r7, #24]
	const struct gpio_driver_api *api =
    15b8:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    15ba:	685b      	ldr	r3, [r3, #4]
    15bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
    15c0:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
    15c2:	4604      	mov	r4, r0
    15c4:	b920      	cbnz	r0, 15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>
		*value ^= data->invert;
    15c6:	69bb      	ldr	r3, [r7, #24]
    15c8:	681a      	ldr	r2, [r3, #0]
    15ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15cc:	4053      	eors	r3, r2
    15ce:	62bb      	str	r3, [r7, #40]	; 0x28

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
    15d0:	b914      	cbnz	r4, 15d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x250>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    15d2:	6abc      	ldr	r4, [r7, #40]	; 0x28
    15d4:	f3c4 1440 	ubfx	r4, r4, #5, #1
		if (!gpio_pin_get_dt(&enabler))
    15d8:	2c00      	cmp	r4, #0
    15da:	f47f ae23 	bne.w	1224 <main+0x180>
	const struct gpio_driver_data *const data =
    15de:	4878      	ldr	r0, [pc, #480]	; (17c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x438>)
    15e0:	6903      	ldr	r3, [r0, #16]
    15e2:	617b      	str	r3, [r7, #20]
	const struct gpio_driver_api *api =
    15e4:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    15e6:	685b      	ldr	r3, [r3, #4]
    15e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
    15ec:	4798      	blx	r3
	if (ret == 0) {
    15ee:	61b8      	str	r0, [r7, #24]
    15f0:	b920      	cbnz	r0, 15fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x274>
		*value ^= data->invert;
    15f2:	697b      	ldr	r3, [r7, #20]
    15f4:	681a      	ldr	r2, [r3, #0]
    15f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    15f8:	4053      	eors	r3, r2
    15fa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (ret == 0) {
    15fc:	69bb      	ldr	r3, [r7, #24]
    15fe:	b91b      	cbnz	r3, 1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    1600:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1602:	f3c3 1300 	ubfx	r3, r3, #4, #1
    1606:	61bb      	str	r3, [r7, #24]
			if (!gpio_pin_get_dt(&counters))
    1608:	69bb      	ldr	r3, [r7, #24]
    160a:	2b00      	cmp	r3, #0
    160c:	f43f aded 	beq.w	11ea <main+0x146>
    1610:	693b      	ldr	r3, [r7, #16]
    1612:	61bb      	str	r3, [r7, #24]
	const struct gpio_driver_data *const data =
    1614:	486a      	ldr	r0, [pc, #424]	; (17c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x438>)
    1616:	6903      	ldr	r3, [r0, #16]
    1618:	617b      	str	r3, [r7, #20]
	const struct gpio_driver_api *api =
    161a:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    161c:	685b      	ldr	r3, [r3, #4]
    161e:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1622:	4798      	blx	r3
	if (ret == 0) {
    1624:	4603      	mov	r3, r0
    1626:	b920      	cbnz	r0, 1632 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2aa>
		*value ^= data->invert;
    1628:	697a      	ldr	r2, [r7, #20]
    162a:	6811      	ldr	r1, [r2, #0]
    162c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    162e:	404a      	eors	r2, r1
    1630:	62ba      	str	r2, [r7, #40]	; 0x28
	if (ret == 0) {
    1632:	b913      	cbnz	r3, 163a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b2>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    1634:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1636:	f3c3 1300 	ubfx	r3, r3, #4, #1
			if (gpio_pin_get_dt(&counters))
    163a:	2b00      	cmp	r3, #0
    163c:	f47f add8 	bne.w	11f0 <main+0x14c>
			if (flagOUT && flagIN)
    1640:	69bb      	ldr	r3, [r7, #24]
    1642:	2b00      	cmp	r3, #0
    1644:	f000 80b1 	beq.w	17aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x422>
    1648:	613b      	str	r3, [r7, #16]
    164a:	e5d3      	b.n	11f4 <main+0x150>
				flagSave = 0;
    164c:	2300      	movs	r3, #0
    164e:	617b      	str	r3, [r7, #20]
				counter = 0;
    1650:	61bb      	str	r3, [r7, #24]
    1652:	e5f2      	b.n	123a <main+0x196>
				LOG_ERR("Failed to update sensor");
    1654:	4b5b      	ldr	r3, [pc, #364]	; (17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>)
    1656:	657b      	str	r3, [r7, #84]	; 0x54
    1658:	2302      	movs	r3, #2
    165a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    165e:	2300      	movs	r3, #0
    1660:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    1664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    1668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    166c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    166e:	653a      	str	r2, [r7, #80]	; 0x50
    1670:	f363 0900 	bfi	r9, r3, #0, #1
    1674:	f363 0941 	bfi	r9, r3, #1, #1
    1678:	f363 0982 	bfi	r9, r3, #2, #1
    167c:	f363 09c5 	bfi	r9, r3, #3, #3
    1680:	2201      	movs	r2, #1
    1682:	f362 1988 	bfi	r9, r2, #6, #3
    1686:	2208      	movs	r2, #8
    1688:	f362 2952 	bfi	r9, r2, #9, #10
    168c:	f363 49de 	bfi	r9, r3, #19, #12
    1690:	f363 79df 	bfi	r9, r3, #31, #1
    1694:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1698:	4649      	mov	r1, r9
    169a:	4848      	ldr	r0, [pc, #288]	; (17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>)
    169c:	f002 f816 	bl	36cc <z_impl_z_log_msg_static_create>
    16a0:	e5d0      	b.n	1244 <main+0x1a0>
			LOG_INF("%d", temp/100);
    16a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    16a6:	e5ea      	b.n	127e <main+0x1da>
    16a8:	f06f 011b 	mvn.w	r1, #27
    16ac:	e5f6      	b.n	129c <main+0x1f8>
			LOG_INF("%d", hum);
    16ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    16b2:	e62b      	b.n	130c <main+0x268>
    16b4:	f06f 011b 	mvn.w	r1, #27
    16b8:	e637      	b.n	132a <main+0x286>
			LOG_INF("%d", moi);
    16ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    16be:	e671      	b.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
    16c0:	f06f 011b 	mvn.w	r1, #27
    16c4:	e67d      	b.n	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
				LOG_ERR("Notify error: %d", err);
    16c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    16ca:	e6c1      	b.n	1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>
    16cc:	f06f 011b 	mvn.w	r1, #27
    16d0:	e6cc      	b.n	146c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4>
				LOG_INF("Send notify ok");
    16d2:	4b3d      	ldr	r3, [pc, #244]	; (17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>)
    16d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    16d6:	2302      	movs	r3, #2
    16d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    16dc:	2300      	movs	r3, #0
    16de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    16e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    16e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    16ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    16ec:	66ba      	str	r2, [r7, #104]	; 0x68
    16ee:	687a      	ldr	r2, [r7, #4]
    16f0:	f363 0200 	bfi	r2, r3, #0, #1
    16f4:	f363 0241 	bfi	r2, r3, #1, #1
    16f8:	f363 0282 	bfi	r2, r3, #2, #1
    16fc:	f363 02c5 	bfi	r2, r3, #3, #3
    1700:	4611      	mov	r1, r2
    1702:	2203      	movs	r2, #3
    1704:	f362 1188 	bfi	r1, r2, #6, #3
    1708:	2208      	movs	r2, #8
    170a:	f362 2152 	bfi	r1, r2, #9, #10
    170e:	f363 41de 	bfi	r1, r3, #19, #12
    1712:	f363 71df 	bfi	r1, r3, #31, #1
    1716:	6079      	str	r1, [r7, #4]
    1718:	f107 0268 	add.w	r2, r7, #104	; 0x68
    171c:	4827      	ldr	r0, [pc, #156]	; (17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>)
    171e:	f001 ffd5 	bl	36cc <z_impl_z_log_msg_static_create>
				temp = (temp == 0) ? 0x100 : 0;
    1722:	4b2a      	ldr	r3, [pc, #168]	; (17cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x444>)
    1724:	881b      	ldrh	r3, [r3, #0]
    1726:	b923      	cbnz	r3, 1732 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3aa>
    1728:	f44f 7280 	mov.w	r2, #256	; 0x100
    172c:	4b27      	ldr	r3, [pc, #156]	; (17cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x444>)
    172e:	801a      	strh	r2, [r3, #0]
    1730:	e6c2      	b.n	14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>
    1732:	2200      	movs	r2, #0
    1734:	e7fa      	b.n	172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>
				LOG_ERR("Notify error: %d", err);
    1736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    173a:	e6df      	b.n	14fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x174>
    173c:	f06f 011b 	mvn.w	r1, #27
    1740:	e6ea      	b.n	1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
			}
			else
			{
				LOG_INF("Send notify ok");
    1742:	4b21      	ldr	r3, [pc, #132]	; (17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>)
    1744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    1748:	2302      	movs	r3, #2
    174a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    174e:	2300      	movs	r3, #0
    1750:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    1754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    1758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    175c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    175e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
    1762:	683a      	ldr	r2, [r7, #0]
    1764:	f363 0200 	bfi	r2, r3, #0, #1
    1768:	f363 0241 	bfi	r2, r3, #1, #1
    176c:	f363 0282 	bfi	r2, r3, #2, #1
    1770:	f363 02c5 	bfi	r2, r3, #3, #3
    1774:	4611      	mov	r1, r2
    1776:	2203      	movs	r2, #3
    1778:	f362 1188 	bfi	r1, r2, #6, #3
    177c:	2208      	movs	r2, #8
    177e:	f362 2152 	bfi	r1, r2, #9, #10
    1782:	f363 41de 	bfi	r1, r3, #19, #12
    1786:	f363 71df 	bfi	r1, r3, #31, #1
    178a:	6039      	str	r1, [r7, #0]
    178c:	f107 0280 	add.w	r2, r7, #128	; 0x80
    1790:	480a      	ldr	r0, [pc, #40]	; (17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>)
    1792:	f001 ff9b 	bl	36cc <z_impl_z_log_msg_static_create>
				hum = (hum == 0) ? 0x100 : 0;
    1796:	4b0e      	ldr	r3, [pc, #56]	; (17d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x448>)
    1798:	881b      	ldrh	r3, [r3, #0]
    179a:	b923      	cbnz	r3, 17a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x41e>
    179c:	f44f 7280 	mov.w	r2, #256	; 0x100
    17a0:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x448>)
    17a2:	801a      	strh	r2, [r3, #0]
    17a4:	e6f3      	b.n	158e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x206>
    17a6:	2200      	movs	r2, #0
    17a8:	e7fa      	b.n	17a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x418>
    17aa:	69bb      	ldr	r3, [r7, #24]
    17ac:	613b      	str	r3, [r7, #16]
			flagSave = 1;
    17ae:	2301      	movs	r3, #1
    17b0:	617b      	str	r3, [r7, #20]
    17b2:	e6fa      	b.n	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
    17b4:	2301      	movs	r3, #1
    17b6:	617b      	str	r3, [r7, #20]
    17b8:	e6f7      	b.n	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
    17ba:	bf00      	nop
    17bc:	00020508 	.word	0x00020508
    17c0:	00020104 	.word	0x00020104
    17c4:	0002086c 	.word	0x0002086c
    17c8:	00020898 	.word	0x00020898
    17cc:	20002b6c 	.word	0x20002b6c
    17d0:	20002b68 	.word	0x20002b68

000017d4 <convert_sensor_value>:
 *     -0.5: val1 =  0, val2 = -500000
 *     -1.0: val1 = -1, val2 =  0
 *     -1.5: val1 = -1, val2 = -500000
 */
static float convert_sensor_value(struct sensor_value value)
{
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	b082      	sub	sp, #8
    17d8:	ab02      	add	r3, sp, #8
    17da:	e903 0003 	stmdb	r3, {r0, r1}
	float result = 0.0f;

	/* Determine sign */
	result = (value.val1 < 0 || value.val2 < 0) ? -1.0f : 1.0f;
    17de:	4604      	mov	r4, r0
    17e0:	2800      	cmp	r0, #0
    17e2:	db06      	blt.n	17f2 <convert_sensor_value+0x1e>
    17e4:	2900      	cmp	r1, #0
    17e6:	db02      	blt.n	17ee <convert_sensor_value+0x1a>
    17e8:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    17ec:	e002      	b.n	17f4 <convert_sensor_value+0x20>
    17ee:	4e0e      	ldr	r6, [pc, #56]	; (1828 <convert_sensor_value+0x54>)
    17f0:	e000      	b.n	17f4 <convert_sensor_value+0x20>
    17f2:	4e0d      	ldr	r6, [pc, #52]	; (1828 <convert_sensor_value+0x54>)

	/* Use absolute values */
	value.val1 = value.val1 < 0 ? -value.val1 : value.val1;
    17f4:	2c00      	cmp	r4, #0
    17f6:	bfb8      	it	lt
    17f8:	4264      	neglt	r4, r4
    17fa:	9400      	str	r4, [sp, #0]
	value.val2 = value.val2 < 0 ? -value.val2 : value.val2;
    17fc:	9801      	ldr	r0, [sp, #4]
    17fe:	2800      	cmp	r0, #0
    1800:	bfb8      	it	lt
    1802:	4240      	neglt	r0, r0
    1804:	9001      	str	r0, [sp, #4]

	/* Calculate value */
	result *= (value.val1 + value.val2 / (float)SENSOR_VAL2_DIVISOR);
    1806:	f7fe fd61 	bl	2cc <__aeabi_i2f>
    180a:	4908      	ldr	r1, [pc, #32]	; (182c <convert_sensor_value+0x58>)
    180c:	f7fe fe66 	bl	4dc <__aeabi_fdiv>
    1810:	4605      	mov	r5, r0
    1812:	4620      	mov	r0, r4
    1814:	f7fe fd5a 	bl	2cc <__aeabi_i2f>
    1818:	4629      	mov	r1, r5
    181a:	f7fe fca3 	bl	164 <__addsf3>
    181e:	4631      	mov	r1, r6
    1820:	f7fe fda8 	bl	374 <__aeabi_fmul>

	return result;
}
    1824:	b002      	add	sp, #8
    1826:	bd70      	pop	{r4, r5, r6, pc}
    1828:	bf800000 	.word	0xbf800000
    182c:	49742400 	.word	0x49742400

00001830 <sensor_init>:

int sensor_init(void)
{
	int err = 0;

	if (sensor) {
    1830:	4b18      	ldr	r3, [pc, #96]	; (1894 <sensor_init+0x64>)
    1832:	681b      	ldr	r3, [r3, #0]
    1834:	b34b      	cbz	r3, 188a <sensor_init+0x5a>
{
    1836:	b500      	push	{lr}
    1838:	b089      	sub	sp, #36	; 0x24
		LOG_WRN("Sensor already initialized");
    183a:	4b17      	ldr	r3, [pc, #92]	; (1898 <sensor_init+0x68>)
    183c:	9307      	str	r3, [sp, #28]
    183e:	2202      	movs	r2, #2
    1840:	f88d 2004 	strb.w	r2, [sp, #4]
    1844:	2300      	movs	r3, #0
    1846:	f88d 3005 	strb.w	r3, [sp, #5]
    184a:	f88d 3006 	strb.w	r3, [sp, #6]
    184e:	f88d 3007 	strb.w	r3, [sp, #7]
    1852:	9901      	ldr	r1, [sp, #4]
    1854:	9106      	str	r1, [sp, #24]
    1856:	4619      	mov	r1, r3
    1858:	f363 0100 	bfi	r1, r3, #0, #1
    185c:	f363 0141 	bfi	r1, r3, #1, #1
    1860:	f363 0182 	bfi	r1, r3, #2, #1
    1864:	f363 01c5 	bfi	r1, r3, #3, #3
    1868:	f362 1188 	bfi	r1, r2, #6, #3
    186c:	2208      	movs	r2, #8
    186e:	f362 2152 	bfi	r1, r2, #9, #10
    1872:	f363 41de 	bfi	r1, r3, #19, #12
    1876:	f363 71df 	bfi	r1, r3, #31, #1
    187a:	aa06      	add	r2, sp, #24
    187c:	4807      	ldr	r0, [pc, #28]	; (189c <sensor_init+0x6c>)
    187e:	f001 ff25 	bl	36cc <z_impl_z_log_msg_static_create>
			err = ENODEV;
		}
	}

	return err;
}
    1882:	2000      	movs	r0, #0
    1884:	b009      	add	sp, #36	; 0x24
    1886:	f85d fb04 	ldr.w	pc, [sp], #4
		sensor = DEVICE_DT_GET(DT_INST(0, bosch_bme680));
    188a:	4b02      	ldr	r3, [pc, #8]	; (1894 <sensor_init+0x64>)
    188c:	4a04      	ldr	r2, [pc, #16]	; (18a0 <sensor_init+0x70>)
    188e:	601a      	str	r2, [r3, #0]
}
    1890:	2000      	movs	r0, #0
    1892:	4770      	bx	lr
    1894:	200018b4 	.word	0x200018b4
    1898:	000209d4 	.word	0x000209d4
    189c:	000205d8 	.word	0x000205d8
    18a0:	000201dc 	.word	0x000201dc

000018a4 <sensor_update_measurements>:

int sensor_update_measurements(void)
{
    18a4:	b500      	push	{lr}
    18a6:	b089      	sub	sp, #36	; 0x24
	int err = 0;

	if (sensor) {
    18a8:	4b18      	ldr	r3, [pc, #96]	; (190c <sensor_update_measurements+0x68>)
    18aa:	6818      	ldr	r0, [r3, #0]
    18ac:	b130      	cbz	r0, 18bc <sensor_update_measurements+0x18>
	const struct sensor_driver_api *api =
    18ae:	6883      	ldr	r3, [r0, #8]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    18b0:	68db      	ldr	r3, [r3, #12]
    18b2:	2139      	movs	r1, #57	; 0x39
    18b4:	4798      	blx	r3
		LOG_ERR("Sensor not initialized");
		err = ENODEV;
	}

	return err;
}
    18b6:	b009      	add	sp, #36	; 0x24
    18b8:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Sensor not initialized");
    18bc:	4b14      	ldr	r3, [pc, #80]	; (1910 <sensor_update_measurements+0x6c>)
    18be:	9307      	str	r3, [sp, #28]
    18c0:	2302      	movs	r3, #2
    18c2:	f88d 3004 	strb.w	r3, [sp, #4]
    18c6:	2300      	movs	r3, #0
    18c8:	f88d 3005 	strb.w	r3, [sp, #5]
    18cc:	f88d 3006 	strb.w	r3, [sp, #6]
    18d0:	f88d 3007 	strb.w	r3, [sp, #7]
    18d4:	9a01      	ldr	r2, [sp, #4]
    18d6:	9206      	str	r2, [sp, #24]
    18d8:	4619      	mov	r1, r3
    18da:	f363 0100 	bfi	r1, r3, #0, #1
    18de:	f363 0141 	bfi	r1, r3, #1, #1
    18e2:	f363 0182 	bfi	r1, r3, #2, #1
    18e6:	f363 01c5 	bfi	r1, r3, #3, #3
    18ea:	2201      	movs	r2, #1
    18ec:	f362 1188 	bfi	r1, r2, #6, #3
    18f0:	2208      	movs	r2, #8
    18f2:	f362 2152 	bfi	r1, r2, #9, #10
    18f6:	f363 41de 	bfi	r1, r3, #19, #12
    18fa:	f363 71df 	bfi	r1, r3, #31, #1
    18fe:	aa06      	add	r2, sp, #24
    1900:	4804      	ldr	r0, [pc, #16]	; (1914 <sensor_update_measurements+0x70>)
    1902:	f001 fee3 	bl	36cc <z_impl_z_log_msg_static_create>
		err = ENODEV;
    1906:	2013      	movs	r0, #19
	return err;
    1908:	e7d5      	b.n	18b6 <sensor_update_measurements+0x12>
    190a:	bf00      	nop
    190c:	200018b4 	.word	0x200018b4
    1910:	000209f0 	.word	0x000209f0
    1914:	000205d8 	.word	0x000205d8

00001918 <sensor_get_temperature>:

int sensor_get_temperature(float *temperature)
{
    1918:	b5f0      	push	{r4, r5, r6, r7, lr}
    191a:	b091      	sub	sp, #68	; 0x44
    191c:	af00      	add	r7, sp, #0
	int err = 0;

	if (temperature) {
    191e:	2800      	cmp	r0, #0
    1920:	d078      	beq.n	1a14 <sensor_get_temperature+0xfc>
    1922:	4605      	mov	r5, r0
		if (sensor) {
    1924:	4b4d      	ldr	r3, [pc, #308]	; (1a5c <sensor_get_temperature+0x144>)
    1926:	6818      	ldr	r0, [r3, #0]
    1928:	2800      	cmp	r0, #0
    192a:	d04f      	beq.n	19cc <sensor_get_temperature+0xb4>
	const struct sensor_driver_api *api =
    192c:	6883      	ldr	r3, [r0, #8]
	return api->channel_get(dev, chan, val);
    192e:	691b      	ldr	r3, [r3, #16]
    1930:	f107 0208 	add.w	r2, r7, #8
    1934:	210d      	movs	r1, #13
    1936:	4798      	blx	r3
			struct sensor_value sensor_temperature;

			err = sensor_channel_get(sensor,
						 SENSOR_CHAN_AMBIENT_TEMP,
						 &sensor_temperature);
			if (err) {
    1938:	4604      	mov	r4, r0
    193a:	2800      	cmp	r0, #0
    193c:	d03e      	beq.n	19bc <sensor_get_temperature+0xa4>
				LOG_ERR("Failed to get sensor channel: %d", err);
    193e:	466e      	mov	r6, sp
    1940:	b088      	sub	sp, #32
    1942:	466b      	mov	r3, sp
    1944:	f113 0210 	adds.w	r2, r3, #16
    1948:	d032      	beq.n	19b0 <sensor_get_temperature+0x98>
    194a:	210c      	movs	r1, #12
    194c:	b11a      	cbz	r2, 1956 <sensor_get_temperature+0x3e>
    194e:	2904      	cmp	r1, #4
    1950:	dd01      	ble.n	1956 <sensor_get_temperature+0x3e>
    1952:	4843      	ldr	r0, [pc, #268]	; (1a60 <sensor_get_temperature+0x148>)
    1954:	6158      	str	r0, [r3, #20]
    1956:	b112      	cbz	r2, 195e <sensor_get_temperature+0x46>
    1958:	2908      	cmp	r1, #8
    195a:	dd00      	ble.n	195e <sensor_get_temperature+0x46>
    195c:	619c      	str	r4, [r3, #24]
    195e:	290b      	cmp	r1, #11
    1960:	dd29      	ble.n	19b6 <sensor_get_temperature+0x9e>
    1962:	250c      	movs	r5, #12
    1964:	b13a      	cbz	r2, 1976 <sensor_get_temperature+0x5e>
    1966:	2103      	movs	r1, #3
    1968:	7139      	strb	r1, [r7, #4]
    196a:	2100      	movs	r1, #0
    196c:	7179      	strb	r1, [r7, #5]
    196e:	71b9      	strb	r1, [r7, #6]
    1970:	71f9      	strb	r1, [r7, #7]
    1972:	6878      	ldr	r0, [r7, #4]
    1974:	6118      	str	r0, [r3, #16]
    1976:	2100      	movs	r1, #0
    1978:	f36f 0100 	bfc	r1, #0, #1
    197c:	f36f 0141 	bfc	r1, #1, #1
    1980:	f36f 0182 	bfc	r1, #2, #1
    1984:	f36f 01c5 	bfc	r1, #3, #3
    1988:	2301      	movs	r3, #1
    198a:	f363 1188 	bfi	r1, r3, #6, #3
    198e:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    1992:	f363 2152 	bfi	r1, r3, #9, #10
    1996:	f36f 41de 	bfc	r1, #19, #12
    199a:	f36f 71df 	bfc	r1, #31, #1
    199e:	2300      	movs	r3, #0
    19a0:	4830      	ldr	r0, [pc, #192]	; (1a64 <sensor_get_temperature+0x14c>)
    19a2:	f001 fe93 	bl	36cc <z_impl_z_log_msg_static_create>
    19a6:	46b5      	mov	sp, r6
		LOG_ERR("NULL param");
		err = EINVAL;
	}

	return err;
}
    19a8:	4620      	mov	r0, r4
    19aa:	3744      	adds	r7, #68	; 0x44
    19ac:	46bd      	mov	sp, r7
    19ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				LOG_ERR("Failed to get sensor channel: %d", err);
    19b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    19b4:	e7ca      	b.n	194c <sensor_get_temperature+0x34>
    19b6:	f06f 051b 	mvn.w	r5, #27
    19ba:	e7d3      	b.n	1964 <sensor_get_temperature+0x4c>
				*temperature = convert_sensor_value(sensor_temperature);
    19bc:	f107 0308 	add.w	r3, r7, #8
    19c0:	e893 0003 	ldmia.w	r3, {r0, r1}
    19c4:	f7ff ff06 	bl	17d4 <convert_sensor_value>
    19c8:	6028      	str	r0, [r5, #0]
    19ca:	e7ed      	b.n	19a8 <sensor_get_temperature+0x90>
			LOG_ERR("Sensor not initialized");
    19cc:	4b26      	ldr	r3, [pc, #152]	; (1a68 <sensor_get_temperature+0x150>)
    19ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    19d0:	2302      	movs	r3, #2
    19d2:	723b      	strb	r3, [r7, #8]
    19d4:	2300      	movs	r3, #0
    19d6:	727b      	strb	r3, [r7, #9]
    19d8:	72bb      	strb	r3, [r7, #10]
    19da:	72fb      	strb	r3, [r7, #11]
    19dc:	68ba      	ldr	r2, [r7, #8]
    19de:	63ba      	str	r2, [r7, #56]	; 0x38
    19e0:	4619      	mov	r1, r3
    19e2:	f363 0100 	bfi	r1, r3, #0, #1
    19e6:	f363 0141 	bfi	r1, r3, #1, #1
    19ea:	f363 0182 	bfi	r1, r3, #2, #1
    19ee:	f363 01c5 	bfi	r1, r3, #3, #3
    19f2:	2201      	movs	r2, #1
    19f4:	f362 1188 	bfi	r1, r2, #6, #3
    19f8:	2208      	movs	r2, #8
    19fa:	f362 2152 	bfi	r1, r2, #9, #10
    19fe:	f363 41de 	bfi	r1, r3, #19, #12
    1a02:	f363 71df 	bfi	r1, r3, #31, #1
    1a06:	f107 0238 	add.w	r2, r7, #56	; 0x38
    1a0a:	4816      	ldr	r0, [pc, #88]	; (1a64 <sensor_get_temperature+0x14c>)
    1a0c:	f001 fe5e 	bl	36cc <z_impl_z_log_msg_static_create>
			err = ENODEV;
    1a10:	2413      	movs	r4, #19
    1a12:	e7c9      	b.n	19a8 <sensor_get_temperature+0x90>
		LOG_ERR("NULL param");
    1a14:	4b15      	ldr	r3, [pc, #84]	; (1a6c <sensor_get_temperature+0x154>)
    1a16:	627b      	str	r3, [r7, #36]	; 0x24
    1a18:	2302      	movs	r3, #2
    1a1a:	723b      	strb	r3, [r7, #8]
    1a1c:	2300      	movs	r3, #0
    1a1e:	727b      	strb	r3, [r7, #9]
    1a20:	72bb      	strb	r3, [r7, #10]
    1a22:	72fb      	strb	r3, [r7, #11]
    1a24:	68ba      	ldr	r2, [r7, #8]
    1a26:	623a      	str	r2, [r7, #32]
    1a28:	4619      	mov	r1, r3
    1a2a:	f363 0100 	bfi	r1, r3, #0, #1
    1a2e:	f363 0141 	bfi	r1, r3, #1, #1
    1a32:	f363 0182 	bfi	r1, r3, #2, #1
    1a36:	f363 01c5 	bfi	r1, r3, #3, #3
    1a3a:	2201      	movs	r2, #1
    1a3c:	f362 1188 	bfi	r1, r2, #6, #3
    1a40:	2208      	movs	r2, #8
    1a42:	f362 2152 	bfi	r1, r2, #9, #10
    1a46:	f363 41de 	bfi	r1, r3, #19, #12
    1a4a:	f363 71df 	bfi	r1, r3, #31, #1
    1a4e:	f107 0220 	add.w	r2, r7, #32
    1a52:	4804      	ldr	r0, [pc, #16]	; (1a64 <sensor_get_temperature+0x14c>)
    1a54:	f001 fe3a 	bl	36cc <z_impl_z_log_msg_static_create>
		err = EINVAL;
    1a58:	2416      	movs	r4, #22
	return err;
    1a5a:	e7a5      	b.n	19a8 <sensor_get_temperature+0x90>
    1a5c:	200018b4 	.word	0x200018b4
    1a60:	00020a08 	.word	0x00020a08
    1a64:	000205d8 	.word	0x000205d8
    1a68:	000209f0 	.word	0x000209f0
    1a6c:	00020a2c 	.word	0x00020a2c

00001a70 <sensor_get_humidity>:

	return err;
}

int sensor_get_humidity(float *humidity)
{
    1a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a72:	b091      	sub	sp, #68	; 0x44
    1a74:	af00      	add	r7, sp, #0
	int err = 0;

	if (humidity) {
    1a76:	2800      	cmp	r0, #0
    1a78:	d078      	beq.n	1b6c <sensor_get_humidity+0xfc>
    1a7a:	4605      	mov	r5, r0
		if (sensor) {
    1a7c:	4b4d      	ldr	r3, [pc, #308]	; (1bb4 <sensor_get_humidity+0x144>)
    1a7e:	6818      	ldr	r0, [r3, #0]
    1a80:	2800      	cmp	r0, #0
    1a82:	d04f      	beq.n	1b24 <sensor_get_humidity+0xb4>
	const struct sensor_driver_api *api =
    1a84:	6883      	ldr	r3, [r0, #8]
	return api->channel_get(dev, chan, val);
    1a86:	691b      	ldr	r3, [r3, #16]
    1a88:	f107 0208 	add.w	r2, r7, #8
    1a8c:	2110      	movs	r1, #16
    1a8e:	4798      	blx	r3
			struct sensor_value sensor_humidity;

			err = sensor_channel_get(sensor,
						 SENSOR_CHAN_HUMIDITY,
						 &sensor_humidity);
			if (err) {
    1a90:	4604      	mov	r4, r0
    1a92:	2800      	cmp	r0, #0
    1a94:	d03e      	beq.n	1b14 <sensor_get_humidity+0xa4>
				LOG_ERR("Failed to get sensor channel: %d", err);
    1a96:	466e      	mov	r6, sp
    1a98:	b088      	sub	sp, #32
    1a9a:	466b      	mov	r3, sp
    1a9c:	f113 0210 	adds.w	r2, r3, #16
    1aa0:	d032      	beq.n	1b08 <sensor_get_humidity+0x98>
    1aa2:	210c      	movs	r1, #12
    1aa4:	b11a      	cbz	r2, 1aae <sensor_get_humidity+0x3e>
    1aa6:	2904      	cmp	r1, #4
    1aa8:	dd01      	ble.n	1aae <sensor_get_humidity+0x3e>
    1aaa:	4843      	ldr	r0, [pc, #268]	; (1bb8 <sensor_get_humidity+0x148>)
    1aac:	6158      	str	r0, [r3, #20]
    1aae:	b112      	cbz	r2, 1ab6 <sensor_get_humidity+0x46>
    1ab0:	2908      	cmp	r1, #8
    1ab2:	dd00      	ble.n	1ab6 <sensor_get_humidity+0x46>
    1ab4:	619c      	str	r4, [r3, #24]
    1ab6:	290b      	cmp	r1, #11
    1ab8:	dd29      	ble.n	1b0e <sensor_get_humidity+0x9e>
    1aba:	250c      	movs	r5, #12
    1abc:	b13a      	cbz	r2, 1ace <sensor_get_humidity+0x5e>
    1abe:	2103      	movs	r1, #3
    1ac0:	7139      	strb	r1, [r7, #4]
    1ac2:	2100      	movs	r1, #0
    1ac4:	7179      	strb	r1, [r7, #5]
    1ac6:	71b9      	strb	r1, [r7, #6]
    1ac8:	71f9      	strb	r1, [r7, #7]
    1aca:	6878      	ldr	r0, [r7, #4]
    1acc:	6118      	str	r0, [r3, #16]
    1ace:	2100      	movs	r1, #0
    1ad0:	f36f 0100 	bfc	r1, #0, #1
    1ad4:	f36f 0141 	bfc	r1, #1, #1
    1ad8:	f36f 0182 	bfc	r1, #2, #1
    1adc:	f36f 01c5 	bfc	r1, #3, #3
    1ae0:	2301      	movs	r3, #1
    1ae2:	f363 1188 	bfi	r1, r3, #6, #3
    1ae6:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    1aea:	f363 2152 	bfi	r1, r3, #9, #10
    1aee:	f36f 41de 	bfc	r1, #19, #12
    1af2:	f36f 71df 	bfc	r1, #31, #1
    1af6:	2300      	movs	r3, #0
    1af8:	4830      	ldr	r0, [pc, #192]	; (1bbc <sensor_get_humidity+0x14c>)
    1afa:	f001 fde7 	bl	36cc <z_impl_z_log_msg_static_create>
    1afe:	46b5      	mov	sp, r6
		LOG_ERR("NULL param");
		err = EINVAL;
	}

	return err;
}
    1b00:	4620      	mov	r0, r4
    1b02:	3744      	adds	r7, #68	; 0x44
    1b04:	46bd      	mov	sp, r7
    1b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
				LOG_ERR("Failed to get sensor channel: %d", err);
    1b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1b0c:	e7ca      	b.n	1aa4 <sensor_get_humidity+0x34>
    1b0e:	f06f 051b 	mvn.w	r5, #27
    1b12:	e7d3      	b.n	1abc <sensor_get_humidity+0x4c>
				*humidity = convert_sensor_value(sensor_humidity);
    1b14:	f107 0308 	add.w	r3, r7, #8
    1b18:	e893 0003 	ldmia.w	r3, {r0, r1}
    1b1c:	f7ff fe5a 	bl	17d4 <convert_sensor_value>
    1b20:	6028      	str	r0, [r5, #0]
    1b22:	e7ed      	b.n	1b00 <sensor_get_humidity+0x90>
			LOG_ERR("Sensor not initialized");
    1b24:	4b26      	ldr	r3, [pc, #152]	; (1bc0 <sensor_get_humidity+0x150>)
    1b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    1b28:	2302      	movs	r3, #2
    1b2a:	723b      	strb	r3, [r7, #8]
    1b2c:	2300      	movs	r3, #0
    1b2e:	727b      	strb	r3, [r7, #9]
    1b30:	72bb      	strb	r3, [r7, #10]
    1b32:	72fb      	strb	r3, [r7, #11]
    1b34:	68ba      	ldr	r2, [r7, #8]
    1b36:	63ba      	str	r2, [r7, #56]	; 0x38
    1b38:	4619      	mov	r1, r3
    1b3a:	f363 0100 	bfi	r1, r3, #0, #1
    1b3e:	f363 0141 	bfi	r1, r3, #1, #1
    1b42:	f363 0182 	bfi	r1, r3, #2, #1
    1b46:	f363 01c5 	bfi	r1, r3, #3, #3
    1b4a:	2201      	movs	r2, #1
    1b4c:	f362 1188 	bfi	r1, r2, #6, #3
    1b50:	2208      	movs	r2, #8
    1b52:	f362 2152 	bfi	r1, r2, #9, #10
    1b56:	f363 41de 	bfi	r1, r3, #19, #12
    1b5a:	f363 71df 	bfi	r1, r3, #31, #1
    1b5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
    1b62:	4816      	ldr	r0, [pc, #88]	; (1bbc <sensor_get_humidity+0x14c>)
    1b64:	f001 fdb2 	bl	36cc <z_impl_z_log_msg_static_create>
			err = ENODEV;
    1b68:	2413      	movs	r4, #19
    1b6a:	e7c9      	b.n	1b00 <sensor_get_humidity+0x90>
		LOG_ERR("NULL param");
    1b6c:	4b15      	ldr	r3, [pc, #84]	; (1bc4 <sensor_get_humidity+0x154>)
    1b6e:	627b      	str	r3, [r7, #36]	; 0x24
    1b70:	2302      	movs	r3, #2
    1b72:	723b      	strb	r3, [r7, #8]
    1b74:	2300      	movs	r3, #0
    1b76:	727b      	strb	r3, [r7, #9]
    1b78:	72bb      	strb	r3, [r7, #10]
    1b7a:	72fb      	strb	r3, [r7, #11]
    1b7c:	68ba      	ldr	r2, [r7, #8]
    1b7e:	623a      	str	r2, [r7, #32]
    1b80:	4619      	mov	r1, r3
    1b82:	f363 0100 	bfi	r1, r3, #0, #1
    1b86:	f363 0141 	bfi	r1, r3, #1, #1
    1b8a:	f363 0182 	bfi	r1, r3, #2, #1
    1b8e:	f363 01c5 	bfi	r1, r3, #3, #3
    1b92:	2201      	movs	r2, #1
    1b94:	f362 1188 	bfi	r1, r2, #6, #3
    1b98:	2208      	movs	r2, #8
    1b9a:	f362 2152 	bfi	r1, r2, #9, #10
    1b9e:	f363 41de 	bfi	r1, r3, #19, #12
    1ba2:	f363 71df 	bfi	r1, r3, #31, #1
    1ba6:	f107 0220 	add.w	r2, r7, #32
    1baa:	4804      	ldr	r0, [pc, #16]	; (1bbc <sensor_get_humidity+0x14c>)
    1bac:	f001 fd8e 	bl	36cc <z_impl_z_log_msg_static_create>
		err = EINVAL;
    1bb0:	2416      	movs	r4, #22
	return err;
    1bb2:	e7a5      	b.n	1b00 <sensor_get_humidity+0x90>
    1bb4:	200018b4 	.word	0x200018b4
    1bb8:	00020a08 	.word	0x00020a08
    1bbc:	000205d8 	.word	0x000205d8
    1bc0:	000209f0 	.word	0x000209f0
    1bc4:	00020a2c 	.word	0x00020a2c

00001bc8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bcc:	b08d      	sub	sp, #52	; 0x34
    1bce:	9205      	str	r2, [sp, #20]
    1bd0:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1bd2:	4613      	mov	r3, r2
    1bd4:	f002 0204 	and.w	r2, r2, #4
    1bd8:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1bda:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1bde:	f010 0303 	ands.w	r3, r0, #3
    1be2:	9302      	str	r3, [sp, #8]
    1be4:	f040 8235 	bne.w	2052 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52>
    1be8:	4607      	mov	r7, r0
    1bea:	468a      	mov	sl, r1
    1bec:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    1bee:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1bf0:	2800      	cmp	r0, #0
    1bf2:	d042      	beq.n	1c7a <cbvprintf_package+0xb2>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1bf4:	b127      	cbz	r7, 1c00 <cbvprintf_package+0x38>
    1bf6:	1be3      	subs	r3, r4, r7
    1bf8:	3304      	adds	r3, #4
    1bfa:	4553      	cmp	r3, sl
    1bfc:	f200 822c 	bhi.w	2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    1c00:	9b03      	ldr	r3, [sp, #12]
    1c02:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1c04:	f8dd b008 	ldr.w	fp, [sp, #8]
    1c08:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1c0c:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    1c10:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    1c12:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    1c16:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1c18:	b10f      	cbz	r7, 1c1e <cbvprintf_package+0x56>
				*(const char **)buf = s;
    1c1a:	9b03      	ldr	r3, [sp, #12]
    1c1c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c1e:	1e53      	subs	r3, r2, #1
    1c20:	9307      	str	r3, [sp, #28]
    1c22:	2a00      	cmp	r2, #0
    1c24:	f340 8183 	ble.w	1f2e <cbvprintf_package+0x366>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    1c28:	9b05      	ldr	r3, [sp, #20]
    1c2a:	f013 0202 	ands.w	r2, r3, #2
    1c2e:	d021      	beq.n	1c74 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c30:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1c32:	1be1      	subs	r1, r4, r7
    1c34:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1c36:	b11a      	cbz	r2, 1c40 <cbvprintf_package+0x78>
    1c38:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1c3c:	f080 8212 	bcs.w	2064 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x64>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1c40:	f1bb 0f0f 	cmp.w	fp, #15
    1c44:	f200 8211 	bhi.w	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    1c48:	2f00      	cmp	r7, #0
    1c4a:	f000 8188 	beq.w	1f5e <cbvprintf_package+0x396>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    1c4e:	b2db      	uxtb	r3, r3
    1c50:	aa0c      	add	r2, sp, #48	; 0x30
    1c52:	445a      	add	r2, fp
    1c54:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    1c58:	2800      	cmp	r0, #0
    1c5a:	f000 817c 	beq.w	1f56 <cbvprintf_package+0x38e>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1c62:	aa0c      	add	r2, sp, #48	; 0x30
    1c64:	445a      	add	r2, fp
    1c66:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    1c6a:	9b04      	ldr	r3, [sp, #16]
    1c6c:	3301      	adds	r3, #1
    1c6e:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    1c70:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    1c74:	3404      	adds	r4, #4

			is_str_arg = false;
    1c76:	2200      	movs	r2, #0
    1c78:	e007      	b.n	1c8a <cbvprintf_package+0xc2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1c7a:	f001 0a07 	and.w	sl, r1, #7
    1c7e:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1c80:	f1ca 0a08 	rsb	sl, sl, #8
    1c84:	e7b6      	b.n	1bf4 <cbvprintf_package+0x2c>
			switch (*fmt) {
    1c86:	2600      	movs	r6, #0
    1c88:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
    1c8a:	1c6b      	adds	r3, r5, #1
    1c8c:	7869      	ldrb	r1, [r5, #1]
    1c8e:	2900      	cmp	r1, #0
    1c90:	f000 8179 	beq.w	1f86 <cbvprintf_package+0x3be>
			if (!parsing) {
    1c94:	2e00      	cmp	r6, #0
    1c96:	f000 80bd 	beq.w	1e14 <cbvprintf_package+0x24c>
			switch (*fmt) {
    1c9a:	3920      	subs	r1, #32
    1c9c:	295a      	cmp	r1, #90	; 0x5a
    1c9e:	d8f2      	bhi.n	1c86 <cbvprintf_package+0xbe>
    1ca0:	a001      	add	r0, pc, #4	; (adr r0, 1ca8 <cbvprintf_package+0xe0>)
    1ca2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1ca6:	bf00      	nop
    1ca8:	00001c89 	.word	0x00001c89
    1cac:	00001c87 	.word	0x00001c87
    1cb0:	00001c87 	.word	0x00001c87
    1cb4:	00001c89 	.word	0x00001c89
    1cb8:	00001c87 	.word	0x00001c87
    1cbc:	00001c87 	.word	0x00001c87
    1cc0:	00001c87 	.word	0x00001c87
    1cc4:	00001c87 	.word	0x00001c87
    1cc8:	00001c87 	.word	0x00001c87
    1ccc:	00001c87 	.word	0x00001c87
    1cd0:	00001e6d 	.word	0x00001e6d
    1cd4:	00001c89 	.word	0x00001c89
    1cd8:	00001c87 	.word	0x00001c87
    1cdc:	00001c89 	.word	0x00001c89
    1ce0:	00001c89 	.word	0x00001c89
    1ce4:	00001c87 	.word	0x00001c87
    1ce8:	00001c89 	.word	0x00001c89
    1cec:	00001c89 	.word	0x00001c89
    1cf0:	00001c89 	.word	0x00001c89
    1cf4:	00001c89 	.word	0x00001c89
    1cf8:	00001c89 	.word	0x00001c89
    1cfc:	00001c89 	.word	0x00001c89
    1d00:	00001c89 	.word	0x00001c89
    1d04:	00001c89 	.word	0x00001c89
    1d08:	00001c89 	.word	0x00001c89
    1d0c:	00001c89 	.word	0x00001c89
    1d10:	00001c87 	.word	0x00001c87
    1d14:	00001c87 	.word	0x00001c87
    1d18:	00001c87 	.word	0x00001c87
    1d1c:	00001c87 	.word	0x00001c87
    1d20:	00001c87 	.word	0x00001c87
    1d24:	00001c87 	.word	0x00001c87
    1d28:	00001c87 	.word	0x00001c87
    1d2c:	00001eb7 	.word	0x00001eb7
    1d30:	00001c87 	.word	0x00001c87
    1d34:	00001c87 	.word	0x00001c87
    1d38:	00001c87 	.word	0x00001c87
    1d3c:	00001eb7 	.word	0x00001eb7
    1d40:	00001eb7 	.word	0x00001eb7
    1d44:	00001eb7 	.word	0x00001eb7
    1d48:	00001c87 	.word	0x00001c87
    1d4c:	00001c87 	.word	0x00001c87
    1d50:	00001c87 	.word	0x00001c87
    1d54:	00001c87 	.word	0x00001c87
    1d58:	00001c89 	.word	0x00001c89
    1d5c:	00001c87 	.word	0x00001c87
    1d60:	00001c87 	.word	0x00001c87
    1d64:	00001c87 	.word	0x00001c87
    1d68:	00001c87 	.word	0x00001c87
    1d6c:	00001c87 	.word	0x00001c87
    1d70:	00001c87 	.word	0x00001c87
    1d74:	00001c87 	.word	0x00001c87
    1d78:	00001c87 	.word	0x00001c87
    1d7c:	00001c87 	.word	0x00001c87
    1d80:	00001c87 	.word	0x00001c87
    1d84:	00001c87 	.word	0x00001c87
    1d88:	00001e3d 	.word	0x00001e3d
    1d8c:	00001c87 	.word	0x00001c87
    1d90:	00001c87 	.word	0x00001c87
    1d94:	00001c87 	.word	0x00001c87
    1d98:	00001c87 	.word	0x00001c87
    1d9c:	00001c87 	.word	0x00001c87
    1da0:	00001c87 	.word	0x00001c87
    1da4:	00001c87 	.word	0x00001c87
    1da8:	00001c87 	.word	0x00001c87
    1dac:	00001eb7 	.word	0x00001eb7
    1db0:	00001c87 	.word	0x00001c87
    1db4:	00001e3d 	.word	0x00001e3d
    1db8:	00001e3d 	.word	0x00001e3d
    1dbc:	00001eb7 	.word	0x00001eb7
    1dc0:	00001eb7 	.word	0x00001eb7
    1dc4:	00001eb7 	.word	0x00001eb7
    1dc8:	00001c89 	.word	0x00001c89
    1dcc:	00001e3d 	.word	0x00001e3d
    1dd0:	00001e25 	.word	0x00001e25
    1dd4:	00001c87 	.word	0x00001c87
    1dd8:	00001c89 	.word	0x00001c89
    1ddc:	00001c87 	.word	0x00001c87
    1de0:	00001f15 	.word	0x00001f15
    1de4:	00001e3d 	.word	0x00001e3d
    1de8:	00001f15 	.word	0x00001f15
    1dec:	00001c87 	.word	0x00001c87
    1df0:	00001c87 	.word	0x00001c87
    1df4:	00001e63 	.word	0x00001e63
    1df8:	00001e35 	.word	0x00001e35
    1dfc:	00001e3d 	.word	0x00001e3d
    1e00:	00001c87 	.word	0x00001c87
    1e04:	00001c87 	.word	0x00001c87
    1e08:	00001e3d 	.word	0x00001e3d
    1e0c:	00001c87 	.word	0x00001c87
    1e10:	00001e2d 	.word	0x00001e2d
				if (*fmt == '%') {
    1e14:	2925      	cmp	r1, #37	; 0x25
    1e16:	f47f af37 	bne.w	1c88 <cbvprintf_package+0xc0>
					parsing = true;
    1e1a:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
    1e1c:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
    1e20:	46c1      	mov	r9, r8
				continue;
    1e22:	e731      	b.n	1c88 <cbvprintf_package+0xc0>
				align = VA_STACK_ALIGN(intmax_t);
    1e24:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
    1e28:	46c1      	mov	r9, r8
				continue;
    1e2a:	e72d      	b.n	1c88 <cbvprintf_package+0xc0>
				align = VA_STACK_ALIGN(size_t);
    1e2c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
    1e30:	46c1      	mov	r9, r8
				continue;
    1e32:	e729      	b.n	1c88 <cbvprintf_package+0xc0>
				align = VA_STACK_ALIGN(ptrdiff_t);
    1e34:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
    1e38:	46c1      	mov	r9, r8
				continue;
    1e3a:	e725      	b.n	1c88 <cbvprintf_package+0xc0>
				if (fmt[-1] == 'l') {
    1e3c:	7829      	ldrb	r1, [r5, #0]
    1e3e:	296c      	cmp	r1, #108	; 0x6c
    1e40:	d001      	beq.n	1e46 <cbvprintf_package+0x27e>
				parsing = false;
    1e42:	2600      	movs	r6, #0
    1e44:	e012      	b.n	1e6c <cbvprintf_package+0x2a4>
					if (fmt[-2] == 'l') {
    1e46:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    1e4a:	296c      	cmp	r1, #108	; 0x6c
    1e4c:	d004      	beq.n	1e58 <cbvprintf_package+0x290>
				parsing = false;
    1e4e:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
    1e50:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
    1e54:	46c1      	mov	r9, r8
    1e56:	e009      	b.n	1e6c <cbvprintf_package+0x2a4>
				parsing = false;
    1e58:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
    1e5a:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
    1e5e:	46c1      	mov	r9, r8
    1e60:	e004      	b.n	1e6c <cbvprintf_package+0x2a4>
				is_str_arg = true;
    1e62:	4632      	mov	r2, r6
				parsing = false;
    1e64:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    1e66:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    1e6a:	46c1      	mov	r9, r8
		buf = (void *) ROUND_UP(buf, align);
    1e6c:	eb04 0508 	add.w	r5, r4, r8
    1e70:	3d01      	subs	r5, #1
    1e72:	f1c8 0100 	rsb	r1, r8, #0
    1e76:	400d      	ands	r5, r1
    1e78:	462c      	mov	r4, r5
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1e7a:	b127      	cbz	r7, 1e86 <cbvprintf_package+0x2be>
    1e7c:	1be9      	subs	r1, r5, r7
    1e7e:	4449      	add	r1, r9
    1e80:	4551      	cmp	r1, sl
    1e82:	f200 80ec 	bhi.w	205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
		if (is_str_arg) {
    1e86:	2a00      	cmp	r2, #0
    1e88:	d149      	bne.n	1f1e <cbvprintf_package+0x356>
		} else if (size == sizeof(int)) {
    1e8a:	f1b9 0f04 	cmp.w	r9, #4
    1e8e:	d072      	beq.n	1f76 <cbvprintf_package+0x3ae>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    1e90:	f1b9 0f08 	cmp.w	r9, #8
    1e94:	f040 80ec 	bne.w	2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>
			long long v = va_arg(ap, long long);
    1e98:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e9a:	3107      	adds	r1, #7
    1e9c:	f021 0107 	bic.w	r1, r1, #7
    1ea0:	f101 0008 	add.w	r0, r1, #8
    1ea4:	9016      	str	r0, [sp, #88]	; 0x58
    1ea6:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
    1eaa:	b10f      	cbz	r7, 1eb0 <cbvprintf_package+0x2e8>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    1eac:	e9c5 0100 	strd	r0, r1, [r5]
				}
			}
			buf += sizeof(long long);
    1eb0:	f105 0408 	add.w	r4, r5, #8
    1eb4:	e6e8      	b.n	1c88 <cbvprintf_package+0xc0>
				if (fmt[-1] == 'L') {
    1eb6:	7829      	ldrb	r1, [r5, #0]
    1eb8:	294c      	cmp	r1, #76	; 0x4c
    1eba:	d01b      	beq.n	1ef4 <cbvprintf_package+0x32c>
					v.d = va_arg(ap, double);
    1ebc:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ebe:	3107      	adds	r1, #7
    1ec0:	f021 0107 	bic.w	r1, r1, #7
    1ec4:	f101 0008 	add.w	r0, r1, #8
    1ec8:	9016      	str	r0, [sp, #88]	; 0x58
    1eca:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
    1ece:	3407      	adds	r4, #7
    1ed0:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    1ed4:	b147      	cbz	r7, 1ee8 <cbvprintf_package+0x320>
					if (BUF_OFFSET + size > len) {
    1ed6:	1be6      	subs	r6, r4, r7
    1ed8:	3608      	adds	r6, #8
    1eda:	4556      	cmp	r6, sl
    1edc:	d814      	bhi.n	1f08 <cbvprintf_package+0x340>
					} else if (fmt[-1] == 'L') {
    1ede:	782d      	ldrb	r5, [r5, #0]
    1ee0:	2d4c      	cmp	r5, #76	; 0x4c
    1ee2:	d014      	beq.n	1f0e <cbvprintf_package+0x346>
						*(double *)buf = v.d;
    1ee4:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
    1ee8:	3408      	adds	r4, #8
				parsing = false;
    1eea:	2600      	movs	r6, #0
				continue;
    1eec:	f04f 0808 	mov.w	r8, #8
    1ef0:	46c1      	mov	r9, r8
    1ef2:	e6c9      	b.n	1c88 <cbvprintf_package+0xc0>
					v.ld = va_arg(ap, long double);
    1ef4:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ef6:	3107      	adds	r1, #7
    1ef8:	f021 0107 	bic.w	r1, r1, #7
    1efc:	f101 0008 	add.w	r0, r1, #8
    1f00:	9016      	str	r0, [sp, #88]	; 0x58
    1f02:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
    1f06:	e7e2      	b.n	1ece <cbvprintf_package+0x306>
						return -ENOSPC;
    1f08:	f06f 001b 	mvn.w	r0, #27
    1f0c:	e09e      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
						*(long double *)buf = v.ld;
    1f0e:	e9c4 0100 	strd	r0, r1, [r4]
    1f12:	e7e9      	b.n	1ee8 <cbvprintf_package+0x320>
				parsing = false;
    1f14:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
    1f16:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
    1f1a:	46c1      	mov	r9, r8
    1f1c:	e7a6      	b.n	1e6c <cbvprintf_package+0x2a4>
			s = va_arg(ap, char *);
    1f1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1f20:	1d11      	adds	r1, r2, #4
    1f22:	9116      	str	r1, [sp, #88]	; 0x58
    1f24:	6812      	ldr	r2, [r2, #0]
    1f26:	9203      	str	r2, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1f28:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
    1f2a:	461d      	mov	r5, r3
    1f2c:	e674      	b.n	1c18 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1f2e:	4b56      	ldr	r3, [pc, #344]	; (2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>)
    1f30:	9a03      	ldr	r2, [sp, #12]
    1f32:	429a      	cmp	r2, r3
    1f34:	d304      	bcc.n	1f40 <cbvprintf_package+0x378>
    1f36:	4b55      	ldr	r3, [pc, #340]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    1f38:	429a      	cmp	r2, r3
    1f3a:	d30a      	bcc.n	1f52 <cbvprintf_package+0x38a>
    1f3c:	2300      	movs	r3, #0
    1f3e:	e000      	b.n	1f42 <cbvprintf_package+0x37a>
    1f40:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1f42:	2b00      	cmp	r3, #0
    1f44:	f47f ae70 	bne.w	1c28 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    1f48:	9b05      	ldr	r3, [sp, #20]
    1f4a:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1f4e:	2000      	movs	r0, #0
    1f50:	e66f      	b.n	1c32 <cbvprintf_package+0x6a>
    1f52:	2301      	movs	r3, #1
    1f54:	e7f5      	b.n	1f42 <cbvprintf_package+0x37a>
						s_rw_cnt++;
    1f56:	9b06      	ldr	r3, [sp, #24]
    1f58:	3301      	adds	r3, #1
    1f5a:	9306      	str	r3, [sp, #24]
    1f5c:	e688      	b.n	1c70 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    1f5e:	b908      	cbnz	r0, 1f64 <cbvprintf_package+0x39c>
    1f60:	9b01      	ldr	r3, [sp, #4]
    1f62:	b113      	cbz	r3, 1f6a <cbvprintf_package+0x3a2>
					len += 1;
    1f64:	f10a 0a01 	add.w	sl, sl, #1
    1f68:	e682      	b.n	1c70 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    1f6a:	9803      	ldr	r0, [sp, #12]
    1f6c:	f018 f82a 	bl	19fc4 <strlen>
    1f70:	1c83      	adds	r3, r0, #2
    1f72:	449a      	add	sl, r3
    1f74:	e67c      	b.n	1c70 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    1f76:	9916      	ldr	r1, [sp, #88]	; 0x58
    1f78:	1d08      	adds	r0, r1, #4
    1f7a:	9016      	str	r0, [sp, #88]	; 0x58
    1f7c:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
    1f7e:	b107      	cbz	r7, 1f82 <cbvprintf_package+0x3ba>
				*(int *)buf = v;
    1f80:	6029      	str	r1, [r5, #0]
			buf += sizeof(int);
    1f82:	1d2c      	adds	r4, r5, #4
    1f84:	e680      	b.n	1c88 <cbvprintf_package+0xc0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    1f86:	1be3      	subs	r3, r4, r7
    1f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1f8c:	d273      	bcs.n	2076 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x76>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    1f8e:	b187      	cbz	r7, 1fb2 <cbvprintf_package+0x3ea>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    1f90:	2200      	movs	r2, #0
    1f92:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1f94:	089b      	lsrs	r3, r3, #2
    1f96:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    1f98:	9b01      	ldr	r3, [sp, #4]
    1f9a:	b173      	cbz	r3, 1fba <cbvprintf_package+0x3f2>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1f9c:	9b06      	ldr	r3, [sp, #24]
    1f9e:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1fa0:	9b04      	ldr	r3, [sp, #16]
    1fa2:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    1fa4:	bb03      	cbnz	r3, 1fe8 <cbvprintf_package+0x420>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    1fa6:	9d02      	ldr	r5, [sp, #8]
    1fa8:	f8dd 9010 	ldr.w	r9, [sp, #16]
    1fac:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1fb0:	e031      	b.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1fb2:	4453      	add	r3, sl
    1fb4:	f1a3 0008 	sub.w	r0, r3, #8
    1fb8:	e048      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    1fba:	9b06      	ldr	r3, [sp, #24]
    1fbc:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    1fbe:	e7ef      	b.n	1fa0 <cbvprintf_package+0x3d8>
		for (i = 0; i < s_idx; i++) {
    1fc0:	3301      	adds	r3, #1
    1fc2:	459b      	cmp	fp, r3
    1fc4:	d9ef      	bls.n	1fa6 <cbvprintf_package+0x3de>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1fc6:	aa0c      	add	r2, sp, #48	; 0x30
    1fc8:	441a      	add	r2, r3
    1fca:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    1fce:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    1fd2:	2a00      	cmp	r2, #0
    1fd4:	daf4      	bge.n	1fc0 <cbvprintf_package+0x3f8>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1fd6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1fda:	1be2      	subs	r2, r4, r7
    1fdc:	3201      	adds	r2, #1
    1fde:	4552      	cmp	r2, sl
    1fe0:	d84c      	bhi.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
			*buf++ = pos;
    1fe2:	f804 1b01 	strb.w	r1, [r4], #1
    1fe6:	e7eb      	b.n	1fc0 <cbvprintf_package+0x3f8>
		for (i = 0; i < s_idx; i++) {
    1fe8:	9b02      	ldr	r3, [sp, #8]
    1fea:	e7ea      	b.n	1fc2 <cbvprintf_package+0x3fa>
		if (rws_pos_en) {
    1fec:	9b01      	ldr	r3, [sp, #4]
    1fee:	b1f3      	cbz	r3, 202e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e>
			size = 0;
    1ff0:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    1ff2:	1be3      	subs	r3, r4, r7
    1ff4:	4433      	add	r3, r6
    1ff6:	3301      	adds	r3, #1
    1ff8:	4553      	cmp	r3, sl
    1ffa:	d842      	bhi.n	2082 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x82>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    1ffc:	ab0c      	add	r3, sp, #48	; 0x30
    1ffe:	442b      	add	r3, r5
    2000:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2004:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
    2008:	4632      	mov	r2, r6
    200a:	4641      	mov	r1, r8
    200c:	4620      	mov	r0, r4
    200e:	f018 f81c 	bl	1a04a <memcpy>
		buf += size;
    2012:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    2014:	3501      	adds	r5, #1
    2016:	45ab      	cmp	fp, r5
    2018:	d917      	bls.n	204a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    201a:	f1b9 0f00 	cmp.w	r9, #0
    201e:	d0e5      	beq.n	1fec <cbvprintf_package+0x424>
    2020:	ab0c      	add	r3, sp, #48	; 0x30
    2022:	442b      	add	r3, r5
    2024:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    2028:	2b00      	cmp	r3, #0
    202a:	dadf      	bge.n	1fec <cbvprintf_package+0x424>
    202c:	e7f2      	b.n	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    202e:	ab0c      	add	r3, sp, #48	; 0x30
    2030:	442b      	add	r3, r5
    2032:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2036:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    203a:	2200      	movs	r2, #0
    203c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    2040:	4640      	mov	r0, r8
    2042:	f017 ffbf 	bl	19fc4 <strlen>
    2046:	1c46      	adds	r6, r0, #1
    2048:	e7d3      	b.n	1ff2 <cbvprintf_package+0x42a>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    204a:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    204c:	b00d      	add	sp, #52	; 0x34
    204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    2052:	f06f 000d 	mvn.w	r0, #13
    2056:	e7f9      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
		return -ENOSPC;
    2058:	f06f 001b 	mvn.w	r0, #27
    205c:	e7f6      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
			return -ENOSPC;
    205e:	f06f 001b 	mvn.w	r0, #27
    2062:	e7f3      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
					return -EINVAL;
    2064:	f06f 0015 	mvn.w	r0, #21
    2068:	e7f0      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
					return -EINVAL;
    206a:	f06f 0015 	mvn.w	r0, #21
    206e:	e7ed      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
			return -EINVAL;
    2070:	f06f 0015 	mvn.w	r0, #21
    2074:	e7ea      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
		return -EINVAL;
    2076:	f06f 0015 	mvn.w	r0, #21
    207a:	e7e7      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
				return -ENOSPC;
    207c:	f06f 001b 	mvn.w	r0, #27
    2080:	e7e4      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
			return -ENOSPC;
    2082:	f06f 001b 	mvn.w	r0, #27
    2086:	e7e1      	b.n	204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
    2088:	0001ffec 	.word	0x0001ffec
    208c:	00023af4 	.word	0x00023af4

00002090 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    2090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2094:	b091      	sub	sp, #68	; 0x44
    2096:	4606      	mov	r6, r0
    2098:	4693      	mov	fp, r2
    209a:	9301      	str	r3, [sp, #4]
    209c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    209e:	9102      	str	r1, [sp, #8]
    20a0:	b159      	cbz	r1, 20ba <cbprintf_package_convert+0x2a>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    20a2:	f896 8002 	ldrb.w	r8, [r6, #2]
    20a6:	f8cd 8000 	str.w	r8, [sp]
	ro_cpy = ros_nbr &&
    20aa:	f1b8 0f00 	cmp.w	r8, #0
    20ae:	d008      	beq.n	20c2 <cbprintf_package_convert+0x32>
    20b0:	f017 0f01 	tst.w	r7, #1
    20b4:	d110      	bne.n	20d8 <cbprintf_package_convert+0x48>
    20b6:	2300      	movs	r3, #0
    20b8:	e004      	b.n	20c4 <cbprintf_package_convert+0x34>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    20ba:	f015 fea8 	bl	17e0e <get_package_len>
    20be:	9002      	str	r0, [sp, #8]
    20c0:	e7ef      	b.n	20a2 <cbprintf_package_convert+0x12>
	ro_cpy = ros_nbr &&
    20c2:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    20c4:	f896 a003 	ldrb.w	sl, [r6, #3]
	rw_cpy = rws_nbr > 0 &&
    20c8:	f1ba 0f00 	cmp.w	sl, #0
    20cc:	d006      	beq.n	20dc <cbprintf_package_convert+0x4c>
    20ce:	f017 0f02 	tst.w	r7, #2
    20d2:	d11d      	bne.n	2110 <cbprintf_package_convert+0x80>
    20d4:	2200      	movs	r2, #0
    20d6:	e002      	b.n	20de <cbprintf_package_convert+0x4e>
	ro_cpy = ros_nbr &&
    20d8:	2301      	movs	r3, #1
    20da:	e7f3      	b.n	20c4 <cbprintf_package_convert+0x34>
	rw_cpy = rws_nbr > 0 &&
    20dc:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
    20de:	b902      	cbnz	r2, 20e2 <cbprintf_package_convert+0x52>
    20e0:	b1c3      	cbz	r3, 2114 <cbprintf_package_convert+0x84>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
    20e2:	7835      	ldrb	r5, [r6, #0]
    20e4:	00aa      	lsls	r2, r5, #2
    20e6:	9203      	str	r2, [sp, #12]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	uint8_t *str_pos = &buf[args_size];
    20e8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
    20ec:	f1bb 0f00 	cmp.w	fp, #0
    20f0:	d01c      	beq.n	212c <cbprintf_package_convert+0x9c>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
    20f2:	2b00      	cmp	r3, #0
    20f4:	f040 8086 	bne.w	2204 <cbprintf_package_convert+0x174>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    20f8:	9b00      	ldr	r3, [sp, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	f000 808e 	beq.w	221c <cbprintf_package_convert+0x18c>
    2100:	f017 0f04 	tst.w	r7, #4
    2104:	f040 808e 	bne.w	2224 <cbprintf_package_convert+0x194>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
    2108:	2000      	movs	r0, #0
		keep_cnt = 0;
    210a:	4681      	mov	r9, r0
		scpy_cnt = 0;
    210c:	4680      	mov	r8, r0
    210e:	e07c      	b.n	220a <cbprintf_package_convert+0x17a>
	rw_cpy = rws_nbr > 0 &&
    2110:	2201      	movs	r2, #1
    2112:	e7e4      	b.n	20de <cbprintf_package_convert+0x4e>
		if (cb) {
    2114:	f1bb 0f00 	cmp.w	fp, #0
    2118:	d003      	beq.n	2122 <cbprintf_package_convert+0x92>
			cb(in_packaged, in_len, ctx);
    211a:	9a01      	ldr	r2, [sp, #4]
    211c:	9902      	ldr	r1, [sp, #8]
    211e:	4630      	mov	r0, r6
    2120:	47d8      	blx	fp
		return in_len;
    2122:	9c02      	ldr	r4, [sp, #8]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    2124:	4620      	mov	r0, r4
    2126:	b011      	add	sp, #68	; 0x44
    2128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
    212c:	9c02      	ldr	r4, [sp, #8]
		if (ro_cpy) {
    212e:	bb03      	cbnz	r3, 2172 <cbprintf_package_convert+0xe2>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    2130:	9b00      	ldr	r3, [sp, #0]
    2132:	b3a3      	cbz	r3, 219e <cbprintf_package_convert+0x10e>
    2134:	f017 0904 	ands.w	r9, r7, #4
    2138:	d028      	beq.n	218c <cbprintf_package_convert+0xfc>
				str_pos += ros_nbr;
    213a:	441d      	add	r5, r3
	size_t strl_cnt = 0;
    213c:	f04f 0900 	mov.w	r9, #0
    2140:	e024      	b.n	218c <cbprintf_package_convert+0xfc>
				out_len += len;
    2142:	4404      	add	r4, r0
				str_pos++;
    2144:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
    2146:	f108 0801 	add.w	r8, r8, #1
    214a:	45d0      	cmp	r8, sl
    214c:	d21b      	bcs.n	2186 <cbprintf_package_convert+0xf6>
				const char *str = *(const char **)&buf32[*str_pos];
    214e:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
    2150:	2300      	movs	r3, #0
    2152:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    2156:	4619      	mov	r1, r3
    2158:	4658      	mov	r0, fp
    215a:	f015 fe6d 	bl	17e38 <append_string>
				if (strl && strl_cnt < strl_len) {
    215e:	2f00      	cmp	r7, #0
    2160:	d0ef      	beq.n	2142 <cbprintf_package_convert+0xb2>
    2162:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2164:	4599      	cmp	r9, r3
    2166:	d2ec      	bcs.n	2142 <cbprintf_package_convert+0xb2>
					strl[strl_cnt++] = (uint16_t)len;
    2168:	f827 0019 	strh.w	r0, [r7, r9, lsl #1]
    216c:	f109 0901 	add.w	r9, r9, #1
    2170:	e7e7      	b.n	2142 <cbprintf_package_convert+0xb2>
			for (int i = 0; i < ros_nbr; i++) {
    2172:	f04f 0800 	mov.w	r8, #0
	size_t strl_cnt = 0;
    2176:	46c1      	mov	r9, r8
    2178:	f8cd a004 	str.w	sl, [sp, #4]
    217c:	f8dd a000 	ldr.w	sl, [sp]
    2180:	971a      	str	r7, [sp, #104]	; 0x68
    2182:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    2184:	e7e1      	b.n	214a <cbprintf_package_convert+0xba>
    2186:	f8dd a004 	ldr.w	sl, [sp, #4]
    218a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		bool drop_ro_str_pos = !(flags &
    218c:	f007 0305 	and.w	r3, r7, #5
    2190:	9300      	str	r3, [sp, #0]
		for (int i = 0; i < rws_nbr; i++) {
    2192:	f04f 0800 	mov.w	r8, #0
    2196:	f8cd b004 	str.w	fp, [sp, #4]
    219a:	46b3      	mov	fp, r6
    219c:	e023      	b.n	21e6 <cbprintf_package_convert+0x156>
	size_t strl_cnt = 0;
    219e:	f8dd 9000 	ldr.w	r9, [sp]
    21a2:	e7f3      	b.n	218c <cbprintf_package_convert+0xfc>
    21a4:	2300      	movs	r3, #0
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
    21a6:	461e      	mov	r6, r3
    21a8:	b113      	cbz	r3, 21b0 <cbprintf_package_convert+0x120>
    21aa:	f017 0f01 	tst.w	r7, #1
    21ae:	d103      	bne.n	21b8 <cbprintf_package_convert+0x128>
    21b0:	b996      	cbnz	r6, 21d8 <cbprintf_package_convert+0x148>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
    21b2:	f017 0f02 	tst.w	r7, #2
    21b6:	d00f      	beq.n	21d8 <cbprintf_package_convert+0x148>
				int len = append_string(cb, NULL, str, 0);
    21b8:	2300      	movs	r3, #0
    21ba:	4619      	mov	r1, r3
    21bc:	9801      	ldr	r0, [sp, #4]
    21be:	f015 fe3b 	bl	17e38 <append_string>
				if (strl && strl_cnt < strl_len) {
    21c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    21c4:	b13b      	cbz	r3, 21d6 <cbprintf_package_convert+0x146>
    21c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    21c8:	4599      	cmp	r9, r3
    21ca:	d204      	bcs.n	21d6 <cbprintf_package_convert+0x146>
					strl[strl_cnt++] = (uint16_t)len;
    21cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    21ce:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
    21d2:	f109 0901 	add.w	r9, r9, #1
				out_len += len;
    21d6:	4404      	add	r4, r0
			if (is_ro && drop_ro_str_pos) {
    21d8:	b116      	cbz	r6, 21e0 <cbprintf_package_convert+0x150>
    21da:	9b00      	ldr	r3, [sp, #0]
    21dc:	b903      	cbnz	r3, 21e0 <cbprintf_package_convert+0x150>
				out_len--;
    21de:	3c01      	subs	r4, #1
			str_pos++;
    21e0:	3501      	adds	r5, #1
		for (int i = 0; i < rws_nbr; i++) {
    21e2:	f108 0801 	add.w	r8, r8, #1
    21e6:	45d0      	cmp	r8, sl
    21e8:	d29c      	bcs.n	2124 <cbprintf_package_convert+0x94>
			const char *str = *(const char **)&buf32[*str_pos];
    21ea:	782b      	ldrb	r3, [r5, #0]
    21ec:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
    21f0:	4b6b      	ldr	r3, [pc, #428]	; (23a0 <cbprintf_package_convert+0x310>)
    21f2:	429a      	cmp	r2, r3
    21f4:	d3d6      	bcc.n	21a4 <cbprintf_package_convert+0x114>
    21f6:	4b6b      	ldr	r3, [pc, #428]	; (23a4 <cbprintf_package_convert+0x314>)
    21f8:	429a      	cmp	r2, r3
    21fa:	d301      	bcc.n	2200 <cbprintf_package_convert+0x170>
    21fc:	2300      	movs	r3, #0
    21fe:	e7d2      	b.n	21a6 <cbprintf_package_convert+0x116>
    2200:	2301      	movs	r3, #1
    2202:	e7d0      	b.n	21a6 <cbprintf_package_convert+0x116>
		dst = cpy_str_pos;
    2204:	a80b      	add	r0, sp, #44	; 0x2c
		keep_cnt = 0;
    2206:	f04f 0900 	mov.w	r9, #0
	if (dst) {
    220a:	b118      	cbz	r0, 2214 <cbprintf_package_convert+0x184>
		memcpy(dst, str_pos, ros_nbr);
    220c:	9a00      	ldr	r2, [sp, #0]
    220e:	4629      	mov	r1, r5
    2210:	f017 ff1b 	bl	1a04a <memcpy>
	str_pos += ros_nbr;
    2214:	9b00      	ldr	r3, [sp, #0]
    2216:	441d      	add	r5, r3
	for (int i = 0; i < rws_nbr; i++) {
    2218:	2300      	movs	r3, #0
    221a:	e017      	b.n	224c <cbprintf_package_convert+0x1bc>
		dst = NULL;
    221c:	2000      	movs	r0, #0
		keep_cnt = 0;
    221e:	4681      	mov	r9, r0
		scpy_cnt = 0;
    2220:	4680      	mov	r8, r0
    2222:	e7f2      	b.n	220a <cbprintf_package_convert+0x17a>
		keep_cnt = ros_nbr;
    2224:	46c1      	mov	r9, r8
		dst = keep_str_pos;
    2226:	a807      	add	r0, sp, #28
		scpy_cnt = 0;
    2228:	f04f 0800 	mov.w	r8, #0
    222c:	e7ed      	b.n	220a <cbprintf_package_convert+0x17a>
    222e:	2100      	movs	r1, #0
		if (is_ro) {
    2230:	b339      	cbz	r1, 2282 <cbprintf_package_convert+0x1f2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
    2232:	f017 0f01 	tst.w	r7, #1
    2236:	d018      	beq.n	226a <cbprintf_package_convert+0x1da>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    2238:	f108 0101 	add.w	r1, r8, #1
    223c:	a810      	add	r0, sp, #64	; 0x40
    223e:	4480      	add	r8, r0
    2240:	f808 2c14 	strb.w	r2, [r8, #-20]
    2244:	fa5f f881 	uxtb.w	r8, r1
		str_pos++;
    2248:	3501      	adds	r5, #1
	for (int i = 0; i < rws_nbr; i++) {
    224a:	3301      	adds	r3, #1
    224c:	4553      	cmp	r3, sl
    224e:	d22d      	bcs.n	22ac <cbprintf_package_convert+0x21c>
		const char *str = *(const char **)&buf32[*str_pos];
    2250:	782a      	ldrb	r2, [r5, #0]
    2252:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    2256:	4852      	ldr	r0, [pc, #328]	; (23a0 <cbprintf_package_convert+0x310>)
    2258:	4281      	cmp	r1, r0
    225a:	d3e8      	bcc.n	222e <cbprintf_package_convert+0x19e>
    225c:	4851      	ldr	r0, [pc, #324]	; (23a4 <cbprintf_package_convert+0x314>)
    225e:	4281      	cmp	r1, r0
    2260:	d301      	bcc.n	2266 <cbprintf_package_convert+0x1d6>
    2262:	2100      	movs	r1, #0
    2264:	e7e4      	b.n	2230 <cbprintf_package_convert+0x1a0>
    2266:	2101      	movs	r1, #1
    2268:	e7e2      	b.n	2230 <cbprintf_package_convert+0x1a0>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
    226a:	f017 0f04 	tst.w	r7, #4
    226e:	d0eb      	beq.n	2248 <cbprintf_package_convert+0x1b8>
				keep_str_pos[keep_cnt++] = *str_pos;
    2270:	f109 0101 	add.w	r1, r9, #1
    2274:	a810      	add	r0, sp, #64	; 0x40
    2276:	4481      	add	r9, r0
    2278:	f809 2c24 	strb.w	r2, [r9, #-36]
    227c:	fa5f f981 	uxtb.w	r9, r1
    2280:	e7e2      	b.n	2248 <cbprintf_package_convert+0x1b8>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
    2282:	f017 0f02 	tst.w	r7, #2
    2286:	d008      	beq.n	229a <cbprintf_package_convert+0x20a>
				cpy_str_pos[scpy_cnt++] = *str_pos;
    2288:	f108 0101 	add.w	r1, r8, #1
    228c:	a810      	add	r0, sp, #64	; 0x40
    228e:	4480      	add	r8, r0
    2290:	f808 2c14 	strb.w	r2, [r8, #-20]
    2294:	fa5f f881 	uxtb.w	r8, r1
    2298:	e7d6      	b.n	2248 <cbprintf_package_convert+0x1b8>
				keep_str_pos[keep_cnt++] = *str_pos;
    229a:	f109 0101 	add.w	r1, r9, #1
    229e:	a810      	add	r0, sp, #64	; 0x40
    22a0:	4481      	add	r9, r0
    22a2:	f809 2c24 	strb.w	r2, [r9, #-36]
    22a6:	fa5f f981 	uxtb.w	r9, r1
    22aa:	e7cd      	b.n	2248 <cbprintf_package_convert+0x1b8>
	out_desc.len = in_desc->len;
    22ac:	7833      	ldrb	r3, [r6, #0]
    22ae:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    22b2:	7873      	ldrb	r3, [r6, #1]
    22b4:	4443      	add	r3, r8
    22b6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    22ba:	f017 0f02 	tst.w	r7, #2
    22be:	d00a      	beq.n	22d6 <cbprintf_package_convert+0x246>
    22c0:	2300      	movs	r3, #0
    22c2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    22c6:	f017 0f01 	tst.w	r7, #1
    22ca:	d106      	bne.n	22da <cbprintf_package_convert+0x24a>
    22cc:	f017 0f04 	tst.w	r7, #4
    22d0:	d132      	bne.n	2338 <cbprintf_package_convert+0x2a8>
    22d2:	2300      	movs	r3, #0
    22d4:	e002      	b.n	22dc <cbprintf_package_convert+0x24c>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
    22d6:	464b      	mov	r3, r9
    22d8:	e7f3      	b.n	22c2 <cbprintf_package_convert+0x232>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    22da:	2300      	movs	r3, #0
    22dc:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    22e0:	6830      	ldr	r0, [r6, #0]
    22e2:	9006      	str	r0, [sp, #24]
	*in_desc = out_desc;
    22e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    22e6:	6030      	str	r0, [r6, #0]
	rv = cb(in_packaged, args_size, ctx);
    22e8:	9f01      	ldr	r7, [sp, #4]
    22ea:	463a      	mov	r2, r7
    22ec:	9903      	ldr	r1, [sp, #12]
    22ee:	4630      	mov	r0, r6
    22f0:	47d8      	blx	fp
	if (rv < 0) {
    22f2:	1e04      	subs	r4, r0, #0
    22f4:	f6ff af16 	blt.w	2124 <cbprintf_package_convert+0x94>
	*in_desc = in_desc_backup;
    22f8:	9806      	ldr	r0, [sp, #24]
    22fa:	6030      	str	r0, [r6, #0]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    22fc:	9701      	str	r7, [sp, #4]
    22fe:	463a      	mov	r2, r7
    2300:	4649      	mov	r1, r9
    2302:	a807      	add	r0, sp, #28
    2304:	47d8      	blx	fp
	if (rv < 0) {
    2306:	2800      	cmp	r0, #0
    2308:	db43      	blt.n	2392 <cbprintf_package_convert+0x302>
	out_len += rv;
    230a:	1827      	adds	r7, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
    230c:	9800      	ldr	r0, [sp, #0]
    230e:	9b03      	ldr	r3, [sp, #12]
    2310:	4418      	add	r0, r3
    2312:	4601      	mov	r1, r0
    2314:	4451      	add	r1, sl
	rv = cb(str_pos, strs_len, ctx);
    2316:	f8dd 9004 	ldr.w	r9, [sp, #4]
    231a:	464a      	mov	r2, r9
    231c:	9b02      	ldr	r3, [sp, #8]
    231e:	1a59      	subs	r1, r3, r1
    2320:	4628      	mov	r0, r5
    2322:	47d8      	blx	fp
	if (rv < 0) {
    2324:	1e04      	subs	r4, r0, #0
    2326:	f6ff aefd 	blt.w	2124 <cbprintf_package_convert+0x94>
	out_len += rv;
    232a:	193d      	adds	r5, r7, r4
	for (int i = 0; i < scpy_cnt; i++) {
    232c:	2700      	movs	r7, #0
    232e:	9600      	str	r6, [sp, #0]
    2330:	465e      	mov	r6, fp
    2332:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
    2336:	e015      	b.n	2364 <cbprintf_package_convert+0x2d4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
    2338:	464b      	mov	r3, r9
    233a:	e7cf      	b.n	22dc <cbprintf_package_convert+0x24c>
		uint16_t str_len = strl ? strl[i] : 0;
    233c:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
    2340:	464a      	mov	r2, r9
    2342:	2101      	movs	r1, #1
    2344:	f10d 0017 	add.w	r0, sp, #23
    2348:	47b0      	blx	r6
		if (rv < 0) {
    234a:	2800      	cmp	r0, #0
    234c:	db23      	blt.n	2396 <cbprintf_package_convert+0x306>
		out_len += rv;
    234e:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
    2350:	4653      	mov	r3, sl
    2352:	4622      	mov	r2, r4
    2354:	4649      	mov	r1, r9
    2356:	4630      	mov	r0, r6
    2358:	f015 fd6e 	bl	17e38 <append_string>
		if (rv < 0) {
    235c:	2800      	cmp	r0, #0
    235e:	db1c      	blt.n	239a <cbprintf_package_convert+0x30a>
		out_len += rv;
    2360:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    2362:	3701      	adds	r7, #1
    2364:	45b8      	cmp	r8, r7
    2366:	dd0e      	ble.n	2386 <cbprintf_package_convert+0x2f6>
		uint8_t loc = cpy_str_pos[i];
    2368:	ab10      	add	r3, sp, #64	; 0x40
    236a:	443b      	add	r3, r7
    236c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    2370:	f88d 3017 	strb.w	r3, [sp, #23]
		const char *str = *(const char **)&buf32[loc];
    2374:	9a00      	ldr	r2, [sp, #0]
    2376:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    237a:	f1bb 0f00 	cmp.w	fp, #0
    237e:	d0dd      	beq.n	233c <cbprintf_package_convert+0x2ac>
    2380:	f83b a017 	ldrh.w	sl, [fp, r7, lsl #1]
    2384:	e7dc      	b.n	2340 <cbprintf_package_convert+0x2b0>
	(void)cb(NULL, 0, ctx);
    2386:	9a01      	ldr	r2, [sp, #4]
    2388:	2100      	movs	r1, #0
    238a:	4608      	mov	r0, r1
    238c:	47b0      	blx	r6
	return out_len;
    238e:	462c      	mov	r4, r5
    2390:	e6c8      	b.n	2124 <cbprintf_package_convert+0x94>
		return rv;
    2392:	4604      	mov	r4, r0
    2394:	e6c6      	b.n	2124 <cbprintf_package_convert+0x94>
    2396:	4604      	mov	r4, r0
    2398:	e6c4      	b.n	2124 <cbprintf_package_convert+0x94>
    239a:	4604      	mov	r4, r0
    239c:	e6c2      	b.n	2124 <cbprintf_package_convert+0x94>
    239e:	bf00      	nop
    23a0:	0001ffec 	.word	0x0001ffec
    23a4:	00023af4 	.word	0x00023af4

000023a8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    23a8:	4b01      	ldr	r3, [pc, #4]	; (23b0 <__printk_hook_install+0x8>)
    23aa:	6018      	str	r0, [r3, #0]
}
    23ac:	4770      	bx	lr
    23ae:	bf00      	nop
    23b0:	20000264 	.word	0x20000264

000023b4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    23b4:	b510      	push	{r4, lr}
    23b6:	b086      	sub	sp, #24
    23b8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    23ba:	9003      	str	r0, [sp, #12]
    23bc:	9104      	str	r1, [sp, #16]
    23be:	2100      	movs	r1, #0
    23c0:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    23c2:	9100      	str	r1, [sp, #0]
    23c4:	a903      	add	r1, sp, #12
    23c6:	4806      	ldr	r0, [pc, #24]	; (23e0 <vsnprintk+0x2c>)
    23c8:	f000 fa42 	bl	2850 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    23cc:	9b05      	ldr	r3, [sp, #20]
    23ce:	9a04      	ldr	r2, [sp, #16]
    23d0:	4293      	cmp	r3, r2
    23d2:	da01      	bge.n	23d8 <vsnprintk+0x24>
		str[ctx.count] = '\0';
    23d4:	2200      	movs	r2, #0
    23d6:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    23d8:	9805      	ldr	r0, [sp, #20]
    23da:	b006      	add	sp, #24
    23dc:	bd10      	pop	{r4, pc}
    23de:	bf00      	nop
    23e0:	00017f39 	.word	0x00017f39

000023e4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    23e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23e8:	b083      	sub	sp, #12
    23ea:	4604      	mov	r4, r0
    23ec:	4608      	mov	r0, r1
    23ee:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    23f0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    23f2:	f013 0f08 	tst.w	r3, #8
    23f6:	d105      	bne.n	2404 <process_event+0x20>
    23f8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    23fc:	2300      	movs	r3, #0
    23fe:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2400:	9301      	str	r3, [sp, #4]
}
    2402:	e069      	b.n	24d8 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    2404:	2901      	cmp	r1, #1
    2406:	d009      	beq.n	241c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2408:	f043 0320 	orr.w	r3, r3, #32
    240c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    240e:	f385 8811 	msr	BASEPRI, r5
    2412:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2416:	b003      	add	sp, #12
    2418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    241c:	f043 0310 	orr.w	r3, r3, #16
    2420:	8323      	strh	r3, [r4, #24]
    2422:	e7f4      	b.n	240e <process_event+0x2a>
			evt = process_recheck(mgr);
    2424:	4620      	mov	r0, r4
    2426:	f015 fde6 	bl	17ff6 <process_recheck>
    242a:	e057      	b.n	24dc <process_event+0xf8>
			res = mgr->last_res;
    242c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    2430:	464a      	mov	r2, r9
    2432:	4669      	mov	r1, sp
    2434:	4620      	mov	r0, r4
    2436:	f015 fdf7 	bl	18028 <process_complete>
		onoff_transition_fn transit = NULL;
    243a:	2700      	movs	r7, #0
    243c:	e05a      	b.n	24f4 <process_event+0x110>
			transit = mgr->transitions->start;
    243e:	6923      	ldr	r3, [r4, #16]
    2440:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    2442:	2106      	movs	r1, #6
    2444:	4620      	mov	r0, r4
    2446:	f015 fdaf 	bl	17fa8 <set_state>
		res = 0;
    244a:	f04f 0900 	mov.w	r9, #0
    244e:	e051      	b.n	24f4 <process_event+0x110>
			transit = mgr->transitions->stop;
    2450:	6923      	ldr	r3, [r4, #16]
    2452:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    2454:	2104      	movs	r1, #4
    2456:	4620      	mov	r0, r4
    2458:	f015 fda6 	bl	17fa8 <set_state>
		res = 0;
    245c:	f04f 0900 	mov.w	r9, #0
    2460:	e048      	b.n	24f4 <process_event+0x110>
			transit = mgr->transitions->reset;
    2462:	6923      	ldr	r3, [r4, #16]
    2464:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    2466:	2105      	movs	r1, #5
    2468:	4620      	mov	r0, r4
    246a:	f015 fd9d 	bl	17fa8 <set_state>
		res = 0;
    246e:	f04f 0900 	mov.w	r9, #0
    2472:	e03f      	b.n	24f4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    2474:	2200      	movs	r2, #0
    2476:	e046      	b.n	2506 <process_event+0x122>
    2478:	2200      	movs	r2, #0
    247a:	e044      	b.n	2506 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    247c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    2480:	8323      	strh	r3, [r4, #24]
    2482:	f385 8811 	msr	BASEPRI, r5
    2486:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    248a:	2900      	cmp	r1, #0
    248c:	d144      	bne.n	2518 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    248e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    2490:	b12b      	cbz	r3, 249e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    2492:	464b      	mov	r3, r9
    2494:	4642      	mov	r2, r8
    2496:	4669      	mov	r1, sp
    2498:	4620      	mov	r0, r4
    249a:	f015 fe3c 	bl	18116 <notify_all>
			if (transit != NULL) {
    249e:	b117      	cbz	r7, 24a6 <process_event+0xc2>
				transit(mgr, transition_complete);
    24a0:	4925      	ldr	r1, [pc, #148]	; (2538 <process_event+0x154>)
    24a2:	4620      	mov	r0, r4
    24a4:	47b8      	blx	r7
	__asm__ volatile(
    24a6:	f04f 0320 	mov.w	r3, #32
    24aa:	f3ef 8511 	mrs	r5, BASEPRI
    24ae:	f383 8812 	msr	BASEPRI_MAX, r3
    24b2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    24b6:	8b23      	ldrh	r3, [r4, #24]
    24b8:	f023 0308 	bic.w	r3, r3, #8
    24bc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    24be:	8b23      	ldrh	r3, [r4, #24]
    24c0:	f013 0f10 	tst.w	r3, #16
    24c4:	d02e      	beq.n	2524 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    24c6:	f023 0310 	bic.w	r3, r3, #16
    24ca:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    24cc:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    24ce:	8b26      	ldrh	r6, [r4, #24]
    24d0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    24d4:	2800      	cmp	r0, #0
    24d6:	d09a      	beq.n	240e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    24d8:	2802      	cmp	r0, #2
    24da:	d0a3      	beq.n	2424 <process_event+0x40>
		if (evt == EVT_NOP) {
    24dc:	2800      	cmp	r0, #0
    24de:	d096      	beq.n	240e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    24e0:	2801      	cmp	r0, #1
    24e2:	d0a3      	beq.n	242c <process_event+0x48>
		} else if (evt == EVT_START) {
    24e4:	2803      	cmp	r0, #3
    24e6:	d0aa      	beq.n	243e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    24e8:	2804      	cmp	r0, #4
    24ea:	d0b1      	beq.n	2450 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    24ec:	2805      	cmp	r0, #5
    24ee:	d0b8      	beq.n	2462 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    24f0:	2700      	movs	r7, #0
		res = 0;
    24f2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    24f4:	8b23      	ldrh	r3, [r4, #24]
    24f6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    24fa:	45b0      	cmp	r8, r6
    24fc:	d0ba      	beq.n	2474 <process_event+0x90>
    24fe:	68a2      	ldr	r2, [r4, #8]
    2500:	2a00      	cmp	r2, #0
    2502:	d0b9      	beq.n	2478 <process_event+0x94>
    2504:	2201      	movs	r2, #1
		if (do_monitors
    2506:	4611      	mov	r1, r2
    2508:	2a00      	cmp	r2, #0
    250a:	d1b7      	bne.n	247c <process_event+0x98>
    250c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    250e:	2a00      	cmp	r2, #0
    2510:	d1b4      	bne.n	247c <process_event+0x98>
		    || (transit != NULL)) {
    2512:	2f00      	cmp	r7, #0
    2514:	d1b2      	bne.n	247c <process_event+0x98>
    2516:	e7d2      	b.n	24be <process_event+0xda>
				notify_monitors(mgr, state, res);
    2518:	464a      	mov	r2, r9
    251a:	4641      	mov	r1, r8
    251c:	4620      	mov	r0, r4
    251e:	f015 fd4b 	bl	17fb8 <notify_monitors>
    2522:	e7b4      	b.n	248e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2524:	f013 0f20 	tst.w	r3, #32
    2528:	d004      	beq.n	2534 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    252a:	f023 0320 	bic.w	r3, r3, #32
    252e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    2530:	2002      	movs	r0, #2
    2532:	e7cc      	b.n	24ce <process_event+0xea>
		evt = EVT_NOP;
    2534:	2000      	movs	r0, #0
    2536:	e7ca      	b.n	24ce <process_event+0xea>
    2538:	00018145 	.word	0x00018145

0000253c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    253c:	b570      	push	{r4, r5, r6, lr}
    253e:	b082      	sub	sp, #8
    2540:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    2542:	2300      	movs	r3, #0
    2544:	6003      	str	r3, [r0, #0]
    2546:	6043      	str	r3, [r0, #4]
    2548:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    254a:	784b      	ldrb	r3, [r1, #1]
    254c:	2b25      	cmp	r3, #37	; 0x25
    254e:	d002      	beq.n	2556 <extract_conversion+0x1a>
    2550:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    2552:	2501      	movs	r5, #1
    2554:	e01f      	b.n	2596 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    2556:	1c88      	adds	r0, r1, #2
    2558:	70e3      	strb	r3, [r4, #3]
		return sp;
    255a:	e145      	b.n	27e8 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    255c:	7823      	ldrb	r3, [r4, #0]
    255e:	f043 0304 	orr.w	r3, r3, #4
    2562:	7023      	strb	r3, [r4, #0]
		if (loop) {
    2564:	b1b5      	cbz	r5, 2594 <extract_conversion+0x58>
			++sp;
    2566:	3601      	adds	r6, #1
    2568:	e014      	b.n	2594 <extract_conversion+0x58>
			conv->flag_plus = true;
    256a:	7823      	ldrb	r3, [r4, #0]
    256c:	f043 0308 	orr.w	r3, r3, #8
    2570:	7023      	strb	r3, [r4, #0]
			break;
    2572:	e7f7      	b.n	2564 <extract_conversion+0x28>
			conv->flag_space = true;
    2574:	7823      	ldrb	r3, [r4, #0]
    2576:	f043 0310 	orr.w	r3, r3, #16
    257a:	7023      	strb	r3, [r4, #0]
			break;
    257c:	e7f2      	b.n	2564 <extract_conversion+0x28>
			conv->flag_hash = true;
    257e:	7823      	ldrb	r3, [r4, #0]
    2580:	f043 0320 	orr.w	r3, r3, #32
    2584:	7023      	strb	r3, [r4, #0]
			break;
    2586:	e7ed      	b.n	2564 <extract_conversion+0x28>
			conv->flag_zero = true;
    2588:	7823      	ldrb	r3, [r4, #0]
    258a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    258e:	7023      	strb	r3, [r4, #0]
			break;
    2590:	e7e8      	b.n	2564 <extract_conversion+0x28>
		switch (*sp) {
    2592:	2500      	movs	r5, #0
	} while (loop);
    2594:	b345      	cbz	r5, 25e8 <extract_conversion+0xac>
		switch (*sp) {
    2596:	7833      	ldrb	r3, [r6, #0]
    2598:	3b20      	subs	r3, #32
    259a:	2b10      	cmp	r3, #16
    259c:	d8f9      	bhi.n	2592 <extract_conversion+0x56>
    259e:	a201      	add	r2, pc, #4	; (adr r2, 25a4 <extract_conversion+0x68>)
    25a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    25a4:	00002575 	.word	0x00002575
    25a8:	00002593 	.word	0x00002593
    25ac:	00002593 	.word	0x00002593
    25b0:	0000257f 	.word	0x0000257f
    25b4:	00002593 	.word	0x00002593
    25b8:	00002593 	.word	0x00002593
    25bc:	00002593 	.word	0x00002593
    25c0:	00002593 	.word	0x00002593
    25c4:	00002593 	.word	0x00002593
    25c8:	00002593 	.word	0x00002593
    25cc:	00002593 	.word	0x00002593
    25d0:	0000256b 	.word	0x0000256b
    25d4:	00002593 	.word	0x00002593
    25d8:	0000255d 	.word	0x0000255d
    25dc:	00002593 	.word	0x00002593
    25e0:	00002593 	.word	0x00002593
    25e4:	00002589 	.word	0x00002589
	if (conv->flag_zero && conv->flag_dash) {
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	f003 0344 	and.w	r3, r3, #68	; 0x44
    25ee:	2b44      	cmp	r3, #68	; 0x44
    25f0:	d05f      	beq.n	26b2 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    25f2:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    25f4:	7823      	ldrb	r3, [r4, #0]
    25f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    25fa:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    25fc:	7833      	ldrb	r3, [r6, #0]
    25fe:	2b2a      	cmp	r3, #42	; 0x2a
    2600:	d05c      	beq.n	26bc <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    2602:	a801      	add	r0, sp, #4
    2604:	f016 f9f4 	bl	189f0 <extract_decimal>
	if (sp != wp) {
    2608:	9b01      	ldr	r3, [sp, #4]
    260a:	429e      	cmp	r6, r3
    260c:	d00f      	beq.n	262e <extract_conversion+0xf2>
		conv->width_present = true;
    260e:	7823      	ldrb	r3, [r4, #0]
    2610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2614:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    2616:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    2618:	b2db      	uxtb	r3, r3
    261a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    261e:	2800      	cmp	r0, #0
    2620:	db54      	blt.n	26cc <extract_conversion+0x190>
    2622:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    2624:	4313      	orrs	r3, r2
    2626:	7822      	ldrb	r2, [r4, #0]
    2628:	f363 0241 	bfi	r2, r3, #1, #1
    262c:	7022      	strb	r2, [r4, #0]
	return sp;
    262e:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    2630:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    2632:	781b      	ldrb	r3, [r3, #0]
    2634:	2b2e      	cmp	r3, #46	; 0x2e
    2636:	bf14      	ite	ne
    2638:	2300      	movne	r3, #0
    263a:	2301      	moveq	r3, #1
    263c:	7862      	ldrb	r2, [r4, #1]
    263e:	f363 0241 	bfi	r2, r3, #1, #1
    2642:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    2644:	2b00      	cmp	r3, #0
    2646:	d043      	beq.n	26d0 <extract_conversion+0x194>
	++sp;
    2648:	9b01      	ldr	r3, [sp, #4]
    264a:	1c5a      	adds	r2, r3, #1
    264c:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    264e:	785b      	ldrb	r3, [r3, #1]
    2650:	2b2a      	cmp	r3, #42	; 0x2a
    2652:	d03f      	beq.n	26d4 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    2654:	a801      	add	r0, sp, #4
    2656:	f016 f9cb 	bl	189f0 <extract_decimal>
	conv->prec_value = prec;
    265a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    265c:	7823      	ldrb	r3, [r4, #0]
    265e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    2662:	2800      	cmp	r0, #0
    2664:	db3e      	blt.n	26e4 <extract_conversion+0x1a8>
    2666:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    2668:	4313      	orrs	r3, r2
    266a:	7822      	ldrb	r2, [r4, #0]
    266c:	f363 0241 	bfi	r2, r3, #1, #1
    2670:	7022      	strb	r2, [r4, #0]
	return sp;
    2672:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    2674:	7803      	ldrb	r3, [r0, #0]
    2676:	3b4c      	subs	r3, #76	; 0x4c
    2678:	2b2e      	cmp	r3, #46	; 0x2e
    267a:	f200 809d 	bhi.w	27b8 <extract_conversion+0x27c>
    267e:	e8df f003 	tbb	[pc, r3]
    2682:	9b90      	.short	0x9b90
    2684:	9b9b9b9b 	.word	0x9b9b9b9b
    2688:	9b9b9b9b 	.word	0x9b9b9b9b
    268c:	9b9b9b9b 	.word	0x9b9b9b9b
    2690:	9b9b9b9b 	.word	0x9b9b9b9b
    2694:	9b9b9b9b 	.word	0x9b9b9b9b
    2698:	9b9b9b9b 	.word	0x9b9b9b9b
    269c:	9b339b9b 	.word	0x9b339b9b
    26a0:	9b459b57 	.word	0x9b459b57
    26a4:	9b9b9b9b 	.word	0x9b9b9b9b
    26a8:	9b899b9b 	.word	0x9b899b9b
    26ac:	9b9b9b9b 	.word	0x9b9b9b9b
    26b0:	82          	.byte	0x82
    26b1:	00          	.byte	0x00
		conv->flag_zero = false;
    26b2:	7823      	ldrb	r3, [r4, #0]
    26b4:	f36f 1386 	bfc	r3, #6, #1
    26b8:	7023      	strb	r3, [r4, #0]
    26ba:	e79a      	b.n	25f2 <extract_conversion+0xb6>
		conv->width_star = true;
    26bc:	7863      	ldrb	r3, [r4, #1]
    26be:	f043 0301 	orr.w	r3, r3, #1
    26c2:	7063      	strb	r3, [r4, #1]
		return ++sp;
    26c4:	4633      	mov	r3, r6
    26c6:	3301      	adds	r3, #1
    26c8:	9301      	str	r3, [sp, #4]
    26ca:	e7b1      	b.n	2630 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    26cc:	2201      	movs	r2, #1
    26ce:	e7a9      	b.n	2624 <extract_conversion+0xe8>
		return sp;
    26d0:	9801      	ldr	r0, [sp, #4]
    26d2:	e7cf      	b.n	2674 <extract_conversion+0x138>
		conv->prec_star = true;
    26d4:	7863      	ldrb	r3, [r4, #1]
    26d6:	f043 0304 	orr.w	r3, r3, #4
    26da:	7063      	strb	r3, [r4, #1]
		return ++sp;
    26dc:	4610      	mov	r0, r2
    26de:	3001      	adds	r0, #1
    26e0:	9001      	str	r0, [sp, #4]
    26e2:	e7c7      	b.n	2674 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    26e4:	2201      	movs	r2, #1
    26e6:	e7bf      	b.n	2668 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    26e8:	1c42      	adds	r2, r0, #1
    26ea:	7843      	ldrb	r3, [r0, #1]
    26ec:	2b68      	cmp	r3, #104	; 0x68
    26ee:	d006      	beq.n	26fe <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    26f0:	7863      	ldrb	r3, [r4, #1]
    26f2:	2102      	movs	r1, #2
    26f4:	f361 03c6 	bfi	r3, r1, #3, #4
    26f8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    26fa:	4610      	mov	r0, r2
    26fc:	e01e      	b.n	273c <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    26fe:	7863      	ldrb	r3, [r4, #1]
    2700:	2201      	movs	r2, #1
    2702:	f362 03c6 	bfi	r3, r2, #3, #4
    2706:	7063      	strb	r3, [r4, #1]
			++sp;
    2708:	3002      	adds	r0, #2
    270a:	e017      	b.n	273c <extract_conversion+0x200>
		if (*++sp == 'l') {
    270c:	1c42      	adds	r2, r0, #1
    270e:	7843      	ldrb	r3, [r0, #1]
    2710:	2b6c      	cmp	r3, #108	; 0x6c
    2712:	d006      	beq.n	2722 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    2714:	7863      	ldrb	r3, [r4, #1]
    2716:	2103      	movs	r1, #3
    2718:	f361 03c6 	bfi	r3, r1, #3, #4
    271c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    271e:	4610      	mov	r0, r2
    2720:	e00c      	b.n	273c <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    2722:	7863      	ldrb	r3, [r4, #1]
    2724:	2204      	movs	r2, #4
    2726:	f362 03c6 	bfi	r3, r2, #3, #4
    272a:	7063      	strb	r3, [r4, #1]
			++sp;
    272c:	3002      	adds	r0, #2
    272e:	e005      	b.n	273c <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    2730:	7863      	ldrb	r3, [r4, #1]
    2732:	2205      	movs	r2, #5
    2734:	f362 03c6 	bfi	r3, r2, #3, #4
    2738:	7063      	strb	r3, [r4, #1]
		++sp;
    273a:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    273c:	f810 3b01 	ldrb.w	r3, [r0], #1
    2740:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    2742:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    2746:	2a37      	cmp	r2, #55	; 0x37
    2748:	d87d      	bhi.n	2846 <extract_conversion+0x30a>
    274a:	e8df f002 	tbb	[pc, r2]
    274e:	7c5e      	.short	0x7c5e
    2750:	5e5e7c7c 	.word	0x5e5e7c7c
    2754:	7c7c7c5e 	.word	0x7c7c7c5e
    2758:	7c7c7c7c 	.word	0x7c7c7c7c
    275c:	7c7c7c7c 	.word	0x7c7c7c7c
    2760:	7c7c7c7c 	.word	0x7c7c7c7c
    2764:	7c7c4f7c 	.word	0x7c7c4f7c
    2768:	7c7c7c7c 	.word	0x7c7c7c7c
    276c:	7c5e7c7c 	.word	0x7c5e7c7c
    2770:	5e5e3a4f 	.word	0x5e5e3a4f
    2774:	7c3a7c5e 	.word	0x7c3a7c5e
    2778:	657c7c7c 	.word	0x657c7c7c
    277c:	7c7c714f 	.word	0x7c7c714f
    2780:	7c4f7c71 	.word	0x7c4f7c71
    2784:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    2786:	7863      	ldrb	r3, [r4, #1]
    2788:	2206      	movs	r2, #6
    278a:	f362 03c6 	bfi	r3, r2, #3, #4
    278e:	7063      	strb	r3, [r4, #1]
		++sp;
    2790:	3001      	adds	r0, #1
		break;
    2792:	e7d3      	b.n	273c <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    2794:	7863      	ldrb	r3, [r4, #1]
    2796:	2207      	movs	r2, #7
    2798:	f362 03c6 	bfi	r3, r2, #3, #4
    279c:	7063      	strb	r3, [r4, #1]
		++sp;
    279e:	3001      	adds	r0, #1
		break;
    27a0:	e7cc      	b.n	273c <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    27a2:	7863      	ldrb	r3, [r4, #1]
    27a4:	2208      	movs	r2, #8
    27a6:	f362 03c6 	bfi	r3, r2, #3, #4
    27aa:	7063      	strb	r3, [r4, #1]
		++sp;
    27ac:	3001      	adds	r0, #1
		conv->unsupported = true;
    27ae:	7823      	ldrb	r3, [r4, #0]
    27b0:	f043 0302 	orr.w	r3, r3, #2
    27b4:	7023      	strb	r3, [r4, #0]
		break;
    27b6:	e7c1      	b.n	273c <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    27b8:	7863      	ldrb	r3, [r4, #1]
    27ba:	f36f 03c6 	bfc	r3, #3, #4
    27be:	7063      	strb	r3, [r4, #1]
		break;
    27c0:	e7bc      	b.n	273c <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    27c2:	78a2      	ldrb	r2, [r4, #2]
    27c4:	2101      	movs	r1, #1
    27c6:	f361 0202 	bfi	r2, r1, #0, #3
    27ca:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    27cc:	7862      	ldrb	r2, [r4, #1]
    27ce:	f002 0278 	and.w	r2, r2, #120	; 0x78
    27d2:	2a40      	cmp	r2, #64	; 0x40
    27d4:	d010      	beq.n	27f8 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    27d6:	2b63      	cmp	r3, #99	; 0x63
    27d8:	d013      	beq.n	2802 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    27da:	7823      	ldrb	r3, [r4, #0]
    27dc:	f3c3 0240 	ubfx	r2, r3, #1, #1
    27e0:	4315      	orrs	r5, r2
    27e2:	f365 0341 	bfi	r3, r5, #1, #1
    27e6:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    27e8:	b002      	add	sp, #8
    27ea:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    27ec:	78a2      	ldrb	r2, [r4, #2]
    27ee:	2102      	movs	r1, #2
    27f0:	f361 0202 	bfi	r2, r1, #0, #3
    27f4:	70a2      	strb	r2, [r4, #2]
    27f6:	e7e9      	b.n	27cc <extract_conversion+0x290>
			conv->invalid = true;
    27f8:	7821      	ldrb	r1, [r4, #0]
    27fa:	f041 0101 	orr.w	r1, r1, #1
    27fe:	7021      	strb	r1, [r4, #0]
    2800:	e7e9      	b.n	27d6 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2802:	1e15      	subs	r5, r2, #0
    2804:	bf18      	it	ne
    2806:	2501      	movne	r5, #1
    2808:	e7e7      	b.n	27da <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    280a:	78a3      	ldrb	r3, [r4, #2]
    280c:	2204      	movs	r2, #4
    280e:	f362 0302 	bfi	r3, r2, #0, #3
    2812:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    2814:	2501      	movs	r5, #1
			break;
    2816:	e7e0      	b.n	27da <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2818:	78a3      	ldrb	r3, [r4, #2]
    281a:	2203      	movs	r2, #3
    281c:	f362 0302 	bfi	r3, r2, #0, #3
    2820:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    2822:	7863      	ldrb	r3, [r4, #1]
    2824:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2828:	2b40      	cmp	r3, #64	; 0x40
    282a:	d1d6      	bne.n	27da <extract_conversion+0x29e>
			unsupported = true;
    282c:	2501      	movs	r5, #1
    282e:	e7d4      	b.n	27da <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    2830:	78a3      	ldrb	r3, [r4, #2]
    2832:	2203      	movs	r2, #3
    2834:	f362 0302 	bfi	r3, r2, #0, #3
    2838:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    283a:	7863      	ldrb	r3, [r4, #1]
    283c:	f013 0f78 	tst.w	r3, #120	; 0x78
    2840:	d0cb      	beq.n	27da <extract_conversion+0x29e>
			unsupported = true;
    2842:	2501      	movs	r5, #1
    2844:	e7c9      	b.n	27da <extract_conversion+0x29e>
		conv->invalid = true;
    2846:	7823      	ldrb	r3, [r4, #0]
    2848:	f043 0301 	orr.w	r3, r3, #1
    284c:	7023      	strb	r3, [r4, #0]
		break;
    284e:	e7c4      	b.n	27da <extract_conversion+0x29e>

00002850 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    2850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2854:	b091      	sub	sp, #68	; 0x44
    2856:	4606      	mov	r6, r0
    2858:	460d      	mov	r5, r1
    285a:	4691      	mov	r9, r2
    285c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    285e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2860:	f899 0000 	ldrb.w	r0, [r9]
    2864:	2800      	cmp	r0, #0
    2866:	f000 82d5 	beq.w	2e14 <z_cbvprintf_impl+0x5c4>
		if (*fp != '%') {
    286a:	2825      	cmp	r0, #37	; 0x25
    286c:	d008      	beq.n	2880 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    286e:	f109 0901 	add.w	r9, r9, #1
    2872:	4629      	mov	r1, r5
    2874:	47b0      	blx	r6
    2876:	2800      	cmp	r0, #0
    2878:	f2c0 82cd 	blt.w	2e16 <z_cbvprintf_impl+0x5c6>
    287c:	3401      	adds	r4, #1
			continue;
    287e:	e7ef      	b.n	2860 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2880:	2300      	movs	r3, #0
    2882:	9304      	str	r3, [sp, #16]
    2884:	9305      	str	r3, [sp, #20]
    2886:	9306      	str	r3, [sp, #24]
    2888:	9307      	str	r3, [sp, #28]
    288a:	9308      	str	r3, [sp, #32]
    288c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    288e:	4649      	mov	r1, r9
    2890:	a806      	add	r0, sp, #24
    2892:	f7ff fe53 	bl	253c <extract_conversion>
    2896:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2898:	f89d 3019 	ldrb.w	r3, [sp, #25]
    289c:	f013 0f01 	tst.w	r3, #1
    28a0:	f000 8097 	beq.w	29d2 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
    28a4:	9b03      	ldr	r3, [sp, #12]
    28a6:	1d1a      	adds	r2, r3, #4
    28a8:	9203      	str	r2, [sp, #12]
    28aa:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    28ac:	2f00      	cmp	r7, #0
    28ae:	f2c0 8088 	blt.w	29c2 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    28b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    28b6:	f013 0f04 	tst.w	r3, #4
    28ba:	f000 809c 	beq.w	29f6 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
    28be:	9b03      	ldr	r3, [sp, #12]
    28c0:	1d1a      	adds	r2, r3, #4
    28c2:	9203      	str	r2, [sp, #12]
    28c4:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    28c8:	f1ba 0f00 	cmp.w	sl, #0
    28cc:	f2c0 808a 	blt.w	29e4 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    28d0:	2300      	movs	r3, #0
    28d2:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    28d4:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    28d6:	f89d 301a 	ldrb.w	r3, [sp, #26]
    28da:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    28de:	f89d 1019 	ldrb.w	r1, [sp, #25]
    28e2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    28e6:	2b01      	cmp	r3, #1
    28e8:	f000 808e 	beq.w	2a08 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    28ec:	2b02      	cmp	r3, #2
    28ee:	f000 80d3 	beq.w	2a98 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    28f2:	2b04      	cmp	r3, #4
    28f4:	f000 8124 	beq.w	2b40 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    28f8:	2b03      	cmp	r3, #3
    28fa:	f000 813b 	beq.w	2b74 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    28fe:	f89d 8018 	ldrb.w	r8, [sp, #24]
    2902:	f018 0b03 	ands.w	fp, r8, #3
    2906:	f040 813b 	bne.w	2b80 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    290a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    290e:	3b25      	subs	r3, #37	; 0x25
    2910:	2b53      	cmp	r3, #83	; 0x53
    2912:	f200 81e6 	bhi.w	2ce2 <z_cbvprintf_impl+0x492>
    2916:	e8df f013 	tbh	[pc, r3, lsl #1]
    291a:	0140      	.short	0x0140
    291c:	01e401e4 	.word	0x01e401e4
    2920:	01e401e4 	.word	0x01e401e4
    2924:	01e401e4 	.word	0x01e401e4
    2928:	01e401e4 	.word	0x01e401e4
    292c:	01e401e4 	.word	0x01e401e4
    2930:	01e401e4 	.word	0x01e401e4
    2934:	01e401e4 	.word	0x01e401e4
    2938:	01e401e4 	.word	0x01e401e4
    293c:	01e401e4 	.word	0x01e401e4
    2940:	01e401e4 	.word	0x01e401e4
    2944:	01e401e4 	.word	0x01e401e4
    2948:	01e401e4 	.word	0x01e401e4
    294c:	01e401e4 	.word	0x01e401e4
    2950:	01e401e4 	.word	0x01e401e4
    2954:	01e401e4 	.word	0x01e401e4
    2958:	01e401e4 	.word	0x01e401e4
    295c:	01e401e4 	.word	0x01e401e4
    2960:	01e401e4 	.word	0x01e401e4
    2964:	01e401e4 	.word	0x01e401e4
    2968:	01e401e4 	.word	0x01e401e4
    296c:	01e401e4 	.word	0x01e401e4
    2970:	01e401e4 	.word	0x01e401e4
    2974:	01e401e4 	.word	0x01e401e4
    2978:	01e401e4 	.word	0x01e401e4
    297c:	01e401e4 	.word	0x01e401e4
    2980:	01e40181 	.word	0x01e40181
    2984:	01e401e4 	.word	0x01e401e4
    2988:	01e401e4 	.word	0x01e401e4
    298c:	01e401e4 	.word	0x01e401e4
    2990:	01e401e4 	.word	0x01e401e4
    2994:	015e01e4 	.word	0x015e01e4
    2998:	01e40167 	.word	0x01e40167
    299c:	01e401e4 	.word	0x01e401e4
    29a0:	016701e4 	.word	0x016701e4
    29a4:	01e401e4 	.word	0x01e401e4
    29a8:	01e401e4 	.word	0x01e401e4
    29ac:	018101be 	.word	0x018101be
    29b0:	01e401a2 	.word	0x01e401a2
    29b4:	014d01e4 	.word	0x014d01e4
    29b8:	018101e4 	.word	0x018101e4
    29bc:	01e401e4 	.word	0x01e401e4
    29c0:	0181      	.short	0x0181
				conv->flag_dash = true;
    29c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    29c6:	f043 0304 	orr.w	r3, r3, #4
    29ca:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    29ce:	427f      	negs	r7, r7
    29d0:	e76f      	b.n	28b2 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
    29d2:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    29d6:	2b00      	cmp	r3, #0
    29d8:	db02      	blt.n	29e0 <z_cbvprintf_impl+0x190>
		int width = -1;
    29da:	f04f 37ff 	mov.w	r7, #4294967295
    29de:	e768      	b.n	28b2 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
    29e0:	9f07      	ldr	r7, [sp, #28]
    29e2:	e766      	b.n	28b2 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
    29e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    29e8:	f36f 0341 	bfc	r3, #1, #1
    29ec:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    29f0:	f04f 3aff 	mov.w	sl, #4294967295
    29f4:	e76c      	b.n	28d0 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
    29f6:	f013 0f02 	tst.w	r3, #2
    29fa:	d002      	beq.n	2a02 <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
    29fc:	f8dd a020 	ldr.w	sl, [sp, #32]
    2a00:	e766      	b.n	28d0 <z_cbvprintf_impl+0x80>
		int precision = -1;
    2a02:	f04f 3aff 	mov.w	sl, #4294967295
    2a06:	e763      	b.n	28d0 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
    2a08:	1ecb      	subs	r3, r1, #3
    2a0a:	2b04      	cmp	r3, #4
    2a0c:	d804      	bhi.n	2a18 <z_cbvprintf_impl+0x1c8>
    2a0e:	e8df f003 	tbb	[pc, r3]
    2a12:	1d0b      	.short	0x1d0b
    2a14:	3529      	.short	0x3529
    2a16:	35          	.byte	0x35
    2a17:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2a18:	9b03      	ldr	r3, [sp, #12]
    2a1a:	1d1a      	adds	r2, r3, #4
    2a1c:	9203      	str	r2, [sp, #12]
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	17da      	asrs	r2, r3, #31
    2a22:	9304      	str	r3, [sp, #16]
    2a24:	9205      	str	r2, [sp, #20]
				break;
    2a26:	e006      	b.n	2a36 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
    2a28:	9b03      	ldr	r3, [sp, #12]
    2a2a:	1d1a      	adds	r2, r3, #4
    2a2c:	9203      	str	r2, [sp, #12]
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	17da      	asrs	r2, r3, #31
    2a32:	9304      	str	r3, [sp, #16]
    2a34:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    2a36:	2901      	cmp	r1, #1
    2a38:	d028      	beq.n	2a8c <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
    2a3a:	2902      	cmp	r1, #2
    2a3c:	f47f af5f 	bne.w	28fe <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
    2a40:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    2a44:	17da      	asrs	r2, r3, #31
    2a46:	9304      	str	r3, [sp, #16]
    2a48:	9205      	str	r2, [sp, #20]
    2a4a:	e758      	b.n	28fe <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
    2a4c:	9b03      	ldr	r3, [sp, #12]
    2a4e:	3307      	adds	r3, #7
    2a50:	f023 0307 	bic.w	r3, r3, #7
    2a54:	f103 0208 	add.w	r2, r3, #8
    2a58:	9203      	str	r2, [sp, #12]
    2a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2a5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2a62:	e7e8      	b.n	2a36 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    2a64:	9b03      	ldr	r3, [sp, #12]
    2a66:	3307      	adds	r3, #7
    2a68:	f023 0307 	bic.w	r3, r3, #7
    2a6c:	f103 0208 	add.w	r2, r3, #8
    2a70:	9203      	str	r2, [sp, #12]
    2a72:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2a76:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2a7a:	e7dc      	b.n	2a36 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2a7c:	9b03      	ldr	r3, [sp, #12]
    2a7e:	1d1a      	adds	r2, r3, #4
    2a80:	9203      	str	r2, [sp, #12]
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	17da      	asrs	r2, r3, #31
				value->sint =
    2a86:	9304      	str	r3, [sp, #16]
    2a88:	9205      	str	r2, [sp, #20]
				break;
    2a8a:	e7d4      	b.n	2a36 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
    2a8c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    2a90:	17da      	asrs	r2, r3, #31
    2a92:	9304      	str	r3, [sp, #16]
    2a94:	9205      	str	r2, [sp, #20]
    2a96:	e732      	b.n	28fe <z_cbvprintf_impl+0xae>
			switch (length_mod) {
    2a98:	1ecb      	subs	r3, r1, #3
    2a9a:	2b04      	cmp	r3, #4
    2a9c:	d804      	bhi.n	2aa8 <z_cbvprintf_impl+0x258>
    2a9e:	e8df f003 	tbb	[pc, r3]
    2aa2:	1f0b      	.short	0x1f0b
    2aa4:	4135      	.short	0x4135
    2aa6:	41          	.byte	0x41
    2aa7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    2aa8:	9b03      	ldr	r3, [sp, #12]
    2aaa:	1d1a      	adds	r2, r3, #4
    2aac:	9203      	str	r2, [sp, #12]
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	9304      	str	r3, [sp, #16]
    2ab2:	2300      	movs	r3, #0
    2ab4:	9305      	str	r3, [sp, #20]
				break;
    2ab6:	e01e      	b.n	2af6 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
    2ab8:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    2abc:	2b63      	cmp	r3, #99	; 0x63
    2abe:	d007      	beq.n	2ad0 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
    2ac0:	9b03      	ldr	r3, [sp, #12]
    2ac2:	1d1a      	adds	r2, r3, #4
    2ac4:	9203      	str	r2, [sp, #12]
    2ac6:	681b      	ldr	r3, [r3, #0]
    2ac8:	9304      	str	r3, [sp, #16]
    2aca:	2300      	movs	r3, #0
    2acc:	9305      	str	r3, [sp, #20]
    2ace:	e012      	b.n	2af6 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    2ad0:	9b03      	ldr	r3, [sp, #12]
    2ad2:	1d1a      	adds	r2, r3, #4
    2ad4:	9203      	str	r2, [sp, #12]
    2ad6:	681b      	ldr	r3, [r3, #0]
    2ad8:	9304      	str	r3, [sp, #16]
    2ada:	2300      	movs	r3, #0
    2adc:	9305      	str	r3, [sp, #20]
    2ade:	e00a      	b.n	2af6 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
    2ae0:	9b03      	ldr	r3, [sp, #12]
    2ae2:	3307      	adds	r3, #7
    2ae4:	f023 0307 	bic.w	r3, r3, #7
    2ae8:	f103 0208 	add.w	r2, r3, #8
    2aec:	9203      	str	r2, [sp, #12]
    2aee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2af2:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    2af6:	2901      	cmp	r1, #1
    2af8:	d01c      	beq.n	2b34 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
    2afa:	2902      	cmp	r1, #2
    2afc:	f47f aeff 	bne.w	28fe <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
    2b00:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    2b04:	9304      	str	r3, [sp, #16]
    2b06:	2300      	movs	r3, #0
    2b08:	9305      	str	r3, [sp, #20]
    2b0a:	e6f8      	b.n	28fe <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
    2b0c:	9b03      	ldr	r3, [sp, #12]
    2b0e:	3307      	adds	r3, #7
    2b10:	f023 0307 	bic.w	r3, r3, #7
    2b14:	f103 0208 	add.w	r2, r3, #8
    2b18:	9203      	str	r2, [sp, #12]
    2b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    2b22:	e7e8      	b.n	2af6 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    2b24:	9b03      	ldr	r3, [sp, #12]
    2b26:	1d1a      	adds	r2, r3, #4
    2b28:	9203      	str	r2, [sp, #12]
    2b2a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2b2c:	9304      	str	r3, [sp, #16]
    2b2e:	2300      	movs	r3, #0
    2b30:	9305      	str	r3, [sp, #20]
				break;
    2b32:	e7e0      	b.n	2af6 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
    2b34:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2b38:	9304      	str	r3, [sp, #16]
    2b3a:	2300      	movs	r3, #0
    2b3c:	9305      	str	r3, [sp, #20]
    2b3e:	e6de      	b.n	28fe <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    2b40:	2908      	cmp	r1, #8
    2b42:	d00b      	beq.n	2b5c <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
    2b44:	9b03      	ldr	r3, [sp, #12]
    2b46:	3307      	adds	r3, #7
    2b48:	f023 0307 	bic.w	r3, r3, #7
    2b4c:	f103 0208 	add.w	r2, r3, #8
    2b50:	9203      	str	r2, [sp, #12]
    2b52:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2b5a:	e6d0      	b.n	28fe <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
    2b5c:	9b03      	ldr	r3, [sp, #12]
    2b5e:	3307      	adds	r3, #7
    2b60:	f023 0307 	bic.w	r3, r3, #7
    2b64:	f103 0208 	add.w	r2, r3, #8
    2b68:	9203      	str	r2, [sp, #12]
    2b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2b72:	e6c4      	b.n	28fe <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
    2b74:	9b03      	ldr	r3, [sp, #12]
    2b76:	1d1a      	adds	r2, r3, #4
    2b78:	9203      	str	r2, [sp, #12]
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	9304      	str	r3, [sp, #16]
    2b7e:	e6be      	b.n	28fe <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
    2b80:	9f02      	ldr	r7, [sp, #8]
    2b82:	463b      	mov	r3, r7
    2b84:	464a      	mov	r2, r9
    2b86:	4629      	mov	r1, r5
    2b88:	4630      	mov	r0, r6
    2b8a:	f015 ffad 	bl	18ae8 <outs>
    2b8e:	2800      	cmp	r0, #0
    2b90:	f2c0 8141 	blt.w	2e16 <z_cbvprintf_impl+0x5c6>
    2b94:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2b96:	46b9      	mov	r9, r7
			continue;
    2b98:	e662      	b.n	2860 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    2b9a:	4629      	mov	r1, r5
    2b9c:	2025      	movs	r0, #37	; 0x25
    2b9e:	47b0      	blx	r6
    2ba0:	2800      	cmp	r0, #0
    2ba2:	f2c0 8138 	blt.w	2e16 <z_cbvprintf_impl+0x5c6>
    2ba6:	3401      	adds	r4, #1
		char sign = 0;
    2ba8:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2baa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2bae:	f04f 0900 	mov.w	r9, #0
			break;
    2bb2:	e09b      	b.n	2cec <z_cbvprintf_impl+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    2bb4:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    2bb8:	f1ba 0f00 	cmp.w	sl, #0
    2bbc:	db07      	blt.n	2bce <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
    2bbe:	4651      	mov	r1, sl
    2bc0:	4648      	mov	r0, r9
    2bc2:	f017 fa08 	bl	19fd6 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2bc6:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    2bca:	46d8      	mov	r8, fp
			precision = -1;

			break;
    2bcc:	e08e      	b.n	2cec <z_cbvprintf_impl+0x49c>
				len = strlen(bps);
    2bce:	4648      	mov	r0, r9
    2bd0:	f017 f9f8 	bl	19fc4 <strlen>
    2bd4:	e7f7      	b.n	2bc6 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2bd6:	9b04      	ldr	r3, [sp, #16]
    2bd8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    2bdc:	46d8      	mov	r8, fp
			bpe = buf + 1;
    2bde:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    2be2:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    2be6:	e081      	b.n	2cec <z_cbvprintf_impl+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2be8:	f018 0f08 	tst.w	r8, #8
    2bec:	d105      	bne.n	2bfa <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    2bee:	f018 0810 	ands.w	r8, r8, #16
    2bf2:	d004      	beq.n	2bfe <z_cbvprintf_impl+0x3ae>
				sign = ' ';
    2bf4:	f04f 0820 	mov.w	r8, #32
    2bf8:	e001      	b.n	2bfe <z_cbvprintf_impl+0x3ae>
				sign = '+';
    2bfa:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2bfe:	9a04      	ldr	r2, [sp, #16]
    2c00:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    2c02:	2b00      	cmp	r3, #0
    2c04:	db02      	blt.n	2c0c <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2c06:	9204      	str	r2, [sp, #16]
    2c08:	9305      	str	r3, [sp, #20]
    2c0a:	e008      	b.n	2c1e <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
    2c0c:	4252      	negs	r2, r2
    2c0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2c12:	9204      	str	r2, [sp, #16]
    2c14:	9305      	str	r3, [sp, #20]
				sign = '-';
    2c16:	f04f 082d 	mov.w	r8, #45	; 0x2d
    2c1a:	e000      	b.n	2c1e <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
    2c1c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2c1e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2c22:	9300      	str	r3, [sp, #0]
    2c24:	ab0a      	add	r3, sp, #40	; 0x28
    2c26:	aa06      	add	r2, sp, #24
    2c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2c2c:	f015 fef2 	bl	18a14 <encode_uint>
    2c30:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2c32:	f1ba 0f00 	cmp.w	sl, #0
    2c36:	f2c0 8088 	blt.w	2d4a <z_cbvprintf_impl+0x4fa>
				size_t len = bpe - bps;
    2c3a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2c3e:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2c42:	f89d 2018 	ldrb.w	r2, [sp, #24]
    2c46:	f36f 1286 	bfc	r2, #6, #1
    2c4a:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2c4e:	459a      	cmp	sl, r3
    2c50:	d97e      	bls.n	2d50 <z_cbvprintf_impl+0x500>
					conv->pad0_value = precision - (int)len;
    2c52:	ebaa 0303 	sub.w	r3, sl, r3
    2c56:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    2c58:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2c5c:	e046      	b.n	2cec <z_cbvprintf_impl+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    2c5e:	9804      	ldr	r0, [sp, #16]
    2c60:	b928      	cbnz	r0, 2c6e <z_cbvprintf_impl+0x41e>
		char sign = 0;
    2c62:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2c64:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 2e1c <z_cbvprintf_impl+0x5cc>
			bps = "(nil)";
    2c68:	f1aa 0905 	sub.w	r9, sl, #5
    2c6c:	e03e      	b.n	2cec <z_cbvprintf_impl+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2c6e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2c72:	9300      	str	r3, [sp, #0]
    2c74:	ab0a      	add	r3, sp, #40	; 0x28
    2c76:	aa06      	add	r2, sp, #24
    2c78:	2100      	movs	r1, #0
    2c7a:	f015 fecb 	bl	18a14 <encode_uint>
    2c7e:	4681      	mov	r9, r0
				conv->altform_0c = true;
    2c80:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2c84:	f043 0310 	orr.w	r3, r3, #16
    2c88:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    2c8c:	2378      	movs	r3, #120	; 0x78
    2c8e:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    2c92:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    2c94:	e7cd      	b.n	2c32 <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2c96:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    2c98:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2c9c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2ca0:	2b07      	cmp	r3, #7
    2ca2:	d806      	bhi.n	2cb2 <z_cbvprintf_impl+0x462>
    2ca4:	e8df f003 	tbb	[pc, r3]
    2ca8:	0f0d0b04 	.word	0x0f0d0b04
    2cac:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    2cb0:	6014      	str	r4, [r2, #0]
		char sign = 0;
    2cb2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    2cb4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    2cb8:	f04f 0900 	mov.w	r9, #0
}
    2cbc:	e016      	b.n	2cec <z_cbvprintf_impl+0x49c>
		*(signed char *)dp = (signed char)count;
    2cbe:	7014      	strb	r4, [r2, #0]
		break;
    2cc0:	e7f7      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		*(short *)dp = (short)count;
    2cc2:	8014      	strh	r4, [r2, #0]
		break;
    2cc4:	e7f5      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		*(long *)dp = (long)count;
    2cc6:	6014      	str	r4, [r2, #0]
		break;
    2cc8:	e7f3      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		*(long long *)dp = (long long)count;
    2cca:	17e3      	asrs	r3, r4, #31
    2ccc:	6014      	str	r4, [r2, #0]
    2cce:	6053      	str	r3, [r2, #4]
		break;
    2cd0:	e7ef      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    2cd2:	17e3      	asrs	r3, r4, #31
    2cd4:	6014      	str	r4, [r2, #0]
    2cd6:	6053      	str	r3, [r2, #4]
		break;
    2cd8:	e7eb      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		*(size_t *)dp = (size_t)count;
    2cda:	6014      	str	r4, [r2, #0]
		break;
    2cdc:	e7e9      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2cde:	6014      	str	r4, [r2, #0]
		break;
    2ce0:	e7e7      	b.n	2cb2 <z_cbvprintf_impl+0x462>
		switch (conv->specifier) {
    2ce2:	46d8      	mov	r8, fp
    2ce4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2ce8:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2cec:	f1b9 0f00 	cmp.w	r9, #0
    2cf0:	f000 808d 	beq.w	2e0e <z_cbvprintf_impl+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2cf4:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    2cf8:	f1b8 0f00 	cmp.w	r8, #0
    2cfc:	d000      	beq.n	2d00 <z_cbvprintf_impl+0x4b0>
			nj_len += 1U;
    2cfe:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    2d00:	f89d 201a 	ldrb.w	r2, [sp, #26]
    2d04:	f012 0f10 	tst.w	r2, #16
    2d08:	d025      	beq.n	2d56 <z_cbvprintf_impl+0x506>
			nj_len += 2U;
    2d0a:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2d0c:	9907      	ldr	r1, [sp, #28]
    2d0e:	440b      	add	r3, r1
		if (conv->pad_fp) {
    2d10:	f012 0f40 	tst.w	r2, #64	; 0x40
    2d14:	d001      	beq.n	2d1a <z_cbvprintf_impl+0x4ca>
			nj_len += conv->pad0_pre_exp;
    2d16:	9a08      	ldr	r2, [sp, #32]
    2d18:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2d1a:	2f00      	cmp	r7, #0
    2d1c:	dd31      	ble.n	2d82 <z_cbvprintf_impl+0x532>
			width -= (int)nj_len;
    2d1e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2d20:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2d24:	f013 0f04 	tst.w	r3, #4
    2d28:	d12b      	bne.n	2d82 <z_cbvprintf_impl+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2d2a:	f013 0f40 	tst.w	r3, #64	; 0x40
    2d2e:	d017      	beq.n	2d60 <z_cbvprintf_impl+0x510>
					if (sign != 0) {
    2d30:	f1b8 0f00 	cmp.w	r8, #0
    2d34:	d017      	beq.n	2d66 <z_cbvprintf_impl+0x516>
						OUTC(sign);
    2d36:	4629      	mov	r1, r5
    2d38:	4640      	mov	r0, r8
    2d3a:	47b0      	blx	r6
    2d3c:	2800      	cmp	r0, #0
    2d3e:	db6a      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2d40:	3401      	adds	r4, #1
						sign = 0;
    2d42:	46d8      	mov	r8, fp
					}
					pad = '0';
    2d44:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2d48:	e00f      	b.n	2d6a <z_cbvprintf_impl+0x51a>
		const char *bpe = buf + sizeof(buf);
    2d4a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2d4e:	e7cd      	b.n	2cec <z_cbvprintf_impl+0x49c>
    2d50:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    2d54:	e7ca      	b.n	2cec <z_cbvprintf_impl+0x49c>
		} else if (conv->altform_0) {
    2d56:	f012 0f08 	tst.w	r2, #8
    2d5a:	d0d7      	beq.n	2d0c <z_cbvprintf_impl+0x4bc>
			nj_len += 1U;
    2d5c:	3301      	adds	r3, #1
    2d5e:	e7d5      	b.n	2d0c <z_cbvprintf_impl+0x4bc>
				char pad = ' ';
    2d60:	f04f 0b20 	mov.w	fp, #32
    2d64:	e001      	b.n	2d6a <z_cbvprintf_impl+0x51a>
					pad = '0';
    2d66:	f04f 0b30 	mov.w	fp, #48	; 0x30
    2d6a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2d6c:	1e5f      	subs	r7, r3, #1
    2d6e:	2b00      	cmp	r3, #0
    2d70:	dd07      	ble.n	2d82 <z_cbvprintf_impl+0x532>
					OUTC(pad);
    2d72:	4629      	mov	r1, r5
    2d74:	4658      	mov	r0, fp
    2d76:	47b0      	blx	r6
    2d78:	2800      	cmp	r0, #0
    2d7a:	db4c      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2d7c:	3401      	adds	r4, #1
				while (width-- > 0) {
    2d7e:	463b      	mov	r3, r7
    2d80:	e7f4      	b.n	2d6c <z_cbvprintf_impl+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    2d82:	f1b8 0f00 	cmp.w	r8, #0
    2d86:	d005      	beq.n	2d94 <z_cbvprintf_impl+0x544>
			OUTC(sign);
    2d88:	4629      	mov	r1, r5
    2d8a:	4640      	mov	r0, r8
    2d8c:	47b0      	blx	r6
    2d8e:	2800      	cmp	r0, #0
    2d90:	db41      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2d92:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    2d94:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2d98:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2d9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    2da0:	4313      	orrs	r3, r2
    2da2:	d005      	beq.n	2db0 <z_cbvprintf_impl+0x560>
				OUTC('0');
    2da4:	4629      	mov	r1, r5
    2da6:	2030      	movs	r0, #48	; 0x30
    2da8:	47b0      	blx	r6
    2daa:	2800      	cmp	r0, #0
    2dac:	db33      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2dae:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    2db0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2db4:	f013 0f10 	tst.w	r3, #16
    2db8:	d006      	beq.n	2dc8 <z_cbvprintf_impl+0x578>
				OUTC(conv->specifier);
    2dba:	4629      	mov	r1, r5
    2dbc:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2dc0:	47b0      	blx	r6
    2dc2:	2800      	cmp	r0, #0
    2dc4:	db27      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2dc6:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    2dc8:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    2dca:	f103 38ff 	add.w	r8, r3, #4294967295
    2dce:	2b00      	cmp	r3, #0
    2dd0:	dd07      	ble.n	2de2 <z_cbvprintf_impl+0x592>
				OUTC('0');
    2dd2:	4629      	mov	r1, r5
    2dd4:	2030      	movs	r0, #48	; 0x30
    2dd6:	47b0      	blx	r6
    2dd8:	2800      	cmp	r0, #0
    2dda:	db1c      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2ddc:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2dde:	4643      	mov	r3, r8
    2de0:	e7f3      	b.n	2dca <z_cbvprintf_impl+0x57a>
			}

			OUTS(bps, bpe);
    2de2:	4653      	mov	r3, sl
    2de4:	464a      	mov	r2, r9
    2de6:	4629      	mov	r1, r5
    2de8:	4630      	mov	r0, r6
    2dea:	f015 fe7d 	bl	18ae8 <outs>
    2dee:	2800      	cmp	r0, #0
    2df0:	db11      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2df2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    2df4:	2f00      	cmp	r7, #0
    2df6:	dd07      	ble.n	2e08 <z_cbvprintf_impl+0x5b8>
			OUTC(' ');
    2df8:	4629      	mov	r1, r5
    2dfa:	2020      	movs	r0, #32
    2dfc:	47b0      	blx	r6
    2dfe:	2800      	cmp	r0, #0
    2e00:	db09      	blt.n	2e16 <z_cbvprintf_impl+0x5c6>
    2e02:	3401      	adds	r4, #1
			--width;
    2e04:	3f01      	subs	r7, #1
    2e06:	e7f5      	b.n	2df4 <z_cbvprintf_impl+0x5a4>
		fp = extract_conversion(conv, sp);
    2e08:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2e0c:	e528      	b.n	2860 <z_cbvprintf_impl+0x10>
    2e0e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2e12:	e525      	b.n	2860 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    2e14:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    2e16:	b011      	add	sp, #68	; 0x44
    2e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e1c:	00020a45 	.word	0x00020a45

00002e20 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2e20:	b508      	push	{r3, lr}
    2e22:	f04f 0220 	mov.w	r2, #32
    2e26:	f3ef 8311 	mrs	r3, BASEPRI
    2e2a:	f382 8812 	msr	BASEPRI_MAX, r2
    2e2e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2e32:	f003 fbfd 	bl	6630 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2e36:	4803      	ldr	r0, [pc, #12]	; (2e44 <sys_reboot+0x24>)
    2e38:	f015 f89a 	bl	17f70 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2e3c:	f002 fa8e 	bl	535c <arch_cpu_idle>
    2e40:	e7fc      	b.n	2e3c <sys_reboot+0x1c>
    2e42:	bf00      	nop
    2e44:	00020a48 	.word	0x00020a48

00002e48 <nordicsemi_nrf53_init>:
    2e48:	f04f 0320 	mov.w	r3, #32
    2e4c:	f3ef 8c11 	mrs	ip, BASEPRI
    2e50:	f383 8812 	msr	BASEPRI_MAX, r3
    2e54:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    2e58:	2101      	movs	r1, #1
    2e5a:	4b1e      	ldr	r3, [pc, #120]	; (2ed4 <nordicsemi_nrf53_init+0x8c>)
    2e5c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    2e60:	4a1d      	ldr	r2, [pc, #116]	; (2ed8 <nordicsemi_nrf53_init+0x90>)
    2e62:	2302      	movs	r3, #2
    2e64:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    2e68:	481c      	ldr	r0, [pc, #112]	; (2edc <nordicsemi_nrf53_init+0x94>)
    2e6a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    2e6e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    2e72:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    2e76:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    2e7a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    2e7e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    2e82:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    2e86:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    2e8a:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    2e8e:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    2e92:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
#if defined(NRF_GPIO_FORWARDER_FOR_NRF5340_CPUAPP_ENABLED)
	static const uint8_t forwarded_psels[] = {
		DT_FOREACH_STATUS_OKAY(nordic_nrf_gpio_forwarder, ALL_GPIOS_IN_FORWARDER)
	};

	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
    2e96:	2100      	movs	r1, #0
    2e98:	e00a      	b.n	2eb0 <nordicsemi_nrf53_init+0x68>
        case 1: return NRF_P1;
    2e9a:	4811      	ldr	r0, [pc, #68]	; (2ee0 <nordicsemi_nrf53_init+0x98>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    2e9c:	3280      	adds	r2, #128	; 0x80
    2e9e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    2ea2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    2ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2eaa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    2eae:	3101      	adds	r1, #1
    2eb0:	2903      	cmp	r1, #3
    2eb2:	d808      	bhi.n	2ec6 <nordicsemi_nrf53_init+0x7e>
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
    2eb4:	4b0b      	ldr	r3, [pc, #44]	; (2ee4 <nordicsemi_nrf53_init+0x9c>)
    2eb6:	5c5b      	ldrb	r3, [r3, r1]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2eb8:	f003 021f 	and.w	r2, r3, #31

    return pin_number >> 5;
    2ebc:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ebe:	2b01      	cmp	r3, #1
    2ec0:	d0eb      	beq.n	2e9a <nordicsemi_nrf53_init+0x52>
        case 0: return NRF_P0;
    2ec2:	4806      	ldr	r0, [pc, #24]	; (2edc <nordicsemi_nrf53_init+0x94>)
    2ec4:	e7ea      	b.n	2e9c <nordicsemi_nrf53_init+0x54>
	__asm__ volatile(
    2ec6:	f38c 8811 	msr	BASEPRI, ip
    2eca:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2ece:	2000      	movs	r0, #0
    2ed0:	4770      	bx	lr
    2ed2:	bf00      	nop
    2ed4:	50001000 	.word	0x50001000
    2ed8:	50004000 	.word	0x50004000
    2edc:	50842500 	.word	0x50842500
    2ee0:	50842800 	.word	0x50842800
    2ee4:	00020a78 	.word	0x00020a78

00002ee8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2ee8:	b170      	cbz	r0, 2f08 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    2eea:	b508      	push	{r3, lr}
    2eec:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    2eee:	4b07      	ldr	r3, [pc, #28]	; (2f0c <arch_busy_wait+0x24>)
    2ef0:	681b      	ldr	r3, [r3, #0]
    2ef2:	4807      	ldr	r0, [pc, #28]	; (2f10 <arch_busy_wait+0x28>)
    2ef4:	fba0 1303 	umull	r1, r3, r0, r3
    2ef8:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    2efa:	fb03 f002 	mul.w	r0, r3, r2
    2efe:	4b05      	ldr	r3, [pc, #20]	; (2f14 <arch_busy_wait+0x2c>)
    2f00:	f043 0301 	orr.w	r3, r3, #1
    2f04:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    2f06:	bd08      	pop	{r3, pc}
    2f08:	4770      	bx	lr
    2f0a:	bf00      	nop
    2f0c:	200004d8 	.word	0x200004d8
    2f10:	431bde83 	.word	0x431bde83
    2f14:	00020750 	.word	0x00020750

00002f18 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    2f18:	2806      	cmp	r0, #6
    2f1a:	d000      	beq.n	2f1e <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    2f1c:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    2f1e:	4b04      	ldr	r3, [pc, #16]	; (2f30 <pm_state_set+0x18>)
    2f20:	2201      	movs	r2, #1
    2f22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2f26:	f3bf 8f4f 	dsb	sy
        __WFE();
    2f2a:	bf20      	wfe
    while (true)
    2f2c:	e7fd      	b.n	2f2a <pm_state_set+0x12>
    2f2e:	bf00      	nop
    2f30:	50004000 	.word	0x50004000

00002f34 <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
    2f34:	b510      	push	{r4, lr}
    2f36:	b082      	sub	sp, #8
    2f38:	4603      	mov	r3, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
    2f3a:	480d      	ldr	r0, [pc, #52]	; (2f70 <mbox_rx_init+0x3c>)
    2f3c:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
    2f3e:	2208      	movs	r2, #8
    2f40:	9201      	str	r2, [sp, #4]
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    2f42:	6882      	ldr	r2, [r0, #8]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    2f44:	6854      	ldr	r4, [r2, #4]
    2f46:	b16c      	cbz	r4, 2f64 <mbox_rx_init+0x30>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    2f48:	4a0a      	ldr	r2, [pc, #40]	; (2f74 <mbox_rx_init+0x40>)
    2f4a:	2108      	movs	r1, #8
    2f4c:	47a0      	blx	r4
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
	if (err < 0) {
    2f4e:	2800      	cmp	r0, #0
    2f50:	db06      	blt.n	2f60 <mbox_rx_init+0x2c>
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    2f52:	9800      	ldr	r0, [sp, #0]
	const struct mbox_driver_api *api =
    2f54:	6883      	ldr	r3, [r0, #8]

	if (api->set_enabled == NULL) {
    2f56:	691b      	ldr	r3, [r3, #16]
    2f58:	b13b      	cbz	r3, 2f6a <mbox_rx_init+0x36>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    2f5a:	2201      	movs	r2, #1
    2f5c:	9901      	ldr	r1, [sp, #4]
    2f5e:	4798      	blx	r3
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
    2f60:	b002      	add	sp, #8
    2f62:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    2f64:	f06f 0057 	mvn.w	r0, #87	; 0x57
    2f68:	e7f1      	b.n	2f4e <mbox_rx_init+0x1a>
		return -ENOSYS;
    2f6a:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return mbox_set_enabled(&channel, true);
    2f6e:	e7f7      	b.n	2f60 <mbox_rx_init+0x2c>
    2f70:	00020164 	.word	0x00020164
    2f74:	0001907b 	.word	0x0001907b

00002f78 <free_resources>:
{
    2f78:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    2f7a:	b2c4      	uxtb	r4, r0
    2f7c:	2301      	movs	r3, #1
    2f7e:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    2f80:	4a05      	ldr	r2, [pc, #20]	; (2f98 <free_resources+0x20>)
    2f82:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    2f86:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2f8a:	f00f fe41 	bl	12c10 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    2f8e:	4620      	mov	r0, r4
    2f90:	f010 fcd6 	bl	13940 <nrfx_dppi_channel_free>
}
    2f94:	bd10      	pop	{r4, pc}
    2f96:	bf00      	nop
    2f98:	50017000 	.word	0x50017000

00002f9c <ppi_rtc_to_ipc>:
{
    2f9c:	b538      	push	{r3, r4, r5, lr}
    2f9e:	4604      	mov	r4, r0
    2fa0:	460d      	mov	r5, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    2fa2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2fa6:	f00f fcd9 	bl	1295c <z_nrf_rtc_timer_compare_evt_address_get>
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
    2faa:	f3c4 4307 	ubfx	r3, r4, #16, #8
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	b2db      	uxtb	r3, r3
	if (setup) {
    2fb2:	b13d      	cbz	r5, 2fc4 <ppi_rtc_to_ipc+0x28>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
    2fb4:	b2e4      	uxtb	r4, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    2fb6:	4a06      	ldr	r2, [pc, #24]	; (2fd0 <ppi_rtc_to_ipc+0x34>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    2fb8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    2fbc:	50d4      	str	r4, [r2, r3]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2fbe:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
    2fc2:	bd38      	pop	{r3, r4, r5, pc}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    2fc4:	2100      	movs	r1, #0
    2fc6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    2fca:	4a01      	ldr	r2, [pc, #4]	; (2fd0 <ppi_rtc_to_ipc+0x34>)
    2fcc:	50d1      	str	r1, [r2, r3]
    2fce:	e7f8      	b.n	2fc2 <ppi_rtc_to_ipc+0x26>
    2fd0:	5002a080 	.word	0x5002a080

00002fd4 <ppi_ipc_to_rtc>:
{
    2fd4:	b570      	push	{r4, r5, r6, lr}
    2fd6:	4605      	mov	r5, r0
    2fd8:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
    2fda:	0e04      	lsrs	r4, r0, #24
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    2fdc:	00a4      	lsls	r4, r4, #2
    2fde:	f504 7480 	add.w	r4, r4, #256	; 0x100
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    2fe2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2fe6:	f01b f822 	bl	1e02e <z_nrf_rtc_timer_capture_task_address_get>
	if (setup) {
    2fea:	b146      	cbz	r6, 2ffe <ppi_ipc_to_rtc+0x2a>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
    2fec:	b2ed      	uxtb	r5, r5
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2fee:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    2ff2:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    2ff6:	b2a4      	uxth	r4, r4
    2ff8:	4b04      	ldr	r3, [pc, #16]	; (300c <ppi_ipc_to_rtc+0x38>)
    2ffa:	511d      	str	r5, [r3, r4]
}
    2ffc:	bd70      	pop	{r4, r5, r6, pc}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    2ffe:	2200      	movs	r2, #0
    3000:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    3004:	b2a4      	uxth	r4, r4
    3006:	4b01      	ldr	r3, [pc, #4]	; (300c <ppi_ipc_to_rtc+0x38>)
    3008:	511a      	str	r2, [r3, r4]
    300a:	e7f7      	b.n	2ffc <ppi_ipc_to_rtc+0x28>
    300c:	5002a080 	.word	0x5002a080

00003010 <remote_callback>:
{
    3010:	b570      	push	{r4, r5, r6, lr}
    3012:	b082      	sub	sp, #8
    3014:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    3016:	f3c0 2607 	ubfx	r6, r0, #8, #8
    301a:	4630      	mov	r0, r6
    301c:	f00f fca6 	bl	1296c <z_nrf_rtc_timer_compare_read>
    3020:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
    3022:	2100      	movs	r1, #0
    3024:	4620      	mov	r0, r4
    3026:	f7ff ffd5 	bl	2fd4 <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
    302a:	2101      	movs	r1, #1
    302c:	4620      	mov	r0, r4
    302e:	f7ff ffb5 	bl	2f9c <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    3032:	f105 0232 	add.w	r2, r5, #50	; 0x32
    3036:	9401      	str	r4, [sp, #4]
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <remote_callback+0x3c>)
    303a:	9300      	str	r3, [sp, #0]
    303c:	0052      	lsls	r2, r2, #1
    303e:	2300      	movs	r3, #0
    3040:	4630      	mov	r0, r6
    3042:	f01b f818 	bl	1e076 <z_nrf_rtc_timer_set>
}
    3046:	b002      	add	sp, #8
    3048:	bd70      	pop	{r4, r5, r6, pc}
    304a:	bf00      	nop
    304c:	00019067 	.word	0x00019067

00003050 <sync_rtc_setup>:
	return ipm_set_enabled(ipm_dev, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    3050:	b5b0      	push	{r4, r5, r7, lr}
    3052:	b082      	sub	sp, #8
    3054:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    3056:	1d38      	adds	r0, r7, #4
    3058:	f010 fc6a 	bl	13930 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    305c:	4b31      	ldr	r3, [pc, #196]	; (3124 <sync_rtc_setup+0xd4>)
    305e:	4298      	cmp	r0, r3
    3060:	d03b      	beq.n	30da <sync_rtc_setup+0x8a>
		rv = -ENODEV;
    3062:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    3066:	466d      	mov	r5, sp
    3068:	b088      	sub	sp, #32
    306a:	466b      	mov	r3, sp
    306c:	f113 0210 	adds.w	r2, r3, #16
    3070:	d052      	beq.n	3118 <sync_rtc_setup+0xc8>
    3072:	210c      	movs	r1, #12
    3074:	b11a      	cbz	r2, 307e <sync_rtc_setup+0x2e>
    3076:	2904      	cmp	r1, #4
    3078:	dd01      	ble.n	307e <sync_rtc_setup+0x2e>
    307a:	482b      	ldr	r0, [pc, #172]	; (3128 <sync_rtc_setup+0xd8>)
    307c:	6158      	str	r0, [r3, #20]
    307e:	b112      	cbz	r2, 3086 <sync_rtc_setup+0x36>
    3080:	2908      	cmp	r1, #8
    3082:	dd00      	ble.n	3086 <sync_rtc_setup+0x36>
    3084:	619c      	str	r4, [r3, #24]
    3086:	290b      	cmp	r1, #11
    3088:	dd49      	ble.n	311e <sync_rtc_setup+0xce>
    308a:	f04f 0c0c 	mov.w	ip, #12
    308e:	b13a      	cbz	r2, 30a0 <sync_rtc_setup+0x50>
    3090:	2103      	movs	r1, #3
    3092:	7039      	strb	r1, [r7, #0]
    3094:	2100      	movs	r1, #0
    3096:	7079      	strb	r1, [r7, #1]
    3098:	70b9      	strb	r1, [r7, #2]
    309a:	70f9      	strb	r1, [r7, #3]
    309c:	6838      	ldr	r0, [r7, #0]
    309e:	6118      	str	r0, [r3, #16]
    30a0:	2100      	movs	r1, #0
    30a2:	f36f 0100 	bfc	r1, #0, #1
    30a6:	f36f 0141 	bfc	r1, #1, #1
    30aa:	f36f 0182 	bfc	r1, #2, #1
    30ae:	f36f 01c5 	bfc	r1, #3, #3
    30b2:	2301      	movs	r3, #1
    30b4:	f363 1188 	bfi	r1, r3, #6, #3
    30b8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    30bc:	f363 2152 	bfi	r1, r3, #9, #10
    30c0:	f36f 41de 	bfc	r1, #19, #12
    30c4:	f36f 71df 	bfc	r1, #31, #1
    30c8:	2300      	movs	r3, #0
    30ca:	4818      	ldr	r0, [pc, #96]	; (312c <sync_rtc_setup+0xdc>)
    30cc:	f000 fafe 	bl	36cc <z_impl_z_log_msg_static_create>
    30d0:	46ad      	mov	sp, r5
	}

	return rv;
}
    30d2:	4620      	mov	r0, r4
    30d4:	3708      	adds	r7, #8
    30d6:	46bd      	mov	sp, r7
    30d8:	bdb0      	pop	{r4, r5, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    30da:	f00f fd67 	bl	12bac <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    30de:	1e04      	subs	r4, r0, #0
    30e0:	db16      	blt.n	3110 <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    30e2:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    30e4:	2307      	movs	r3, #7
    30e6:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
    30e8:	2308      	movs	r3, #8
    30ea:	71fb      	strb	r3, [r7, #7]
	rv = IS_ENABLED(CONFIG_MBOX) ? mbox_rx_init((void *)channels.raw) :
    30ec:	6878      	ldr	r0, [r7, #4]
    30ee:	f7ff ff21 	bl	2f34 <mbox_rx_init>
	if (rv < 0) {
    30f2:	1e04      	subs	r4, r0, #0
    30f4:	db09      	blt.n	310a <sync_rtc_setup+0xba>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    30f6:	793b      	ldrb	r3, [r7, #4]
    30f8:	2101      	movs	r1, #1
    30fa:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
    30fe:	4a0c      	ldr	r2, [pc, #48]	; (3130 <sync_rtc_setup+0xe0>)
    3100:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    3104:	6878      	ldr	r0, [r7, #4]
    3106:	f7ff ff65 	bl	2fd4 <ppi_ipc_to_rtc>
	if (rv != 0) {
    310a:	2c00      	cmp	r4, #0
    310c:	d0e1      	beq.n	30d2 <sync_rtc_setup+0x82>
    310e:	e7aa      	b.n	3066 <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
    3110:	7938      	ldrb	r0, [r7, #4]
    3112:	f010 fc15 	bl	13940 <nrfx_dppi_channel_free>
		goto bail;
    3116:	e7f8      	b.n	310a <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    3118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    311c:	e7aa      	b.n	3074 <sync_rtc_setup+0x24>
    311e:	f06f 0c1b 	mvn.w	ip, #27
    3122:	e7b4      	b.n	308e <sync_rtc_setup+0x3e>
    3124:	0bad0000 	.word	0x0bad0000
    3128:	00020a7c 	.word	0x00020a7c
    312c:	000205f0 	.word	0x000205f0
    3130:	50017000 	.word	0x50017000

00003134 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    3134:	f010 b9ee 	b.w	13514 <SystemInit>

00003138 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msg_generic *msg)
{
    3138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    313a:	4606      	mov	r6, r0
	struct log_backend const *backend;

	for (int i = 0; i < log_backend_count_get(); i++) {
    313c:	2400      	movs	r4, #0
    313e:	e000      	b.n	3142 <msg_process+0xa>
    3140:	3401      	adds	r4, #1
    3142:	4b0e      	ldr	r3, [pc, #56]	; (317c <msg_process+0x44>)
    3144:	4a0e      	ldr	r2, [pc, #56]	; (3180 <msg_process+0x48>)
    3146:	1a9b      	subs	r3, r3, r2
    3148:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    314c:	da14      	bge.n	3178 <msg_process+0x40>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    314e:	4d0c      	ldr	r5, [pc, #48]	; (3180 <msg_process+0x48>)
    3150:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3154:	686b      	ldr	r3, [r5, #4]
    3156:	795b      	ldrb	r3, [r3, #5]
		backend = log_backend_get(i);
		if (log_backend_is_active(backend) &&
    3158:	2b00      	cmp	r3, #0
    315a:	d0f1      	beq.n	3140 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    315c:	4631      	mov	r1, r6
    315e:	4628      	mov	r0, r5
    3160:	f015 ffaf 	bl	190c2 <msg_filter_check>
		if (log_backend_is_active(backend) &&
    3164:	2800      	cmp	r0, #0
    3166:	d0eb      	beq.n	3140 <msg_process+0x8>
	backend->api->process(backend, msg);
    3168:	0127      	lsls	r7, r4, #4
    316a:	4b05      	ldr	r3, [pc, #20]	; (3180 <msg_process+0x48>)
    316c:	59db      	ldr	r3, [r3, r7]
    316e:	681b      	ldr	r3, [r3, #0]
    3170:	4631      	mov	r1, r6
    3172:	4628      	mov	r0, r5
    3174:	4798      	blx	r3
}
    3176:	e7e3      	b.n	3140 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    3178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    317a:	bf00      	nop
    317c:	00020628 	.word	0x00020628
    3180:	00020608 	.word	0x00020608

00003184 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    3184:	b570      	push	{r4, r5, r6, lr}
    3186:	4606      	mov	r6, r0
    3188:	460d      	mov	r5, r1
	for (int i = 0; i < log_backend_count_get(); i++) {
    318a:	2400      	movs	r4, #0
    318c:	e003      	b.n	3196 <log_backend_notify_all+0x12>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    318e:	462a      	mov	r2, r5
    3190:	4631      	mov	r1, r6
    3192:	4798      	blx	r3
    3194:	3401      	adds	r4, #1
    3196:	4b08      	ldr	r3, [pc, #32]	; (31b8 <log_backend_notify_all+0x34>)
    3198:	4a08      	ldr	r2, [pc, #32]	; (31bc <log_backend_notify_all+0x38>)
    319a:	1a9b      	subs	r3, r3, r2
    319c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    31a0:	da08      	bge.n	31b4 <log_backend_notify_all+0x30>
	return &__log_backends_start[idx];
    31a2:	0123      	lsls	r3, r4, #4
    31a4:	4a05      	ldr	r2, [pc, #20]	; (31bc <log_backend_notify_all+0x38>)
    31a6:	eb02 1004 	add.w	r0, r2, r4, lsl #4
	if (backend->api->notify) {
    31aa:	589b      	ldr	r3, [r3, r2]
    31ac:	699b      	ldr	r3, [r3, #24]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d1ed      	bne.n	318e <log_backend_notify_all+0xa>
    31b2:	e7ef      	b.n	3194 <log_backend_notify_all+0x10>
		const struct log_backend *backend = log_backend_get(i);

		log_backend_notify(backend, event, arg);
	}
}
    31b4:	bd70      	pop	{r4, r5, r6, pc}
    31b6:	bf00      	nop
    31b8:	00020628 	.word	0x00020628
    31bc:	00020608 	.word	0x00020608

000031c0 <activate_foreach_backend>:
{
    31c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31c4:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    31c6:	4605      	mov	r5, r0
	while (mask_cpy) {
    31c8:	e00a      	b.n	31e0 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    31ca:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    31ce:	4b14      	ldr	r3, [pc, #80]	; (3220 <activate_foreach_backend+0x60>)
    31d0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    31d4:	6873      	ldr	r3, [r6, #4]
			log_backend_enable(backend,
    31d6:	2204      	movs	r2, #4
    31d8:	6819      	ldr	r1, [r3, #0]
    31da:	4620      	mov	r0, r4
    31dc:	f000 fa64 	bl	36a8 <log_backend_enable>
	while (mask_cpy) {
    31e0:	b1d5      	cbz	r5, 3218 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    31e2:	fa95 f6a5 	rbit	r6, r5
    31e6:	fab6 f686 	clz	r6, r6
	return &__log_backends_start[idx];
    31ea:	4c0d      	ldr	r4, [pc, #52]	; (3220 <activate_foreach_backend+0x60>)
    31ec:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    31f0:	2301      	movs	r3, #1
    31f2:	40b3      	lsls	r3, r6
    31f4:	ea6f 0803 	mvn.w	r8, r3
    31f8:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    31fc:	7b23      	ldrb	r3, [r4, #12]
    31fe:	2b00      	cmp	r3, #0
    3200:	d0ee      	beq.n	31e0 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    3202:	0133      	lsls	r3, r6, #4
    3204:	4a06      	ldr	r2, [pc, #24]	; (3220 <activate_foreach_backend+0x60>)
    3206:	58d3      	ldr	r3, [r2, r3]
    3208:	691b      	ldr	r3, [r3, #16]
    320a:	2b00      	cmp	r3, #0
    320c:	d0dd      	beq.n	31ca <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    320e:	4620      	mov	r0, r4
    3210:	4798      	blx	r3
    3212:	2800      	cmp	r0, #0
    3214:	d1e4      	bne.n	31e0 <activate_foreach_backend+0x20>
    3216:	e7d8      	b.n	31ca <activate_foreach_backend+0xa>
}
    3218:	4638      	mov	r0, r7
    321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    321e:	bf00      	nop
    3220:	00020608 	.word	0x00020608

00003224 <z_log_init>:
{
    3224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3228:	4680      	mov	r8, r0
    322a:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    322c:	4b26      	ldr	r3, [pc, #152]	; (32c8 <z_log_init+0xa4>)
    322e:	e8d3 6fef 	ldaex	r6, [r3]
    3232:	1c72      	adds	r2, r6, #1
    3234:	e8c3 2fe1 	stlex	r1, r2, [r3]
    3238:	2900      	cmp	r1, #0
    323a:	d1f8      	bne.n	322e <z_log_init+0xa>
	if (atomic_inc(&initialized) != 0) {
    323c:	2e00      	cmp	r6, #0
    323e:	d13e      	bne.n	32be <z_log_init+0x9a>
	for (i = 0; i < log_backend_count_get(); i++) {
    3240:	2400      	movs	r4, #0
    3242:	e00a      	b.n	325a <z_log_init+0x36>
						   backend->cb->ctx,
    3244:	4b21      	ldr	r3, [pc, #132]	; (32cc <z_log_init+0xa8>)
    3246:	eb03 1909 	add.w	r9, r3, r9, lsl #4
    324a:	f8d9 3004 	ldr.w	r3, [r9, #4]
				log_backend_enable(backend,
    324e:	2204      	movs	r2, #4
    3250:	6819      	ldr	r1, [r3, #0]
    3252:	4628      	mov	r0, r5
    3254:	f000 fa28 	bl	36a8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3258:	3401      	adds	r4, #1
    325a:	4b1d      	ldr	r3, [pc, #116]	; (32d0 <z_log_init+0xac>)
    325c:	4a1b      	ldr	r2, [pc, #108]	; (32cc <z_log_init+0xa8>)
    325e:	1a9b      	subs	r3, r3, r2
    3260:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3264:	da1b      	bge.n	329e <z_log_init+0x7a>
		const struct log_backend *backend = log_backend_get(i);
    3266:	46a1      	mov	r9, r4
	return &__log_backends_start[idx];
    3268:	4d18      	ldr	r5, [pc, #96]	; (32cc <z_log_init+0xa8>)
    326a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    326e:	7b2b      	ldrb	r3, [r5, #12]
    3270:	2b00      	cmp	r3, #0
    3272:	d0f1      	beq.n	3258 <z_log_init+0x34>
	if (backend->api->init) {
    3274:	0123      	lsls	r3, r4, #4
    3276:	4a15      	ldr	r2, [pc, #84]	; (32cc <z_log_init+0xa8>)
    3278:	f852 a003 	ldr.w	sl, [r2, r3]
    327c:	f8da 300c 	ldr.w	r3, [sl, #12]
    3280:	b10b      	cbz	r3, 3286 <z_log_init+0x62>
		backend->api->init(backend);
    3282:	4628      	mov	r0, r5
    3284:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    3286:	f8da 3010 	ldr.w	r3, [sl, #16]
    328a:	2b00      	cmp	r3, #0
    328c:	d0da      	beq.n	3244 <z_log_init+0x20>
		return backend->api->is_ready(backend);
    328e:	4628      	mov	r0, r5
    3290:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    3292:	2800      	cmp	r0, #0
    3294:	d0d6      	beq.n	3244 <z_log_init+0x20>
				mask |= BIT(i);
    3296:	2301      	movs	r3, #1
    3298:	40a3      	lsls	r3, r4
    329a:	431e      	orrs	r6, r3
    329c:	e7dc      	b.n	3258 <z_log_init+0x34>
	if (blocking) {
    329e:	f1b8 0f00 	cmp.w	r8, #0
    32a2:	d00d      	beq.n	32c0 <z_log_init+0x9c>
		while (mask) {
    32a4:	b166      	cbz	r6, 32c0 <z_log_init+0x9c>
			mask = activate_foreach_backend(mask);
    32a6:	4630      	mov	r0, r6
    32a8:	f7ff ff8a 	bl	31c0 <activate_foreach_backend>
    32ac:	4606      	mov	r6, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    32ae:	2f00      	cmp	r7, #0
    32b0:	d0f8      	beq.n	32a4 <z_log_init+0x80>
    32b2:	f44f 70a4 	mov.w	r0, #328	; 0x148
    32b6:	2100      	movs	r1, #0
    32b8:	f013 fe44 	bl	16f44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    32bc:	e7f2      	b.n	32a4 <z_log_init+0x80>
		return 0;
    32be:	2600      	movs	r6, #0
}
    32c0:	4630      	mov	r0, r6
    32c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32c6:	bf00      	nop
    32c8:	200018c0 	.word	0x200018c0
    32cc:	00020608 	.word	0x00020608
    32d0:	00020628 	.word	0x00020628

000032d4 <thread_set>:
{
    32d4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    32d6:	4b06      	ldr	r3, [pc, #24]	; (32f0 <thread_set+0x1c>)
    32d8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    32da:	b118      	cbz	r0, 32e4 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    32dc:	4b05      	ldr	r3, [pc, #20]	; (32f4 <thread_set+0x20>)
    32de:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    32e0:	2b09      	cmp	r3, #9
    32e2:	dc00      	bgt.n	32e6 <thread_set+0x12>
}
    32e4:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    32e6:	4804      	ldr	r0, [pc, #16]	; (32f8 <thread_set+0x24>)
    32e8:	f013 f860 	bl	163ac <z_impl_k_sem_give>
}
    32ec:	e7fa      	b.n	32e4 <thread_set+0x10>
    32ee:	bf00      	nop
    32f0:	20001904 	.word	0x20001904
    32f4:	200018b8 	.word	0x200018b8
    32f8:	20000710 	.word	0x20000710

000032fc <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    32fc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    32fe:	4802      	ldr	r0, [pc, #8]	; (3308 <log_process_thread_timer_expiry_fn+0xc>)
    3300:	f013 f854 	bl	163ac <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    3304:	bd08      	pop	{r3, pc}
    3306:	bf00      	nop
    3308:	20000710 	.word	0x20000710

0000330c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    330c:	b530      	push	{r4, r5, lr}
    330e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3310:	2200      	movs	r2, #0
    3312:	490f      	ldr	r1, [pc, #60]	; (3350 <enable_logger+0x44>)
    3314:	480f      	ldr	r0, [pc, #60]	; (3354 <enable_logger+0x48>)
    3316:	f01c fd78 	bl	1fe0a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    331a:	4d0f      	ldr	r5, [pc, #60]	; (3358 <enable_logger+0x4c>)
    331c:	2200      	movs	r2, #0
    331e:	2300      	movs	r3, #0
    3320:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3324:	2400      	movs	r4, #0
    3326:	9404      	str	r4, [sp, #16]
    3328:	230e      	movs	r3, #14
    332a:	9303      	str	r3, [sp, #12]
    332c:	9402      	str	r4, [sp, #8]
    332e:	9401      	str	r4, [sp, #4]
    3330:	9400      	str	r4, [sp, #0]
    3332:	4b0a      	ldr	r3, [pc, #40]	; (335c <enable_logger+0x50>)
    3334:	f44f 7240 	mov.w	r2, #768	; 0x300
    3338:	4909      	ldr	r1, [pc, #36]	; (3360 <enable_logger+0x54>)
    333a:	4628      	mov	r0, r5
    333c:	f01c f88a 	bl	1f454 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    3340:	4908      	ldr	r1, [pc, #32]	; (3364 <enable_logger+0x58>)
    3342:	4628      	mov	r0, r5
    3344:	f012 fe44 	bl	15fd0 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    3348:	4620      	mov	r0, r4
    334a:	b009      	add	sp, #36	; 0x24
    334c:	bd30      	pop	{r4, r5, pc}
    334e:	bf00      	nop
    3350:	000032fd 	.word	0x000032fd
    3354:	20000c90 	.word	0x20000c90
    3358:	20000cc8 	.word	0x20000cc8
    335c:	00003619 	.word	0x00003619
    3360:	20002b80 	.word	0x20002b80
    3364:	00020ab0 	.word	0x00020ab0

00003368 <log_format_func_t_get>:
}
    3368:	4b01      	ldr	r3, [pc, #4]	; (3370 <log_format_func_t_get+0x8>)
    336a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    336e:	4770      	bx	lr
    3370:	00020abc 	.word	0x00020abc

00003374 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    3374:	b138      	cbz	r0, 3386 <log_set_timestamp_func+0x12>
{
    3376:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    3378:	4a04      	ldr	r2, [pc, #16]	; (338c <log_set_timestamp_func+0x18>)
    337a:	6010      	str	r0, [r2, #0]
		log_output_timestamp_freq_set(freq);
    337c:	4608      	mov	r0, r1
    337e:	f000 fbef 	bl	3b60 <log_output_timestamp_freq_set>
	return 0;
    3382:	2000      	movs	r0, #0
}
    3384:	bd08      	pop	{r3, pc}
		return -EINVAL;
    3386:	f06f 0015 	mvn.w	r0, #21
}
    338a:	4770      	bx	lr
    338c:	20000268 	.word	0x20000268

00003390 <z_log_notify_backend_enabled>:
{
    3390:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    3392:	4b05      	ldr	r3, [pc, #20]	; (33a8 <z_log_notify_backend_enabled+0x18>)
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	b11b      	cbz	r3, 33a0 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    3398:	4b03      	ldr	r3, [pc, #12]	; (33a8 <z_log_notify_backend_enabled+0x18>)
    339a:	2201      	movs	r2, #1
    339c:	701a      	strb	r2, [r3, #0]
}
    339e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    33a0:	4802      	ldr	r0, [pc, #8]	; (33ac <z_log_notify_backend_enabled+0x1c>)
    33a2:	f013 f803 	bl	163ac <z_impl_k_sem_give>
}
    33a6:	e7f7      	b.n	3398 <z_log_notify_backend_enabled+0x8>
    33a8:	20002b73 	.word	0x20002b73
    33ac:	20000710 	.word	0x20000710

000033b0 <z_log_dropped>:
    33b0:	4b09      	ldr	r3, [pc, #36]	; (33d8 <z_log_dropped+0x28>)
    33b2:	e8d3 2fef 	ldaex	r2, [r3]
    33b6:	3201      	adds	r2, #1
    33b8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    33bc:	2900      	cmp	r1, #0
    33be:	d1f8      	bne.n	33b2 <z_log_dropped+0x2>
	if (buffered) {
    33c0:	b900      	cbnz	r0, 33c4 <z_log_dropped+0x14>
}
    33c2:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    33c4:	4b05      	ldr	r3, [pc, #20]	; (33dc <z_log_dropped+0x2c>)
    33c6:	e8d3 2fef 	ldaex	r2, [r3]
    33ca:	3a01      	subs	r2, #1
    33cc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    33d0:	2900      	cmp	r1, #0
    33d2:	d0f6      	beq.n	33c2 <z_log_dropped+0x12>
    33d4:	e7f7      	b.n	33c6 <z_log_dropped+0x16>
    33d6:	bf00      	nop
    33d8:	200018bc 	.word	0x200018bc
    33dc:	200018b8 	.word	0x200018b8

000033e0 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    33e0:	4b04      	ldr	r3, [pc, #16]	; (33f4 <z_log_dropped_read_and_clear+0x14>)
}
    33e2:	2000      	movs	r0, #0
    33e4:	4602      	mov	r2, r0
    33e6:	e8d3 0fef 	ldaex	r0, [r3]
    33ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
    33ee:	2900      	cmp	r1, #0
    33f0:	d1f9      	bne.n	33e6 <z_log_dropped_read_and_clear+0x6>
    33f2:	4770      	bx	lr
    33f4:	200018bc 	.word	0x200018bc

000033f8 <dropped_notify>:
{
    33f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    33fa:	f7ff fff1 	bl	33e0 <z_log_dropped_read_and_clear>
    33fe:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    3400:	2400      	movs	r4, #0
    3402:	e000      	b.n	3406 <dropped_notify+0xe>
    3404:	3401      	adds	r4, #1
    3406:	4b0b      	ldr	r3, [pc, #44]	; (3434 <dropped_notify+0x3c>)
    3408:	4a0b      	ldr	r2, [pc, #44]	; (3438 <dropped_notify+0x40>)
    340a:	1a9b      	subs	r3, r3, r2
    340c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3410:	da0f      	bge.n	3432 <dropped_notify+0x3a>
	return &__log_backends_start[idx];
    3412:	4809      	ldr	r0, [pc, #36]	; (3438 <dropped_notify+0x40>)
    3414:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    3418:	6843      	ldr	r3, [r0, #4]
    341a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    341c:	2b00      	cmp	r3, #0
    341e:	d0f1      	beq.n	3404 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    3420:	0123      	lsls	r3, r4, #4
    3422:	4a05      	ldr	r2, [pc, #20]	; (3438 <dropped_notify+0x40>)
    3424:	58d3      	ldr	r3, [r2, r3]
    3426:	685b      	ldr	r3, [r3, #4]
    3428:	2b00      	cmp	r3, #0
    342a:	d0eb      	beq.n	3404 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    342c:	4629      	mov	r1, r5
    342e:	4798      	blx	r3
    3430:	e7e8      	b.n	3404 <dropped_notify+0xc>
}
    3432:	bd38      	pop	{r3, r4, r5, pc}
    3434:	00020628 	.word	0x00020628
    3438:	00020608 	.word	0x00020608

0000343c <z_log_dropped_pending>:
	return dropped_cnt > 0;
    343c:	4b03      	ldr	r3, [pc, #12]	; (344c <z_log_dropped_pending+0x10>)
    343e:	6818      	ldr	r0, [r3, #0]
}
    3440:	2800      	cmp	r0, #0
    3442:	bfd4      	ite	le
    3444:	2000      	movle	r0, #0
    3446:	2001      	movgt	r0, #1
    3448:	4770      	bx	lr
    344a:	bf00      	nop
    344c:	200018bc 	.word	0x200018bc

00003450 <z_log_msg_init>:
{
    3450:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    3452:	4902      	ldr	r1, [pc, #8]	; (345c <z_log_msg_init+0xc>)
    3454:	4802      	ldr	r0, [pc, #8]	; (3460 <z_log_msg_init+0x10>)
    3456:	f015 fc21 	bl	18c9c <mpsc_pbuf_init>
}
    345a:	bd08      	pop	{r3, pc}
    345c:	00020ac8 	.word	0x00020ac8
    3460:	200018c4 	.word	0x200018c4

00003464 <log_core_init>:
{
    3464:	b508      	push	{r3, lr}
	panic_mode = false;
    3466:	2300      	movs	r3, #0
    3468:	4a05      	ldr	r2, [pc, #20]	; (3480 <log_core_init+0x1c>)
    346a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    346c:	4a05      	ldr	r2, [pc, #20]	; (3484 <log_core_init+0x20>)
    346e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    3470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3474:	4804      	ldr	r0, [pc, #16]	; (3488 <log_core_init+0x24>)
    3476:	f7ff ff7d 	bl	3374 <log_set_timestamp_func>
		z_log_msg_init();
    347a:	f7ff ffe9 	bl	3450 <z_log_msg_init>
}
    347e:	bd08      	pop	{r3, pc}
    3480:	20002b74 	.word	0x20002b74
    3484:	200018bc 	.word	0x200018bc
    3488:	000190c7 	.word	0x000190c7

0000348c <z_log_msg_alloc>:
{
    348c:	b508      	push	{r3, lr}
    348e:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    3490:	2200      	movs	r2, #0
    3492:	2300      	movs	r3, #0
    3494:	4801      	ldr	r0, [pc, #4]	; (349c <z_log_msg_alloc+0x10>)
    3496:	f015 fc28 	bl	18cea <mpsc_pbuf_alloc>
}
    349a:	bd08      	pop	{r3, pc}
    349c:	200018c4 	.word	0x200018c4

000034a0 <z_log_msg_claim>:
{
    34a0:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    34a2:	4802      	ldr	r0, [pc, #8]	; (34ac <z_log_msg_claim+0xc>)
    34a4:	f015 fd1e 	bl	18ee4 <mpsc_pbuf_claim>
}
    34a8:	bd08      	pop	{r3, pc}
    34aa:	bf00      	nop
    34ac:	200018c4 	.word	0x200018c4

000034b0 <z_log_msg_free>:
{
    34b0:	b508      	push	{r3, lr}
    34b2:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    34b4:	4801      	ldr	r0, [pc, #4]	; (34bc <z_log_msg_free+0xc>)
    34b6:	f015 fd86 	bl	18fc6 <mpsc_pbuf_free>
}
    34ba:	bd08      	pop	{r3, pc}
    34bc:	200018c4 	.word	0x200018c4

000034c0 <z_log_msg_pending>:
{
    34c0:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
    34c2:	4802      	ldr	r0, [pc, #8]	; (34cc <z_log_msg_pending+0xc>)
    34c4:	f015 fdbc 	bl	19040 <mpsc_pbuf_is_pending>
}
    34c8:	bd08      	pop	{r3, pc}
    34ca:	bf00      	nop
    34cc:	200018c4 	.word	0x200018c4

000034d0 <z_impl_log_process>:
	if (!backend_attached) {
    34d0:	4b0f      	ldr	r3, [pc, #60]	; (3510 <z_impl_log_process+0x40>)
    34d2:	7818      	ldrb	r0, [r3, #0]
    34d4:	b900      	cbnz	r0, 34d8 <z_impl_log_process+0x8>
}
    34d6:	4770      	bx	lr
{
    34d8:	b510      	push	{r4, lr}
	msg = z_log_msg_claim();
    34da:	f7ff ffe1 	bl	34a0 <z_log_msg_claim>
	if (msg) {
    34de:	4604      	mov	r4, r0
    34e0:	b168      	cbz	r0, 34fe <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    34e2:	4b0c      	ldr	r3, [pc, #48]	; (3514 <z_impl_log_process+0x44>)
    34e4:	e8d3 2fef 	ldaex	r2, [r3]
    34e8:	3a01      	subs	r2, #1
    34ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
    34ee:	2900      	cmp	r1, #0
    34f0:	d1f8      	bne.n	34e4 <z_impl_log_process+0x14>
		msg_process(msg);
    34f2:	4620      	mov	r0, r4
    34f4:	f7ff fe20 	bl	3138 <msg_process>
		z_log_msg_free(msg);
    34f8:	4620      	mov	r0, r4
    34fa:	f7ff ffd9 	bl	34b0 <z_log_msg_free>
	if (z_log_dropped_pending()) {
    34fe:	f7ff ff9d 	bl	343c <z_log_dropped_pending>
    3502:	b910      	cbnz	r0, 350a <z_impl_log_process+0x3a>
	return z_log_msg_pending();
    3504:	f7ff ffdc 	bl	34c0 <z_log_msg_pending>
}
    3508:	bd10      	pop	{r4, pc}
		dropped_notify();
    350a:	f7ff ff75 	bl	33f8 <dropped_notify>
    350e:	e7f9      	b.n	3504 <z_impl_log_process+0x34>
    3510:	20002b73 	.word	0x20002b73
    3514:	200018b8 	.word	0x200018b8

00003518 <z_impl_log_panic>:
	if (panic_mode) {
    3518:	4b13      	ldr	r3, [pc, #76]	; (3568 <z_impl_log_panic+0x50>)
    351a:	781b      	ldrb	r3, [r3, #0]
    351c:	b103      	cbz	r3, 3520 <z_impl_log_panic+0x8>
    351e:	4770      	bx	lr
{
    3520:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    3522:	2100      	movs	r1, #0
    3524:	2001      	movs	r0, #1
    3526:	f7ff fe7d 	bl	3224 <z_log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    352a:	2400      	movs	r4, #0
    352c:	e000      	b.n	3530 <z_impl_log_panic+0x18>
    352e:	3401      	adds	r4, #1
    3530:	4b0e      	ldr	r3, [pc, #56]	; (356c <z_impl_log_panic+0x54>)
    3532:	4a0f      	ldr	r2, [pc, #60]	; (3570 <z_impl_log_panic+0x58>)
    3534:	1a9b      	subs	r3, r3, r2
    3536:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    353a:	da0c      	bge.n	3556 <z_impl_log_panic+0x3e>
	return &__log_backends_start[idx];
    353c:	480c      	ldr	r0, [pc, #48]	; (3570 <z_impl_log_panic+0x58>)
    353e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    3542:	6843      	ldr	r3, [r0, #4]
    3544:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    3546:	2b00      	cmp	r3, #0
    3548:	d0f1      	beq.n	352e <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    354a:	0123      	lsls	r3, r4, #4
    354c:	4a08      	ldr	r2, [pc, #32]	; (3570 <z_impl_log_panic+0x58>)
    354e:	58d3      	ldr	r3, [r2, r3]
    3550:	689b      	ldr	r3, [r3, #8]
    3552:	4798      	blx	r3
}
    3554:	e7eb      	b.n	352e <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    3556:	f7ff ffbb 	bl	34d0 <z_impl_log_process>
		while (log_process() == true) {
    355a:	2800      	cmp	r0, #0
    355c:	d1fb      	bne.n	3556 <z_impl_log_panic+0x3e>
	panic_mode = true;
    355e:	4b02      	ldr	r3, [pc, #8]	; (3568 <z_impl_log_panic+0x50>)
    3560:	2201      	movs	r2, #1
    3562:	701a      	strb	r2, [r3, #0]
}
    3564:	bd10      	pop	{r4, pc}
    3566:	bf00      	nop
    3568:	20002b74 	.word	0x20002b74
    356c:	00020628 	.word	0x00020628
    3570:	00020608 	.word	0x00020608

00003574 <z_log_msg_post_finalize>:
{
    3574:	b510      	push	{r4, lr}
    3576:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3578:	4b19      	ldr	r3, [pc, #100]	; (35e0 <z_log_msg_post_finalize+0x6c>)
    357a:	e8d3 2fef 	ldaex	r2, [r3]
    357e:	1c51      	adds	r1, r2, #1
    3580:	e8c3 1fe0 	stlex	r0, r1, [r3]
    3584:	2800      	cmp	r0, #0
    3586:	d1f8      	bne.n	357a <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
    3588:	4b16      	ldr	r3, [pc, #88]	; (35e4 <z_log_msg_post_finalize+0x70>)
    358a:	781b      	ldrb	r3, [r3, #0]
    358c:	b963      	cbnz	r3, 35a8 <z_log_msg_post_finalize+0x34>
	} else if (proc_tid != NULL) {
    358e:	4b16      	ldr	r3, [pc, #88]	; (35e8 <z_log_msg_post_finalize+0x74>)
    3590:	681b      	ldr	r3, [r3, #0]
    3592:	b1bb      	cbz	r3, 35c4 <z_log_msg_post_finalize+0x50>
		if (cnt == 0) {
    3594:	b1c2      	cbz	r2, 35c8 <z_log_msg_post_finalize+0x54>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3596:	2a0a      	cmp	r2, #10
    3598:	d114      	bne.n	35c4 <z_log_msg_post_finalize+0x50>
	z_impl_k_timer_stop(timer);
    359a:	4814      	ldr	r0, [pc, #80]	; (35ec <z_log_msg_post_finalize+0x78>)
    359c:	f01c fc41 	bl	1fe22 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    35a0:	4813      	ldr	r0, [pc, #76]	; (35f0 <z_log_msg_post_finalize+0x7c>)
    35a2:	f012 ff03 	bl	163ac <z_impl_k_sem_give>
}
    35a6:	e00d      	b.n	35c4 <z_log_msg_post_finalize+0x50>
	__asm__ volatile(
    35a8:	f04f 0320 	mov.w	r3, #32
    35ac:	f3ef 8411 	mrs	r4, BASEPRI
    35b0:	f383 8812 	msr	BASEPRI_MAX, r3
    35b4:	f3bf 8f6f 	isb	sy
    35b8:	f7ff ff8a 	bl	34d0 <z_impl_log_process>
	__asm__ volatile(
    35bc:	f384 8811 	msr	BASEPRI, r4
    35c0:	f3bf 8f6f 	isb	sy
    35c4:	b002      	add	sp, #8
    35c6:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    35c8:	2200      	movs	r2, #0
    35ca:	2300      	movs	r3, #0
    35cc:	e9cd 2300 	strd	r2, r3, [sp]
    35d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    35d4:	2300      	movs	r3, #0
    35d6:	4805      	ldr	r0, [pc, #20]	; (35ec <z_log_msg_post_finalize+0x78>)
    35d8:	f013 ff12 	bl	17400 <z_impl_k_timer_start>
    35dc:	e7f2      	b.n	35c4 <z_log_msg_post_finalize+0x50>
    35de:	bf00      	nop
    35e0:	200018b8 	.word	0x200018b8
    35e4:	20002b74 	.word	0x20002b74
    35e8:	20001904 	.word	0x20001904
    35ec:	20000c90 	.word	0x20000c90
    35f0:	20000710 	.word	0x20000710

000035f4 <z_log_msg_commit>:
{
    35f4:	b510      	push	{r4, lr}
    35f6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    35f8:	4b05      	ldr	r3, [pc, #20]	; (3610 <z_log_msg_commit+0x1c>)
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	4798      	blx	r3
    35fe:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    3600:	4621      	mov	r1, r4
    3602:	4804      	ldr	r0, [pc, #16]	; (3614 <z_log_msg_commit+0x20>)
    3604:	f015 fc0d 	bl	18e22 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    3608:	f7ff ffb4 	bl	3574 <z_log_msg_post_finalize>
}
    360c:	bd10      	pop	{r4, pc}
    360e:	bf00      	nop
    3610:	20000268 	.word	0x20000268
    3614:	200018c4 	.word	0x200018c4

00003618 <log_process_thread_func>:
{
    3618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    361c:	2100      	movs	r1, #0
    361e:	4608      	mov	r0, r1
    3620:	f7ff fe00 	bl	3224 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    3624:	4680      	mov	r8, r0
    3626:	b140      	cbz	r0, 363a <log_process_thread_func+0x22>
    3628:	f240 6667 	movw	r6, #1639	; 0x667
    362c:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    362e:	f013 fcb5 	bl	16f9c <z_impl_z_current_get>
	thread_set(k_current_get());
    3632:	f7ff fe4f 	bl	32d4 <thread_set>
	bool processed_any = false;
    3636:	2500      	movs	r5, #0
    3638:	e015      	b.n	3666 <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    363a:	f04f 36ff 	mov.w	r6, #4294967295
    363e:	f04f 37ff 	mov.w	r7, #4294967295
    3642:	e7f4      	b.n	362e <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    3644:	4640      	mov	r0, r8
    3646:	f7ff fdbb 	bl	31c0 <activate_foreach_backend>
			if (!activate_mask) {
    364a:	4680      	mov	r8, r0
    364c:	b970      	cbnz	r0, 366c <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    364e:	f04f 36ff 	mov.w	r6, #4294967295
    3652:	f04f 37ff 	mov.w	r7, #4294967295
    3656:	e009      	b.n	366c <log_process_thread_func+0x54>
    3658:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    365a:	4632      	mov	r2, r6
    365c:	463b      	mov	r3, r7
    365e:	4809      	ldr	r0, [pc, #36]	; (3684 <log_process_thread_func+0x6c>)
    3660:	f012 fecc 	bl	163fc <z_impl_k_sem_take>
{
    3664:	4625      	mov	r5, r4
		if (activate_mask) {
    3666:	f1b8 0f00 	cmp.w	r8, #0
    366a:	d1eb      	bne.n	3644 <log_process_thread_func+0x2c>
    366c:	f7ff ff30 	bl	34d0 <z_impl_log_process>
		if (log_process() == false) {
    3670:	4604      	mov	r4, r0
    3672:	2800      	cmp	r0, #0
    3674:	d1f6      	bne.n	3664 <log_process_thread_func+0x4c>
			if (processed_any) {
    3676:	2d00      	cmp	r5, #0
    3678:	d0ee      	beq.n	3658 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    367a:	2100      	movs	r1, #0
    367c:	4608      	mov	r0, r1
    367e:	f7ff fd81 	bl	3184 <log_backend_notify_all>
    3682:	e7ea      	b.n	365a <log_process_thread_func+0x42>
    3684:	20000710 	.word	0x20000710

00003688 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3688:	4b05      	ldr	r3, [pc, #20]	; (36a0 <log_source_name_get+0x18>)
    368a:	4a06      	ldr	r2, [pc, #24]	; (36a4 <log_source_name_get+0x1c>)
    368c:	1a9b      	subs	r3, r3, r2
    368e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    3692:	d202      	bcs.n	369a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    3694:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3698:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    369a:	2000      	movs	r0, #0
}
    369c:	4770      	bx	lr
    369e:	bf00      	nop
    36a0:	00020608 	.word	0x00020608
    36a4:	000204f8 	.word	0x000204f8

000036a8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    36a8:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    36aa:	4b07      	ldr	r3, [pc, #28]	; (36c8 <log_backend_enable+0x20>)
    36ac:	1ac3      	subs	r3, r0, r3
    36ae:	111b      	asrs	r3, r3, #4
    36b0:	3301      	adds	r3, #1
	backend->cb->id = id;
    36b2:	6842      	ldr	r2, [r0, #4]
    36b4:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    36b6:	6843      	ldr	r3, [r0, #4]
    36b8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    36ba:	6843      	ldr	r3, [r0, #4]
    36bc:	2201      	movs	r2, #1
    36be:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    36c0:	f7ff fe66 	bl	3390 <z_log_notify_backend_enabled>
}
    36c4:	bd08      	pop	{r3, pc}
    36c6:	bf00      	nop
    36c8:	00020608 	.word	0x00020608

000036cc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    36cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36d0:	b08a      	sub	sp, #40	; 0x28
    36d2:	4605      	mov	r5, r0
    36d4:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    36d6:	460f      	mov	r7, r1
	int inlen = desc.package_len;
    36d8:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
    36dc:	2c00      	cmp	r4, #0
    36de:	d035      	beq.n	374c <z_impl_z_log_msg_static_create+0x80>
    36e0:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
    36e2:	2200      	movs	r2, #0
    36e4:	9207      	str	r2, [sp, #28]
    36e6:	9208      	str	r2, [sp, #32]
    36e8:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    36ea:	2304      	movs	r3, #4
    36ec:	9302      	str	r3, [sp, #8]
    36ee:	ab05      	add	r3, sp, #20
    36f0:	9301      	str	r3, [sp, #4]
    36f2:	2302      	movs	r3, #2
    36f4:	9300      	str	r3, [sp, #0]
    36f6:	ab07      	add	r3, sp, #28
    36f8:	4621      	mov	r1, r4
    36fa:	4640      	mov	r0, r8
    36fc:	f7fe fcc8 	bl	2090 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    3700:	f3c0 0909 	ubfx	r9, r0, #0, #10
    3704:	f369 2752 	bfi	r7, r9, #9, #10
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    3708:	f3c7 40cb 	ubfx	r0, r7, #19, #12
    370c:	4448      	add	r0, r9
    370e:	3017      	adds	r0, #23
    3710:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    3714:	0880      	lsrs	r0, r0, #2
    3716:	f7ff feb9 	bl	348c <z_log_msg_alloc>
		if (msg) {
    371a:	4682      	mov	sl, r0
    371c:	b300      	cbz	r0, 3760 <z_impl_z_log_msg_static_create+0x94>
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    371e:	f100 0310 	add.w	r3, r0, #16
	struct z_cbprintf_buf_desc buf_desc = {
    3722:	9307      	str	r3, [sp, #28]
    3724:	f8cd 9020 	str.w	r9, [sp, #32]
    3728:	2200      	movs	r2, #0
    372a:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    372c:	b163      	cbz	r3, 3748 <z_impl_z_log_msg_static_create+0x7c>
    372e:	4a11      	ldr	r2, [pc, #68]	; (3774 <z_impl_z_log_msg_static_create+0xa8>)
    3730:	2304      	movs	r3, #4
    3732:	9302      	str	r3, [sp, #8]
    3734:	ab05      	add	r3, sp, #20
    3736:	9301      	str	r3, [sp, #4]
    3738:	2302      	movs	r3, #2
    373a:	9300      	str	r3, [sp, #0]
    373c:	ab07      	add	r3, sp, #28
    373e:	4621      	mov	r1, r4
    3740:	4640      	mov	r0, r8
    3742:	f7fe fca5 	bl	2090 <cbprintf_package_convert>
    3746:	e00b      	b.n	3760 <z_impl_z_log_msg_static_create+0x94>
    3748:	2200      	movs	r2, #0
    374a:	e7f1      	b.n	3730 <z_impl_z_log_msg_static_create+0x64>
    374c:	f3c1 41cb 	ubfx	r1, r1, #19, #12
    3750:	440c      	add	r4, r1
    3752:	3417      	adds	r4, #23
    3754:	f024 0407 	bic.w	r4, r4, #7
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    3758:	08a0      	lsrs	r0, r4, #2
    375a:	f7ff fe97 	bl	348c <z_log_msg_alloc>
    375e:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    3760:	4633      	mov	r3, r6
    3762:	463a      	mov	r2, r7
    3764:	4629      	mov	r1, r5
    3766:	4650      	mov	r0, sl
    3768:	f015 fcdd 	bl	19126 <z_log_msg_finalize>
}
    376c:	b00a      	add	sp, #40	; 0x28
    376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3772:	bf00      	nop
    3774:	000190fb 	.word	0x000190fb

00003778 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3778:	b40e      	push	{r1, r2, r3}
    377a:	b500      	push	{lr}
    377c:	b084      	sub	sp, #16
    377e:	4601      	mov	r1, r0
    3780:	ab05      	add	r3, sp, #20
    3782:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    3786:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    3788:	2000      	movs	r0, #0
    378a:	9000      	str	r0, [sp, #0]
    378c:	4803      	ldr	r0, [pc, #12]	; (379c <print_formatted+0x24>)
    378e:	f7ff f85f 	bl	2850 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    3792:	b004      	add	sp, #16
    3794:	f85d eb04 	ldr.w	lr, [sp], #4
    3798:	b003      	add	sp, #12
    379a:	4770      	bx	lr
    379c:	0001928d 	.word	0x0001928d

000037a0 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    37a0:	b530      	push	{r4, r5, lr}
    37a2:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    37a4:	f011 0f44 	tst.w	r1, #68	; 0x44
    37a8:	d005      	beq.n	37b6 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    37aa:	4b1a      	ldr	r3, [pc, #104]	; (3814 <timestamp_print+0x74>)
    37ac:	681c      	ldr	r4, [r3, #0]
    37ae:	b934      	cbnz	r4, 37be <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    37b0:	2000      	movs	r0, #0
	}

	return length;
}
    37b2:	b005      	add	sp, #20
    37b4:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    37b6:	4918      	ldr	r1, [pc, #96]	; (3818 <timestamp_print+0x78>)
    37b8:	f7ff ffde 	bl	3778 <print_formatted>
    37bc:	e7f9      	b.n	37b2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    37be:	4b17      	ldr	r3, [pc, #92]	; (381c <timestamp_print+0x7c>)
    37c0:	6819      	ldr	r1, [r3, #0]
    37c2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    37c6:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    37ca:	4a15      	ldr	r2, [pc, #84]	; (3820 <timestamp_print+0x80>)
    37cc:	fba2 320c 	umull	r3, r2, r2, ip
    37d0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    37d2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    37d6:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    37da:	4b12      	ldr	r3, [pc, #72]	; (3824 <timestamp_print+0x84>)
    37dc:	fba3 530e 	umull	r5, r3, r3, lr
    37e0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    37e2:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    37e6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    37ea:	fb0c f101 	mul.w	r1, ip, r1
    37ee:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    37f2:	fb05 1114 	mls	r1, r5, r4, r1
    37f6:	fb0c f101 	mul.w	r1, ip, r1
    37fa:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    37fe:	9102      	str	r1, [sp, #8]
    3800:	9501      	str	r5, [sp, #4]
    3802:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    3806:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    380a:	9100      	str	r1, [sp, #0]
    380c:	4906      	ldr	r1, [pc, #24]	; (3828 <timestamp_print+0x88>)
    380e:	f7ff ffb3 	bl	3778 <print_formatted>
    3812:	e7ce      	b.n	37b2 <timestamp_print+0x12>
    3814:	20001908 	.word	0x20001908
    3818:	00020adc 	.word	0x00020adc
    381c:	2000190c 	.word	0x2000190c
    3820:	91a2b3c5 	.word	0x91a2b3c5
    3824:	88888889 	.word	0x88888889
    3828:	00020ae8 	.word	0x00020ae8

0000382c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    382c:	b161      	cbz	r1, 3848 <color_print+0x1c>
{
    382e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3830:	b12a      	cbz	r2, 383e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    3832:	4a06      	ldr	r2, [pc, #24]	; (384c <color_print+0x20>)
    3834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3838:	b912      	cbnz	r2, 3840 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    383a:	4a05      	ldr	r2, [pc, #20]	; (3850 <color_print+0x24>)
    383c:	e000      	b.n	3840 <color_print+0x14>
    383e:	4a04      	ldr	r2, [pc, #16]	; (3850 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3840:	4904      	ldr	r1, [pc, #16]	; (3854 <color_print+0x28>)
    3842:	f7ff ff99 	bl	3778 <print_formatted>
	}
}
    3846:	bd08      	pop	{r3, pc}
    3848:	4770      	bx	lr
    384a:	bf00      	nop
    384c:	00020b5c 	.word	0x00020b5c
    3850:	00020b04 	.word	0x00020b04
    3854:	0002171c 	.word	0x0002171c

00003858 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    3858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    385c:	4605      	mov	r5, r0
    385e:	4617      	mov	r7, r2
    3860:	461e      	mov	r6, r3
    3862:	f8dd 8018 	ldr.w	r8, [sp, #24]
	int total = 0;

	if (level_on) {
    3866:	b999      	cbnz	r1, 3890 <ids_print+0x38>
	int total = 0;
    3868:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    386a:	b12e      	cbz	r6, 3878 <ids_print+0x20>
		total += print_formatted(output, "%s/", domain);
    386c:	4632      	mov	r2, r6
    386e:	4912      	ldr	r1, [pc, #72]	; (38b8 <ids_print+0x60>)
    3870:	4628      	mov	r0, r5
    3872:	f7ff ff81 	bl	3778 <print_formatted>
    3876:	4404      	add	r4, r0
	}

	if (source) {
    3878:	f1b8 0f00 	cmp.w	r8, #0
    387c:	d017      	beq.n	38ae <ids_print+0x56>
		total += print_formatted(output,
    387e:	b187      	cbz	r7, 38a2 <ids_print+0x4a>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3880:	2301      	movs	r3, #1
    3882:	9a07      	ldr	r2, [sp, #28]
    3884:	4093      	lsls	r3, r2
				(func_on &&
    3886:	f013 0f10 	tst.w	r3, #16
    388a:	d113      	bne.n	38b4 <ids_print+0x5c>
		total += print_formatted(output,
    388c:	490b      	ldr	r1, [pc, #44]	; (38bc <ids_print+0x64>)
    388e:	e009      	b.n	38a4 <ids_print+0x4c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3890:	4b0b      	ldr	r3, [pc, #44]	; (38c0 <ids_print+0x68>)
    3892:	9a07      	ldr	r2, [sp, #28]
    3894:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3898:	490a      	ldr	r1, [pc, #40]	; (38c4 <ids_print+0x6c>)
    389a:	f7ff ff6d 	bl	3778 <print_formatted>
    389e:	4604      	mov	r4, r0
    38a0:	e7e3      	b.n	386a <ids_print+0x12>
		total += print_formatted(output,
    38a2:	4906      	ldr	r1, [pc, #24]	; (38bc <ids_print+0x64>)
    38a4:	4642      	mov	r2, r8
    38a6:	4628      	mov	r0, r5
    38a8:	f7ff ff66 	bl	3778 <print_formatted>
    38ac:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    38ae:	4620      	mov	r0, r4
    38b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    38b4:	4904      	ldr	r1, [pc, #16]	; (38c8 <ids_print+0x70>)
    38b6:	e7f5      	b.n	38a4 <ids_print+0x4c>
    38b8:	00020b20 	.word	0x00020b20
    38bc:	00020b0c 	.word	0x00020b0c
    38c0:	00020b98 	.word	0x00020b98
    38c4:	00020b18 	.word	0x00020b18
    38c8:	00020b14 	.word	0x00020b14

000038cc <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    38cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d0:	b085      	sub	sp, #20
    38d2:	4605      	mov	r5, r0
    38d4:	460c      	mov	r4, r1
    38d6:	4616      	mov	r6, r2
    38d8:	9303      	str	r3, [sp, #12]
    38da:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    38de:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    38e2:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    38e6:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    38ea:	f015 fc04 	bl	190f6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    38ee:	b1d8      	cbz	r0, 3928 <prefix_print+0x5c>
    38f0:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    38f2:	4912      	ldr	r1, [pc, #72]	; (393c <prefix_print+0x70>)
    38f4:	4628      	mov	r0, r5
    38f6:	f7ff ff3f 	bl	3778 <print_formatted>
    38fa:	4607      	mov	r7, r0
	}

	if (stamp) {
    38fc:	f1bb 0f00 	cmp.w	fp, #0
    3900:	d114      	bne.n	392c <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3902:	4642      	mov	r2, r8
    3904:	4651      	mov	r1, sl
    3906:	4628      	mov	r0, r5
    3908:	f015 fc80 	bl	1920c <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    390c:	f8cd 8004 	str.w	r8, [sp, #4]
    3910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3912:	9300      	str	r3, [sp, #0]
    3914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3916:	4632      	mov	r2, r6
    3918:	4649      	mov	r1, r9
    391a:	4628      	mov	r0, r5
    391c:	f7ff ff9c 	bl	3858 <ids_print>

	return length;
}
    3920:	4438      	add	r0, r7
    3922:	b005      	add	sp, #20
    3924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3928:	2700      	movs	r7, #0
    392a:	e7e7      	b.n	38fc <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    392c:	9a03      	ldr	r2, [sp, #12]
    392e:	4621      	mov	r1, r4
    3930:	4628      	mov	r0, r5
    3932:	f7ff ff35 	bl	37a0 <timestamp_print>
    3936:	4407      	add	r7, r0
    3938:	e7e3      	b.n	3902 <prefix_print+0x36>
    393a:	bf00      	nop
    393c:	00020b24 	.word	0x00020b24

00003940 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3940:	f011 0f10 	tst.w	r1, #16
    3944:	d10b      	bne.n	395e <newline_print+0x1e>
{
    3946:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3948:	f011 0f20 	tst.w	r1, #32
    394c:	d003      	beq.n	3956 <newline_print+0x16>
		print_formatted(ctx, "\n");
    394e:	4904      	ldr	r1, [pc, #16]	; (3960 <newline_print+0x20>)
    3950:	f7ff ff12 	bl	3778 <print_formatted>
}
    3954:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    3956:	4903      	ldr	r1, [pc, #12]	; (3964 <newline_print+0x24>)
    3958:	f7ff ff0e 	bl	3778 <print_formatted>
    395c:	e7fa      	b.n	3954 <newline_print+0x14>
    395e:	4770      	bx	lr
    3960:	00021428 	.word	0x00021428
    3964:	00023ad0 	.word	0x00023ad0

00003968 <hexdump_line_print>:
{
    3968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    396c:	4605      	mov	r5, r0
    396e:	460f      	mov	r7, r1
    3970:	4616      	mov	r6, r2
    3972:	4698      	mov	r8, r3
	newline_print(output, flags);
    3974:	9906      	ldr	r1, [sp, #24]
    3976:	f7ff ffe3 	bl	3940 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    397a:	2400      	movs	r4, #0
    397c:	4544      	cmp	r4, r8
    397e:	da05      	bge.n	398c <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3980:	4923      	ldr	r1, [pc, #140]	; (3a10 <hexdump_line_print+0xa8>)
    3982:	4628      	mov	r0, r5
    3984:	f7ff fef8 	bl	3778 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3988:	3401      	adds	r4, #1
    398a:	e7f7      	b.n	397c <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    398c:	2400      	movs	r4, #0
    398e:	e009      	b.n	39a4 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    3990:	491f      	ldr	r1, [pc, #124]	; (3a10 <hexdump_line_print+0xa8>)
    3992:	4628      	mov	r0, r5
    3994:	f7ff fef0 	bl	3778 <print_formatted>
    3998:	e00b      	b.n	39b2 <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    399a:	491e      	ldr	r1, [pc, #120]	; (3a14 <hexdump_line_print+0xac>)
    399c:	4628      	mov	r0, r5
    399e:	f7ff feeb 	bl	3778 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39a2:	3401      	adds	r4, #1
    39a4:	2c0f      	cmp	r4, #15
    39a6:	dc0c      	bgt.n	39c2 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    39a8:	2c00      	cmp	r4, #0
    39aa:	dd02      	ble.n	39b2 <hexdump_line_print+0x4a>
    39ac:	f014 0f07 	tst.w	r4, #7
    39b0:	d0ee      	beq.n	3990 <hexdump_line_print+0x28>
		if (i < length) {
    39b2:	42b4      	cmp	r4, r6
    39b4:	d2f1      	bcs.n	399a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    39b6:	5d3a      	ldrb	r2, [r7, r4]
    39b8:	4917      	ldr	r1, [pc, #92]	; (3a18 <hexdump_line_print+0xb0>)
    39ba:	4628      	mov	r0, r5
    39bc:	f7ff fedc 	bl	3778 <print_formatted>
    39c0:	e7ef      	b.n	39a2 <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    39c2:	4916      	ldr	r1, [pc, #88]	; (3a1c <hexdump_line_print+0xb4>)
    39c4:	4628      	mov	r0, r5
    39c6:	f7ff fed7 	bl	3778 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39ca:	2400      	movs	r4, #0
    39cc:	e009      	b.n	39e2 <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    39ce:	4910      	ldr	r1, [pc, #64]	; (3a10 <hexdump_line_print+0xa8>)
    39d0:	4628      	mov	r0, r5
    39d2:	f7ff fed1 	bl	3778 <print_formatted>
    39d6:	e00b      	b.n	39f0 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    39d8:	4911      	ldr	r1, [pc, #68]	; (3a20 <hexdump_line_print+0xb8>)
    39da:	4628      	mov	r0, r5
    39dc:	f7ff fecc 	bl	3778 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    39e0:	3401      	adds	r4, #1
    39e2:	2c0f      	cmp	r4, #15
    39e4:	dc12      	bgt.n	3a0c <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    39e6:	2c00      	cmp	r4, #0
    39e8:	dd02      	ble.n	39f0 <hexdump_line_print+0x88>
    39ea:	f014 0f07 	tst.w	r4, #7
    39ee:	d0ee      	beq.n	39ce <hexdump_line_print+0x66>
		if (i < length) {
    39f0:	42b4      	cmp	r4, r6
    39f2:	d206      	bcs.n	3a02 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    39f4:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    39f6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    39fa:	2b5e      	cmp	r3, #94	; 0x5e
    39fc:	d9ec      	bls.n	39d8 <hexdump_line_print+0x70>
    39fe:	222e      	movs	r2, #46	; 0x2e
    3a00:	e7ea      	b.n	39d8 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    3a02:	4903      	ldr	r1, [pc, #12]	; (3a10 <hexdump_line_print+0xa8>)
    3a04:	4628      	mov	r0, r5
    3a06:	f7ff feb7 	bl	3778 <print_formatted>
    3a0a:	e7e9      	b.n	39e0 <hexdump_line_print+0x78>
}
    3a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a10:	00020b1c 	.word	0x00020b1c
    3a14:	00020b30 	.word	0x00020b30
    3a18:	00020b28 	.word	0x00020b28
    3a1c:	00020b34 	.word	0x00020b34
    3a20:	00020b38 	.word	0x00020b38

00003a24 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    3a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a28:	b084      	sub	sp, #16
    3a2a:	4604      	mov	r4, r0
    3a2c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    3a30:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a32:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    3a34:	b98d      	cbnz	r5, 3a5a <log_output_process+0x36>
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
    3a36:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    3a3a:	b137      	cbz	r7, 3a4a <log_output_process+0x26>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3a3c:	b9bd      	cbnz	r5, 3a6e <log_output_process+0x4a>
    3a3e:	4814      	ldr	r0, [pc, #80]	; (3a90 <log_output_process+0x6c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3a40:	463b      	mov	r3, r7
    3a42:	4622      	mov	r2, r4
    3a44:	4913      	ldr	r1, [pc, #76]	; (3a94 <log_output_process+0x70>)
    3a46:	f014 fa0e 	bl	17e66 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    3a4a:	b996      	cbnz	r6, 3a72 <log_output_process+0x4e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    3a4c:	b9d5      	cbnz	r5, 3a84 <log_output_process+0x60>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3a4e:	4620      	mov	r0, r4
    3a50:	f015 fc0f 	bl	19272 <log_output_flush>
}
    3a54:	b004      	add	sp, #16
    3a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    3a5a:	9502      	str	r5, [sp, #8]
    3a5c:	9301      	str	r3, [sp, #4]
    3a5e:	9200      	str	r2, [sp, #0]
    3a60:	460b      	mov	r3, r1
    3a62:	2200      	movs	r2, #0
    3a64:	990e      	ldr	r1, [sp, #56]	; 0x38
    3a66:	f7ff ff31 	bl	38cc <prefix_print>
    3a6a:	4680      	mov	r8, r0
    3a6c:	e7e5      	b.n	3a3a <log_output_process+0x16>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3a6e:	480a      	ldr	r0, [pc, #40]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a70:	e7e6      	b.n	3a40 <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    3a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a74:	9300      	str	r3, [sp, #0]
    3a76:	4643      	mov	r3, r8
    3a78:	4632      	mov	r2, r6
    3a7a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3a7c:	4620      	mov	r0, r4
    3a7e:	f015 fbdd 	bl	1923c <log_msg_hexdump>
    3a82:	e7e3      	b.n	3a4c <log_output_process+0x28>
		postfix_print(output, flags, level);
    3a84:	462a      	mov	r2, r5
    3a86:	990e      	ldr	r1, [sp, #56]	; 0x38
    3a88:	4620      	mov	r0, r4
    3a8a:	f015 fbcb 	bl	19224 <postfix_print>
    3a8e:	e7de      	b.n	3a4e <log_output_process+0x2a>
    3a90:	000192bd 	.word	0x000192bd
    3a94:	000191fd 	.word	0x000191fd
    3a98:	0001928d 	.word	0x0001928d

00003a9c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    3a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3aa0:	b087      	sub	sp, #28
    3aa2:	4606      	mov	r6, r0
    3aa4:	460c      	mov	r4, r1
    3aa6:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    3aa8:	f8d1 9008 	ldr.w	r9, [r1, #8]
	return msg->hdr.desc.level;
    3aac:	880f      	ldrh	r7, [r1, #0]
    3aae:	f3c7 1782 	ubfx	r7, r7, #6, #3
	return msg->hdr.source;
    3ab2:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    3ab4:	7808      	ldrb	r0, [r1, #0]
    3ab6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    3aba:	b133      	cbz	r3, 3aca <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3abc:	4911      	ldr	r1, [pc, #68]	; (3b04 <log_output_msg_process+0x68>)
    3abe:	1a59      	subs	r1, r3, r1
    3ac0:	f341 01cf 	sbfx	r1, r1, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3ac4:	2900      	cmp	r1, #0
    3ac6:	da19      	bge.n	3afc <log_output_msg_process+0x60>
    3ac8:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3aca:	4621      	mov	r1, r4
    3acc:	f851 5b10 	ldr.w	r5, [r1], #16
    3ad0:	f3c5 2549 	ubfx	r5, r5, #9, #10
	*len = msg->hdr.desc.data_len;
    3ad4:	8862      	ldrh	r2, [r4, #2]
    3ad6:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    3ada:	1948      	adds	r0, r1, r5
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    3adc:	b905      	cbnz	r5, 3ae0 <log_output_msg_process+0x44>
    3ade:	2100      	movs	r1, #0
    3ae0:	f8cd 8010 	str.w	r8, [sp, #16]
    3ae4:	9203      	str	r2, [sp, #12]
    3ae6:	9002      	str	r0, [sp, #8]
    3ae8:	9101      	str	r1, [sp, #4]
    3aea:	9700      	str	r7, [sp, #0]
    3aec:	2200      	movs	r2, #0
    3aee:	4649      	mov	r1, r9
    3af0:	4630      	mov	r0, r6
    3af2:	f7ff ff97 	bl	3a24 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    3af6:	b007      	add	sp, #28
    3af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3afc:	f7ff fdc4 	bl	3688 <log_source_name_get>
    3b00:	4603      	mov	r3, r0
    3b02:	e7e2      	b.n	3aca <log_output_msg_process+0x2e>
    3b04:	000204f8 	.word	0x000204f8

00003b08 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3b08:	b570      	push	{r4, r5, r6, lr}
    3b0a:	b082      	sub	sp, #8
    3b0c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    3b0e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3b10:	f242 730f 	movw	r3, #9999	; 0x270f
    3b14:	428b      	cmp	r3, r1
    3b16:	bf28      	it	cs
    3b18:	460b      	movcs	r3, r1
    3b1a:	4a0e      	ldr	r2, [pc, #56]	; (3b54 <log_output_dropped_process+0x4c>)
    3b1c:	2105      	movs	r1, #5
    3b1e:	4668      	mov	r0, sp
    3b20:	f014 fa34 	bl	17f8c <snprintk>
    3b24:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    3b26:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3b28:	685b      	ldr	r3, [r3, #4]
    3b2a:	220b      	movs	r2, #11
    3b2c:	490a      	ldr	r1, [pc, #40]	; (3b58 <log_output_dropped_process+0x50>)
    3b2e:	4628      	mov	r0, r5
    3b30:	f015 fb57 	bl	191e2 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    3b34:	6863      	ldr	r3, [r4, #4]
    3b36:	685b      	ldr	r3, [r3, #4]
    3b38:	4632      	mov	r2, r6
    3b3a:	4669      	mov	r1, sp
    3b3c:	4628      	mov	r0, r5
    3b3e:	f015 fb50 	bl	191e2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    3b42:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3b44:	685b      	ldr	r3, [r3, #4]
    3b46:	221b      	movs	r2, #27
    3b48:	4904      	ldr	r1, [pc, #16]	; (3b5c <log_output_dropped_process+0x54>)
    3b4a:	4628      	mov	r0, r5
    3b4c:	f015 fb49 	bl	191e2 <buffer_write>
}
    3b50:	b002      	add	sp, #8
    3b52:	bd70      	pop	{r4, r5, r6, pc}
    3b54:	000224b8 	.word	0x000224b8
    3b58:	00020b8c 	.word	0x00020b8c
    3b5c:	00020b70 	.word	0x00020b70

00003b60 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3b60:	4b07      	ldr	r3, [pc, #28]	; (3b80 <log_output_timestamp_freq_set+0x20>)
    3b62:	2201      	movs	r2, #1
    3b64:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3b66:	e004      	b.n	3b72 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    3b68:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3b6a:	4a05      	ldr	r2, [pc, #20]	; (3b80 <log_output_timestamp_freq_set+0x20>)
    3b6c:	6813      	ldr	r3, [r2, #0]
    3b6e:	005b      	lsls	r3, r3, #1
    3b70:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3b72:	4b04      	ldr	r3, [pc, #16]	; (3b84 <log_output_timestamp_freq_set+0x24>)
    3b74:	4298      	cmp	r0, r3
    3b76:	d8f7      	bhi.n	3b68 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    3b78:	4b03      	ldr	r3, [pc, #12]	; (3b88 <log_output_timestamp_freq_set+0x28>)
    3b7a:	6018      	str	r0, [r3, #0]
}
    3b7c:	4770      	bx	lr
    3b7e:	bf00      	nop
    3b80:	2000190c 	.word	0x2000190c
    3b84:	000f4240 	.word	0x000f4240
    3b88:	20001908 	.word	0x20001908

00003b8c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3b8c:	b570      	push	{r4, r5, r6, lr}
    3b8e:	4606      	mov	r6, r0
    3b90:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    3b92:	2400      	movs	r4, #0
    3b94:	e006      	b.n	3ba4 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    3b96:	4b05      	ldr	r3, [pc, #20]	; (3bac <char_out+0x20>)
    3b98:	6818      	ldr	r0, [r3, #0]
    3b9a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    3b9c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3b9e:	685b      	ldr	r3, [r3, #4]
    3ba0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    3ba2:	3401      	adds	r4, #1
    3ba4:	42ac      	cmp	r4, r5
    3ba6:	d3f6      	bcc.n	3b96 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    3ba8:	4628      	mov	r0, r5
    3baa:	bd70      	pop	{r4, r5, r6, pc}
    3bac:	20001928 	.word	0x20001928

00003bb0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3bb0:	4b01      	ldr	r3, [pc, #4]	; (3bb8 <format_set+0x8>)
    3bb2:	6019      	str	r1, [r3, #0]
	return 0;
}
    3bb4:	2000      	movs	r0, #0
    3bb6:	4770      	bx	lr
    3bb8:	20001918 	.word	0x20001918

00003bbc <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3bbc:	4b01      	ldr	r3, [pc, #4]	; (3bc4 <log_backend_uart_init+0x8>)
    3bbe:	4a02      	ldr	r2, [pc, #8]	; (3bc8 <log_backend_uart_init+0xc>)
    3bc0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    3bc2:	4770      	bx	lr
    3bc4:	20001928 	.word	0x20001928
    3bc8:	0002011c 	.word	0x0002011c

00003bcc <panic>:

static void panic(struct log_backend const *const backend)
{
    3bcc:	b508      	push	{r3, lr}
	in_panic = true;
    3bce:	4b03      	ldr	r3, [pc, #12]	; (3bdc <panic+0x10>)
    3bd0:	2201      	movs	r2, #1
    3bd2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3bd4:	4802      	ldr	r0, [pc, #8]	; (3be0 <panic+0x14>)
    3bd6:	f015 fb4c 	bl	19272 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3bda:	bd08      	pop	{r3, pc}
    3bdc:	20002b75 	.word	0x20002b75
    3be0:	00020be8 	.word	0x00020be8

00003be4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3be4:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3be6:	4802      	ldr	r0, [pc, #8]	; (3bf0 <dropped+0xc>)
    3be8:	f7ff ff8e 	bl	3b08 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    3bec:	bd08      	pop	{r3, pc}
    3bee:	bf00      	nop
    3bf0:	00020be8 	.word	0x00020be8

00003bf4 <process>:
{
    3bf4:	b510      	push	{r4, lr}
    3bf6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3bf8:	4b04      	ldr	r3, [pc, #16]	; (3c0c <process+0x18>)
    3bfa:	6818      	ldr	r0, [r3, #0]
    3bfc:	f7ff fbb4 	bl	3368 <log_format_func_t_get>
    3c00:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    3c02:	220f      	movs	r2, #15
    3c04:	4621      	mov	r1, r4
    3c06:	4802      	ldr	r0, [pc, #8]	; (3c10 <process+0x1c>)
    3c08:	4798      	blx	r3
}
    3c0a:	bd10      	pop	{r4, pc}
    3c0c:	20001918 	.word	0x20001918
    3c10:	00020be8 	.word	0x00020be8

00003c14 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3c14:	4b03      	ldr	r3, [pc, #12]	; (3c24 <log_backend_rtt_init+0x10>)
    3c16:	2201      	movs	r2, #1
    3c18:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    3c1a:	4b03      	ldr	r3, [pc, #12]	; (3c28 <log_backend_rtt_init+0x14>)
    3c1c:	4a03      	ldr	r2, [pc, #12]	; (3c2c <log_backend_rtt_init+0x18>)
    3c1e:	601a      	str	r2, [r3, #0]
}
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop
    3c24:	20002b76 	.word	0x20002b76
    3c28:	20001960 	.word	0x20001960
    3c2c:	20001948 	.word	0x20001948

00003c30 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3c30:	4b01      	ldr	r3, [pc, #4]	; (3c38 <format_set+0x8>)
    3c32:	6019      	str	r1, [r3, #0]
	return 0;
}
    3c34:	2000      	movs	r0, #0
    3c36:	4770      	bx	lr
    3c38:	20001964 	.word	0x20001964

00003c3c <on_failed_write>:
{
    3c3c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3c3e:	b918      	cbnz	r0, 3c48 <on_failed_write+0xc>
		host_present = false;
    3c40:	4b08      	ldr	r3, [pc, #32]	; (3c64 <on_failed_write+0x28>)
    3c42:	2200      	movs	r2, #0
    3c44:	701a      	strb	r2, [r3, #0]
}
    3c46:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3c48:	4b07      	ldr	r3, [pc, #28]	; (3c68 <on_failed_write+0x2c>)
    3c4a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    3c4c:	b123      	cbz	r3, 3c58 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    3c4e:	f241 3088 	movw	r0, #5000	; 0x1388
    3c52:	f01c f8a8 	bl	1fda6 <z_impl_k_busy_wait>
}
    3c56:	e7f6      	b.n	3c46 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    3c58:	20a4      	movs	r0, #164	; 0xa4
    3c5a:	2100      	movs	r1, #0
    3c5c:	f013 f972 	bl	16f44 <z_impl_k_sleep>
}
    3c60:	e7f1      	b.n	3c46 <on_failed_write+0xa>
    3c62:	bf00      	nop
    3c64:	20002b76 	.word	0x20002b76
    3c68:	20002b77 	.word	0x20002b77

00003c6c <on_write>:
{
    3c6c:	b538      	push	{r3, r4, r5, lr}
    3c6e:	4604      	mov	r4, r0
	host_present = true;
    3c70:	4b0a      	ldr	r3, [pc, #40]	; (3c9c <on_write+0x30>)
    3c72:	2201      	movs	r2, #1
    3c74:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3c76:	4b0a      	ldr	r3, [pc, #40]	; (3ca0 <on_write+0x34>)
    3c78:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3c7a:	b92b      	cbnz	r3, 3c88 <on_write+0x1c>
}
    3c7c:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    3c7e:	1e65      	subs	r5, r4, #1
    3c80:	4620      	mov	r0, r4
    3c82:	f7ff ffdb 	bl	3c3c <on_failed_write>
    3c86:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3c88:	2000      	movs	r0, #0
    3c8a:	f011 fe95 	bl	159b8 <SEGGER_RTT_HasDataUp>
    3c8e:	2800      	cmp	r0, #0
    3c90:	d0f4      	beq.n	3c7c <on_write+0x10>
    3c92:	4b02      	ldr	r3, [pc, #8]	; (3c9c <on_write+0x30>)
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d1f1      	bne.n	3c7e <on_write+0x12>
    3c9a:	e7ef      	b.n	3c7c <on_write+0x10>
    3c9c:	20002b76 	.word	0x20002b76
    3ca0:	20002b77 	.word	0x20002b77

00003ca4 <data_out_block_mode>:
{
    3ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ca6:	4606      	mov	r6, r0
    3ca8:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3caa:	2704      	movs	r7, #4
    3cac:	e00d      	b.n	3cca <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3cae:	462a      	mov	r2, r5
    3cb0:	4631      	mov	r1, r6
    3cb2:	2000      	movs	r0, #0
    3cb4:	f011 fde6 	bl	15884 <SEGGER_RTT_WriteSkipNoLock>
    3cb8:	4604      	mov	r4, r0
    3cba:	e014      	b.n	3ce6 <data_out_block_mode+0x42>
			on_write(retry_cnt);
    3cbc:	4638      	mov	r0, r7
    3cbe:	f7ff ffd5 	bl	3c6c <on_write>
	} while ((ret == 0) && host_present);
    3cc2:	b9dc      	cbnz	r4, 3cfc <data_out_block_mode+0x58>
    3cc4:	4b11      	ldr	r3, [pc, #68]	; (3d0c <data_out_block_mode+0x68>)
    3cc6:	781b      	ldrb	r3, [r3, #0]
    3cc8:	b1c3      	cbz	r3, 3cfc <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3cca:	4b11      	ldr	r3, [pc, #68]	; (3d10 <data_out_block_mode+0x6c>)
    3ccc:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d1ed      	bne.n	3cae <data_out_block_mode+0xa>
			RTT_LOCK();
    3cd2:	f011 fe81 	bl	159d8 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3cd6:	462a      	mov	r2, r5
    3cd8:	4631      	mov	r1, r6
    3cda:	2000      	movs	r0, #0
    3cdc:	f011 fdd2 	bl	15884 <SEGGER_RTT_WriteSkipNoLock>
    3ce0:	4604      	mov	r4, r0
			RTT_UNLOCK();
    3ce2:	f011 fe85 	bl	159f0 <zephyr_rtt_mutex_unlock>
		if (ret) {
    3ce6:	2c00      	cmp	r4, #0
    3ce8:	d1e8      	bne.n	3cbc <data_out_block_mode+0x18>
		} else if (host_present) {
    3cea:	4b08      	ldr	r3, [pc, #32]	; (3d0c <data_out_block_mode+0x68>)
    3cec:	781b      	ldrb	r3, [r3, #0]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d0e7      	beq.n	3cc2 <data_out_block_mode+0x1e>
			retry_cnt--;
    3cf2:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3cf4:	4638      	mov	r0, r7
    3cf6:	f7ff ffa1 	bl	3c3c <on_failed_write>
    3cfa:	e7e2      	b.n	3cc2 <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
    3cfc:	b914      	cbnz	r4, 3d04 <data_out_block_mode+0x60>
    3cfe:	4b03      	ldr	r3, [pc, #12]	; (3d0c <data_out_block_mode+0x68>)
    3d00:	781b      	ldrb	r3, [r3, #0]
    3d02:	b903      	cbnz	r3, 3d06 <data_out_block_mode+0x62>
    3d04:	462c      	mov	r4, r5
}
    3d06:	4620      	mov	r0, r4
    3d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d0a:	bf00      	nop
    3d0c:	20002b76 	.word	0x20002b76
    3d10:	20002b77 	.word	0x20002b77

00003d14 <panic>:
{
    3d14:	b508      	push	{r3, lr}
	panic_mode = true;
    3d16:	4b03      	ldr	r3, [pc, #12]	; (3d24 <panic+0x10>)
    3d18:	2201      	movs	r2, #1
    3d1a:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    3d1c:	4802      	ldr	r0, [pc, #8]	; (3d28 <panic+0x14>)
    3d1e:	f015 faa8 	bl	19272 <log_output_flush>
}
    3d22:	bd08      	pop	{r3, pc}
    3d24:	20002b77 	.word	0x20002b77
    3d28:	00020c24 	.word	0x00020c24

00003d2c <dropped>:
{
    3d2c:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    3d2e:	4802      	ldr	r0, [pc, #8]	; (3d38 <dropped+0xc>)
    3d30:	f7ff feea 	bl	3b08 <log_output_dropped_process>
}
    3d34:	bd08      	pop	{r3, pc}
    3d36:	bf00      	nop
    3d38:	00020c24 	.word	0x00020c24

00003d3c <process>:
{
    3d3c:	b510      	push	{r4, lr}
    3d3e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3d40:	4b04      	ldr	r3, [pc, #16]	; (3d54 <process+0x18>)
    3d42:	6818      	ldr	r0, [r3, #0]
    3d44:	f7ff fb10 	bl	3368 <log_format_func_t_get>
    3d48:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    3d4a:	220f      	movs	r2, #15
    3d4c:	4621      	mov	r1, r4
    3d4e:	4802      	ldr	r0, [pc, #8]	; (3d58 <process+0x1c>)
    3d50:	4798      	blx	r3
}
    3d52:	bd10      	pop	{r4, pc}
    3d54:	20001964 	.word	0x20001964
    3d58:	00020c24 	.word	0x00020c24

00003d5c <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    3d5c:	b500      	push	{lr}
    3d5e:	b08f      	sub	sp, #60	; 0x3c
	const struct ipc_service_backend *backend;

	if (!instance) {
    3d60:	b140      	cbz	r0, 3d74 <ipc_service_open_instance+0x18>
		LOG_ERR("Invalid instance");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
    3d62:	6883      	ldr	r3, [r0, #8]

	if (!backend) {
    3d64:	b373      	cbz	r3, 3dc4 <ipc_service_open_instance+0x68>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	if (!backend->open_instance) {
    3d66:	681b      	ldr	r3, [r3, #0]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d053      	beq.n	3e14 <ipc_service_open_instance+0xb8>
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
    3d6c:	4798      	blx	r3
}
    3d6e:	b00f      	add	sp, #60	; 0x3c
    3d70:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Invalid instance");
    3d74:	4b28      	ldr	r3, [pc, #160]	; (3e18 <ipc_service_open_instance+0xbc>)
    3d76:	930d      	str	r3, [sp, #52]	; 0x34
    3d78:	2302      	movs	r3, #2
    3d7a:	f88d 3004 	strb.w	r3, [sp, #4]
    3d7e:	2300      	movs	r3, #0
    3d80:	f88d 3005 	strb.w	r3, [sp, #5]
    3d84:	f88d 3006 	strb.w	r3, [sp, #6]
    3d88:	f88d 3007 	strb.w	r3, [sp, #7]
    3d8c:	9a01      	ldr	r2, [sp, #4]
    3d8e:	920c      	str	r2, [sp, #48]	; 0x30
    3d90:	4619      	mov	r1, r3
    3d92:	f363 0100 	bfi	r1, r3, #0, #1
    3d96:	f363 0141 	bfi	r1, r3, #1, #1
    3d9a:	f363 0182 	bfi	r1, r3, #2, #1
    3d9e:	f363 01c5 	bfi	r1, r3, #3, #3
    3da2:	2201      	movs	r2, #1
    3da4:	f362 1188 	bfi	r1, r2, #6, #3
    3da8:	2208      	movs	r2, #8
    3daa:	f362 2152 	bfi	r1, r2, #9, #10
    3dae:	f363 41de 	bfi	r1, r3, #19, #12
    3db2:	f363 71df 	bfi	r1, r3, #31, #1
    3db6:	aa0c      	add	r2, sp, #48	; 0x30
    3db8:	4818      	ldr	r0, [pc, #96]	; (3e1c <ipc_service_open_instance+0xc0>)
    3dba:	f7ff fc87 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
    3dbe:	f06f 0015 	mvn.w	r0, #21
    3dc2:	e7d4      	b.n	3d6e <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid backend configuration");
    3dc4:	4b16      	ldr	r3, [pc, #88]	; (3e20 <ipc_service_open_instance+0xc4>)
    3dc6:	9307      	str	r3, [sp, #28]
    3dc8:	2302      	movs	r3, #2
    3dca:	f88d 3004 	strb.w	r3, [sp, #4]
    3dce:	2300      	movs	r3, #0
    3dd0:	f88d 3005 	strb.w	r3, [sp, #5]
    3dd4:	f88d 3006 	strb.w	r3, [sp, #6]
    3dd8:	f88d 3007 	strb.w	r3, [sp, #7]
    3ddc:	9a01      	ldr	r2, [sp, #4]
    3dde:	9206      	str	r2, [sp, #24]
    3de0:	4619      	mov	r1, r3
    3de2:	f363 0100 	bfi	r1, r3, #0, #1
    3de6:	f363 0141 	bfi	r1, r3, #1, #1
    3dea:	f363 0182 	bfi	r1, r3, #2, #1
    3dee:	f363 01c5 	bfi	r1, r3, #3, #3
    3df2:	2201      	movs	r2, #1
    3df4:	f362 1188 	bfi	r1, r2, #6, #3
    3df8:	2208      	movs	r2, #8
    3dfa:	f362 2152 	bfi	r1, r2, #9, #10
    3dfe:	f363 41de 	bfi	r1, r3, #19, #12
    3e02:	f363 71df 	bfi	r1, r3, #31, #1
    3e06:	aa06      	add	r2, sp, #24
    3e08:	4804      	ldr	r0, [pc, #16]	; (3e1c <ipc_service_open_instance+0xc0>)
    3e0a:	f7ff fc5f 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
    3e0e:	f06f 0004 	mvn.w	r0, #4
    3e12:	e7ac      	b.n	3d6e <ipc_service_open_instance+0x12>
		return 0;
    3e14:	2000      	movs	r0, #0
    3e16:	e7aa      	b.n	3d6e <ipc_service_open_instance+0x12>
    3e18:	00020c34 	.word	0x00020c34
    3e1c:	00020590 	.word	0x00020590
    3e20:	00020c48 	.word	0x00020c48

00003e24 <ipc_service_register_endpoint>:

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    3e24:	b510      	push	{r4, lr}
    3e26:	b08e      	sub	sp, #56	; 0x38
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    3e28:	b168      	cbz	r0, 3e46 <ipc_service_register_endpoint+0x22>
    3e2a:	4603      	mov	r3, r0
    3e2c:	b159      	cbz	r1, 3e46 <ipc_service_register_endpoint+0x22>
    3e2e:	b152      	cbz	r2, 3e46 <ipc_service_register_endpoint+0x22>
		LOG_ERR("Invalid instance, endpoint or configuration");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
    3e30:	6880      	ldr	r0, [r0, #8]

	if (!backend || !backend->register_endpoint) {
    3e32:	b380      	cbz	r0, 3e96 <ipc_service_register_endpoint+0x72>
    3e34:	6884      	ldr	r4, [r0, #8]
    3e36:	b374      	cbz	r4, 3e96 <ipc_service_register_endpoint+0x72>
		return -EIO;
	}

	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;
    3e38:	f841 3b04 	str.w	r3, [r1], #4

	return backend->register_endpoint(instance, &ept->token, cfg);
    3e3c:	6884      	ldr	r4, [r0, #8]
    3e3e:	4618      	mov	r0, r3
    3e40:	47a0      	blx	r4
}
    3e42:	b00e      	add	sp, #56	; 0x38
    3e44:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid instance, endpoint or configuration");
    3e46:	4b28      	ldr	r3, [pc, #160]	; (3ee8 <ipc_service_register_endpoint+0xc4>)
    3e48:	930d      	str	r3, [sp, #52]	; 0x34
    3e4a:	2302      	movs	r3, #2
    3e4c:	f88d 3004 	strb.w	r3, [sp, #4]
    3e50:	2300      	movs	r3, #0
    3e52:	f88d 3005 	strb.w	r3, [sp, #5]
    3e56:	f88d 3006 	strb.w	r3, [sp, #6]
    3e5a:	f88d 3007 	strb.w	r3, [sp, #7]
    3e5e:	9a01      	ldr	r2, [sp, #4]
    3e60:	920c      	str	r2, [sp, #48]	; 0x30
    3e62:	4619      	mov	r1, r3
    3e64:	f363 0100 	bfi	r1, r3, #0, #1
    3e68:	f363 0141 	bfi	r1, r3, #1, #1
    3e6c:	f363 0182 	bfi	r1, r3, #2, #1
    3e70:	f363 01c5 	bfi	r1, r3, #3, #3
    3e74:	2201      	movs	r2, #1
    3e76:	f362 1188 	bfi	r1, r2, #6, #3
    3e7a:	2208      	movs	r2, #8
    3e7c:	f362 2152 	bfi	r1, r2, #9, #10
    3e80:	f363 41de 	bfi	r1, r3, #19, #12
    3e84:	f363 71df 	bfi	r1, r3, #31, #1
    3e88:	aa0c      	add	r2, sp, #48	; 0x30
    3e8a:	4818      	ldr	r0, [pc, #96]	; (3eec <ipc_service_register_endpoint+0xc8>)
    3e8c:	f7ff fc1e 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
    3e90:	f06f 0015 	mvn.w	r0, #21
    3e94:	e7d5      	b.n	3e42 <ipc_service_register_endpoint+0x1e>
		LOG_ERR("Invalid backend configuration");
    3e96:	4b16      	ldr	r3, [pc, #88]	; (3ef0 <ipc_service_register_endpoint+0xcc>)
    3e98:	9307      	str	r3, [sp, #28]
    3e9a:	2302      	movs	r3, #2
    3e9c:	f88d 3004 	strb.w	r3, [sp, #4]
    3ea0:	2300      	movs	r3, #0
    3ea2:	f88d 3005 	strb.w	r3, [sp, #5]
    3ea6:	f88d 3006 	strb.w	r3, [sp, #6]
    3eaa:	f88d 3007 	strb.w	r3, [sp, #7]
    3eae:	9a01      	ldr	r2, [sp, #4]
    3eb0:	9206      	str	r2, [sp, #24]
    3eb2:	4619      	mov	r1, r3
    3eb4:	f363 0100 	bfi	r1, r3, #0, #1
    3eb8:	f363 0141 	bfi	r1, r3, #1, #1
    3ebc:	f363 0182 	bfi	r1, r3, #2, #1
    3ec0:	f363 01c5 	bfi	r1, r3, #3, #3
    3ec4:	2201      	movs	r2, #1
    3ec6:	f362 1188 	bfi	r1, r2, #6, #3
    3eca:	2208      	movs	r2, #8
    3ecc:	f362 2152 	bfi	r1, r2, #9, #10
    3ed0:	f363 41de 	bfi	r1, r3, #19, #12
    3ed4:	f363 71df 	bfi	r1, r3, #31, #1
    3ed8:	aa06      	add	r2, sp, #24
    3eda:	4804      	ldr	r0, [pc, #16]	; (3eec <ipc_service_register_endpoint+0xc8>)
    3edc:	f7ff fbf6 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
    3ee0:	f06f 0004 	mvn.w	r0, #4
    3ee4:	e7ad      	b.n	3e42 <ipc_service_register_endpoint+0x1e>
    3ee6:	bf00      	nop
    3ee8:	00020c68 	.word	0x00020c68
    3eec:	00020590 	.word	0x00020590
    3ef0:	00020c48 	.word	0x00020c48

00003ef4 <ipc_service_send>:

int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    3ef4:	b510      	push	{r4, lr}
    3ef6:	b094      	sub	sp, #80	; 0x50
	const struct ipc_service_backend *backend;

	if (!ept) {
    3ef8:	b180      	cbz	r0, 3f1c <ipc_service_send+0x28>
    3efa:	4613      	mov	r3, r2
    3efc:	4684      	mov	ip, r0
		LOG_ERR("Invalid endpoint");
		return -EINVAL;
	}

	if (!ept->instance) {
    3efe:	6800      	ldr	r0, [r0, #0]
    3f00:	2800      	cmp	r0, #0
    3f02:	d033      	beq.n	3f6c <ipc_service_send+0x78>
		LOG_ERR("Endpoint not registered\n");
		return -ENOENT;
	}

	backend = ept->instance->api;
    3f04:	6882      	ldr	r2, [r0, #8]

	if (!backend || !backend->send) {
    3f06:	2a00      	cmp	r2, #0
    3f08:	d058      	beq.n	3fbc <ipc_service_send+0xc8>
    3f0a:	6854      	ldr	r4, [r2, #4]
    3f0c:	2c00      	cmp	r4, #0
    3f0e:	d055      	beq.n	3fbc <ipc_service_send+0xc8>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
    3f10:	460a      	mov	r2, r1
    3f12:	f8dc 1004 	ldr.w	r1, [ip, #4]
    3f16:	47a0      	blx	r4
}
    3f18:	b014      	add	sp, #80	; 0x50
    3f1a:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid endpoint");
    3f1c:	4b3b      	ldr	r3, [pc, #236]	; (400c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
    3f1e:	9313      	str	r3, [sp, #76]	; 0x4c
    3f20:	2302      	movs	r3, #2
    3f22:	f88d 3004 	strb.w	r3, [sp, #4]
    3f26:	2300      	movs	r3, #0
    3f28:	f88d 3005 	strb.w	r3, [sp, #5]
    3f2c:	f88d 3006 	strb.w	r3, [sp, #6]
    3f30:	f88d 3007 	strb.w	r3, [sp, #7]
    3f34:	9a01      	ldr	r2, [sp, #4]
    3f36:	9212      	str	r2, [sp, #72]	; 0x48
    3f38:	4619      	mov	r1, r3
    3f3a:	f363 0100 	bfi	r1, r3, #0, #1
    3f3e:	f363 0141 	bfi	r1, r3, #1, #1
    3f42:	f363 0182 	bfi	r1, r3, #2, #1
    3f46:	f363 01c5 	bfi	r1, r3, #3, #3
    3f4a:	2201      	movs	r2, #1
    3f4c:	f362 1188 	bfi	r1, r2, #6, #3
    3f50:	2208      	movs	r2, #8
    3f52:	f362 2152 	bfi	r1, r2, #9, #10
    3f56:	f363 41de 	bfi	r1, r3, #19, #12
    3f5a:	f363 71df 	bfi	r1, r3, #31, #1
    3f5e:	aa12      	add	r2, sp, #72	; 0x48
    3f60:	482b      	ldr	r0, [pc, #172]	; (4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    3f62:	f7ff fbb3 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
    3f66:	f06f 0015 	mvn.w	r0, #21
    3f6a:	e7d5      	b.n	3f18 <ipc_service_send+0x24>
		LOG_ERR("Endpoint not registered\n");
    3f6c:	4b29      	ldr	r3, [pc, #164]	; (4014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
    3f6e:	930d      	str	r3, [sp, #52]	; 0x34
    3f70:	2302      	movs	r3, #2
    3f72:	f88d 3004 	strb.w	r3, [sp, #4]
    3f76:	2300      	movs	r3, #0
    3f78:	f88d 3005 	strb.w	r3, [sp, #5]
    3f7c:	f88d 3006 	strb.w	r3, [sp, #6]
    3f80:	f88d 3007 	strb.w	r3, [sp, #7]
    3f84:	9a01      	ldr	r2, [sp, #4]
    3f86:	920c      	str	r2, [sp, #48]	; 0x30
    3f88:	4619      	mov	r1, r3
    3f8a:	f363 0100 	bfi	r1, r3, #0, #1
    3f8e:	f363 0141 	bfi	r1, r3, #1, #1
    3f92:	f363 0182 	bfi	r1, r3, #2, #1
    3f96:	f363 01c5 	bfi	r1, r3, #3, #3
    3f9a:	2201      	movs	r2, #1
    3f9c:	f362 1188 	bfi	r1, r2, #6, #3
    3fa0:	2208      	movs	r2, #8
    3fa2:	f362 2152 	bfi	r1, r2, #9, #10
    3fa6:	f363 41de 	bfi	r1, r3, #19, #12
    3faa:	f363 71df 	bfi	r1, r3, #31, #1
    3fae:	aa0c      	add	r2, sp, #48	; 0x30
    3fb0:	4817      	ldr	r0, [pc, #92]	; (4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    3fb2:	f7ff fb8b 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENOENT;
    3fb6:	f06f 0001 	mvn.w	r0, #1
    3fba:	e7ad      	b.n	3f18 <ipc_service_send+0x24>
		LOG_ERR("Invalid backend configuration");
    3fbc:	4b16      	ldr	r3, [pc, #88]	; (4018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
    3fbe:	9307      	str	r3, [sp, #28]
    3fc0:	2302      	movs	r3, #2
    3fc2:	f88d 3004 	strb.w	r3, [sp, #4]
    3fc6:	2300      	movs	r3, #0
    3fc8:	f88d 3005 	strb.w	r3, [sp, #5]
    3fcc:	f88d 3006 	strb.w	r3, [sp, #6]
    3fd0:	f88d 3007 	strb.w	r3, [sp, #7]
    3fd4:	9a01      	ldr	r2, [sp, #4]
    3fd6:	9206      	str	r2, [sp, #24]
    3fd8:	4619      	mov	r1, r3
    3fda:	f363 0100 	bfi	r1, r3, #0, #1
    3fde:	f363 0141 	bfi	r1, r3, #1, #1
    3fe2:	f363 0182 	bfi	r1, r3, #2, #1
    3fe6:	f363 01c5 	bfi	r1, r3, #3, #3
    3fea:	2201      	movs	r2, #1
    3fec:	f362 1188 	bfi	r1, r2, #6, #3
    3ff0:	2208      	movs	r2, #8
    3ff2:	f362 2152 	bfi	r1, r2, #9, #10
    3ff6:	f363 41de 	bfi	r1, r3, #19, #12
    3ffa:	f363 71df 	bfi	r1, r3, #31, #1
    3ffe:	aa06      	add	r2, sp, #24
    4000:	4803      	ldr	r0, [pc, #12]	; (4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    4002:	f7ff fb63 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
    4006:	f06f 0004 	mvn.w	r0, #4
    400a:	e785      	b.n	3f18 <ipc_service_send+0x24>
    400c:	00020c94 	.word	0x00020c94
    4010:	00020590 	.word	0x00020590
    4014:	00020ca8 	.word	0x00020ca8
    4018:	00020c48 	.word	0x00020c48

0000401c <get_available_ept_slot>:

	return NULL;
}

static struct ipc_rpmsg_ept *get_available_ept_slot(struct ipc_rpmsg_instance *rpmsg_inst)
{
    401c:	b508      	push	{r3, lr}
	return get_ept_slot_with_name(rpmsg_inst, "");
    401e:	4902      	ldr	r1, [pc, #8]	; (4028 <get_available_ept_slot+0xc>)
    4020:	f015 f9ec 	bl	193fc <get_ept_slot_with_name>
}
    4024:	bd08      	pop	{r3, pc}
    4026:	bf00      	nop
    4028:	00020a70 	.word	0x00020a70

0000402c <advertise_ept>:
	return false;
}

static void advertise_ept(struct ipc_rpmsg_instance *rpmsg_inst, struct ipc_rpmsg_ept *rpmsg_ept,
			  const char *name, uint32_t dest)
{
    402c:	b530      	push	{r4, r5, lr}
    402e:	b085      	sub	sp, #20
    4030:	4604      	mov	r4, r0
    4032:	460d      	mov	r5, r1
	struct rpmsg_device *rdev;
	int err;

	rdev = rpmsg_virtio_get_rpmsg_device(&rpmsg_inst->rvdev);

	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    4034:	490b      	ldr	r1, [pc, #44]	; (4064 <advertise_ept+0x38>)
    4036:	9102      	str	r1, [sp, #8]
    4038:	f8d0 1198 	ldr.w	r1, [r0, #408]	; 0x198
    403c:	9101      	str	r1, [sp, #4]
    403e:	9300      	str	r3, [sp, #0]
    4040:	f04f 33ff 	mov.w	r3, #4294967295
    4044:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    4048:	4628      	mov	r0, r5
    404a:	f011 fa05 	bl	15458 <rpmsg_create_ept>
			       dest, rpmsg_inst->cb, rpmsg_service_unbind);
	if (err != 0) {
    404e:	b938      	cbnz	r0, 4060 <advertise_ept+0x34>
		return;
	}

	rpmsg_ept->bound = true;
    4050:	2301      	movs	r3, #1
    4052:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    4056:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    405a:	b10b      	cbz	r3, 4060 <advertise_ept+0x34>
		rpmsg_inst->bound_cb(rpmsg_ept);
    405c:	4628      	mov	r0, r5
    405e:	4798      	blx	r3
	}
}
    4060:	b005      	add	sp, #20
    4062:	bd30      	pop	{r4, r5, pc}
    4064:	00019455 	.word	0x00019455

00004068 <bound_cb>:
		k_mutex_unlock(&rpmsg_inst->mtx);
	}
}

static void bound_cb(struct ipc_rpmsg_ept *ept)
{
    4068:	b510      	push	{r4, lr}
    406a:	b082      	sub	sp, #8
    406c:	4604      	mov	r4, r0
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    406e:	2301      	movs	r3, #1
    4070:	9301      	str	r3, [sp, #4]
    4072:	2300      	movs	r3, #0
    4074:	9300      	str	r3, [sp, #0]
    4076:	4b06      	ldr	r3, [pc, #24]	; (4090 <bound_cb+0x28>)
    4078:	6a82      	ldr	r2, [r0, #40]	; 0x28
    407a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    407c:	f011 f98a 	bl	15394 <rpmsg_send_offchannel_raw>
	rpmsg_send(&ept->ep, (uint8_t *)"", 0);

	if (ept->cb->bound) {
    4080:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    4082:	681b      	ldr	r3, [r3, #0]
    4084:	b10b      	cbz	r3, 408a <bound_cb+0x22>
		ept->cb->bound(ept->priv);
    4086:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4088:	4798      	blx	r3
	}
}
    408a:	b002      	add	sp, #8
    408c:	bd10      	pop	{r4, pc}
    408e:	bf00      	nop
    4090:	00020a70 	.word	0x00020a70

00004094 <mbox_init>:

	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
}

static int mbox_init(const struct device *instance)
{
    4094:	b5f0      	push	{r4, r5, r6, r7, lr}
    4096:	b083      	sub	sp, #12
	const struct backend_config_t *conf = instance->config;
    4098:	6844      	ldr	r4, [r0, #4]
	struct backend_data_t *data = instance->data;
    409a:	6905      	ldr	r5, [r0, #16]
	int prio, err;

	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    409c:	69e3      	ldr	r3, [r4, #28]
    409e:	2b01      	cmp	r3, #1
    40a0:	d023      	beq.n	40ea <mbox_init+0x56>
						   K_PRIO_PREEMPT(conf->wq_prio);
    40a2:	6a27      	ldr	r7, [r4, #32]

	k_work_queue_init(&data->mbox_wq);
    40a4:	f505 762a 	add.w	r6, r5, #680	; 0x2a8
    40a8:	4630      	mov	r0, r6
    40aa:	f01b fbad 	bl	1f808 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    40ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    40b0:	2300      	movs	r3, #0
    40b2:	9300      	str	r3, [sp, #0]
    40b4:	463b      	mov	r3, r7
    40b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    40ba:	4914      	ldr	r1, [pc, #80]	; (410c <mbox_init+0x78>)
    40bc:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    40c0:	4630      	mov	r0, r6
    40c2:	f012 fb43 	bl	1674c <k_work_queue_start>

	k_work_init(&data->mbox_work, mbox_callback_process);
    40c6:	4912      	ldr	r1, [pc, #72]	; (4110 <mbox_init+0x7c>)
    40c8:	f505 7026 	add.w	r0, r5, #664	; 0x298
    40cc:	f01b fb6e 	bl	1f7ac <k_work_init>

	err = mbox_register_callback(&conf->mbox_rx, mbox_callback, data);
    40d0:	f104 0714 	add.w	r7, r4, #20
		(const struct mbox_driver_api *)channel->dev->api;
    40d4:	6960      	ldr	r0, [r4, #20]
	const struct mbox_driver_api *api =
    40d6:	6883      	ldr	r3, [r0, #8]
	if (api->register_callback == NULL) {
    40d8:	685e      	ldr	r6, [r3, #4]
    40da:	b14e      	cbz	r6, 40f0 <mbox_init+0x5c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    40dc:	462b      	mov	r3, r5
    40de:	4a0d      	ldr	r2, [pc, #52]	; (4114 <mbox_init+0x80>)
    40e0:	6879      	ldr	r1, [r7, #4]
    40e2:	47b0      	blx	r6
	if (err != 0) {
    40e4:	b138      	cbz	r0, 40f6 <mbox_init+0x62>
		return err;
	}

	return mbox_set_enabled(&conf->mbox_rx, 1);
}
    40e6:	b003      	add	sp, #12
    40e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    40ea:	6a27      	ldr	r7, [r4, #32]
    40ec:	3f10      	subs	r7, #16
    40ee:	e7d9      	b.n	40a4 <mbox_init+0x10>
		return -ENOSYS;
    40f0:	f06f 0057 	mvn.w	r0, #87	; 0x57
    40f4:	e7f6      	b.n	40e4 <mbox_init+0x50>
		(const struct mbox_driver_api *)channel->dev->api;
    40f6:	6960      	ldr	r0, [r4, #20]
	const struct mbox_driver_api *api =
    40f8:	6883      	ldr	r3, [r0, #8]
	if (api->set_enabled == NULL) {
    40fa:	691b      	ldr	r3, [r3, #16]
    40fc:	b11b      	cbz	r3, 4106 <mbox_init+0x72>
	return api->set_enabled(channel->dev, channel->id, enable);
    40fe:	2201      	movs	r2, #1
    4100:	6879      	ldr	r1, [r7, #4]
    4102:	4798      	blx	r3
    4104:	e7ef      	b.n	40e6 <mbox_init+0x52>
		return -ENOSYS;
    4106:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return mbox_set_enabled(&conf->mbox_rx, 1);
    410a:	e7ec      	b.n	40e6 <mbox_init+0x52>
    410c:	20002e80 	.word	0x20002e80
    4110:	000196ab 	.word	0x000196ab
    4114:	0001969b 	.word	0x0001969b

00004118 <open>:

	return rpmsg_send_nocopy(&rpmsg_ept->ep, msg, len);
}

static int open(const struct device *instance)
{
    4118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    411c:	b085      	sub	sp, #20
    411e:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
    4120:	6846      	ldr	r6, [r0, #4]
	struct backend_data_t *data = instance->data;
    4122:	6905      	ldr	r5, [r0, #16]
	struct ipc_rpmsg_instance *rpmsg_inst;
	struct rpmsg_device *rdev;
	int err;

	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    4124:	f505 7961 	add.w	r9, r5, #900	; 0x384
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4128:	2301      	movs	r3, #1
    412a:	e8d9 2fef 	ldaex	r2, [r9]
    412e:	2a00      	cmp	r2, #0
    4130:	d103      	bne.n	413a <open+0x22>
    4132:	e8c9 3fe1 	stlex	r1, r3, [r9]
    4136:	2900      	cmp	r1, #0
    4138:	d1f7      	bne.n	412a <open+0x12>
    413a:	d152      	bne.n	41e2 <open+0xca>
		return -EALREADY;
	}

	err = vr_shm_configure(&data->vr, conf);
    413c:	f505 78d8 	add.w	r8, r5, #432	; 0x1b0
    4140:	4631      	mov	r1, r6
    4142:	4640      	mov	r0, r8
    4144:	f015 fa56 	bl	195f4 <vr_shm_configure>
	if (err != 0) {
    4148:	4607      	mov	r7, r0
    414a:	b150      	cbz	r0, 4162 <open+0x4a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    414c:	2300      	movs	r3, #0
    414e:	e8d9 2fef 	ldaex	r2, [r9]
    4152:	e8c9 3fe1 	stlex	r1, r3, [r9]
    4156:	2900      	cmp	r1, #0
    4158:	d1f9      	bne.n	414e <open+0x36>
error:
	/* Back to the ready state */
	atomic_set(&data->state, STATE_READY);
	return err;

}
    415a:	4638      	mov	r0, r7
    415c:	b005      	add	sp, #20
    415e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->vr.notify_cb = virtio_notify_cb;
    4162:	4b21      	ldr	r3, [pc, #132]	; (41e8 <open+0xd0>)
    4164:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
	data->vr.priv = (void *) conf;
    4168:	f8c5 628c 	str.w	r6, [r5, #652]	; 0x28c
	err = ipc_static_vrings_init(&data->vr, conf->role);
    416c:	6831      	ldr	r1, [r6, #0]
    416e:	4640      	mov	r0, r8
    4170:	f000 f9a2 	bl	44b8 <ipc_static_vrings_init>
	if (err != 0) {
    4174:	4607      	mov	r7, r0
    4176:	2800      	cmp	r0, #0
    4178:	d1e8      	bne.n	414c <open+0x34>
	err = mbox_init(instance);
    417a:	4620      	mov	r0, r4
    417c:	f7ff ff8a 	bl	4094 <mbox_init>
	if (err != 0) {
    4180:	4607      	mov	r7, r0
    4182:	2800      	cmp	r0, #0
    4184:	d1e2      	bne.n	414c <open+0x34>
	rpmsg_inst->bound_cb = bound_cb;
    4186:	4b19      	ldr	r3, [pc, #100]	; (41ec <open+0xd4>)
    4188:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
	rpmsg_inst->cb = ept_cb;
    418c:	4b18      	ldr	r3, [pc, #96]	; (41f0 <open+0xd8>)
    418e:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    4192:	f8d5 3250 	ldr.w	r3, [r5, #592]	; 0x250
    4196:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    4198:	f8d5 1380 	ldr.w	r1, [r5, #896]	; 0x380
    419c:	4815      	ldr	r0, [pc, #84]	; (41f4 <open+0xdc>)
    419e:	9003      	str	r0, [sp, #12]
    41a0:	f8d5 01f8 	ldr.w	r0, [r5, #504]	; 0x1f8
    41a4:	9002      	str	r0, [sp, #8]
    41a6:	f8d5 01f0 	ldr.w	r0, [r5, #496]	; 0x1f0
    41aa:	9001      	str	r0, [sp, #4]
    41ac:	f8cd 8000 	str.w	r8, [sp]
    41b0:	4628      	mov	r0, r5
    41b2:	f000 f8cb 	bl	434c <ipc_rpmsg_init>
	if (err != 0) {
    41b6:	4607      	mov	r7, r0
    41b8:	2800      	cmp	r0, #0
    41ba:	d1c7      	bne.n	414c <open+0x34>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    41bc:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    41c0:	f011 fa00 	bl	155c4 <rpmsg_virtio_get_buffer_size>
    41c4:	f8c5 0388 	str.w	r0, [r5, #904]	; 0x388
	if (data->tx_buffer_size < 0) {
    41c8:	2800      	cmp	r0, #0
    41ca:	db07      	blt.n	41dc <open+0xc4>
    41cc:	2302      	movs	r3, #2
    41ce:	e8d9 2fef 	ldaex	r2, [r9]
    41d2:	e8c9 3fe1 	stlex	r1, r3, [r9]
    41d6:	2900      	cmp	r1, #0
    41d8:	d0bf      	beq.n	415a <open+0x42>
    41da:	e7f8      	b.n	41ce <open+0xb6>
		err = -EINVAL;
    41dc:	f06f 0715 	mvn.w	r7, #21
    41e0:	e7b4      	b.n	414c <open+0x34>
		return -EALREADY;
    41e2:	f06f 0777 	mvn.w	r7, #119	; 0x77
    41e6:	e7b8      	b.n	415a <open+0x42>
    41e8:	000192d9 	.word	0x000192d9
    41ec:	00004069 	.word	0x00004069
    41f0:	000195c7 	.word	0x000195c7
    41f4:	000194cf 	.word	0x000194cf

000041f8 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
    41f8:	b510      	push	{r4, lr}
    41fa:	b08c      	sub	sp, #48	; 0x30
	const struct backend_config_t *backend_config;
	const struct backend_config_t backend_configs[] = {
    41fc:	f10d 0c04 	add.w	ip, sp, #4
    4200:	4c0d      	ldr	r4, [pc, #52]	; (4238 <shared_memory_prepare+0x40>)
    4202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    4204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    420a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    420e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    4212:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		DT_INST_FOREACH_STATUS_OKAY(BACKEND_CONFIG_DEFINE)
	};

	for (backend_config = backend_configs;
    4216:	ac01      	add	r4, sp, #4
    4218:	ab0c      	add	r3, sp, #48	; 0x30
    421a:	429c      	cmp	r4, r3
    421c:	d302      	bcc.n	4224 <shared_memory_prepare+0x2c>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    421e:	2000      	movs	r0, #0
    4220:	b00c      	add	sp, #48	; 0x30
    4222:	bd10      	pop	{r4, pc}
		if (backend_config->role == ROLE_HOST) {
    4224:	6823      	ldr	r3, [r4, #0]
    4226:	b10b      	cbz	r3, 422c <shared_memory_prepare+0x34>
	     backend_config++) {
    4228:	342c      	adds	r4, #44	; 0x2c
    422a:	e7f5      	b.n	4218 <shared_memory_prepare+0x20>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    422c:	2204      	movs	r2, #4
    422e:	2100      	movs	r1, #0
    4230:	6860      	ldr	r0, [r4, #4]
    4232:	f015 ff39 	bl	1a0a8 <memset>
    4236:	e7f7      	b.n	4228 <shared_memory_prepare+0x30>
    4238:	00020684 	.word	0x00020684

0000423c <send>:
{
    423c:	b510      	push	{r4, lr}
    423e:	b082      	sub	sp, #8
    4240:	460c      	mov	r4, r1
	struct backend_data_t *data = instance->data;
    4242:	6901      	ldr	r1, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
    4244:	f501 7161 	add.w	r1, r1, #900	; 0x384
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4248:	e8d1 1faf 	lda	r1, [r1]
    424c:	2902      	cmp	r1, #2
    424e:	d10f      	bne.n	4270 <send+0x34>
	if (len == 0) {
    4250:	b18b      	cbz	r3, 4276 <send+0x3a>
	if (!rpmsg_ept) {
    4252:	b19c      	cbz	r4, 427c <send+0x40>
    4254:	2101      	movs	r1, #1
    4256:	9101      	str	r1, [sp, #4]
    4258:	9300      	str	r3, [sp, #0]
    425a:	4613      	mov	r3, r2
    425c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    425e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4260:	4620      	mov	r0, r4
    4262:	f011 f897 	bl	15394 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    4266:	4b08      	ldr	r3, [pc, #32]	; (4288 <send+0x4c>)
    4268:	4298      	cmp	r0, r3
    426a:	d00a      	beq.n	4282 <send+0x46>
}
    426c:	b002      	add	sp, #8
    426e:	bd10      	pop	{r4, pc}
		return -EBUSY;
    4270:	f06f 000f 	mvn.w	r0, #15
    4274:	e7fa      	b.n	426c <send+0x30>
		return -EBADMSG;
    4276:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    427a:	e7f7      	b.n	426c <send+0x30>
		return -ENOENT;
    427c:	f06f 0001 	mvn.w	r0, #1
    4280:	e7f4      	b.n	426c <send+0x30>
		return -ENOMEM;
    4282:	f06f 000b 	mvn.w	r0, #11
    4286:	e7f1      	b.n	426c <send+0x30>
    4288:	fffff82e 	.word	0xfffff82e

0000428c <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    428c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4290:	b085      	sub	sp, #20
    4292:	4607      	mov	r7, r0
    4294:	460e      	mov	r6, r1
    4296:	4691      	mov	r9, r2
	struct ipc_rpmsg_instance *instance;
	struct ipc_rpmsg_ept *ept;
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    4298:	f8d0 80a4 	ldr.w	r8, [r0, #164]	; 0xa4

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    429c:	2400      	movs	r4, #0
    429e:	e000      	b.n	42a2 <ns_bind_cb+0x16>
    42a0:	3401      	adds	r4, #1
    42a2:	2c01      	cmp	r4, #1
    42a4:	d828      	bhi.n	42f8 <ns_bind_cb+0x6c>
		ept = &instance->endpoint[i];
    42a6:	f5a8 71c4 	sub.w	r1, r8, #392	; 0x188
    42aa:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    42ae:	eb01 1505 	add.w	r5, r1, r5, lsl #4

		if (strcmp(name, ept->name) == 0) {
    42b2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    42b6:	011b      	lsls	r3, r3, #4
    42b8:	3340      	adds	r3, #64	; 0x40
    42ba:	4419      	add	r1, r3
    42bc:	4630      	mov	r0, r6
    42be:	f015 fe94 	bl	19fea <strcmp>
    42c2:	2800      	cmp	r0, #0
    42c4:	d1ec      	bne.n	42a0 <ns_bind_cb+0x14>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    42c6:	4b0e      	ldr	r3, [pc, #56]	; (4300 <ns_bind_cb+0x74>)
    42c8:	9302      	str	r3, [sp, #8]
    42ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
    42ce:	9301      	str	r3, [sp, #4]
    42d0:	f8cd 9000 	str.w	r9, [sp]
    42d4:	f04f 33ff 	mov.w	r3, #4294967295
    42d8:	4632      	mov	r2, r6
    42da:	4639      	mov	r1, r7
    42dc:	4628      	mov	r0, r5
    42de:	f011 f8bb 	bl	15458 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    42e2:	b948      	cbnz	r0, 42f8 <ns_bind_cb+0x6c>
				return;
			}

			ept->bound = true;
    42e4:	2101      	movs	r1, #1
    42e6:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
			if (instance->bound_cb) {
    42ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
    42ee:	2b00      	cmp	r3, #0
    42f0:	d0d6      	beq.n	42a0 <ns_bind_cb+0x14>
				instance->bound_cb(ept);
    42f2:	4628      	mov	r0, r5
    42f4:	4798      	blx	r3
    42f6:	e7d3      	b.n	42a0 <ns_bind_cb+0x14>
			}
		}
	}
}
    42f8:	b005      	add	sp, #20
    42fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    42fe:	bf00      	nop
    4300:	000196f1 	.word	0x000196f1

00004304 <ipc_rpmsg_register_ept>:
int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    4304:	b1c8      	cbz	r0, 433a <ipc_rpmsg_register_ept+0x36>
{
    4306:	b510      	push	{r4, lr}
    4308:	b084      	sub	sp, #16
    430a:	4614      	mov	r4, r2
    430c:	4603      	mov	r3, r0
	if (!instance || !ept) {
    430e:	b1ba      	cbz	r2, 4340 <ipc_rpmsg_register_ept+0x3c>
 * @return - RPMsg device pointed by RPMsg virtio device
 */
static inline struct rpmsg_device *
rpmsg_virtio_get_rpmsg_device(struct rpmsg_virtio_device *rvdev)
{
	return &rvdev->rdev;
    4310:	30e0      	adds	r0, #224	; 0xe0
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    4312:	2901      	cmp	r1, #1
    4314:	d002      	beq.n	431c <ipc_rpmsg_register_ept+0x18>
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
    4316:	2000      	movs	r0, #0
}
    4318:	b004      	add	sp, #16
    431a:	bd10      	pop	{r4, pc}
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    431c:	4a0a      	ldr	r2, [pc, #40]	; (4348 <ipc_rpmsg_register_ept+0x44>)
    431e:	9202      	str	r2, [sp, #8]
    4320:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
    4324:	9301      	str	r3, [sp, #4]
    4326:	f04f 33ff 	mov.w	r3, #4294967295
    432a:	9300      	str	r3, [sp, #0]
    432c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    4330:	4601      	mov	r1, r0
    4332:	4620      	mov	r0, r4
    4334:	f011 f890 	bl	15458 <rpmsg_create_ept>
    4338:	e7ee      	b.n	4318 <ipc_rpmsg_register_ept+0x14>
		return -EINVAL;
    433a:	f06f 0015 	mvn.w	r0, #21
}
    433e:	4770      	bx	lr
		return -EINVAL;
    4340:	f06f 0015 	mvn.w	r0, #21
    4344:	e7e8      	b.n	4318 <ipc_rpmsg_register_ept+0x14>
    4346:	bf00      	nop
    4348:	000196f1 	.word	0x000196f1

0000434c <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4350:	b084      	sub	sp, #16
    4352:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4354:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    4356:	b338      	cbz	r0, 43a8 <ipc_rpmsg_init+0x5c>
    4358:	461f      	mov	r7, r3
    435a:	4606      	mov	r6, r0
    435c:	b33d      	cbz	r5, 43ae <ipc_rpmsg_init+0x62>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
    435e:	b1bc      	cbz	r4, 4390 <ipc_rpmsg_init+0x44>
		bind_cb = ns_bind_cb;
	}

	if (role == RPMSG_HOST) {
    4360:	b9c1      	cbnz	r1, 4394 <ipc_rpmsg_init+0x48>
		struct rpmsg_virtio_config config;

		config.h2r_buf_size = (uint32_t) buffer_size;
    4362:	9202      	str	r2, [sp, #8]
		config.r2h_buf_size = (uint32_t) buffer_size;
    4364:	9203      	str	r2, [sp, #12]

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    4366:	f506 78c4 	add.w	r8, r6, #392	; 0x188
    436a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    436c:	4629      	mov	r1, r5
    436e:	4640      	mov	r0, r8
    4370:	f01a ff0e 	bl	1f190 <rpmsg_virtio_init_shm_pool>

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    4374:	ab02      	add	r3, sp, #8
    4376:	9301      	str	r3, [sp, #4]
    4378:	f8cd 8000 	str.w	r8, [sp]
    437c:	463b      	mov	r3, r7
    437e:	4622      	mov	r2, r4
    4380:	990a      	ldr	r1, [sp, #40]	; 0x28
    4382:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    4386:	f011 f937 	bl	155f8 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    438a:	b004      	add	sp, #16
    438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bind_cb = ns_bind_cb;
    4390:	4c08      	ldr	r4, [pc, #32]	; (43b4 <ipc_rpmsg_init+0x68>)
    4392:	e7e5      	b.n	4360 <ipc_rpmsg_init+0x14>
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    4394:	2300      	movs	r3, #0
    4396:	9300      	str	r3, [sp, #0]
    4398:	463b      	mov	r3, r7
    439a:	4622      	mov	r2, r4
    439c:	990a      	ldr	r1, [sp, #40]	; 0x28
    439e:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    43a2:	f011 fa2b 	bl	157fc <rpmsg_init_vdev>
    43a6:	e7f0      	b.n	438a <ipc_rpmsg_init+0x3e>
		return -EINVAL;
    43a8:	f06f 0015 	mvn.w	r0, #21
    43ac:	e7ed      	b.n	438a <ipc_rpmsg_init+0x3e>
    43ae:	f06f 0015 	mvn.w	r0, #21
    43b2:	e7ea      	b.n	438a <ipc_rpmsg_init+0x3e>
    43b4:	0000428d 	.word	0x0000428d

000043b8 <libmetal_setup>:
	.set_features = virtio_set_features,
	.notify = virtio_notify,
};

static int libmetal_setup(struct ipc_static_vrings *vr)
{
    43b8:	b510      	push	{r4, lr}
    43ba:	b084      	sub	sp, #16
    43bc:	4604      	mov	r4, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    43be:	4a11      	ldr	r2, [pc, #68]	; (4404 <libmetal_setup+0x4c>)
    43c0:	ab02      	add	r3, sp, #8
    43c2:	e892 0003 	ldmia.w	r2, {r0, r1}
    43c6:	e883 0003 	stmia.w	r3, {r0, r1}
	struct metal_device *device;
	int err;

	err = metal_init(&metal_params);
    43ca:	4618      	mov	r0, r3
    43cc:	f010 ff00 	bl	151d0 <metal_init>
	if (err != 0) {
    43d0:	b108      	cbz	r0, 43d6 <libmetal_setup+0x1e>
	if (vr->shm_io == NULL) {
		return err;
	}

	return 0;
}
    43d2:	b004      	add	sp, #16
    43d4:	bd10      	pop	{r4, pc}
	err = metal_register_generic_device(&vr->shm_device);
    43d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    43da:	f010 fed9 	bl	15190 <metal_register_generic_device>
	if (err != 0) {
    43de:	2800      	cmp	r0, #0
    43e0:	d1f7      	bne.n	43d2 <libmetal_setup+0x1a>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    43e2:	aa01      	add	r2, sp, #4
    43e4:	4908      	ldr	r1, [pc, #32]	; (4408 <libmetal_setup+0x50>)
    43e6:	4809      	ldr	r0, [pc, #36]	; (440c <libmetal_setup+0x54>)
    43e8:	f01a f88c 	bl	1e504 <metal_device_open>
	if (err != 0) {
    43ec:	2800      	cmp	r0, #0
    43ee:	d1f0      	bne.n	43d2 <libmetal_setup+0x1a>
	vr->shm_io = metal_device_io_region(device, 0);
    43f0:	9b01      	ldr	r3, [sp, #4]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
    43f2:	689a      	ldr	r2, [r3, #8]
		? &device->regions[index]
		: NULL);
    43f4:	b11a      	cbz	r2, 43fe <libmetal_setup+0x46>
    43f6:	330c      	adds	r3, #12
    43f8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (vr->shm_io == NULL) {
    43fc:	e7e9      	b.n	43d2 <libmetal_setup+0x1a>
    43fe:	2300      	movs	r3, #0
    4400:	e7fa      	b.n	43f8 <libmetal_setup+0x40>
    4402:	bf00      	nop
    4404:	000206b0 	.word	0x000206b0
    4408:	00020cfc 	.word	0x00020cfc
    440c:	00020d08 	.word	0x00020d08

00004410 <vq_setup>:

static int vq_setup(struct ipc_static_vrings *vr, unsigned int role)
{
    4410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4412:	4604      	mov	r4, r0
    4414:	460e      	mov	r6, r1
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    4416:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
    441a:	00ed      	lsls	r5, r5, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
    441c:	3534      	adds	r5, #52	; 0x34
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
    441e:	4628      	mov	r0, r5
    4420:	f01b fdd8 	bl	1ffd4 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
    4424:	4607      	mov	r7, r0
    4426:	b118      	cbz	r0, 4430 <vq_setup+0x20>
		memset(vqs, 0x00, vq_size);
    4428:	462a      	mov	r2, r5
    442a:	2100      	movs	r1, #0
    442c:	f015 fe3c 	bl	1a0a8 <memset>
    4430:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    4434:	b3c7      	cbz	r7, 44a8 <vq_setup+0x98>
		return -ENOMEM;
	}

	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    4436:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
		 num_desc_extra * sizeof(struct vq_desc_extra);
    443a:	00ed      	lsls	r5, r5, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
    443c:	3534      	adds	r5, #52	; 0x34
    443e:	4628      	mov	r0, r5
    4440:	f01b fdc8 	bl	1ffd4 <k_malloc>
	if (vqs) {
    4444:	4607      	mov	r7, r0
    4446:	b118      	cbz	r0, 4450 <vq_setup+0x40>
		memset(vqs, 0x00, vq_size);
    4448:	462a      	mov	r2, r5
    444a:	2100      	movs	r1, #0
    444c:	f015 fe2c 	bl	1a0a8 <memset>
    4450:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    4454:	b35f      	cbz	r7, 44ae <vq_setup+0x9e>
		return -ENOMEM;
	}

	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    4456:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    445a:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    445e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    4462:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    4466:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    446a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    446e:	2304      	movs	r3, #4
    4470:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    4474:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    4478:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    447c:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    4480:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    4484:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    4488:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    448c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    4490:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc

	vr->vdev.role = role;
    4494:	61a6      	str	r6, [r4, #24]

	vr->vdev.vrings_num = VRING_COUNT;
    4496:	2302      	movs	r3, #2
    4498:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    449a:	4b06      	ldr	r3, [pc, #24]	; (44b4 <vq_setup+0xa4>)
    449c:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    449e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    44a2:	62e3      	str	r3, [r4, #44]	; 0x2c

	return 0;
    44a4:	2000      	movs	r0, #0
}
    44a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
    44a8:	f06f 000b 	mvn.w	r0, #11
    44ac:	e7fb      	b.n	44a6 <vq_setup+0x96>
		return -ENOMEM;
    44ae:	f06f 000b 	mvn.w	r0, #11
    44b2:	e7f8      	b.n	44a6 <vq_setup+0x96>
    44b4:	00020d10 	.word	0x00020d10

000044b8 <ipc_static_vrings_init>:

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
	int err = 0;

	if (!vr) {
    44b8:	b310      	cbz	r0, 4500 <ipc_static_vrings_init+0x48>
{
    44ba:	b530      	push	{r4, r5, lr}
    44bc:	b085      	sub	sp, #20
    44be:	460d      	mov	r5, r1
    44c0:	4604      	mov	r4, r0
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
    44c2:	4b11      	ldr	r3, [pc, #68]	; (4508 <ipc_static_vrings_init+0x50>)
    44c4:	6343      	str	r3, [r0, #52]	; 0x34
	vr->shm_device.num_regions = 1;
    44c6:	2301      	movs	r3, #1
    44c8:	63c3      	str	r3, [r0, #60]	; 0x3c
	vr->shm_physmap[0] = vr->shm_addr;
    44ca:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    44ce:	6301      	str	r1, [r0, #48]	; 0x30

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    44d0:	2300      	movs	r3, #0
    44d2:	9302      	str	r3, [sp, #8]
    44d4:	9301      	str	r3, [sp, #4]
    44d6:	f04f 33ff 	mov.w	r3, #4294967295
    44da:	9300      	str	r3, [sp, #0]
    44dc:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    44e0:	f100 0230 	add.w	r2, r0, #48	; 0x30
    44e4:	3040      	adds	r0, #64	; 0x40
    44e6:	f01a f832 	bl	1e54e <metal_io_init>
		      vr->shm_physmap, vr->shm_size, -1, 0, NULL);

	err = libmetal_setup(vr);
    44ea:	4620      	mov	r0, r4
    44ec:	f7ff ff64 	bl	43b8 <libmetal_setup>
	if (err != 0) {
    44f0:	b108      	cbz	r0, 44f6 <ipc_static_vrings_init+0x3e>
		return err;
	}

	return vq_setup(vr, role);
}
    44f2:	b005      	add	sp, #20
    44f4:	bd30      	pop	{r4, r5, pc}
	return vq_setup(vr, role);
    44f6:	4629      	mov	r1, r5
    44f8:	4620      	mov	r0, r4
    44fa:	f7ff ff89 	bl	4410 <vq_setup>
    44fe:	e7f8      	b.n	44f2 <ipc_static_vrings_init+0x3a>
		return -EINVAL;
    4500:	f06f 0015 	mvn.w	r0, #21
}
    4504:	4770      	bx	lr
    4506:	bf00      	nop
    4508:	00020cfc 	.word	0x00020cfc

0000450c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    450c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    450e:	4b28      	ldr	r3, [pc, #160]	; (45b0 <pm_system_resume+0xa4>)
    4510:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4512:	f005 031f 	and.w	r3, r5, #31
    4516:	2201      	movs	r2, #1
    4518:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    451a:	0969      	lsrs	r1, r5, #5
    451c:	4b25      	ldr	r3, [pc, #148]	; (45b4 <pm_system_resume+0xa8>)
    451e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4522:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4524:	e8d3 1fef 	ldaex	r1, [r3]
    4528:	ea01 0400 	and.w	r4, r1, r0
    452c:	e8c3 4fe6 	stlex	r6, r4, [r3]
    4530:	2e00      	cmp	r6, #0
    4532:	d1f7      	bne.n	4524 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    4534:	420a      	tst	r2, r1
    4536:	d100      	bne.n	453a <pm_system_resume+0x2e>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    4538:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    453a:	481f      	ldr	r0, [pc, #124]	; (45b8 <pm_system_resume+0xac>)
    453c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4540:	0093      	lsls	r3, r2, #2
    4542:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
    4544:	4a1d      	ldr	r2, [pc, #116]	; (45bc <pm_system_resume+0xb0>)
    4546:	b172      	cbz	r2, 4566 <pm_system_resume+0x5a>
		pm_state_exit_post_ops(info->state, info->substate_id);
    4548:	7849      	ldrb	r1, [r1, #1]
    454a:	5cc0      	ldrb	r0, [r0, r3]
    454c:	f014 fd85 	bl	1905a <pm_state_exit_post_ops>
	__asm__ volatile(
    4550:	f04f 0320 	mov.w	r3, #32
    4554:	f3ef 8611 	mrs	r6, BASEPRI
    4558:	f383 8812 	msr	BASEPRI_MAX, r3
    455c:	f3bf 8f6f 	isb	sy
    4560:	4b17      	ldr	r3, [pc, #92]	; (45c0 <pm_system_resume+0xb4>)
    4562:	681c      	ldr	r4, [r3, #0]
    4564:	e010      	b.n	4588 <pm_system_resume+0x7c>
	__asm__ volatile(
    4566:	2300      	movs	r3, #0
    4568:	f383 8811 	msr	BASEPRI, r3
    456c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4570:	e7ee      	b.n	4550 <pm_system_resume+0x44>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4572:	4b0f      	ldr	r3, [pc, #60]	; (45b0 <pm_system_resume+0xa4>)
    4574:	7d1b      	ldrb	r3, [r3, #20]
    4576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    457a:	0099      	lsls	r1, r3, #2
    457c:	4b0e      	ldr	r3, [pc, #56]	; (45b8 <pm_system_resume+0xac>)
    457e:	5c58      	ldrb	r0, [r3, r1]
    4580:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    4582:	b10c      	cbz	r4, 4588 <pm_system_resume+0x7c>
	return node->next;
    4584:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4586:	b124      	cbz	r4, 4592 <pm_system_resume+0x86>
    4588:	b11c      	cbz	r4, 4592 <pm_system_resume+0x86>
			callback = notifier->state_exit;
    458a:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    458c:	2a00      	cmp	r2, #0
    458e:	d1f0      	bne.n	4572 <pm_system_resume+0x66>
    4590:	e7f7      	b.n	4582 <pm_system_resume+0x76>
	__asm__ volatile(
    4592:	f386 8811 	msr	BASEPRI, r6
    4596:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    459a:	4807      	ldr	r0, [pc, #28]	; (45b8 <pm_system_resume+0xac>)
    459c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    45a0:	00aa      	lsls	r2, r5, #2
    45a2:	1881      	adds	r1, r0, r2
    45a4:	2300      	movs	r3, #0
    45a6:	5083      	str	r3, [r0, r2]
    45a8:	604b      	str	r3, [r1, #4]
    45aa:	608b      	str	r3, [r1, #8]
}
    45ac:	e7c4      	b.n	4538 <pm_system_resume+0x2c>
    45ae:	bf00      	nop
    45b0:	2000294c 	.word	0x2000294c
    45b4:	20001994 	.word	0x20001994
    45b8:	20001988 	.word	0x20001988
    45bc:	0001905b 	.word	0x0001905b
    45c0:	20001974 	.word	0x20001974

000045c4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    45c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45c6:	4604      	mov	r4, r0
	uint8_t id = CURRENT_CPU;
    45c8:	4b4b      	ldr	r3, [pc, #300]	; (46f8 <pm_system_suspend+0x134>)
    45ca:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    45cc:	f04f 0320 	mov.w	r3, #32
    45d0:	f3ef 8611 	mrs	r6, BASEPRI
    45d4:	f383 8812 	msr	BASEPRI_MAX, r3
    45d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    45dc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    45e0:	4b46      	ldr	r3, [pc, #280]	; (46fc <pm_system_suspend+0x138>)
    45e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    45e6:	b34b      	cbz	r3, 463c <pm_system_suspend+0x78>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    45e8:	4b45      	ldr	r3, [pc, #276]	; (4700 <pm_system_suspend+0x13c>)
    45ea:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    45ee:	4f43      	ldr	r7, [pc, #268]	; (46fc <pm_system_suspend+0x138>)
    45f0:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    45f4:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    45f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    45fc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    4600:	2300      	movs	r3, #0
    4602:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    4606:	f386 8811 	msr	BASEPRI, r6
    460a:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    460e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4612:	4a3b      	ldr	r2, [pc, #236]	; (4700 <pm_system_suspend+0x13c>)
    4614:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    4618:	2b00      	cmp	r3, #0
    461a:	d06a      	beq.n	46f2 <pm_system_suspend+0x12e>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    461c:	f1b4 3fff 	cmp.w	r4, #4294967295
    4620:	d11b      	bne.n	465a <pm_system_suspend+0x96>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4622:	f012 f95b 	bl	168dc <k_sched_lock>
	__asm__ volatile(
    4626:	f04f 0320 	mov.w	r3, #32
    462a:	f3ef 8611 	mrs	r6, BASEPRI
    462e:	f383 8812 	msr	BASEPRI_MAX, r3
    4632:	f3bf 8f6f 	isb	sy
	return list->head;
    4636:	4b33      	ldr	r3, [pc, #204]	; (4704 <pm_system_suspend+0x140>)
    4638:	681c      	ldr	r4, [r3, #0]
    463a:	e02e      	b.n	469a <pm_system_suspend+0xd6>
		info = pm_policy_next_state(id, ticks);
    463c:	4601      	mov	r1, r0
    463e:	4628      	mov	r0, r5
    4640:	f000 f86a 	bl	4718 <pm_policy_next_state>
		if (info != NULL) {
    4644:	2800      	cmp	r0, #0
    4646:	d0de      	beq.n	4606 <pm_system_suspend+0x42>
			z_cpus_pm_state[id] = *info;
    4648:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    464c:	4a2c      	ldr	r2, [pc, #176]	; (4700 <pm_system_suspend+0x13c>)
    464e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4652:	c807      	ldmia	r0, {r0, r1, r2}
    4654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    4658:	e7d5      	b.n	4606 <pm_system_suspend+0x42>
		     k_us_to_ticks_ceil32(
    465a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    465e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4662:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    4664:	0c41      	lsrs	r1, r0, #17
    4666:	03c0      	lsls	r0, r0, #15
    4668:	4b27      	ldr	r3, [pc, #156]	; (4708 <pm_system_suspend+0x144>)
    466a:	18c0      	adds	r0, r0, r3
    466c:	4a27      	ldr	r2, [pc, #156]	; (470c <pm_system_suspend+0x148>)
    466e:	f04f 0300 	mov.w	r3, #0
    4672:	f141 0100 	adc.w	r1, r1, #0
    4676:	f7fc f83d 	bl	6f4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    467a:	2101      	movs	r1, #1
    467c:	1a20      	subs	r0, r4, r0
    467e:	f01b fb5f 	bl	1fd40 <z_set_timeout_expiry>
    4682:	e7ce      	b.n	4622 <pm_system_suspend+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4684:	4b1c      	ldr	r3, [pc, #112]	; (46f8 <pm_system_suspend+0x134>)
    4686:	7d1b      	ldrb	r3, [r3, #20]
    4688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    468c:	491c      	ldr	r1, [pc, #112]	; (4700 <pm_system_suspend+0x13c>)
    468e:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    4692:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    4694:	b10c      	cbz	r4, 469a <pm_system_suspend+0xd6>
	return node->next;
    4696:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4698:	b124      	cbz	r4, 46a4 <pm_system_suspend+0xe0>
    469a:	b11c      	cbz	r4, 46a4 <pm_system_suspend+0xe0>
			callback = notifier->state_entry;
    469c:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    469e:	2a00      	cmp	r2, #0
    46a0:	d1f0      	bne.n	4684 <pm_system_suspend+0xc0>
    46a2:	e7f7      	b.n	4694 <pm_system_suspend+0xd0>
	__asm__ volatile(
    46a4:	f386 8811 	msr	BASEPRI, r6
    46a8:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    46ac:	f005 031f 	and.w	r3, r5, #31
    46b0:	2101      	movs	r1, #1
    46b2:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    46b4:	096b      	lsrs	r3, r5, #5
    46b6:	4a16      	ldr	r2, [pc, #88]	; (4710 <pm_system_suspend+0x14c>)
    46b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46bc:	e8d3 2fef 	ldaex	r2, [r3]
    46c0:	430a      	orrs	r2, r1
    46c2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    46c6:	2800      	cmp	r0, #0
    46c8:	d1f8      	bne.n	46bc <pm_system_suspend+0xf8>
	if (pm_state_set != NULL) {
    46ca:	4b12      	ldr	r3, [pc, #72]	; (4714 <pm_system_suspend+0x150>)
    46cc:	b15b      	cbz	r3, 46e6 <pm_system_suspend+0x122>
		pm_state_set(info->state, info->substate_id);
    46ce:	4a0c      	ldr	r2, [pc, #48]	; (4700 <pm_system_suspend+0x13c>)
    46d0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    46d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    46d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    46dc:	7859      	ldrb	r1, [r3, #1]
    46de:	f812 0025 	ldrb.w	r0, [r2, r5, lsl #2]
    46e2:	f7fe fc19 	bl	2f18 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    46e6:	f7ff ff11 	bl	450c <pm_system_resume>
	k_sched_unlock();
    46ea:	f012 fb19 	bl	16d20 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    46ee:	2001      	movs	r0, #1
}
    46f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    46f2:	2000      	movs	r0, #0
    46f4:	e7fc      	b.n	46f0 <pm_system_suspend+0x12c>
    46f6:	bf00      	nop
    46f8:	2000294c 	.word	0x2000294c
    46fc:	2000197c 	.word	0x2000197c
    4700:	20001988 	.word	0x20001988
    4704:	20001974 	.word	0x20001974
    4708:	000f423f 	.word	0x000f423f
    470c:	000f4240 	.word	0x000f4240
    4710:	20001994 	.word	0x20001994
    4714:	00002f19 	.word	0x00002f19

00004718 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    4718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    471c:	b082      	sub	sp, #8
    471e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4720:	a901      	add	r1, sp, #4
    4722:	f000 f845 	bl	47b0 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4726:	1e44      	subs	r4, r0, #1
    4728:	b224      	sxth	r4, r4
    472a:	e007      	b.n	473c <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    472c:	f1b6 3fff 	cmp.w	r6, #4294967295
    4730:	d033      	beq.n	479a <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    4732:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    4734:	42b0      	cmp	r0, r6
    4736:	d930      	bls.n	479a <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4738:	3c01      	subs	r4, #1
    473a:	b224      	sxth	r4, r4
    473c:	2c00      	cmp	r4, #0
    473e:	db2b      	blt.n	4798 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    4740:	9b01      	ldr	r3, [sp, #4]
    4742:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4746:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    474a:	7869      	ldrb	r1, [r5, #1]
    474c:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    4750:	f014 ffee 	bl	19730 <pm_policy_state_lock_is_active>
    4754:	2800      	cmp	r0, #0
    4756:	d1ef      	bne.n	4738 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    4758:	6868      	ldr	r0, [r5, #4]
    475a:	0c41      	lsrs	r1, r0, #17
    475c:	03c0      	lsls	r0, r0, #15
    475e:	4f11      	ldr	r7, [pc, #68]	; (47a4 <pm_policy_next_state+0x8c>)
    4760:	19c0      	adds	r0, r0, r7
    4762:	4a11      	ldr	r2, [pc, #68]	; (47a8 <pm_policy_next_state+0x90>)
    4764:	f04f 0300 	mov.w	r3, #0
    4768:	f141 0100 	adc.w	r1, r1, #0
    476c:	f7fb ffc2 	bl	6f4 <__aeabi_uldivmod>
    4770:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    4772:	68ab      	ldr	r3, [r5, #8]
    4774:	0c59      	lsrs	r1, r3, #17
    4776:	03db      	lsls	r3, r3, #15
    4778:	19d8      	adds	r0, r3, r7
    477a:	4a0b      	ldr	r2, [pc, #44]	; (47a8 <pm_policy_next_state+0x90>)
    477c:	f04f 0300 	mov.w	r3, #0
    4780:	f141 0100 	adc.w	r1, r1, #0
    4784:	f7fb ffb6 	bl	6f4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4788:	4b08      	ldr	r3, [pc, #32]	; (47ac <pm_policy_next_state+0x94>)
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4790:	d0cc      	beq.n	472c <pm_policy_next_state+0x14>
    4792:	4283      	cmp	r3, r0
    4794:	d8ca      	bhi.n	472c <pm_policy_next_state+0x14>
    4796:	e7cf      	b.n	4738 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    4798:	2500      	movs	r5, #0
}
    479a:	4628      	mov	r0, r5
    479c:	b002      	add	sp, #8
    479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47a2:	bf00      	nop
    47a4:	000f423f 	.word	0x000f423f
    47a8:	000f4240 	.word	0x000f4240
    47ac:	20000298 	.word	0x20000298

000047b0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    47b0:	b908      	cbnz	r0, 47b6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    47b2:	4b02      	ldr	r3, [pc, #8]	; (47bc <pm_state_cpu_get_all+0xc>)
    47b4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    47b6:	2000      	movs	r0, #0
    47b8:	4770      	bx	lr
    47ba:	bf00      	nop
    47bc:	00020d38 	.word	0x00020d38

000047c0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    47c0:	b470      	push	{r4, r5, r6}
    47c2:	b08d      	sub	sp, #52	; 0x34
    47c4:	4606      	mov	r6, r0
    47c6:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
    47c8:	f10d 0c04 	add.w	ip, sp, #4
    47cc:	4c2b      	ldr	r4, [pc, #172]	; (487c <tc_aes128_set_encrypt_key+0xbc>)
    47ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    47d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    47d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    47d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    47da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    47de:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    47e2:	2e00      	cmp	r6, #0
    47e4:	d045      	beq.n	4872 <tc_aes128_set_encrypt_key+0xb2>
    47e6:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    47e8:	2d00      	cmp	r5, #0
    47ea:	d044      	beq.n	4876 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
    47ec:	2300      	movs	r3, #0
    47ee:	e00f      	b.n	4810 <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    47f0:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
    47f4:	eb05 0183 	add.w	r1, r5, r3, lsl #2
    47f8:	784a      	ldrb	r2, [r1, #1]
    47fa:	0412      	lsls	r2, r2, #16
    47fc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    4800:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    4802:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    4806:	78c9      	ldrb	r1, [r1, #3]
    4808:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    480a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
    480e:	3301      	adds	r3, #1
    4810:	2b03      	cmp	r3, #3
    4812:	d9ed      	bls.n	47f0 <tc_aes128_set_encrypt_key+0x30>
    4814:	e006      	b.n	4824 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    4816:	1f19      	subs	r1, r3, #4
    4818:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    481c:	404a      	eors	r2, r1
    481e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    4822:	3301      	adds	r3, #1
    4824:	2b2b      	cmp	r3, #43	; 0x2b
    4826:	d820      	bhi.n	486a <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
    4828:	1e5a      	subs	r2, r3, #1
    482a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
    482e:	f013 0f03 	tst.w	r3, #3
    4832:	d1f0      	bne.n	4816 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
    4834:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4838:	0e11      	lsrs	r1, r2, #24
    483a:	4c11      	ldr	r4, [pc, #68]	; (4880 <tc_aes128_set_encrypt_key+0xc0>)
    483c:	5c65      	ldrb	r5, [r4, r1]
    483e:	f3c2 4107 	ubfx	r1, r2, #16, #8
    4842:	5c61      	ldrb	r1, [r4, r1]
    4844:	0409      	lsls	r1, r1, #16
    4846:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    484a:	f3c2 2507 	ubfx	r5, r2, #8, #8
    484e:	5d65      	ldrb	r5, [r4, r5]
    4850:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    4854:	b2d2      	uxtb	r2, r2
    4856:	5ca2      	ldrb	r2, [r4, r2]
    4858:	4311      	orrs	r1, r2
    485a:	f023 0203 	bic.w	r2, r3, #3
    485e:	ac0c      	add	r4, sp, #48	; 0x30
    4860:	4422      	add	r2, r4
    4862:	f852 2c2c 	ldr.w	r2, [r2, #-44]
    4866:	404a      	eors	r2, r1
    4868:	e7d5      	b.n	4816 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
    486a:	2001      	movs	r0, #1
}
    486c:	b00d      	add	sp, #52	; 0x34
    486e:	bc70      	pop	{r4, r5, r6}
    4870:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    4872:	2000      	movs	r0, #0
    4874:	e7fa      	b.n	486c <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
    4876:	2000      	movs	r0, #0
    4878:	e7f8      	b.n	486c <tc_aes128_set_encrypt_key+0xac>
    487a:	bf00      	nop
    487c:	000206b8 	.word	0x000206b8
    4880:	00020d38 	.word	0x00020d38

00004884 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    4884:	2800      	cmp	r0, #0
    4886:	f000 8366 	beq.w	4f56 <tc_aes_encrypt+0x6d2>
{
    488a:	b5f0      	push	{r4, r5, r6, r7, lr}
    488c:	b089      	sub	sp, #36	; 0x24
    488e:	4615      	mov	r5, r2
    4890:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    4892:	2900      	cmp	r1, #0
    4894:	f000 8361 	beq.w	4f5a <tc_aes_encrypt+0x6d6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    4898:	2a00      	cmp	r2, #0
    489a:	f000 8360 	beq.w	4f5e <tc_aes_encrypt+0x6da>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    489e:	2310      	movs	r3, #16
    48a0:	460a      	mov	r2, r1
    48a2:	4619      	mov	r1, r3
    48a4:	eb0d 0003 	add.w	r0, sp, r3
    48a8:	f014 ff44 	bl	19734 <_copy>
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    48ac:	682b      	ldr	r3, [r5, #0]
    48ae:	f89d 2010 	ldrb.w	r2, [sp, #16]
    48b2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    48b6:	f88d 2010 	strb.w	r2, [sp, #16]
    48ba:	f3c3 4207 	ubfx	r2, r3, #16, #8
    48be:	f89d 1011 	ldrb.w	r1, [sp, #17]
    48c2:	404a      	eors	r2, r1
    48c4:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    48c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    48cc:	f89d 1012 	ldrb.w	r1, [sp, #18]
    48d0:	404a      	eors	r2, r1
    48d2:	f88d 2012 	strb.w	r2, [sp, #18]
    48d6:	b2db      	uxtb	r3, r3
    48d8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    48dc:	4053      	eors	r3, r2
    48de:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    48e2:	686b      	ldr	r3, [r5, #4]
    48e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    48e8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    48ec:	f88d 2014 	strb.w	r2, [sp, #20]
    48f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
    48f4:	f89d 1015 	ldrb.w	r1, [sp, #21]
    48f8:	404a      	eors	r2, r1
    48fa:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    48fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4902:	f89d 1016 	ldrb.w	r1, [sp, #22]
    4906:	404a      	eors	r2, r1
    4908:	f88d 2016 	strb.w	r2, [sp, #22]
    490c:	b2db      	uxtb	r3, r3
    490e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    4912:	4053      	eors	r3, r2
    4914:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    4918:	68ab      	ldr	r3, [r5, #8]
    491a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    491e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    4922:	f88d 2018 	strb.w	r2, [sp, #24]
    4926:	f3c3 4207 	ubfx	r2, r3, #16, #8
    492a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    492e:	404a      	eors	r2, r1
    4930:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    4934:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4938:	f89d 101a 	ldrb.w	r1, [sp, #26]
    493c:	404a      	eors	r2, r1
    493e:	f88d 201a 	strb.w	r2, [sp, #26]
    4942:	b2db      	uxtb	r3, r3
    4944:	f89d 201b 	ldrb.w	r2, [sp, #27]
    4948:	4053      	eors	r3, r2
    494a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    494e:	68eb      	ldr	r3, [r5, #12]
    4950:	f89d 201c 	ldrb.w	r2, [sp, #28]
    4954:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    4958:	f88d 201c 	strb.w	r2, [sp, #28]
    495c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4960:	f89d 101d 	ldrb.w	r1, [sp, #29]
    4964:	404a      	eors	r2, r1
    4966:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    496a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    496e:	f89d 101e 	ldrb.w	r1, [sp, #30]
    4972:	404a      	eors	r2, r1
    4974:	f88d 201e 	strb.w	r2, [sp, #30]
    4978:	b2db      	uxtb	r3, r3
    497a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    497e:	4053      	eors	r3, r2
    4980:	f88d 301f 	strb.w	r3, [sp, #31]
	add_round_key(state, s->words);

	for (i = 0; i < (Nr - 1); ++i) {
    4984:	2400      	movs	r4, #0
}
    4986:	e211      	b.n	4dac <tc_aes_encrypt+0x528>
		s[i] = sbox[s[i]];
    4988:	a904      	add	r1, sp, #16
    498a:	5cc8      	ldrb	r0, [r1, r3]
    498c:	4a02      	ldr	r2, [pc, #8]	; (4998 <tc_aes_encrypt+0x114>)
    498e:	5c10      	ldrb	r0, [r2, r0]
    4990:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    4992:	3301      	adds	r3, #1
    4994:	e002      	b.n	499c <tc_aes_encrypt+0x118>
    4996:	bf00      	nop
    4998:	00020d38 	.word	0x00020d38
    499c:	2b0f      	cmp	r3, #15
    499e:	d9f3      	bls.n	4988 <tc_aes_encrypt+0x104>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    49a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    49a4:	f88d 3000 	strb.w	r3, [sp]
    49a8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    49ac:	f88d 3001 	strb.w	r3, [sp, #1]
    49b0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    49b4:	f88d 3002 	strb.w	r3, [sp, #2]
    49b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49bc:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    49c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    49c4:	f88d 3004 	strb.w	r3, [sp, #4]
    49c8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    49cc:	f88d 3005 	strb.w	r3, [sp, #5]
    49d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
    49d4:	f88d 3006 	strb.w	r3, [sp, #6]
    49d8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    49dc:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    49e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    49e4:	f88d 3008 	strb.w	r3, [sp, #8]
    49e8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    49ec:	f88d 3009 	strb.w	r3, [sp, #9]
    49f0:	f89d 3012 	ldrb.w	r3, [sp, #18]
    49f4:	f88d 300a 	strb.w	r3, [sp, #10]
    49f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    49fc:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    4a00:	f89d 301c 	ldrb.w	r3, [sp, #28]
    4a04:	f88d 300c 	strb.w	r3, [sp, #12]
    4a08:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4a0c:	f88d 300d 	strb.w	r3, [sp, #13]
    4a10:	f89d 3016 	ldrb.w	r3, [sp, #22]
    4a14:	f88d 300e 	strb.w	r3, [sp, #14]
    4a18:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4a1c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4a20:	2310      	movs	r3, #16
    4a22:	466a      	mov	r2, sp
    4a24:	4619      	mov	r1, r3
    4a26:	eb0d 0003 	add.w	r0, sp, r3
    4a2a:	f014 fe83 	bl	19734 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    4a2e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4a32:	f014 fe90 	bl	19756 <_double_byte>
    4a36:	4607      	mov	r7, r0
    4a38:	f89d 0011 	ldrb.w	r0, [sp, #17]
    4a3c:	f014 fe8b 	bl	19756 <_double_byte>
    4a40:	4601      	mov	r1, r0
    4a42:	f89d 0011 	ldrb.w	r0, [sp, #17]
    4a46:	f89d 2012 	ldrb.w	r2, [sp, #18]
    4a4a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    4a4e:	4041      	eors	r1, r0
    4a50:	404f      	eors	r7, r1
    4a52:	407a      	eors	r2, r7
    4a54:	4053      	eors	r3, r2
    4a56:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    4a5a:	f89d 7010 	ldrb.w	r7, [sp, #16]
    4a5e:	f014 fe7a 	bl	19756 <_double_byte>
    4a62:	4047      	eors	r7, r0
    4a64:	b2ff      	uxtb	r7, r7
    4a66:	f89d 0012 	ldrb.w	r0, [sp, #18]
    4a6a:	f014 fe74 	bl	19756 <_double_byte>
    4a6e:	4602      	mov	r2, r0
    4a70:	f89d 0012 	ldrb.w	r0, [sp, #18]
    4a74:	f89d 3013 	ldrb.w	r3, [sp, #19]
    4a78:	4042      	eors	r2, r0
    4a7a:	4057      	eors	r7, r2
    4a7c:	405f      	eors	r7, r3
    4a7e:	f88d 7001 	strb.w	r7, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    4a82:	f89d 7010 	ldrb.w	r7, [sp, #16]
    4a86:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4a8a:	405f      	eors	r7, r3
    4a8c:	f014 fe63 	bl	19756 <_double_byte>
    4a90:	4047      	eors	r7, r0
    4a92:	b2ff      	uxtb	r7, r7
    4a94:	f89d 0013 	ldrb.w	r0, [sp, #19]
    4a98:	f014 fe5d 	bl	19756 <_double_byte>
    4a9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    4aa0:	4058      	eors	r0, r3
    4aa2:	4047      	eors	r7, r0
    4aa4:	f88d 7002 	strb.w	r7, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4aa8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4aac:	f014 fe53 	bl	19756 <_double_byte>
    4ab0:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4ab4:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4ab8:	f89d 7012 	ldrb.w	r7, [sp, #18]
    4abc:	4050      	eors	r0, r2
    4abe:	4043      	eors	r3, r0
    4ac0:	405f      	eors	r7, r3
    4ac2:	b2ff      	uxtb	r7, r7
    4ac4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    4ac8:	f014 fe45 	bl	19756 <_double_byte>
    4acc:	4047      	eors	r7, r0
    4ace:	f88d 7003 	strb.w	r7, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    4ad2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    4ad6:	f014 fe3e 	bl	19756 <_double_byte>
    4ada:	4607      	mov	r7, r0
    4adc:	f89d 0015 	ldrb.w	r0, [sp, #21]
    4ae0:	f014 fe39 	bl	19756 <_double_byte>
    4ae4:	4601      	mov	r1, r0
    4ae6:	f89d 0015 	ldrb.w	r0, [sp, #21]
    4aea:	f89d 2016 	ldrb.w	r2, [sp, #22]
    4aee:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4af2:	4041      	eors	r1, r0
    4af4:	404f      	eors	r7, r1
    4af6:	407a      	eors	r2, r7
    4af8:	4053      	eors	r3, r2
    4afa:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    4afe:	f89d 7014 	ldrb.w	r7, [sp, #20]
    4b02:	f014 fe28 	bl	19756 <_double_byte>
    4b06:	4047      	eors	r7, r0
    4b08:	b2ff      	uxtb	r7, r7
    4b0a:	f89d 0016 	ldrb.w	r0, [sp, #22]
    4b0e:	f014 fe22 	bl	19756 <_double_byte>
    4b12:	4602      	mov	r2, r0
    4b14:	f89d 0016 	ldrb.w	r0, [sp, #22]
    4b18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4b1c:	4042      	eors	r2, r0
    4b1e:	4057      	eors	r7, r2
    4b20:	405f      	eors	r7, r3
    4b22:	f88d 7005 	strb.w	r7, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    4b26:	f89d 7014 	ldrb.w	r7, [sp, #20]
    4b2a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4b2e:	405f      	eors	r7, r3
    4b30:	f014 fe11 	bl	19756 <_double_byte>
    4b34:	4047      	eors	r7, r0
    4b36:	b2ff      	uxtb	r7, r7
    4b38:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4b3c:	f014 fe0b 	bl	19756 <_double_byte>
    4b40:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4b44:	4058      	eors	r0, r3
    4b46:	4047      	eors	r7, r0
    4b48:	f88d 7006 	strb.w	r7, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4b4c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    4b50:	f014 fe01 	bl	19756 <_double_byte>
    4b54:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4b58:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4b5c:	f89d 7016 	ldrb.w	r7, [sp, #22]
    4b60:	4050      	eors	r0, r2
    4b62:	4043      	eors	r3, r0
    4b64:	405f      	eors	r7, r3
    4b66:	b2ff      	uxtb	r7, r7
    4b68:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4b6c:	f014 fdf3 	bl	19756 <_double_byte>
    4b70:	4047      	eors	r7, r0
    4b72:	f88d 7007 	strb.w	r7, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    4b76:	f89d 0018 	ldrb.w	r0, [sp, #24]
    4b7a:	f014 fdec 	bl	19756 <_double_byte>
    4b7e:	4607      	mov	r7, r0
    4b80:	f89d 0019 	ldrb.w	r0, [sp, #25]
    4b84:	f014 fde7 	bl	19756 <_double_byte>
    4b88:	4601      	mov	r1, r0
    4b8a:	f89d 0019 	ldrb.w	r0, [sp, #25]
    4b8e:	f89d 201a 	ldrb.w	r2, [sp, #26]
    4b92:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4b96:	4041      	eors	r1, r0
    4b98:	404f      	eors	r7, r1
    4b9a:	407a      	eors	r2, r7
    4b9c:	4053      	eors	r3, r2
    4b9e:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    4ba2:	f89d 7018 	ldrb.w	r7, [sp, #24]
    4ba6:	f014 fdd6 	bl	19756 <_double_byte>
    4baa:	4047      	eors	r7, r0
    4bac:	b2ff      	uxtb	r7, r7
    4bae:	f89d 001a 	ldrb.w	r0, [sp, #26]
    4bb2:	f014 fdd0 	bl	19756 <_double_byte>
    4bb6:	4602      	mov	r2, r0
    4bb8:	f89d 001a 	ldrb.w	r0, [sp, #26]
    4bbc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4bc0:	4042      	eors	r2, r0
    4bc2:	4057      	eors	r7, r2
    4bc4:	405f      	eors	r7, r3
    4bc6:	f88d 7009 	strb.w	r7, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    4bca:	f89d 7018 	ldrb.w	r7, [sp, #24]
    4bce:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4bd2:	405f      	eors	r7, r3
    4bd4:	f014 fdbf 	bl	19756 <_double_byte>
    4bd8:	4047      	eors	r7, r0
    4bda:	b2ff      	uxtb	r7, r7
    4bdc:	f89d 001b 	ldrb.w	r0, [sp, #27]
    4be0:	f014 fdb9 	bl	19756 <_double_byte>
    4be4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4be8:	4058      	eors	r0, r3
    4bea:	4047      	eors	r7, r0
    4bec:	f88d 700a 	strb.w	r7, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4bf0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    4bf4:	f014 fdaf 	bl	19756 <_double_byte>
    4bf8:	f89d 2018 	ldrb.w	r2, [sp, #24]
    4bfc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4c00:	f89d 701a 	ldrb.w	r7, [sp, #26]
    4c04:	4050      	eors	r0, r2
    4c06:	4043      	eors	r3, r0
    4c08:	405f      	eors	r7, r3
    4c0a:	b2ff      	uxtb	r7, r7
    4c0c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    4c10:	f014 fda1 	bl	19756 <_double_byte>
    4c14:	4047      	eors	r7, r0
    4c16:	f88d 700b 	strb.w	r7, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    4c1a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    4c1e:	f014 fd9a 	bl	19756 <_double_byte>
    4c22:	4607      	mov	r7, r0
    4c24:	f89d 001d 	ldrb.w	r0, [sp, #29]
    4c28:	f014 fd95 	bl	19756 <_double_byte>
    4c2c:	4601      	mov	r1, r0
    4c2e:	f89d 001d 	ldrb.w	r0, [sp, #29]
    4c32:	f89d 201e 	ldrb.w	r2, [sp, #30]
    4c36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c3a:	4041      	eors	r1, r0
    4c3c:	404f      	eors	r7, r1
    4c3e:	407a      	eors	r2, r7
    4c40:	4053      	eors	r3, r2
    4c42:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    4c46:	f89d 701c 	ldrb.w	r7, [sp, #28]
    4c4a:	f014 fd84 	bl	19756 <_double_byte>
    4c4e:	4047      	eors	r7, r0
    4c50:	b2ff      	uxtb	r7, r7
    4c52:	f89d 001e 	ldrb.w	r0, [sp, #30]
    4c56:	f014 fd7e 	bl	19756 <_double_byte>
    4c5a:	4602      	mov	r2, r0
    4c5c:	f89d 001e 	ldrb.w	r0, [sp, #30]
    4c60:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c64:	4042      	eors	r2, r0
    4c66:	4057      	eors	r7, r2
    4c68:	405f      	eors	r7, r3
    4c6a:	f88d 700d 	strb.w	r7, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    4c6e:	f89d 701c 	ldrb.w	r7, [sp, #28]
    4c72:	f89d 301d 	ldrb.w	r3, [sp, #29]
    4c76:	405f      	eors	r7, r3
    4c78:	f014 fd6d 	bl	19756 <_double_byte>
    4c7c:	4047      	eors	r7, r0
    4c7e:	b2ff      	uxtb	r7, r7
    4c80:	f89d 001f 	ldrb.w	r0, [sp, #31]
    4c84:	f014 fd67 	bl	19756 <_double_byte>
    4c88:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c8c:	4058      	eors	r0, r3
    4c8e:	4047      	eors	r7, r0
    4c90:	f88d 700e 	strb.w	r7, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4c94:	f89d 001c 	ldrb.w	r0, [sp, #28]
    4c98:	f014 fd5d 	bl	19756 <_double_byte>
    4c9c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    4ca0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    4ca4:	f89d 701e 	ldrb.w	r7, [sp, #30]
    4ca8:	4050      	eors	r0, r2
    4caa:	4043      	eors	r3, r0
    4cac:	405f      	eors	r7, r3
    4cae:	b2ff      	uxtb	r7, r7
    4cb0:	f89d 001f 	ldrb.w	r0, [sp, #31]
    4cb4:	f014 fd4f 	bl	19756 <_double_byte>
    4cb8:	4047      	eors	r7, r0
    4cba:	f88d 700f 	strb.w	r7, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4cbe:	2310      	movs	r3, #16
    4cc0:	466a      	mov	r2, sp
    4cc2:	4619      	mov	r1, r3
    4cc4:	eb0d 0003 	add.w	r0, sp, r3
    4cc8:	f014 fd34 	bl	19734 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    4ccc:	3401      	adds	r4, #1
    4cce:	0123      	lsls	r3, r4, #4
    4cd0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    4cd4:	58eb      	ldr	r3, [r5, r3]
    4cd6:	f89d 1010 	ldrb.w	r1, [sp, #16]
    4cda:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    4cde:	f88d 1010 	strb.w	r1, [sp, #16]
    4ce2:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4ce6:	f89d 0011 	ldrb.w	r0, [sp, #17]
    4cea:	4041      	eors	r1, r0
    4cec:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    4cf0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4cf4:	f89d 0012 	ldrb.w	r0, [sp, #18]
    4cf8:	4041      	eors	r1, r0
    4cfa:	f88d 1012 	strb.w	r1, [sp, #18]
    4cfe:	b2db      	uxtb	r3, r3
    4d00:	f89d 1013 	ldrb.w	r1, [sp, #19]
    4d04:	404b      	eors	r3, r1
    4d06:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    4d0a:	6853      	ldr	r3, [r2, #4]
    4d0c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    4d10:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    4d14:	f88d 1014 	strb.w	r1, [sp, #20]
    4d18:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4d1c:	f89d 0015 	ldrb.w	r0, [sp, #21]
    4d20:	4041      	eors	r1, r0
    4d22:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    4d26:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4d2a:	f89d 0016 	ldrb.w	r0, [sp, #22]
    4d2e:	4041      	eors	r1, r0
    4d30:	f88d 1016 	strb.w	r1, [sp, #22]
    4d34:	b2db      	uxtb	r3, r3
    4d36:	f89d 1017 	ldrb.w	r1, [sp, #23]
    4d3a:	404b      	eors	r3, r1
    4d3c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    4d40:	6893      	ldr	r3, [r2, #8]
    4d42:	f89d 1018 	ldrb.w	r1, [sp, #24]
    4d46:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    4d4a:	f88d 1018 	strb.w	r1, [sp, #24]
    4d4e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4d52:	f89d 0019 	ldrb.w	r0, [sp, #25]
    4d56:	4041      	eors	r1, r0
    4d58:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    4d5c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4d60:	f89d 001a 	ldrb.w	r0, [sp, #26]
    4d64:	4041      	eors	r1, r0
    4d66:	f88d 101a 	strb.w	r1, [sp, #26]
    4d6a:	b2db      	uxtb	r3, r3
    4d6c:	f89d 101b 	ldrb.w	r1, [sp, #27]
    4d70:	404b      	eors	r3, r1
    4d72:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    4d76:	68d3      	ldr	r3, [r2, #12]
    4d78:	f89d 201c 	ldrb.w	r2, [sp, #28]
    4d7c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    4d80:	f88d 201c 	strb.w	r2, [sp, #28]
    4d84:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4d88:	f89d 101d 	ldrb.w	r1, [sp, #29]
    4d8c:	404a      	eors	r2, r1
    4d8e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    4d92:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4d96:	f89d 101e 	ldrb.w	r1, [sp, #30]
    4d9a:	404a      	eors	r2, r1
    4d9c:	f88d 201e 	strb.w	r2, [sp, #30]
    4da0:	b2db      	uxtb	r3, r3
    4da2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    4da6:	4053      	eors	r3, r2
    4da8:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    4dac:	2c08      	cmp	r4, #8
    4dae:	d801      	bhi.n	4db4 <tc_aes_encrypt+0x530>
	for (i = 0; i < (Nb * Nk); ++i) {
    4db0:	2300      	movs	r3, #0
    4db2:	e5f3      	b.n	499c <tc_aes_encrypt+0x118>
    4db4:	2300      	movs	r3, #0
    4db6:	e005      	b.n	4dc4 <tc_aes_encrypt+0x540>
		s[i] = sbox[s[i]];
    4db8:	aa04      	add	r2, sp, #16
    4dba:	5cd1      	ldrb	r1, [r2, r3]
    4dbc:	4869      	ldr	r0, [pc, #420]	; (4f64 <tc_aes_encrypt+0x6e0>)
    4dbe:	5c41      	ldrb	r1, [r0, r1]
    4dc0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    4dc2:	3301      	adds	r3, #1
    4dc4:	2b0f      	cmp	r3, #15
    4dc6:	d9f7      	bls.n	4db8 <tc_aes_encrypt+0x534>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    4dc8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4dcc:	f88d 3000 	strb.w	r3, [sp]
    4dd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4dd4:	f88d 3001 	strb.w	r3, [sp, #1]
    4dd8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4ddc:	f88d 3002 	strb.w	r3, [sp, #2]
    4de0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4de4:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    4de8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4dec:	f88d 3004 	strb.w	r3, [sp, #4]
    4df0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4df4:	f88d 3005 	strb.w	r3, [sp, #5]
    4df8:	f89d 301e 	ldrb.w	r3, [sp, #30]
    4dfc:	f88d 3006 	strb.w	r3, [sp, #6]
    4e00:	f89d 3013 	ldrb.w	r3, [sp, #19]
    4e04:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    4e08:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4e0c:	f88d 3008 	strb.w	r3, [sp, #8]
    4e10:	f89d 301d 	ldrb.w	r3, [sp, #29]
    4e14:	f88d 3009 	strb.w	r3, [sp, #9]
    4e18:	f89d 3012 	ldrb.w	r3, [sp, #18]
    4e1c:	f88d 300a 	strb.w	r3, [sp, #10]
    4e20:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4e24:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    4e28:	f89d 301c 	ldrb.w	r3, [sp, #28]
    4e2c:	f88d 300c 	strb.w	r3, [sp, #12]
    4e30:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4e34:	f88d 300d 	strb.w	r3, [sp, #13]
    4e38:	f89d 3016 	ldrb.w	r3, [sp, #22]
    4e3c:	f88d 300e 	strb.w	r3, [sp, #14]
    4e40:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4e44:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4e48:	2310      	movs	r3, #16
    4e4a:	466a      	mov	r2, sp
    4e4c:	4619      	mov	r1, r3
    4e4e:	eb0d 0003 	add.w	r0, sp, r3
    4e52:	f014 fc6f 	bl	19734 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    4e56:	1c63      	adds	r3, r4, #1
    4e58:	011a      	lsls	r2, r3, #4
    4e5a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    4e5e:	58aa      	ldr	r2, [r5, r2]
    4e60:	f89d 1010 	ldrb.w	r1, [sp, #16]
    4e64:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
    4e68:	f88d 1010 	strb.w	r1, [sp, #16]
    4e6c:	f3c2 4107 	ubfx	r1, r2, #16, #8
    4e70:	f89d 0011 	ldrb.w	r0, [sp, #17]
    4e74:	4041      	eors	r1, r0
    4e76:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    4e7a:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4e7e:	f89d 0012 	ldrb.w	r0, [sp, #18]
    4e82:	4041      	eors	r1, r0
    4e84:	f88d 1012 	strb.w	r1, [sp, #18]
    4e88:	b2d2      	uxtb	r2, r2
    4e8a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    4e8e:	404a      	eors	r2, r1
    4e90:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    4e94:	685a      	ldr	r2, [r3, #4]
    4e96:	f89d 1014 	ldrb.w	r1, [sp, #20]
    4e9a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
    4e9e:	f88d 1014 	strb.w	r1, [sp, #20]
    4ea2:	f3c2 4107 	ubfx	r1, r2, #16, #8
    4ea6:	f89d 0015 	ldrb.w	r0, [sp, #21]
    4eaa:	4041      	eors	r1, r0
    4eac:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    4eb0:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4eb4:	f89d 0016 	ldrb.w	r0, [sp, #22]
    4eb8:	4041      	eors	r1, r0
    4eba:	f88d 1016 	strb.w	r1, [sp, #22]
    4ebe:	b2d2      	uxtb	r2, r2
    4ec0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    4ec4:	404a      	eors	r2, r1
    4ec6:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    4eca:	689a      	ldr	r2, [r3, #8]
    4ecc:	f89d 1018 	ldrb.w	r1, [sp, #24]
    4ed0:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
    4ed4:	f88d 1018 	strb.w	r1, [sp, #24]
    4ed8:	f3c2 4107 	ubfx	r1, r2, #16, #8
    4edc:	f89d 0019 	ldrb.w	r0, [sp, #25]
    4ee0:	4041      	eors	r1, r0
    4ee2:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    4ee6:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4eea:	f89d 001a 	ldrb.w	r0, [sp, #26]
    4eee:	4041      	eors	r1, r0
    4ef0:	f88d 101a 	strb.w	r1, [sp, #26]
    4ef4:	b2d2      	uxtb	r2, r2
    4ef6:	f89d 101b 	ldrb.w	r1, [sp, #27]
    4efa:	404a      	eors	r2, r1
    4efc:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    4f00:	68db      	ldr	r3, [r3, #12]
    4f02:	f89d 201c 	ldrb.w	r2, [sp, #28]
    4f06:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    4f0a:	f88d 201c 	strb.w	r2, [sp, #28]
    4f0e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4f12:	f89d 101d 	ldrb.w	r1, [sp, #29]
    4f16:	404a      	eors	r2, r1
    4f18:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    4f1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4f20:	f89d 101e 	ldrb.w	r1, [sp, #30]
    4f24:	404a      	eors	r2, r1
    4f26:	f88d 201e 	strb.w	r2, [sp, #30]
    4f2a:	b2db      	uxtb	r3, r3
    4f2c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    4f30:	4053      	eors	r3, r2
    4f32:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    4f36:	2310      	movs	r3, #16
    4f38:	eb0d 0203 	add.w	r2, sp, r3
    4f3c:	4619      	mov	r1, r3
    4f3e:	4630      	mov	r0, r6
    4f40:	f014 fbf8 	bl	19734 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    4f44:	2210      	movs	r2, #16
    4f46:	2100      	movs	r1, #0
    4f48:	eb0d 0002 	add.w	r0, sp, r2
    4f4c:	f014 fbff 	bl	1974e <_set>

	return TC_CRYPTO_SUCCESS;
    4f50:	2001      	movs	r0, #1
}
    4f52:	b009      	add	sp, #36	; 0x24
    4f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    4f56:	2000      	movs	r0, #0
}
    4f58:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    4f5a:	2000      	movs	r0, #0
    4f5c:	e7f9      	b.n	4f52 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    4f5e:	2000      	movs	r0, #0
    4f60:	e7f7      	b.n	4f52 <tc_aes_encrypt+0x6ce>
    4f62:	bf00      	nop
    4f64:	00020d38 	.word	0x00020d38

00004f68 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    4f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f6c:	b093      	sub	sp, #76	; 0x4c
    4f6e:	468a      	mov	sl, r1
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    4f70:	f8d0 e000 	ldr.w	lr, [r0]
    4f74:	6845      	ldr	r5, [r0, #4]
    4f76:	6884      	ldr	r4, [r0, #8]
    4f78:	f8d0 c00c 	ldr.w	ip, [r0, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    4f7c:	6902      	ldr	r2, [r0, #16]
    4f7e:	6947      	ldr	r7, [r0, #20]
    4f80:	6986      	ldr	r6, [r0, #24]
    4f82:	69c1      	ldr	r1, [r0, #28]

	for (i = 0; i < 16; ++i) {
    4f84:	f04f 0800 	mov.w	r8, #0
    4f88:	e046      	b.n	5018 <compress+0xb0>
	n = (((unsigned int)(*((*c)++))) << 24);
    4f8a:	46d1      	mov	r9, sl
    4f8c:	f819 bb01 	ldrb.w	fp, [r9], #1
	n |= ((unsigned int)(*((*c)++)) << 16);
    4f90:	f89a 3001 	ldrb.w	r3, [sl, #1]
    4f94:	041b      	lsls	r3, r3, #16
    4f96:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
    4f9a:	f899 a001 	ldrb.w	sl, [r9, #1]
    4f9e:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
	n |= ((unsigned int)(*((*c)++)));
    4fa2:	f109 0a03 	add.w	sl, r9, #3
    4fa6:	f899 9002 	ldrb.w	r9, [r9, #2]
    4faa:	ea43 0309 	orr.w	r3, r3, r9
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    4fae:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    4fb2:	eb09 0988 	add.w	r9, r9, r8, lsl #2
    4fb6:	f849 3c40 	str.w	r3, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    4fba:	ea4f 29f2 	mov.w	r9, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    4fbe:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
    4fc2:	ea89 6972 	eor.w	r9, r9, r2, ror #25
    4fc6:	4449      	add	r1, r9
    4fc8:	ea02 0907 	and.w	r9, r2, r7
    4fcc:	ea26 0b02 	bic.w	fp, r6, r2
    4fd0:	ea89 090b 	eor.w	r9, r9, fp
    4fd4:	4449      	add	r1, r9
    4fd6:	f8df 914c 	ldr.w	r9, [pc, #332]	; 5124 <compress+0x1bc>
    4fda:	f859 9028 	ldr.w	r9, [r9, r8, lsl #2]
    4fde:	4449      	add	r1, r9
    4fe0:	440b      	add	r3, r1
	return (((a) >> n) | ((a) << (32 - n)));
    4fe2:	ea4f 317e 	mov.w	r1, lr, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    4fe6:	ea81 01be 	eor.w	r1, r1, lr, ror #2
    4fea:	ea81 51be 	eor.w	r1, r1, lr, ror #22
    4fee:	ea85 0904 	eor.w	r9, r5, r4
    4ff2:	ea09 090e 	and.w	r9, r9, lr
    4ff6:	ea05 0b04 	and.w	fp, r5, r4
    4ffa:	ea89 090b 	eor.w	r9, r9, fp
    4ffe:	4489      	add	r9, r1
	for (i = 0; i < 16; ++i) {
    5000:	f108 0801 	add.w	r8, r8, #1
		h = g; g = f; f = e; e = d + t1;
    5004:	4631      	mov	r1, r6
    5006:	463e      	mov	r6, r7
    5008:	4617      	mov	r7, r2
    500a:	eb0c 0203 	add.w	r2, ip, r3
		d = c; c = b; b = a; a = t1 + t2;
    500e:	46a4      	mov	ip, r4
    5010:	462c      	mov	r4, r5
    5012:	4675      	mov	r5, lr
    5014:	eb03 0e09 	add.w	lr, r3, r9
	for (i = 0; i < 16; ++i) {
    5018:	f1b8 0f0f 	cmp.w	r8, #15
    501c:	d9b5      	bls.n	4f8a <compress+0x22>
	}

	for ( ; i < 64; ++i) {
    501e:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    5022:	d863      	bhi.n	50ec <compress+0x184>
		s0 = work_space[(i+1)&0x0f];
    5024:	f108 0901 	add.w	r9, r8, #1
    5028:	f009 030f 	and.w	r3, r9, #15
    502c:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
    5030:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    5034:	f853 3c40 	ldr.w	r3, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    5038:	ea4f 4bb3 	mov.w	fp, r3, ror #18
		s0 = sigma0(s0);
    503c:	ea8b 1bf3 	eor.w	fp, fp, r3, ror #7
    5040:	ea8b 0bd3 	eor.w	fp, fp, r3, lsr #3
		s1 = work_space[(i+14)&0x0f];
    5044:	f108 030e 	add.w	r3, r8, #14
    5048:	f003 030f 	and.w	r3, r3, #15
    504c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    5050:	f853 ac40 	ldr.w	sl, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    5054:	ea4f 43fa 	mov.w	r3, sl, ror #19
		s1 = sigma1(s1);
    5058:	ea83 437a 	eor.w	r3, r3, sl, ror #17
    505c:	ea83 239a 	eor.w	r3, r3, sl, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    5060:	f008 0a0f 	and.w	sl, r8, #15
    5064:	445b      	add	r3, fp
    5066:	9301      	str	r3, [sp, #4]
    5068:	f108 0b09 	add.w	fp, r8, #9
    506c:	f00b 0b0f 	and.w	fp, fp, #15
    5070:	ab12      	add	r3, sp, #72	; 0x48
    5072:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
    5076:	f85b bc40 	ldr.w	fp, [fp, #-64]
    507a:	9b01      	ldr	r3, [sp, #4]
    507c:	449b      	add	fp, r3
    507e:	ab12      	add	r3, sp, #72	; 0x48
    5080:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    5084:	f85a 3c40 	ldr.w	r3, [sl, #-64]
    5088:	445b      	add	r3, fp
    508a:	f84a 3c40 	str.w	r3, [sl, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    508e:	ea4f 2af2 	mov.w	sl, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    5092:	ea8a 1ab2 	eor.w	sl, sl, r2, ror #6
    5096:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
    509a:	4451      	add	r1, sl
    509c:	ea02 0a07 	and.w	sl, r2, r7
    50a0:	ea26 0b02 	bic.w	fp, r6, r2
    50a4:	ea8a 0a0b 	eor.w	sl, sl, fp
    50a8:	4451      	add	r1, sl
    50aa:	f8df a078 	ldr.w	sl, [pc, #120]	; 5124 <compress+0x1bc>
    50ae:	f85a 8028 	ldr.w	r8, [sl, r8, lsl #2]
    50b2:	4441      	add	r1, r8
    50b4:	440b      	add	r3, r1
	return (((a) >> n) | ((a) << (32 - n)));
    50b6:	ea4f 3a7e 	mov.w	sl, lr, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    50ba:	ea8a 0abe 	eor.w	sl, sl, lr, ror #2
    50be:	ea8a 5abe 	eor.w	sl, sl, lr, ror #22
    50c2:	ea85 0104 	eor.w	r1, r5, r4
    50c6:	ea01 010e 	and.w	r1, r1, lr
    50ca:	ea05 0804 	and.w	r8, r5, r4
    50ce:	ea81 0108 	eor.w	r1, r1, r8
    50d2:	448a      	add	sl, r1
	for ( ; i < 64; ++i) {
    50d4:	46c8      	mov	r8, r9
		h = g; g = f; f = e; e = d + t1;
    50d6:	4631      	mov	r1, r6
    50d8:	463e      	mov	r6, r7
    50da:	4617      	mov	r7, r2
    50dc:	eb0c 0203 	add.w	r2, ip, r3
		d = c; c = b; b = a; a = t1 + t2;
    50e0:	46a4      	mov	ip, r4
    50e2:	462c      	mov	r4, r5
    50e4:	4675      	mov	r5, lr
    50e6:	eb03 0e0a 	add.w	lr, r3, sl
    50ea:	e798      	b.n	501e <compress+0xb6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    50ec:	6803      	ldr	r3, [r0, #0]
    50ee:	4473      	add	r3, lr
    50f0:	6003      	str	r3, [r0, #0]
    50f2:	6843      	ldr	r3, [r0, #4]
    50f4:	442b      	add	r3, r5
    50f6:	6043      	str	r3, [r0, #4]
    50f8:	6883      	ldr	r3, [r0, #8]
    50fa:	4423      	add	r3, r4
    50fc:	6083      	str	r3, [r0, #8]
    50fe:	68c3      	ldr	r3, [r0, #12]
    5100:	4463      	add	r3, ip
    5102:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    5104:	6903      	ldr	r3, [r0, #16]
    5106:	4413      	add	r3, r2
    5108:	6103      	str	r3, [r0, #16]
    510a:	6943      	ldr	r3, [r0, #20]
    510c:	443b      	add	r3, r7
    510e:	6143      	str	r3, [r0, #20]
    5110:	6983      	ldr	r3, [r0, #24]
    5112:	4433      	add	r3, r6
    5114:	6183      	str	r3, [r0, #24]
    5116:	69c3      	ldr	r3, [r0, #28]
    5118:	440b      	add	r3, r1
    511a:	61c3      	str	r3, [r0, #28]
}
    511c:	b013      	add	sp, #76	; 0x4c
    511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5122:	bf00      	nop
    5124:	00020e38 	.word	0x00020e38

00005128 <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
    5128:	b1e0      	cbz	r0, 5164 <tc_sha256_init+0x3c>
{
    512a:	b510      	push	{r4, lr}
    512c:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
    512e:	2270      	movs	r2, #112	; 0x70
    5130:	2100      	movs	r1, #0
    5132:	f014 fb0c 	bl	1974e <_set>
	s->iv[0] = 0x6a09e667;
    5136:	4b0c      	ldr	r3, [pc, #48]	; (5168 <tc_sha256_init+0x40>)
    5138:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
    513a:	4b0c      	ldr	r3, [pc, #48]	; (516c <tc_sha256_init+0x44>)
    513c:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
    513e:	4b0c      	ldr	r3, [pc, #48]	; (5170 <tc_sha256_init+0x48>)
    5140:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
    5142:	4b0c      	ldr	r3, [pc, #48]	; (5174 <tc_sha256_init+0x4c>)
    5144:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
    5146:	4b0c      	ldr	r3, [pc, #48]	; (5178 <tc_sha256_init+0x50>)
    5148:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
    514a:	4b0c      	ldr	r3, [pc, #48]	; (517c <tc_sha256_init+0x54>)
    514c:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
    514e:	4b0c      	ldr	r3, [pc, #48]	; (5180 <tc_sha256_init+0x58>)
    5150:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    5152:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    5156:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    515a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    515e:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
    5160:	2001      	movs	r0, #1
}
    5162:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    5164:	2000      	movs	r0, #0
}
    5166:	4770      	bx	lr
    5168:	6a09e667 	.word	0x6a09e667
    516c:	bb67ae85 	.word	0xbb67ae85
    5170:	3c6ef372 	.word	0x3c6ef372
    5174:	a54ff53a 	.word	0xa54ff53a
    5178:	510e527f 	.word	0x510e527f
    517c:	9b05688c 	.word	0x9b05688c
    5180:	1f83d9ab 	.word	0x1f83d9ab

00005184 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    5184:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    5186:	4802      	ldr	r0, [pc, #8]	; (5190 <nrf_cc3xx_platform_abort_init+0xc>)
    5188:	f012 fce4 	bl	17b54 <nrf_cc3xx_platform_set_abort>
}
    518c:	bd08      	pop	{r3, pc}
    518e:	bf00      	nop
    5190:	00020f38 	.word	0x00020f38

00005194 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5194:	b308      	cbz	r0, 51da <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5196:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5198:	6843      	ldr	r3, [r0, #4]
    519a:	2b04      	cmp	r3, #4
    519c:	d007      	beq.n	51ae <mutex_unlock_platform+0x1a>
    519e:	2b08      	cmp	r3, #8
    51a0:	d012      	beq.n	51c8 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    51a2:	b1fb      	cbz	r3, 51e4 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    51a4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    51a6:	f011 f889 	bl	162bc <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    51aa:	2000      	movs	r0, #0
    51ac:	e014      	b.n	51d8 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    51ae:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    51b0:	2200      	movs	r2, #0
    51b2:	e8d3 1fef 	ldaex	r1, [r3]
    51b6:	2901      	cmp	r1, #1
    51b8:	d103      	bne.n	51c2 <mutex_unlock_platform+0x2e>
    51ba:	e8c3 2fe0 	stlex	r0, r2, [r3]
    51be:	2800      	cmp	r0, #0
    51c0:	d1f7      	bne.n	51b2 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    51c2:	d10d      	bne.n	51e0 <mutex_unlock_platform+0x4c>
    51c4:	4610      	mov	r0, r2
    51c6:	e007      	b.n	51d8 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    51c8:	6803      	ldr	r3, [r0, #0]
    51ca:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    51cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    51d0:	2000      	movs	r0, #0
    51d2:	4a05      	ldr	r2, [pc, #20]	; (51e8 <mutex_unlock_platform+0x54>)
    51d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    51d8:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    51da:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    51de:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    51e0:	4802      	ldr	r0, [pc, #8]	; (51ec <mutex_unlock_platform+0x58>)
    51e2:	e7f9      	b.n	51d8 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    51e4:	4802      	ldr	r0, [pc, #8]	; (51f0 <mutex_unlock_platform+0x5c>)
    51e6:	e7f7      	b.n	51d8 <mutex_unlock_platform+0x44>
    51e8:	50030000 	.word	0x50030000
    51ec:	ffff8fe9 	.word	0xffff8fe9
    51f0:	ffff8fea 	.word	0xffff8fea

000051f4 <mutex_lock_platform>:
    if(mutex == NULL) {
    51f4:	b370      	cbz	r0, 5254 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    51f6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    51f8:	6843      	ldr	r3, [r0, #4]
    51fa:	2b04      	cmp	r3, #4
    51fc:	d004      	beq.n	5208 <mutex_lock_platform+0x14>
    51fe:	2b08      	cmp	r3, #8
    5200:	d00f      	beq.n	5222 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5202:	b9c3      	cbnz	r3, 5236 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5204:	4815      	ldr	r0, [pc, #84]	; (525c <mutex_lock_platform+0x68>)
    5206:	e00b      	b.n	5220 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    5208:	6803      	ldr	r3, [r0, #0]
    520a:	2201      	movs	r2, #1
    520c:	e8d3 1fef 	ldaex	r1, [r3]
    5210:	2900      	cmp	r1, #0
    5212:	d103      	bne.n	521c <mutex_lock_platform+0x28>
    5214:	e8c3 2fe0 	stlex	r0, r2, [r3]
    5218:	2800      	cmp	r0, #0
    521a:	d1f7      	bne.n	520c <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    521c:	d116      	bne.n	524c <mutex_lock_platform+0x58>
    521e:	2000      	movs	r0, #0
}
    5220:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    5222:	6803      	ldr	r3, [r0, #0]
    5224:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    5226:	f503 7380 	add.w	r3, r3, #256	; 0x100
    522a:	4a0d      	ldr	r2, [pc, #52]	; (5260 <mutex_lock_platform+0x6c>)
    522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5230:	b973      	cbnz	r3, 5250 <mutex_lock_platform+0x5c>
    5232:	2000      	movs	r0, #0
    5234:	e7f4      	b.n	5220 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    5236:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5238:	f04f 32ff 	mov.w	r2, #4294967295
    523c:	f04f 33ff 	mov.w	r3, #4294967295
    5240:	f010 ffb2 	bl	161a8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    5244:	2800      	cmp	r0, #0
    5246:	d0eb      	beq.n	5220 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    5248:	4806      	ldr	r0, [pc, #24]	; (5264 <mutex_lock_platform+0x70>)
    524a:	e7e9      	b.n	5220 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    524c:	4805      	ldr	r0, [pc, #20]	; (5264 <mutex_lock_platform+0x70>)
    524e:	e7e7      	b.n	5220 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5250:	4804      	ldr	r0, [pc, #16]	; (5264 <mutex_lock_platform+0x70>)
    5252:	e7e5      	b.n	5220 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5254:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5258:	4770      	bx	lr
    525a:	bf00      	nop
    525c:	ffff8fea 	.word	0xffff8fea
    5260:	50030000 	.word	0x50030000
    5264:	ffff8fe9 	.word	0xffff8fe9

00005268 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5268:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    526a:	4604      	mov	r4, r0
    526c:	b188      	cbz	r0, 5292 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    526e:	6863      	ldr	r3, [r4, #4]
    5270:	2b04      	cmp	r3, #4
    5272:	d00d      	beq.n	5290 <mutex_free_platform+0x28>
    5274:	2b08      	cmp	r3, #8
    5276:	d00b      	beq.n	5290 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5278:	b153      	cbz	r3, 5290 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    527a:	f013 0f02 	tst.w	r3, #2
    527e:	d00d      	beq.n	529c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5280:	4621      	mov	r1, r4
    5282:	4809      	ldr	r0, [pc, #36]	; (52a8 <mutex_free_platform+0x40>)
    5284:	f01a f897 	bl	1f3b6 <k_mem_slab_free>
        mutex->mutex = NULL;
    5288:	2300      	movs	r3, #0
    528a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    528c:	2300      	movs	r3, #0
    528e:	6063      	str	r3, [r4, #4]
}
    5290:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5292:	4b06      	ldr	r3, [pc, #24]	; (52ac <mutex_free_platform+0x44>)
    5294:	685b      	ldr	r3, [r3, #4]
    5296:	4806      	ldr	r0, [pc, #24]	; (52b0 <mutex_free_platform+0x48>)
    5298:	4798      	blx	r3
    529a:	e7e8      	b.n	526e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    529c:	2214      	movs	r2, #20
    529e:	2100      	movs	r1, #0
    52a0:	6820      	ldr	r0, [r4, #0]
    52a2:	f014 ff01 	bl	1a0a8 <memset>
    52a6:	e7f1      	b.n	528c <mutex_free_platform+0x24>
    52a8:	20001998 	.word	0x20001998
    52ac:	20000598 	.word	0x20000598
    52b0:	00020f40 	.word	0x00020f40

000052b4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    52b4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    52b6:	4604      	mov	r4, r0
    52b8:	b178      	cbz	r0, 52da <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    52ba:	6863      	ldr	r3, [r4, #4]
    52bc:	2b04      	cmp	r3, #4
    52be:	d00b      	beq.n	52d8 <mutex_init_platform+0x24>
    52c0:	2b08      	cmp	r3, #8
    52c2:	d009      	beq.n	52d8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    52c4:	b90b      	cbnz	r3, 52ca <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    52c6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    52c8:	b163      	cbz	r3, 52e4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    52ca:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    52cc:	f01a f900 	bl	1f4d0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    52d0:	6863      	ldr	r3, [r4, #4]
    52d2:	f043 0301 	orr.w	r3, r3, #1
    52d6:	6063      	str	r3, [r4, #4]
}
    52d8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    52da:	4b0f      	ldr	r3, [pc, #60]	; (5318 <mutex_init_platform+0x64>)
    52dc:	685b      	ldr	r3, [r3, #4]
    52de:	480f      	ldr	r0, [pc, #60]	; (531c <mutex_init_platform+0x68>)
    52e0:	4798      	blx	r3
    52e2:	e7ea      	b.n	52ba <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    52e4:	f04f 32ff 	mov.w	r2, #4294967295
    52e8:	f04f 33ff 	mov.w	r3, #4294967295
    52ec:	4621      	mov	r1, r4
    52ee:	480c      	ldr	r0, [pc, #48]	; (5320 <mutex_init_platform+0x6c>)
    52f0:	f010 fe1a 	bl	15f28 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    52f4:	b908      	cbnz	r0, 52fa <mutex_init_platform+0x46>
    52f6:	6823      	ldr	r3, [r4, #0]
    52f8:	b91b      	cbnz	r3, 5302 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    52fa:	4b07      	ldr	r3, [pc, #28]	; (5318 <mutex_init_platform+0x64>)
    52fc:	685b      	ldr	r3, [r3, #4]
    52fe:	4809      	ldr	r0, [pc, #36]	; (5324 <mutex_init_platform+0x70>)
    5300:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5302:	2214      	movs	r2, #20
    5304:	2100      	movs	r1, #0
    5306:	6820      	ldr	r0, [r4, #0]
    5308:	f014 fece 	bl	1a0a8 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    530c:	6863      	ldr	r3, [r4, #4]
    530e:	f043 0302 	orr.w	r3, r3, #2
    5312:	6063      	str	r3, [r4, #4]
    5314:	e7d9      	b.n	52ca <mutex_init_platform+0x16>
    5316:	bf00      	nop
    5318:	20000598 	.word	0x20000598
    531c:	00020f40 	.word	0x00020f40
    5320:	20001998 	.word	0x20001998
    5324:	00020f68 	.word	0x00020f68

00005328 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    5328:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    532a:	2340      	movs	r3, #64	; 0x40
    532c:	2214      	movs	r2, #20
    532e:	4904      	ldr	r1, [pc, #16]	; (5340 <nrf_cc3xx_platform_mutex_init+0x18>)
    5330:	4804      	ldr	r0, [pc, #16]	; (5344 <nrf_cc3xx_platform_mutex_init+0x1c>)
    5332:	f01a f832 	bl	1f39a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    5336:	4904      	ldr	r1, [pc, #16]	; (5348 <nrf_cc3xx_platform_mutex_init+0x20>)
    5338:	4804      	ldr	r0, [pc, #16]	; (534c <nrf_cc3xx_platform_mutex_init+0x24>)
    533a:	f012 fc6d 	bl	17c18 <nrf_cc3xx_platform_set_mutexes>
}
    533e:	bd08      	pop	{r3, pc}
    5340:	200019b4 	.word	0x200019b4
    5344:	20001998 	.word	0x20001998
    5348:	00020fa8 	.word	0x00020fa8
    534c:	00020f98 	.word	0x00020f98

00005350 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5350:	4901      	ldr	r1, [pc, #4]	; (5358 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5352:	2210      	movs	r2, #16
	str	r2, [r1]
    5354:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5356:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5358:	e000ed10 	.word	0xe000ed10

0000535c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    535c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    535e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5360:	f380 8811 	msr	BASEPRI, r0
	isb
    5364:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5368:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    536c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    536e:	b662      	cpsie	i
	isb
    5370:	f3bf 8f6f 	isb	sy

	bx	lr
    5374:	4770      	bx	lr
    5376:	bf00      	nop

00005378 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5378:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    537a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    537c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5380:	bf20      	wfe

	msr	BASEPRI, r0
    5382:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5386:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5388:	4770      	bx	lr
    538a:	bf00      	nop

0000538c <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    538c:	b5f0      	push	{r4, r5, r6, r7, lr}
    538e:	b083      	sub	sp, #12
    5390:	af00      	add	r7, sp, #0
    5392:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5394:	f8d0 c000 	ldr.w	ip, [r0]
    5398:	6845      	ldr	r5, [r0, #4]
    539a:	6880      	ldr	r0, [r0, #8]
    539c:	466e      	mov	r6, sp
    539e:	b08a      	sub	sp, #40	; 0x28
    53a0:	466b      	mov	r3, sp
    53a2:	f113 0210 	adds.w	r2, r3, #16
    53a6:	f000 80f0 	beq.w	558a <esf_dump+0x1fe>
    53aa:	2114      	movs	r1, #20
    53ac:	b12a      	cbz	r2, 53ba <esf_dump+0x2e>
    53ae:	2904      	cmp	r1, #4
    53b0:	dd03      	ble.n	53ba <esf_dump+0x2e>
    53b2:	f8df e208 	ldr.w	lr, [pc, #520]	; 55bc <esf_dump+0x230>
    53b6:	f8c3 e014 	str.w	lr, [r3, #20]
    53ba:	b11a      	cbz	r2, 53c4 <esf_dump+0x38>
    53bc:	2908      	cmp	r1, #8
    53be:	dd01      	ble.n	53c4 <esf_dump+0x38>
    53c0:	f8c3 c018 	str.w	ip, [r3, #24]
    53c4:	b112      	cbz	r2, 53cc <esf_dump+0x40>
    53c6:	290c      	cmp	r1, #12
    53c8:	dd00      	ble.n	53cc <esf_dump+0x40>
    53ca:	61dd      	str	r5, [r3, #28]
    53cc:	b112      	cbz	r2, 53d4 <esf_dump+0x48>
    53ce:	2910      	cmp	r1, #16
    53d0:	dd00      	ble.n	53d4 <esf_dump+0x48>
    53d2:	6218      	str	r0, [r3, #32]
    53d4:	2913      	cmp	r1, #19
    53d6:	f340 80db 	ble.w	5590 <esf_dump+0x204>
    53da:	2514      	movs	r5, #20
    53dc:	b13a      	cbz	r2, 53ee <esf_dump+0x62>
    53de:	2105      	movs	r1, #5
    53e0:	7139      	strb	r1, [r7, #4]
    53e2:	2100      	movs	r1, #0
    53e4:	7179      	strb	r1, [r7, #5]
    53e6:	71b9      	strb	r1, [r7, #6]
    53e8:	71f9      	strb	r1, [r7, #7]
    53ea:	6878      	ldr	r0, [r7, #4]
    53ec:	6118      	str	r0, [r3, #16]
    53ee:	2100      	movs	r1, #0
    53f0:	f36f 0100 	bfc	r1, #0, #1
    53f4:	f36f 0141 	bfc	r1, #1, #1
    53f8:	f36f 0182 	bfc	r1, #2, #1
    53fc:	f36f 01c5 	bfc	r1, #3, #3
    5400:	2301      	movs	r3, #1
    5402:	f363 1188 	bfi	r1, r3, #6, #3
    5406:	f405 757d 	and.w	r5, r5, #1012	; 0x3f4
    540a:	f365 2152 	bfi	r1, r5, #9, #10
    540e:	f36f 41de 	bfc	r1, #19, #12
    5412:	f36f 71df 	bfc	r1, #31, #1
    5416:	2300      	movs	r3, #0
    5418:	4869      	ldr	r0, [pc, #420]	; (55c0 <esf_dump+0x234>)
    541a:	f7fe f957 	bl	36cc <z_impl_z_log_msg_static_create>
    541e:	46b5      	mov	sp, r6
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5420:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    5424:	6926      	ldr	r6, [r4, #16]
    5426:	6960      	ldr	r0, [r4, #20]
    5428:	466d      	mov	r5, sp
    542a:	b08a      	sub	sp, #40	; 0x28
    542c:	466b      	mov	r3, sp
    542e:	f113 0210 	adds.w	r2, r3, #16
    5432:	f000 80b0 	beq.w	5596 <esf_dump+0x20a>
    5436:	2114      	movs	r1, #20
    5438:	b12a      	cbz	r2, 5446 <esf_dump+0xba>
    543a:	2904      	cmp	r1, #4
    543c:	dd03      	ble.n	5446 <esf_dump+0xba>
    543e:	f8df e184 	ldr.w	lr, [pc, #388]	; 55c4 <esf_dump+0x238>
    5442:	f8c3 e014 	str.w	lr, [r3, #20]
    5446:	b11a      	cbz	r2, 5450 <esf_dump+0xc4>
    5448:	2908      	cmp	r1, #8
    544a:	dd01      	ble.n	5450 <esf_dump+0xc4>
    544c:	f8c3 c018 	str.w	ip, [r3, #24]
    5450:	b112      	cbz	r2, 5458 <esf_dump+0xcc>
    5452:	290c      	cmp	r1, #12
    5454:	dd00      	ble.n	5458 <esf_dump+0xcc>
    5456:	61de      	str	r6, [r3, #28]
    5458:	b112      	cbz	r2, 5460 <esf_dump+0xd4>
    545a:	2910      	cmp	r1, #16
    545c:	dd00      	ble.n	5460 <esf_dump+0xd4>
    545e:	6218      	str	r0, [r3, #32]
    5460:	2913      	cmp	r1, #19
    5462:	f340 809b 	ble.w	559c <esf_dump+0x210>
    5466:	f04f 0c14 	mov.w	ip, #20
    546a:	b13a      	cbz	r2, 547c <esf_dump+0xf0>
    546c:	2105      	movs	r1, #5
    546e:	7139      	strb	r1, [r7, #4]
    5470:	2100      	movs	r1, #0
    5472:	7179      	strb	r1, [r7, #5]
    5474:	71b9      	strb	r1, [r7, #6]
    5476:	71f9      	strb	r1, [r7, #7]
    5478:	6878      	ldr	r0, [r7, #4]
    547a:	6118      	str	r0, [r3, #16]
    547c:	2100      	movs	r1, #0
    547e:	f36f 0100 	bfc	r1, #0, #1
    5482:	f36f 0141 	bfc	r1, #1, #1
    5486:	f36f 0182 	bfc	r1, #2, #1
    548a:	f36f 01c5 	bfc	r1, #3, #3
    548e:	2301      	movs	r3, #1
    5490:	f363 1188 	bfi	r1, r3, #6, #3
    5494:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    5498:	f36c 2152 	bfi	r1, ip, #9, #10
    549c:	f36f 41de 	bfc	r1, #19, #12
    54a0:	f36f 71df 	bfc	r1, #31, #1
    54a4:	2300      	movs	r3, #0
    54a6:	4846      	ldr	r0, [pc, #280]	; (55c0 <esf_dump+0x234>)
    54a8:	f7fe f910 	bl	36cc <z_impl_z_log_msg_static_create>
    54ac:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    54ae:	69e0      	ldr	r0, [r4, #28]
    54b0:	466d      	mov	r5, sp
    54b2:	b088      	sub	sp, #32
    54b4:	466b      	mov	r3, sp
    54b6:	f113 0210 	adds.w	r2, r3, #16
    54ba:	d072      	beq.n	55a2 <esf_dump+0x216>
    54bc:	210c      	movs	r1, #12
    54be:	b11a      	cbz	r2, 54c8 <esf_dump+0x13c>
    54c0:	2904      	cmp	r1, #4
    54c2:	dd01      	ble.n	54c8 <esf_dump+0x13c>
    54c4:	4e40      	ldr	r6, [pc, #256]	; (55c8 <esf_dump+0x23c>)
    54c6:	615e      	str	r6, [r3, #20]
    54c8:	b112      	cbz	r2, 54d0 <esf_dump+0x144>
    54ca:	2908      	cmp	r1, #8
    54cc:	dd00      	ble.n	54d0 <esf_dump+0x144>
    54ce:	6198      	str	r0, [r3, #24]
    54d0:	290b      	cmp	r1, #11
    54d2:	dd69      	ble.n	55a8 <esf_dump+0x21c>
    54d4:	f04f 0c0c 	mov.w	ip, #12
    54d8:	b13a      	cbz	r2, 54ea <esf_dump+0x15e>
    54da:	2103      	movs	r1, #3
    54dc:	7139      	strb	r1, [r7, #4]
    54de:	2100      	movs	r1, #0
    54e0:	7179      	strb	r1, [r7, #5]
    54e2:	71b9      	strb	r1, [r7, #6]
    54e4:	71f9      	strb	r1, [r7, #7]
    54e6:	6878      	ldr	r0, [r7, #4]
    54e8:	6118      	str	r0, [r3, #16]
    54ea:	2100      	movs	r1, #0
    54ec:	f36f 0100 	bfc	r1, #0, #1
    54f0:	f36f 0141 	bfc	r1, #1, #1
    54f4:	f36f 0182 	bfc	r1, #2, #1
    54f8:	f36f 01c5 	bfc	r1, #3, #3
    54fc:	2301      	movs	r3, #1
    54fe:	f363 1188 	bfi	r1, r3, #6, #3
    5502:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    5506:	f36c 2152 	bfi	r1, ip, #9, #10
    550a:	f36f 41de 	bfc	r1, #19, #12
    550e:	f36f 71df 	bfc	r1, #31, #1
    5512:	2300      	movs	r3, #0
    5514:	482a      	ldr	r0, [pc, #168]	; (55c0 <esf_dump+0x234>)
    5516:	f7fe f8d9 	bl	36cc <z_impl_z_log_msg_static_create>
    551a:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    551c:	69a0      	ldr	r0, [r4, #24]
    551e:	b088      	sub	sp, #32
    5520:	466b      	mov	r3, sp
    5522:	f113 0210 	adds.w	r2, r3, #16
    5526:	d042      	beq.n	55ae <esf_dump+0x222>
    5528:	210c      	movs	r1, #12
    552a:	b11a      	cbz	r2, 5534 <esf_dump+0x1a8>
    552c:	2904      	cmp	r1, #4
    552e:	dd01      	ble.n	5534 <esf_dump+0x1a8>
    5530:	4c26      	ldr	r4, [pc, #152]	; (55cc <esf_dump+0x240>)
    5532:	615c      	str	r4, [r3, #20]
    5534:	b112      	cbz	r2, 553c <esf_dump+0x1b0>
    5536:	2908      	cmp	r1, #8
    5538:	dd00      	ble.n	553c <esf_dump+0x1b0>
    553a:	6198      	str	r0, [r3, #24]
    553c:	290b      	cmp	r1, #11
    553e:	dd39      	ble.n	55b4 <esf_dump+0x228>
    5540:	240c      	movs	r4, #12
    5542:	b13a      	cbz	r2, 5554 <esf_dump+0x1c8>
    5544:	2103      	movs	r1, #3
    5546:	7139      	strb	r1, [r7, #4]
    5548:	2100      	movs	r1, #0
    554a:	7179      	strb	r1, [r7, #5]
    554c:	71b9      	strb	r1, [r7, #6]
    554e:	71f9      	strb	r1, [r7, #7]
    5550:	6878      	ldr	r0, [r7, #4]
    5552:	6118      	str	r0, [r3, #16]
    5554:	2100      	movs	r1, #0
    5556:	f36f 0100 	bfc	r1, #0, #1
    555a:	f36f 0141 	bfc	r1, #1, #1
    555e:	f36f 0182 	bfc	r1, #2, #1
    5562:	f36f 01c5 	bfc	r1, #3, #3
    5566:	2301      	movs	r3, #1
    5568:	f363 1188 	bfi	r1, r3, #6, #3
    556c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    5570:	f364 2152 	bfi	r1, r4, #9, #10
    5574:	f36f 41de 	bfc	r1, #19, #12
    5578:	f36f 71df 	bfc	r1, #31, #1
    557c:	2300      	movs	r3, #0
    557e:	4810      	ldr	r0, [pc, #64]	; (55c0 <esf_dump+0x234>)
    5580:	f7fe f8a4 	bl	36cc <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    5584:	370c      	adds	r7, #12
    5586:	46bd      	mov	sp, r7
    5588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    558a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    558e:	e70d      	b.n	53ac <esf_dump+0x20>
    5590:	f06f 051b 	mvn.w	r5, #27
    5594:	e722      	b.n	53dc <esf_dump+0x50>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    559a:	e74d      	b.n	5438 <esf_dump+0xac>
    559c:	f06f 0c1b 	mvn.w	ip, #27
    55a0:	e763      	b.n	546a <esf_dump+0xde>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    55a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    55a6:	e78a      	b.n	54be <esf_dump+0x132>
    55a8:	f06f 0c1b 	mvn.w	ip, #27
    55ac:	e794      	b.n	54d8 <esf_dump+0x14c>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    55ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    55b2:	e7ba      	b.n	552a <esf_dump+0x19e>
    55b4:	f06f 041b 	mvn.w	r4, #27
    55b8:	e7c3      	b.n	5542 <esf_dump+0x1b6>
    55ba:	bf00      	nop
    55bc:	00020fbc 	.word	0x00020fbc
    55c0:	000205c0 	.word	0x000205c0
    55c4:	00020fec 	.word	0x00020fec
    55c8:	0002101c 	.word	0x0002101c
    55cc:	0002102c 	.word	0x0002102c

000055d0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    55d0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    55d2:	2800      	cmp	r0, #0
    55d4:	db07      	blt.n	55e6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    55d6:	f000 021f 	and.w	r2, r0, #31
    55da:	0940      	lsrs	r0, r0, #5
    55dc:	2301      	movs	r3, #1
    55de:	4093      	lsls	r3, r2
    55e0:	4a01      	ldr	r2, [pc, #4]	; (55e8 <arch_irq_enable+0x18>)
    55e2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    55e6:	4770      	bx	lr
    55e8:	e000e100 	.word	0xe000e100

000055ec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    55ec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    55ee:	2800      	cmp	r0, #0
    55f0:	db0c      	blt.n	560c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    55f2:	f000 021f 	and.w	r2, r0, #31
    55f6:	0940      	lsrs	r0, r0, #5
    55f8:	2301      	movs	r3, #1
    55fa:	4093      	lsls	r3, r2
    55fc:	3020      	adds	r0, #32
    55fe:	4a04      	ldr	r2, [pc, #16]	; (5610 <arch_irq_disable+0x24>)
    5600:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    5604:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5608:	f3bf 8f6f 	isb	sy
}
    560c:	4770      	bx	lr
    560e:	bf00      	nop
    5610:	e000e100 	.word	0xe000e100

00005614 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5614:	0942      	lsrs	r2, r0, #5
    5616:	4b05      	ldr	r3, [pc, #20]	; (562c <arch_irq_is_enabled+0x18>)
    5618:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    561c:	f000 001f 	and.w	r0, r0, #31
    5620:	2301      	movs	r3, #1
    5622:	fa03 f000 	lsl.w	r0, r3, r0
}
    5626:	4010      	ands	r0, r2
    5628:	4770      	bx	lr
    562a:	bf00      	nop
    562c:	e000e100 	.word	0xe000e100

00005630 <z_arm_irq_priority_set>:
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5630:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5632:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5634:	2800      	cmp	r0, #0
    5636:	db08      	blt.n	564a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5638:	0149      	lsls	r1, r1, #5
    563a:	b2c9      	uxtb	r1, r1
    563c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    5640:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    5644:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    5648:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    564a:	f000 000f 	and.w	r0, r0, #15
    564e:	0149      	lsls	r1, r1, #5
    5650:	b2c9      	uxtb	r1, r1
    5652:	4b01      	ldr	r3, [pc, #4]	; (5658 <z_arm_irq_priority_set+0x28>)
    5654:	5419      	strb	r1, [r3, r0]
}
    5656:	4770      	bx	lr
    5658:	e000ed14 	.word	0xe000ed14

0000565c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    565c:	bf30      	wfi
    b z_SysNmiOnReset
    565e:	f7ff bffd 	b.w	565c <z_SysNmiOnReset>
    5662:	bf00      	nop

00005664 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5664:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5666:	4b0b      	ldr	r3, [pc, #44]	; (5694 <z_arm_prep_c+0x30>)
    5668:	4a0b      	ldr	r2, [pc, #44]	; (5698 <z_arm_prep_c+0x34>)
    566a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    566e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5674:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5678:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    567c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5684:	f010 fb88 	bl	15d98 <z_bss_zero>
	z_data_copy();
    5688:	f011 fcda 	bl	17040 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    568c:	f000 ff82 	bl	6594 <z_arm_interrupt_init>
	z_cstart();
    5690:	f010 fbde 	bl	15e50 <z_cstart>
    5694:	e000ed00 	.word	0xe000ed00
    5698:	00000000 	.word	0x00000000

0000569c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    569c:	4a0a      	ldr	r2, [pc, #40]	; (56c8 <arch_swap+0x2c>)
    569e:	6893      	ldr	r3, [r2, #8]
    56a0:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    56a4:	4909      	ldr	r1, [pc, #36]	; (56cc <arch_swap+0x30>)
    56a6:	6809      	ldr	r1, [r1, #0]
    56a8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    56ac:	4908      	ldr	r1, [pc, #32]	; (56d0 <arch_swap+0x34>)
    56ae:	684b      	ldr	r3, [r1, #4]
    56b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    56b4:	604b      	str	r3, [r1, #4]
    56b6:	2300      	movs	r3, #0
    56b8:	f383 8811 	msr	BASEPRI, r3
    56bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    56c0:	6893      	ldr	r3, [r2, #8]
}
    56c2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    56c6:	4770      	bx	lr
    56c8:	2000294c 	.word	0x2000294c
    56cc:	00023948 	.word	0x00023948
    56d0:	e000ed00 	.word	0xe000ed00

000056d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    56d4:	4914      	ldr	r1, [pc, #80]	; (5728 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    56d6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    56d8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    56dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    56de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    56e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    56e6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    56e8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    56ec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    56f0:	4f0e      	ldr	r7, [pc, #56]	; (572c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    56f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    56f6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    56f8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    56fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    56fc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    5700:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5702:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5706:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    570a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    570e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5712:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    5716:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    571a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    571c:	f014 fbab 	bl	19e76 <configure_builtin_stack_guard>
    pop {r2, lr}
    5720:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5724:	4770      	bx	lr
    5726:	0000      	.short	0x0000
    ldr r1, =_kernel
    5728:	2000294c 	.word	0x2000294c
    ldr v4, =_SCS_ICSR
    572c:	e000ed04 	.word	0xe000ed04

00005730 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5730:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5734:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5736:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    573a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    573e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5740:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5744:	2902      	cmp	r1, #2
    beq _oops
    5746:	d0ff      	beq.n	5748 <_oops>

00005748 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5748:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    574a:	f014 fb82 	bl	19e52 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    574e:	bd01      	pop	{r0, pc}

00005750 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5750:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5752:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5756:	490e      	ldr	r1, [pc, #56]	; (5790 <arch_new_thread+0x40>)
    5758:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    575c:	f021 0101 	bic.w	r1, r1, #1
    5760:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5764:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5768:	9b01      	ldr	r3, [sp, #4]
    576a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    576e:	9b02      	ldr	r3, [sp, #8]
    5770:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5774:	9b03      	ldr	r3, [sp, #12]
    5776:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    577a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    577e:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    5782:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5784:	2300      	movs	r3, #0
    5786:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    578a:	bc10      	pop	{r4}
    578c:	4770      	bx	lr
    578e:	bf00      	nop
    5790:	000182b3 	.word	0x000182b3

00005794 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5794:	4b09      	ldr	r3, [pc, #36]	; (57bc <arch_switch_to_main_thread+0x28>)
    5796:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    5798:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    579c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    57a0:	4610      	mov	r0, r2
    57a2:	f381 8809 	msr	PSP, r1
    57a6:	2100      	movs	r1, #0
    57a8:	b663      	cpsie	if
    57aa:	f381 8811 	msr	BASEPRI, r1
    57ae:	f3bf 8f6f 	isb	sy
    57b2:	2200      	movs	r2, #0
    57b4:	2300      	movs	r3, #0
    57b6:	f012 fd7c 	bl	182b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    57ba:	bf00      	nop
    57bc:	2000294c 	.word	0x2000294c

000057c0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    57c0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    57c2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    57c4:	4a0b      	ldr	r2, [pc, #44]	; (57f4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    57c6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    57c8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    57ca:	bf1e      	ittt	ne
	movne	r1, #0
    57cc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    57ce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    57d0:	f019 fe62 	blne	1f498 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    57d4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    57d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    57da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    57de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    57e2:	4905      	ldr	r1, [pc, #20]	; (57f8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    57e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    57e6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    57e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    57ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    57ee:	4903      	ldr	r1, [pc, #12]	; (57fc <_isr_wrapper+0x3c>)
	bx r1
    57f0:	4708      	bx	r1
    57f2:	0000      	.short	0x0000
	ldr r2, =_kernel
    57f4:	2000294c 	.word	0x2000294c
	ldr r1, =_sw_isr_table
    57f8:	0002020c 	.word	0x0002020c
	ldr r1, =z_arm_int_exit
    57fc:	00005801 	.word	0x00005801

00005800 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5800:	4b04      	ldr	r3, [pc, #16]	; (5814 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5802:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5804:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5806:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5808:	d003      	beq.n	5812 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    580a:	4903      	ldr	r1, [pc, #12]	; (5818 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    580c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5810:	600a      	str	r2, [r1, #0]

00005812 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5812:	4770      	bx	lr
	ldr r3, =_kernel
    5814:	2000294c 	.word	0x2000294c
	ldr r1, =_SCS_ICSR
    5818:	e000ed04 	.word	0xe000ed04

0000581c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5820:	b0a6      	sub	sp, #152	; 0x98
    5822:	af00      	add	r7, sp, #0
    5824:	4605      	mov	r5, r0
    5826:	460e      	mov	r6, r1
    5828:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    582a:	4bad      	ldr	r3, [pc, #692]	; (5ae0 <mem_manage_fault+0x2c4>)
    582c:	61fb      	str	r3, [r7, #28]
    582e:	2302      	movs	r3, #2
    5830:	713b      	strb	r3, [r7, #4]
    5832:	2300      	movs	r3, #0
    5834:	717b      	strb	r3, [r7, #5]
    5836:	71bb      	strb	r3, [r7, #6]
    5838:	71fb      	strb	r3, [r7, #7]
    583a:	687a      	ldr	r2, [r7, #4]
    583c:	61ba      	str	r2, [r7, #24]
    583e:	4619      	mov	r1, r3
    5840:	f363 0100 	bfi	r1, r3, #0, #1
    5844:	f363 0141 	bfi	r1, r3, #1, #1
    5848:	f363 0182 	bfi	r1, r3, #2, #1
    584c:	f363 01c5 	bfi	r1, r3, #3, #3
    5850:	2201      	movs	r2, #1
    5852:	f362 1188 	bfi	r1, r2, #6, #3
    5856:	2208      	movs	r2, #8
    5858:	f362 2152 	bfi	r1, r2, #9, #10
    585c:	f363 41de 	bfi	r1, r3, #19, #12
    5860:	f363 71df 	bfi	r1, r3, #31, #1
    5864:	f107 0218 	add.w	r2, r7, #24
    5868:	489e      	ldr	r0, [pc, #632]	; (5ae4 <mem_manage_fault+0x2c8>)
    586a:	f7fd ff2f 	bl	36cc <z_impl_z_log_msg_static_create>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    586e:	4b9e      	ldr	r3, [pc, #632]	; (5ae8 <mem_manage_fault+0x2cc>)
    5870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5872:	f013 0f10 	tst.w	r3, #16
    5876:	d135      	bne.n	58e4 <mem_manage_fault+0xc8>
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5878:	4b9b      	ldr	r3, [pc, #620]	; (5ae8 <mem_manage_fault+0x2cc>)
    587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    587c:	f013 0f08 	tst.w	r3, #8
    5880:	d153      	bne.n	592a <mem_manage_fault+0x10e>
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5882:	4b99      	ldr	r3, [pc, #612]	; (5ae8 <mem_manage_fault+0x2cc>)
    5884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5886:	f013 0f02 	tst.w	r3, #2
    588a:	d171      	bne.n	5970 <mem_manage_fault+0x154>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    588c:	4b96      	ldr	r3, [pc, #600]	; (5ae8 <mem_manage_fault+0x2cc>)
    588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5890:	f013 0f01 	tst.w	r3, #1
    5894:	f040 80dc 	bne.w	5a50 <mem_manage_fault+0x234>
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5898:	4b93      	ldr	r3, [pc, #588]	; (5ae8 <mem_manage_fault+0x2cc>)
    589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    589c:	f013 0f20 	tst.w	r3, #32
    58a0:	f040 80f9 	bne.w	5a96 <mem_manage_fault+0x27a>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    58a4:	4b90      	ldr	r3, [pc, #576]	; (5ae8 <mem_manage_fault+0x2cc>)
    58a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    58a8:	f013 0f10 	tst.w	r3, #16
    58ac:	d101      	bne.n	58b2 <mem_manage_fault+0x96>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    58ae:	4b8e      	ldr	r3, [pc, #568]	; (5ae8 <mem_manage_fault+0x2cc>)
    58b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    58b2:	4b8d      	ldr	r3, [pc, #564]	; (5ae8 <mem_manage_fault+0x2cc>)
    58b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    58b6:	f013 0f20 	tst.w	r3, #32
    58ba:	d004      	beq.n	58c6 <mem_manage_fault+0xaa>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    58bc:	4a8a      	ldr	r2, [pc, #552]	; (5ae8 <mem_manage_fault+0x2cc>)
    58be:	6a53      	ldr	r3, [r2, #36]	; 0x24
    58c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    58c4:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    58c6:	4a88      	ldr	r2, [pc, #544]	; (5ae8 <mem_manage_fault+0x2cc>)
    58c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    58ca:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    58ce:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    58d0:	2101      	movs	r1, #1
    58d2:	4628      	mov	r0, r5
    58d4:	f014 fad4 	bl	19e80 <memory_fault_recoverable>
    58d8:	7020      	strb	r0, [r4, #0]

	return reason;
}
    58da:	2000      	movs	r0, #0
    58dc:	3798      	adds	r7, #152	; 0x98
    58de:	46bd      	mov	sp, r7
    58e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    58e4:	4b81      	ldr	r3, [pc, #516]	; (5aec <mem_manage_fault+0x2d0>)
    58e6:	637b      	str	r3, [r7, #52]	; 0x34
    58e8:	2302      	movs	r3, #2
    58ea:	713b      	strb	r3, [r7, #4]
    58ec:	2300      	movs	r3, #0
    58ee:	717b      	strb	r3, [r7, #5]
    58f0:	71bb      	strb	r3, [r7, #6]
    58f2:	71fb      	strb	r3, [r7, #7]
    58f4:	687a      	ldr	r2, [r7, #4]
    58f6:	633a      	str	r2, [r7, #48]	; 0x30
    58f8:	4619      	mov	r1, r3
    58fa:	f363 0100 	bfi	r1, r3, #0, #1
    58fe:	f363 0141 	bfi	r1, r3, #1, #1
    5902:	f363 0182 	bfi	r1, r3, #2, #1
    5906:	f363 01c5 	bfi	r1, r3, #3, #3
    590a:	2201      	movs	r2, #1
    590c:	f362 1188 	bfi	r1, r2, #6, #3
    5910:	2208      	movs	r2, #8
    5912:	f362 2152 	bfi	r1, r2, #9, #10
    5916:	f363 41de 	bfi	r1, r3, #19, #12
    591a:	f363 71df 	bfi	r1, r3, #31, #1
    591e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5922:	4870      	ldr	r0, [pc, #448]	; (5ae4 <mem_manage_fault+0x2c8>)
    5924:	f7fd fed2 	bl	36cc <z_impl_z_log_msg_static_create>
    5928:	e7a6      	b.n	5878 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    592a:	4b71      	ldr	r3, [pc, #452]	; (5af0 <mem_manage_fault+0x2d4>)
    592c:	64fb      	str	r3, [r7, #76]	; 0x4c
    592e:	2302      	movs	r3, #2
    5930:	713b      	strb	r3, [r7, #4]
    5932:	2300      	movs	r3, #0
    5934:	717b      	strb	r3, [r7, #5]
    5936:	71bb      	strb	r3, [r7, #6]
    5938:	71fb      	strb	r3, [r7, #7]
    593a:	687a      	ldr	r2, [r7, #4]
    593c:	64ba      	str	r2, [r7, #72]	; 0x48
    593e:	4619      	mov	r1, r3
    5940:	f363 0100 	bfi	r1, r3, #0, #1
    5944:	f363 0141 	bfi	r1, r3, #1, #1
    5948:	f363 0182 	bfi	r1, r3, #2, #1
    594c:	f363 01c5 	bfi	r1, r3, #3, #3
    5950:	2201      	movs	r2, #1
    5952:	f362 1188 	bfi	r1, r2, #6, #3
    5956:	2208      	movs	r2, #8
    5958:	f362 2152 	bfi	r1, r2, #9, #10
    595c:	f363 41de 	bfi	r1, r3, #19, #12
    5960:	f363 71df 	bfi	r1, r3, #31, #1
    5964:	f107 0248 	add.w	r2, r7, #72	; 0x48
    5968:	485e      	ldr	r0, [pc, #376]	; (5ae4 <mem_manage_fault+0x2c8>)
    596a:	f7fd feaf 	bl	36cc <z_impl_z_log_msg_static_create>
    596e:	e788      	b.n	5882 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
    5970:	4b60      	ldr	r3, [pc, #384]	; (5af4 <mem_manage_fault+0x2d8>)
    5972:	667b      	str	r3, [r7, #100]	; 0x64
    5974:	2302      	movs	r3, #2
    5976:	713b      	strb	r3, [r7, #4]
    5978:	2300      	movs	r3, #0
    597a:	717b      	strb	r3, [r7, #5]
    597c:	71bb      	strb	r3, [r7, #6]
    597e:	71fb      	strb	r3, [r7, #7]
    5980:	687a      	ldr	r2, [r7, #4]
    5982:	663a      	str	r2, [r7, #96]	; 0x60
    5984:	4619      	mov	r1, r3
    5986:	f363 0100 	bfi	r1, r3, #0, #1
    598a:	f363 0141 	bfi	r1, r3, #1, #1
    598e:	f363 0182 	bfi	r1, r3, #2, #1
    5992:	f363 01c5 	bfi	r1, r3, #3, #3
    5996:	2201      	movs	r2, #1
    5998:	f362 1188 	bfi	r1, r2, #6, #3
    599c:	2208      	movs	r2, #8
    599e:	f362 2152 	bfi	r1, r2, #9, #10
    59a2:	f363 41de 	bfi	r1, r3, #19, #12
    59a6:	f363 71df 	bfi	r1, r3, #31, #1
    59aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
    59ae:	484d      	ldr	r0, [pc, #308]	; (5ae4 <mem_manage_fault+0x2c8>)
    59b0:	f7fd fe8c 	bl	36cc <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    59b4:	4b4c      	ldr	r3, [pc, #304]	; (5ae8 <mem_manage_fault+0x2cc>)
    59b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    59b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    59ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    59be:	f43f af65 	beq.w	588c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    59c2:	46e8      	mov	r8, sp
    59c4:	b088      	sub	sp, #32
    59c6:	466b      	mov	r3, sp
    59c8:	f113 0210 	adds.w	r2, r3, #16
    59cc:	d03a      	beq.n	5a44 <mem_manage_fault+0x228>
    59ce:	210c      	movs	r1, #12
    59d0:	b12a      	cbz	r2, 59de <mem_manage_fault+0x1c2>
    59d2:	2904      	cmp	r1, #4
    59d4:	dd03      	ble.n	59de <mem_manage_fault+0x1c2>
    59d6:	f8df c120 	ldr.w	ip, [pc, #288]	; 5af8 <mem_manage_fault+0x2dc>
    59da:	f8c3 c014 	str.w	ip, [r3, #20]
    59de:	b112      	cbz	r2, 59e6 <mem_manage_fault+0x1ca>
    59e0:	2908      	cmp	r1, #8
    59e2:	dd00      	ble.n	59e6 <mem_manage_fault+0x1ca>
    59e4:	6198      	str	r0, [r3, #24]
    59e6:	290b      	cmp	r1, #11
    59e8:	dd2f      	ble.n	5a4a <mem_manage_fault+0x22e>
    59ea:	f04f 0c0c 	mov.w	ip, #12
    59ee:	b13a      	cbz	r2, 5a00 <mem_manage_fault+0x1e4>
    59f0:	2103      	movs	r1, #3
    59f2:	7139      	strb	r1, [r7, #4]
    59f4:	2100      	movs	r1, #0
    59f6:	7179      	strb	r1, [r7, #5]
    59f8:	71b9      	strb	r1, [r7, #6]
    59fa:	71f9      	strb	r1, [r7, #7]
    59fc:	6878      	ldr	r0, [r7, #4]
    59fe:	6118      	str	r0, [r3, #16]
    5a00:	2100      	movs	r1, #0
    5a02:	f36f 0100 	bfc	r1, #0, #1
    5a06:	f36f 0141 	bfc	r1, #1, #1
    5a0a:	f36f 0182 	bfc	r1, #2, #1
    5a0e:	f36f 01c5 	bfc	r1, #3, #3
    5a12:	2301      	movs	r3, #1
    5a14:	f363 1188 	bfi	r1, r3, #6, #3
    5a18:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    5a1c:	f363 2152 	bfi	r1, r3, #9, #10
    5a20:	f36f 41de 	bfc	r1, #19, #12
    5a24:	f36f 71df 	bfc	r1, #31, #1
    5a28:	2300      	movs	r3, #0
    5a2a:	482e      	ldr	r0, [pc, #184]	; (5ae4 <mem_manage_fault+0x2c8>)
    5a2c:	f7fd fe4e 	bl	36cc <z_impl_z_log_msg_static_create>
    5a30:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    5a32:	2e00      	cmp	r6, #0
    5a34:	f43f af2a 	beq.w	588c <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5a38:	4a2b      	ldr	r2, [pc, #172]	; (5ae8 <mem_manage_fault+0x2cc>)
    5a3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5a40:	6293      	str	r3, [r2, #40]	; 0x28
    5a42:	e723      	b.n	588c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5a48:	e7c2      	b.n	59d0 <mem_manage_fault+0x1b4>
    5a4a:	f06f 0c1b 	mvn.w	ip, #27
    5a4e:	e7ce      	b.n	59ee <mem_manage_fault+0x1d2>
		PR_FAULT_INFO("  Instruction Access Violation");
    5a50:	4b2a      	ldr	r3, [pc, #168]	; (5afc <mem_manage_fault+0x2e0>)
    5a52:	67fb      	str	r3, [r7, #124]	; 0x7c
    5a54:	2302      	movs	r3, #2
    5a56:	713b      	strb	r3, [r7, #4]
    5a58:	2300      	movs	r3, #0
    5a5a:	717b      	strb	r3, [r7, #5]
    5a5c:	71bb      	strb	r3, [r7, #6]
    5a5e:	71fb      	strb	r3, [r7, #7]
    5a60:	687a      	ldr	r2, [r7, #4]
    5a62:	67ba      	str	r2, [r7, #120]	; 0x78
    5a64:	4619      	mov	r1, r3
    5a66:	f363 0100 	bfi	r1, r3, #0, #1
    5a6a:	f363 0141 	bfi	r1, r3, #1, #1
    5a6e:	f363 0182 	bfi	r1, r3, #2, #1
    5a72:	f363 01c5 	bfi	r1, r3, #3, #3
    5a76:	2201      	movs	r2, #1
    5a78:	f362 1188 	bfi	r1, r2, #6, #3
    5a7c:	2208      	movs	r2, #8
    5a7e:	f362 2152 	bfi	r1, r2, #9, #10
    5a82:	f363 41de 	bfi	r1, r3, #19, #12
    5a86:	f363 71df 	bfi	r1, r3, #31, #1
    5a8a:	f107 0278 	add.w	r2, r7, #120	; 0x78
    5a8e:	4815      	ldr	r0, [pc, #84]	; (5ae4 <mem_manage_fault+0x2c8>)
    5a90:	f7fd fe1c 	bl	36cc <z_impl_z_log_msg_static_create>
    5a94:	e700      	b.n	5898 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
    5a96:	4b1a      	ldr	r3, [pc, #104]	; (5b00 <mem_manage_fault+0x2e4>)
    5a98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    5a9c:	2302      	movs	r3, #2
    5a9e:	713b      	strb	r3, [r7, #4]
    5aa0:	2300      	movs	r3, #0
    5aa2:	717b      	strb	r3, [r7, #5]
    5aa4:	71bb      	strb	r3, [r7, #6]
    5aa6:	71fb      	strb	r3, [r7, #7]
    5aa8:	687a      	ldr	r2, [r7, #4]
    5aaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    5aae:	4619      	mov	r1, r3
    5ab0:	f363 0100 	bfi	r1, r3, #0, #1
    5ab4:	f363 0141 	bfi	r1, r3, #1, #1
    5ab8:	f363 0182 	bfi	r1, r3, #2, #1
    5abc:	f363 01c5 	bfi	r1, r3, #3, #3
    5ac0:	2201      	movs	r2, #1
    5ac2:	f362 1188 	bfi	r1, r2, #6, #3
    5ac6:	2208      	movs	r2, #8
    5ac8:	f362 2152 	bfi	r1, r2, #9, #10
    5acc:	f363 41de 	bfi	r1, r3, #19, #12
    5ad0:	f363 71df 	bfi	r1, r3, #31, #1
    5ad4:	f107 0290 	add.w	r2, r7, #144	; 0x90
    5ad8:	4802      	ldr	r0, [pc, #8]	; (5ae4 <mem_manage_fault+0x2c8>)
    5ada:	f7fd fdf7 	bl	36cc <z_impl_z_log_msg_static_create>
    5ade:	e6e1      	b.n	58a4 <mem_manage_fault+0x88>
    5ae0:	0002105c 	.word	0x0002105c
    5ae4:	000205c0 	.word	0x000205c0
    5ae8:	e000ed00 	.word	0xe000ed00
    5aec:	00021074 	.word	0x00021074
    5af0:	000210a8 	.word	0x000210a8
    5af4:	000210bc 	.word	0x000210bc
    5af8:	000210d4 	.word	0x000210d4
    5afc:	000210ec 	.word	0x000210ec
    5b00:	0002110c 	.word	0x0002110c

00005b04 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    5b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b08:	b0ac      	sub	sp, #176	; 0xb0
    5b0a:	af00      	add	r7, sp, #0
    5b0c:	4605      	mov	r5, r0
    5b0e:	460e      	mov	r6, r1
    5b10:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    5b12:	4bba      	ldr	r3, [pc, #744]	; (5dfc <bus_fault+0x2f8>)
    5b14:	61fb      	str	r3, [r7, #28]
    5b16:	2302      	movs	r3, #2
    5b18:	713b      	strb	r3, [r7, #4]
    5b1a:	2300      	movs	r3, #0
    5b1c:	717b      	strb	r3, [r7, #5]
    5b1e:	71bb      	strb	r3, [r7, #6]
    5b20:	71fb      	strb	r3, [r7, #7]
    5b22:	687a      	ldr	r2, [r7, #4]
    5b24:	61ba      	str	r2, [r7, #24]
    5b26:	4619      	mov	r1, r3
    5b28:	f363 0100 	bfi	r1, r3, #0, #1
    5b2c:	f363 0141 	bfi	r1, r3, #1, #1
    5b30:	f363 0182 	bfi	r1, r3, #2, #1
    5b34:	f363 01c5 	bfi	r1, r3, #3, #3
    5b38:	2201      	movs	r2, #1
    5b3a:	f362 1188 	bfi	r1, r2, #6, #3
    5b3e:	2208      	movs	r2, #8
    5b40:	f362 2152 	bfi	r1, r2, #9, #10
    5b44:	f363 41de 	bfi	r1, r3, #19, #12
    5b48:	f363 71df 	bfi	r1, r3, #31, #1
    5b4c:	f107 0218 	add.w	r2, r7, #24
    5b50:	48ab      	ldr	r0, [pc, #684]	; (5e00 <bus_fault+0x2fc>)
    5b52:	f7fd fdbb 	bl	36cc <z_impl_z_log_msg_static_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5b56:	4bab      	ldr	r3, [pc, #684]	; (5e04 <bus_fault+0x300>)
    5b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b5a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5b5e:	d12a      	bne.n	5bb6 <bus_fault+0xb2>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5b60:	4ba8      	ldr	r3, [pc, #672]	; (5e04 <bus_fault+0x300>)
    5b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b64:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5b68:	d148      	bne.n	5bfc <bus_fault+0xf8>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5b6a:	4ba6      	ldr	r3, [pc, #664]	; (5e04 <bus_fault+0x300>)
    5b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b6e:	f413 7f00 	tst.w	r3, #512	; 0x200
    5b72:	d166      	bne.n	5c42 <bus_fault+0x13e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5b74:	4ba3      	ldr	r3, [pc, #652]	; (5e04 <bus_fault+0x300>)
    5b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b78:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5b7c:	f040 80d1 	bne.w	5d22 <bus_fault+0x21e>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5b80:	4ba0      	ldr	r3, [pc, #640]	; (5e04 <bus_fault+0x300>)
    5b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b84:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b88:	f040 80ee 	bne.w	5d68 <bus_fault+0x264>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5b8c:	4b9d      	ldr	r3, [pc, #628]	; (5e04 <bus_fault+0x300>)
    5b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5b94:	f040 810d 	bne.w	5db2 <bus_fault+0x2ae>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5b98:	4a9a      	ldr	r2, [pc, #616]	; (5e04 <bus_fault+0x300>)
    5b9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b9c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5ba0:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    5ba2:	2101      	movs	r1, #1
    5ba4:	4628      	mov	r0, r5
    5ba6:	f014 f96b 	bl	19e80 <memory_fault_recoverable>
    5baa:	7020      	strb	r0, [r4, #0]

	return reason;
}
    5bac:	2000      	movs	r0, #0
    5bae:	37b0      	adds	r7, #176	; 0xb0
    5bb0:	46bd      	mov	sp, r7
    5bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    5bb6:	4b94      	ldr	r3, [pc, #592]	; (5e08 <bus_fault+0x304>)
    5bb8:	637b      	str	r3, [r7, #52]	; 0x34
    5bba:	2302      	movs	r3, #2
    5bbc:	713b      	strb	r3, [r7, #4]
    5bbe:	2300      	movs	r3, #0
    5bc0:	717b      	strb	r3, [r7, #5]
    5bc2:	71bb      	strb	r3, [r7, #6]
    5bc4:	71fb      	strb	r3, [r7, #7]
    5bc6:	687a      	ldr	r2, [r7, #4]
    5bc8:	633a      	str	r2, [r7, #48]	; 0x30
    5bca:	4619      	mov	r1, r3
    5bcc:	f363 0100 	bfi	r1, r3, #0, #1
    5bd0:	f363 0141 	bfi	r1, r3, #1, #1
    5bd4:	f363 0182 	bfi	r1, r3, #2, #1
    5bd8:	f363 01c5 	bfi	r1, r3, #3, #3
    5bdc:	2201      	movs	r2, #1
    5bde:	f362 1188 	bfi	r1, r2, #6, #3
    5be2:	2208      	movs	r2, #8
    5be4:	f362 2152 	bfi	r1, r2, #9, #10
    5be8:	f363 41de 	bfi	r1, r3, #19, #12
    5bec:	f363 71df 	bfi	r1, r3, #31, #1
    5bf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5bf4:	4882      	ldr	r0, [pc, #520]	; (5e00 <bus_fault+0x2fc>)
    5bf6:	f7fd fd69 	bl	36cc <z_impl_z_log_msg_static_create>
    5bfa:	e7b1      	b.n	5b60 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    5bfc:	4b83      	ldr	r3, [pc, #524]	; (5e0c <bus_fault+0x308>)
    5bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    5c00:	2302      	movs	r3, #2
    5c02:	713b      	strb	r3, [r7, #4]
    5c04:	2300      	movs	r3, #0
    5c06:	717b      	strb	r3, [r7, #5]
    5c08:	71bb      	strb	r3, [r7, #6]
    5c0a:	71fb      	strb	r3, [r7, #7]
    5c0c:	687a      	ldr	r2, [r7, #4]
    5c0e:	64ba      	str	r2, [r7, #72]	; 0x48
    5c10:	4619      	mov	r1, r3
    5c12:	f363 0100 	bfi	r1, r3, #0, #1
    5c16:	f363 0141 	bfi	r1, r3, #1, #1
    5c1a:	f363 0182 	bfi	r1, r3, #2, #1
    5c1e:	f363 01c5 	bfi	r1, r3, #3, #3
    5c22:	2201      	movs	r2, #1
    5c24:	f362 1188 	bfi	r1, r2, #6, #3
    5c28:	2208      	movs	r2, #8
    5c2a:	f362 2152 	bfi	r1, r2, #9, #10
    5c2e:	f363 41de 	bfi	r1, r3, #19, #12
    5c32:	f363 71df 	bfi	r1, r3, #31, #1
    5c36:	f107 0248 	add.w	r2, r7, #72	; 0x48
    5c3a:	4871      	ldr	r0, [pc, #452]	; (5e00 <bus_fault+0x2fc>)
    5c3c:	f7fd fd46 	bl	36cc <z_impl_z_log_msg_static_create>
    5c40:	e793      	b.n	5b6a <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
    5c42:	4b73      	ldr	r3, [pc, #460]	; (5e10 <bus_fault+0x30c>)
    5c44:	667b      	str	r3, [r7, #100]	; 0x64
    5c46:	2302      	movs	r3, #2
    5c48:	713b      	strb	r3, [r7, #4]
    5c4a:	2300      	movs	r3, #0
    5c4c:	717b      	strb	r3, [r7, #5]
    5c4e:	71bb      	strb	r3, [r7, #6]
    5c50:	71fb      	strb	r3, [r7, #7]
    5c52:	687a      	ldr	r2, [r7, #4]
    5c54:	663a      	str	r2, [r7, #96]	; 0x60
    5c56:	4619      	mov	r1, r3
    5c58:	f363 0100 	bfi	r1, r3, #0, #1
    5c5c:	f363 0141 	bfi	r1, r3, #1, #1
    5c60:	f363 0182 	bfi	r1, r3, #2, #1
    5c64:	f363 01c5 	bfi	r1, r3, #3, #3
    5c68:	2201      	movs	r2, #1
    5c6a:	f362 1188 	bfi	r1, r2, #6, #3
    5c6e:	2208      	movs	r2, #8
    5c70:	f362 2152 	bfi	r1, r2, #9, #10
    5c74:	f363 41de 	bfi	r1, r3, #19, #12
    5c78:	f363 71df 	bfi	r1, r3, #31, #1
    5c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
    5c80:	485f      	ldr	r0, [pc, #380]	; (5e00 <bus_fault+0x2fc>)
    5c82:	f7fd fd23 	bl	36cc <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    5c86:	4b5f      	ldr	r3, [pc, #380]	; (5e04 <bus_fault+0x300>)
    5c88:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c8c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5c90:	f43f af70 	beq.w	5b74 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5c94:	46e8      	mov	r8, sp
    5c96:	b088      	sub	sp, #32
    5c98:	466b      	mov	r3, sp
    5c9a:	f113 0210 	adds.w	r2, r3, #16
    5c9e:	d03a      	beq.n	5d16 <bus_fault+0x212>
    5ca0:	210c      	movs	r1, #12
    5ca2:	b12a      	cbz	r2, 5cb0 <bus_fault+0x1ac>
    5ca4:	2904      	cmp	r1, #4
    5ca6:	dd03      	ble.n	5cb0 <bus_fault+0x1ac>
    5ca8:	f8df c168 	ldr.w	ip, [pc, #360]	; 5e14 <bus_fault+0x310>
    5cac:	f8c3 c014 	str.w	ip, [r3, #20]
    5cb0:	b112      	cbz	r2, 5cb8 <bus_fault+0x1b4>
    5cb2:	2908      	cmp	r1, #8
    5cb4:	dd00      	ble.n	5cb8 <bus_fault+0x1b4>
    5cb6:	6198      	str	r0, [r3, #24]
    5cb8:	290b      	cmp	r1, #11
    5cba:	dd2f      	ble.n	5d1c <bus_fault+0x218>
    5cbc:	f04f 0c0c 	mov.w	ip, #12
    5cc0:	b13a      	cbz	r2, 5cd2 <bus_fault+0x1ce>
    5cc2:	2103      	movs	r1, #3
    5cc4:	7139      	strb	r1, [r7, #4]
    5cc6:	2100      	movs	r1, #0
    5cc8:	7179      	strb	r1, [r7, #5]
    5cca:	71b9      	strb	r1, [r7, #6]
    5ccc:	71f9      	strb	r1, [r7, #7]
    5cce:	6878      	ldr	r0, [r7, #4]
    5cd0:	6118      	str	r0, [r3, #16]
    5cd2:	2100      	movs	r1, #0
    5cd4:	f36f 0100 	bfc	r1, #0, #1
    5cd8:	f36f 0141 	bfc	r1, #1, #1
    5cdc:	f36f 0182 	bfc	r1, #2, #1
    5ce0:	f36f 01c5 	bfc	r1, #3, #3
    5ce4:	2301      	movs	r3, #1
    5ce6:	f363 1188 	bfi	r1, r3, #6, #3
    5cea:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    5cee:	f363 2152 	bfi	r1, r3, #9, #10
    5cf2:	f36f 41de 	bfc	r1, #19, #12
    5cf6:	f36f 71df 	bfc	r1, #31, #1
    5cfa:	2300      	movs	r3, #0
    5cfc:	4840      	ldr	r0, [pc, #256]	; (5e00 <bus_fault+0x2fc>)
    5cfe:	f7fd fce5 	bl	36cc <z_impl_z_log_msg_static_create>
    5d02:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    5d04:	2e00      	cmp	r6, #0
    5d06:	f43f af35 	beq.w	5b74 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5d0a:	4a3e      	ldr	r2, [pc, #248]	; (5e04 <bus_fault+0x300>)
    5d0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5d12:	6293      	str	r3, [r2, #40]	; 0x28
    5d14:	e72e      	b.n	5b74 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5d16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5d1a:	e7c2      	b.n	5ca2 <bus_fault+0x19e>
    5d1c:	f06f 0c1b 	mvn.w	ip, #27
    5d20:	e7ce      	b.n	5cc0 <bus_fault+0x1bc>
		PR_FAULT_INFO("  Imprecise data bus error");
    5d22:	4b3d      	ldr	r3, [pc, #244]	; (5e18 <bus_fault+0x314>)
    5d24:	67fb      	str	r3, [r7, #124]	; 0x7c
    5d26:	2302      	movs	r3, #2
    5d28:	713b      	strb	r3, [r7, #4]
    5d2a:	2300      	movs	r3, #0
    5d2c:	717b      	strb	r3, [r7, #5]
    5d2e:	71bb      	strb	r3, [r7, #6]
    5d30:	71fb      	strb	r3, [r7, #7]
    5d32:	687a      	ldr	r2, [r7, #4]
    5d34:	67ba      	str	r2, [r7, #120]	; 0x78
    5d36:	4619      	mov	r1, r3
    5d38:	f363 0100 	bfi	r1, r3, #0, #1
    5d3c:	f363 0141 	bfi	r1, r3, #1, #1
    5d40:	f363 0182 	bfi	r1, r3, #2, #1
    5d44:	f363 01c5 	bfi	r1, r3, #3, #3
    5d48:	2201      	movs	r2, #1
    5d4a:	f362 1188 	bfi	r1, r2, #6, #3
    5d4e:	2208      	movs	r2, #8
    5d50:	f362 2152 	bfi	r1, r2, #9, #10
    5d54:	f363 41de 	bfi	r1, r3, #19, #12
    5d58:	f363 71df 	bfi	r1, r3, #31, #1
    5d5c:	f107 0278 	add.w	r2, r7, #120	; 0x78
    5d60:	4827      	ldr	r0, [pc, #156]	; (5e00 <bus_fault+0x2fc>)
    5d62:	f7fd fcb3 	bl	36cc <z_impl_z_log_msg_static_create>
    5d66:	e70b      	b.n	5b80 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
    5d68:	4b2c      	ldr	r3, [pc, #176]	; (5e1c <bus_fault+0x318>)
    5d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    5d6e:	2302      	movs	r3, #2
    5d70:	713b      	strb	r3, [r7, #4]
    5d72:	2300      	movs	r3, #0
    5d74:	717b      	strb	r3, [r7, #5]
    5d76:	71bb      	strb	r3, [r7, #6]
    5d78:	71fb      	strb	r3, [r7, #7]
    5d7a:	687a      	ldr	r2, [r7, #4]
    5d7c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    5d80:	4619      	mov	r1, r3
    5d82:	f363 0100 	bfi	r1, r3, #0, #1
    5d86:	f363 0141 	bfi	r1, r3, #1, #1
    5d8a:	f363 0182 	bfi	r1, r3, #2, #1
    5d8e:	f363 01c5 	bfi	r1, r3, #3, #3
    5d92:	2201      	movs	r2, #1
    5d94:	f362 1188 	bfi	r1, r2, #6, #3
    5d98:	2208      	movs	r2, #8
    5d9a:	f362 2152 	bfi	r1, r2, #9, #10
    5d9e:	f363 41de 	bfi	r1, r3, #19, #12
    5da2:	f363 71df 	bfi	r1, r3, #31, #1
    5da6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    5daa:	4815      	ldr	r0, [pc, #84]	; (5e00 <bus_fault+0x2fc>)
    5dac:	f7fd fc8e 	bl	36cc <z_impl_z_log_msg_static_create>
    5db0:	e6f2      	b.n	5b98 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5db2:	4b1b      	ldr	r3, [pc, #108]	; (5e20 <bus_fault+0x31c>)
    5db4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    5db8:	2302      	movs	r3, #2
    5dba:	713b      	strb	r3, [r7, #4]
    5dbc:	2300      	movs	r3, #0
    5dbe:	717b      	strb	r3, [r7, #5]
    5dc0:	71bb      	strb	r3, [r7, #6]
    5dc2:	71fb      	strb	r3, [r7, #7]
    5dc4:	687a      	ldr	r2, [r7, #4]
    5dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    5dca:	4619      	mov	r1, r3
    5dcc:	f363 0100 	bfi	r1, r3, #0, #1
    5dd0:	f363 0141 	bfi	r1, r3, #1, #1
    5dd4:	f363 0182 	bfi	r1, r3, #2, #1
    5dd8:	f363 01c5 	bfi	r1, r3, #3, #3
    5ddc:	2201      	movs	r2, #1
    5dde:	f362 1188 	bfi	r1, r2, #6, #3
    5de2:	2208      	movs	r2, #8
    5de4:	f362 2152 	bfi	r1, r2, #9, #10
    5de8:	f363 41de 	bfi	r1, r3, #19, #12
    5dec:	f363 71df 	bfi	r1, r3, #31, #1
    5df0:	f107 0290 	add.w	r2, r7, #144	; 0x90
    5df4:	4802      	ldr	r0, [pc, #8]	; (5e00 <bus_fault+0x2fc>)
    5df6:	f7fd fc69 	bl	36cc <z_impl_z_log_msg_static_create>
    5dfa:	e6cd      	b.n	5b98 <bus_fault+0x94>
    5dfc:	0002113c 	.word	0x0002113c
    5e00:	000205c0 	.word	0x000205c0
    5e04:	e000ed00 	.word	0xe000ed00
    5e08:	00021154 	.word	0x00021154
    5e0c:	000210a8 	.word	0x000210a8
    5e10:	00021168 	.word	0x00021168
    5e14:	00021184 	.word	0x00021184
    5e18:	0002119c 	.word	0x0002119c
    5e1c:	000211b8 	.word	0x000211b8
    5e20:	0002110c 	.word	0x0002110c

00005e24 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    5e24:	b510      	push	{r4, lr}
    5e26:	b0b2      	sub	sp, #200	; 0xc8
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    5e28:	4baf      	ldr	r3, [pc, #700]	; (60e8 <usage_fault+0x2c4>)
    5e2a:	9307      	str	r3, [sp, #28]
    5e2c:	2302      	movs	r3, #2
    5e2e:	f88d 3004 	strb.w	r3, [sp, #4]
    5e32:	2300      	movs	r3, #0
    5e34:	f88d 3005 	strb.w	r3, [sp, #5]
    5e38:	f88d 3006 	strb.w	r3, [sp, #6]
    5e3c:	f88d 3007 	strb.w	r3, [sp, #7]
    5e40:	9a01      	ldr	r2, [sp, #4]
    5e42:	9206      	str	r2, [sp, #24]
    5e44:	4619      	mov	r1, r3
    5e46:	f363 0100 	bfi	r1, r3, #0, #1
    5e4a:	f363 0141 	bfi	r1, r3, #1, #1
    5e4e:	f363 0182 	bfi	r1, r3, #2, #1
    5e52:	f363 01c5 	bfi	r1, r3, #3, #3
    5e56:	2201      	movs	r2, #1
    5e58:	f362 1188 	bfi	r1, r2, #6, #3
    5e5c:	2208      	movs	r2, #8
    5e5e:	f362 2152 	bfi	r1, r2, #9, #10
    5e62:	f363 41de 	bfi	r1, r3, #19, #12
    5e66:	f363 71df 	bfi	r1, r3, #31, #1
    5e6a:	aa06      	add	r2, sp, #24
    5e6c:	489f      	ldr	r0, [pc, #636]	; (60ec <usage_fault+0x2c8>)
    5e6e:	f7fd fc2d 	bl	36cc <z_impl_z_log_msg_static_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5e72:	4b9f      	ldr	r3, [pc, #636]	; (60f0 <usage_fault+0x2cc>)
    5e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    5e7a:	d12b      	bne.n	5ed4 <usage_fault+0xb0>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5e7c:	4b9c      	ldr	r3, [pc, #624]	; (60f0 <usage_fault+0x2cc>)
    5e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e80:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    5e84:	d14c      	bne.n	5f20 <usage_fault+0xfc>
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    5e86:	4b9a      	ldr	r3, [pc, #616]	; (60f0 <usage_fault+0x2cc>)
    5e88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    5e8a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    5e8e:	d16d      	bne.n	5f6c <usage_fault+0x148>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5e90:	4b97      	ldr	r3, [pc, #604]	; (60f0 <usage_fault+0x2cc>)
    5e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e94:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5e98:	f040 808e 	bne.w	5fb8 <usage_fault+0x194>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5e9c:	4b94      	ldr	r3, [pc, #592]	; (60f0 <usage_fault+0x2cc>)
    5e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ea0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    5ea4:	f040 80ae 	bne.w	6004 <usage_fault+0x1e0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5ea8:	4b91      	ldr	r3, [pc, #580]	; (60f0 <usage_fault+0x2cc>)
    5eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5eac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5eb0:	f040 80ce 	bne.w	6050 <usage_fault+0x22c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5eb4:	4b8e      	ldr	r3, [pc, #568]	; (60f0 <usage_fault+0x2cc>)
    5eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5eb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5ebc:	f040 80ee 	bne.w	609c <usage_fault+0x278>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5ec0:	4a8b      	ldr	r2, [pc, #556]	; (60f0 <usage_fault+0x2cc>)
    5ec2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ec4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5ec8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5ecc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5ece:	4620      	mov	r0, r4
    5ed0:	b032      	add	sp, #200	; 0xc8
    5ed2:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
    5ed4:	4b87      	ldr	r3, [pc, #540]	; (60f4 <usage_fault+0x2d0>)
    5ed6:	930d      	str	r3, [sp, #52]	; 0x34
    5ed8:	2302      	movs	r3, #2
    5eda:	f88d 3004 	strb.w	r3, [sp, #4]
    5ede:	2300      	movs	r3, #0
    5ee0:	f88d 3005 	strb.w	r3, [sp, #5]
    5ee4:	f88d 3006 	strb.w	r3, [sp, #6]
    5ee8:	f88d 3007 	strb.w	r3, [sp, #7]
    5eec:	9a01      	ldr	r2, [sp, #4]
    5eee:	920c      	str	r2, [sp, #48]	; 0x30
    5ef0:	4619      	mov	r1, r3
    5ef2:	f363 0100 	bfi	r1, r3, #0, #1
    5ef6:	f363 0141 	bfi	r1, r3, #1, #1
    5efa:	f363 0182 	bfi	r1, r3, #2, #1
    5efe:	f363 01c5 	bfi	r1, r3, #3, #3
    5f02:	2201      	movs	r2, #1
    5f04:	f362 1188 	bfi	r1, r2, #6, #3
    5f08:	2208      	movs	r2, #8
    5f0a:	f362 2152 	bfi	r1, r2, #9, #10
    5f0e:	f363 41de 	bfi	r1, r3, #19, #12
    5f12:	f363 71df 	bfi	r1, r3, #31, #1
    5f16:	aa0c      	add	r2, sp, #48	; 0x30
    5f18:	4874      	ldr	r0, [pc, #464]	; (60ec <usage_fault+0x2c8>)
    5f1a:	f7fd fbd7 	bl	36cc <z_impl_z_log_msg_static_create>
    5f1e:	e7ad      	b.n	5e7c <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    5f20:	4b75      	ldr	r3, [pc, #468]	; (60f8 <usage_fault+0x2d4>)
    5f22:	9313      	str	r3, [sp, #76]	; 0x4c
    5f24:	2302      	movs	r3, #2
    5f26:	f88d 3004 	strb.w	r3, [sp, #4]
    5f2a:	2300      	movs	r3, #0
    5f2c:	f88d 3005 	strb.w	r3, [sp, #5]
    5f30:	f88d 3006 	strb.w	r3, [sp, #6]
    5f34:	f88d 3007 	strb.w	r3, [sp, #7]
    5f38:	9a01      	ldr	r2, [sp, #4]
    5f3a:	9212      	str	r2, [sp, #72]	; 0x48
    5f3c:	4619      	mov	r1, r3
    5f3e:	f363 0100 	bfi	r1, r3, #0, #1
    5f42:	f363 0141 	bfi	r1, r3, #1, #1
    5f46:	f363 0182 	bfi	r1, r3, #2, #1
    5f4a:	f363 01c5 	bfi	r1, r3, #3, #3
    5f4e:	2201      	movs	r2, #1
    5f50:	f362 1188 	bfi	r1, r2, #6, #3
    5f54:	2208      	movs	r2, #8
    5f56:	f362 2152 	bfi	r1, r2, #9, #10
    5f5a:	f363 41de 	bfi	r1, r3, #19, #12
    5f5e:	f363 71df 	bfi	r1, r3, #31, #1
    5f62:	aa12      	add	r2, sp, #72	; 0x48
    5f64:	4861      	ldr	r0, [pc, #388]	; (60ec <usage_fault+0x2c8>)
    5f66:	f7fd fbb1 	bl	36cc <z_impl_z_log_msg_static_create>
    5f6a:	e78c      	b.n	5e86 <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    5f6c:	4b63      	ldr	r3, [pc, #396]	; (60fc <usage_fault+0x2d8>)
    5f6e:	9319      	str	r3, [sp, #100]	; 0x64
    5f70:	2402      	movs	r4, #2
    5f72:	f88d 4004 	strb.w	r4, [sp, #4]
    5f76:	2300      	movs	r3, #0
    5f78:	f88d 3005 	strb.w	r3, [sp, #5]
    5f7c:	f88d 3006 	strb.w	r3, [sp, #6]
    5f80:	f88d 3007 	strb.w	r3, [sp, #7]
    5f84:	9a01      	ldr	r2, [sp, #4]
    5f86:	9218      	str	r2, [sp, #96]	; 0x60
    5f88:	4619      	mov	r1, r3
    5f8a:	f363 0100 	bfi	r1, r3, #0, #1
    5f8e:	f363 0141 	bfi	r1, r3, #1, #1
    5f92:	f363 0182 	bfi	r1, r3, #2, #1
    5f96:	f363 01c5 	bfi	r1, r3, #3, #3
    5f9a:	2201      	movs	r2, #1
    5f9c:	f362 1188 	bfi	r1, r2, #6, #3
    5fa0:	2208      	movs	r2, #8
    5fa2:	f362 2152 	bfi	r1, r2, #9, #10
    5fa6:	f363 41de 	bfi	r1, r3, #19, #12
    5faa:	f363 71df 	bfi	r1, r3, #31, #1
    5fae:	aa18      	add	r2, sp, #96	; 0x60
    5fb0:	484e      	ldr	r0, [pc, #312]	; (60ec <usage_fault+0x2c8>)
    5fb2:	f7fd fb8b 	bl	36cc <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
    5fb6:	e76b      	b.n	5e90 <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    5fb8:	4b51      	ldr	r3, [pc, #324]	; (6100 <usage_fault+0x2dc>)
    5fba:	931f      	str	r3, [sp, #124]	; 0x7c
    5fbc:	2302      	movs	r3, #2
    5fbe:	f88d 3004 	strb.w	r3, [sp, #4]
    5fc2:	2300      	movs	r3, #0
    5fc4:	f88d 3005 	strb.w	r3, [sp, #5]
    5fc8:	f88d 3006 	strb.w	r3, [sp, #6]
    5fcc:	f88d 3007 	strb.w	r3, [sp, #7]
    5fd0:	9a01      	ldr	r2, [sp, #4]
    5fd2:	921e      	str	r2, [sp, #120]	; 0x78
    5fd4:	4619      	mov	r1, r3
    5fd6:	f363 0100 	bfi	r1, r3, #0, #1
    5fda:	f363 0141 	bfi	r1, r3, #1, #1
    5fde:	f363 0182 	bfi	r1, r3, #2, #1
    5fe2:	f363 01c5 	bfi	r1, r3, #3, #3
    5fe6:	2201      	movs	r2, #1
    5fe8:	f362 1188 	bfi	r1, r2, #6, #3
    5fec:	2208      	movs	r2, #8
    5fee:	f362 2152 	bfi	r1, r2, #9, #10
    5ff2:	f363 41de 	bfi	r1, r3, #19, #12
    5ff6:	f363 71df 	bfi	r1, r3, #31, #1
    5ffa:	aa1e      	add	r2, sp, #120	; 0x78
    5ffc:	483b      	ldr	r0, [pc, #236]	; (60ec <usage_fault+0x2c8>)
    5ffe:	f7fd fb65 	bl	36cc <z_impl_z_log_msg_static_create>
    6002:	e74b      	b.n	5e9c <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6004:	4b3f      	ldr	r3, [pc, #252]	; (6104 <usage_fault+0x2e0>)
    6006:	9325      	str	r3, [sp, #148]	; 0x94
    6008:	2302      	movs	r3, #2
    600a:	f88d 3004 	strb.w	r3, [sp, #4]
    600e:	2300      	movs	r3, #0
    6010:	f88d 3005 	strb.w	r3, [sp, #5]
    6014:	f88d 3006 	strb.w	r3, [sp, #6]
    6018:	f88d 3007 	strb.w	r3, [sp, #7]
    601c:	9a01      	ldr	r2, [sp, #4]
    601e:	9224      	str	r2, [sp, #144]	; 0x90
    6020:	4619      	mov	r1, r3
    6022:	f363 0100 	bfi	r1, r3, #0, #1
    6026:	f363 0141 	bfi	r1, r3, #1, #1
    602a:	f363 0182 	bfi	r1, r3, #2, #1
    602e:	f363 01c5 	bfi	r1, r3, #3, #3
    6032:	2201      	movs	r2, #1
    6034:	f362 1188 	bfi	r1, r2, #6, #3
    6038:	2208      	movs	r2, #8
    603a:	f362 2152 	bfi	r1, r2, #9, #10
    603e:	f363 41de 	bfi	r1, r3, #19, #12
    6042:	f363 71df 	bfi	r1, r3, #31, #1
    6046:	aa24      	add	r2, sp, #144	; 0x90
    6048:	4828      	ldr	r0, [pc, #160]	; (60ec <usage_fault+0x2c8>)
    604a:	f7fd fb3f 	bl	36cc <z_impl_z_log_msg_static_create>
    604e:	e72b      	b.n	5ea8 <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6050:	4b2d      	ldr	r3, [pc, #180]	; (6108 <usage_fault+0x2e4>)
    6052:	932b      	str	r3, [sp, #172]	; 0xac
    6054:	2302      	movs	r3, #2
    6056:	f88d 3004 	strb.w	r3, [sp, #4]
    605a:	2300      	movs	r3, #0
    605c:	f88d 3005 	strb.w	r3, [sp, #5]
    6060:	f88d 3006 	strb.w	r3, [sp, #6]
    6064:	f88d 3007 	strb.w	r3, [sp, #7]
    6068:	9a01      	ldr	r2, [sp, #4]
    606a:	922a      	str	r2, [sp, #168]	; 0xa8
    606c:	4619      	mov	r1, r3
    606e:	f363 0100 	bfi	r1, r3, #0, #1
    6072:	f363 0141 	bfi	r1, r3, #1, #1
    6076:	f363 0182 	bfi	r1, r3, #2, #1
    607a:	f363 01c5 	bfi	r1, r3, #3, #3
    607e:	2201      	movs	r2, #1
    6080:	f362 1188 	bfi	r1, r2, #6, #3
    6084:	2208      	movs	r2, #8
    6086:	f362 2152 	bfi	r1, r2, #9, #10
    608a:	f363 41de 	bfi	r1, r3, #19, #12
    608e:	f363 71df 	bfi	r1, r3, #31, #1
    6092:	aa2a      	add	r2, sp, #168	; 0xa8
    6094:	4815      	ldr	r0, [pc, #84]	; (60ec <usage_fault+0x2c8>)
    6096:	f7fd fb19 	bl	36cc <z_impl_z_log_msg_static_create>
    609a:	e70b      	b.n	5eb4 <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    609c:	4b1b      	ldr	r3, [pc, #108]	; (610c <usage_fault+0x2e8>)
    609e:	9331      	str	r3, [sp, #196]	; 0xc4
    60a0:	2302      	movs	r3, #2
    60a2:	f88d 3004 	strb.w	r3, [sp, #4]
    60a6:	2300      	movs	r3, #0
    60a8:	f88d 3005 	strb.w	r3, [sp, #5]
    60ac:	f88d 3006 	strb.w	r3, [sp, #6]
    60b0:	f88d 3007 	strb.w	r3, [sp, #7]
    60b4:	9a01      	ldr	r2, [sp, #4]
    60b6:	9230      	str	r2, [sp, #192]	; 0xc0
    60b8:	4619      	mov	r1, r3
    60ba:	f363 0100 	bfi	r1, r3, #0, #1
    60be:	f363 0141 	bfi	r1, r3, #1, #1
    60c2:	f363 0182 	bfi	r1, r3, #2, #1
    60c6:	f363 01c5 	bfi	r1, r3, #3, #3
    60ca:	2201      	movs	r2, #1
    60cc:	f362 1188 	bfi	r1, r2, #6, #3
    60d0:	2208      	movs	r2, #8
    60d2:	f362 2152 	bfi	r1, r2, #9, #10
    60d6:	f363 41de 	bfi	r1, r3, #19, #12
    60da:	f363 71df 	bfi	r1, r3, #31, #1
    60de:	aa30      	add	r2, sp, #192	; 0xc0
    60e0:	4802      	ldr	r0, [pc, #8]	; (60ec <usage_fault+0x2c8>)
    60e2:	f7fd faf3 	bl	36cc <z_impl_z_log_msg_static_create>
    60e6:	e6eb      	b.n	5ec0 <usage_fault+0x9c>
    60e8:	000211d0 	.word	0x000211d0
    60ec:	000205c0 	.word	0x000205c0
    60f0:	e000ed00 	.word	0xe000ed00
    60f4:	000211e8 	.word	0x000211e8
    60f8:	000211fc 	.word	0x000211fc
    60fc:	00021218 	.word	0x00021218
    6100:	00021244 	.word	0x00021244
    6104:	00021264 	.word	0x00021264
    6108:	0002128c 	.word	0x0002128c
    610c:	000212a8 	.word	0x000212a8

00006110 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    6110:	b5f0      	push	{r4, r5, r6, r7, lr}
    6112:	b09b      	sub	sp, #108	; 0x6c
    6114:	af00      	add	r7, sp, #0
    6116:	4606      	mov	r6, r0
    6118:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    611a:	4b84      	ldr	r3, [pc, #528]	; (632c <hard_fault+0x21c>)
    611c:	61fb      	str	r3, [r7, #28]
    611e:	2302      	movs	r3, #2
    6120:	713b      	strb	r3, [r7, #4]
    6122:	2400      	movs	r4, #0
    6124:	717c      	strb	r4, [r7, #5]
    6126:	71bc      	strb	r4, [r7, #6]
    6128:	71fc      	strb	r4, [r7, #7]
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	61bb      	str	r3, [r7, #24]
    612e:	4621      	mov	r1, r4
    6130:	f364 0100 	bfi	r1, r4, #0, #1
    6134:	f364 0141 	bfi	r1, r4, #1, #1
    6138:	f364 0182 	bfi	r1, r4, #2, #1
    613c:	f364 01c5 	bfi	r1, r4, #3, #3
    6140:	2301      	movs	r3, #1
    6142:	f363 1188 	bfi	r1, r3, #6, #3
    6146:	2308      	movs	r3, #8
    6148:	f363 2152 	bfi	r1, r3, #9, #10
    614c:	f364 41de 	bfi	r1, r4, #19, #12
    6150:	f364 71df 	bfi	r1, r4, #31, #1
    6154:	4623      	mov	r3, r4
    6156:	f107 0218 	add.w	r2, r7, #24
    615a:	4875      	ldr	r0, [pc, #468]	; (6330 <hard_fault+0x220>)
    615c:	f7fd fab6 	bl	36cc <z_impl_z_log_msg_static_create>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    6160:	702c      	strb	r4, [r5, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6162:	4b74      	ldr	r3, [pc, #464]	; (6334 <hard_fault+0x224>)
    6164:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6166:	f014 0402 	ands.w	r4, r4, #2
    616a:	d10c      	bne.n	6186 <hard_fault+0x76>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    616c:	4b71      	ldr	r3, [pc, #452]	; (6334 <hard_fault+0x224>)
    616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6170:	2b00      	cmp	r3, #0
    6172:	db2c      	blt.n	61ce <hard_fault+0xbe>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6174:	4b6f      	ldr	r3, [pc, #444]	; (6334 <hard_fault+0x224>)
    6176:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6178:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    617c:	d14a      	bne.n	6214 <hard_fault+0x104>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    617e:	4620      	mov	r0, r4
    6180:	376c      	adds	r7, #108	; 0x6c
    6182:	46bd      	mov	sp, r7
    6184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    6186:	4b6c      	ldr	r3, [pc, #432]	; (6338 <hard_fault+0x228>)
    6188:	667b      	str	r3, [r7, #100]	; 0x64
    618a:	2302      	movs	r3, #2
    618c:	713b      	strb	r3, [r7, #4]
    618e:	2400      	movs	r4, #0
    6190:	717c      	strb	r4, [r7, #5]
    6192:	71bc      	strb	r4, [r7, #6]
    6194:	71fc      	strb	r4, [r7, #7]
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	663b      	str	r3, [r7, #96]	; 0x60
    619a:	4621      	mov	r1, r4
    619c:	f364 0100 	bfi	r1, r4, #0, #1
    61a0:	f364 0141 	bfi	r1, r4, #1, #1
    61a4:	f364 0182 	bfi	r1, r4, #2, #1
    61a8:	f364 01c5 	bfi	r1, r4, #3, #3
    61ac:	2301      	movs	r3, #1
    61ae:	f363 1188 	bfi	r1, r3, #6, #3
    61b2:	2308      	movs	r3, #8
    61b4:	f363 2152 	bfi	r1, r3, #9, #10
    61b8:	f364 41de 	bfi	r1, r4, #19, #12
    61bc:	f364 71df 	bfi	r1, r4, #31, #1
    61c0:	4623      	mov	r3, r4
    61c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
    61c6:	485a      	ldr	r0, [pc, #360]	; (6330 <hard_fault+0x220>)
    61c8:	f7fd fa80 	bl	36cc <z_impl_z_log_msg_static_create>
    61cc:	e7d7      	b.n	617e <hard_fault+0x6e>
		PR_EXC("  Debug event");
    61ce:	4b5b      	ldr	r3, [pc, #364]	; (633c <hard_fault+0x22c>)
    61d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    61d2:	2302      	movs	r3, #2
    61d4:	713b      	strb	r3, [r7, #4]
    61d6:	2300      	movs	r3, #0
    61d8:	717b      	strb	r3, [r7, #5]
    61da:	71bb      	strb	r3, [r7, #6]
    61dc:	71fb      	strb	r3, [r7, #7]
    61de:	687a      	ldr	r2, [r7, #4]
    61e0:	64ba      	str	r2, [r7, #72]	; 0x48
    61e2:	4619      	mov	r1, r3
    61e4:	f363 0100 	bfi	r1, r3, #0, #1
    61e8:	f363 0141 	bfi	r1, r3, #1, #1
    61ec:	f363 0182 	bfi	r1, r3, #2, #1
    61f0:	f363 01c5 	bfi	r1, r3, #3, #3
    61f4:	2201      	movs	r2, #1
    61f6:	f362 1188 	bfi	r1, r2, #6, #3
    61fa:	2208      	movs	r2, #8
    61fc:	f362 2152 	bfi	r1, r2, #9, #10
    6200:	f363 41de 	bfi	r1, r3, #19, #12
    6204:	f363 71df 	bfi	r1, r3, #31, #1
    6208:	f107 0248 	add.w	r2, r7, #72	; 0x48
    620c:	4848      	ldr	r0, [pc, #288]	; (6330 <hard_fault+0x220>)
    620e:	f7fd fa5d 	bl	36cc <z_impl_z_log_msg_static_create>
    6212:	e7b4      	b.n	617e <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
    6214:	4b4a      	ldr	r3, [pc, #296]	; (6340 <hard_fault+0x230>)
    6216:	637b      	str	r3, [r7, #52]	; 0x34
    6218:	2302      	movs	r3, #2
    621a:	713b      	strb	r3, [r7, #4]
    621c:	2300      	movs	r3, #0
    621e:	717b      	strb	r3, [r7, #5]
    6220:	71bb      	strb	r3, [r7, #6]
    6222:	71fb      	strb	r3, [r7, #7]
    6224:	687a      	ldr	r2, [r7, #4]
    6226:	633a      	str	r2, [r7, #48]	; 0x30
    6228:	4619      	mov	r1, r3
    622a:	f363 0100 	bfi	r1, r3, #0, #1
    622e:	f363 0141 	bfi	r1, r3, #1, #1
    6232:	f363 0182 	bfi	r1, r3, #2, #1
    6236:	f363 01c5 	bfi	r1, r3, #3, #3
    623a:	2201      	movs	r2, #1
    623c:	f362 1188 	bfi	r1, r2, #6, #3
    6240:	2208      	movs	r2, #8
    6242:	f362 2152 	bfi	r1, r2, #9, #10
    6246:	f363 41de 	bfi	r1, r3, #19, #12
    624a:	f363 71df 	bfi	r1, r3, #31, #1
    624e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6252:	4837      	ldr	r0, [pc, #220]	; (6330 <hard_fault+0x220>)
    6254:	f7fd fa3a 	bl	36cc <z_impl_z_log_msg_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6258:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    625a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    625e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    6262:	429a      	cmp	r2, r3
    6264:	d015      	beq.n	6292 <hard_fault+0x182>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    6266:	4b33      	ldr	r3, [pc, #204]	; (6334 <hard_fault+0x224>)
    6268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    626a:	f013 0fff 	tst.w	r3, #255	; 0xff
    626e:	d14e      	bne.n	630e <hard_fault+0x1fe>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    6270:	4b30      	ldr	r3, [pc, #192]	; (6334 <hard_fault+0x224>)
    6272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6274:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    6278:	d150      	bne.n	631c <hard_fault+0x20c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    627a:	4b2e      	ldr	r3, [pc, #184]	; (6334 <hard_fault+0x224>)
    627c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    627e:	0c24      	lsrs	r4, r4, #16
    6280:	0424      	lsls	r4, r4, #16
    6282:	2c00      	cmp	r4, #0
    6284:	f43f af7b 	beq.w	617e <hard_fault+0x6e>
			reason = usage_fault(esf);
    6288:	4630      	mov	r0, r6
    628a:	f7ff fdcb 	bl	5e24 <usage_fault>
    628e:	4604      	mov	r4, r0
	return reason;
    6290:	e775      	b.n	617e <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6292:	6830      	ldr	r0, [r6, #0]
    6294:	466d      	mov	r5, sp
    6296:	b088      	sub	sp, #32
    6298:	466b      	mov	r3, sp
    629a:	f113 0210 	adds.w	r2, r3, #16
    629e:	d030      	beq.n	6302 <hard_fault+0x1f2>
    62a0:	210c      	movs	r1, #12
    62a2:	b11a      	cbz	r2, 62ac <hard_fault+0x19c>
    62a4:	2904      	cmp	r1, #4
    62a6:	dd01      	ble.n	62ac <hard_fault+0x19c>
    62a8:	4c26      	ldr	r4, [pc, #152]	; (6344 <hard_fault+0x234>)
    62aa:	615c      	str	r4, [r3, #20]
    62ac:	b112      	cbz	r2, 62b4 <hard_fault+0x1a4>
    62ae:	2908      	cmp	r1, #8
    62b0:	dd00      	ble.n	62b4 <hard_fault+0x1a4>
    62b2:	6198      	str	r0, [r3, #24]
    62b4:	290b      	cmp	r1, #11
    62b6:	dd27      	ble.n	6308 <hard_fault+0x1f8>
    62b8:	240c      	movs	r4, #12
    62ba:	b13a      	cbz	r2, 62cc <hard_fault+0x1bc>
    62bc:	2103      	movs	r1, #3
    62be:	7139      	strb	r1, [r7, #4]
    62c0:	2100      	movs	r1, #0
    62c2:	7179      	strb	r1, [r7, #5]
    62c4:	71b9      	strb	r1, [r7, #6]
    62c6:	71f9      	strb	r1, [r7, #7]
    62c8:	6878      	ldr	r0, [r7, #4]
    62ca:	6118      	str	r0, [r3, #16]
    62cc:	2100      	movs	r1, #0
    62ce:	f36f 0100 	bfc	r1, #0, #1
    62d2:	f36f 0141 	bfc	r1, #1, #1
    62d6:	f36f 0182 	bfc	r1, #2, #1
    62da:	f36f 01c5 	bfc	r1, #3, #3
    62de:	2301      	movs	r3, #1
    62e0:	f363 1188 	bfi	r1, r3, #6, #3
    62e4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    62e8:	f364 2152 	bfi	r1, r4, #9, #10
    62ec:	f36f 41de 	bfc	r1, #19, #12
    62f0:	f36f 71df 	bfc	r1, #31, #1
    62f4:	2300      	movs	r3, #0
    62f6:	480e      	ldr	r0, [pc, #56]	; (6330 <hard_fault+0x220>)
    62f8:	f7fd f9e8 	bl	36cc <z_impl_z_log_msg_static_create>
    62fc:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    62fe:	6834      	ldr	r4, [r6, #0]
    6300:	e73d      	b.n	617e <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6302:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6306:	e7cc      	b.n	62a2 <hard_fault+0x192>
    6308:	f06f 041b 	mvn.w	r4, #27
    630c:	e7d5      	b.n	62ba <hard_fault+0x1aa>
			reason = mem_manage_fault(esf, 1, recoverable);
    630e:	462a      	mov	r2, r5
    6310:	2101      	movs	r1, #1
    6312:	4630      	mov	r0, r6
    6314:	f7ff fa82 	bl	581c <mem_manage_fault>
    6318:	4604      	mov	r4, r0
    631a:	e730      	b.n	617e <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
    631c:	462a      	mov	r2, r5
    631e:	2101      	movs	r1, #1
    6320:	4630      	mov	r0, r6
    6322:	f7ff fbef 	bl	5b04 <bus_fault>
    6326:	4604      	mov	r4, r0
    6328:	e729      	b.n	617e <hard_fault+0x6e>
    632a:	bf00      	nop
    632c:	000212d4 	.word	0x000212d4
    6330:	000205c0 	.word	0x000205c0
    6334:	e000ed00 	.word	0xe000ed00
    6338:	000212ec 	.word	0x000212ec
    633c:	00021310 	.word	0x00021310
    6340:	00021320 	.word	0x00021320
    6344:	00021340 	.word	0x00021340

00006348 <debug_monitor>:
{
    6348:	b500      	push	{lr}
    634a:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    634c:	2300      	movs	r3, #0
    634e:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    6350:	4a13      	ldr	r2, [pc, #76]	; (63a0 <debug_monitor+0x58>)
    6352:	9207      	str	r2, [sp, #28]
    6354:	2202      	movs	r2, #2
    6356:	f88d 2004 	strb.w	r2, [sp, #4]
    635a:	f88d 3005 	strb.w	r3, [sp, #5]
    635e:	f88d 3006 	strb.w	r3, [sp, #6]
    6362:	f88d 3007 	strb.w	r3, [sp, #7]
    6366:	9a01      	ldr	r2, [sp, #4]
    6368:	9206      	str	r2, [sp, #24]
    636a:	4619      	mov	r1, r3
    636c:	f363 0100 	bfi	r1, r3, #0, #1
    6370:	f363 0141 	bfi	r1, r3, #1, #1
    6374:	f363 0182 	bfi	r1, r3, #2, #1
    6378:	f363 01c5 	bfi	r1, r3, #3, #3
    637c:	2201      	movs	r2, #1
    637e:	f362 1188 	bfi	r1, r2, #6, #3
    6382:	2208      	movs	r2, #8
    6384:	f362 2152 	bfi	r1, r2, #9, #10
    6388:	f363 41de 	bfi	r1, r3, #19, #12
    638c:	f363 71df 	bfi	r1, r3, #31, #1
    6390:	aa06      	add	r2, sp, #24
    6392:	4804      	ldr	r0, [pc, #16]	; (63a4 <debug_monitor+0x5c>)
    6394:	f7fd f99a 	bl	36cc <z_impl_z_log_msg_static_create>
}
    6398:	b009      	add	sp, #36	; 0x24
    639a:	f85d fb04 	ldr.w	pc, [sp], #4
    639e:	bf00      	nop
    63a0:	0002135c 	.word	0x0002135c
    63a4:	000205c0 	.word	0x000205c0

000063a8 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    63a8:	b590      	push	{r4, r7, lr}
    63aa:	b083      	sub	sp, #12
    63ac:	af00      	add	r7, sp, #0
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    63ae:	290f      	cmp	r1, #15
    63b0:	dc4b      	bgt.n	644a <reserved_exception+0xa2>
    63b2:	4c2f      	ldr	r4, [pc, #188]	; (6470 <reserved_exception+0xc8>)
    63b4:	3910      	subs	r1, #16
    63b6:	2302      	movs	r3, #2
    63b8:	713b      	strb	r3, [r7, #4]
    63ba:	b08a      	sub	sp, #40	; 0x28
    63bc:	466b      	mov	r3, sp
    63be:	f113 0210 	adds.w	r2, r3, #16
    63c2:	d044      	beq.n	644e <reserved_exception+0xa6>
    63c4:	f04f 0c11 	mov.w	ip, #17
    63c8:	b122      	cbz	r2, 63d4 <reserved_exception+0x2c>
    63ca:	f1bc 0f04 	cmp.w	ip, #4
    63ce:	dd01      	ble.n	63d4 <reserved_exception+0x2c>
    63d0:	4828      	ldr	r0, [pc, #160]	; (6474 <reserved_exception+0xcc>)
    63d2:	6158      	str	r0, [r3, #20]
    63d4:	2002      	movs	r0, #2
    63d6:	7038      	strb	r0, [r7, #0]
    63d8:	b11a      	cbz	r2, 63e2 <reserved_exception+0x3a>
    63da:	f1bc 0f08 	cmp.w	ip, #8
    63de:	dd00      	ble.n	63e2 <reserved_exception+0x3a>
    63e0:	619c      	str	r4, [r3, #24]
    63e2:	b11a      	cbz	r2, 63ec <reserved_exception+0x44>
    63e4:	f1bc 0f0c 	cmp.w	ip, #12
    63e8:	dd00      	ble.n	63ec <reserved_exception+0x44>
    63ea:	61d9      	str	r1, [r3, #28]
    63ec:	b11a      	cbz	r2, 63f6 <reserved_exception+0x4e>
    63ee:	f103 0120 	add.w	r1, r3, #32
    63f2:	2000      	movs	r0, #0
    63f4:	b370      	cbz	r0, 6454 <reserved_exception+0xac>
    63f6:	f1bc 0f10 	cmp.w	ip, #16
    63fa:	dd35      	ble.n	6468 <reserved_exception+0xc0>
    63fc:	f04f 0c11 	mov.w	ip, #17
    6400:	b142      	cbz	r2, 6414 <reserved_exception+0x6c>
    6402:	2104      	movs	r1, #4
    6404:	7139      	strb	r1, [r7, #4]
    6406:	2100      	movs	r1, #0
    6408:	7179      	strb	r1, [r7, #5]
    640a:	71b9      	strb	r1, [r7, #6]
    640c:	2101      	movs	r1, #1
    640e:	71f9      	strb	r1, [r7, #7]
    6410:	6878      	ldr	r0, [r7, #4]
    6412:	6118      	str	r0, [r3, #16]
    6414:	2100      	movs	r1, #0
    6416:	f36f 0100 	bfc	r1, #0, #1
    641a:	f36f 0141 	bfc	r1, #1, #1
    641e:	f36f 0182 	bfc	r1, #2, #1
    6422:	f36f 01c5 	bfc	r1, #3, #3
    6426:	2301      	movs	r3, #1
    6428:	f363 1188 	bfi	r1, r3, #6, #3
    642c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    6430:	f36c 2152 	bfi	r1, ip, #9, #10
    6434:	f36f 41de 	bfc	r1, #19, #12
    6438:	f36f 71df 	bfc	r1, #31, #1
    643c:	2300      	movs	r3, #0
    643e:	480e      	ldr	r0, [pc, #56]	; (6478 <reserved_exception+0xd0>)
    6440:	f7fd f944 	bl	36cc <z_impl_z_log_msg_static_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    6444:	370c      	adds	r7, #12
    6446:	46bd      	mov	sp, r7
    6448:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    644a:	4c0c      	ldr	r4, [pc, #48]	; (647c <reserved_exception+0xd4>)
    644c:	e7b2      	b.n	63b4 <reserved_exception+0xc>
    644e:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    6452:	e7b9      	b.n	63c8 <reserved_exception+0x20>
    6454:	f107 0408 	add.w	r4, r7, #8
    6458:	eb04 0e00 	add.w	lr, r4, r0
    645c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    6460:	f801 eb01 	strb.w	lr, [r1], #1
    6464:	3001      	adds	r0, #1
    6466:	e7c5      	b.n	63f4 <reserved_exception+0x4c>
    6468:	f06f 0c1b 	mvn.w	ip, #27
    646c:	e7c8      	b.n	6400 <reserved_exception+0x58>
    646e:	bf00      	nop
    6470:	0002139c 	.word	0x0002139c
    6474:	000213b4 	.word	0x000213b4
    6478:	000205c0 	.word	0x000205c0
    647c:	00021380 	.word	0x00021380

00006480 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6480:	b570      	push	{r4, r5, r6, lr}
    6482:	b090      	sub	sp, #64	; 0x40
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6484:	4b35      	ldr	r3, [pc, #212]	; (655c <z_arm_fault+0xdc>)
    6486:	685d      	ldr	r5, [r3, #4]
    6488:	f3c5 0508 	ubfx	r5, r5, #0, #9
    648c:	2300      	movs	r3, #0
    648e:	f383 8811 	msr	BASEPRI, r3
    6492:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6496:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    649a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    649e:	d13f      	bne.n	6520 <z_arm_fault+0xa0>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    64a0:	f002 030c 	and.w	r3, r2, #12
    64a4:	2b08      	cmp	r3, #8
    64a6:	d010      	beq.n	64ca <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    64a8:	f012 0f08 	tst.w	r2, #8
    64ac:	d035      	beq.n	651a <z_arm_fault+0x9a>
			ptr_esf =  (z_arch_esf_t *)psp;
    64ae:	460c      	mov	r4, r1
	*nested_exc = false;
    64b0:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    64b2:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    64b6:	4629      	mov	r1, r5
    64b8:	4620      	mov	r0, r4
    64ba:	f013 fce3 	bl	19e84 <fault_handle>
    64be:	4605      	mov	r5, r0
	if (recoverable) {
    64c0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    64c4:	b37b      	cbz	r3, 6526 <z_arm_fault+0xa6>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    64c6:	b010      	add	sp, #64	; 0x40
    64c8:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    64ca:	4b25      	ldr	r3, [pc, #148]	; (6560 <z_arm_fault+0xe0>)
    64cc:	930f      	str	r3, [sp, #60]	; 0x3c
    64ce:	2302      	movs	r3, #2
    64d0:	f88d 3000 	strb.w	r3, [sp]
    64d4:	2400      	movs	r4, #0
    64d6:	f88d 4001 	strb.w	r4, [sp, #1]
    64da:	f88d 4002 	strb.w	r4, [sp, #2]
    64de:	f88d 4003 	strb.w	r4, [sp, #3]
    64e2:	9b00      	ldr	r3, [sp, #0]
    64e4:	930e      	str	r3, [sp, #56]	; 0x38
    64e6:	4621      	mov	r1, r4
    64e8:	f364 0100 	bfi	r1, r4, #0, #1
    64ec:	f364 0141 	bfi	r1, r4, #1, #1
    64f0:	f364 0182 	bfi	r1, r4, #2, #1
    64f4:	f364 01c5 	bfi	r1, r4, #3, #3
    64f8:	2301      	movs	r3, #1
    64fa:	f363 1188 	bfi	r1, r3, #6, #3
    64fe:	2308      	movs	r3, #8
    6500:	f363 2152 	bfi	r1, r3, #9, #10
    6504:	f364 41de 	bfi	r1, r4, #19, #12
    6508:	f364 71df 	bfi	r1, r4, #31, #1
    650c:	4623      	mov	r3, r4
    650e:	aa0e      	add	r2, sp, #56	; 0x38
    6510:	4814      	ldr	r0, [pc, #80]	; (6564 <z_arm_fault+0xe4>)
    6512:	f7fd f8db 	bl	36cc <z_impl_z_log_msg_static_create>
	*nested_exc = false;
    6516:	4626      	mov	r6, r4
		return NULL;
    6518:	e7cb      	b.n	64b2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    651a:	4604      	mov	r4, r0
			*nested_exc = true;
    651c:	2601      	movs	r6, #1
    651e:	e7c8      	b.n	64b2 <z_arm_fault+0x32>
	*nested_exc = false;
    6520:	2600      	movs	r6, #0
		return NULL;
    6522:	4634      	mov	r4, r6
    6524:	e7c5      	b.n	64b2 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6526:	2220      	movs	r2, #32
    6528:	4621      	mov	r1, r4
    652a:	a801      	add	r0, sp, #4
    652c:	f013 fd8d 	bl	1a04a <memcpy>
	if (nested_exc) {
    6530:	b14e      	cbz	r6, 6546 <z_arm_fault+0xc6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6532:	9b08      	ldr	r3, [sp, #32]
    6534:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6538:	b95a      	cbnz	r2, 6552 <z_arm_fault+0xd2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    653a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    653e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    6542:	9308      	str	r3, [sp, #32]
    6544:	e005      	b.n	6552 <z_arm_fault+0xd2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6546:	9b08      	ldr	r3, [sp, #32]
    6548:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    654c:	f023 0301 	bic.w	r3, r3, #1
    6550:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    6552:	a901      	add	r1, sp, #4
    6554:	4628      	mov	r0, r5
    6556:	f013 fc70 	bl	19e3a <z_arm_fatal_error>
    655a:	e7b4      	b.n	64c6 <z_arm_fault+0x46>
    655c:	e000ed00 	.word	0xe000ed00
    6560:	000213c8 	.word	0x000213c8
    6564:	000205c0 	.word	0x000205c0

00006568 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6568:	4b04      	ldr	r3, [pc, #16]	; (657c <z_arm_fault_init+0x14>)
    656a:	695a      	ldr	r2, [r3, #20]
    656c:	f042 0210 	orr.w	r2, r2, #16
    6570:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    6572:	695a      	ldr	r2, [r3, #20]
    6574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    6578:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    657a:	4770      	bx	lr
    657c:	e000ed00 	.word	0xe000ed00

00006580 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6580:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6584:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6588:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    658a:	4672      	mov	r2, lr
	bl z_arm_fault
    658c:	f7ff ff78 	bl	6480 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6590:	bd01      	pop	{r0, pc}
    6592:	bf00      	nop

00006594 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6594:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6596:	e007      	b.n	65a8 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6598:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    659c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    65a0:	2120      	movs	r1, #32
    65a2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    65a6:	3201      	adds	r2, #1
    65a8:	2a44      	cmp	r2, #68	; 0x44
    65aa:	dc09      	bgt.n	65c0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    65ac:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    65ae:	2b00      	cmp	r3, #0
    65b0:	daf2      	bge.n	6598 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65b2:	f002 010f 	and.w	r1, r2, #15
    65b6:	4b03      	ldr	r3, [pc, #12]	; (65c4 <z_arm_interrupt_init+0x30>)
    65b8:	440b      	add	r3, r1
    65ba:	2120      	movs	r1, #32
    65bc:	7619      	strb	r1, [r3, #24]
    65be:	e7f2      	b.n	65a6 <z_arm_interrupt_init+0x12>
	}
}
    65c0:	4770      	bx	lr
    65c2:	bf00      	nop
    65c4:	e000ecfc 	.word	0xe000ecfc

000065c8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    65c8:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    65ca:	4915      	ldr	r1, [pc, #84]	; (6620 <__start+0x58>)
    strb r0, [r1]
    65cc:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    65ce:	2000      	movs	r0, #0
    msr CONTROL, r0
    65d0:	f380 8814 	msr	CONTROL, r0
    isb
    65d4:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    65d8:	2000      	movs	r0, #0
    msr MSPLIM, r0
    65da:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    65de:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    65e2:	f7fc fda7 	bl	3134 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    65e6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    65e8:	490e      	ldr	r1, [pc, #56]	; (6624 <__start+0x5c>)
    str r0, [r1]
    65ea:	6008      	str	r0, [r1, #0]
    dsb
    65ec:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    65f0:	480d      	ldr	r0, [pc, #52]	; (6628 <__start+0x60>)
    msr msp, r0
    65f2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    65f6:	f000 f841 	bl	667c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    65fa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    65fc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6600:	480a      	ldr	r0, [pc, #40]	; (662c <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6602:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6606:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6608:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    660c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6610:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6612:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6614:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6618:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    661c:	f7ff f822 	bl	5664 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    6620:	20002b7d 	.word	0x20002b7d
    ldr r1, =_SCS_MPU_CTRL
    6624:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6628:	20004530 	.word	0x20004530
    ldr r0, =z_interrupt_stacks
    662c:	20004670 	.word	0x20004670

00006630 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    6630:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6634:	4905      	ldr	r1, [pc, #20]	; (664c <sys_arch_reboot+0x1c>)
    6636:	68ca      	ldr	r2, [r1, #12]
    6638:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    663c:	4b04      	ldr	r3, [pc, #16]	; (6650 <sys_arch_reboot+0x20>)
    663e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6640:	60cb      	str	r3, [r1, #12]
    6642:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6646:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6648:	e7fd      	b.n	6646 <sys_arch_reboot+0x16>
    664a:	bf00      	nop
    664c:	e000ed00 	.word	0xe000ed00
    6650:	05fa0004 	.word	0x05fa0004

00006654 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6654:	4b08      	ldr	r3, [pc, #32]	; (6678 <z_arm_clear_arm_mpu_config+0x24>)
    6656:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    665a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    665e:	2300      	movs	r3, #0
    6660:	e006      	b.n	6670 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    6662:	4a05      	ldr	r2, [pc, #20]	; (6678 <z_arm_clear_arm_mpu_config+0x24>)
    6664:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    6668:	2100      	movs	r1, #0
    666a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    666e:	3301      	adds	r3, #1
    6670:	4283      	cmp	r3, r0
    6672:	dbf6      	blt.n	6662 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    6674:	4770      	bx	lr
    6676:	bf00      	nop
    6678:	e000ed00 	.word	0xe000ed00

0000667c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    667c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    667e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6680:	2400      	movs	r4, #0
    6682:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6686:	f7ff ffe5 	bl	6654 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    668a:	4623      	mov	r3, r4
    668c:	e008      	b.n	66a0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    668e:	f103 0120 	add.w	r1, r3, #32
    6692:	4a0e      	ldr	r2, [pc, #56]	; (66cc <z_arm_init_arch_hw_at_boot+0x50>)
    6694:	f04f 30ff 	mov.w	r0, #4294967295
    6698:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    669c:	3301      	adds	r3, #1
    669e:	b2db      	uxtb	r3, r3
    66a0:	2b0f      	cmp	r3, #15
    66a2:	d9f4      	bls.n	668e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    66a4:	2300      	movs	r3, #0
    66a6:	e008      	b.n	66ba <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    66a8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    66ac:	4a07      	ldr	r2, [pc, #28]	; (66cc <z_arm_init_arch_hw_at_boot+0x50>)
    66ae:	f04f 30ff 	mov.w	r0, #4294967295
    66b2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    66b6:	3301      	adds	r3, #1
    66b8:	b2db      	uxtb	r3, r3
    66ba:	2b0f      	cmp	r3, #15
    66bc:	d9f4      	bls.n	66a8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    66be:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    66c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66c4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    66c8:	bd10      	pop	{r4, pc}
    66ca:	bf00      	nop
    66cc:	e000e100 	.word	0xe000e100

000066d0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    66d0:	b508      	push	{r3, lr}
	if (_current == thread) {
    66d2:	4b0a      	ldr	r3, [pc, #40]	; (66fc <z_impl_k_thread_abort+0x2c>)
    66d4:	689b      	ldr	r3, [r3, #8]
    66d6:	4283      	cmp	r3, r0
    66d8:	d002      	beq.n	66e0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    66da:	f010 fc65 	bl	16fa8 <z_thread_abort>
}
    66de:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    66e0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    66e4:	2b00      	cmp	r3, #0
    66e6:	d0f8      	beq.n	66da <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    66e8:	4b05      	ldr	r3, [pc, #20]	; (6700 <z_impl_k_thread_abort+0x30>)
    66ea:	685a      	ldr	r2, [r3, #4]
    66ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    66f0:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    66f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    66f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    66f8:	625a      	str	r2, [r3, #36]	; 0x24
    66fa:	e7ee      	b.n	66da <z_impl_k_thread_abort+0xa>
    66fc:	2000294c 	.word	0x2000294c
    6700:	e000ed00 	.word	0xe000ed00

00006704 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6704:	b510      	push	{r4, lr}
    6706:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6708:	4c0a      	ldr	r4, [pc, #40]	; (6734 <z_arm_configure_static_mpu_regions+0x30>)
    670a:	4623      	mov	r3, r4
    670c:	4a0a      	ldr	r2, [pc, #40]	; (6738 <z_arm_configure_static_mpu_regions+0x34>)
    670e:	2101      	movs	r1, #1
    6710:	480a      	ldr	r0, [pc, #40]	; (673c <z_arm_configure_static_mpu_regions+0x38>)
    6712:	f013 fc2b 	bl	19f6c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    6716:	2300      	movs	r3, #0
    6718:	9301      	str	r3, [sp, #4]
    671a:	9302      	str	r3, [sp, #8]
    671c:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    671e:	4b08      	ldr	r3, [pc, #32]	; (6740 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    6720:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    6722:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    6724:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    6726:	2101      	movs	r1, #1
    6728:	a801      	add	r0, sp, #4
    672a:	f013 fc23 	bl	19f74 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    672e:	b004      	add	sp, #16
    6730:	bd10      	pop	{r4, pc}
    6732:	bf00      	nop
    6734:	20070000 	.word	0x20070000
    6738:	20000000 	.word	0x20000000
    673c:	000213f8 	.word	0x000213f8
    6740:	20000890 	.word	0x20000890

00006744 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    6744:	4b02      	ldr	r3, [pc, #8]	; (6750 <mpu_init+0xc>)
    6746:	4a03      	ldr	r2, [pc, #12]	; (6754 <mpu_init+0x10>)
    6748:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    674c:	4770      	bx	lr
    674e:	bf00      	nop
    6750:	e000ed00 	.word	0xe000ed00
    6754:	0044ffaa 	.word	0x0044ffaa

00006758 <mpu_set_region>:
	MPU->RNR = rnr;
    6758:	4b03      	ldr	r3, [pc, #12]	; (6768 <mpu_set_region+0x10>)
    675a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    675e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    6762:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    6766:	4770      	bx	lr
    6768:	e000ed00 	.word	0xe000ed00

0000676c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    676c:	b5b0      	push	{r4, r5, r7, lr}
    676e:	b082      	sub	sp, #8
    6770:	af00      	add	r7, sp, #0
    6772:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    6774:	2807      	cmp	r0, #7
    6776:	d805      	bhi.n	6784 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    6778:	f013 fbb3 	bl	19ee2 <region_init>

	return index;
    677c:	4620      	mov	r0, r4
}
    677e:	3708      	adds	r7, #8
    6780:	46bd      	mov	sp, r7
    6782:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6784:	466d      	mov	r5, sp
    6786:	b088      	sub	sp, #32
    6788:	466b      	mov	r3, sp
    678a:	f113 0210 	adds.w	r2, r3, #16
    678e:	d031      	beq.n	67f4 <region_allocate_and_init+0x88>
    6790:	210c      	movs	r1, #12
    6792:	b11a      	cbz	r2, 679c <region_allocate_and_init+0x30>
    6794:	2904      	cmp	r1, #4
    6796:	dd01      	ble.n	679c <region_allocate_and_init+0x30>
    6798:	4819      	ldr	r0, [pc, #100]	; (6800 <region_allocate_and_init+0x94>)
    679a:	6158      	str	r0, [r3, #20]
    679c:	b112      	cbz	r2, 67a4 <region_allocate_and_init+0x38>
    679e:	2908      	cmp	r1, #8
    67a0:	dd00      	ble.n	67a4 <region_allocate_and_init+0x38>
    67a2:	619c      	str	r4, [r3, #24]
    67a4:	290b      	cmp	r1, #11
    67a6:	dd28      	ble.n	67fa <region_allocate_and_init+0x8e>
    67a8:	240c      	movs	r4, #12
    67aa:	b13a      	cbz	r2, 67bc <region_allocate_and_init+0x50>
    67ac:	2103      	movs	r1, #3
    67ae:	7139      	strb	r1, [r7, #4]
    67b0:	2100      	movs	r1, #0
    67b2:	7179      	strb	r1, [r7, #5]
    67b4:	71b9      	strb	r1, [r7, #6]
    67b6:	71f9      	strb	r1, [r7, #7]
    67b8:	6878      	ldr	r0, [r7, #4]
    67ba:	6118      	str	r0, [r3, #16]
    67bc:	2100      	movs	r1, #0
    67be:	f36f 0100 	bfc	r1, #0, #1
    67c2:	f36f 0141 	bfc	r1, #1, #1
    67c6:	f36f 0182 	bfc	r1, #2, #1
    67ca:	f36f 01c5 	bfc	r1, #3, #3
    67ce:	2301      	movs	r3, #1
    67d0:	f363 1188 	bfi	r1, r3, #6, #3
    67d4:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    67d8:	f364 2152 	bfi	r1, r4, #9, #10
    67dc:	f36f 41de 	bfc	r1, #19, #12
    67e0:	f36f 71df 	bfc	r1, #31, #1
    67e4:	2300      	movs	r3, #0
    67e6:	4807      	ldr	r0, [pc, #28]	; (6804 <region_allocate_and_init+0x98>)
    67e8:	f7fc ff70 	bl	36cc <z_impl_z_log_msg_static_create>
    67ec:	46ad      	mov	sp, r5
		return -EINVAL;
    67ee:	f06f 0015 	mvn.w	r0, #21
    67f2:	e7c4      	b.n	677e <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    67f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    67f8:	e7cb      	b.n	6792 <region_allocate_and_init+0x26>
    67fa:	f06f 041b 	mvn.w	r4, #27
    67fe:	e7d4      	b.n	67aa <region_allocate_and_init+0x3e>
    6800:	00021404 	.word	0x00021404
    6804:	000205b0 	.word	0x000205b0

00006808 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    680c:	b089      	sub	sp, #36	; 0x24
    680e:	af00      	add	r7, sp, #0
    6810:	4682      	mov	sl, r0
    6812:	60b9      	str	r1, [r7, #8]
    6814:	607b      	str	r3, [r7, #4]
	int i;
	int reg_index = start_reg_index;
    6816:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    6818:	f04f 0800 	mov.w	r8, #0
    681c:	e0b8      	b.n	6990 <mpu_configure_regions_and_partition+0x188>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    681e:	466d      	mov	r5, sp
    6820:	b088      	sub	sp, #32
    6822:	466b      	mov	r3, sp
    6824:	f113 0210 	adds.w	r2, r3, #16
    6828:	d032      	beq.n	6890 <mpu_configure_regions_and_partition+0x88>
    682a:	210c      	movs	r1, #12
    682c:	b11a      	cbz	r2, 6836 <mpu_configure_regions_and_partition+0x2e>
    682e:	2904      	cmp	r1, #4
    6830:	dd01      	ble.n	6836 <mpu_configure_regions_and_partition+0x2e>
    6832:	489d      	ldr	r0, [pc, #628]	; (6aa8 <mpu_configure_regions_and_partition+0x2a0>)
    6834:	6158      	str	r0, [r3, #20]
    6836:	b11a      	cbz	r2, 6840 <mpu_configure_regions_and_partition+0x38>
    6838:	2908      	cmp	r1, #8
    683a:	dd01      	ble.n	6840 <mpu_configure_regions_and_partition+0x38>
    683c:	f8c3 8018 	str.w	r8, [r3, #24]
    6840:	290b      	cmp	r1, #11
    6842:	dd28      	ble.n	6896 <mpu_configure_regions_and_partition+0x8e>
    6844:	240c      	movs	r4, #12
    6846:	b13a      	cbz	r2, 6858 <mpu_configure_regions_and_partition+0x50>
    6848:	2103      	movs	r1, #3
    684a:	7439      	strb	r1, [r7, #16]
    684c:	2100      	movs	r1, #0
    684e:	7479      	strb	r1, [r7, #17]
    6850:	74b9      	strb	r1, [r7, #18]
    6852:	74f9      	strb	r1, [r7, #19]
    6854:	6938      	ldr	r0, [r7, #16]
    6856:	6118      	str	r0, [r3, #16]
    6858:	2100      	movs	r1, #0
    685a:	f36f 0100 	bfc	r1, #0, #1
    685e:	f36f 0141 	bfc	r1, #1, #1
    6862:	f36f 0182 	bfc	r1, #2, #1
    6866:	f36f 01c5 	bfc	r1, #3, #3
    686a:	2301      	movs	r3, #1
    686c:	f363 1188 	bfi	r1, r3, #6, #3
    6870:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    6874:	f364 2152 	bfi	r1, r4, #9, #10
    6878:	f36f 41de 	bfc	r1, #19, #12
    687c:	f36f 71df 	bfc	r1, #31, #1
    6880:	2300      	movs	r3, #0
    6882:	488a      	ldr	r0, [pc, #552]	; (6aac <mpu_configure_regions_and_partition+0x2a4>)
    6884:	f7fc ff22 	bl	36cc <z_impl_z_log_msg_static_create>
    6888:	46ad      	mov	sp, r5
			return -EINVAL;
    688a:	f06f 0415 	mvn.w	r4, #21
    688e:	e03f      	b.n	6910 <mpu_configure_regions_and_partition+0x108>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6894:	e7ca      	b.n	682c <mpu_configure_regions_and_partition+0x24>
    6896:	f06f 041b 	mvn.w	r4, #27
    689a:	e7d4      	b.n	6846 <mpu_configure_regions_and_partition+0x3e>
	return -EINVAL;
    689c:	f06f 0615 	mvn.w	r6, #21
    68a0:	e09c      	b.n	69dc <mpu_configure_regions_and_partition+0x1d4>
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    68a2:	466d      	mov	r5, sp
    68a4:	b088      	sub	sp, #32
    68a6:	466b      	mov	r3, sp
    68a8:	f113 0210 	adds.w	r2, r3, #16
    68ac:	d035      	beq.n	691a <mpu_configure_regions_and_partition+0x112>
    68ae:	210c      	movs	r1, #12
    68b0:	b11a      	cbz	r2, 68ba <mpu_configure_regions_and_partition+0xb2>
    68b2:	2904      	cmp	r1, #4
    68b4:	dd01      	ble.n	68ba <mpu_configure_regions_and_partition+0xb2>
    68b6:	487e      	ldr	r0, [pc, #504]	; (6ab0 <mpu_configure_regions_and_partition+0x2a8>)
    68b8:	6158      	str	r0, [r3, #20]
    68ba:	b112      	cbz	r2, 68c2 <mpu_configure_regions_and_partition+0xba>
    68bc:	2908      	cmp	r1, #8
    68be:	dd00      	ble.n	68c2 <mpu_configure_regions_and_partition+0xba>
    68c0:	619e      	str	r6, [r3, #24]
    68c2:	290b      	cmp	r1, #11
    68c4:	dd2c      	ble.n	6920 <mpu_configure_regions_and_partition+0x118>
    68c6:	240c      	movs	r4, #12
    68c8:	b13a      	cbz	r2, 68da <mpu_configure_regions_and_partition+0xd2>
    68ca:	2103      	movs	r1, #3
    68cc:	7439      	strb	r1, [r7, #16]
    68ce:	2100      	movs	r1, #0
    68d0:	7479      	strb	r1, [r7, #17]
    68d2:	74b9      	strb	r1, [r7, #18]
    68d4:	74f9      	strb	r1, [r7, #19]
    68d6:	6938      	ldr	r0, [r7, #16]
    68d8:	6118      	str	r0, [r3, #16]
    68da:	2100      	movs	r1, #0
    68dc:	f36f 0100 	bfc	r1, #0, #1
    68e0:	f36f 0141 	bfc	r1, #1, #1
    68e4:	f36f 0182 	bfc	r1, #2, #1
    68e8:	f36f 01c5 	bfc	r1, #3, #3
    68ec:	2301      	movs	r3, #1
    68ee:	f363 1188 	bfi	r1, r3, #6, #3
    68f2:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    68f6:	f363 2152 	bfi	r1, r3, #9, #10
    68fa:	f36f 41de 	bfc	r1, #19, #12
    68fe:	f36f 71df 	bfc	r1, #31, #1
    6902:	2300      	movs	r3, #0
    6904:	4869      	ldr	r0, [pc, #420]	; (6aac <mpu_configure_regions_and_partition+0x2a4>)
    6906:	f7fc fee1 	bl	36cc <z_impl_z_log_msg_static_create>
    690a:	46ad      	mov	sp, r5
				u_reg_index);
			return -EINVAL;
    690c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    6910:	4620      	mov	r0, r4
    6912:	3724      	adds	r7, #36	; 0x24
    6914:	46bd      	mov	sp, r7
    6916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
    691a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    691e:	e7c7      	b.n	68b0 <mpu_configure_regions_and_partition+0xa8>
    6920:	f06f 041b 	mvn.w	r4, #27
    6924:	e7d0      	b.n	68c8 <mpu_configure_regions_and_partition+0xc0>
		if ((regions[i].start == u_reg_base) &&
    6926:	4581      	cmp	r9, r0
    6928:	d175      	bne.n	6a16 <mpu_configure_regions_and_partition+0x20e>
			mpu_configure_region(u_reg_index, &regions[i]);
    692a:	4629      	mov	r1, r5
    692c:	b2f0      	uxtb	r0, r6
    692e:	f013 fafe 	bl	19f2e <mpu_configure_region>
    6932:	e02b      	b.n	698c <mpu_configure_regions_and_partition+0x184>
	MPU->RNR = rnr;
    6934:	4a5f      	ldr	r2, [pc, #380]	; (6ab4 <mpu_configure_regions_and_partition+0x2ac>)
    6936:	f8c2 c098 	str.w	ip, [r2, #152]	; 0x98
	return MPU->RBAR;
    693a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    693e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    6942:	f021 011f 	bic.w	r1, r1, #31
    6946:	4319      	orrs	r1, r3
	MPU->RBAR = rbar;
    6948:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    694c:	4629      	mov	r1, r5
    694e:	b2e0      	uxtb	r0, r4
    6950:	f013 faed 	bl	19f2e <mpu_configure_region>
    6954:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    6956:	f110 0f16 	cmn.w	r0, #22
    695a:	d0d9      	beq.n	6910 <mpu_configure_regions_and_partition+0x108>
			reg_index++;
    695c:	3401      	adds	r4, #1
    695e:	e015      	b.n	698c <mpu_configure_regions_and_partition+0x184>
				regions[i].start - 1);
    6960:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    6962:	4954      	ldr	r1, [pc, #336]	; (6ab4 <mpu_configure_regions_and_partition+0x2ac>)
    6964:	f8c1 c098 	str.w	ip, [r1, #152]	; 0x98
	return MPU->RLAR;
    6968:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    696c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    6970:	f023 031f 	bic.w	r3, r3, #31
    6974:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    6976:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    697a:	4629      	mov	r1, r5
    697c:	b2e0      	uxtb	r0, r4
    697e:	f013 fad6 	bl	19f2e <mpu_configure_region>
    6982:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    6984:	f110 0f16 	cmn.w	r0, #22
    6988:	d0c2      	beq.n	6910 <mpu_configure_regions_and_partition+0x108>
			reg_index++;
    698a:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    698c:	f108 0801 	add.w	r8, r8, #1
    6990:	68bb      	ldr	r3, [r7, #8]
    6992:	4598      	cmp	r8, r3
    6994:	dabc      	bge.n	6910 <mpu_configure_regions_and_partition+0x108>
		if (regions[i].size == 0U) {
    6996:	eb08 0548 	add.w	r5, r8, r8, lsl #1
    699a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    699e:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
    69a2:	f8d5 9004 	ldr.w	r9, [r5, #4]
    69a6:	f1b9 0f00 	cmp.w	r9, #0
    69aa:	d0ef      	beq.n	698c <mpu_configure_regions_and_partition+0x184>
		if (do_sanity_check &&
    69ac:	687b      	ldr	r3, [r7, #4]
    69ae:	b12b      	cbz	r3, 69bc <mpu_configure_regions_and_partition+0x1b4>
			(!mpu_partition_is_valid(&regions[i]))) {
    69b0:	4628      	mov	r0, r5
    69b2:	f013 faaa 	bl	19f0a <mpu_partition_is_valid>
		if (do_sanity_check &&
    69b6:	2800      	cmp	r0, #0
    69b8:	f43f af31 	beq.w	681e <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
    69bc:	f85a 300b 	ldr.w	r3, [sl, fp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    69c0:	60fb      	str	r3, [r7, #12]
    69c2:	4618      	mov	r0, r3
    69c4:	f013 fa83 	bl	19ece <arm_cmse_mpu_region_get>
    69c8:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    69ca:	68fb      	ldr	r3, [r7, #12]
    69cc:	eb09 0003 	add.w	r0, r9, r3
    69d0:	3801      	subs	r0, #1
    69d2:	f013 fa7c 	bl	19ece <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    69d6:	4286      	cmp	r6, r0
    69d8:	f47f af60 	bne.w	689c <mpu_configure_regions_and_partition+0x94>
		if ((u_reg_index == -EINVAL) ||
    69dc:	f116 0f16 	cmn.w	r6, #22
    69e0:	f43f af5f 	beq.w	68a2 <mpu_configure_regions_and_partition+0x9a>
    69e4:	42b4      	cmp	r4, r6
    69e6:	f77f af5c 	ble.w	68a2 <mpu_configure_regions_and_partition+0x9a>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    69ea:	46b4      	mov	ip, r6
	MPU->RNR = rnr;
    69ec:	4b31      	ldr	r3, [pc, #196]	; (6ab4 <mpu_configure_regions_and_partition+0x2ac>)
    69ee:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    69f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    69f6:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    69fa:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RLAR;
    69fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    6a02:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    6a06:	f85a 300b 	ldr.w	r3, [sl, fp]
    6a0a:	6869      	ldr	r1, [r5, #4]
    6a0c:	4419      	add	r1, r3
    6a0e:	1e48      	subs	r0, r1, #1
    6a10:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
    6a12:	4293      	cmp	r3, r2
    6a14:	d087      	beq.n	6926 <mpu_configure_regions_and_partition+0x11e>
		} else if (regions[i].start == u_reg_base) {
    6a16:	4293      	cmp	r3, r2
    6a18:	d08c      	beq.n	6934 <mpu_configure_regions_and_partition+0x12c>
		} else if (reg_last == u_reg_last) {
    6a1a:	68fa      	ldr	r2, [r7, #12]
    6a1c:	4591      	cmp	r9, r2
    6a1e:	d09f      	beq.n	6960 <mpu_configure_regions_and_partition+0x158>
				regions[i].start - 1);
    6a20:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    6a22:	4924      	ldr	r1, [pc, #144]	; (6ab4 <mpu_configure_regions_and_partition+0x2ac>)
    6a24:	4666      	mov	r6, ip
    6a26:	f8c1 c098 	str.w	ip, [r1, #152]	; 0x98
	return MPU->RLAR;
    6a2a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    6a2e:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    6a32:	f023 031f 	bic.w	r3, r3, #31
    6a36:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    6a38:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    6a3c:	4629      	mov	r1, r5
    6a3e:	b2e0      	uxtb	r0, r4
    6a40:	f013 fa75 	bl	19f2e <mpu_configure_region>
    6a44:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    6a46:	f110 0f16 	cmn.w	r0, #22
    6a4a:	f43f af61 	beq.w	6910 <mpu_configure_regions_and_partition+0x108>
			reg_index++;
    6a4e:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    6a50:	4b18      	ldr	r3, [pc, #96]	; (6ab4 <mpu_configure_regions_and_partition+0x2ac>)
    6a52:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    6a56:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    6a5a:	7e3a      	ldrb	r2, [r7, #24]
    6a5c:	f361 0204 	bfi	r2, r1, #0, #5
    6a60:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
    6a62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    6a66:	f3c3 0342 	ubfx	r3, r3, #1, #3
    6a6a:	b2d2      	uxtb	r2, r2
    6a6c:	f363 1247 	bfi	r2, r3, #5, #3
    6a70:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
    6a72:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
    6a76:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    6a78:	4413      	add	r3, r2
    6a7a:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    6a7c:	f023 031f 	bic.w	r3, r3, #31
    6a80:	68fa      	ldr	r2, [r7, #12]
    6a82:	eba9 0902 	sub.w	r9, r9, r2
    6a86:	444b      	add	r3, r9
    6a88:	3b01      	subs	r3, #1
    6a8a:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    6a8e:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
    6a90:	f107 0110 	add.w	r1, r7, #16
    6a94:	b2c0      	uxtb	r0, r0
    6a96:	f7ff fe69 	bl	676c <region_allocate_and_init>
    6a9a:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    6a9c:	f110 0f16 	cmn.w	r0, #22
    6aa0:	f43f af36 	beq.w	6910 <mpu_configure_regions_and_partition+0x108>
			reg_index++;
    6aa4:	3401      	adds	r4, #1
    6aa6:	e771      	b.n	698c <mpu_configure_regions_and_partition+0x184>
    6aa8:	0002142c 	.word	0x0002142c
    6aac:	000205b0 	.word	0x000205b0
    6ab0:	00021450 	.word	0x00021450
    6ab4:	e000ed00 	.word	0xe000ed00

00006ab8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    6ab8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    6aba:	4c03      	ldr	r4, [pc, #12]	; (6ac8 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    6abc:	2301      	movs	r3, #1
    6abe:	7822      	ldrb	r2, [r4, #0]
    6ac0:	f7ff fea2 	bl	6808 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6ac4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    6ac6:	bd10      	pop	{r4, pc}
    6ac8:	20002b78 	.word	0x20002b78

00006acc <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    6acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ad0:	4607      	mov	r7, r0
    6ad2:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    6ad4:	2400      	movs	r4, #0
    6ad6:	e003      	b.n	6ae0 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    6ad8:	f06f 0515 	mvn.w	r5, #21
    6adc:	e017      	b.n	6b0e <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    6ade:	3401      	adds	r4, #1
    6ae0:	45a0      	cmp	r8, r4
    6ae2:	dd43      	ble.n	6b6c <mpu_mark_areas_for_dynamic_regions+0xa0>
		if (dyn_region_areas[i].size == 0U) {
    6ae4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    6ae8:	009a      	lsls	r2, r3, #2
    6aea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6aee:	685e      	ldr	r6, [r3, #4]
    6af0:	2e00      	cmp	r6, #0
    6af2:	d0f4      	beq.n	6ade <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    6af4:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    6af8:	4648      	mov	r0, r9
    6afa:	f013 f9e8 	bl	19ece <arm_cmse_mpu_region_get>
    6afe:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    6b00:	eb06 0009 	add.w	r0, r6, r9
    6b04:	3801      	subs	r0, #1
    6b06:	f013 f9e2 	bl	19ece <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    6b0a:	4285      	cmp	r5, r0
    6b0c:	d1e4      	bne.n	6ad8 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    6b0e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    6b12:	4a1a      	ldr	r2, [pc, #104]	; (6b7c <mpu_mark_areas_for_dynamic_regions+0xb0>)
    6b14:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    6b18:	f115 0f16 	cmn.w	r5, #22
    6b1c:	d027      	beq.n	6b6e <mpu_mark_areas_for_dynamic_regions+0xa2>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    6b1e:	4b18      	ldr	r3, [pc, #96]	; (6b80 <mpu_mark_areas_for_dynamic_regions+0xb4>)
    6b20:	781b      	ldrb	r3, [r3, #0]
    6b22:	42ab      	cmp	r3, r5
    6b24:	dd26      	ble.n	6b74 <mpu_mark_areas_for_dynamic_regions+0xa8>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    6b26:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    6b2a:	4b14      	ldr	r3, [pc, #80]	; (6b7c <mpu_mark_areas_for_dynamic_regions+0xb0>)
    6b2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	MPU->RNR = rnr;
    6b30:	4b14      	ldr	r3, [pc, #80]	; (6b84 <mpu_mark_areas_for_dynamic_regions+0xb8>)
    6b32:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    6b36:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
	return MPU->RBAR;
    6b3a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    6b3e:	7b10      	ldrb	r0, [r2, #12]
    6b40:	f365 0004 	bfi	r0, r5, #0, #5
    6b44:	7310      	strb	r0, [r2, #12]
	return MPU->RLAR;
    6b46:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    6b4a:	f3c0 0042 	ubfx	r0, r0, #1, #3
    6b4e:	7b15      	ldrb	r5, [r2, #12]
    6b50:	f360 1547 	bfi	r5, r0, #5, #3
    6b54:	7315      	strb	r5, [r2, #12]
	return MPU->RBAR;
    6b56:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    6b5a:	f020 001f 	bic.w	r0, r0, #31
    6b5e:	6050      	str	r0, [r2, #4]
	return MPU->RLAR;
    6b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    6b64:	f023 031f 	bic.w	r3, r3, #31
    6b68:	6113      	str	r3, [r2, #16]
}
    6b6a:	e7b8      	b.n	6ade <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    6b6c:	2500      	movs	r5, #0
}
    6b6e:	4628      	mov	r0, r5
    6b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    6b74:	f06f 0515 	mvn.w	r5, #21
    6b78:	e7f9      	b.n	6b6e <mpu_mark_areas_for_dynamic_regions+0xa2>
    6b7a:	bf00      	nop
    6b7c:	20001eb4 	.word	0x20001eb4
    6b80:	20002b78 	.word	0x20002b78
    6b84:	e000ed00 	.word	0xe000ed00

00006b88 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6b88:	4b04      	ldr	r3, [pc, #16]	; (6b9c <arm_core_mpu_enable+0x14>)
    6b8a:	2205      	movs	r2, #5
    6b8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b94:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6b98:	4770      	bx	lr
    6b9a:	bf00      	nop
    6b9c:	e000ed00 	.word	0xe000ed00

00006ba0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6ba0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6ba4:	4b02      	ldr	r3, [pc, #8]	; (6bb0 <arm_core_mpu_disable+0x10>)
    6ba6:	2200      	movs	r2, #0
    6ba8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6bac:	4770      	bx	lr
    6bae:	bf00      	nop
    6bb0:	e000ed00 	.word	0xe000ed00

00006bb4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    6bb4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6bb6:	4b0e      	ldr	r3, [pc, #56]	; (6bf0 <z_arm_mpu_init+0x3c>)
    6bb8:	681d      	ldr	r5, [r3, #0]
    6bba:	2d08      	cmp	r5, #8
    6bbc:	d815      	bhi.n	6bea <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6bbe:	f7ff ffef 	bl	6ba0 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    6bc2:	f7ff fdbf 	bl	6744 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6bc6:	2400      	movs	r4, #0
    6bc8:	e007      	b.n	6bda <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    6bca:	4b09      	ldr	r3, [pc, #36]	; (6bf0 <z_arm_mpu_init+0x3c>)
    6bcc:	6859      	ldr	r1, [r3, #4]
    6bce:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    6bd2:	4620      	mov	r0, r4
    6bd4:	f013 f985 	bl	19ee2 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6bd8:	3401      	adds	r4, #1
    6bda:	42a5      	cmp	r5, r4
    6bdc:	d8f5      	bhi.n	6bca <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6bde:	4b05      	ldr	r3, [pc, #20]	; (6bf4 <z_arm_mpu_init+0x40>)
    6be0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6be2:	f7ff ffd1 	bl	6b88 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6be6:	2000      	movs	r0, #0
}
    6be8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    6bea:	f04f 30ff 	mov.w	r0, #4294967295
    6bee:	e7fb      	b.n	6be8 <z_arm_mpu_init+0x34>
    6bf0:	00021484 	.word	0x00021484
    6bf4:	20002b78 	.word	0x20002b78

00006bf8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    6bf8:	4b01      	ldr	r3, [pc, #4]	; (6c00 <__stdout_hook_install+0x8>)
    6bfa:	6018      	str	r0, [r3, #0]
}
    6bfc:	4770      	bx	lr
    6bfe:	bf00      	nop
    6c00:	200002bc 	.word	0x200002bc

00006c04 <enable_cpunet>:
BUILD_ASSERT(CONFIG_THINGY53_INIT_PRIORITY < CONFIG_SENSOR_INIT_PRIORITY,
	"CONFIG_THINGY53_INIT_PRIORITY must be less than CONFIG_SENSOR_INIT_PRIORITY");
#endif

static void enable_cpunet(void)
{
    6c04:	b580      	push	{r7, lr}
    6c06:	b082      	sub	sp, #8
    6c08:	af00      	add	r7, sp, #0
#if !defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	/* Retain nRF5340 Network MCU in Secure domain (bus
	 * accesses by Network MCU will have Secure attribute set).
	 */
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    6c0a:	4b23      	ldr	r3, [pc, #140]	; (6c98 <enable_cpunet+0x94>)
    6c0c:	2210      	movs	r2, #16
    6c0e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    6c12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6c16:	2200      	movs	r2, #0
    6c18:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
    6c1c:	b088      	sub	sp, #32
    6c1e:	466b      	mov	r3, sp
    6c20:	f113 0210 	adds.w	r2, r3, #16
    6c24:	d032      	beq.n	6c8c <enable_cpunet+0x88>
    6c26:	210c      	movs	r1, #12
    6c28:	b11a      	cbz	r2, 6c32 <enable_cpunet+0x2e>
    6c2a:	2904      	cmp	r1, #4
    6c2c:	dd01      	ble.n	6c32 <enable_cpunet+0x2e>
    6c2e:	481b      	ldr	r0, [pc, #108]	; (6c9c <enable_cpunet+0x98>)
    6c30:	6158      	str	r0, [r3, #20]
    6c32:	b11a      	cbz	r2, 6c3c <enable_cpunet+0x38>
    6c34:	2908      	cmp	r1, #8
    6c36:	dd01      	ble.n	6c3c <enable_cpunet+0x38>
    6c38:	4819      	ldr	r0, [pc, #100]	; (6ca0 <enable_cpunet+0x9c>)
    6c3a:	6198      	str	r0, [r3, #24]
    6c3c:	290b      	cmp	r1, #11
    6c3e:	dd28      	ble.n	6c92 <enable_cpunet+0x8e>
    6c40:	f04f 0c0c 	mov.w	ip, #12
    6c44:	b13a      	cbz	r2, 6c56 <enable_cpunet+0x52>
    6c46:	2103      	movs	r1, #3
    6c48:	7139      	strb	r1, [r7, #4]
    6c4a:	2100      	movs	r1, #0
    6c4c:	7179      	strb	r1, [r7, #5]
    6c4e:	71b9      	strb	r1, [r7, #6]
    6c50:	71f9      	strb	r1, [r7, #7]
    6c52:	6878      	ldr	r0, [r7, #4]
    6c54:	6118      	str	r0, [r3, #16]
    6c56:	2100      	movs	r1, #0
    6c58:	f36f 0100 	bfc	r1, #0, #1
    6c5c:	f36f 0141 	bfc	r1, #1, #1
    6c60:	f36f 0182 	bfc	r1, #2, #1
    6c64:	f36f 01c5 	bfc	r1, #3, #3
    6c68:	2304      	movs	r3, #4
    6c6a:	f363 1188 	bfi	r1, r3, #6, #3
    6c6e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    6c72:	f36c 2152 	bfi	r1, ip, #9, #10
    6c76:	f36f 41de 	bfc	r1, #19, #12
    6c7a:	f36f 71df 	bfc	r1, #31, #1
    6c7e:	2300      	movs	r3, #0
    6c80:	4808      	ldr	r0, [pc, #32]	; (6ca4 <enable_cpunet+0xa0>)
    6c82:	f7fc fd23 	bl	36cc <z_impl_z_log_msg_static_create>
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */
}
    6c86:	3708      	adds	r7, #8
    6c88:	46bd      	mov	sp, r7
    6c8a:	bd80      	pop	{r7, pc}
	LOG_DBG("Network MCU released.");
    6c8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6c90:	e7ca      	b.n	6c28 <enable_cpunet+0x24>
    6c92:	f06f 0c1b 	mvn.w	ip, #27
    6c96:	e7d5      	b.n	6c44 <enable_cpunet+0x40>
    6c98:	50003000 	.word	0x50003000
    6c9c:	000214ac 	.word	0x000214ac
    6ca0:	000214dc 	.word	0x000214dc
    6ca4:	000205f8 	.word	0x000205f8

00006ca8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    6ca8:	2940      	cmp	r1, #64	; 0x40
    6caa:	bf28      	it	cs
    6cac:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
    6cae:	2300      	movs	r3, #0
    6cb0:	428b      	cmp	r3, r1
    6cb2:	d21c      	bcs.n	6cee <bt_hex_real+0x46>
{
    6cb4:	b430      	push	{r4, r5}
		str[i * 2]     = hex[b[i] >> 4];
    6cb6:	f810 c003 	ldrb.w	ip, [r0, r3]
    6cba:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    6cbe:	005a      	lsls	r2, r3, #1
    6cc0:	4d0d      	ldr	r5, [pc, #52]	; (6cf8 <bt_hex_real+0x50>)
    6cc2:	f815 c00c 	ldrb.w	ip, [r5, ip]
    6cc6:	4c0d      	ldr	r4, [pc, #52]	; (6cfc <bt_hex_real+0x54>)
    6cc8:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6ccc:	f810 c003 	ldrb.w	ip, [r0, r3]
    6cd0:	f00c 0c0f 	and.w	ip, ip, #15
    6cd4:	3201      	adds	r2, #1
    6cd6:	f815 500c 	ldrb.w	r5, [r5, ip]
    6cda:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
    6cdc:	3301      	adds	r3, #1
    6cde:	428b      	cmp	r3, r1
    6ce0:	d3e9      	bcc.n	6cb6 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
    6ce2:	4806      	ldr	r0, [pc, #24]	; (6cfc <bt_hex_real+0x54>)
    6ce4:	2200      	movs	r2, #0
    6ce6:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
    6cea:	bc30      	pop	{r4, r5}
    6cec:	4770      	bx	lr
	str[i * 2] = '\0';
    6cee:	4803      	ldr	r0, [pc, #12]	; (6cfc <bt_hex_real+0x54>)
    6cf0:	2200      	movs	r2, #0
    6cf2:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
    6cf6:	4770      	bx	lr
    6cf8:	00021538 	.word	0x00021538
    6cfc:	20001ee8 	.word	0x20001ee8

00006d00 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    6d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d02:	b08b      	sub	sp, #44	; 0x2c
    6d04:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    6d06:	7803      	ldrb	r3, [r0, #0]
    6d08:	2b03      	cmp	r3, #3
    6d0a:	d82c      	bhi.n	6d66 <bt_addr_le_str_real+0x66>
    6d0c:	e8df f003 	tbb	[pc, r3]
    6d10:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    6d14:	4917      	ldr	r1, [pc, #92]	; (6d74 <bt_addr_le_str_real+0x74>)
    6d16:	a807      	add	r0, sp, #28
    6d18:	f013 f930 	bl	19f7c <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    6d1c:	7963      	ldrb	r3, [r4, #5]
    6d1e:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    6d20:	78e1      	ldrb	r1, [r4, #3]
    6d22:	78a0      	ldrb	r0, [r4, #2]
    6d24:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6d26:	4d14      	ldr	r5, [pc, #80]	; (6d78 <bt_addr_le_str_real+0x78>)
    6d28:	af07      	add	r7, sp, #28
    6d2a:	9705      	str	r7, [sp, #20]
    6d2c:	9604      	str	r6, [sp, #16]
    6d2e:	9003      	str	r0, [sp, #12]
    6d30:	9102      	str	r1, [sp, #8]
    6d32:	9201      	str	r2, [sp, #4]
    6d34:	9300      	str	r3, [sp, #0]
    6d36:	79a3      	ldrb	r3, [r4, #6]
    6d38:	4a10      	ldr	r2, [pc, #64]	; (6d7c <bt_addr_le_str_real+0x7c>)
    6d3a:	211e      	movs	r1, #30
    6d3c:	4628      	mov	r0, r5
    6d3e:	f011 f925 	bl	17f8c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    6d42:	4628      	mov	r0, r5
    6d44:	b00b      	add	sp, #44	; 0x2c
    6d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    6d48:	490d      	ldr	r1, [pc, #52]	; (6d80 <bt_addr_le_str_real+0x80>)
    6d4a:	a807      	add	r0, sp, #28
    6d4c:	f013 f916 	bl	19f7c <strcpy>
		break;
    6d50:	e7e4      	b.n	6d1c <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
    6d52:	490c      	ldr	r1, [pc, #48]	; (6d84 <bt_addr_le_str_real+0x84>)
    6d54:	a807      	add	r0, sp, #28
    6d56:	f013 f911 	bl	19f7c <strcpy>
		break;
    6d5a:	e7df      	b.n	6d1c <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
    6d5c:	490a      	ldr	r1, [pc, #40]	; (6d88 <bt_addr_le_str_real+0x88>)
    6d5e:	a807      	add	r0, sp, #28
    6d60:	f013 f90c 	bl	19f7c <strcpy>
		break;
    6d64:	e7da      	b.n	6d1c <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    6d66:	4a09      	ldr	r2, [pc, #36]	; (6d8c <bt_addr_le_str_real+0x8c>)
    6d68:	210a      	movs	r1, #10
    6d6a:	a807      	add	r0, sp, #28
    6d6c:	f011 f90e 	bl	17f8c <snprintk>
		break;
    6d70:	e7d4      	b.n	6d1c <bt_addr_le_str_real+0x1c>
    6d72:	bf00      	nop
    6d74:	000214ec 	.word	0x000214ec
    6d78:	20001ec8 	.word	0x20001ec8
    6d7c:	00021514 	.word	0x00021514
    6d80:	000214f4 	.word	0x000214f4
    6d84:	000214fc 	.word	0x000214fc
    6d88:	00021508 	.word	0x00021508
    6d8c:	00022634 	.word	0x00022634

00006d90 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
    6d90:	b570      	push	{r4, r5, r6, lr}
    6d92:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    6d94:	ae02      	add	r6, sp, #8
    6d96:	2400      	movs	r4, #0
    6d98:	9402      	str	r4, [sp, #8]
    6d9a:	9403      	str	r4, [sp, #12]
    6d9c:	4b08      	ldr	r3, [pc, #32]	; (6dc0 <long_wq_init+0x30>)
    6d9e:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
    6da0:	4d08      	ldr	r5, [pc, #32]	; (6dc4 <long_wq_init+0x34>)
    6da2:	4628      	mov	r0, r5
    6da4:	f018 fd30 	bl	1f808 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    6da8:	9600      	str	r6, [sp, #0]
    6daa:	230a      	movs	r3, #10
    6dac:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6db0:	4905      	ldr	r1, [pc, #20]	; (6dc8 <long_wq_init+0x38>)
    6db2:	4628      	mov	r0, r5
    6db4:	f00f fcca 	bl	1674c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    6db8:	4620      	mov	r0, r4
    6dba:	b004      	add	sp, #16
    6dbc:	bd70      	pop	{r4, r5, r6, pc}
    6dbe:	bf00      	nop
    6dc0:	0002154c 	.word	0x0002154c
    6dc4:	20001110 	.word	0x20001110
    6dc8:	20003280 	.word	0x20003280

00006dcc <bt_long_wq_schedule>:
{
    6dcc:	b508      	push	{r3, lr}
    6dce:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    6dd0:	4801      	ldr	r0, [pc, #4]	; (6dd8 <bt_long_wq_schedule+0xc>)
    6dd2:	f018 fd3b 	bl	1f84c <k_work_schedule_for_queue>
}
    6dd6:	bd08      	pop	{r3, pc}
    6dd8:	20001110 	.word	0x20001110

00006ddc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6ddc:	b510      	push	{r4, lr}
    6dde:	4686      	mov	lr, r0
    6de0:	468c      	mov	ip, r1
	switch (src->type) {
    6de2:	7803      	ldrb	r3, [r0, #0]
    6de4:	2b01      	cmp	r3, #1
    6de6:	d018      	beq.n	6e1a <uuid_to_uuid128+0x3e>
    6de8:	2b02      	cmp	r3, #2
    6dea:	d032      	beq.n	6e52 <uuid_to_uuid128+0x76>
    6dec:	b103      	cbz	r3, 6df0 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    6dee:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
    6df0:	4c1b      	ldr	r4, [pc, #108]	; (6e60 <uuid_to_uuid128+0x84>)
    6df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6df4:	f8cc 0000 	str.w	r0, [ip]
    6df8:	f8cc 1004 	str.w	r1, [ip, #4]
    6dfc:	f8cc 2008 	str.w	r2, [ip, #8]
    6e00:	f8cc 300c 	str.w	r3, [ip, #12]
    6e04:	7823      	ldrb	r3, [r4, #0]
    6e06:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    6e0a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    6e0e:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
    6e12:	0a1b      	lsrs	r3, r3, #8
    6e14:	f88c 300e 	strb.w	r3, [ip, #14]
}
    6e18:	e7e9      	b.n	6dee <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    6e1a:	4c11      	ldr	r4, [pc, #68]	; (6e60 <uuid_to_uuid128+0x84>)
    6e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6e1e:	f8cc 0000 	str.w	r0, [ip]
    6e22:	f8cc 1004 	str.w	r1, [ip, #4]
    6e26:	f8cc 2008 	str.w	r2, [ip, #8]
    6e2a:	f8cc 300c 	str.w	r3, [ip, #12]
    6e2e:	7823      	ldrb	r3, [r4, #0]
    6e30:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    6e34:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
    6e38:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
    6e3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    6e40:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    6e44:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    6e46:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
    6e4a:	0e1b      	lsrs	r3, r3, #24
    6e4c:	f88c 3010 	strb.w	r3, [ip, #16]
}
    6e50:	e7cd      	b.n	6dee <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    6e52:	2211      	movs	r2, #17
    6e54:	4601      	mov	r1, r0
    6e56:	4660      	mov	r0, ip
    6e58:	f013 f8f7 	bl	1a04a <memcpy>
		return;
    6e5c:	e7c7      	b.n	6dee <uuid_to_uuid128+0x12>
    6e5e:	bf00      	nop
    6e60:	00021558 	.word	0x00021558

00006e64 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    6e64:	b538      	push	{r3, r4, r5, lr}
    6e66:	4605      	mov	r5, r0
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    6e68:	2801      	cmp	r0, #1
    6e6a:	d00c      	beq.n	6e86 <bt_buf_get_rx+0x22>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    6e6c:	4808      	ldr	r0, [pc, #32]	; (6e90 <bt_buf_get_rx+0x2c>)
    6e6e:	f015 fd7a 	bl	1c966 <net_buf_alloc_fixed>
    6e72:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    6e74:	b12c      	cbz	r4, 6e82 <bt_buf_get_rx+0x1e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    6e76:	2101      	movs	r1, #1
    6e78:	f104 0008 	add.w	r0, r4, #8
    6e7c:	f015 fd9b 	bl	1c9b6 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    6e80:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6e82:	4620      	mov	r0, r4
    6e84:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
    6e86:	4803      	ldr	r0, [pc, #12]	; (6e94 <bt_buf_get_rx+0x30>)
    6e88:	f015 fd6d 	bl	1c966 <net_buf_alloc_fixed>
    6e8c:	4604      	mov	r4, r0
    6e8e:	e7f1      	b.n	6e74 <bt_buf_get_rx+0x10>
    6e90:	20000758 	.word	0x20000758
    6e94:	200007dc 	.word	0x200007dc

00006e98 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    6e98:	b510      	push	{r4, lr}
    6e9a:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    6e9c:	4b0a      	ldr	r3, [pc, #40]	; (6ec8 <bt_buf_get_cmd_complete+0x30>)
    6e9e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    6ea2:	b158      	cbz	r0, 6ebc <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
    6ea4:	f015 fe18 	bl	1cad8 <net_buf_ref>
    6ea8:	4604      	mov	r4, r0
    6eaa:	2101      	movs	r1, #1
    6eac:	7501      	strb	r1, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
    6eae:	2300      	movs	r3, #0
    6eb0:	8183      	strh	r3, [r0, #12]
	net_buf_simple_reserve(&buf->b, reserve);
    6eb2:	3008      	adds	r0, #8
    6eb4:	f015 fd7f 	bl	1c9b6 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6eb8:	4620      	mov	r0, r4
    6eba:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6ebc:	460b      	mov	r3, r1
    6ebe:	2001      	movs	r0, #1
    6ec0:	f7ff ffd0 	bl	6e64 <bt_buf_get_rx>
    6ec4:	4604      	mov	r4, r0
    6ec6:	e7f7      	b.n	6eb8 <bt_buf_get_cmd_complete+0x20>
    6ec8:	20000000 	.word	0x20000000

00006ecc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    6ecc:	b510      	push	{r4, lr}
	switch (evt) {
    6ece:	280f      	cmp	r0, #15
    6ed0:	d90d      	bls.n	6eee <bt_buf_get_evt+0x22>
    6ed2:	2813      	cmp	r0, #19
    6ed4:	d10d      	bne.n	6ef2 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
    6ed6:	4814      	ldr	r0, [pc, #80]	; (6f28 <bt_buf_get_evt+0x5c>)
    6ed8:	f015 fd45 	bl	1c966 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
    6edc:	4604      	mov	r4, r0
    6ede:	b198      	cbz	r0, 6f08 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
    6ee0:	2101      	movs	r1, #1
    6ee2:	3008      	adds	r0, #8
    6ee4:	f015 fd67 	bl	1c9b6 <net_buf_simple_reserve>
    6ee8:	2301      	movs	r3, #1
    6eea:	7523      	strb	r3, [r4, #20]
}
    6eec:	e00c      	b.n	6f08 <bt_buf_get_evt+0x3c>
	switch (evt) {
    6eee:	280e      	cmp	r0, #14
    6ef0:	d205      	bcs.n	6efe <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
    6ef2:	b959      	cbnz	r1, 6f0c <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6ef4:	2001      	movs	r0, #1
    6ef6:	f7ff ffb5 	bl	6e64 <bt_buf_get_rx>
    6efa:	4604      	mov	r4, r0
    6efc:	e004      	b.n	6f08 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
    6efe:	4610      	mov	r0, r2
    6f00:	4619      	mov	r1, r3
    6f02:	f7ff ffc9 	bl	6e98 <bt_buf_get_cmd_complete>
    6f06:	4604      	mov	r4, r0
	}
}
    6f08:	4620      	mov	r0, r4
    6f0a:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
    6f0c:	4807      	ldr	r0, [pc, #28]	; (6f2c <bt_buf_get_evt+0x60>)
    6f0e:	f015 fd2a 	bl	1c966 <net_buf_alloc_fixed>
			if (buf) {
    6f12:	4604      	mov	r4, r0
    6f14:	2800      	cmp	r0, #0
    6f16:	d0f7      	beq.n	6f08 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
    6f18:	2101      	movs	r1, #1
    6f1a:	3008      	adds	r0, #8
    6f1c:	f015 fd4b 	bl	1c9b6 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    6f20:	2301      	movs	r3, #1
    6f22:	7523      	strb	r3, [r4, #20]
			return buf;
    6f24:	e7f0      	b.n	6f08 <bt_buf_get_evt+0x3c>
    6f26:	bf00      	nop
    6f28:	20000860 	.word	0x20000860
    6f2c:	200007b0 	.word	0x200007b0

00006f30 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
    6f30:	2300      	movs	r3, #0
    6f32:	b103      	cbz	r3, 6f36 <conn_handle_disconnected+0x6>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
    6f34:	4770      	bx	lr
		if (!disconnected_handles[i]) {
    6f36:	4a05      	ldr	r2, [pc, #20]	; (6f4c <conn_handle_disconnected+0x1c>)
    6f38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    6f3c:	b922      	cbnz	r2, 6f48 <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    6f3e:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
    6f42:	4902      	ldr	r1, [pc, #8]	; (6f4c <conn_handle_disconnected+0x1c>)
    6f44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
    6f48:	3301      	adds	r3, #1
    6f4a:	e7f2      	b.n	6f32 <conn_handle_disconnected+0x2>
    6f4c:	20001fe4 	.word	0x20001fe4

00006f50 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
    6f50:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
    6f54:	2300      	movs	r3, #0
    6f56:	b10b      	cbz	r3, 6f5c <conn_handle_is_disconnected+0xc>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
    6f58:	2000      	movs	r0, #0
}
    6f5a:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
    6f5c:	4a06      	ldr	r2, [pc, #24]	; (6f78 <conn_handle_is_disconnected+0x28>)
    6f5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    6f62:	4282      	cmp	r2, r0
    6f64:	d001      	beq.n	6f6a <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
    6f66:	3301      	adds	r3, #1
    6f68:	e7f5      	b.n	6f56 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
    6f6a:	4a03      	ldr	r2, [pc, #12]	; (6f78 <conn_handle_is_disconnected+0x28>)
    6f6c:	2100      	movs	r1, #0
    6f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
    6f72:	2001      	movs	r0, #1
    6f74:	4770      	bx	lr
    6f76:	bf00      	nop
    6f78:	20001fe4 	.word	0x20001fe4

00006f7c <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    6f7c:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    6f7e:	7851      	ldrb	r1, [r2, #1]
    6f80:	4b08      	ldr	r3, [pc, #32]	; (6fa4 <read_local_ver_complete+0x28>)
    6f82:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    6f86:	8851      	ldrh	r1, [r2, #2]
    6f88:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    6f8c:	7911      	ldrb	r1, [r2, #4]
    6f8e:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    6f92:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    6f96:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    6f9a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    6f9e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
    6fa2:	4770      	bx	lr
    6fa4:	20000000 	.word	0x20000000

00006fa8 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    6fa8:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    6faa:	7a19      	ldrb	r1, [r3, #8]
    6fac:	79da      	ldrb	r2, [r3, #7]
    6fae:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    6fb2:	7998      	ldrb	r0, [r3, #6]
    6fb4:	795a      	ldrb	r2, [r3, #5]
    6fb6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    6fba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
    6fbe:	7918      	ldrb	r0, [r3, #4]
    6fc0:	78d9      	ldrb	r1, [r3, #3]
    6fc2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    6fc6:	7898      	ldrb	r0, [r3, #2]
    6fc8:	785b      	ldrb	r3, [r3, #1]
    6fca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    6fce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    6fd2:	4903      	ldr	r1, [pc, #12]	; (6fe0 <le_read_supp_states_complete+0x38>)
    6fd4:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
    6fd8:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
    6fdc:	4770      	bx	lr
    6fde:	bf00      	nop
    6fe0:	20000000 	.word	0x20000000

00006fe4 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
    6fe4:	b510      	push	{r4, lr}
    6fe6:	b08e      	sub	sp, #56	; 0x38
    6fe8:	4686      	mov	lr, r0
	const char * const str[] = {
    6fea:	f10d 0c04 	add.w	ip, sp, #4
    6fee:	4c0c      	ldr	r4, [pc, #48]	; (7020 <ver_str+0x3c>)
    6ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6ff2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6ff8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    6ffe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7002:	6823      	ldr	r3, [r4, #0]
    7004:	f8cc 3000 	str.w	r3, [ip]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
    7008:	f1be 0f0c 	cmp.w	lr, #12
    700c:	d902      	bls.n	7014 <ver_str+0x30>
		return str[ver];
	}

	return "unknown";
    700e:	4805      	ldr	r0, [pc, #20]	; (7024 <ver_str+0x40>)
}
    7010:	b00e      	add	sp, #56	; 0x38
    7012:	bd10      	pop	{r4, pc}
		return str[ver];
    7014:	ab0e      	add	r3, sp, #56	; 0x38
    7016:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    701a:	f85e 0c34 	ldr.w	r0, [lr, #-52]
    701e:	e7f7      	b.n	7010 <ver_str+0x2c>
    7020:	000206e4 	.word	0x000206e4
    7024:	000216b8 	.word	0x000216b8

00007028 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
    7028:	2803      	cmp	r0, #3
    702a:	d901      	bls.n	7030 <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
    702c:	4802      	ldr	r0, [pc, #8]	; (7038 <vs_hw_platform+0x10>)
}
    702e:	4770      	bx	lr
		return plat_str[platform];
    7030:	4b02      	ldr	r3, [pc, #8]	; (703c <vs_hw_platform+0x14>)
    7032:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7036:	4770      	bx	lr
    7038:	000216b8 	.word	0x000216b8
    703c:	00021e4c 	.word	0x00021e4c

00007040 <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    7040:	2802      	cmp	r0, #2
    7042:	d107      	bne.n	7054 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
    7044:	2903      	cmp	r1, #3
    7046:	d901      	bls.n	704c <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
    7048:	4803      	ldr	r0, [pc, #12]	; (7058 <vs_hw_variant+0x18>)
}
    704a:	4770      	bx	lr
		return nordic_str[variant];
    704c:	4b03      	ldr	r3, [pc, #12]	; (705c <vs_hw_variant+0x1c>)
    704e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    7052:	4770      	bx	lr
		return "unknown";
    7054:	4800      	ldr	r0, [pc, #0]	; (7058 <vs_hw_variant+0x18>)
    7056:	4770      	bx	lr
    7058:	000216b8 	.word	0x000216b8
    705c:	00021e1c 	.word	0x00021e1c

00007060 <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
    7060:	2803      	cmp	r0, #3
    7062:	d901      	bls.n	7068 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
    7064:	4802      	ldr	r0, [pc, #8]	; (7070 <vs_fw_variant+0x10>)
}
    7066:	4770      	bx	lr
		return var_str[variant];
    7068:	4b02      	ldr	r3, [pc, #8]	; (7074 <vs_fw_variant+0x14>)
    706a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    706e:	4770      	bx	lr
    7070:	000216b8 	.word	0x000216b8
    7074:	00021e84 	.word	0x00021e84

00007078 <hci_reset_complete>:
	uint8_t status = buf->data[0];
    7078:	6883      	ldr	r3, [r0, #8]
    707a:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    707c:	b953      	cbnz	r3, 7094 <hci_reset_complete+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    707e:	4b06      	ldr	r3, [pc, #24]	; (7098 <hci_reset_complete+0x20>)
    7080:	e8d3 2faf 	lda	r2, [r3]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    7084:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7088:	e8d3 1fef 	ldaex	r1, [r3]
    708c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    7090:	2800      	cmp	r0, #0
    7092:	d1f9      	bne.n	7088 <hci_reset_complete+0x10>
}
    7094:	4770      	bx	lr
    7096:	bf00      	nop
    7098:	200000cc 	.word	0x200000cc

0000709c <read_local_features_complete>:
{
    709c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    709e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    70a0:	2208      	movs	r2, #8
    70a2:	3101      	adds	r1, #1
    70a4:	4801      	ldr	r0, [pc, #4]	; (70ac <read_local_features_complete+0x10>)
    70a6:	f012 ffd0 	bl	1a04a <memcpy>
}
    70aa:	bd08      	pop	{r3, pc}
    70ac:	20000070 	.word	0x20000070

000070b0 <read_supported_commands_complete>:
{
    70b0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    70b2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    70b4:	2240      	movs	r2, #64	; 0x40
    70b6:	3101      	adds	r1, #1
    70b8:	4801      	ldr	r0, [pc, #4]	; (70c0 <read_supported_commands_complete+0x10>)
    70ba:	f012 ffc6 	bl	1a04a <memcpy>
}
    70be:	bd08      	pop	{r3, pc}
    70c0:	20000078 	.word	0x20000078

000070c4 <read_le_features_complete>:
{
    70c4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    70c6:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    70c8:	2208      	movs	r2, #8
    70ca:	3101      	adds	r1, #1
    70cc:	4801      	ldr	r0, [pc, #4]	; (70d4 <read_le_features_complete+0x10>)
    70ce:	f012 ffbc 	bl	1a04a <memcpy>
}
    70d2:	bd08      	pop	{r3, pc}
    70d4:	200000d0 	.word	0x200000d0

000070d8 <le_read_buffer_size_complete>:
{
    70d8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    70da:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    70dc:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    70e0:	b299      	uxth	r1, r3
    70e2:	4806      	ldr	r0, [pc, #24]	; (70fc <le_read_buffer_size_complete+0x24>)
    70e4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    70e8:	b901      	cbnz	r1, 70ec <le_read_buffer_size_complete+0x14>
}
    70ea:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    70ec:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    70ee:	460a      	mov	r2, r1
    70f0:	f500 7080 	add.w	r0, r0, #256	; 0x100
    70f4:	f018 fada 	bl	1f6ac <z_impl_k_sem_init>
    70f8:	e7f7      	b.n	70ea <le_read_buffer_size_complete+0x12>
    70fa:	bf00      	nop
    70fc:	20000000 	.word	0x20000000

00007100 <read_buffer_size_complete>:
{
    7100:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    7102:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
    7104:	4b08      	ldr	r3, [pc, #32]	; (7128 <read_buffer_size_complete+0x28>)
    7106:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
    710a:	b103      	cbz	r3, 710e <read_buffer_size_complete+0xe>
}
    710c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    710e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    7112:	4805      	ldr	r0, [pc, #20]	; (7128 <read_buffer_size_complete+0x28>)
    7114:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    7118:	8891      	ldrh	r1, [r2, #4]
    711a:	460a      	mov	r2, r1
    711c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7120:	f018 fac4 	bl	1f6ac <z_impl_k_sem_init>
    7124:	e7f2      	b.n	710c <read_buffer_size_complete+0xc>
    7126:	bf00      	nop
    7128:	20000000 	.word	0x20000000

0000712c <hci_data_buf_overflow>:
{
    712c:	b590      	push	{r4, r7, lr}
    712e:	b083      	sub	sp, #12
    7130:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    7132:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7134:	7818      	ldrb	r0, [r3, #0]
    7136:	b088      	sub	sp, #32
    7138:	466b      	mov	r3, sp
    713a:	f113 0210 	adds.w	r2, r3, #16
    713e:	d031      	beq.n	71a4 <hci_data_buf_overflow+0x78>
    7140:	210c      	movs	r1, #12
    7142:	b11a      	cbz	r2, 714c <hci_data_buf_overflow+0x20>
    7144:	2904      	cmp	r1, #4
    7146:	dd01      	ble.n	714c <hci_data_buf_overflow+0x20>
    7148:	4c19      	ldr	r4, [pc, #100]	; (71b0 <hci_data_buf_overflow+0x84>)
    714a:	615c      	str	r4, [r3, #20]
    714c:	b112      	cbz	r2, 7154 <hci_data_buf_overflow+0x28>
    714e:	2908      	cmp	r1, #8
    7150:	dd00      	ble.n	7154 <hci_data_buf_overflow+0x28>
    7152:	6198      	str	r0, [r3, #24]
    7154:	290b      	cmp	r1, #11
    7156:	dd28      	ble.n	71aa <hci_data_buf_overflow+0x7e>
    7158:	f04f 0c0c 	mov.w	ip, #12
    715c:	b13a      	cbz	r2, 716e <hci_data_buf_overflow+0x42>
    715e:	2103      	movs	r1, #3
    7160:	7139      	strb	r1, [r7, #4]
    7162:	2100      	movs	r1, #0
    7164:	7179      	strb	r1, [r7, #5]
    7166:	71b9      	strb	r1, [r7, #6]
    7168:	71f9      	strb	r1, [r7, #7]
    716a:	6878      	ldr	r0, [r7, #4]
    716c:	6118      	str	r0, [r3, #16]
    716e:	2100      	movs	r1, #0
    7170:	f36f 0100 	bfc	r1, #0, #1
    7174:	f36f 0141 	bfc	r1, #1, #1
    7178:	f36f 0182 	bfc	r1, #2, #1
    717c:	f36f 01c5 	bfc	r1, #3, #3
    7180:	2302      	movs	r3, #2
    7182:	f363 1188 	bfi	r1, r3, #6, #3
    7186:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    718a:	f36c 2152 	bfi	r1, ip, #9, #10
    718e:	f36f 41de 	bfc	r1, #19, #12
    7192:	f36f 71df 	bfc	r1, #31, #1
    7196:	2300      	movs	r3, #0
    7198:	4806      	ldr	r0, [pc, #24]	; (71b4 <hci_data_buf_overflow+0x88>)
    719a:	f7fc fa97 	bl	36cc <z_impl_z_log_msg_static_create>
}
    719e:	370c      	adds	r7, #12
    71a0:	46bd      	mov	sp, r7
    71a2:	bd90      	pop	{r4, r7, pc}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    71a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    71a8:	e7cb      	b.n	7142 <hci_data_buf_overflow+0x16>
    71aa:	f06f 0c1b 	mvn.w	ip, #27
    71ae:	e7d5      	b.n	715c <hci_data_buf_overflow+0x30>
    71b0:	000216c0 	.word	0x000216c0
    71b4:	00020548 	.word	0x00020548

000071b8 <handle_event_common>:
{
    71b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ba:	b083      	sub	sp, #12
    71bc:	af00      	add	r7, sp, #0
    71be:	4604      	mov	r4, r0
    71c0:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    71c2:	f04f 0c00 	mov.w	ip, #0
    71c6:	4563      	cmp	r3, ip
    71c8:	d954      	bls.n	7274 <handle_event_common+0xbc>
		const struct event_handler *handler = &handlers[i];
    71ca:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
    71ce:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
    71d2:	45a6      	cmp	lr, r4
    71d4:	d109      	bne.n	71ea <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
    71d6:	8983      	ldrh	r3, [r0, #12]
    71d8:	784a      	ldrb	r2, [r1, #1]
    71da:	4293      	cmp	r3, r2
    71dc:	d308      	bcc.n	71f0 <handle_event_common+0x38>
		handler->handler(buf);
    71de:	684b      	ldr	r3, [r1, #4]
    71e0:	4798      	blx	r3
		return 0;
    71e2:	2000      	movs	r0, #0
}
    71e4:	370c      	adds	r7, #12
    71e6:	46bd      	mov	sp, r7
    71e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
    71ea:	f10c 0c01 	add.w	ip, ip, #1
    71ee:	e7ea      	b.n	71c6 <handle_event_common+0xe>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    71f0:	466d      	mov	r5, sp
    71f2:	b088      	sub	sp, #32
    71f4:	4669      	mov	r1, sp
    71f6:	f111 0210 	adds.w	r2, r1, #16
    71fa:	d035      	beq.n	7268 <handle_event_common+0xb0>
    71fc:	2010      	movs	r0, #16
    71fe:	b11a      	cbz	r2, 7208 <handle_event_common+0x50>
    7200:	2804      	cmp	r0, #4
    7202:	dd01      	ble.n	7208 <handle_event_common+0x50>
    7204:	4e1d      	ldr	r6, [pc, #116]	; (727c <handle_event_common+0xc4>)
    7206:	614e      	str	r6, [r1, #20]
    7208:	b112      	cbz	r2, 7210 <handle_event_common+0x58>
    720a:	2808      	cmp	r0, #8
    720c:	dd00      	ble.n	7210 <handle_event_common+0x58>
    720e:	618b      	str	r3, [r1, #24]
    7210:	b112      	cbz	r2, 7218 <handle_event_common+0x60>
    7212:	280c      	cmp	r0, #12
    7214:	dd00      	ble.n	7218 <handle_event_common+0x60>
    7216:	61cc      	str	r4, [r1, #28]
    7218:	280f      	cmp	r0, #15
    721a:	dd28      	ble.n	726e <handle_event_common+0xb6>
    721c:	2310      	movs	r3, #16
    721e:	b13a      	cbz	r2, 7230 <handle_event_common+0x78>
    7220:	2004      	movs	r0, #4
    7222:	7138      	strb	r0, [r7, #4]
    7224:	2000      	movs	r0, #0
    7226:	7178      	strb	r0, [r7, #5]
    7228:	71b8      	strb	r0, [r7, #6]
    722a:	71f8      	strb	r0, [r7, #7]
    722c:	6878      	ldr	r0, [r7, #4]
    722e:	6108      	str	r0, [r1, #16]
    7230:	2100      	movs	r1, #0
    7232:	f36f 0100 	bfc	r1, #0, #1
    7236:	f36f 0141 	bfc	r1, #1, #1
    723a:	f36f 0182 	bfc	r1, #2, #1
    723e:	f36f 01c5 	bfc	r1, #3, #3
    7242:	2001      	movs	r0, #1
    7244:	f360 1188 	bfi	r1, r0, #6, #3
    7248:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
    724c:	f363 2152 	bfi	r1, r3, #9, #10
    7250:	f36f 41de 	bfc	r1, #19, #12
    7254:	f36f 71df 	bfc	r1, #31, #1
    7258:	2300      	movs	r3, #0
    725a:	4809      	ldr	r0, [pc, #36]	; (7280 <handle_event_common+0xc8>)
    725c:	f7fc fa36 	bl	36cc <z_impl_z_log_msg_static_create>
    7260:	46ad      	mov	sp, r5
			return -EINVAL;
    7262:	f06f 0015 	mvn.w	r0, #21
    7266:	e7bd      	b.n	71e4 <handle_event_common+0x2c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7268:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    726c:	e7c7      	b.n	71fe <handle_event_common+0x46>
    726e:	f06f 031b 	mvn.w	r3, #27
    7272:	e7d4      	b.n	721e <handle_event_common+0x66>
	return -EOPNOTSUPP;
    7274:	f06f 005e 	mvn.w	r0, #94	; 0x5e
    7278:	e7b4      	b.n	71e4 <handle_event_common+0x2c>
    727a:	bf00      	nop
    727c:	000216e8 	.word	0x000216e8
    7280:	00020548 	.word	0x00020548

00007284 <bt_dev_show_info>:
{
    7284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7288:	b082      	sub	sp, #8
    728a:	af00      	add	r7, sp, #0
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    728c:	4b69      	ldr	r3, [pc, #420]	; (7434 <bt_dev_show_info+0x1b0>)
    728e:	79db      	ldrb	r3, [r3, #7]
    7290:	2b01      	cmp	r3, #1
    7292:	d92a      	bls.n	72ea <bt_dev_show_info+0x66>
    7294:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 7438 <bt_dev_show_info+0x1b4>
    7298:	4866      	ldr	r0, [pc, #408]	; (7434 <bt_dev_show_info+0x1b0>)
    729a:	f7ff fd31 	bl	6d00 <bt_addr_le_str_real>
    729e:	2302      	movs	r3, #2
    72a0:	713b      	strb	r3, [r7, #4]
    72a2:	2303      	movs	r3, #3
    72a4:	717b      	strb	r3, [r7, #5]
    72a6:	466d      	mov	r5, sp
    72a8:	b08a      	sub	sp, #40	; 0x28
    72aa:	466e      	mov	r6, sp
    72ac:	f116 0210 	adds.w	r2, r6, #16
    72b0:	d01e      	beq.n	72f0 <bt_dev_show_info+0x6c>
    72b2:	f04f 0c12 	mov.w	ip, #18
    72b6:	b122      	cbz	r2, 72c2 <bt_dev_show_info+0x3e>
    72b8:	f1bc 0f04 	cmp.w	ip, #4
    72bc:	dd01      	ble.n	72c2 <bt_dev_show_info+0x3e>
    72be:	4b5f      	ldr	r3, [pc, #380]	; (743c <bt_dev_show_info+0x1b8>)
    72c0:	6173      	str	r3, [r6, #20]
    72c2:	2302      	movs	r3, #2
    72c4:	703b      	strb	r3, [r7, #0]
    72c6:	b122      	cbz	r2, 72d2 <bt_dev_show_info+0x4e>
    72c8:	f1bc 0f08 	cmp.w	ip, #8
    72cc:	dd01      	ble.n	72d2 <bt_dev_show_info+0x4e>
    72ce:	f8c6 8018 	str.w	r8, [r6, #24]
    72d2:	2303      	movs	r3, #3
    72d4:	707b      	strb	r3, [r7, #1]
    72d6:	b11a      	cbz	r2, 72e0 <bt_dev_show_info+0x5c>
    72d8:	f1bc 0f0c 	cmp.w	ip, #12
    72dc:	dd00      	ble.n	72e0 <bt_dev_show_info+0x5c>
    72de:	61f0      	str	r0, [r6, #28]
    72e0:	b19a      	cbz	r2, 730a <bt_dev_show_info+0x86>
    72e2:	f106 0320 	add.w	r3, r6, #32
    72e6:	2100      	movs	r1, #0
    72e8:	e00d      	b.n	7306 <bt_dev_show_info+0x82>
    72ea:	f8df 8154 	ldr.w	r8, [pc, #340]	; 7440 <bt_dev_show_info+0x1bc>
    72ee:	e7d3      	b.n	7298 <bt_dev_show_info+0x14>
    72f0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    72f4:	e7df      	b.n	72b6 <bt_dev_show_info+0x32>
    72f6:	f107 0008 	add.w	r0, r7, #8
    72fa:	4408      	add	r0, r1
    72fc:	f810 0c08 	ldrb.w	r0, [r0, #-8]
    7300:	f803 0b01 	strb.w	r0, [r3], #1
    7304:	3101      	adds	r1, #1
    7306:	2901      	cmp	r1, #1
    7308:	d9f5      	bls.n	72f6 <bt_dev_show_info+0x72>
    730a:	f1bc 0f11 	cmp.w	ip, #17
    730e:	dd25      	ble.n	735c <bt_dev_show_info+0xd8>
    7310:	2312      	movs	r3, #18
    7312:	b142      	cbz	r2, 7326 <bt_dev_show_info+0xa2>
    7314:	2104      	movs	r1, #4
    7316:	7139      	strb	r1, [r7, #4]
    7318:	2100      	movs	r1, #0
    731a:	7179      	strb	r1, [r7, #5]
    731c:	71b9      	strb	r1, [r7, #6]
    731e:	2102      	movs	r1, #2
    7320:	71f9      	strb	r1, [r7, #7]
    7322:	6878      	ldr	r0, [r7, #4]
    7324:	6130      	str	r0, [r6, #16]
    7326:	2100      	movs	r1, #0
    7328:	f36f 0100 	bfc	r1, #0, #1
    732c:	f36f 0141 	bfc	r1, #1, #1
    7330:	f36f 0182 	bfc	r1, #2, #1
    7334:	f36f 01c5 	bfc	r1, #3, #3
    7338:	2003      	movs	r0, #3
    733a:	f360 1188 	bfi	r1, r0, #6, #3
    733e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7342:	f363 2152 	bfi	r1, r3, #9, #10
    7346:	f36f 41de 	bfc	r1, #19, #12
    734a:	f36f 71df 	bfc	r1, #31, #1
    734e:	2300      	movs	r3, #0
    7350:	483c      	ldr	r0, [pc, #240]	; (7444 <bt_dev_show_info+0x1c0>)
    7352:	f7fc f9bb 	bl	36cc <z_impl_z_log_msg_static_create>
    7356:	46ad      	mov	sp, r5
	for (i = 1; i < bt_dev.id_count; i++) {
    7358:	2501      	movs	r5, #1
    735a:	e03a      	b.n	73d2 <bt_dev_show_info+0x14e>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    735c:	f06f 031b 	mvn.w	r3, #27
    7360:	e7d7      	b.n	7312 <bt_dev_show_info+0x8e>
		BT_INFO("Identity[%d]: %s",
    7362:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7366:	e047      	b.n	73f8 <bt_dev_show_info+0x174>
    7368:	b112      	cbz	r2, 7370 <bt_dev_show_info+0xec>
    736a:	2908      	cmp	r1, #8
    736c:	dd00      	ble.n	7370 <bt_dev_show_info+0xec>
    736e:	619d      	str	r5, [r3, #24]
    7370:	f04f 0c03 	mov.w	ip, #3
    7374:	f887 c000 	strb.w	ip, [r7]
    7378:	b112      	cbz	r2, 7380 <bt_dev_show_info+0xfc>
    737a:	290c      	cmp	r1, #12
    737c:	dd00      	ble.n	7380 <bt_dev_show_info+0xfc>
    737e:	61d8      	str	r0, [r3, #28]
    7380:	2a00      	cmp	r2, #0
    7382:	d142      	bne.n	740a <bt_dev_show_info+0x186>
    7384:	2910      	cmp	r1, #16
    7386:	dd51      	ble.n	742c <bt_dev_show_info+0x1a8>
    7388:	2111      	movs	r1, #17
    738a:	b142      	cbz	r2, 739e <bt_dev_show_info+0x11a>
    738c:	2004      	movs	r0, #4
    738e:	7138      	strb	r0, [r7, #4]
    7390:	2000      	movs	r0, #0
    7392:	7178      	strb	r0, [r7, #5]
    7394:	71b8      	strb	r0, [r7, #6]
    7396:	2001      	movs	r0, #1
    7398:	71f8      	strb	r0, [r7, #7]
    739a:	6878      	ldr	r0, [r7, #4]
    739c:	6118      	str	r0, [r3, #16]
    739e:	f36f 0400 	bfc	r4, #0, #1
    73a2:	f36f 0441 	bfc	r4, #1, #1
    73a6:	f36f 0482 	bfc	r4, #2, #1
    73aa:	f36f 04c5 	bfc	r4, #3, #3
    73ae:	2303      	movs	r3, #3
    73b0:	f363 1488 	bfi	r4, r3, #6, #3
    73b4:	f3c1 0109 	ubfx	r1, r1, #0, #10
    73b8:	f361 2452 	bfi	r4, r1, #9, #10
    73bc:	f36f 44de 	bfc	r4, #19, #12
    73c0:	f36f 74df 	bfc	r4, #31, #1
    73c4:	2300      	movs	r3, #0
    73c6:	4621      	mov	r1, r4
    73c8:	481e      	ldr	r0, [pc, #120]	; (7444 <bt_dev_show_info+0x1c0>)
    73ca:	f7fc f97f 	bl	36cc <z_impl_z_log_msg_static_create>
    73ce:	46b5      	mov	sp, r6
	for (i = 1; i < bt_dev.id_count; i++) {
    73d0:	3501      	adds	r5, #1
    73d2:	4b18      	ldr	r3, [pc, #96]	; (7434 <bt_dev_show_info+0x1b0>)
    73d4:	79db      	ldrb	r3, [r3, #7]
    73d6:	42ab      	cmp	r3, r5
    73d8:	dd38      	ble.n	744c <bt_dev_show_info+0x1c8>
		BT_INFO("Identity[%d]: %s",
    73da:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    73de:	4815      	ldr	r0, [pc, #84]	; (7434 <bt_dev_show_info+0x1b0>)
    73e0:	4418      	add	r0, r3
    73e2:	f7ff fc8d 	bl	6d00 <bt_addr_le_str_real>
    73e6:	2303      	movs	r3, #3
    73e8:	713b      	strb	r3, [r7, #4]
    73ea:	466e      	mov	r6, sp
    73ec:	b08a      	sub	sp, #40	; 0x28
    73ee:	466b      	mov	r3, sp
    73f0:	f113 0210 	adds.w	r2, r3, #16
    73f4:	d0b5      	beq.n	7362 <bt_dev_show_info+0xde>
    73f6:	2111      	movs	r1, #17
    73f8:	2a00      	cmp	r2, #0
    73fa:	d0b5      	beq.n	7368 <bt_dev_show_info+0xe4>
    73fc:	2904      	cmp	r1, #4
    73fe:	ddb3      	ble.n	7368 <bt_dev_show_info+0xe4>
    7400:	f8df c044 	ldr.w	ip, [pc, #68]	; 7448 <bt_dev_show_info+0x1c4>
    7404:	f8c3 c014 	str.w	ip, [r3, #20]
    7408:	e7ae      	b.n	7368 <bt_dev_show_info+0xe4>
    740a:	f103 0020 	add.w	r0, r3, #32
    740e:	f04f 0c00 	mov.w	ip, #0
    7412:	f1bc 0f00 	cmp.w	ip, #0
    7416:	d1b5      	bne.n	7384 <bt_dev_show_info+0x100>
    7418:	f107 0e08 	add.w	lr, r7, #8
    741c:	44e6      	add	lr, ip
    741e:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    7422:	f800 eb01 	strb.w	lr, [r0], #1
    7426:	f10c 0c01 	add.w	ip, ip, #1
    742a:	e7f2      	b.n	7412 <bt_dev_show_info+0x18e>
    742c:	f06f 011b 	mvn.w	r1, #27
    7430:	e7ab      	b.n	738a <bt_dev_show_info+0x106>
    7432:	bf00      	nop
    7434:	20000000 	.word	0x20000000
    7438:	0002170c 	.word	0x0002170c
    743c:	00021710 	.word	0x00021710
    7440:	00020a70 	.word	0x00020a70
    7444:	00020548 	.word	0x00020548
    7448:	00021720 	.word	0x00021720
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    744c:	4c64      	ldr	r4, [pc, #400]	; (75e0 <bt_dev_show_info+0x35c>)
    744e:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    7452:	4628      	mov	r0, r5
    7454:	f7ff fdc6 	bl	6fe4 <ver_str>
    7458:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
    745c:	f8b4 c06e 	ldrh.w	ip, [r4, #110]	; 0x6e
    7460:	2302      	movs	r3, #2
    7462:	713b      	strb	r3, [r7, #4]
    7464:	466c      	mov	r4, sp
    7466:	b08c      	sub	sp, #48	; 0x30
    7468:	466b      	mov	r3, sp
    746a:	f113 0210 	adds.w	r2, r3, #16
    746e:	f000 8098 	beq.w	75a2 <bt_dev_show_info+0x31e>
    7472:	2119      	movs	r1, #25
    7474:	b11a      	cbz	r2, 747e <bt_dev_show_info+0x1fa>
    7476:	2904      	cmp	r1, #4
    7478:	dd01      	ble.n	747e <bt_dev_show_info+0x1fa>
    747a:	4e5a      	ldr	r6, [pc, #360]	; (75e4 <bt_dev_show_info+0x360>)
    747c:	615e      	str	r6, [r3, #20]
    747e:	2602      	movs	r6, #2
    7480:	703e      	strb	r6, [r7, #0]
    7482:	b112      	cbz	r2, 748a <bt_dev_show_info+0x206>
    7484:	2908      	cmp	r1, #8
    7486:	dd00      	ble.n	748a <bt_dev_show_info+0x206>
    7488:	6198      	str	r0, [r3, #24]
    748a:	b112      	cbz	r2, 7492 <bt_dev_show_info+0x20e>
    748c:	290c      	cmp	r1, #12
    748e:	dd00      	ble.n	7492 <bt_dev_show_info+0x20e>
    7490:	61dd      	str	r5, [r3, #28]
    7492:	b11a      	cbz	r2, 749c <bt_dev_show_info+0x218>
    7494:	2910      	cmp	r1, #16
    7496:	dd01      	ble.n	749c <bt_dev_show_info+0x218>
    7498:	f8c3 e020 	str.w	lr, [r3, #32]
    749c:	b11a      	cbz	r2, 74a6 <bt_dev_show_info+0x222>
    749e:	2914      	cmp	r1, #20
    74a0:	dd01      	ble.n	74a6 <bt_dev_show_info+0x222>
    74a2:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
    74a6:	b122      	cbz	r2, 74b2 <bt_dev_show_info+0x22e>
    74a8:	f103 0028 	add.w	r0, r3, #40	; 0x28
    74ac:	2500      	movs	r5, #0
    74ae:	2d00      	cmp	r5, #0
    74b0:	d07a      	beq.n	75a8 <bt_dev_show_info+0x324>
    74b2:	2918      	cmp	r1, #24
    74b4:	f340 8081 	ble.w	75ba <bt_dev_show_info+0x336>
    74b8:	2519      	movs	r5, #25
    74ba:	b142      	cbz	r2, 74ce <bt_dev_show_info+0x24a>
    74bc:	2106      	movs	r1, #6
    74be:	7139      	strb	r1, [r7, #4]
    74c0:	2100      	movs	r1, #0
    74c2:	7179      	strb	r1, [r7, #5]
    74c4:	71b9      	strb	r1, [r7, #6]
    74c6:	2101      	movs	r1, #1
    74c8:	71f9      	strb	r1, [r7, #7]
    74ca:	6878      	ldr	r0, [r7, #4]
    74cc:	6118      	str	r0, [r3, #16]
    74ce:	2100      	movs	r1, #0
    74d0:	f36f 0100 	bfc	r1, #0, #1
    74d4:	f36f 0141 	bfc	r1, #1, #1
    74d8:	f36f 0182 	bfc	r1, #2, #1
    74dc:	f36f 01c5 	bfc	r1, #3, #3
    74e0:	2303      	movs	r3, #3
    74e2:	f363 1188 	bfi	r1, r3, #6, #3
    74e6:	f3c5 0509 	ubfx	r5, r5, #0, #10
    74ea:	f365 2152 	bfi	r1, r5, #9, #10
    74ee:	f36f 41de 	bfc	r1, #19, #12
    74f2:	f36f 71df 	bfc	r1, #31, #1
    74f6:	2300      	movs	r3, #0
    74f8:	483b      	ldr	r0, [pc, #236]	; (75e8 <bt_dev_show_info+0x364>)
    74fa:	f7fc f8e7 	bl	36cc <z_impl_z_log_msg_static_create>
    74fe:	46a5      	mov	sp, r4
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    7500:	4c37      	ldr	r4, [pc, #220]	; (75e0 <bt_dev_show_info+0x35c>)
    7502:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    7506:	4628      	mov	r0, r5
    7508:	f7ff fd6c 	bl	6fe4 <ver_str>
    750c:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
    7510:	2302      	movs	r3, #2
    7512:	713b      	strb	r3, [r7, #4]
    7514:	b08a      	sub	sp, #40	; 0x28
    7516:	466b      	mov	r3, sp
    7518:	f113 0210 	adds.w	r2, r3, #16
    751c:	d050      	beq.n	75c0 <bt_dev_show_info+0x33c>
    751e:	2415      	movs	r4, #21
    7520:	b11a      	cbz	r2, 752a <bt_dev_show_info+0x2a6>
    7522:	2c04      	cmp	r4, #4
    7524:	dd01      	ble.n	752a <bt_dev_show_info+0x2a6>
    7526:	4931      	ldr	r1, [pc, #196]	; (75ec <bt_dev_show_info+0x368>)
    7528:	6159      	str	r1, [r3, #20]
    752a:	2102      	movs	r1, #2
    752c:	7039      	strb	r1, [r7, #0]
    752e:	b112      	cbz	r2, 7536 <bt_dev_show_info+0x2b2>
    7530:	2c08      	cmp	r4, #8
    7532:	dd00      	ble.n	7536 <bt_dev_show_info+0x2b2>
    7534:	6198      	str	r0, [r3, #24]
    7536:	b112      	cbz	r2, 753e <bt_dev_show_info+0x2ba>
    7538:	2c0c      	cmp	r4, #12
    753a:	dd00      	ble.n	753e <bt_dev_show_info+0x2ba>
    753c:	61dd      	str	r5, [r3, #28]
    753e:	b112      	cbz	r2, 7546 <bt_dev_show_info+0x2c2>
    7540:	2c10      	cmp	r4, #16
    7542:	dd00      	ble.n	7546 <bt_dev_show_info+0x2c2>
    7544:	621e      	str	r6, [r3, #32]
    7546:	b11a      	cbz	r2, 7550 <bt_dev_show_info+0x2cc>
    7548:	f103 0124 	add.w	r1, r3, #36	; 0x24
    754c:	2000      	movs	r0, #0
    754e:	b3d0      	cbz	r0, 75c6 <bt_dev_show_info+0x342>
    7550:	2c14      	cmp	r4, #20
    7552:	dd41      	ble.n	75d8 <bt_dev_show_info+0x354>
    7554:	2415      	movs	r4, #21
    7556:	b142      	cbz	r2, 756a <bt_dev_show_info+0x2e6>
    7558:	2105      	movs	r1, #5
    755a:	7139      	strb	r1, [r7, #4]
    755c:	2100      	movs	r1, #0
    755e:	7179      	strb	r1, [r7, #5]
    7560:	71b9      	strb	r1, [r7, #6]
    7562:	2101      	movs	r1, #1
    7564:	71f9      	strb	r1, [r7, #7]
    7566:	6878      	ldr	r0, [r7, #4]
    7568:	6118      	str	r0, [r3, #16]
    756a:	2100      	movs	r1, #0
    756c:	f36f 0100 	bfc	r1, #0, #1
    7570:	f36f 0141 	bfc	r1, #1, #1
    7574:	f36f 0182 	bfc	r1, #2, #1
    7578:	f36f 01c5 	bfc	r1, #3, #3
    757c:	2303      	movs	r3, #3
    757e:	f363 1188 	bfi	r1, r3, #6, #3
    7582:	f3c4 0409 	ubfx	r4, r4, #0, #10
    7586:	f364 2152 	bfi	r1, r4, #9, #10
    758a:	f36f 41de 	bfc	r1, #19, #12
    758e:	f36f 71df 	bfc	r1, #31, #1
    7592:	2300      	movs	r3, #0
    7594:	4814      	ldr	r0, [pc, #80]	; (75e8 <bt_dev_show_info+0x364>)
    7596:	f7fc f899 	bl	36cc <z_impl_z_log_msg_static_create>
}
    759a:	3708      	adds	r7, #8
    759c:	46bd      	mov	sp, r7
    759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    75a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    75a6:	e765      	b.n	7474 <bt_dev_show_info+0x1f0>
    75a8:	f107 0608 	add.w	r6, r7, #8
    75ac:	442e      	add	r6, r5
    75ae:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    75b2:	f800 6b01 	strb.w	r6, [r0], #1
    75b6:	3501      	adds	r5, #1
    75b8:	e779      	b.n	74ae <bt_dev_show_info+0x22a>
    75ba:	f06f 051b 	mvn.w	r5, #27
    75be:	e77c      	b.n	74ba <bt_dev_show_info+0x236>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    75c0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    75c4:	e7ac      	b.n	7520 <bt_dev_show_info+0x29c>
    75c6:	f107 0508 	add.w	r5, r7, #8
    75ca:	4405      	add	r5, r0
    75cc:	f815 5c08 	ldrb.w	r5, [r5, #-8]
    75d0:	f801 5b01 	strb.w	r5, [r1], #1
    75d4:	3001      	adds	r0, #1
    75d6:	e7ba      	b.n	754e <bt_dev_show_info+0x2ca>
    75d8:	f06f 041b 	mvn.w	r4, #27
    75dc:	e7bb      	b.n	7556 <bt_dev_show_info+0x2d2>
    75de:	bf00      	nop
    75e0:	20000000 	.word	0x20000000
    75e4:	00021734 	.word	0x00021734
    75e8:	00020548 	.word	0x00020548
    75ec:	00021774 	.word	0x00021774

000075f0 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    75f0:	2801      	cmp	r0, #1
    75f2:	d001      	beq.n	75f8 <find_pending_connect+0x8>
	return NULL;
    75f4:	2000      	movs	r0, #0
}
    75f6:	4770      	bx	lr
{
    75f8:	b500      	push	{lr}
    75fa:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    75fc:	2205      	movs	r2, #5
    75fe:	4b0d      	ldr	r3, [pc, #52]	; (7634 <find_pending_connect+0x44>)
    7600:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
    7604:	f004 fb24 	bl	bc50 <bt_conn_lookup_state_le>
		if (!conn) {
    7608:	b110      	cbz	r0, 7610 <find_pending_connect+0x20>
}
    760a:	b003      	add	sp, #12
    760c:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
    7610:	4b09      	ldr	r3, [pc, #36]	; (7638 <find_pending_connect+0x48>)
    7612:	e893 0003 	ldmia.w	r3, {r0, r1}
    7616:	9000      	str	r0, [sp, #0]
    7618:	f8ad 1004 	strh.w	r1, [sp, #4]
    761c:	0c09      	lsrs	r1, r1, #16
    761e:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7622:	2204      	movs	r2, #4
    7624:	4669      	mov	r1, sp
    7626:	4b03      	ldr	r3, [pc, #12]	; (7634 <find_pending_connect+0x44>)
    7628:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
    762c:	f004 fb10 	bl	bc50 <bt_conn_lookup_state_le>
		return conn;
    7630:	e7eb      	b.n	760a <find_pending_connect+0x1a>
    7632:	bf00      	nop
    7634:	20000000 	.word	0x20000000
    7638:	00020718 	.word	0x00020718

0000763c <le_conn_complete_adv_timeout>:
{
    763c:	b510      	push	{r4, lr}
    763e:	b088      	sub	sp, #32
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    7640:	f003 f8f2 	bl	a828 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
    7644:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7646:	e8d0 3fef 	ldaex	r3, [r0]
    764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    764e:	e8c0 3fe2 	stlex	r2, r3, [r0]
    7652:	2a00      	cmp	r2, #0
    7654:	d1f7      	bne.n	7646 <le_conn_complete_adv_timeout+0xa>
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
    7656:	2100      	movs	r1, #0
    7658:	2001      	movs	r0, #1
    765a:	f7ff ffc9 	bl	75f0 <find_pending_connect>
		if (!conn) {
    765e:	4604      	mov	r4, r0
    7660:	b148      	cbz	r0, 7676 <le_conn_complete_adv_timeout+0x3a>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    7662:	233c      	movs	r3, #60	; 0x3c
    7664:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7666:	2100      	movs	r1, #0
    7668:	f003 ffce 	bl	b608 <bt_conn_set_state>
		bt_conn_unref(conn);
    766c:	4620      	mov	r0, r4
    766e:	f013 f9c6 	bl	1a9fe <bt_conn_unref>
}
    7672:	b008      	add	sp, #32
    7674:	bd10      	pop	{r4, pc}
			BT_ERR("No pending peripheral connection");
    7676:	4b13      	ldr	r3, [pc, #76]	; (76c4 <le_conn_complete_adv_timeout+0x88>)
    7678:	9307      	str	r3, [sp, #28]
    767a:	2302      	movs	r3, #2
    767c:	f88d 3004 	strb.w	r3, [sp, #4]
    7680:	2300      	movs	r3, #0
    7682:	f88d 3005 	strb.w	r3, [sp, #5]
    7686:	f88d 3006 	strb.w	r3, [sp, #6]
    768a:	f88d 3007 	strb.w	r3, [sp, #7]
    768e:	9a01      	ldr	r2, [sp, #4]
    7690:	9206      	str	r2, [sp, #24]
    7692:	4619      	mov	r1, r3
    7694:	f363 0100 	bfi	r1, r3, #0, #1
    7698:	f363 0141 	bfi	r1, r3, #1, #1
    769c:	f363 0182 	bfi	r1, r3, #2, #1
    76a0:	f363 01c5 	bfi	r1, r3, #3, #3
    76a4:	2201      	movs	r2, #1
    76a6:	f362 1188 	bfi	r1, r2, #6, #3
    76aa:	2208      	movs	r2, #8
    76ac:	f362 2152 	bfi	r1, r2, #9, #10
    76b0:	f363 41de 	bfi	r1, r3, #19, #12
    76b4:	f363 71df 	bfi	r1, r3, #31, #1
    76b8:	aa06      	add	r2, sp, #24
    76ba:	4803      	ldr	r0, [pc, #12]	; (76c8 <le_conn_complete_adv_timeout+0x8c>)
    76bc:	f7fc f806 	bl	36cc <z_impl_z_log_msg_static_create>
			return;
    76c0:	e7d7      	b.n	7672 <le_conn_complete_adv_timeout+0x36>
    76c2:	bf00      	nop
    76c4:	0002179c 	.word	0x0002179c
    76c8:	00020548 	.word	0x00020548

000076cc <hci_disconn_complete>:
{
    76cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    76ce:	b083      	sub	sp, #12
    76d0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    76d2:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76d4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    76d8:	7823      	ldrb	r3, [r4, #0]
    76da:	b113      	cbz	r3, 76e2 <hci_disconn_complete+0x16>
}
    76dc:	370c      	adds	r7, #12
    76de:	46bd      	mov	sp, r7
    76e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
    76e2:	4630      	mov	r0, r6
    76e4:	f003 ff86 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    76e8:	4605      	mov	r5, r0
    76ea:	b158      	cbz	r0, 7704 <hci_disconn_complete+0x38>
	conn->err = evt->reason;
    76ec:	78e3      	ldrb	r3, [r4, #3]
    76ee:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    76f0:	2100      	movs	r1, #0
    76f2:	f003 ff89 	bl	b608 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    76f6:	78ab      	ldrb	r3, [r5, #2]
    76f8:	2b01      	cmp	r3, #1
    76fa:	d03f      	beq.n	777c <hci_disconn_complete+0xb0>
		bt_conn_unref(conn);
    76fc:	4628      	mov	r0, r5
    76fe:	f013 f97e 	bl	1a9fe <bt_conn_unref>
		return;
    7702:	e7eb      	b.n	76dc <hci_disconn_complete+0x10>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7704:	466d      	mov	r5, sp
    7706:	b088      	sub	sp, #32
    7708:	466b      	mov	r3, sp
    770a:	f113 0210 	adds.w	r2, r3, #16
    770e:	d02f      	beq.n	7770 <hci_disconn_complete+0xa4>
    7710:	210c      	movs	r1, #12
    7712:	b11a      	cbz	r2, 771c <hci_disconn_complete+0x50>
    7714:	2904      	cmp	r1, #4
    7716:	dd01      	ble.n	771c <hci_disconn_complete+0x50>
    7718:	481a      	ldr	r0, [pc, #104]	; (7784 <hci_disconn_complete+0xb8>)
    771a:	6158      	str	r0, [r3, #20]
    771c:	b112      	cbz	r2, 7724 <hci_disconn_complete+0x58>
    771e:	2908      	cmp	r1, #8
    7720:	dd00      	ble.n	7724 <hci_disconn_complete+0x58>
    7722:	619e      	str	r6, [r3, #24]
    7724:	290b      	cmp	r1, #11
    7726:	dd26      	ble.n	7776 <hci_disconn_complete+0xaa>
    7728:	240c      	movs	r4, #12
    772a:	b13a      	cbz	r2, 773c <hci_disconn_complete+0x70>
    772c:	2103      	movs	r1, #3
    772e:	7139      	strb	r1, [r7, #4]
    7730:	2100      	movs	r1, #0
    7732:	7179      	strb	r1, [r7, #5]
    7734:	71b9      	strb	r1, [r7, #6]
    7736:	71f9      	strb	r1, [r7, #7]
    7738:	6878      	ldr	r0, [r7, #4]
    773a:	6118      	str	r0, [r3, #16]
    773c:	2100      	movs	r1, #0
    773e:	f36f 0100 	bfc	r1, #0, #1
    7742:	f36f 0141 	bfc	r1, #1, #1
    7746:	f36f 0182 	bfc	r1, #2, #1
    774a:	f36f 01c5 	bfc	r1, #3, #3
    774e:	2301      	movs	r3, #1
    7750:	f363 1188 	bfi	r1, r3, #6, #3
    7754:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    7758:	f363 2152 	bfi	r1, r3, #9, #10
    775c:	f36f 41de 	bfc	r1, #19, #12
    7760:	f36f 71df 	bfc	r1, #31, #1
    7764:	2300      	movs	r3, #0
    7766:	4808      	ldr	r0, [pc, #32]	; (7788 <hci_disconn_complete+0xbc>)
    7768:	f7fb ffb0 	bl	36cc <z_impl_z_log_msg_static_create>
    776c:	46ad      	mov	sp, r5
		return;
    776e:	e7b5      	b.n	76dc <hci_disconn_complete+0x10>
		BT_ERR("Unable to look up conn with handle %u", handle);
    7770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7774:	e7cd      	b.n	7712 <hci_disconn_complete+0x46>
    7776:	f06f 041b 	mvn.w	r4, #27
    777a:	e7d6      	b.n	772a <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
    777c:	4628      	mov	r0, r5
    777e:	f013 f93e 	bl	1a9fe <bt_conn_unref>
    7782:	e7ab      	b.n	76dc <hci_disconn_complete+0x10>
    7784:	000217c0 	.word	0x000217c0
    7788:	00020548 	.word	0x00020548

0000778c <le_phy_update_complete>:
{
    778c:	b5b0      	push	{r4, r5, r7, lr}
    778e:	b082      	sub	sp, #8
    7790:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    7792:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7794:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7798:	4620      	mov	r0, r4
    779a:	f003 ff2b 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    779e:	b120      	cbz	r0, 77aa <le_phy_update_complete+0x1e>
	bt_conn_unref(conn);
    77a0:	f013 f92d 	bl	1a9fe <bt_conn_unref>
}
    77a4:	3708      	adds	r7, #8
    77a6:	46bd      	mov	sp, r7
    77a8:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77aa:	466d      	mov	r5, sp
    77ac:	b088      	sub	sp, #32
    77ae:	466b      	mov	r3, sp
    77b0:	f113 0210 	adds.w	r2, r3, #16
    77b4:	d02f      	beq.n	7816 <le_phy_update_complete+0x8a>
    77b6:	210c      	movs	r1, #12
    77b8:	b11a      	cbz	r2, 77c2 <le_phy_update_complete+0x36>
    77ba:	2904      	cmp	r1, #4
    77bc:	dd01      	ble.n	77c2 <le_phy_update_complete+0x36>
    77be:	4819      	ldr	r0, [pc, #100]	; (7824 <le_phy_update_complete+0x98>)
    77c0:	6158      	str	r0, [r3, #20]
    77c2:	b112      	cbz	r2, 77ca <le_phy_update_complete+0x3e>
    77c4:	2908      	cmp	r1, #8
    77c6:	dd00      	ble.n	77ca <le_phy_update_complete+0x3e>
    77c8:	619c      	str	r4, [r3, #24]
    77ca:	290b      	cmp	r1, #11
    77cc:	dd26      	ble.n	781c <le_phy_update_complete+0x90>
    77ce:	240c      	movs	r4, #12
    77d0:	b13a      	cbz	r2, 77e2 <le_phy_update_complete+0x56>
    77d2:	2103      	movs	r1, #3
    77d4:	7139      	strb	r1, [r7, #4]
    77d6:	2100      	movs	r1, #0
    77d8:	7179      	strb	r1, [r7, #5]
    77da:	71b9      	strb	r1, [r7, #6]
    77dc:	71f9      	strb	r1, [r7, #7]
    77de:	6878      	ldr	r0, [r7, #4]
    77e0:	6118      	str	r0, [r3, #16]
    77e2:	2100      	movs	r1, #0
    77e4:	f36f 0100 	bfc	r1, #0, #1
    77e8:	f36f 0141 	bfc	r1, #1, #1
    77ec:	f36f 0182 	bfc	r1, #2, #1
    77f0:	f36f 01c5 	bfc	r1, #3, #3
    77f4:	2301      	movs	r3, #1
    77f6:	f363 1188 	bfi	r1, r3, #6, #3
    77fa:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    77fe:	f363 2152 	bfi	r1, r3, #9, #10
    7802:	f36f 41de 	bfc	r1, #19, #12
    7806:	f36f 71df 	bfc	r1, #31, #1
    780a:	2300      	movs	r3, #0
    780c:	4806      	ldr	r0, [pc, #24]	; (7828 <le_phy_update_complete+0x9c>)
    780e:	f7fb ff5d 	bl	36cc <z_impl_z_log_msg_static_create>
    7812:	46ad      	mov	sp, r5
		return;
    7814:	e7c6      	b.n	77a4 <le_phy_update_complete+0x18>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7816:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    781a:	e7cd      	b.n	77b8 <le_phy_update_complete+0x2c>
    781c:	f06f 041b 	mvn.w	r4, #27
    7820:	e7d6      	b.n	77d0 <le_phy_update_complete+0x44>
    7822:	bf00      	nop
    7824:	000217e8 	.word	0x000217e8
    7828:	00020548 	.word	0x00020548

0000782c <le_data_len_change>:
{
    782c:	b5b0      	push	{r4, r5, r7, lr}
    782e:	b082      	sub	sp, #8
    7830:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    7832:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7834:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    7836:	4620      	mov	r0, r4
    7838:	f003 fedc 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    783c:	b120      	cbz	r0, 7848 <le_data_len_change+0x1c>
	bt_conn_unref(conn);
    783e:	f013 f8de 	bl	1a9fe <bt_conn_unref>
}
    7842:	3708      	adds	r7, #8
    7844:	46bd      	mov	sp, r7
    7846:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7848:	466d      	mov	r5, sp
    784a:	b088      	sub	sp, #32
    784c:	466b      	mov	r3, sp
    784e:	f113 0210 	adds.w	r2, r3, #16
    7852:	d02f      	beq.n	78b4 <le_data_len_change+0x88>
    7854:	210c      	movs	r1, #12
    7856:	b11a      	cbz	r2, 7860 <le_data_len_change+0x34>
    7858:	2904      	cmp	r1, #4
    785a:	dd01      	ble.n	7860 <le_data_len_change+0x34>
    785c:	4818      	ldr	r0, [pc, #96]	; (78c0 <le_data_len_change+0x94>)
    785e:	6158      	str	r0, [r3, #20]
    7860:	b112      	cbz	r2, 7868 <le_data_len_change+0x3c>
    7862:	2908      	cmp	r1, #8
    7864:	dd00      	ble.n	7868 <le_data_len_change+0x3c>
    7866:	619c      	str	r4, [r3, #24]
    7868:	290b      	cmp	r1, #11
    786a:	dd26      	ble.n	78ba <le_data_len_change+0x8e>
    786c:	240c      	movs	r4, #12
    786e:	b13a      	cbz	r2, 7880 <le_data_len_change+0x54>
    7870:	2103      	movs	r1, #3
    7872:	7139      	strb	r1, [r7, #4]
    7874:	2100      	movs	r1, #0
    7876:	7179      	strb	r1, [r7, #5]
    7878:	71b9      	strb	r1, [r7, #6]
    787a:	71f9      	strb	r1, [r7, #7]
    787c:	6878      	ldr	r0, [r7, #4]
    787e:	6118      	str	r0, [r3, #16]
    7880:	2100      	movs	r1, #0
    7882:	f36f 0100 	bfc	r1, #0, #1
    7886:	f36f 0141 	bfc	r1, #1, #1
    788a:	f36f 0182 	bfc	r1, #2, #1
    788e:	f36f 01c5 	bfc	r1, #3, #3
    7892:	2301      	movs	r3, #1
    7894:	f363 1188 	bfi	r1, r3, #6, #3
    7898:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    789c:	f363 2152 	bfi	r1, r3, #9, #10
    78a0:	f36f 41de 	bfc	r1, #19, #12
    78a4:	f36f 71df 	bfc	r1, #31, #1
    78a8:	2300      	movs	r3, #0
    78aa:	4806      	ldr	r0, [pc, #24]	; (78c4 <le_data_len_change+0x98>)
    78ac:	f7fb ff0e 	bl	36cc <z_impl_z_log_msg_static_create>
    78b0:	46ad      	mov	sp, r5
		return;
    78b2:	e7c6      	b.n	7842 <le_data_len_change+0x16>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    78b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    78b8:	e7cd      	b.n	7856 <le_data_len_change+0x2a>
    78ba:	f06f 041b 	mvn.w	r4, #27
    78be:	e7d6      	b.n	786e <le_data_len_change+0x42>
    78c0:	000217e8 	.word	0x000217e8
    78c4:	00020548 	.word	0x00020548

000078c8 <hci_num_completed_packets>:
{
    78c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78cc:	b089      	sub	sp, #36	; 0x24
    78ce:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    78d0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    78d4:	2600      	movs	r6, #0
    78d6:	e079      	b.n	79cc <hci_num_completed_packets+0x104>
			BT_ERR("No connection for handle %u", handle);
    78d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    78dc:	e08e      	b.n	79fc <hci_num_completed_packets+0x134>
    78de:	f06f 011b 	mvn.w	r1, #27
    78e2:	e098      	b.n	7a16 <hci_num_completed_packets+0x14e>
				conn->pending_no_cb--;
    78e4:	3b01      	subs	r3, #1
    78e6:	61e3      	str	r3, [r4, #28]
    78e8:	f382 8811 	msr	BASEPRI, r2
    78ec:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
    78f0:	4620      	mov	r0, r4
    78f2:	f003 fb4f 	bl	af94 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    78f6:	f00e fd59 	bl	163ac <z_impl_k_sem_give>
				continue;
    78fa:	e025      	b.n	7948 <hci_num_completed_packets+0x80>
    78fc:	f382 8811 	msr	BASEPRI, r2
    7900:	f3bf 8f6f 	isb	sy
			if (!node) {
    7904:	2b00      	cmp	r3, #0
    7906:	d03b      	beq.n	7980 <hci_num_completed_packets+0xb8>
	__asm__ volatile(
    7908:	f04f 0220 	mov.w	r2, #32
    790c:	f3ef 8111 	mrs	r1, BASEPRI
    7910:	f382 8812 	msr	BASEPRI_MAX, r2
    7914:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    7918:	68da      	ldr	r2, [r3, #12]
    791a:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    791c:	2200      	movs	r2, #0
    791e:	60da      	str	r2, [r3, #12]
	parent->next = child;
    7920:	601a      	str	r2, [r3, #0]
	return list->tail;
    7922:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    7924:	2a00      	cmp	r2, #0
    7926:	f000 8099 	beq.w	7a5c <hci_num_completed_packets+0x194>
	parent->next = child;
    792a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    792c:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
    792e:	f381 8811 	msr	BASEPRI, r1
    7932:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    7936:	f104 0028 	add.w	r0, r4, #40	; 0x28
    793a:	f00e feff 	bl	1673c <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
    793e:	4620      	mov	r0, r4
    7940:	f003 fb28 	bl	af94 <bt_conn_get_pkts>
    7944:	f00e fd32 	bl	163ac <z_impl_k_sem_give>
			BT_ERR("No connection for handle %u", handle);
    7948:	46ab      	mov	fp, r5
		while (count--) {
    794a:	f10b 35ff 	add.w	r5, fp, #4294967295
    794e:	b2ad      	uxth	r5, r5
    7950:	f1bb 0f00 	cmp.w	fp, #0
    7954:	d036      	beq.n	79c4 <hci_num_completed_packets+0xfc>
	__asm__ volatile(
    7956:	f04f 0320 	mov.w	r3, #32
    795a:	f3ef 8211 	mrs	r2, BASEPRI
    795e:	f383 8812 	msr	BASEPRI_MAX, r3
    7962:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7966:	69e3      	ldr	r3, [r4, #28]
    7968:	2b00      	cmp	r3, #0
    796a:	d1bb      	bne.n	78e4 <hci_num_completed_packets+0x1c>
	return list->head;
    796c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    796e:	2b00      	cmp	r3, #0
    7970:	d0c4      	beq.n	78fc <hci_num_completed_packets+0x34>
	return node->next;
    7972:	6819      	ldr	r1, [r3, #0]
	list->head = node;
    7974:	6161      	str	r1, [r4, #20]
	return list->tail;
    7976:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7978:	4298      	cmp	r0, r3
    797a:	d1bf      	bne.n	78fc <hci_num_completed_packets+0x34>
	list->tail = node;
    797c:	61a1      	str	r1, [r4, #24]
}
    797e:	e7bd      	b.n	78fc <hci_num_completed_packets+0x34>
				BT_ERR("packets count mismatch");
    7980:	4b3a      	ldr	r3, [pc, #232]	; (7a6c <hci_num_completed_packets+0x1a4>)
    7982:	61fb      	str	r3, [r7, #28]
    7984:	2302      	movs	r3, #2
    7986:	713b      	strb	r3, [r7, #4]
    7988:	2300      	movs	r3, #0
    798a:	717b      	strb	r3, [r7, #5]
    798c:	71bb      	strb	r3, [r7, #6]
    798e:	71fb      	strb	r3, [r7, #7]
    7990:	687a      	ldr	r2, [r7, #4]
    7992:	61ba      	str	r2, [r7, #24]
    7994:	f363 0900 	bfi	r9, r3, #0, #1
    7998:	f363 0941 	bfi	r9, r3, #1, #1
    799c:	f363 0982 	bfi	r9, r3, #2, #1
    79a0:	f363 09c5 	bfi	r9, r3, #3, #3
    79a4:	2201      	movs	r2, #1
    79a6:	f362 1988 	bfi	r9, r2, #6, #3
    79aa:	2208      	movs	r2, #8
    79ac:	f362 2952 	bfi	r9, r2, #9, #10
    79b0:	f363 49de 	bfi	r9, r3, #19, #12
    79b4:	f363 79df 	bfi	r9, r3, #31, #1
    79b8:	f107 0218 	add.w	r2, r7, #24
    79bc:	4649      	mov	r1, r9
    79be:	482c      	ldr	r0, [pc, #176]	; (7a70 <hci_num_completed_packets+0x1a8>)
    79c0:	f7fb fe84 	bl	36cc <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
    79c4:	4620      	mov	r0, r4
    79c6:	f013 f81a 	bl	1a9fe <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    79ca:	3601      	adds	r6, #1
    79cc:	f89a 3000 	ldrb.w	r3, [sl]
    79d0:	429e      	cmp	r6, r3
    79d2:	da46      	bge.n	7a62 <hci_num_completed_packets+0x19a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    79d4:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
    79d8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    79dc:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    79e0:	4628      	mov	r0, r5
    79e2:	f003 fe07 	bl	b5f4 <bt_conn_lookup_handle>
		if (!conn) {
    79e6:	4604      	mov	r4, r0
    79e8:	2800      	cmp	r0, #0
    79ea:	d1ae      	bne.n	794a <hci_num_completed_packets+0x82>
			BT_ERR("No connection for handle %u", handle);
    79ec:	466c      	mov	r4, sp
    79ee:	b088      	sub	sp, #32
    79f0:	466b      	mov	r3, sp
    79f2:	f113 0210 	adds.w	r2, r3, #16
    79f6:	f43f af6f 	beq.w	78d8 <hci_num_completed_packets+0x10>
    79fa:	210c      	movs	r1, #12
    79fc:	b11a      	cbz	r2, 7a06 <hci_num_completed_packets+0x13e>
    79fe:	2904      	cmp	r1, #4
    7a00:	dd01      	ble.n	7a06 <hci_num_completed_packets+0x13e>
    7a02:	481c      	ldr	r0, [pc, #112]	; (7a74 <hci_num_completed_packets+0x1ac>)
    7a04:	6158      	str	r0, [r3, #20]
    7a06:	b112      	cbz	r2, 7a0e <hci_num_completed_packets+0x146>
    7a08:	2908      	cmp	r1, #8
    7a0a:	dd00      	ble.n	7a0e <hci_num_completed_packets+0x146>
    7a0c:	619d      	str	r5, [r3, #24]
    7a0e:	290b      	cmp	r1, #11
    7a10:	f77f af65 	ble.w	78de <hci_num_completed_packets+0x16>
    7a14:	210c      	movs	r1, #12
    7a16:	b13a      	cbz	r2, 7a28 <hci_num_completed_packets+0x160>
    7a18:	2003      	movs	r0, #3
    7a1a:	7138      	strb	r0, [r7, #4]
    7a1c:	2000      	movs	r0, #0
    7a1e:	7178      	strb	r0, [r7, #5]
    7a20:	71b8      	strb	r0, [r7, #6]
    7a22:	71f8      	strb	r0, [r7, #7]
    7a24:	6878      	ldr	r0, [r7, #4]
    7a26:	6118      	str	r0, [r3, #16]
    7a28:	f36f 0800 	bfc	r8, #0, #1
    7a2c:	f36f 0841 	bfc	r8, #1, #1
    7a30:	f36f 0882 	bfc	r8, #2, #1
    7a34:	f36f 08c5 	bfc	r8, #3, #3
    7a38:	2301      	movs	r3, #1
    7a3a:	f363 1888 	bfi	r8, r3, #6, #3
    7a3e:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
    7a42:	f363 2852 	bfi	r8, r3, #9, #10
    7a46:	f36f 48de 	bfc	r8, #19, #12
    7a4a:	f36f 78df 	bfc	r8, #31, #1
    7a4e:	2300      	movs	r3, #0
    7a50:	4641      	mov	r1, r8
    7a52:	4807      	ldr	r0, [pc, #28]	; (7a70 <hci_num_completed_packets+0x1a8>)
    7a54:	f7fb fe3a 	bl	36cc <z_impl_z_log_msg_static_create>
    7a58:	46a5      	mov	sp, r4
			continue;
    7a5a:	e7b6      	b.n	79ca <hci_num_completed_packets+0x102>
	list->tail = node;
    7a5c:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
    7a5e:	6223      	str	r3, [r4, #32]
}
    7a60:	e765      	b.n	792e <hci_num_completed_packets+0x66>
}
    7a62:	3724      	adds	r7, #36	; 0x24
    7a64:	46bd      	mov	sp, r7
    7a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a6a:	bf00      	nop
    7a6c:	00021828 	.word	0x00021828
    7a70:	00020548 	.word	0x00020548
    7a74:	0002180c 	.word	0x0002180c

00007a78 <hci_cmd_done>:
{
    7a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a7a:	b083      	sub	sp, #12
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	4605      	mov	r5, r0
    7a80:	460e      	mov	r6, r1
    7a82:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7a84:	7990      	ldrb	r0, [r2, #6]
    7a86:	f007 fc8d 	bl	f3a4 <net_buf_pool_get>
    7a8a:	4b83      	ldr	r3, [pc, #524]	; (7c98 <hci_cmd_done+0x220>)
    7a8c:	4283      	cmp	r3, r0
    7a8e:	d050      	beq.n	7b32 <hci_cmd_done+0xba>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7a90:	79a6      	ldrb	r6, [r4, #6]
    7a92:	4630      	mov	r0, r6
    7a94:	f007 fc86 	bl	f3a4 <net_buf_pool_get>
    7a98:	466c      	mov	r4, sp
    7a9a:	b08a      	sub	sp, #40	; 0x28
    7a9c:	4669      	mov	r1, sp
    7a9e:	f111 0210 	adds.w	r2, r1, #16
    7aa2:	d040      	beq.n	7b26 <hci_cmd_done+0xae>
    7aa4:	2318      	movs	r3, #24
    7aa6:	b12a      	cbz	r2, 7ab4 <hci_cmd_done+0x3c>
    7aa8:	2b04      	cmp	r3, #4
    7aaa:	dd03      	ble.n	7ab4 <hci_cmd_done+0x3c>
    7aac:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 7c9c <hci_cmd_done+0x224>
    7ab0:	f8c1 c014 	str.w	ip, [r1, #20]
    7ab4:	b112      	cbz	r2, 7abc <hci_cmd_done+0x44>
    7ab6:	2b08      	cmp	r3, #8
    7ab8:	dd00      	ble.n	7abc <hci_cmd_done+0x44>
    7aba:	618d      	str	r5, [r1, #24]
    7abc:	b112      	cbz	r2, 7ac4 <hci_cmd_done+0x4c>
    7abe:	2b0c      	cmp	r3, #12
    7ac0:	dd00      	ble.n	7ac4 <hci_cmd_done+0x4c>
    7ac2:	61ce      	str	r6, [r1, #28]
    7ac4:	b112      	cbz	r2, 7acc <hci_cmd_done+0x54>
    7ac6:	2b10      	cmp	r3, #16
    7ac8:	dd00      	ble.n	7acc <hci_cmd_done+0x54>
    7aca:	6208      	str	r0, [r1, #32]
    7acc:	b11a      	cbz	r2, 7ad6 <hci_cmd_done+0x5e>
    7ace:	2b14      	cmp	r3, #20
    7ad0:	dd01      	ble.n	7ad6 <hci_cmd_done+0x5e>
    7ad2:	4871      	ldr	r0, [pc, #452]	; (7c98 <hci_cmd_done+0x220>)
    7ad4:	6248      	str	r0, [r1, #36]	; 0x24
    7ad6:	2b17      	cmp	r3, #23
    7ad8:	dd28      	ble.n	7b2c <hci_cmd_done+0xb4>
    7ada:	2318      	movs	r3, #24
    7adc:	b13a      	cbz	r2, 7aee <hci_cmd_done+0x76>
    7ade:	2006      	movs	r0, #6
    7ae0:	7138      	strb	r0, [r7, #4]
    7ae2:	2000      	movs	r0, #0
    7ae4:	7178      	strb	r0, [r7, #5]
    7ae6:	71b8      	strb	r0, [r7, #6]
    7ae8:	71f8      	strb	r0, [r7, #7]
    7aea:	6878      	ldr	r0, [r7, #4]
    7aec:	6108      	str	r0, [r1, #16]
    7aee:	2100      	movs	r1, #0
    7af0:	f36f 0100 	bfc	r1, #0, #1
    7af4:	f36f 0141 	bfc	r1, #1, #1
    7af8:	f36f 0182 	bfc	r1, #2, #1
    7afc:	f36f 01c5 	bfc	r1, #3, #3
    7b00:	2002      	movs	r0, #2
    7b02:	f360 1188 	bfi	r1, r0, #6, #3
    7b06:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    7b0a:	f363 2152 	bfi	r1, r3, #9, #10
    7b0e:	f36f 41de 	bfc	r1, #19, #12
    7b12:	f36f 71df 	bfc	r1, #31, #1
    7b16:	2300      	movs	r3, #0
    7b18:	4861      	ldr	r0, [pc, #388]	; (7ca0 <hci_cmd_done+0x228>)
    7b1a:	f7fb fdd7 	bl	36cc <z_impl_z_log_msg_static_create>
    7b1e:	46a5      	mov	sp, r4
}
    7b20:	370c      	adds	r7, #12
    7b22:	46bd      	mov	sp, r7
    7b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7b26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    7b2a:	e7bc      	b.n	7aa6 <hci_cmd_done+0x2e>
    7b2c:	f06f 031b 	mvn.w	r3, #27
    7b30:	e7d4      	b.n	7adc <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
    7b32:	4620      	mov	r0, r4
    7b34:	f014 fe6b 	bl	1c80e <net_buf_id>
    7b38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7b3c:	4b59      	ldr	r3, [pc, #356]	; (7ca4 <hci_cmd_done+0x22c>)
    7b3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b42:	8843      	ldrh	r3, [r0, #2]
    7b44:	429d      	cmp	r5, r3
    7b46:	d133      	bne.n	7bb0 <hci_cmd_done+0x138>
	if (bt_dev.sent_cmd) {
    7b48:	4b57      	ldr	r3, [pc, #348]	; (7ca8 <hci_cmd_done+0x230>)
    7b4a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    7b4e:	b128      	cbz	r0, 7b5c <hci_cmd_done+0xe4>
		net_buf_unref(bt_dev.sent_cmd);
    7b50:	f014 ff9c 	bl	1ca8c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7b54:	4b54      	ldr	r3, [pc, #336]	; (7ca8 <hci_cmd_done+0x230>)
    7b56:	2200      	movs	r2, #0
    7b58:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    7b5c:	4620      	mov	r0, r4
    7b5e:	f014 fe56 	bl	1c80e <net_buf_id>
    7b62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7b66:	4b4f      	ldr	r3, [pc, #316]	; (7ca4 <hci_cmd_done+0x22c>)
    7b68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b6c:	6843      	ldr	r3, [r0, #4]
    7b6e:	b10b      	cbz	r3, 7b74 <hci_cmd_done+0xfc>
    7b70:	2e00      	cmp	r6, #0
    7b72:	d066      	beq.n	7c42 <hci_cmd_done+0x1ca>
	if (cmd(buf)->sync) {
    7b74:	4620      	mov	r0, r4
    7b76:	f014 fe4a 	bl	1c80e <net_buf_id>
    7b7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7b7e:	4b49      	ldr	r3, [pc, #292]	; (7ca4 <hci_cmd_done+0x22c>)
    7b80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b84:	6883      	ldr	r3, [r0, #8]
    7b86:	2b00      	cmp	r3, #0
    7b88:	d0ca      	beq.n	7b20 <hci_cmd_done+0xa8>
		cmd(buf)->status = status;
    7b8a:	4620      	mov	r0, r4
    7b8c:	f014 fe3f 	bl	1c80e <net_buf_id>
    7b90:	4d44      	ldr	r5, [pc, #272]	; (7ca4 <hci_cmd_done+0x22c>)
    7b92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7b96:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    7b9a:	4620      	mov	r0, r4
    7b9c:	f014 fe37 	bl	1c80e <net_buf_id>
    7ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7ba4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    7ba8:	68a8      	ldr	r0, [r5, #8]
    7baa:	f00e fbff 	bl	163ac <z_impl_k_sem_give>
}
    7bae:	e7b7      	b.n	7b20 <hci_cmd_done+0xa8>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7bb0:	4620      	mov	r0, r4
    7bb2:	f014 fe2c 	bl	1c80e <net_buf_id>
    7bb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7bba:	4b3a      	ldr	r3, [pc, #232]	; (7ca4 <hci_cmd_done+0x22c>)
    7bbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7bc0:	8840      	ldrh	r0, [r0, #2]
    7bc2:	466c      	mov	r4, sp
    7bc4:	b088      	sub	sp, #32
    7bc6:	466b      	mov	r3, sp
    7bc8:	f113 0210 	adds.w	r2, r3, #16
    7bcc:	d033      	beq.n	7c36 <hci_cmd_done+0x1be>
    7bce:	2110      	movs	r1, #16
    7bd0:	b11a      	cbz	r2, 7bda <hci_cmd_done+0x162>
    7bd2:	2904      	cmp	r1, #4
    7bd4:	dd01      	ble.n	7bda <hci_cmd_done+0x162>
    7bd6:	4e35      	ldr	r6, [pc, #212]	; (7cac <hci_cmd_done+0x234>)
    7bd8:	615e      	str	r6, [r3, #20]
    7bda:	b112      	cbz	r2, 7be2 <hci_cmd_done+0x16a>
    7bdc:	2908      	cmp	r1, #8
    7bde:	dd00      	ble.n	7be2 <hci_cmd_done+0x16a>
    7be0:	619d      	str	r5, [r3, #24]
    7be2:	b112      	cbz	r2, 7bea <hci_cmd_done+0x172>
    7be4:	290c      	cmp	r1, #12
    7be6:	dd00      	ble.n	7bea <hci_cmd_done+0x172>
    7be8:	61d8      	str	r0, [r3, #28]
    7bea:	290f      	cmp	r1, #15
    7bec:	dd26      	ble.n	7c3c <hci_cmd_done+0x1c4>
    7bee:	2510      	movs	r5, #16
    7bf0:	b13a      	cbz	r2, 7c02 <hci_cmd_done+0x18a>
    7bf2:	2104      	movs	r1, #4
    7bf4:	7139      	strb	r1, [r7, #4]
    7bf6:	2100      	movs	r1, #0
    7bf8:	7179      	strb	r1, [r7, #5]
    7bfa:	71b9      	strb	r1, [r7, #6]
    7bfc:	71f9      	strb	r1, [r7, #7]
    7bfe:	6878      	ldr	r0, [r7, #4]
    7c00:	6118      	str	r0, [r3, #16]
    7c02:	2100      	movs	r1, #0
    7c04:	f36f 0100 	bfc	r1, #0, #1
    7c08:	f36f 0141 	bfc	r1, #1, #1
    7c0c:	f36f 0182 	bfc	r1, #2, #1
    7c10:	f36f 01c5 	bfc	r1, #3, #3
    7c14:	2302      	movs	r3, #2
    7c16:	f363 1188 	bfi	r1, r3, #6, #3
    7c1a:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
    7c1e:	f363 2152 	bfi	r1, r3, #9, #10
    7c22:	f36f 41de 	bfc	r1, #19, #12
    7c26:	f36f 71df 	bfc	r1, #31, #1
    7c2a:	2300      	movs	r3, #0
    7c2c:	481c      	ldr	r0, [pc, #112]	; (7ca0 <hci_cmd_done+0x228>)
    7c2e:	f7fb fd4d 	bl	36cc <z_impl_z_log_msg_static_create>
    7c32:	46a5      	mov	sp, r4
		return;
    7c34:	e774      	b.n	7b20 <hci_cmd_done+0xa8>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7c3a:	e7c9      	b.n	7bd0 <hci_cmd_done+0x158>
    7c3c:	f06f 051b 	mvn.w	r5, #27
    7c40:	e7d6      	b.n	7bf0 <hci_cmd_done+0x178>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    7c42:	4620      	mov	r0, r4
    7c44:	f014 fde3 	bl	1c80e <net_buf_id>
    7c48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7c4c:	4b15      	ldr	r3, [pc, #84]	; (7ca4 <hci_cmd_done+0x22c>)
    7c4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7c52:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    7c54:	6813      	ldr	r3, [r2, #0]
    7c56:	6851      	ldr	r1, [r2, #4]
    7c58:	7a10      	ldrb	r0, [r2, #8]
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    7c5a:	f001 051f 	and.w	r5, r1, #31
    7c5e:	2201      	movs	r2, #1
    7c60:	40aa      	lsls	r2, r5

	if (val) {
    7c62:	b158      	cbz	r0, 7c7c <hci_cmd_done+0x204>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7c64:	0949      	lsrs	r1, r1, #5
    7c66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7c6a:	e8d3 1fef 	ldaex	r1, [r3]
    7c6e:	4311      	orrs	r1, r2
    7c70:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7c74:	2800      	cmp	r0, #0
    7c76:	f43f af7d 	beq.w	7b74 <hci_cmd_done+0xfc>
    7c7a:	e7f6      	b.n	7c6a <hci_cmd_done+0x1f2>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7c7c:	0949      	lsrs	r1, r1, #5
    7c7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7c82:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7c84:	e8d3 1fef 	ldaex	r1, [r3]
    7c88:	4011      	ands	r1, r2
    7c8a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7c8e:	2800      	cmp	r0, #0
    7c90:	f43f af70 	beq.w	7b74 <hci_cmd_done+0xfc>
    7c94:	e7f6      	b.n	7c84 <hci_cmd_done+0x20c>
    7c96:	bf00      	nop
    7c98:	20000834 	.word	0x20000834
    7c9c:	00021840 	.word	0x00021840
    7ca0:	00020548 	.word	0x00020548
    7ca4:	20001f6c 	.word	0x20001f6c
    7ca8:	20000000 	.word	0x20000000
    7cac:	00021878 	.word	0x00021878

00007cb0 <le_remote_feat_complete>:
{
    7cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cb2:	b083      	sub	sp, #12
    7cb4:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    7cb6:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7cb8:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
    7cbc:	4630      	mov	r0, r6
    7cbe:	f003 fc99 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    7cc2:	b190      	cbz	r0, 7cea <le_remote_feat_complete+0x3a>
    7cc4:	4605      	mov	r5, r0
	if (!evt->status) {
    7cc6:	7823      	ldrb	r3, [r4, #0]
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d04a      	beq.n	7d62 <le_remote_feat_complete+0xb2>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
    7ccc:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7cce:	e8d3 2fef 	ldaex	r2, [r3]
    7cd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    7cd6:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7cda:	2900      	cmp	r1, #0
    7cdc:	d1f7      	bne.n	7cce <le_remote_feat_complete+0x1e>
	bt_conn_unref(conn);
    7cde:	4628      	mov	r0, r5
    7ce0:	f012 fe8d 	bl	1a9fe <bt_conn_unref>
}
    7ce4:	370c      	adds	r7, #12
    7ce6:	46bd      	mov	sp, r7
    7ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7cea:	466d      	mov	r5, sp
    7cec:	b088      	sub	sp, #32
    7cee:	466b      	mov	r3, sp
    7cf0:	f113 0210 	adds.w	r2, r3, #16
    7cf4:	d02f      	beq.n	7d56 <le_remote_feat_complete+0xa6>
    7cf6:	210c      	movs	r1, #12
    7cf8:	b11a      	cbz	r2, 7d02 <le_remote_feat_complete+0x52>
    7cfa:	2904      	cmp	r1, #4
    7cfc:	dd01      	ble.n	7d02 <le_remote_feat_complete+0x52>
    7cfe:	481c      	ldr	r0, [pc, #112]	; (7d70 <le_remote_feat_complete+0xc0>)
    7d00:	6158      	str	r0, [r3, #20]
    7d02:	b112      	cbz	r2, 7d0a <le_remote_feat_complete+0x5a>
    7d04:	2908      	cmp	r1, #8
    7d06:	dd00      	ble.n	7d0a <le_remote_feat_complete+0x5a>
    7d08:	619e      	str	r6, [r3, #24]
    7d0a:	290b      	cmp	r1, #11
    7d0c:	dd26      	ble.n	7d5c <le_remote_feat_complete+0xac>
    7d0e:	240c      	movs	r4, #12
    7d10:	b13a      	cbz	r2, 7d22 <le_remote_feat_complete+0x72>
    7d12:	2103      	movs	r1, #3
    7d14:	7139      	strb	r1, [r7, #4]
    7d16:	2100      	movs	r1, #0
    7d18:	7179      	strb	r1, [r7, #5]
    7d1a:	71b9      	strb	r1, [r7, #6]
    7d1c:	71f9      	strb	r1, [r7, #7]
    7d1e:	6878      	ldr	r0, [r7, #4]
    7d20:	6118      	str	r0, [r3, #16]
    7d22:	2100      	movs	r1, #0
    7d24:	f36f 0100 	bfc	r1, #0, #1
    7d28:	f36f 0141 	bfc	r1, #1, #1
    7d2c:	f36f 0182 	bfc	r1, #2, #1
    7d30:	f36f 01c5 	bfc	r1, #3, #3
    7d34:	2301      	movs	r3, #1
    7d36:	f363 1188 	bfi	r1, r3, #6, #3
    7d3a:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    7d3e:	f364 2152 	bfi	r1, r4, #9, #10
    7d42:	f36f 41de 	bfc	r1, #19, #12
    7d46:	f36f 71df 	bfc	r1, #31, #1
    7d4a:	2300      	movs	r3, #0
    7d4c:	4809      	ldr	r0, [pc, #36]	; (7d74 <le_remote_feat_complete+0xc4>)
    7d4e:	f7fb fcbd 	bl	36cc <z_impl_z_log_msg_static_create>
    7d52:	46ad      	mov	sp, r5
		return;
    7d54:	e7c6      	b.n	7ce4 <le_remote_feat_complete+0x34>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7d56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7d5a:	e7cd      	b.n	7cf8 <le_remote_feat_complete+0x48>
    7d5c:	f06f 041b 	mvn.w	r4, #27
    7d60:	e7d6      	b.n	7d10 <le_remote_feat_complete+0x60>
		memcpy(conn->le.features, evt->features,
    7d62:	2208      	movs	r2, #8
    7d64:	1ce1      	adds	r1, r4, #3
    7d66:	30ac      	adds	r0, #172	; 0xac
    7d68:	f012 f96f 	bl	1a04a <memcpy>
    7d6c:	e7ae      	b.n	7ccc <le_remote_feat_complete+0x1c>
    7d6e:	bf00      	nop
    7d70:	000217e8 	.word	0x000217e8
    7d74:	00020548 	.word	0x00020548

00007d78 <hci_cmd_status>:
{
    7d78:	b538      	push	{r3, r4, r5, lr}
    7d7a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    7d7c:	2104      	movs	r1, #4
    7d7e:	3008      	adds	r0, #8
    7d80:	f014 ff06 	bl	1cb90 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7d84:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7d86:	4622      	mov	r2, r4
    7d88:	7801      	ldrb	r1, [r0, #0]
    7d8a:	8840      	ldrh	r0, [r0, #2]
    7d8c:	f7ff fe74 	bl	7a78 <hci_cmd_done>
	if (ncmd) {
    7d90:	b905      	cbnz	r5, 7d94 <hci_cmd_status+0x1c>
}
    7d92:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    7d94:	4801      	ldr	r0, [pc, #4]	; (7d9c <hci_cmd_status+0x24>)
    7d96:	f00e fb09 	bl	163ac <z_impl_k_sem_give>
    7d9a:	e7fa      	b.n	7d92 <hci_cmd_status+0x1a>
    7d9c:	20000118 	.word	0x20000118

00007da0 <hci_cmd_complete>:
{
    7da0:	b538      	push	{r3, r4, r5, lr}
    7da2:	4604      	mov	r4, r0
    7da4:	2103      	movs	r1, #3
    7da6:	3008      	adds	r0, #8
    7da8:	f014 fef2 	bl	1cb90 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7dac:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    7dae:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    7db0:	4622      	mov	r2, r4
    7db2:	7819      	ldrb	r1, [r3, #0]
    7db4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7db8:	f7ff fe5e 	bl	7a78 <hci_cmd_done>
	if (ncmd) {
    7dbc:	b905      	cbnz	r5, 7dc0 <hci_cmd_complete+0x20>
}
    7dbe:	bd38      	pop	{r3, r4, r5, pc}
    7dc0:	4801      	ldr	r0, [pc, #4]	; (7dc8 <hci_cmd_complete+0x28>)
    7dc2:	f00e faf3 	bl	163ac <z_impl_k_sem_give>
    7dc6:	e7fa      	b.n	7dbe <hci_cmd_complete+0x1e>
    7dc8:	20000118 	.word	0x20000118

00007dcc <hci_hardware_error>:
{
    7dcc:	b590      	push	{r4, r7, lr}
    7dce:	b083      	sub	sp, #12
    7dd0:	af00      	add	r7, sp, #0
    7dd2:	2101      	movs	r1, #1
    7dd4:	3008      	adds	r0, #8
    7dd6:	f014 fedb 	bl	1cb90 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7dda:	7800      	ldrb	r0, [r0, #0]
    7ddc:	b088      	sub	sp, #32
    7dde:	466b      	mov	r3, sp
    7de0:	f113 0210 	adds.w	r2, r3, #16
    7de4:	d031      	beq.n	7e4a <hci_hardware_error+0x7e>
    7de6:	210c      	movs	r1, #12
    7de8:	b11a      	cbz	r2, 7df2 <hci_hardware_error+0x26>
    7dea:	2904      	cmp	r1, #4
    7dec:	dd01      	ble.n	7df2 <hci_hardware_error+0x26>
    7dee:	4c1a      	ldr	r4, [pc, #104]	; (7e58 <hci_hardware_error+0x8c>)
    7df0:	615c      	str	r4, [r3, #20]
    7df2:	b112      	cbz	r2, 7dfa <hci_hardware_error+0x2e>
    7df4:	2908      	cmp	r1, #8
    7df6:	dd00      	ble.n	7dfa <hci_hardware_error+0x2e>
    7df8:	6198      	str	r0, [r3, #24]
    7dfa:	290b      	cmp	r1, #11
    7dfc:	dd28      	ble.n	7e50 <hci_hardware_error+0x84>
    7dfe:	f04f 0c0c 	mov.w	ip, #12
    7e02:	b13a      	cbz	r2, 7e14 <hci_hardware_error+0x48>
    7e04:	2103      	movs	r1, #3
    7e06:	7139      	strb	r1, [r7, #4]
    7e08:	2100      	movs	r1, #0
    7e0a:	7179      	strb	r1, [r7, #5]
    7e0c:	71b9      	strb	r1, [r7, #6]
    7e0e:	71f9      	strb	r1, [r7, #7]
    7e10:	6878      	ldr	r0, [r7, #4]
    7e12:	6118      	str	r0, [r3, #16]
    7e14:	2100      	movs	r1, #0
    7e16:	f36f 0100 	bfc	r1, #0, #1
    7e1a:	f36f 0141 	bfc	r1, #1, #1
    7e1e:	f36f 0182 	bfc	r1, #2, #1
    7e22:	f36f 01c5 	bfc	r1, #3, #3
    7e26:	2301      	movs	r3, #1
    7e28:	f363 1188 	bfi	r1, r3, #6, #3
    7e2c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    7e30:	f36c 2152 	bfi	r1, ip, #9, #10
    7e34:	f36f 41de 	bfc	r1, #19, #12
    7e38:	f36f 71df 	bfc	r1, #31, #1
    7e3c:	2300      	movs	r3, #0
    7e3e:	4807      	ldr	r0, [pc, #28]	; (7e5c <hci_hardware_error+0x90>)
    7e40:	f7fb fc44 	bl	36cc <z_impl_z_log_msg_static_create>
}
    7e44:	370c      	adds	r7, #12
    7e46:	46bd      	mov	sp, r7
    7e48:	bd90      	pop	{r4, r7, pc}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7e4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7e4e:	e7cb      	b.n	7de8 <hci_hardware_error+0x1c>
    7e50:	f06f 0c1b 	mvn.w	ip, #27
    7e54:	e7d5      	b.n	7e02 <hci_hardware_error+0x36>
    7e56:	bf00      	nop
    7e58:	000218ac 	.word	0x000218ac
    7e5c:	00020548 	.word	0x00020548

00007e60 <handle_event>:
{
    7e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e62:	b083      	sub	sp, #12
    7e64:	af00      	add	r7, sp, #0
    7e66:	4605      	mov	r5, r0
    7e68:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
    7e6a:	f7ff f9a5 	bl	71b8 <handle_event_common>
	if (err == -EOPNOTSUPP) {
    7e6e:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
    7e72:	d002      	beq.n	7e7a <handle_event+0x1a>
}
    7e74:	370c      	adds	r7, #12
    7e76:	46bd      	mov	sp, r7
    7e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    7e7a:	89a6      	ldrh	r6, [r4, #12]
    7e7c:	4631      	mov	r1, r6
    7e7e:	68a0      	ldr	r0, [r4, #8]
    7e80:	f7fe ff12 	bl	6ca8 <bt_hex_real>
    7e84:	2304      	movs	r3, #4
    7e86:	713b      	strb	r3, [r7, #4]
    7e88:	466c      	mov	r4, sp
    7e8a:	b08a      	sub	sp, #40	; 0x28
    7e8c:	466b      	mov	r3, sp
    7e8e:	f113 0210 	adds.w	r2, r3, #16
    7e92:	d045      	beq.n	7f20 <handle_event+0xc0>
    7e94:	f04f 0c15 	mov.w	ip, #21
    7e98:	b122      	cbz	r2, 7ea4 <handle_event+0x44>
    7e9a:	f1bc 0f04 	cmp.w	ip, #4
    7e9e:	dd01      	ble.n	7ea4 <handle_event+0x44>
    7ea0:	4927      	ldr	r1, [pc, #156]	; (7f40 <handle_event+0xe0>)
    7ea2:	6159      	str	r1, [r3, #20]
    7ea4:	b11a      	cbz	r2, 7eae <handle_event+0x4e>
    7ea6:	f1bc 0f08 	cmp.w	ip, #8
    7eaa:	dd00      	ble.n	7eae <handle_event+0x4e>
    7eac:	619d      	str	r5, [r3, #24]
    7eae:	b11a      	cbz	r2, 7eb8 <handle_event+0x58>
    7eb0:	f1bc 0f0c 	cmp.w	ip, #12
    7eb4:	dd00      	ble.n	7eb8 <handle_event+0x58>
    7eb6:	61de      	str	r6, [r3, #28]
    7eb8:	2104      	movs	r1, #4
    7eba:	7039      	strb	r1, [r7, #0]
    7ebc:	b11a      	cbz	r2, 7ec6 <handle_event+0x66>
    7ebe:	f1bc 0f10 	cmp.w	ip, #16
    7ec2:	dd00      	ble.n	7ec6 <handle_event+0x66>
    7ec4:	6218      	str	r0, [r3, #32]
    7ec6:	b11a      	cbz	r2, 7ed0 <handle_event+0x70>
    7ec8:	f103 0124 	add.w	r1, r3, #36	; 0x24
    7ecc:	2000      	movs	r0, #0
    7ece:	b350      	cbz	r0, 7f26 <handle_event+0xc6>
    7ed0:	f1bc 0f14 	cmp.w	ip, #20
    7ed4:	dd30      	ble.n	7f38 <handle_event+0xd8>
    7ed6:	2515      	movs	r5, #21
    7ed8:	b142      	cbz	r2, 7eec <handle_event+0x8c>
    7eda:	2105      	movs	r1, #5
    7edc:	7139      	strb	r1, [r7, #4]
    7ede:	2100      	movs	r1, #0
    7ee0:	7179      	strb	r1, [r7, #5]
    7ee2:	71b9      	strb	r1, [r7, #6]
    7ee4:	2101      	movs	r1, #1
    7ee6:	71f9      	strb	r1, [r7, #7]
    7ee8:	6878      	ldr	r0, [r7, #4]
    7eea:	6118      	str	r0, [r3, #16]
    7eec:	2100      	movs	r1, #0
    7eee:	f36f 0100 	bfc	r1, #0, #1
    7ef2:	f36f 0141 	bfc	r1, #1, #1
    7ef6:	f36f 0182 	bfc	r1, #2, #1
    7efa:	f36f 01c5 	bfc	r1, #3, #3
    7efe:	2302      	movs	r3, #2
    7f00:	f363 1188 	bfi	r1, r3, #6, #3
    7f04:	f3c5 0509 	ubfx	r5, r5, #0, #10
    7f08:	f365 2152 	bfi	r1, r5, #9, #10
    7f0c:	f36f 41de 	bfc	r1, #19, #12
    7f10:	f36f 71df 	bfc	r1, #31, #1
    7f14:	2300      	movs	r3, #0
    7f16:	480b      	ldr	r0, [pc, #44]	; (7f44 <handle_event+0xe4>)
    7f18:	f7fb fbd8 	bl	36cc <z_impl_z_log_msg_static_create>
    7f1c:	46a5      	mov	sp, r4
}
    7f1e:	e7a9      	b.n	7e74 <handle_event+0x14>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    7f20:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    7f24:	e7b8      	b.n	7e98 <handle_event+0x38>
    7f26:	f107 0508 	add.w	r5, r7, #8
    7f2a:	4405      	add	r5, r0
    7f2c:	f815 5c08 	ldrb.w	r5, [r5, #-8]
    7f30:	f801 5b01 	strb.w	r5, [r1], #1
    7f34:	3001      	adds	r0, #1
    7f36:	e7ca      	b.n	7ece <handle_event+0x6e>
    7f38:	f06f 051b 	mvn.w	r5, #27
    7f3c:	e7cc      	b.n	7ed8 <handle_event+0x78>
    7f3e:	bf00      	nop
    7f40:	000218d0 	.word	0x000218d0
    7f44:	00020548 	.word	0x00020548

00007f48 <hci_le_meta_event>:
{
    7f48:	b510      	push	{r4, lr}
    7f4a:	4604      	mov	r4, r0
    7f4c:	2101      	movs	r1, #1
    7f4e:	3008      	adds	r0, #8
    7f50:	f014 fe1e 	bl	1cb90 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7f54:	2307      	movs	r3, #7
    7f56:	4a03      	ldr	r2, [pc, #12]	; (7f64 <hci_le_meta_event+0x1c>)
    7f58:	4621      	mov	r1, r4
    7f5a:	7800      	ldrb	r0, [r0, #0]
    7f5c:	f7ff ff80 	bl	7e60 <handle_event>
}
    7f60:	bd10      	pop	{r4, pc}
    7f62:	bf00      	nop
    7f64:	00021dd4 	.word	0x00021dd4

00007f68 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    7f68:	b5b0      	push	{r4, r5, r7, lr}
    7f6a:	b082      	sub	sp, #8
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    7f70:	4824      	ldr	r0, [pc, #144]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f72:	f014 fd24 	bl	1c9be <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    7f76:	4924      	ldr	r1, [pc, #144]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f78:	4824      	ldr	r0, [pc, #144]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f7a:	f017 fc33 	bl	1f7e4 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    7f7e:	2800      	cmp	r0, #0
    7f80:	db02      	blt.n	7f88 <rx_queue_put+0x20>
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
    7f82:	3708      	adds	r7, #8
    7f84:	46bd      	mov	sp, r7
    7f86:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Could not submit rx_work: %d", err);
    7f88:	466c      	mov	r4, sp
    7f8a:	b088      	sub	sp, #32
    7f8c:	466b      	mov	r3, sp
    7f8e:	f113 0210 	adds.w	r2, r3, #16
    7f92:	d030      	beq.n	7ff6 <rx_queue_put+0x8e>
    7f94:	210c      	movs	r1, #12
    7f96:	b11a      	cbz	r2, 7fa0 <rx_queue_put+0x38>
    7f98:	2904      	cmp	r1, #4
    7f9a:	dd01      	ble.n	7fa0 <rx_queue_put+0x38>
    7f9c:	4d1c      	ldr	r5, [pc, #112]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f9e:	615d      	str	r5, [r3, #20]
    7fa0:	b112      	cbz	r2, 7fa8 <rx_queue_put+0x40>
    7fa2:	2908      	cmp	r1, #8
    7fa4:	dd00      	ble.n	7fa8 <rx_queue_put+0x40>
    7fa6:	6198      	str	r0, [r3, #24]
    7fa8:	290b      	cmp	r1, #11
    7faa:	dd27      	ble.n	7ffc <rx_queue_put+0x94>
    7fac:	f04f 0c0c 	mov.w	ip, #12
    7fb0:	b13a      	cbz	r2, 7fc2 <rx_queue_put+0x5a>
    7fb2:	2103      	movs	r1, #3
    7fb4:	7139      	strb	r1, [r7, #4]
    7fb6:	2100      	movs	r1, #0
    7fb8:	7179      	strb	r1, [r7, #5]
    7fba:	71b9      	strb	r1, [r7, #6]
    7fbc:	71f9      	strb	r1, [r7, #7]
    7fbe:	6878      	ldr	r0, [r7, #4]
    7fc0:	6118      	str	r0, [r3, #16]
    7fc2:	2100      	movs	r1, #0
    7fc4:	f36f 0100 	bfc	r1, #0, #1
    7fc8:	f36f 0141 	bfc	r1, #1, #1
    7fcc:	f36f 0182 	bfc	r1, #2, #1
    7fd0:	f36f 01c5 	bfc	r1, #3, #3
    7fd4:	2301      	movs	r3, #1
    7fd6:	f363 1188 	bfi	r1, r3, #6, #3
    7fda:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    7fde:	f36c 2152 	bfi	r1, ip, #9, #10
    7fe2:	f36f 41de 	bfc	r1, #19, #12
    7fe6:	f36f 71df 	bfc	r1, #31, #1
    7fea:	2300      	movs	r3, #0
    7fec:	4809      	ldr	r0, [pc, #36]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fee:	f7fb fb6d 	bl	36cc <z_impl_z_log_msg_static_create>
    7ff2:	46a5      	mov	sp, r4
}
    7ff4:	e7c5      	b.n	7f82 <rx_queue_put+0x1a>
		BT_ERR("Could not submit rx_work: %d", err);
    7ff6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7ffa:	e7cc      	b.n	7f96 <rx_queue_put+0x2e>
    7ffc:	f06f 0c1b 	mvn.w	ip, #27
    8000:	e7d6      	b.n	7fb0 <rx_queue_put+0x48>
    8002:	bf00      	nop
    8004:	20000134 	.word	0x20000134
    8008:	200002fc 	.word	0x200002fc
    800c:	200011e8 	.word	0x200011e8
    8010:	000218f4 	.word	0x000218f4
    8014:	00020548 	.word	0x00020548

00008018 <hci_acl>:
{
    8018:	b5f0      	push	{r4, r5, r6, r7, lr}
    801a:	b083      	sub	sp, #12
    801c:	af00      	add	r7, sp, #0
    801e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8020:	8983      	ldrh	r3, [r0, #12]
    8022:	2b03      	cmp	r3, #3
    8024:	d951      	bls.n	80ca <hci_acl+0xb2>
    8026:	2104      	movs	r1, #4
    8028:	f104 0008 	add.w	r0, r4, #8
    802c:	f014 fdb0 	bl	1cb90 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
    8030:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8032:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
    8034:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
    8036:	f3c0 000b 	ubfx	r0, r0, #0, #12
    803a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    803c:	23ff      	movs	r3, #255	; 0xff
    803e:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    8040:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
    8044:	45b4      	cmp	ip, r6
    8046:	d054      	beq.n	80f2 <hci_acl+0xda>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8048:	466d      	mov	r5, sp
    804a:	b088      	sub	sp, #32
    804c:	466b      	mov	r3, sp
    804e:	f113 0210 	adds.w	r2, r3, #16
    8052:	d048      	beq.n	80e6 <hci_acl+0xce>
    8054:	2110      	movs	r1, #16
    8056:	b11a      	cbz	r2, 8060 <hci_acl+0x48>
    8058:	2904      	cmp	r1, #4
    805a:	dd01      	ble.n	8060 <hci_acl+0x48>
    805c:	484d      	ldr	r0, [pc, #308]	; (8194 <hci_acl+0x17c>)
    805e:	6158      	str	r0, [r3, #20]
    8060:	b11a      	cbz	r2, 806a <hci_acl+0x52>
    8062:	2908      	cmp	r1, #8
    8064:	dd01      	ble.n	806a <hci_acl+0x52>
    8066:	f8c3 c018 	str.w	ip, [r3, #24]
    806a:	b112      	cbz	r2, 8072 <hci_acl+0x5a>
    806c:	290c      	cmp	r1, #12
    806e:	dd00      	ble.n	8072 <hci_acl+0x5a>
    8070:	61de      	str	r6, [r3, #28]
    8072:	290f      	cmp	r1, #15
    8074:	dd3a      	ble.n	80ec <hci_acl+0xd4>
    8076:	f04f 0c10 	mov.w	ip, #16
    807a:	b13a      	cbz	r2, 808c <hci_acl+0x74>
    807c:	2104      	movs	r1, #4
    807e:	7139      	strb	r1, [r7, #4]
    8080:	2100      	movs	r1, #0
    8082:	7179      	strb	r1, [r7, #5]
    8084:	71b9      	strb	r1, [r7, #6]
    8086:	71f9      	strb	r1, [r7, #7]
    8088:	6878      	ldr	r0, [r7, #4]
    808a:	6118      	str	r0, [r3, #16]
    808c:	2100      	movs	r1, #0
    808e:	f36f 0100 	bfc	r1, #0, #1
    8092:	f36f 0141 	bfc	r1, #1, #1
    8096:	f36f 0182 	bfc	r1, #2, #1
    809a:	f36f 01c5 	bfc	r1, #3, #3
    809e:	2301      	movs	r3, #1
    80a0:	f363 1188 	bfi	r1, r3, #6, #3
    80a4:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    80a8:	f36c 2152 	bfi	r1, ip, #9, #10
    80ac:	f36f 41de 	bfc	r1, #19, #12
    80b0:	f36f 71df 	bfc	r1, #31, #1
    80b4:	2300      	movs	r3, #0
    80b6:	4838      	ldr	r0, [pc, #224]	; (8198 <hci_acl+0x180>)
    80b8:	f7fb fb08 	bl	36cc <z_impl_z_log_msg_static_create>
    80bc:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    80be:	4620      	mov	r0, r4
    80c0:	f014 fce4 	bl	1ca8c <net_buf_unref>
}
    80c4:	370c      	adds	r7, #12
    80c6:	46bd      	mov	sp, r7
    80c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    80ca:	f240 13eb 	movw	r3, #491	; 0x1eb
    80ce:	4a33      	ldr	r2, [pc, #204]	; (819c <hci_acl+0x184>)
    80d0:	4933      	ldr	r1, [pc, #204]	; (81a0 <hci_acl+0x188>)
    80d2:	4834      	ldr	r0, [pc, #208]	; (81a4 <hci_acl+0x18c>)
    80d4:	f010 fd22 	bl	18b1c <assert_print>
    80d8:	4040      	eors	r0, r0
    80da:	f380 8811 	msr	BASEPRI, r0
    80de:	f04f 0003 	mov.w	r0, #3
    80e2:	df02      	svc	2
    80e4:	e79f      	b.n	8026 <hci_acl+0xe>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    80e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    80ea:	e7b4      	b.n	8056 <hci_acl+0x3e>
    80ec:	f06f 0c1b 	mvn.w	ip, #27
    80f0:	e7c3      	b.n	807a <hci_acl+0x62>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    80f2:	f003 fa7f 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    80f6:	4606      	mov	r6, r0
    80f8:	b158      	cbz	r0, 8112 <hci_acl+0xfa>
	acl(buf)->index = bt_conn_index(conn);
    80fa:	f003 fc1b 	bl	b934 <bt_conn_index>
    80fe:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8100:	462a      	mov	r2, r5
    8102:	4621      	mov	r1, r4
    8104:	4630      	mov	r0, r6
    8106:	f012 fc51 	bl	1a9ac <bt_conn_recv>
	bt_conn_unref(conn);
    810a:	4630      	mov	r0, r6
    810c:	f012 fc77 	bl	1a9fe <bt_conn_unref>
    8110:	e7d8      	b.n	80c4 <hci_acl+0xac>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8112:	8ae0      	ldrh	r0, [r4, #22]
    8114:	466e      	mov	r6, sp
    8116:	b088      	sub	sp, #32
    8118:	466b      	mov	r3, sp
    811a:	f113 0210 	adds.w	r2, r3, #16
    811e:	d032      	beq.n	8186 <hci_acl+0x16e>
    8120:	210c      	movs	r1, #12
    8122:	b11a      	cbz	r2, 812c <hci_acl+0x114>
    8124:	2904      	cmp	r1, #4
    8126:	dd01      	ble.n	812c <hci_acl+0x114>
    8128:	4d1f      	ldr	r5, [pc, #124]	; (81a8 <hci_acl+0x190>)
    812a:	615d      	str	r5, [r3, #20]
    812c:	b112      	cbz	r2, 8134 <hci_acl+0x11c>
    812e:	2908      	cmp	r1, #8
    8130:	dd00      	ble.n	8134 <hci_acl+0x11c>
    8132:	6198      	str	r0, [r3, #24]
    8134:	290b      	cmp	r1, #11
    8136:	dd29      	ble.n	818c <hci_acl+0x174>
    8138:	250c      	movs	r5, #12
    813a:	b13a      	cbz	r2, 814c <hci_acl+0x134>
    813c:	2103      	movs	r1, #3
    813e:	7139      	strb	r1, [r7, #4]
    8140:	2100      	movs	r1, #0
    8142:	7179      	strb	r1, [r7, #5]
    8144:	71b9      	strb	r1, [r7, #6]
    8146:	71f9      	strb	r1, [r7, #7]
    8148:	6878      	ldr	r0, [r7, #4]
    814a:	6118      	str	r0, [r3, #16]
    814c:	2100      	movs	r1, #0
    814e:	f36f 0100 	bfc	r1, #0, #1
    8152:	f36f 0141 	bfc	r1, #1, #1
    8156:	f36f 0182 	bfc	r1, #2, #1
    815a:	f36f 01c5 	bfc	r1, #3, #3
    815e:	2301      	movs	r3, #1
    8160:	f363 1188 	bfi	r1, r3, #6, #3
    8164:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    8168:	f365 2152 	bfi	r1, r5, #9, #10
    816c:	f36f 41de 	bfc	r1, #19, #12
    8170:	f36f 71df 	bfc	r1, #31, #1
    8174:	2300      	movs	r3, #0
    8176:	4808      	ldr	r0, [pc, #32]	; (8198 <hci_acl+0x180>)
    8178:	f7fb faa8 	bl	36cc <z_impl_z_log_msg_static_create>
    817c:	46b5      	mov	sp, r6
		net_buf_unref(buf);
    817e:	4620      	mov	r0, r4
    8180:	f014 fc84 	bl	1ca8c <net_buf_unref>
		return;
    8184:	e79e      	b.n	80c4 <hci_acl+0xac>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8186:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    818a:	e7ca      	b.n	8122 <hci_acl+0x10a>
    818c:	f06f 051b 	mvn.w	r5, #27
    8190:	e7d3      	b.n	813a <hci_acl+0x122>
    8192:	bf00      	nop
    8194:	00021984 	.word	0x00021984
    8198:	00020548 	.word	0x00020548
    819c:	00021914 	.word	0x00021914
    81a0:	00021948 	.word	0x00021948
    81a4:	00021964 	.word	0x00021964
    81a8:	000219a8 	.word	0x000219a8

000081ac <le_conn_update_complete>:
{
    81ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    81ae:	b083      	sub	sp, #12
    81b0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    81b2:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    81b4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
    81b8:	4630      	mov	r0, r6
    81ba:	f003 fa1b 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    81be:	b158      	cbz	r0, 81d8 <le_conn_update_complete+0x2c>
    81c0:	4605      	mov	r5, r0
	if (!evt->status) {
    81c2:	7823      	ldrb	r3, [r4, #0]
    81c4:	2b00      	cmp	r3, #0
    81c6:	d043      	beq.n	8250 <le_conn_update_complete+0xa4>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    81c8:	2b1a      	cmp	r3, #26
    81ca:	d050      	beq.n	826e <le_conn_update_complete+0xc2>
	bt_conn_unref(conn);
    81cc:	4628      	mov	r0, r5
    81ce:	f012 fc16 	bl	1a9fe <bt_conn_unref>
}
    81d2:	370c      	adds	r7, #12
    81d4:	46bd      	mov	sp, r7
    81d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    81d8:	466d      	mov	r5, sp
    81da:	b088      	sub	sp, #32
    81dc:	466b      	mov	r3, sp
    81de:	f113 0210 	adds.w	r2, r3, #16
    81e2:	d02f      	beq.n	8244 <le_conn_update_complete+0x98>
    81e4:	210c      	movs	r1, #12
    81e6:	b11a      	cbz	r2, 81f0 <le_conn_update_complete+0x44>
    81e8:	2904      	cmp	r1, #4
    81ea:	dd01      	ble.n	81f0 <le_conn_update_complete+0x44>
    81ec:	4830      	ldr	r0, [pc, #192]	; (82b0 <le_conn_update_complete+0x104>)
    81ee:	6158      	str	r0, [r3, #20]
    81f0:	b112      	cbz	r2, 81f8 <le_conn_update_complete+0x4c>
    81f2:	2908      	cmp	r1, #8
    81f4:	dd00      	ble.n	81f8 <le_conn_update_complete+0x4c>
    81f6:	619e      	str	r6, [r3, #24]
    81f8:	290b      	cmp	r1, #11
    81fa:	dd26      	ble.n	824a <le_conn_update_complete+0x9e>
    81fc:	240c      	movs	r4, #12
    81fe:	b13a      	cbz	r2, 8210 <le_conn_update_complete+0x64>
    8200:	2103      	movs	r1, #3
    8202:	7039      	strb	r1, [r7, #0]
    8204:	2100      	movs	r1, #0
    8206:	7079      	strb	r1, [r7, #1]
    8208:	70b9      	strb	r1, [r7, #2]
    820a:	70f9      	strb	r1, [r7, #3]
    820c:	6838      	ldr	r0, [r7, #0]
    820e:	6118      	str	r0, [r3, #16]
    8210:	2100      	movs	r1, #0
    8212:	f36f 0100 	bfc	r1, #0, #1
    8216:	f36f 0141 	bfc	r1, #1, #1
    821a:	f36f 0182 	bfc	r1, #2, #1
    821e:	f36f 01c5 	bfc	r1, #3, #3
    8222:	2301      	movs	r3, #1
    8224:	f363 1188 	bfi	r1, r3, #6, #3
    8228:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    822c:	f364 2152 	bfi	r1, r4, #9, #10
    8230:	f36f 41de 	bfc	r1, #19, #12
    8234:	f36f 71df 	bfc	r1, #31, #1
    8238:	2300      	movs	r3, #0
    823a:	481e      	ldr	r0, [pc, #120]	; (82b4 <le_conn_update_complete+0x108>)
    823c:	f7fb fa46 	bl	36cc <z_impl_z_log_msg_static_create>
    8240:	46ad      	mov	sp, r5
		return;
    8242:	e7c6      	b.n	81d2 <le_conn_update_complete+0x26>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8248:	e7cd      	b.n	81e6 <le_conn_update_complete+0x3a>
    824a:	f06f 041b 	mvn.w	r4, #27
    824e:	e7d6      	b.n	81fe <le_conn_update_complete+0x52>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8250:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    8254:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8258:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    825c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8260:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    8264:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8268:	f003 fbae 	bl	b9c8 <notify_le_param_updated>
    826c:	e7ae      	b.n	81cc <le_conn_update_complete+0x20>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    826e:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8270:	2b01      	cmp	r3, #1
    8272:	d1ab      	bne.n	81cc <le_conn_update_complete+0x20>
		   !atomic_test_and_set_bit(conn->flags,
    8274:	1d03      	adds	r3, r0, #4
    8276:	e8d3 2fef 	ldaex	r2, [r3]
    827a:	f442 7100 	orr.w	r1, r2, #512	; 0x200
    827e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    8282:	2800      	cmp	r0, #0
    8284:	d1f7      	bne.n	8276 <le_conn_update_complete+0xca>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    8286:	f412 7f00 	tst.w	r2, #512	; 0x200
    828a:	d19f      	bne.n	81cc <le_conn_update_complete+0x20>
		param.interval_min = conn->le.interval_min;
    828c:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    8290:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
    8292:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    8296:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
    8298:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
    829c:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
    829e:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
    82a2:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
    82a4:	4639      	mov	r1, r7
    82a6:	4628      	mov	r0, r5
    82a8:	f012 fd00 	bl	1acac <bt_l2cap_update_conn_param>
    82ac:	e78e      	b.n	81cc <le_conn_update_complete+0x20>
    82ae:	bf00      	nop
    82b0:	000217e8 	.word	0x000217e8
    82b4:	00020548 	.word	0x00020548

000082b8 <hci_event>:
{
    82b8:	b538      	push	{r3, r4, r5, lr}
    82ba:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    82bc:	8983      	ldrh	r3, [r0, #12]
    82be:	2b01      	cmp	r3, #1
    82c0:	d916      	bls.n	82f0 <hci_event+0x38>
    82c2:	2102      	movs	r1, #2
    82c4:	f104 0008 	add.w	r0, r4, #8
    82c8:	f014 fc62 	bl	1cb90 <net_buf_simple_pull_mem>
    82cc:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    82ce:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    82d0:	3b05      	subs	r3, #5
    82d2:	2b15      	cmp	r3, #21
    82d4:	d81c      	bhi.n	8310 <hci_event+0x58>
    82d6:	e8df f003 	tbb	[pc, r3]
    82da:	1b19      	.short	0x1b19
    82dc:	1b1b1b1b 	.word	0x1b1b1b1b
    82e0:	291b1b1b 	.word	0x291b1b1b
    82e4:	1b1b1b29 	.word	0x1b1b1b29
    82e8:	1b1b1b29 	.word	0x1b1b1b29
    82ec:	291b1b1b 	.word	0x291b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
    82f0:	f640 1359 	movw	r3, #2393	; 0x959
    82f4:	4a15      	ldr	r2, [pc, #84]	; (834c <hci_event+0x94>)
    82f6:	4916      	ldr	r1, [pc, #88]	; (8350 <hci_event+0x98>)
    82f8:	4816      	ldr	r0, [pc, #88]	; (8354 <hci_event+0x9c>)
    82fa:	f010 fc0f 	bl	18b1c <assert_print>
    82fe:	4040      	eors	r0, r0
    8300:	f380 8811 	msr	BASEPRI, r0
    8304:	f04f 0003 	mov.w	r0, #3
    8308:	df02      	svc	2
    830a:	e7da      	b.n	82c2 <hci_event+0xa>
    830c:	2303      	movs	r3, #3
    830e:	e000      	b.n	8312 <hci_event+0x5a>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    8310:	2302      	movs	r3, #2
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    8312:	f013 0f02 	tst.w	r3, #2
    8316:	d00b      	beq.n	8330 <hci_event+0x78>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8318:	2304      	movs	r3, #4
    831a:	4a0f      	ldr	r2, [pc, #60]	; (8358 <hci_event+0xa0>)
    831c:	4621      	mov	r1, r4
    831e:	7828      	ldrb	r0, [r5, #0]
    8320:	f7ff fd9e 	bl	7e60 <handle_event>
	net_buf_unref(buf);
    8324:	4620      	mov	r0, r4
    8326:	f014 fbb1 	bl	1ca8c <net_buf_unref>
}
    832a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    832c:	2301      	movs	r3, #1
    832e:	e7f0      	b.n	8312 <hci_event+0x5a>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    8330:	f640 135d 	movw	r3, #2397	; 0x95d
    8334:	4a05      	ldr	r2, [pc, #20]	; (834c <hci_event+0x94>)
    8336:	4909      	ldr	r1, [pc, #36]	; (835c <hci_event+0xa4>)
    8338:	4806      	ldr	r0, [pc, #24]	; (8354 <hci_event+0x9c>)
    833a:	f010 fbef 	bl	18b1c <assert_print>
    833e:	4040      	eors	r0, r0
    8340:	f380 8811 	msr	BASEPRI, r0
    8344:	f04f 0003 	mov.w	r0, #3
    8348:	df02      	svc	2
    834a:	e7e5      	b.n	8318 <hci_event+0x60>
    834c:	00021914 	.word	0x00021914
    8350:	00021948 	.word	0x00021948
    8354:	00021964 	.word	0x00021964
    8358:	00021e2c 	.word	0x00021e2c
    835c:	000219cc 	.word	0x000219cc

00008360 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    8360:	b5f0      	push	{r4, r5, r6, r7, lr}
    8362:	b083      	sub	sp, #12
    8364:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    8366:	484c      	ldr	r0, [pc, #304]	; (8498 <rx_work_handler+0x138>)
    8368:	f014 fb4b 	bl	1ca02 <net_buf_slist_get>
	if (!buf) {
    836c:	2800      	cmp	r0, #0
    836e:	d04d      	beq.n	840c <rx_work_handler+0xac>
    8370:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8372:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
    8374:	2b01      	cmp	r3, #1
    8376:	d004      	beq.n	8382 <rx_work_handler+0x22>
    8378:	2b03      	cmp	r3, #3
    837a:	d105      	bne.n	8388 <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
    837c:	f7ff fe4c 	bl	8018 <hci_acl>
		break;
    8380:	e03a      	b.n	83f8 <rx_work_handler+0x98>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
    8382:	f7ff ff99 	bl	82b8 <hci_event>
		break;
    8386:	e037      	b.n	83f8 <rx_work_handler+0x98>
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    8388:	466d      	mov	r5, sp
    838a:	b088      	sub	sp, #32
    838c:	4669      	mov	r1, sp
    838e:	f111 0210 	adds.w	r2, r1, #16
    8392:	d03e      	beq.n	8412 <rx_work_handler+0xb2>
    8394:	200c      	movs	r0, #12
    8396:	b11a      	cbz	r2, 83a0 <rx_work_handler+0x40>
    8398:	2804      	cmp	r0, #4
    839a:	dd01      	ble.n	83a0 <rx_work_handler+0x40>
    839c:	4e3f      	ldr	r6, [pc, #252]	; (849c <rx_work_handler+0x13c>)
    839e:	614e      	str	r6, [r1, #20]
    83a0:	b112      	cbz	r2, 83a8 <rx_work_handler+0x48>
    83a2:	2808      	cmp	r0, #8
    83a4:	dd00      	ble.n	83a8 <rx_work_handler+0x48>
    83a6:	618b      	str	r3, [r1, #24]
    83a8:	280b      	cmp	r0, #11
    83aa:	dd35      	ble.n	8418 <rx_work_handler+0xb8>
    83ac:	230c      	movs	r3, #12
    83ae:	b13a      	cbz	r2, 83c0 <rx_work_handler+0x60>
    83b0:	2003      	movs	r0, #3
    83b2:	7138      	strb	r0, [r7, #4]
    83b4:	2000      	movs	r0, #0
    83b6:	7178      	strb	r0, [r7, #5]
    83b8:	71b8      	strb	r0, [r7, #6]
    83ba:	71f8      	strb	r0, [r7, #7]
    83bc:	6878      	ldr	r0, [r7, #4]
    83be:	6108      	str	r0, [r1, #16]
    83c0:	2100      	movs	r1, #0
    83c2:	f36f 0100 	bfc	r1, #0, #1
    83c6:	f36f 0141 	bfc	r1, #1, #1
    83ca:	f36f 0182 	bfc	r1, #2, #1
    83ce:	f36f 01c5 	bfc	r1, #3, #3
    83d2:	2001      	movs	r0, #1
    83d4:	f360 1188 	bfi	r1, r0, #6, #3
    83d8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
    83dc:	f363 2152 	bfi	r1, r3, #9, #10
    83e0:	f36f 41de 	bfc	r1, #19, #12
    83e4:	f36f 71df 	bfc	r1, #31, #1
    83e8:	2300      	movs	r3, #0
    83ea:	482d      	ldr	r0, [pc, #180]	; (84a0 <rx_work_handler+0x140>)
    83ec:	f7fb f96e 	bl	36cc <z_impl_z_log_msg_static_create>
    83f0:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    83f2:	4620      	mov	r0, r4
    83f4:	f014 fb4a 	bl	1ca8c <net_buf_unref>
	return list->head;
    83f8:	4b2a      	ldr	r3, [pc, #168]	; (84a4 <rx_work_handler+0x144>)
    83fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    83fe:	b12b      	cbz	r3, 840c <rx_work_handler+0xac>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    8400:	4929      	ldr	r1, [pc, #164]	; (84a8 <rx_work_handler+0x148>)
    8402:	482a      	ldr	r0, [pc, #168]	; (84ac <rx_work_handler+0x14c>)
    8404:	f017 f9ee 	bl	1f7e4 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    8408:	2800      	cmp	r0, #0
    840a:	db08      	blt.n	841e <rx_work_handler+0xbe>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    840c:	370c      	adds	r7, #12
    840e:	46bd      	mov	sp, r7
    8410:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    8412:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8416:	e7be      	b.n	8396 <rx_work_handler+0x36>
    8418:	f06f 031b 	mvn.w	r3, #27
    841c:	e7c7      	b.n	83ae <rx_work_handler+0x4e>
			BT_ERR("Could not submit rx_work: %d", err);
    841e:	466d      	mov	r5, sp
    8420:	b088      	sub	sp, #32
    8422:	466b      	mov	r3, sp
    8424:	f113 0210 	adds.w	r2, r3, #16
    8428:	d02f      	beq.n	848a <rx_work_handler+0x12a>
    842a:	210c      	movs	r1, #12
    842c:	b11a      	cbz	r2, 8436 <rx_work_handler+0xd6>
    842e:	2904      	cmp	r1, #4
    8430:	dd01      	ble.n	8436 <rx_work_handler+0xd6>
    8432:	4c1f      	ldr	r4, [pc, #124]	; (84b0 <rx_work_handler+0x150>)
    8434:	615c      	str	r4, [r3, #20]
    8436:	b112      	cbz	r2, 843e <rx_work_handler+0xde>
    8438:	2908      	cmp	r1, #8
    843a:	dd00      	ble.n	843e <rx_work_handler+0xde>
    843c:	6198      	str	r0, [r3, #24]
    843e:	290b      	cmp	r1, #11
    8440:	dd26      	ble.n	8490 <rx_work_handler+0x130>
    8442:	240c      	movs	r4, #12
    8444:	b13a      	cbz	r2, 8456 <rx_work_handler+0xf6>
    8446:	2103      	movs	r1, #3
    8448:	7139      	strb	r1, [r7, #4]
    844a:	2100      	movs	r1, #0
    844c:	7179      	strb	r1, [r7, #5]
    844e:	71b9      	strb	r1, [r7, #6]
    8450:	71f9      	strb	r1, [r7, #7]
    8452:	6878      	ldr	r0, [r7, #4]
    8454:	6118      	str	r0, [r3, #16]
    8456:	2100      	movs	r1, #0
    8458:	f36f 0100 	bfc	r1, #0, #1
    845c:	f36f 0141 	bfc	r1, #1, #1
    8460:	f36f 0182 	bfc	r1, #2, #1
    8464:	f36f 01c5 	bfc	r1, #3, #3
    8468:	2301      	movs	r3, #1
    846a:	f363 1188 	bfi	r1, r3, #6, #3
    846e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    8472:	f363 2152 	bfi	r1, r3, #9, #10
    8476:	f36f 41de 	bfc	r1, #19, #12
    847a:	f36f 71df 	bfc	r1, #31, #1
    847e:	2300      	movs	r3, #0
    8480:	4807      	ldr	r0, [pc, #28]	; (84a0 <rx_work_handler+0x140>)
    8482:	f7fb f923 	bl	36cc <z_impl_z_log_msg_static_create>
    8486:	46ad      	mov	sp, r5
    8488:	e7c0      	b.n	840c <rx_work_handler+0xac>
    848a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    848e:	e7cd      	b.n	842c <rx_work_handler+0xcc>
    8490:	f06f 041b 	mvn.w	r4, #27
    8494:	e7d6      	b.n	8444 <rx_work_handler+0xe4>
    8496:	bf00      	nop
    8498:	20000134 	.word	0x20000134
    849c:	000219fc 	.word	0x000219fc
    84a0:	00020548 	.word	0x00020548
    84a4:	20000000 	.word	0x20000000
    84a8:	200002fc 	.word	0x200002fc
    84ac:	200011e8 	.word	0x200011e8
    84b0:	000218f4 	.word	0x000218f4

000084b4 <bt_hci_cmd_state_set_init>:
{
    84b4:	b510      	push	{r4, lr}
    84b6:	460c      	mov	r4, r1
	state->target = target;
    84b8:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    84ba:	604b      	str	r3, [r1, #4]
	state->val = val;
    84bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    84c0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    84c2:	f014 f9a4 	bl	1c80e <net_buf_id>
    84c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    84ca:	4b02      	ldr	r3, [pc, #8]	; (84d4 <bt_hci_cmd_state_set_init+0x20>)
    84cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    84d0:	6044      	str	r4, [r0, #4]
}
    84d2:	bd10      	pop	{r4, pc}
    84d4:	20001f6c 	.word	0x20001f6c

000084d8 <bt_hci_cmd_create>:
{
    84d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    84dc:	4606      	mov	r6, r0
    84de:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
    84e0:	f04f 32ff 	mov.w	r2, #4294967295
    84e4:	f04f 33ff 	mov.w	r3, #4294967295
    84e8:	4818      	ldr	r0, [pc, #96]	; (854c <bt_hci_cmd_create+0x74>)
    84ea:	f014 fa3c 	bl	1c966 <net_buf_alloc_fixed>
    84ee:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    84f0:	f100 0908 	add.w	r9, r0, #8
    84f4:	2101      	movs	r1, #1
    84f6:	4648      	mov	r0, r9
    84f8:	f014 fa5d 	bl	1c9b6 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    84fc:	f04f 0800 	mov.w	r8, #0
    8500:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    8504:	4620      	mov	r0, r4
    8506:	f014 f982 	bl	1c80e <net_buf_id>
    850a:	4d11      	ldr	r5, [pc, #68]	; (8550 <bt_hci_cmd_create+0x78>)
    850c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8510:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    8514:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    8516:	4620      	mov	r0, r4
    8518:	f014 f979 	bl	1c80e <net_buf_id>
    851c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8520:	eb05 0380 	add.w	r3, r5, r0, lsl #2
    8524:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
    8528:	4620      	mov	r0, r4
    852a:	f014 f970 	bl	1c80e <net_buf_id>
    852e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8532:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    8536:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    853a:	2103      	movs	r1, #3
    853c:	4648      	mov	r0, r9
    853e:	f014 faef 	bl	1cb20 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    8542:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    8544:	7087      	strb	r7, [r0, #2]
}
    8546:	4620      	mov	r0, r4
    8548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    854c:	20000834 	.word	0x20000834
    8550:	20001f6c 	.word	0x20001f6c

00008554 <bt_hci_cmd_send_sync>:
{
    8554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8558:	b088      	sub	sp, #32
    855a:	af00      	add	r7, sp, #0
    855c:	4606      	mov	r6, r0
    855e:	4615      	mov	r5, r2
	if (!buf) {
    8560:	460c      	mov	r4, r1
    8562:	2900      	cmp	r1, #0
    8564:	d06e      	beq.n	8644 <bt_hci_cmd_send_sync+0xf0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8566:	f107 0808 	add.w	r8, r7, #8
    856a:	2201      	movs	r2, #1
    856c:	2100      	movs	r1, #0
    856e:	4640      	mov	r0, r8
    8570:	f017 f89c 	bl	1f6ac <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8574:	4620      	mov	r0, r4
    8576:	f014 f94a 	bl	1c80e <net_buf_id>
    857a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    857e:	4b49      	ldr	r3, [pc, #292]	; (86a4 <bt_hci_cmd_send_sync+0x150>)
    8580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8584:	f8c0 8008 	str.w	r8, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    8588:	4620      	mov	r0, r4
    858a:	f014 faa5 	bl	1cad8 <net_buf_ref>
    858e:	4601      	mov	r1, r0
    8590:	4845      	ldr	r0, [pc, #276]	; (86a8 <bt_hci_cmd_send_sync+0x154>)
    8592:	f014 fa6d 	bl	1ca70 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8596:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    859a:	2300      	movs	r3, #0
    859c:	4640      	mov	r0, r8
    859e:	f00d ff2d 	bl	163fc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    85a2:	4680      	mov	r8, r0
    85a4:	2800      	cmp	r0, #0
    85a6:	d155      	bne.n	8654 <bt_hci_cmd_send_sync+0x100>
	status = cmd(buf)->status;
    85a8:	4620      	mov	r0, r4
    85aa:	f014 f930 	bl	1c80e <net_buf_id>
    85ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    85b2:	4b3c      	ldr	r3, [pc, #240]	; (86a4 <bt_hci_cmd_send_sync+0x150>)
    85b4:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
    85b8:	f1b8 0f00 	cmp.w	r8, #0
    85bc:	d065      	beq.n	868a <bt_hci_cmd_send_sync+0x136>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    85be:	466d      	mov	r5, sp
    85c0:	b088      	sub	sp, #32
    85c2:	466b      	mov	r3, sp
    85c4:	f113 0210 	adds.w	r2, r3, #16
    85c8:	d056      	beq.n	8678 <bt_hci_cmd_send_sync+0x124>
    85ca:	2110      	movs	r1, #16
    85cc:	b11a      	cbz	r2, 85d6 <bt_hci_cmd_send_sync+0x82>
    85ce:	2904      	cmp	r1, #4
    85d0:	dd01      	ble.n	85d6 <bt_hci_cmd_send_sync+0x82>
    85d2:	4836      	ldr	r0, [pc, #216]	; (86ac <bt_hci_cmd_send_sync+0x158>)
    85d4:	6158      	str	r0, [r3, #20]
    85d6:	b112      	cbz	r2, 85de <bt_hci_cmd_send_sync+0x8a>
    85d8:	2908      	cmp	r1, #8
    85da:	dd00      	ble.n	85de <bt_hci_cmd_send_sync+0x8a>
    85dc:	619e      	str	r6, [r3, #24]
    85de:	b11a      	cbz	r2, 85e8 <bt_hci_cmd_send_sync+0x94>
    85e0:	290c      	cmp	r1, #12
    85e2:	dd01      	ble.n	85e8 <bt_hci_cmd_send_sync+0x94>
    85e4:	f8c3 801c 	str.w	r8, [r3, #28]
    85e8:	290f      	cmp	r1, #15
    85ea:	dd48      	ble.n	867e <bt_hci_cmd_send_sync+0x12a>
    85ec:	2610      	movs	r6, #16
    85ee:	b13a      	cbz	r2, 8600 <bt_hci_cmd_send_sync+0xac>
    85f0:	2104      	movs	r1, #4
    85f2:	7139      	strb	r1, [r7, #4]
    85f4:	2100      	movs	r1, #0
    85f6:	7179      	strb	r1, [r7, #5]
    85f8:	71b9      	strb	r1, [r7, #6]
    85fa:	71f9      	strb	r1, [r7, #7]
    85fc:	6878      	ldr	r0, [r7, #4]
    85fe:	6118      	str	r0, [r3, #16]
    8600:	2100      	movs	r1, #0
    8602:	f36f 0100 	bfc	r1, #0, #1
    8606:	f36f 0141 	bfc	r1, #1, #1
    860a:	f36f 0182 	bfc	r1, #2, #1
    860e:	f36f 01c5 	bfc	r1, #3, #3
    8612:	2302      	movs	r3, #2
    8614:	f363 1188 	bfi	r1, r3, #6, #3
    8618:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
    861c:	f363 2152 	bfi	r1, r3, #9, #10
    8620:	f36f 41de 	bfc	r1, #19, #12
    8624:	f36f 71df 	bfc	r1, #31, #1
    8628:	2300      	movs	r3, #0
    862a:	4821      	ldr	r0, [pc, #132]	; (86b0 <bt_hci_cmd_send_sync+0x15c>)
    862c:	f7fb f84e 	bl	36cc <z_impl_z_log_msg_static_create>
    8630:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    8632:	4620      	mov	r0, r4
    8634:	f014 fa2a 	bl	1ca8c <net_buf_unref>
		switch (status) {
    8638:	f1b8 0f09 	cmp.w	r8, #9
    863c:	d022      	beq.n	8684 <bt_hci_cmd_send_sync+0x130>
			return -EIO;
    863e:	f06f 0004 	mvn.w	r0, #4
    8642:	e025      	b.n	8690 <bt_hci_cmd_send_sync+0x13c>
		buf = bt_hci_cmd_create(opcode, 0);
    8644:	f7ff ff48 	bl	84d8 <bt_hci_cmd_create>
		if (!buf) {
    8648:	4604      	mov	r4, r0
    864a:	2800      	cmp	r0, #0
    864c:	d18b      	bne.n	8566 <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
    864e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8652:	e01d      	b.n	8690 <bt_hci_cmd_send_sync+0x13c>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8654:	f240 1347 	movw	r3, #327	; 0x147
    8658:	4a16      	ldr	r2, [pc, #88]	; (86b4 <bt_hci_cmd_send_sync+0x160>)
    865a:	4917      	ldr	r1, [pc, #92]	; (86b8 <bt_hci_cmd_send_sync+0x164>)
    865c:	4817      	ldr	r0, [pc, #92]	; (86bc <bt_hci_cmd_send_sync+0x168>)
    865e:	f010 fa5d 	bl	18b1c <assert_print>
    8662:	4641      	mov	r1, r8
    8664:	4816      	ldr	r0, [pc, #88]	; (86c0 <bt_hci_cmd_send_sync+0x16c>)
    8666:	f010 fa59 	bl	18b1c <assert_print>
    866a:	4040      	eors	r0, r0
    866c:	f380 8811 	msr	BASEPRI, r0
    8670:	f04f 0003 	mov.w	r0, #3
    8674:	df02      	svc	2
    8676:	e797      	b.n	85a8 <bt_hci_cmd_send_sync+0x54>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    867c:	e7a6      	b.n	85cc <bt_hci_cmd_send_sync+0x78>
    867e:	f06f 061b 	mvn.w	r6, #27
    8682:	e7b4      	b.n	85ee <bt_hci_cmd_send_sync+0x9a>
			return -ECONNREFUSED;
    8684:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    8688:	e002      	b.n	8690 <bt_hci_cmd_send_sync+0x13c>
	if (rsp) {
    868a:	b12d      	cbz	r5, 8698 <bt_hci_cmd_send_sync+0x144>
		*rsp = buf;
    868c:	602c      	str	r4, [r5, #0]
	return 0;
    868e:	2000      	movs	r0, #0
}
    8690:	3720      	adds	r7, #32
    8692:	46bd      	mov	sp, r7
    8694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    8698:	4620      	mov	r0, r4
    869a:	f014 f9f7 	bl	1ca8c <net_buf_unref>
	return 0;
    869e:	2000      	movs	r0, #0
    86a0:	e7f6      	b.n	8690 <bt_hci_cmd_send_sync+0x13c>
    86a2:	bf00      	nop
    86a4:	20001f6c 	.word	0x20001f6c
    86a8:	2000013c 	.word	0x2000013c
    86ac:	00021a3c 	.word	0x00021a3c
    86b0:	00020548 	.word	0x00020548
    86b4:	00021914 	.word	0x00021914
    86b8:	00021a10 	.word	0x00021a10
    86bc:	00021964 	.word	0x00021964
    86c0:	00021a1c 	.word	0x00021a1c

000086c4 <set_flow_control>:
{
    86c4:	b530      	push	{r4, r5, lr}
    86c6:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    86c8:	4b31      	ldr	r3, [pc, #196]	; (8790 <set_flow_control+0xcc>)
    86ca:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    86ce:	f013 0f20 	tst.w	r3, #32
    86d2:	d02f      	beq.n	8734 <set_flow_control+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    86d4:	2107      	movs	r1, #7
    86d6:	f640 4033 	movw	r0, #3123	; 0xc33
    86da:	f7ff fefd 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    86de:	4605      	mov	r5, r0
    86e0:	2800      	cmp	r0, #0
    86e2:	d04f      	beq.n	8784 <set_flow_control+0xc0>
    86e4:	2107      	movs	r1, #7
    86e6:	3008      	adds	r0, #8
    86e8:	f014 fa1a 	bl	1cb20 <net_buf_simple_add>
    86ec:	4604      	mov	r4, r0
	(void)memset(hbs, 0, sizeof(*hbs));
    86ee:	2207      	movs	r2, #7
    86f0:	2100      	movs	r1, #0
    86f2:	f011 fcd9 	bl	1a0a8 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    86f6:	2200      	movs	r2, #0
    86f8:	231b      	movs	r3, #27
    86fa:	7023      	strb	r3, [r4, #0]
    86fc:	7062      	strb	r2, [r4, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    86fe:	2306      	movs	r3, #6
    8700:	70e3      	strb	r3, [r4, #3]
    8702:	7122      	strb	r2, [r4, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    8704:	4629      	mov	r1, r5
    8706:	f640 4033 	movw	r0, #3123	; 0xc33
    870a:	f7ff ff23 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    870e:	bbb8      	cbnz	r0, 8780 <set_flow_control+0xbc>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    8710:	2101      	movs	r1, #1
    8712:	f640 4031 	movw	r0, #3121	; 0xc31
    8716:	f7ff fedf 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    871a:	4604      	mov	r4, r0
    871c:	b3a8      	cbz	r0, 878a <set_flow_control+0xc6>
	return net_buf_simple_add_u8(&buf->b, val);
    871e:	2101      	movs	r1, #1
    8720:	3008      	adds	r0, #8
    8722:	f014 fa0e 	bl	1cb42 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    8726:	2200      	movs	r2, #0
    8728:	4621      	mov	r1, r4
    872a:	f640 4031 	movw	r0, #3121	; 0xc31
    872e:	f7ff ff11 	bl	8554 <bt_hci_cmd_send_sync>
    8732:	e025      	b.n	8780 <set_flow_control+0xbc>
		BT_WARN("Controller to host flow control not supported");
    8734:	4b17      	ldr	r3, [pc, #92]	; (8794 <set_flow_control+0xd0>)
    8736:	9307      	str	r3, [sp, #28]
    8738:	2302      	movs	r3, #2
    873a:	f88d 3004 	strb.w	r3, [sp, #4]
    873e:	2400      	movs	r4, #0
    8740:	f88d 4005 	strb.w	r4, [sp, #5]
    8744:	f88d 4006 	strb.w	r4, [sp, #6]
    8748:	f88d 4007 	strb.w	r4, [sp, #7]
    874c:	9a01      	ldr	r2, [sp, #4]
    874e:	9206      	str	r2, [sp, #24]
    8750:	4621      	mov	r1, r4
    8752:	f364 0100 	bfi	r1, r4, #0, #1
    8756:	f364 0141 	bfi	r1, r4, #1, #1
    875a:	f364 0182 	bfi	r1, r4, #2, #1
    875e:	f364 01c5 	bfi	r1, r4, #3, #3
    8762:	f363 1188 	bfi	r1, r3, #6, #3
    8766:	2308      	movs	r3, #8
    8768:	f363 2152 	bfi	r1, r3, #9, #10
    876c:	f364 41de 	bfi	r1, r4, #19, #12
    8770:	f364 71df 	bfi	r1, r4, #31, #1
    8774:	4623      	mov	r3, r4
    8776:	aa06      	add	r2, sp, #24
    8778:	4807      	ldr	r0, [pc, #28]	; (8798 <set_flow_control+0xd4>)
    877a:	f7fa ffa7 	bl	36cc <z_impl_z_log_msg_static_create>
		return 0;
    877e:	4620      	mov	r0, r4
}
    8780:	b009      	add	sp, #36	; 0x24
    8782:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    8784:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8788:	e7fa      	b.n	8780 <set_flow_control+0xbc>
		return -ENOBUFS;
    878a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    878e:	e7f7      	b.n	8780 <set_flow_control+0xbc>
    8790:	20000000 	.word	0x20000000
    8794:	00021a58 	.word	0x00021a58
    8798:	00020548 	.word	0x00020548

0000879c <common_init>:
{
    879c:	b500      	push	{lr}
    879e:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    87a0:	4b26      	ldr	r3, [pc, #152]	; (883c <common_init+0xa0>)
    87a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    87a6:	689b      	ldr	r3, [r3, #8]
    87a8:	f013 0f01 	tst.w	r3, #1
    87ac:	d10d      	bne.n	87ca <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    87ae:	aa01      	add	r2, sp, #4
    87b0:	2100      	movs	r1, #0
    87b2:	f640 4003 	movw	r0, #3075	; 0xc03
    87b6:	f7ff fecd 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    87ba:	4603      	mov	r3, r0
    87bc:	b968      	cbnz	r0, 87da <common_init+0x3e>
		hci_reset_complete(rsp);
    87be:	9801      	ldr	r0, [sp, #4]
    87c0:	f7fe fc5a 	bl	7078 <hci_reset_complete>
		net_buf_unref(rsp);
    87c4:	9801      	ldr	r0, [sp, #4]
    87c6:	f014 f961 	bl	1ca8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    87ca:	aa01      	add	r2, sp, #4
    87cc:	2100      	movs	r1, #0
    87ce:	f241 0003 	movw	r0, #4099	; 0x1003
    87d2:	f7ff febf 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    87d6:	4603      	mov	r3, r0
    87d8:	b118      	cbz	r0, 87e2 <common_init+0x46>
}
    87da:	4618      	mov	r0, r3
    87dc:	b003      	add	sp, #12
    87de:	f85d fb04 	ldr.w	pc, [sp], #4
	read_local_features_complete(rsp);
    87e2:	9801      	ldr	r0, [sp, #4]
    87e4:	f7fe fc5a 	bl	709c <read_local_features_complete>
	net_buf_unref(rsp);
    87e8:	9801      	ldr	r0, [sp, #4]
    87ea:	f014 f94f 	bl	1ca8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    87ee:	aa01      	add	r2, sp, #4
    87f0:	2100      	movs	r1, #0
    87f2:	f241 0001 	movw	r0, #4097	; 0x1001
    87f6:	f7ff fead 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    87fa:	4603      	mov	r3, r0
    87fc:	2800      	cmp	r0, #0
    87fe:	d1ec      	bne.n	87da <common_init+0x3e>
	read_local_ver_complete(rsp);
    8800:	9801      	ldr	r0, [sp, #4]
    8802:	f7fe fbbb 	bl	6f7c <read_local_ver_complete>
	net_buf_unref(rsp);
    8806:	9801      	ldr	r0, [sp, #4]
    8808:	f014 f940 	bl	1ca8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    880c:	aa01      	add	r2, sp, #4
    880e:	2100      	movs	r1, #0
    8810:	f241 0002 	movw	r0, #4098	; 0x1002
    8814:	f7ff fe9e 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    8818:	4603      	mov	r3, r0
    881a:	2800      	cmp	r0, #0
    881c:	d1dd      	bne.n	87da <common_init+0x3e>
	read_supported_commands_complete(rsp);
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	f7fe fc46 	bl	70b0 <read_supported_commands_complete>
	net_buf_unref(rsp);
    8824:	9801      	ldr	r0, [sp, #4]
    8826:	f014 f931 	bl	1ca8c <net_buf_unref>
		err = prng_init();
    882a:	f002 fae9 	bl	ae00 <prng_init>
		if (err) {
    882e:	4603      	mov	r3, r0
    8830:	2800      	cmp	r0, #0
    8832:	d1d2      	bne.n	87da <common_init+0x3e>
	err = set_flow_control();
    8834:	f7ff ff46 	bl	86c4 <set_flow_control>
    8838:	4603      	mov	r3, r0
	if (err) {
    883a:	e7ce      	b.n	87da <common_init+0x3e>
    883c:	20000000 	.word	0x20000000

00008840 <hci_le_read_max_data_len>:
{
    8840:	b570      	push	{r4, r5, r6, lr}
    8842:	b088      	sub	sp, #32
    8844:	4605      	mov	r5, r0
    8846:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8848:	aa01      	add	r2, sp, #4
    884a:	2100      	movs	r1, #0
    884c:	f242 002f 	movw	r0, #8239	; 0x202f
    8850:	f7ff fe80 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    8854:	4606      	mov	r6, r0
    8856:	b960      	cbnz	r0, 8872 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
    8858:	9801      	ldr	r0, [sp, #4]
    885a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    885c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8860:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8862:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    8866:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
    8868:	f014 f910 	bl	1ca8c <net_buf_unref>
}
    886c:	4630      	mov	r0, r6
    886e:	b008      	add	sp, #32
    8870:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
    8872:	4b13      	ldr	r3, [pc, #76]	; (88c0 <hci_le_read_max_data_len+0x80>)
    8874:	9307      	str	r3, [sp, #28]
    8876:	2302      	movs	r3, #2
    8878:	f88d 3000 	strb.w	r3, [sp]
    887c:	2300      	movs	r3, #0
    887e:	f88d 3001 	strb.w	r3, [sp, #1]
    8882:	f88d 3002 	strb.w	r3, [sp, #2]
    8886:	f88d 3003 	strb.w	r3, [sp, #3]
    888a:	9a00      	ldr	r2, [sp, #0]
    888c:	9206      	str	r2, [sp, #24]
    888e:	4619      	mov	r1, r3
    8890:	f363 0100 	bfi	r1, r3, #0, #1
    8894:	f363 0141 	bfi	r1, r3, #1, #1
    8898:	f363 0182 	bfi	r1, r3, #2, #1
    889c:	f363 01c5 	bfi	r1, r3, #3, #3
    88a0:	2201      	movs	r2, #1
    88a2:	f362 1188 	bfi	r1, r2, #6, #3
    88a6:	2208      	movs	r2, #8
    88a8:	f362 2152 	bfi	r1, r2, #9, #10
    88ac:	f363 41de 	bfi	r1, r3, #19, #12
    88b0:	f363 71df 	bfi	r1, r3, #31, #1
    88b4:	aa06      	add	r2, sp, #24
    88b6:	4803      	ldr	r0, [pc, #12]	; (88c4 <hci_le_read_max_data_len+0x84>)
    88b8:	f7fa ff08 	bl	36cc <z_impl_z_log_msg_static_create>
		return err;
    88bc:	e7d6      	b.n	886c <hci_le_read_max_data_len+0x2c>
    88be:	bf00      	nop
    88c0:	00021a88 	.word	0x00021a88
    88c4:	00020548 	.word	0x00020548

000088c8 <le_set_event_mask>:
{
    88c8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    88ca:	2108      	movs	r1, #8
    88cc:	f242 0001 	movw	r0, #8193	; 0x2001
    88d0:	f7ff fe02 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    88d4:	b390      	cbz	r0, 893c <le_set_event_mask+0x74>
    88d6:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
    88d8:	2108      	movs	r1, #8
    88da:	4408      	add	r0, r1
    88dc:	f014 f920 	bl	1cb20 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    88e0:	4b18      	ldr	r3, [pc, #96]	; (8944 <le_set_event_mask+0x7c>)
    88e2:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
    88e6:	f011 0f02 	tst.w	r1, #2
    88ea:	d124      	bne.n	8936 <le_set_event_mask+0x6e>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    88ec:	230f      	movs	r3, #15
    88ee:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    88f0:	f011 0f20 	tst.w	r1, #32
    88f4:	d001      	beq.n	88fa <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    88f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    88fa:	4912      	ldr	r1, [pc, #72]	; (8944 <le_set_event_mask+0x7c>)
    88fc:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    8900:	f011 0f09 	tst.w	r1, #9
    8904:	d001      	beq.n	890a <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    8906:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    890a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    890c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    8910:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    8912:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
    8914:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
    8916:	0e1b      	lsrs	r3, r3, #24
    8918:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
    891a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    891c:	0e13      	lsrs	r3, r2, #24
    891e:	7143      	strb	r3, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    8920:	0c13      	lsrs	r3, r2, #16
	dst[0] = val;
    8922:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    8924:	0e12      	lsrs	r2, r2, #24
    8926:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    8928:	2200      	movs	r2, #0
    892a:	4621      	mov	r1, r4
    892c:	f242 0001 	movw	r0, #8193	; 0x2001
    8930:	f7ff fe10 	bl	8554 <bt_hci_cmd_send_sync>
}
    8934:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    8936:	232f      	movs	r3, #47	; 0x2f
    8938:	2200      	movs	r2, #0
    893a:	e7d9      	b.n	88f0 <le_set_event_mask+0x28>
		return -ENOBUFS;
    893c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8940:	e7f8      	b.n	8934 <le_set_event_mask+0x6c>
    8942:	bf00      	nop
    8944:	20000000 	.word	0x20000000

00008948 <le_init>:
{
    8948:	b510      	push	{r4, lr}
    894a:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
    894c:	4b5a      	ldr	r3, [pc, #360]	; (8ab8 <le_init+0x170>)
    894e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    8952:	f013 0f40 	tst.w	r3, #64	; 0x40
    8956:	d00a      	beq.n	896e <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    8958:	aa03      	add	r2, sp, #12
    895a:	2100      	movs	r1, #0
    895c:	f242 0003 	movw	r0, #8195	; 0x2003
    8960:	f7ff fdf8 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    8964:	4603      	mov	r3, r0
    8966:	b350      	cbz	r0, 89be <le_init+0x76>
}
    8968:	4618      	mov	r0, r3
    896a:	b00a      	add	sp, #40	; 0x28
    896c:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
    896e:	4b53      	ldr	r3, [pc, #332]	; (8abc <le_init+0x174>)
    8970:	9309      	str	r3, [sp, #36]	; 0x24
    8972:	2302      	movs	r3, #2
    8974:	f88d 3008 	strb.w	r3, [sp, #8]
    8978:	2300      	movs	r3, #0
    897a:	f88d 3009 	strb.w	r3, [sp, #9]
    897e:	f88d 300a 	strb.w	r3, [sp, #10]
    8982:	f88d 300b 	strb.w	r3, [sp, #11]
    8986:	9a02      	ldr	r2, [sp, #8]
    8988:	9208      	str	r2, [sp, #32]
    898a:	4619      	mov	r1, r3
    898c:	f363 0100 	bfi	r1, r3, #0, #1
    8990:	f363 0141 	bfi	r1, r3, #1, #1
    8994:	f363 0182 	bfi	r1, r3, #2, #1
    8998:	f363 01c5 	bfi	r1, r3, #3, #3
    899c:	2201      	movs	r2, #1
    899e:	f362 1188 	bfi	r1, r2, #6, #3
    89a2:	2208      	movs	r2, #8
    89a4:	f362 2152 	bfi	r1, r2, #9, #10
    89a8:	f363 41de 	bfi	r1, r3, #19, #12
    89ac:	f363 71df 	bfi	r1, r3, #31, #1
    89b0:	aa08      	add	r2, sp, #32
    89b2:	4843      	ldr	r0, [pc, #268]	; (8ac0 <le_init+0x178>)
    89b4:	f7fa fe8a 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENODEV;
    89b8:	f06f 0312 	mvn.w	r3, #18
    89bc:	e7d4      	b.n	8968 <le_init+0x20>
	read_le_features_complete(rsp);
    89be:	9803      	ldr	r0, [sp, #12]
    89c0:	f7fe fb80 	bl	70c4 <read_le_features_complete>
	net_buf_unref(rsp);
    89c4:	9803      	ldr	r0, [sp, #12]
    89c6:	f014 f861 	bl	1ca8c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    89ca:	aa03      	add	r2, sp, #12
    89cc:	2100      	movs	r1, #0
    89ce:	f242 0002 	movw	r0, #8194	; 0x2002
    89d2:	f7ff fdbf 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    89d6:	4603      	mov	r3, r0
    89d8:	2800      	cmp	r0, #0
    89da:	d1c5      	bne.n	8968 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
    89dc:	9803      	ldr	r0, [sp, #12]
    89de:	f7fe fb7b 	bl	70d8 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
    89e2:	9803      	ldr	r0, [sp, #12]
    89e4:	f014 f852 	bl	1ca8c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    89e8:	4b33      	ldr	r3, [pc, #204]	; (8ab8 <le_init+0x170>)
    89ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    89ee:	f013 0f20 	tst.w	r3, #32
    89f2:	d032      	beq.n	8a5a <le_init+0x112>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    89f4:	4b30      	ldr	r3, [pc, #192]	; (8ab8 <le_init+0x170>)
    89f6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
    89fa:	f013 0f08 	tst.w	r3, #8
    89fe:	d144      	bne.n	8a8a <le_init+0x142>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    8a00:	4b2d      	ldr	r3, [pc, #180]	; (8ab8 <le_init+0x170>)
    8a02:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    8a06:	f013 0f20 	tst.w	r3, #32
    8a0a:	d022      	beq.n	8a52 <le_init+0x10a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    8a0c:	a902      	add	r1, sp, #8
    8a0e:	f10d 0006 	add.w	r0, sp, #6
    8a12:	f7ff ff15 	bl	8840 <hci_le_read_max_data_len>
		if (err) {
    8a16:	4603      	mov	r3, r0
    8a18:	2800      	cmp	r0, #0
    8a1a:	d1a5      	bne.n	8968 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    8a1c:	2104      	movs	r1, #4
    8a1e:	f242 0024 	movw	r0, #8228	; 0x2024
    8a22:	f7ff fd59 	bl	84d8 <bt_hci_cmd_create>
		if (!buf) {
    8a26:	4604      	mov	r4, r0
    8a28:	2800      	cmp	r0, #0
    8a2a:	d03f      	beq.n	8aac <le_init+0x164>
    8a2c:	2104      	movs	r1, #4
    8a2e:	3008      	adds	r0, #8
    8a30:	f014 f876 	bl	1cb20 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    8a34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a38:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    8a3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    8a3e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    8a40:	2200      	movs	r2, #0
    8a42:	4621      	mov	r1, r4
    8a44:	f242 0024 	movw	r0, #8228	; 0x2024
    8a48:	f7ff fd84 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    8a4c:	4603      	mov	r3, r0
    8a4e:	2800      	cmp	r0, #0
    8a50:	d18a      	bne.n	8968 <le_init+0x20>
	return  le_set_event_mask();
    8a52:	f7ff ff39 	bl	88c8 <le_set_event_mask>
    8a56:	4603      	mov	r3, r0
    8a58:	e786      	b.n	8968 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    8a5a:	2102      	movs	r1, #2
    8a5c:	f640 406d 	movw	r0, #3181	; 0xc6d
    8a60:	f7ff fd3a 	bl	84d8 <bt_hci_cmd_create>
		if (!buf) {
    8a64:	4604      	mov	r4, r0
    8a66:	b320      	cbz	r0, 8ab2 <le_init+0x16a>
    8a68:	2102      	movs	r1, #2
    8a6a:	3008      	adds	r0, #8
    8a6c:	f014 f858 	bl	1cb20 <net_buf_simple_add>
		cp_le->le = 0x01;
    8a70:	2301      	movs	r3, #1
    8a72:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    8a74:	2200      	movs	r2, #0
    8a76:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    8a78:	4621      	mov	r1, r4
    8a7a:	f640 406d 	movw	r0, #3181	; 0xc6d
    8a7e:	f7ff fd69 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    8a82:	4603      	mov	r3, r0
    8a84:	2800      	cmp	r0, #0
    8a86:	d0b5      	beq.n	89f4 <le_init+0xac>
    8a88:	e76e      	b.n	8968 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    8a8a:	aa03      	add	r2, sp, #12
    8a8c:	2100      	movs	r1, #0
    8a8e:	f242 001c 	movw	r0, #8220	; 0x201c
    8a92:	f7ff fd5f 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    8a96:	4603      	mov	r3, r0
    8a98:	2800      	cmp	r0, #0
    8a9a:	f47f af65 	bne.w	8968 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    8a9e:	9803      	ldr	r0, [sp, #12]
    8aa0:	f7fe fa82 	bl	6fa8 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    8aa4:	9803      	ldr	r0, [sp, #12]
    8aa6:	f013 fff1 	bl	1ca8c <net_buf_unref>
    8aaa:	e7a9      	b.n	8a00 <le_init+0xb8>
			return -ENOBUFS;
    8aac:	f06f 0368 	mvn.w	r3, #104	; 0x68
    8ab0:	e75a      	b.n	8968 <le_init+0x20>
			return -ENOBUFS;
    8ab2:	f06f 0368 	mvn.w	r3, #104	; 0x68
    8ab6:	e757      	b.n	8968 <le_init+0x20>
    8ab8:	20000000 	.word	0x20000000
    8abc:	00021aa8 	.word	0x00021aa8
    8ac0:	00020548 	.word	0x00020548

00008ac4 <bt_br_init>:
{
    8ac4:	b510      	push	{r4, lr}
    8ac6:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
    8ac8:	4b0b      	ldr	r3, [pc, #44]	; (8af8 <bt_br_init+0x34>)
    8aca:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
    8ace:	b11b      	cbz	r3, 8ad8 <bt_br_init+0x14>
		return 0;
    8ad0:	2400      	movs	r4, #0
}
    8ad2:	4620      	mov	r0, r4
    8ad4:	b002      	add	sp, #8
    8ad6:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    8ad8:	aa01      	add	r2, sp, #4
    8ada:	2100      	movs	r1, #0
    8adc:	f241 0005 	movw	r0, #4101	; 0x1005
    8ae0:	f7ff fd38 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    8ae4:	4604      	mov	r4, r0
    8ae6:	2800      	cmp	r0, #0
    8ae8:	d1f3      	bne.n	8ad2 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
    8aea:	9801      	ldr	r0, [sp, #4]
    8aec:	f7fe fb08 	bl	7100 <read_buffer_size_complete>
	net_buf_unref(rsp);
    8af0:	9801      	ldr	r0, [sp, #4]
    8af2:	f013 ffcb 	bl	1ca8c <net_buf_unref>
	return 0;
    8af6:	e7ec      	b.n	8ad2 <bt_br_init+0xe>
    8af8:	20000000 	.word	0x20000000

00008afc <hci_vs_init>:
{
    8afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b00:	b096      	sub	sp, #88	; 0x58
    8b02:	af00      	add	r7, sp, #0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    8b04:	f107 020c 	add.w	r2, r7, #12
    8b08:	2100      	movs	r1, #0
    8b0a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    8b0e:	f7ff fd21 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    8b12:	2800      	cmp	r0, #0
    8b14:	f040 812a 	bne.w	8d6c <hci_vs_init+0x270>
	rp.info = (void *)rsp->data;
    8b18:	68fb      	ldr	r3, [r7, #12]
    8b1a:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    8b1c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    8b20:	4630      	mov	r0, r6
    8b22:	f7fe fa81 	bl	7028 <vs_hw_platform>
    8b26:	2302      	movs	r3, #2
    8b28:	723b      	strb	r3, [r7, #8]
    8b2a:	466d      	mov	r5, sp
    8b2c:	b08a      	sub	sp, #40	; 0x28
    8b2e:	466b      	mov	r3, sp
    8b30:	f113 0210 	adds.w	r2, r3, #16
    8b34:	f000 813c 	beq.w	8db0 <hci_vs_init+0x2b4>
    8b38:	f04f 0c11 	mov.w	ip, #17
    8b3c:	b122      	cbz	r2, 8b48 <hci_vs_init+0x4c>
    8b3e:	f1bc 0f04 	cmp.w	ip, #4
    8b42:	dd01      	ble.n	8b48 <hci_vs_init+0x4c>
    8b44:	49b1      	ldr	r1, [pc, #708]	; (8e0c <hci_vs_init+0x310>)
    8b46:	6159      	str	r1, [r3, #20]
    8b48:	2102      	movs	r1, #2
    8b4a:	7139      	strb	r1, [r7, #4]
    8b4c:	b11a      	cbz	r2, 8b56 <hci_vs_init+0x5a>
    8b4e:	f1bc 0f08 	cmp.w	ip, #8
    8b52:	dd00      	ble.n	8b56 <hci_vs_init+0x5a>
    8b54:	6198      	str	r0, [r3, #24]
    8b56:	b11a      	cbz	r2, 8b60 <hci_vs_init+0x64>
    8b58:	f1bc 0f0c 	cmp.w	ip, #12
    8b5c:	dd00      	ble.n	8b60 <hci_vs_init+0x64>
    8b5e:	61de      	str	r6, [r3, #28]
    8b60:	b12a      	cbz	r2, 8b6e <hci_vs_init+0x72>
    8b62:	f103 0120 	add.w	r1, r3, #32
    8b66:	2000      	movs	r0, #0
    8b68:	2800      	cmp	r0, #0
    8b6a:	f000 8124 	beq.w	8db6 <hci_vs_init+0x2ba>
    8b6e:	f1bc 0f10 	cmp.w	ip, #16
    8b72:	f340 8129 	ble.w	8dc8 <hci_vs_init+0x2cc>
    8b76:	f04f 0c11 	mov.w	ip, #17
    8b7a:	b142      	cbz	r2, 8b8e <hci_vs_init+0x92>
    8b7c:	2104      	movs	r1, #4
    8b7e:	7239      	strb	r1, [r7, #8]
    8b80:	2100      	movs	r1, #0
    8b82:	7279      	strb	r1, [r7, #9]
    8b84:	72b9      	strb	r1, [r7, #10]
    8b86:	2101      	movs	r1, #1
    8b88:	72f9      	strb	r1, [r7, #11]
    8b8a:	68b8      	ldr	r0, [r7, #8]
    8b8c:	6118      	str	r0, [r3, #16]
    8b8e:	2100      	movs	r1, #0
    8b90:	f36f 0100 	bfc	r1, #0, #1
    8b94:	f36f 0141 	bfc	r1, #1, #1
    8b98:	f36f 0182 	bfc	r1, #2, #1
    8b9c:	f36f 01c5 	bfc	r1, #3, #3
    8ba0:	2303      	movs	r3, #3
    8ba2:	f363 1188 	bfi	r1, r3, #6, #3
    8ba6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    8baa:	f36c 2152 	bfi	r1, ip, #9, #10
    8bae:	f36f 41de 	bfc	r1, #19, #12
    8bb2:	f36f 71df 	bfc	r1, #31, #1
    8bb6:	2300      	movs	r3, #0
    8bb8:	4895      	ldr	r0, [pc, #596]	; (8e10 <hci_vs_init+0x314>)
    8bba:	f7fa fd87 	bl	36cc <z_impl_z_log_msg_static_create>
    8bbe:	46ad      	mov	sp, r5
	BT_INFO("HW Variant: %s (0x%04x)",
    8bc0:	f8b4 6003 	ldrh.w	r6, [r4, #3]
    8bc4:	4631      	mov	r1, r6
    8bc6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    8bca:	f7fe fa39 	bl	7040 <vs_hw_variant>
    8bce:	2302      	movs	r3, #2
    8bd0:	723b      	strb	r3, [r7, #8]
    8bd2:	466d      	mov	r5, sp
    8bd4:	b08a      	sub	sp, #40	; 0x28
    8bd6:	466b      	mov	r3, sp
    8bd8:	f113 0210 	adds.w	r2, r3, #16
    8bdc:	f000 80f7 	beq.w	8dce <hci_vs_init+0x2d2>
    8be0:	f04f 0c11 	mov.w	ip, #17
    8be4:	b122      	cbz	r2, 8bf0 <hci_vs_init+0xf4>
    8be6:	f1bc 0f04 	cmp.w	ip, #4
    8bea:	dd01      	ble.n	8bf0 <hci_vs_init+0xf4>
    8bec:	4989      	ldr	r1, [pc, #548]	; (8e14 <hci_vs_init+0x318>)
    8bee:	6159      	str	r1, [r3, #20]
    8bf0:	2102      	movs	r1, #2
    8bf2:	7139      	strb	r1, [r7, #4]
    8bf4:	b11a      	cbz	r2, 8bfe <hci_vs_init+0x102>
    8bf6:	f1bc 0f08 	cmp.w	ip, #8
    8bfa:	dd00      	ble.n	8bfe <hci_vs_init+0x102>
    8bfc:	6198      	str	r0, [r3, #24]
    8bfe:	b11a      	cbz	r2, 8c08 <hci_vs_init+0x10c>
    8c00:	f1bc 0f0c 	cmp.w	ip, #12
    8c04:	dd00      	ble.n	8c08 <hci_vs_init+0x10c>
    8c06:	61de      	str	r6, [r3, #28]
    8c08:	b12a      	cbz	r2, 8c16 <hci_vs_init+0x11a>
    8c0a:	f103 0120 	add.w	r1, r3, #32
    8c0e:	2000      	movs	r0, #0
    8c10:	2800      	cmp	r0, #0
    8c12:	f000 80df 	beq.w	8dd4 <hci_vs_init+0x2d8>
    8c16:	f1bc 0f10 	cmp.w	ip, #16
    8c1a:	f340 80e4 	ble.w	8de6 <hci_vs_init+0x2ea>
    8c1e:	f04f 0c11 	mov.w	ip, #17
    8c22:	b142      	cbz	r2, 8c36 <hci_vs_init+0x13a>
    8c24:	2104      	movs	r1, #4
    8c26:	7239      	strb	r1, [r7, #8]
    8c28:	2100      	movs	r1, #0
    8c2a:	7279      	strb	r1, [r7, #9]
    8c2c:	72b9      	strb	r1, [r7, #10]
    8c2e:	2101      	movs	r1, #1
    8c30:	72f9      	strb	r1, [r7, #11]
    8c32:	68b8      	ldr	r0, [r7, #8]
    8c34:	6118      	str	r0, [r3, #16]
    8c36:	2100      	movs	r1, #0
    8c38:	f36f 0100 	bfc	r1, #0, #1
    8c3c:	f36f 0141 	bfc	r1, #1, #1
    8c40:	f36f 0182 	bfc	r1, #2, #1
    8c44:	f36f 01c5 	bfc	r1, #3, #3
    8c48:	2303      	movs	r3, #3
    8c4a:	f363 1188 	bfi	r1, r3, #6, #3
    8c4e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    8c52:	f36c 2152 	bfi	r1, ip, #9, #10
    8c56:	f36f 41de 	bfc	r1, #19, #12
    8c5a:	f36f 71df 	bfc	r1, #31, #1
    8c5e:	2300      	movs	r3, #0
    8c60:	486b      	ldr	r0, [pc, #428]	; (8e10 <hci_vs_init+0x314>)
    8c62:	f7fa fd33 	bl	36cc <z_impl_z_log_msg_static_create>
    8c66:	46ad      	mov	sp, r5
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    8c68:	7965      	ldrb	r5, [r4, #5]
    8c6a:	4628      	mov	r0, r5
    8c6c:	f7fe f9f8 	bl	7060 <vs_fw_variant>
    8c70:	f894 8006 	ldrb.w	r8, [r4, #6]
    8c74:	f8b4 e007 	ldrh.w	lr, [r4, #7]
    8c78:	f8d4 c009 	ldr.w	ip, [r4, #9]
    8c7c:	2302      	movs	r3, #2
    8c7e:	723b      	strb	r3, [r7, #8]
    8c80:	466c      	mov	r4, sp
    8c82:	b08c      	sub	sp, #48	; 0x30
    8c84:	466b      	mov	r3, sp
    8c86:	f113 0210 	adds.w	r2, r3, #16
    8c8a:	f000 80af 	beq.w	8dec <hci_vs_init+0x2f0>
    8c8e:	211d      	movs	r1, #29
    8c90:	b11a      	cbz	r2, 8c9a <hci_vs_init+0x19e>
    8c92:	2904      	cmp	r1, #4
    8c94:	dd01      	ble.n	8c9a <hci_vs_init+0x19e>
    8c96:	4e60      	ldr	r6, [pc, #384]	; (8e18 <hci_vs_init+0x31c>)
    8c98:	615e      	str	r6, [r3, #20]
    8c9a:	2602      	movs	r6, #2
    8c9c:	713e      	strb	r6, [r7, #4]
    8c9e:	b112      	cbz	r2, 8ca6 <hci_vs_init+0x1aa>
    8ca0:	2908      	cmp	r1, #8
    8ca2:	dd00      	ble.n	8ca6 <hci_vs_init+0x1aa>
    8ca4:	6198      	str	r0, [r3, #24]
    8ca6:	b112      	cbz	r2, 8cae <hci_vs_init+0x1b2>
    8ca8:	290c      	cmp	r1, #12
    8caa:	dd00      	ble.n	8cae <hci_vs_init+0x1b2>
    8cac:	61dd      	str	r5, [r3, #28]
    8cae:	b11a      	cbz	r2, 8cb8 <hci_vs_init+0x1bc>
    8cb0:	2910      	cmp	r1, #16
    8cb2:	dd01      	ble.n	8cb8 <hci_vs_init+0x1bc>
    8cb4:	f8c3 8020 	str.w	r8, [r3, #32]
    8cb8:	b11a      	cbz	r2, 8cc2 <hci_vs_init+0x1c6>
    8cba:	2914      	cmp	r1, #20
    8cbc:	dd01      	ble.n	8cc2 <hci_vs_init+0x1c6>
    8cbe:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
    8cc2:	b11a      	cbz	r2, 8ccc <hci_vs_init+0x1d0>
    8cc4:	2918      	cmp	r1, #24
    8cc6:	dd01      	ble.n	8ccc <hci_vs_init+0x1d0>
    8cc8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
    8ccc:	b12a      	cbz	r2, 8cda <hci_vs_init+0x1de>
    8cce:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    8cd2:	2500      	movs	r5, #0
    8cd4:	2d00      	cmp	r5, #0
    8cd6:	f000 808c 	beq.w	8df2 <hci_vs_init+0x2f6>
    8cda:	291c      	cmp	r1, #28
    8cdc:	f340 8092 	ble.w	8e04 <hci_vs_init+0x308>
    8ce0:	251d      	movs	r5, #29
    8ce2:	b142      	cbz	r2, 8cf6 <hci_vs_init+0x1fa>
    8ce4:	2107      	movs	r1, #7
    8ce6:	7239      	strb	r1, [r7, #8]
    8ce8:	2100      	movs	r1, #0
    8cea:	7279      	strb	r1, [r7, #9]
    8cec:	72b9      	strb	r1, [r7, #10]
    8cee:	2101      	movs	r1, #1
    8cf0:	72f9      	strb	r1, [r7, #11]
    8cf2:	68b8      	ldr	r0, [r7, #8]
    8cf4:	6118      	str	r0, [r3, #16]
    8cf6:	2100      	movs	r1, #0
    8cf8:	f36f 0100 	bfc	r1, #0, #1
    8cfc:	f36f 0141 	bfc	r1, #1, #1
    8d00:	f36f 0182 	bfc	r1, #2, #1
    8d04:	f36f 01c5 	bfc	r1, #3, #3
    8d08:	2303      	movs	r3, #3
    8d0a:	f363 1188 	bfi	r1, r3, #6, #3
    8d0e:	f3c5 0509 	ubfx	r5, r5, #0, #10
    8d12:	f365 2152 	bfi	r1, r5, #9, #10
    8d16:	f36f 41de 	bfc	r1, #19, #12
    8d1a:	f36f 71df 	bfc	r1, #31, #1
    8d1e:	2300      	movs	r3, #0
    8d20:	483b      	ldr	r0, [pc, #236]	; (8e10 <hci_vs_init+0x314>)
    8d22:	f7fa fcd3 	bl	36cc <z_impl_z_log_msg_static_create>
    8d26:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
    8d28:	68f8      	ldr	r0, [r7, #12]
    8d2a:	f013 feaf 	bl	1ca8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    8d2e:	f107 020c 	add.w	r2, r7, #12
    8d32:	2100      	movs	r1, #0
    8d34:	f64f 4002 	movw	r0, #64514	; 0xfc02
    8d38:	f7ff fc0c 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    8d3c:	2800      	cmp	r0, #0
    8d3e:	d171      	bne.n	8e24 <hci_vs_init+0x328>
	rp.cmds = (void *)rsp->data;
    8d40:	68fb      	ldr	r3, [r7, #12]
    8d42:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    8d44:	4c35      	ldr	r4, [pc, #212]	; (8e1c <hci_vs_init+0x320>)
    8d46:	2202      	movs	r2, #2
    8d48:	3101      	adds	r1, #1
    8d4a:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    8d4e:	f011 f97c 	bl	1a04a <memcpy>
	net_buf_unref(rsp);
    8d52:	68f8      	ldr	r0, [r7, #12]
    8d54:	f013 fe9a 	bl	1ca8c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    8d58:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
    8d5c:	f013 0f04 	tst.w	r3, #4
    8d60:	f040 8082 	bne.w	8e68 <hci_vs_init+0x36c>
}
    8d64:	3758      	adds	r7, #88	; 0x58
    8d66:	46bd      	mov	sp, r7
    8d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Vendor HCI extensions not available");
    8d6c:	4b2c      	ldr	r3, [pc, #176]	; (8e20 <hci_vs_init+0x324>)
    8d6e:	657b      	str	r3, [r7, #84]	; 0x54
    8d70:	2202      	movs	r2, #2
    8d72:	723a      	strb	r2, [r7, #8]
    8d74:	2300      	movs	r3, #0
    8d76:	727b      	strb	r3, [r7, #9]
    8d78:	72bb      	strb	r3, [r7, #10]
    8d7a:	72fb      	strb	r3, [r7, #11]
    8d7c:	68b9      	ldr	r1, [r7, #8]
    8d7e:	6539      	str	r1, [r7, #80]	; 0x50
    8d80:	4619      	mov	r1, r3
    8d82:	f363 0100 	bfi	r1, r3, #0, #1
    8d86:	f363 0141 	bfi	r1, r3, #1, #1
    8d8a:	f363 0182 	bfi	r1, r3, #2, #1
    8d8e:	f363 01c5 	bfi	r1, r3, #3, #3
    8d92:	f362 1188 	bfi	r1, r2, #6, #3
    8d96:	2208      	movs	r2, #8
    8d98:	f362 2152 	bfi	r1, r2, #9, #10
    8d9c:	f363 41de 	bfi	r1, r3, #19, #12
    8da0:	f363 71df 	bfi	r1, r3, #31, #1
    8da4:	f107 0250 	add.w	r2, r7, #80	; 0x50
    8da8:	4819      	ldr	r0, [pc, #100]	; (8e10 <hci_vs_init+0x314>)
    8daa:	f7fa fc8f 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
    8dae:	e7d9      	b.n	8d64 <hci_vs_init+0x268>
	BT_INFO("HW Platform: %s (0x%04x)",
    8db0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    8db4:	e6c2      	b.n	8b3c <hci_vs_init+0x40>
    8db6:	f107 0658 	add.w	r6, r7, #88	; 0x58
    8dba:	4406      	add	r6, r0
    8dbc:	f816 6c54 	ldrb.w	r6, [r6, #-84]
    8dc0:	f801 6b01 	strb.w	r6, [r1], #1
    8dc4:	3001      	adds	r0, #1
    8dc6:	e6cf      	b.n	8b68 <hci_vs_init+0x6c>
    8dc8:	f06f 0c1b 	mvn.w	ip, #27
    8dcc:	e6d5      	b.n	8b7a <hci_vs_init+0x7e>
	BT_INFO("HW Variant: %s (0x%04x)",
    8dce:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    8dd2:	e707      	b.n	8be4 <hci_vs_init+0xe8>
    8dd4:	f107 0658 	add.w	r6, r7, #88	; 0x58
    8dd8:	4406      	add	r6, r0
    8dda:	f816 6c54 	ldrb.w	r6, [r6, #-84]
    8dde:	f801 6b01 	strb.w	r6, [r1], #1
    8de2:	3001      	adds	r0, #1
    8de4:	e714      	b.n	8c10 <hci_vs_init+0x114>
    8de6:	f06f 0c1b 	mvn.w	ip, #27
    8dea:	e71a      	b.n	8c22 <hci_vs_init+0x126>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    8dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8df0:	e74e      	b.n	8c90 <hci_vs_init+0x194>
    8df2:	f107 0658 	add.w	r6, r7, #88	; 0x58
    8df6:	442e      	add	r6, r5
    8df8:	f816 6c54 	ldrb.w	r6, [r6, #-84]
    8dfc:	f800 6b01 	strb.w	r6, [r0], #1
    8e00:	3501      	adds	r5, #1
    8e02:	e767      	b.n	8cd4 <hci_vs_init+0x1d8>
    8e04:	f06f 051b 	mvn.w	r5, #27
    8e08:	e76b      	b.n	8ce2 <hci_vs_init+0x1e6>
    8e0a:	bf00      	nop
    8e0c:	00021af0 	.word	0x00021af0
    8e10:	00020548 	.word	0x00020548
    8e14:	00021b0c 	.word	0x00021b0c
    8e18:	00021b24 	.word	0x00021b24
    8e1c:	20000000 	.word	0x20000000
    8e20:	00021acc 	.word	0x00021acc
		BT_WARN("Failed to read supported vendor commands");
    8e24:	4b2b      	ldr	r3, [pc, #172]	; (8ed4 <hci_vs_init+0x3d8>)
    8e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    8e28:	2202      	movs	r2, #2
    8e2a:	723a      	strb	r2, [r7, #8]
    8e2c:	2300      	movs	r3, #0
    8e2e:	727b      	strb	r3, [r7, #9]
    8e30:	72bb      	strb	r3, [r7, #10]
    8e32:	72fb      	strb	r3, [r7, #11]
    8e34:	68b9      	ldr	r1, [r7, #8]
    8e36:	63b9      	str	r1, [r7, #56]	; 0x38
    8e38:	4619      	mov	r1, r3
    8e3a:	f363 0100 	bfi	r1, r3, #0, #1
    8e3e:	f363 0141 	bfi	r1, r3, #1, #1
    8e42:	f363 0182 	bfi	r1, r3, #2, #1
    8e46:	f363 01c5 	bfi	r1, r3, #3, #3
    8e4a:	f362 1188 	bfi	r1, r2, #6, #3
    8e4e:	2208      	movs	r2, #8
    8e50:	f362 2152 	bfi	r1, r2, #9, #10
    8e54:	f363 41de 	bfi	r1, r3, #19, #12
    8e58:	f363 71df 	bfi	r1, r3, #31, #1
    8e5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
    8e60:	481d      	ldr	r0, [pc, #116]	; (8ed8 <hci_vs_init+0x3dc>)
    8e62:	f7fa fc33 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
    8e66:	e77d      	b.n	8d64 <hci_vs_init+0x268>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    8e68:	f107 020c 	add.w	r2, r7, #12
    8e6c:	2100      	movs	r1, #0
    8e6e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    8e72:	f7ff fb6f 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    8e76:	b950      	cbnz	r0, 8e8e <hci_vs_init+0x392>
		rp.feat = (void *)rsp->data;
    8e78:	68fb      	ldr	r3, [r7, #12]
    8e7a:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    8e7c:	2201      	movs	r2, #1
    8e7e:	4411      	add	r1, r2
    8e80:	4816      	ldr	r0, [pc, #88]	; (8edc <hci_vs_init+0x3e0>)
    8e82:	f011 f8e2 	bl	1a04a <memcpy>
		net_buf_unref(rsp);
    8e86:	68f8      	ldr	r0, [r7, #12]
    8e88:	f013 fe00 	bl	1ca8c <net_buf_unref>
    8e8c:	e76a      	b.n	8d64 <hci_vs_init+0x268>
			BT_WARN("Failed to read supported vendor features");
    8e8e:	4b14      	ldr	r3, [pc, #80]	; (8ee0 <hci_vs_init+0x3e4>)
    8e90:	627b      	str	r3, [r7, #36]	; 0x24
    8e92:	2202      	movs	r2, #2
    8e94:	723a      	strb	r2, [r7, #8]
    8e96:	2300      	movs	r3, #0
    8e98:	727b      	strb	r3, [r7, #9]
    8e9a:	72bb      	strb	r3, [r7, #10]
    8e9c:	72fb      	strb	r3, [r7, #11]
    8e9e:	68b9      	ldr	r1, [r7, #8]
    8ea0:	6239      	str	r1, [r7, #32]
    8ea2:	4619      	mov	r1, r3
    8ea4:	f363 0100 	bfi	r1, r3, #0, #1
    8ea8:	f363 0141 	bfi	r1, r3, #1, #1
    8eac:	f363 0182 	bfi	r1, r3, #2, #1
    8eb0:	f363 01c5 	bfi	r1, r3, #3, #3
    8eb4:	f362 1188 	bfi	r1, r2, #6, #3
    8eb8:	2208      	movs	r2, #8
    8eba:	f362 2152 	bfi	r1, r2, #9, #10
    8ebe:	f363 41de 	bfi	r1, r3, #19, #12
    8ec2:	f363 71df 	bfi	r1, r3, #31, #1
    8ec6:	f107 0220 	add.w	r2, r7, #32
    8eca:	4803      	ldr	r0, [pc, #12]	; (8ed8 <hci_vs_init+0x3dc>)
    8ecc:	f7fa fbfe 	bl	36cc <z_impl_z_log_msg_static_create>
			return;
    8ed0:	e748      	b.n	8d64 <hci_vs_init+0x268>
    8ed2:	bf00      	nop
    8ed4:	00021b54 	.word	0x00021b54
    8ed8:	00020548 	.word	0x00020548
    8edc:	200000b8 	.word	0x200000b8
    8ee0:	00021b80 	.word	0x00021b80

00008ee4 <hci_init>:
{
    8ee4:	b500      	push	{lr}
    8ee6:	b089      	sub	sp, #36	; 0x24
	err = common_init();
    8ee8:	f7ff fc58 	bl	879c <common_init>
	if (err) {
    8eec:	4603      	mov	r3, r0
    8eee:	b118      	cbz	r0, 8ef8 <hci_init+0x14>
}
    8ef0:	4618      	mov	r0, r3
    8ef2:	b009      	add	sp, #36	; 0x24
    8ef4:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
    8ef8:	f7ff fd26 	bl	8948 <le_init>
	if (err) {
    8efc:	4603      	mov	r3, r0
    8efe:	2800      	cmp	r0, #0
    8f00:	d1f6      	bne.n	8ef0 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    8f02:	4b21      	ldr	r3, [pc, #132]	; (8f88 <hci_init+0xa4>)
    8f04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    8f08:	f013 0f20 	tst.w	r3, #32
    8f0c:	d00e      	beq.n	8f2c <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
    8f0e:	4b1e      	ldr	r3, [pc, #120]	; (8f88 <hci_init+0xa4>)
    8f10:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
    8f14:	b183      	cbz	r3, 8f38 <hci_init+0x54>
	err = set_event_mask();
    8f16:	f011 f975 	bl	1a204 <set_event_mask>
	if (err) {
    8f1a:	4603      	mov	r3, r0
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d1e7      	bne.n	8ef0 <hci_init+0xc>
	hci_vs_init();
    8f20:	f7ff fdec 	bl	8afc <hci_vs_init>
	err = bt_id_init();
    8f24:	f001 faa6 	bl	a474 <bt_id_init>
    8f28:	4603      	mov	r3, r0
	if (err) {
    8f2a:	e7e1      	b.n	8ef0 <hci_init+0xc>
		err = bt_br_init();
    8f2c:	f7ff fdca 	bl	8ac4 <bt_br_init>
		if (err) {
    8f30:	4603      	mov	r3, r0
    8f32:	2800      	cmp	r0, #0
    8f34:	d0ef      	beq.n	8f16 <hci_init+0x32>
    8f36:	e7db      	b.n	8ef0 <hci_init+0xc>
		BT_ERR("ACL BR/EDR buffers not initialized");
    8f38:	4b14      	ldr	r3, [pc, #80]	; (8f8c <hci_init+0xa8>)
    8f3a:	9307      	str	r3, [sp, #28]
    8f3c:	2302      	movs	r3, #2
    8f3e:	f88d 3004 	strb.w	r3, [sp, #4]
    8f42:	2300      	movs	r3, #0
    8f44:	f88d 3005 	strb.w	r3, [sp, #5]
    8f48:	f88d 3006 	strb.w	r3, [sp, #6]
    8f4c:	f88d 3007 	strb.w	r3, [sp, #7]
    8f50:	9a01      	ldr	r2, [sp, #4]
    8f52:	9206      	str	r2, [sp, #24]
    8f54:	4619      	mov	r1, r3
    8f56:	f363 0100 	bfi	r1, r3, #0, #1
    8f5a:	f363 0141 	bfi	r1, r3, #1, #1
    8f5e:	f363 0182 	bfi	r1, r3, #2, #1
    8f62:	f363 01c5 	bfi	r1, r3, #3, #3
    8f66:	2201      	movs	r2, #1
    8f68:	f362 1188 	bfi	r1, r2, #6, #3
    8f6c:	2208      	movs	r2, #8
    8f6e:	f362 2152 	bfi	r1, r2, #9, #10
    8f72:	f363 41de 	bfi	r1, r3, #19, #12
    8f76:	f363 71df 	bfi	r1, r3, #31, #1
    8f7a:	aa06      	add	r2, sp, #24
    8f7c:	4804      	ldr	r0, [pc, #16]	; (8f90 <hci_init+0xac>)
    8f7e:	f7fa fba5 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
    8f82:	f06f 0304 	mvn.w	r3, #4
    8f86:	e7b3      	b.n	8ef0 <hci_init+0xc>
    8f88:	20000000 	.word	0x20000000
    8f8c:	00021bac 	.word	0x00021bac
    8f90:	00020548 	.word	0x00020548

00008f94 <bt_hci_le_rand>:
{
    8f94:	b570      	push	{r4, r5, r6, lr}
    8f96:	b082      	sub	sp, #8
    8f98:	4606      	mov	r6, r0
    8f9a:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    8f9c:	4b12      	ldr	r3, [pc, #72]	; (8fe8 <bt_hci_le_rand+0x54>)
    8f9e:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	da1d      	bge.n	8fe2 <bt_hci_le_rand+0x4e>
	while (len > 0) {
    8fa6:	b1c4      	cbz	r4, 8fda <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
    8fa8:	4625      	mov	r5, r4
    8faa:	2c08      	cmp	r4, #8
    8fac:	bf28      	it	cs
    8fae:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    8fb0:	aa01      	add	r2, sp, #4
    8fb2:	2100      	movs	r1, #0
    8fb4:	f242 0018 	movw	r0, #8216	; 0x2018
    8fb8:	f7ff facc 	bl	8554 <bt_hci_cmd_send_sync>
		if (err) {
    8fbc:	4603      	mov	r3, r0
    8fbe:	b968      	cbnz	r0, 8fdc <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
    8fc0:	9b01      	ldr	r3, [sp, #4]
    8fc2:	6899      	ldr	r1, [r3, #8]
		memcpy(buffer, rp->rand, count);
    8fc4:	462a      	mov	r2, r5
    8fc6:	3101      	adds	r1, #1
    8fc8:	4630      	mov	r0, r6
    8fca:	f011 f83e 	bl	1a04a <memcpy>
		net_buf_unref(rsp);
    8fce:	9801      	ldr	r0, [sp, #4]
    8fd0:	f013 fd5c 	bl	1ca8c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    8fd4:	442e      	add	r6, r5
		len -= count;
    8fd6:	1b64      	subs	r4, r4, r5
    8fd8:	e7e5      	b.n	8fa6 <bt_hci_le_rand+0x12>
	return 0;
    8fda:	2300      	movs	r3, #0
}
    8fdc:	4618      	mov	r0, r3
    8fde:	b002      	add	sp, #8
    8fe0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
    8fe2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8fe6:	e7f9      	b.n	8fdc <bt_hci_le_rand+0x48>
    8fe8:	20000000 	.word	0x20000000

00008fec <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
    8fec:	7a83      	ldrb	r3, [r0, #10]
    8fee:	2b07      	cmp	r3, #7
    8ff0:	d000      	beq.n	8ff4 <conn_auto_initiate+0x8>
    8ff2:	4770      	bx	lr
{
    8ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ff6:	b085      	sub	sp, #20
    8ff8:	af02      	add	r7, sp, #8
    8ffa:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    8ffc:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8ffe:	e8d3 3faf 	lda	r3, [r3]
    9002:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    9006:	d142      	bne.n	908e <conn_auto_initiate+0xa2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    9008:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    900a:	b12b      	cbz	r3, 9018 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    900c:	4b78      	ldr	r3, [pc, #480]	; (91f0 <conn_auto_initiate+0x204>)
    900e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    9012:	f013 0f08 	tst.w	r3, #8
    9016:	d03a      	beq.n	908e <conn_auto_initiate+0xa2>
		err = hci_le_read_remote_features(conn);
    9018:	4620      	mov	r0, r4
    901a:	f011 f915 	bl	1a248 <hci_le_read_remote_features>
		if (err) {
    901e:	4606      	mov	r6, r0
    9020:	b3a8      	cbz	r0, 908e <conn_auto_initiate+0xa2>
			BT_ERR("Failed read remote features (%d)", err);
    9022:	466d      	mov	r5, sp
    9024:	b088      	sub	sp, #32
    9026:	ab02      	add	r3, sp, #8
    9028:	f113 0210 	adds.w	r2, r3, #16
    902c:	d049      	beq.n	90c2 <conn_auto_initiate+0xd6>
    902e:	210c      	movs	r1, #12
    9030:	b11a      	cbz	r2, 903a <conn_auto_initiate+0x4e>
    9032:	2904      	cmp	r1, #4
    9034:	dd01      	ble.n	903a <conn_auto_initiate+0x4e>
    9036:	486f      	ldr	r0, [pc, #444]	; (91f4 <conn_auto_initiate+0x208>)
    9038:	6158      	str	r0, [r3, #20]
    903a:	b112      	cbz	r2, 9042 <conn_auto_initiate+0x56>
    903c:	2908      	cmp	r1, #8
    903e:	dd00      	ble.n	9042 <conn_auto_initiate+0x56>
    9040:	619e      	str	r6, [r3, #24]
    9042:	290b      	cmp	r1, #11
    9044:	dd40      	ble.n	90c8 <conn_auto_initiate+0xdc>
    9046:	f04f 0c0c 	mov.w	ip, #12
    904a:	b13a      	cbz	r2, 905c <conn_auto_initiate+0x70>
    904c:	2103      	movs	r1, #3
    904e:	7139      	strb	r1, [r7, #4]
    9050:	2100      	movs	r1, #0
    9052:	7179      	strb	r1, [r7, #5]
    9054:	71b9      	strb	r1, [r7, #6]
    9056:	71f9      	strb	r1, [r7, #7]
    9058:	6878      	ldr	r0, [r7, #4]
    905a:	6118      	str	r0, [r3, #16]
    905c:	2100      	movs	r1, #0
    905e:	f36f 0100 	bfc	r1, #0, #1
    9062:	f36f 0141 	bfc	r1, #1, #1
    9066:	f36f 0182 	bfc	r1, #2, #1
    906a:	f36f 01c5 	bfc	r1, #3, #3
    906e:	2301      	movs	r3, #1
    9070:	f363 1188 	bfi	r1, r3, #6, #3
    9074:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    9078:	f36c 2152 	bfi	r1, ip, #9, #10
    907c:	f36f 41de 	bfc	r1, #19, #12
    9080:	f36f 71df 	bfc	r1, #31, #1
    9084:	2300      	movs	r3, #0
    9086:	485c      	ldr	r0, [pc, #368]	; (91f8 <conn_auto_initiate+0x20c>)
    9088:	f7fa fb20 	bl	36cc <z_impl_z_log_msg_static_create>
    908c:	46ad      	mov	sp, r5
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    908e:	4b58      	ldr	r3, [pc, #352]	; (91f0 <conn_auto_initiate+0x204>)
    9090:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9094:	f013 0f01 	tst.w	r3, #1
    9098:	d003      	beq.n	90a2 <conn_auto_initiate+0xb6>
	    !skip_auto_phy_update_on_conn_establishment(conn)) {
    909a:	4620      	mov	r0, r4
    909c:	f011 f898 	bl	1a1d0 <skip_auto_phy_update_on_conn_establishment>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    90a0:	b1a8      	cbz	r0, 90ce <conn_auto_initiate+0xe2>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    90a2:	4b53      	ldr	r3, [pc, #332]	; (91f0 <conn_auto_initiate+0x204>)
    90a4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    90a8:	f013 0f20 	tst.w	r3, #32
    90ac:	d006      	beq.n	90bc <conn_auto_initiate+0xd0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    90ae:	4b50      	ldr	r3, [pc, #320]	; (91f0 <conn_auto_initiate+0x204>)
    90b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    90b4:	689b      	ldr	r3, [r3, #8]
    90b6:	f013 0f02 	tst.w	r3, #2
    90ba:	d14e      	bne.n	915a <conn_auto_initiate+0x16e>
}
    90bc:	370c      	adds	r7, #12
    90be:	46bd      	mov	sp, r7
    90c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_ERR("Failed read remote features (%d)", err);
    90c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    90c6:	e7b3      	b.n	9030 <conn_auto_initiate+0x44>
    90c8:	f06f 0c1b 	mvn.w	ip, #27
    90cc:	e7bd      	b.n	904a <conn_auto_initiate+0x5e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    90ce:	2100      	movs	r1, #0
    90d0:	9100      	str	r1, [sp, #0]
    90d2:	2302      	movs	r3, #2
    90d4:	461a      	mov	r2, r3
    90d6:	4620      	mov	r0, r4
    90d8:	f011 f906 	bl	1a2e8 <bt_le_set_phy>
		if (err) {
    90dc:	4605      	mov	r5, r0
    90de:	2800      	cmp	r0, #0
    90e0:	d0df      	beq.n	90a2 <conn_auto_initiate+0xb6>
			BT_ERR("Failed LE Set PHY (%d)", err);
    90e2:	466e      	mov	r6, sp
    90e4:	b088      	sub	sp, #32
    90e6:	ab02      	add	r3, sp, #8
    90e8:	f113 0210 	adds.w	r2, r3, #16
    90ec:	d02f      	beq.n	914e <conn_auto_initiate+0x162>
    90ee:	210c      	movs	r1, #12
    90f0:	b11a      	cbz	r2, 90fa <conn_auto_initiate+0x10e>
    90f2:	2904      	cmp	r1, #4
    90f4:	dd01      	ble.n	90fa <conn_auto_initiate+0x10e>
    90f6:	4841      	ldr	r0, [pc, #260]	; (91fc <conn_auto_initiate+0x210>)
    90f8:	6158      	str	r0, [r3, #20]
    90fa:	b112      	cbz	r2, 9102 <conn_auto_initiate+0x116>
    90fc:	2908      	cmp	r1, #8
    90fe:	dd00      	ble.n	9102 <conn_auto_initiate+0x116>
    9100:	619d      	str	r5, [r3, #24]
    9102:	290b      	cmp	r1, #11
    9104:	dd26      	ble.n	9154 <conn_auto_initiate+0x168>
    9106:	250c      	movs	r5, #12
    9108:	b13a      	cbz	r2, 911a <conn_auto_initiate+0x12e>
    910a:	2103      	movs	r1, #3
    910c:	7139      	strb	r1, [r7, #4]
    910e:	2100      	movs	r1, #0
    9110:	7179      	strb	r1, [r7, #5]
    9112:	71b9      	strb	r1, [r7, #6]
    9114:	71f9      	strb	r1, [r7, #7]
    9116:	6878      	ldr	r0, [r7, #4]
    9118:	6118      	str	r0, [r3, #16]
    911a:	2100      	movs	r1, #0
    911c:	f36f 0100 	bfc	r1, #0, #1
    9120:	f36f 0141 	bfc	r1, #1, #1
    9124:	f36f 0182 	bfc	r1, #2, #1
    9128:	f36f 01c5 	bfc	r1, #3, #3
    912c:	2301      	movs	r3, #1
    912e:	f363 1188 	bfi	r1, r3, #6, #3
    9132:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    9136:	f363 2152 	bfi	r1, r3, #9, #10
    913a:	f36f 41de 	bfc	r1, #19, #12
    913e:	f36f 71df 	bfc	r1, #31, #1
    9142:	2300      	movs	r3, #0
    9144:	482c      	ldr	r0, [pc, #176]	; (91f8 <conn_auto_initiate+0x20c>)
    9146:	f7fa fac1 	bl	36cc <z_impl_z_log_msg_static_create>
    914a:	46b5      	mov	sp, r6
    914c:	e7a9      	b.n	90a2 <conn_auto_initiate+0xb6>
    914e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9152:	e7cd      	b.n	90f0 <conn_auto_initiate+0x104>
    9154:	f06f 051b 	mvn.w	r5, #27
    9158:	e7d6      	b.n	9108 <conn_auto_initiate+0x11c>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    915a:	1cb9      	adds	r1, r7, #2
    915c:	4638      	mov	r0, r7
    915e:	f7ff fb6f 	bl	8840 <hci_le_read_max_data_len>
			if (!err) {
    9162:	2800      	cmp	r0, #0
    9164:	d1aa      	bne.n	90bc <conn_auto_initiate+0xd0>
				err = bt_le_set_data_len(conn,
    9166:	887a      	ldrh	r2, [r7, #2]
    9168:	8839      	ldrh	r1, [r7, #0]
    916a:	4620      	mov	r0, r4
    916c:	f011 f89f 	bl	1a2ae <bt_le_set_data_len>
				if (err) {
    9170:	4604      	mov	r4, r0
    9172:	2800      	cmp	r0, #0
    9174:	d0a2      	beq.n	90bc <conn_auto_initiate+0xd0>
					BT_ERR("Failed to set data len (%d)", err);
    9176:	466d      	mov	r5, sp
    9178:	b088      	sub	sp, #32
    917a:	ab02      	add	r3, sp, #8
    917c:	f113 0210 	adds.w	r2, r3, #16
    9180:	d02f      	beq.n	91e2 <conn_auto_initiate+0x1f6>
    9182:	210c      	movs	r1, #12
    9184:	b11a      	cbz	r2, 918e <conn_auto_initiate+0x1a2>
    9186:	2904      	cmp	r1, #4
    9188:	dd01      	ble.n	918e <conn_auto_initiate+0x1a2>
    918a:	481d      	ldr	r0, [pc, #116]	; (9200 <conn_auto_initiate+0x214>)
    918c:	6158      	str	r0, [r3, #20]
    918e:	b112      	cbz	r2, 9196 <conn_auto_initiate+0x1aa>
    9190:	2908      	cmp	r1, #8
    9192:	dd00      	ble.n	9196 <conn_auto_initiate+0x1aa>
    9194:	619c      	str	r4, [r3, #24]
    9196:	290b      	cmp	r1, #11
    9198:	dd26      	ble.n	91e8 <conn_auto_initiate+0x1fc>
    919a:	240c      	movs	r4, #12
    919c:	b13a      	cbz	r2, 91ae <conn_auto_initiate+0x1c2>
    919e:	2103      	movs	r1, #3
    91a0:	7139      	strb	r1, [r7, #4]
    91a2:	2100      	movs	r1, #0
    91a4:	7179      	strb	r1, [r7, #5]
    91a6:	71b9      	strb	r1, [r7, #6]
    91a8:	71f9      	strb	r1, [r7, #7]
    91aa:	6878      	ldr	r0, [r7, #4]
    91ac:	6118      	str	r0, [r3, #16]
    91ae:	2100      	movs	r1, #0
    91b0:	f36f 0100 	bfc	r1, #0, #1
    91b4:	f36f 0141 	bfc	r1, #1, #1
    91b8:	f36f 0182 	bfc	r1, #2, #1
    91bc:	f36f 01c5 	bfc	r1, #3, #3
    91c0:	2301      	movs	r3, #1
    91c2:	f363 1188 	bfi	r1, r3, #6, #3
    91c6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    91ca:	f363 2152 	bfi	r1, r3, #9, #10
    91ce:	f36f 41de 	bfc	r1, #19, #12
    91d2:	f36f 71df 	bfc	r1, #31, #1
    91d6:	2300      	movs	r3, #0
    91d8:	4807      	ldr	r0, [pc, #28]	; (91f8 <conn_auto_initiate+0x20c>)
    91da:	f7fa fa77 	bl	36cc <z_impl_z_log_msg_static_create>
    91de:	46ad      	mov	sp, r5
		}
    91e0:	e76c      	b.n	90bc <conn_auto_initiate+0xd0>
					BT_ERR("Failed to set data len (%d)", err);
    91e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    91e6:	e7cd      	b.n	9184 <conn_auto_initiate+0x198>
    91e8:	f06f 041b 	mvn.w	r4, #27
    91ec:	e7d6      	b.n	919c <conn_auto_initiate+0x1b0>
    91ee:	bf00      	nop
    91f0:	20000000 	.word	0x20000000
    91f4:	00021bd0 	.word	0x00021bd0
    91f8:	00020548 	.word	0x00020548
    91fc:	00021bf4 	.word	0x00021bf4
    9200:	00021c0c 	.word	0x00021c0c

00009204 <bt_hci_le_enh_conn_complete>:
{
    9204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9208:	b087      	sub	sp, #28
    920a:	af00      	add	r7, sp, #0
    920c:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    920e:	f8b0 8001 	ldrh.w	r8, [r0, #1]
    9212:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
    9216:	4648      	mov	r0, r9
    9218:	f7fd fe9a 	bl	6f50 <conn_handle_is_disconnected>
    921c:	4606      	mov	r6, r0
	if (evt->status) {
    921e:	7820      	ldrb	r0, [r4, #0]
    9220:	2800      	cmp	r0, #0
    9222:	d040      	beq.n	92a6 <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9224:	283c      	cmp	r0, #60	; 0x3c
    9226:	d035      	beq.n	9294 <bt_hci_le_enh_conn_complete+0x90>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9228:	466d      	mov	r5, sp
    922a:	b088      	sub	sp, #32
    922c:	466b      	mov	r3, sp
    922e:	f113 0210 	adds.w	r2, r3, #16
    9232:	d032      	beq.n	929a <bt_hci_le_enh_conn_complete+0x96>
    9234:	210c      	movs	r1, #12
    9236:	b11a      	cbz	r2, 9240 <bt_hci_le_enh_conn_complete+0x3c>
    9238:	2904      	cmp	r1, #4
    923a:	dd01      	ble.n	9240 <bt_hci_le_enh_conn_complete+0x3c>
    923c:	4c91      	ldr	r4, [pc, #580]	; (9484 <bt_hci_le_enh_conn_complete+0x280>)
    923e:	615c      	str	r4, [r3, #20]
    9240:	b112      	cbz	r2, 9248 <bt_hci_le_enh_conn_complete+0x44>
    9242:	2908      	cmp	r1, #8
    9244:	dd00      	ble.n	9248 <bt_hci_le_enh_conn_complete+0x44>
    9246:	6198      	str	r0, [r3, #24]
    9248:	290b      	cmp	r1, #11
    924a:	dd29      	ble.n	92a0 <bt_hci_le_enh_conn_complete+0x9c>
    924c:	240c      	movs	r4, #12
    924e:	b13a      	cbz	r2, 9260 <bt_hci_le_enh_conn_complete+0x5c>
    9250:	2103      	movs	r1, #3
    9252:	7139      	strb	r1, [r7, #4]
    9254:	2100      	movs	r1, #0
    9256:	7179      	strb	r1, [r7, #5]
    9258:	71b9      	strb	r1, [r7, #6]
    925a:	71f9      	strb	r1, [r7, #7]
    925c:	6878      	ldr	r0, [r7, #4]
    925e:	6118      	str	r0, [r3, #16]
    9260:	2100      	movs	r1, #0
    9262:	f36f 0100 	bfc	r1, #0, #1
    9266:	f36f 0141 	bfc	r1, #1, #1
    926a:	f36f 0182 	bfc	r1, #2, #1
    926e:	f36f 01c5 	bfc	r1, #3, #3
    9272:	2302      	movs	r3, #2
    9274:	f363 1188 	bfi	r1, r3, #6, #3
    9278:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    927c:	f364 2152 	bfi	r1, r4, #9, #10
    9280:	f36f 41de 	bfc	r1, #19, #12
    9284:	f36f 71df 	bfc	r1, #31, #1
    9288:	2300      	movs	r3, #0
    928a:	487f      	ldr	r0, [pc, #508]	; (9488 <bt_hci_le_enh_conn_complete+0x284>)
    928c:	f7fa fa1e 	bl	36cc <z_impl_z_log_msg_static_create>
    9290:	46ad      	mov	sp, r5
		return;
    9292:	e056      	b.n	9342 <bt_hci_le_enh_conn_complete+0x13e>
			le_conn_complete_adv_timeout();
    9294:	f7fe f9d2 	bl	763c <le_conn_complete_adv_timeout>
			return;
    9298:	e053      	b.n	9342 <bt_hci_le_enh_conn_complete+0x13e>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    929a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    929e:	e7ca      	b.n	9236 <bt_hci_le_enh_conn_complete+0x32>
    92a0:	f06f 041b 	mvn.w	r4, #27
    92a4:	e7d3      	b.n	924e <bt_hci_le_enh_conn_complete+0x4a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    92a6:	7923      	ldrb	r3, [r4, #4]
    92a8:	3b02      	subs	r3, #2
    92aa:	b2db      	uxtb	r3, r3
    92ac:	2b01      	cmp	r3, #1
    92ae:	d94c      	bls.n	934a <bt_hci_le_enh_conn_complete+0x146>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    92b0:	78e3      	ldrb	r3, [r4, #3]
    92b2:	2b01      	cmp	r3, #1
    92b4:	d05c      	beq.n	9370 <bt_hci_le_enh_conn_complete+0x16c>
				bt_lookup_id_addr(id, &evt->peer_addr));
    92b6:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
    92b8:	4629      	mov	r1, r5
    92ba:	f011 f8dc 	bl	1a476 <bt_lookup_id_addr>
    92be:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
    92c0:	2207      	movs	r2, #7
    92c2:	f107 0008 	add.w	r0, r7, #8
    92c6:	f010 fec0 	bl	1a04a <memcpy>
    92ca:	2207      	movs	r2, #7
    92cc:	4629      	mov	r1, r5
    92ce:	f107 0010 	add.w	r0, r7, #16
    92d2:	f010 feba 	bl	1a04a <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
    92d6:	f107 0108 	add.w	r1, r7, #8
    92da:	78e0      	ldrb	r0, [r4, #3]
    92dc:	f7fe f988 	bl	75f0 <find_pending_connect>
    92e0:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
    92e2:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    92e4:	2b01      	cmp	r3, #1
    92e6:	d047      	beq.n	9378 <bt_hci_le_enh_conn_complete+0x174>
	if (!conn) {
    92e8:	2d00      	cmp	r5, #0
    92ea:	d054      	beq.n	9396 <bt_hci_le_enh_conn_complete+0x192>
	conn->handle = handle;
    92ec:	4628      	mov	r0, r5
    92ee:	f820 8b88 	strh.w	r8, [r0], #136
    92f2:	2207      	movs	r2, #7
    92f4:	f107 0108 	add.w	r1, r7, #8
    92f8:	f010 fea7 	bl	1a04a <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    92fc:	f8b4 3017 	ldrh.w	r3, [r4, #23]
    9300:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    9304:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    9308:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    930c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    9310:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    9314:	78e3      	ldrb	r3, [r4, #3]
    9316:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    9318:	2200      	movs	r2, #0
    931a:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    931c:	2b01      	cmp	r3, #1
    931e:	f000 8090 	beq.w	9442 <bt_hci_le_enh_conn_complete+0x23e>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    9322:	2107      	movs	r1, #7
    9324:	4628      	mov	r0, r5
    9326:	f002 f96f 	bl	b608 <bt_conn_set_state>
	if (is_disconnected) {
    932a:	2e00      	cmp	r6, #0
    932c:	f040 80a5 	bne.w	947a <bt_hci_le_enh_conn_complete+0x276>
	bt_conn_connected(conn);
    9330:	4628      	mov	r0, r5
    9332:	f011 fba5 	bl	1aa80 <bt_conn_connected>
	conn_auto_initiate(conn);
    9336:	4628      	mov	r0, r5
    9338:	f7ff fe58 	bl	8fec <conn_auto_initiate>
	bt_conn_unref(conn);
    933c:	4628      	mov	r0, r5
    933e:	f011 fb5e 	bl	1a9fe <bt_conn_unref>
}
    9342:	371c      	adds	r7, #28
    9344:	46bd      	mov	sp, r7
    9346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    934a:	2207      	movs	r2, #7
    934c:	1d21      	adds	r1, r4, #4
    934e:	f107 0008 	add.w	r0, r7, #8
    9352:	f010 fe7a 	bl	1a04a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9356:	7a3b      	ldrb	r3, [r7, #8]
    9358:	3b02      	subs	r3, #2
    935a:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
    935c:	2206      	movs	r2, #6
    935e:	f104 0111 	add.w	r1, r4, #17
    9362:	f107 0011 	add.w	r0, r7, #17
    9366:	f010 fe70 	bl	1a04a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    936a:	2301      	movs	r3, #1
    936c:	743b      	strb	r3, [r7, #16]
    936e:	e7b2      	b.n	92d6 <bt_hci_le_enh_conn_complete+0xd2>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    9370:	4b46      	ldr	r3, [pc, #280]	; (948c <bt_hci_le_enh_conn_complete+0x288>)
    9372:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
    9376:	e79e      	b.n	92b6 <bt_hci_le_enh_conn_complete+0xb2>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    9378:	f001 fa56 	bl	a828 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
    937c:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9380:	e8d3 2fef 	ldaex	r2, [r3]
    9384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    9388:	e8c3 2fe1 	stlex	r1, r2, [r3]
    938c:	2900      	cmp	r1, #0
    938e:	d1f7      	bne.n	9380 <bt_hci_le_enh_conn_complete+0x17c>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    9390:	f011 f9d4 	bl	1a73c <bt_le_lim_adv_cancel_timeout>
    9394:	e7a8      	b.n	92e8 <bt_hci_le_enh_conn_complete+0xe4>
		BT_ERR("No pending conn for peer %s",
    9396:	1d20      	adds	r0, r4, #4
    9398:	f7fd fcb2 	bl	6d00 <bt_addr_le_str_real>
    939c:	2302      	movs	r3, #2
    939e:	713b      	strb	r3, [r7, #4]
    93a0:	466c      	mov	r4, sp
    93a2:	b088      	sub	sp, #32
    93a4:	466b      	mov	r3, sp
    93a6:	f113 0210 	adds.w	r2, r3, #16
    93aa:	d03b      	beq.n	9424 <bt_hci_le_enh_conn_complete+0x220>
    93ac:	250d      	movs	r5, #13
    93ae:	b11a      	cbz	r2, 93b8 <bt_hci_le_enh_conn_complete+0x1b4>
    93b0:	2d04      	cmp	r5, #4
    93b2:	dd01      	ble.n	93b8 <bt_hci_le_enh_conn_complete+0x1b4>
    93b4:	4936      	ldr	r1, [pc, #216]	; (9490 <bt_hci_le_enh_conn_complete+0x28c>)
    93b6:	6159      	str	r1, [r3, #20]
    93b8:	2102      	movs	r1, #2
    93ba:	7039      	strb	r1, [r7, #0]
    93bc:	b112      	cbz	r2, 93c4 <bt_hci_le_enh_conn_complete+0x1c0>
    93be:	2d08      	cmp	r5, #8
    93c0:	dd00      	ble.n	93c4 <bt_hci_le_enh_conn_complete+0x1c0>
    93c2:	6198      	str	r0, [r3, #24]
    93c4:	b11a      	cbz	r2, 93ce <bt_hci_le_enh_conn_complete+0x1ca>
    93c6:	f103 011c 	add.w	r1, r3, #28
    93ca:	2000      	movs	r0, #0
    93cc:	b368      	cbz	r0, 942a <bt_hci_le_enh_conn_complete+0x226>
    93ce:	2d0c      	cmp	r5, #12
    93d0:	dd34      	ble.n	943c <bt_hci_le_enh_conn_complete+0x238>
    93d2:	250d      	movs	r5, #13
    93d4:	b142      	cbz	r2, 93e8 <bt_hci_le_enh_conn_complete+0x1e4>
    93d6:	2103      	movs	r1, #3
    93d8:	7139      	strb	r1, [r7, #4]
    93da:	2100      	movs	r1, #0
    93dc:	7179      	strb	r1, [r7, #5]
    93de:	71b9      	strb	r1, [r7, #6]
    93e0:	2101      	movs	r1, #1
    93e2:	71f9      	strb	r1, [r7, #7]
    93e4:	6878      	ldr	r0, [r7, #4]
    93e6:	6118      	str	r0, [r3, #16]
    93e8:	2100      	movs	r1, #0
    93ea:	f36f 0100 	bfc	r1, #0, #1
    93ee:	f36f 0141 	bfc	r1, #1, #1
    93f2:	f36f 0182 	bfc	r1, #2, #1
    93f6:	f36f 01c5 	bfc	r1, #3, #3
    93fa:	2301      	movs	r3, #1
    93fc:	f363 1188 	bfi	r1, r3, #6, #3
    9400:	f3c5 0509 	ubfx	r5, r5, #0, #10
    9404:	f365 2152 	bfi	r1, r5, #9, #10
    9408:	f36f 41de 	bfc	r1, #19, #12
    940c:	f36f 71df 	bfc	r1, #31, #1
    9410:	2300      	movs	r3, #0
    9412:	481d      	ldr	r0, [pc, #116]	; (9488 <bt_hci_le_enh_conn_complete+0x284>)
    9414:	f7fa f95a 	bl	36cc <z_impl_z_log_msg_static_create>
    9418:	46a5      	mov	sp, r4
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    941a:	211f      	movs	r1, #31
    941c:	4648      	mov	r0, r9
    941e:	f010 ff2c 	bl	1a27a <bt_hci_disconnect>
		return;
    9422:	e78e      	b.n	9342 <bt_hci_le_enh_conn_complete+0x13e>
		BT_ERR("No pending conn for peer %s",
    9424:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    9428:	e7c1      	b.n	93ae <bt_hci_le_enh_conn_complete+0x1aa>
    942a:	f107 0618 	add.w	r6, r7, #24
    942e:	4406      	add	r6, r0
    9430:	f816 6c18 	ldrb.w	r6, [r6, #-24]
    9434:	f801 6b01 	strb.w	r6, [r1], #1
    9438:	3001      	adds	r0, #1
    943a:	e7c7      	b.n	93cc <bt_hci_le_enh_conn_complete+0x1c8>
    943c:	f06f 051b 	mvn.w	r5, #27
    9440:	e7c8      	b.n	93d4 <bt_hci_le_enh_conn_complete+0x1d0>
	memcpy(dst, src, sizeof(*dst));
    9442:	2207      	movs	r2, #7
    9444:	f107 0110 	add.w	r1, r7, #16
    9448:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    944c:	f010 fdfd 	bl	1a04a <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    9450:	f001 f9ea 	bl	a828 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    9454:	7a29      	ldrb	r1, [r5, #8]
    9456:	4c0d      	ldr	r4, [pc, #52]	; (948c <bt_hci_le_enh_conn_complete+0x288>)
    9458:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    945c:	2207      	movs	r2, #7
    945e:	4421      	add	r1, r4
    9460:	f105 0096 	add.w	r0, r5, #150	; 0x96
    9464:	f010 fdf1 	bl	1a04a <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    9468:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    946c:	f013 0f40 	tst.w	r3, #64	; 0x40
    9470:	f43f af57 	beq.w	9322 <bt_hci_le_enh_conn_complete+0x11e>
			bt_le_adv_resume();
    9474:	f011 f967 	bl	1a746 <bt_le_adv_resume>
    9478:	e753      	b.n	9322 <bt_hci_le_enh_conn_complete+0x11e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    947a:	2101      	movs	r1, #1
    947c:	4628      	mov	r0, r5
    947e:	f002 f8c3 	bl	b608 <bt_conn_set_state>
    9482:	e755      	b.n	9330 <bt_hci_le_enh_conn_complete+0x12c>
    9484:	00021c28 	.word	0x00021c28
    9488:	00020548 	.word	0x00020548
    948c:	20000000 	.word	0x20000000
    9490:	00021c44 	.word	0x00021c44

00009494 <bt_send>:
{
    9494:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    9496:	4b03      	ldr	r3, [pc, #12]	; (94a4 <bt_send+0x10>)
    9498:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    949c:	695b      	ldr	r3, [r3, #20]
    949e:	4798      	blx	r3
}
    94a0:	bd08      	pop	{r3, pc}
    94a2:	bf00      	nop
    94a4:	20000000 	.word	0x20000000

000094a8 <bt_hci_cmd_send>:
{
    94a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94aa:	b083      	sub	sp, #12
    94ac:	af00      	add	r7, sp, #0
    94ae:	4604      	mov	r4, r0
	if (!buf) {
    94b0:	460d      	mov	r5, r1
    94b2:	b161      	cbz	r1, 94ce <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    94b4:	f640 4335 	movw	r3, #3125	; 0xc35
    94b8:	429c      	cmp	r4, r3
    94ba:	d010      	beq.n	94de <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    94bc:	4629      	mov	r1, r5
    94be:	482b      	ldr	r0, [pc, #172]	; (956c <bt_hci_cmd_send+0xc4>)
    94c0:	f013 fad6 	bl	1ca70 <net_buf_put>
	return 0;
    94c4:	2400      	movs	r4, #0
}
    94c6:	4620      	mov	r0, r4
    94c8:	370c      	adds	r7, #12
    94ca:	46bd      	mov	sp, r7
    94cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    94ce:	f7ff f803 	bl	84d8 <bt_hci_cmd_create>
		if (!buf) {
    94d2:	4605      	mov	r5, r0
    94d4:	2800      	cmp	r0, #0
    94d6:	d1ed      	bne.n	94b4 <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
    94d8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    94dc:	e7f3      	b.n	94c6 <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
    94de:	4628      	mov	r0, r5
    94e0:	f7ff ffd8 	bl	9494 <bt_send>
		if (err) {
    94e4:	4604      	mov	r4, r0
    94e6:	2800      	cmp	r0, #0
    94e8:	d0ed      	beq.n	94c6 <bt_hci_cmd_send+0x1e>
			BT_ERR("Unable to send to driver (err %d)", err);
    94ea:	466e      	mov	r6, sp
    94ec:	b088      	sub	sp, #32
    94ee:	466b      	mov	r3, sp
    94f0:	f113 0210 	adds.w	r2, r3, #16
    94f4:	d033      	beq.n	955e <bt_hci_cmd_send+0xb6>
    94f6:	210c      	movs	r1, #12
    94f8:	b11a      	cbz	r2, 9502 <bt_hci_cmd_send+0x5a>
    94fa:	2904      	cmp	r1, #4
    94fc:	dd01      	ble.n	9502 <bt_hci_cmd_send+0x5a>
    94fe:	481c      	ldr	r0, [pc, #112]	; (9570 <bt_hci_cmd_send+0xc8>)
    9500:	6158      	str	r0, [r3, #20]
    9502:	b112      	cbz	r2, 950a <bt_hci_cmd_send+0x62>
    9504:	2908      	cmp	r1, #8
    9506:	dd00      	ble.n	950a <bt_hci_cmd_send+0x62>
    9508:	619c      	str	r4, [r3, #24]
    950a:	290b      	cmp	r1, #11
    950c:	dd2a      	ble.n	9564 <bt_hci_cmd_send+0xbc>
    950e:	f04f 0c0c 	mov.w	ip, #12
    9512:	b13a      	cbz	r2, 9524 <bt_hci_cmd_send+0x7c>
    9514:	2103      	movs	r1, #3
    9516:	7139      	strb	r1, [r7, #4]
    9518:	2100      	movs	r1, #0
    951a:	7179      	strb	r1, [r7, #5]
    951c:	71b9      	strb	r1, [r7, #6]
    951e:	71f9      	strb	r1, [r7, #7]
    9520:	6878      	ldr	r0, [r7, #4]
    9522:	6118      	str	r0, [r3, #16]
    9524:	2100      	movs	r1, #0
    9526:	f36f 0100 	bfc	r1, #0, #1
    952a:	f36f 0141 	bfc	r1, #1, #1
    952e:	f36f 0182 	bfc	r1, #2, #1
    9532:	f36f 01c5 	bfc	r1, #3, #3
    9536:	2301      	movs	r3, #1
    9538:	f363 1188 	bfi	r1, r3, #6, #3
    953c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    9540:	f36c 2152 	bfi	r1, ip, #9, #10
    9544:	f36f 41de 	bfc	r1, #19, #12
    9548:	f36f 71df 	bfc	r1, #31, #1
    954c:	2300      	movs	r3, #0
    954e:	4809      	ldr	r0, [pc, #36]	; (9574 <bt_hci_cmd_send+0xcc>)
    9550:	f7fa f8bc 	bl	36cc <z_impl_z_log_msg_static_create>
    9554:	46b5      	mov	sp, r6
			net_buf_unref(buf);
    9556:	4628      	mov	r0, r5
    9558:	f013 fa98 	bl	1ca8c <net_buf_unref>
		return err;
    955c:	e7b3      	b.n	94c6 <bt_hci_cmd_send+0x1e>
			BT_ERR("Unable to send to driver (err %d)", err);
    955e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9562:	e7c9      	b.n	94f8 <bt_hci_cmd_send+0x50>
    9564:	f06f 0c1b 	mvn.w	ip, #27
    9568:	e7d3      	b.n	9512 <bt_hci_cmd_send+0x6a>
    956a:	bf00      	nop
    956c:	2000013c 	.word	0x2000013c
    9570:	00021c60 	.word	0x00021c60
    9574:	00020548 	.word	0x00020548

00009578 <bt_hci_host_num_completed_packets>:
{
    9578:	b5f0      	push	{r4, r5, r6, r7, lr}
    957a:	b08f      	sub	sp, #60	; 0x3c
    957c:	af00      	add	r7, sp, #0
    957e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    9580:	8ac5      	ldrh	r5, [r0, #22]
	uint8_t index = acl(buf)->index;
    9582:	7d46      	ldrb	r6, [r0, #21]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9584:	7980      	ldrb	r0, [r0, #6]
    9586:	f005 ff0d 	bl	f3a4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    958a:	4621      	mov	r1, r4
    958c:	f016 f844 	bl	1f618 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9590:	4b5b      	ldr	r3, [pc, #364]	; (9700 <bt_hci_host_num_completed_packets+0x188>)
    9592:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
    9596:	f013 0f20 	tst.w	r3, #32
    959a:	d102      	bne.n	95a2 <bt_hci_host_num_completed_packets+0x2a>
}
    959c:	373c      	adds	r7, #60	; 0x3c
    959e:	46bd      	mov	sp, r7
    95a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_index(index);
    95a2:	4630      	mov	r0, r6
    95a4:	f002 fcca 	bl	bf3c <bt_conn_lookup_index>
	if (!conn) {
    95a8:	4604      	mov	r4, r0
    95aa:	b328      	cbz	r0, 95f8 <bt_hci_host_num_completed_packets+0x80>
	if (conn->state != BT_CONN_CONNECTED &&
    95ac:	7a83      	ldrb	r3, [r0, #10]
    95ae:	3b07      	subs	r3, #7
    95b0:	b2db      	uxtb	r3, r3
    95b2:	2b01      	cmp	r3, #1
    95b4:	d85c      	bhi.n	9670 <bt_hci_host_num_completed_packets+0xf8>
	bt_conn_unref(conn);
    95b6:	f011 fa22 	bl	1a9fe <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    95ba:	2105      	movs	r1, #5
    95bc:	f640 4035 	movw	r0, #3125	; 0xc35
    95c0:	f7fe ff8a 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    95c4:	4604      	mov	r4, r0
    95c6:	2800      	cmp	r0, #0
    95c8:	d077      	beq.n	96ba <bt_hci_host_num_completed_packets+0x142>
	return net_buf_simple_add(&buf->b, len);
    95ca:	f100 0608 	add.w	r6, r0, #8
    95ce:	2101      	movs	r1, #1
    95d0:	4630      	mov	r0, r6
    95d2:	f013 faa5 	bl	1cb20 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    95d6:	2301      	movs	r3, #1
    95d8:	7003      	strb	r3, [r0, #0]
    95da:	2104      	movs	r1, #4
    95dc:	4630      	mov	r0, r6
    95de:	f013 fa9f 	bl	1cb20 <net_buf_simple_add>
	hc->handle = sys_cpu_to_le16(handle);
    95e2:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    95e4:	2301      	movs	r3, #1
    95e6:	7083      	strb	r3, [r0, #2]
    95e8:	2300      	movs	r3, #0
    95ea:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    95ec:	4621      	mov	r1, r4
    95ee:	f640 4035 	movw	r0, #3125	; 0xc35
    95f2:	f7ff ff59 	bl	94a8 <bt_hci_cmd_send>
    95f6:	e7d1      	b.n	959c <bt_hci_host_num_completed_packets+0x24>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    95f8:	466d      	mov	r5, sp
    95fa:	b088      	sub	sp, #32
    95fc:	466b      	mov	r3, sp
    95fe:	f113 0210 	adds.w	r2, r3, #16
    9602:	d02f      	beq.n	9664 <bt_hci_host_num_completed_packets+0xec>
    9604:	210c      	movs	r1, #12
    9606:	b11a      	cbz	r2, 9610 <bt_hci_host_num_completed_packets+0x98>
    9608:	2904      	cmp	r1, #4
    960a:	dd01      	ble.n	9610 <bt_hci_host_num_completed_packets+0x98>
    960c:	483d      	ldr	r0, [pc, #244]	; (9704 <bt_hci_host_num_completed_packets+0x18c>)
    960e:	6158      	str	r0, [r3, #20]
    9610:	b112      	cbz	r2, 9618 <bt_hci_host_num_completed_packets+0xa0>
    9612:	2908      	cmp	r1, #8
    9614:	dd00      	ble.n	9618 <bt_hci_host_num_completed_packets+0xa0>
    9616:	619e      	str	r6, [r3, #24]
    9618:	290b      	cmp	r1, #11
    961a:	dd26      	ble.n	966a <bt_hci_host_num_completed_packets+0xf2>
    961c:	240c      	movs	r4, #12
    961e:	b13a      	cbz	r2, 9630 <bt_hci_host_num_completed_packets+0xb8>
    9620:	2103      	movs	r1, #3
    9622:	7139      	strb	r1, [r7, #4]
    9624:	2100      	movs	r1, #0
    9626:	7179      	strb	r1, [r7, #5]
    9628:	71b9      	strb	r1, [r7, #6]
    962a:	71f9      	strb	r1, [r7, #7]
    962c:	6878      	ldr	r0, [r7, #4]
    962e:	6118      	str	r0, [r3, #16]
    9630:	2100      	movs	r1, #0
    9632:	f36f 0100 	bfc	r1, #0, #1
    9636:	f36f 0141 	bfc	r1, #1, #1
    963a:	f36f 0182 	bfc	r1, #2, #1
    963e:	f36f 01c5 	bfc	r1, #3, #3
    9642:	2302      	movs	r3, #2
    9644:	f363 1188 	bfi	r1, r3, #6, #3
    9648:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    964c:	f364 2152 	bfi	r1, r4, #9, #10
    9650:	f36f 41de 	bfc	r1, #19, #12
    9654:	f36f 71df 	bfc	r1, #31, #1
    9658:	2300      	movs	r3, #0
    965a:	482b      	ldr	r0, [pc, #172]	; (9708 <bt_hci_host_num_completed_packets+0x190>)
    965c:	f7fa f836 	bl	36cc <z_impl_z_log_msg_static_create>
    9660:	46ad      	mov	sp, r5
		return;
    9662:	e79b      	b.n	959c <bt_hci_host_num_completed_packets+0x24>
		BT_WARN("Unable to look up conn with index 0x%02x", index);
    9664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9668:	e7cd      	b.n	9606 <bt_hci_host_num_completed_packets+0x8e>
    966a:	f06f 041b 	mvn.w	r4, #27
    966e:	e7d6      	b.n	961e <bt_hci_host_num_completed_packets+0xa6>
		BT_WARN("Not reporting packet for non-connected conn");
    9670:	4b26      	ldr	r3, [pc, #152]	; (970c <bt_hci_host_num_completed_packets+0x194>)
    9672:	637b      	str	r3, [r7, #52]	; 0x34
    9674:	2202      	movs	r2, #2
    9676:	713a      	strb	r2, [r7, #4]
    9678:	2300      	movs	r3, #0
    967a:	717b      	strb	r3, [r7, #5]
    967c:	71bb      	strb	r3, [r7, #6]
    967e:	71fb      	strb	r3, [r7, #7]
    9680:	6879      	ldr	r1, [r7, #4]
    9682:	6339      	str	r1, [r7, #48]	; 0x30
    9684:	4619      	mov	r1, r3
    9686:	f363 0100 	bfi	r1, r3, #0, #1
    968a:	f363 0141 	bfi	r1, r3, #1, #1
    968e:	f363 0182 	bfi	r1, r3, #2, #1
    9692:	f363 01c5 	bfi	r1, r3, #3, #3
    9696:	f362 1188 	bfi	r1, r2, #6, #3
    969a:	2208      	movs	r2, #8
    969c:	f362 2152 	bfi	r1, r2, #9, #10
    96a0:	f363 41de 	bfi	r1, r3, #19, #12
    96a4:	f363 71df 	bfi	r1, r3, #31, #1
    96a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
    96ac:	4816      	ldr	r0, [pc, #88]	; (9708 <bt_hci_host_num_completed_packets+0x190>)
    96ae:	f7fa f80d 	bl	36cc <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
    96b2:	4620      	mov	r0, r4
    96b4:	f011 f9a3 	bl	1a9fe <bt_conn_unref>
		return;
    96b8:	e770      	b.n	959c <bt_hci_host_num_completed_packets+0x24>
		BT_ERR("Unable to allocate new HCI command");
    96ba:	4b15      	ldr	r3, [pc, #84]	; (9710 <bt_hci_host_num_completed_packets+0x198>)
    96bc:	61fb      	str	r3, [r7, #28]
    96be:	2302      	movs	r3, #2
    96c0:	713b      	strb	r3, [r7, #4]
    96c2:	2300      	movs	r3, #0
    96c4:	717b      	strb	r3, [r7, #5]
    96c6:	71bb      	strb	r3, [r7, #6]
    96c8:	71fb      	strb	r3, [r7, #7]
    96ca:	687a      	ldr	r2, [r7, #4]
    96cc:	61ba      	str	r2, [r7, #24]
    96ce:	4619      	mov	r1, r3
    96d0:	f363 0100 	bfi	r1, r3, #0, #1
    96d4:	f363 0141 	bfi	r1, r3, #1, #1
    96d8:	f363 0182 	bfi	r1, r3, #2, #1
    96dc:	f363 01c5 	bfi	r1, r3, #3, #3
    96e0:	2201      	movs	r2, #1
    96e2:	f362 1188 	bfi	r1, r2, #6, #3
    96e6:	2208      	movs	r2, #8
    96e8:	f362 2152 	bfi	r1, r2, #9, #10
    96ec:	f363 41de 	bfi	r1, r3, #19, #12
    96f0:	f363 71df 	bfi	r1, r3, #31, #1
    96f4:	f107 0218 	add.w	r2, r7, #24
    96f8:	4803      	ldr	r0, [pc, #12]	; (9708 <bt_hci_host_num_completed_packets+0x190>)
    96fa:	f7f9 ffe7 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
    96fe:	e74d      	b.n	959c <bt_hci_host_num_completed_packets+0x24>
    9700:	20000000 	.word	0x20000000
    9704:	00021c84 	.word	0x00021c84
    9708:	00020548 	.word	0x00020548
    970c:	00021cb0 	.word	0x00021cb0
    9710:	00021cdc 	.word	0x00021cdc

00009714 <le_conn_param_neg_reply>:
{
    9714:	b570      	push	{r4, r5, r6, lr}
    9716:	b088      	sub	sp, #32
    9718:	4605      	mov	r5, r0
    971a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    971c:	2103      	movs	r1, #3
    971e:	f242 0021 	movw	r0, #8225	; 0x2021
    9722:	f7fe fed9 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    9726:	b168      	cbz	r0, 9744 <le_conn_param_neg_reply+0x30>
    9728:	4606      	mov	r6, r0
    972a:	2103      	movs	r1, #3
    972c:	3008      	adds	r0, #8
    972e:	f013 f9f7 	bl	1cb20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    9732:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    9734:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9736:	4631      	mov	r1, r6
    9738:	f242 0021 	movw	r0, #8225	; 0x2021
    973c:	f7ff feb4 	bl	94a8 <bt_hci_cmd_send>
}
    9740:	b008      	add	sp, #32
    9742:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
    9744:	4b12      	ldr	r3, [pc, #72]	; (9790 <le_conn_param_neg_reply+0x7c>)
    9746:	9307      	str	r3, [sp, #28]
    9748:	2302      	movs	r3, #2
    974a:	f88d 3004 	strb.w	r3, [sp, #4]
    974e:	2300      	movs	r3, #0
    9750:	f88d 3005 	strb.w	r3, [sp, #5]
    9754:	f88d 3006 	strb.w	r3, [sp, #6]
    9758:	f88d 3007 	strb.w	r3, [sp, #7]
    975c:	9a01      	ldr	r2, [sp, #4]
    975e:	9206      	str	r2, [sp, #24]
    9760:	4619      	mov	r1, r3
    9762:	f363 0100 	bfi	r1, r3, #0, #1
    9766:	f363 0141 	bfi	r1, r3, #1, #1
    976a:	f363 0182 	bfi	r1, r3, #2, #1
    976e:	f363 01c5 	bfi	r1, r3, #3, #3
    9772:	2201      	movs	r2, #1
    9774:	f362 1188 	bfi	r1, r2, #6, #3
    9778:	2208      	movs	r2, #8
    977a:	f362 2152 	bfi	r1, r2, #9, #10
    977e:	f363 41de 	bfi	r1, r3, #19, #12
    9782:	f363 71df 	bfi	r1, r3, #31, #1
    9786:	aa06      	add	r2, sp, #24
    9788:	4802      	ldr	r0, [pc, #8]	; (9794 <le_conn_param_neg_reply+0x80>)
    978a:	f7f9 ff9f 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
    978e:	e7d7      	b.n	9740 <le_conn_param_neg_reply+0x2c>
    9790:	00021d00 	.word	0x00021d00
    9794:	00020548 	.word	0x00020548

00009798 <le_conn_param_req>:
{
    9798:	b5f0      	push	{r4, r5, r6, r7, lr}
    979a:	b085      	sub	sp, #20
    979c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    979e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    97a0:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    97a2:	885a      	ldrh	r2, [r3, #2]
    97a4:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    97a6:	889a      	ldrh	r2, [r3, #4]
    97a8:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    97aa:	88da      	ldrh	r2, [r3, #6]
    97ac:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    97ae:	891b      	ldrh	r3, [r3, #8]
    97b0:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
    97b2:	4620      	mov	r0, r4
    97b4:	f001 ff1e 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
    97b8:	b180      	cbz	r0, 97dc <le_conn_param_req+0x44>
    97ba:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    97bc:	f107 0108 	add.w	r1, r7, #8
    97c0:	f002 f94e 	bl	ba60 <le_param_req>
    97c4:	2800      	cmp	r0, #0
    97c6:	d149      	bne.n	985c <le_conn_param_req+0xc4>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    97c8:	211e      	movs	r1, #30
    97ca:	4620      	mov	r0, r4
    97cc:	f7ff ffa2 	bl	9714 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    97d0:	4628      	mov	r0, r5
    97d2:	f011 f914 	bl	1a9fe <bt_conn_unref>
}
    97d6:	3714      	adds	r7, #20
    97d8:	46bd      	mov	sp, r7
    97da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    97dc:	466e      	mov	r6, sp
    97de:	b088      	sub	sp, #32
    97e0:	466b      	mov	r3, sp
    97e2:	f113 0210 	adds.w	r2, r3, #16
    97e6:	d033      	beq.n	9850 <le_conn_param_req+0xb8>
    97e8:	210c      	movs	r1, #12
    97ea:	b11a      	cbz	r2, 97f4 <le_conn_param_req+0x5c>
    97ec:	2904      	cmp	r1, #4
    97ee:	dd01      	ble.n	97f4 <le_conn_param_req+0x5c>
    97f0:	481d      	ldr	r0, [pc, #116]	; (9868 <le_conn_param_req+0xd0>)
    97f2:	6158      	str	r0, [r3, #20]
    97f4:	b112      	cbz	r2, 97fc <le_conn_param_req+0x64>
    97f6:	2908      	cmp	r1, #8
    97f8:	dd00      	ble.n	97fc <le_conn_param_req+0x64>
    97fa:	619c      	str	r4, [r3, #24]
    97fc:	290b      	cmp	r1, #11
    97fe:	dd2a      	ble.n	9856 <le_conn_param_req+0xbe>
    9800:	250c      	movs	r5, #12
    9802:	b13a      	cbz	r2, 9814 <le_conn_param_req+0x7c>
    9804:	2103      	movs	r1, #3
    9806:	7139      	strb	r1, [r7, #4]
    9808:	2100      	movs	r1, #0
    980a:	7179      	strb	r1, [r7, #5]
    980c:	71b9      	strb	r1, [r7, #6]
    980e:	71f9      	strb	r1, [r7, #7]
    9810:	6878      	ldr	r0, [r7, #4]
    9812:	6118      	str	r0, [r3, #16]
    9814:	2100      	movs	r1, #0
    9816:	f36f 0100 	bfc	r1, #0, #1
    981a:	f36f 0141 	bfc	r1, #1, #1
    981e:	f36f 0182 	bfc	r1, #2, #1
    9822:	f36f 01c5 	bfc	r1, #3, #3
    9826:	2301      	movs	r3, #1
    9828:	f363 1188 	bfi	r1, r3, #6, #3
    982c:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    9830:	f363 2152 	bfi	r1, r3, #9, #10
    9834:	f36f 41de 	bfc	r1, #19, #12
    9838:	f36f 71df 	bfc	r1, #31, #1
    983c:	2300      	movs	r3, #0
    983e:	480b      	ldr	r0, [pc, #44]	; (986c <le_conn_param_req+0xd4>)
    9840:	f7f9 ff44 	bl	36cc <z_impl_z_log_msg_static_create>
    9844:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    9846:	2102      	movs	r1, #2
    9848:	4620      	mov	r0, r4
    984a:	f7ff ff63 	bl	9714 <le_conn_param_neg_reply>
		return;
    984e:	e7c2      	b.n	97d6 <le_conn_param_req+0x3e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9854:	e7c9      	b.n	97ea <le_conn_param_req+0x52>
    9856:	f06f 051b 	mvn.w	r5, #27
    985a:	e7d2      	b.n	9802 <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
    985c:	f107 0108 	add.w	r1, r7, #8
    9860:	4620      	mov	r0, r4
    9862:	f010 fdd0 	bl	1a406 <le_conn_param_req_reply>
    9866:	e7b3      	b.n	97d0 <le_conn_param_req+0x38>
    9868:	000217e8 	.word	0x000217e8
    986c:	00020548 	.word	0x00020548

00009870 <send_cmd>:
{
    9870:	b5f0      	push	{r4, r5, r6, r7, lr}
    9872:	b089      	sub	sp, #36	; 0x24
    9874:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    9876:	2200      	movs	r2, #0
    9878:	2300      	movs	r3, #0
    987a:	4854      	ldr	r0, [pc, #336]	; (99cc <send_cmd+0x15c>)
    987c:	f013 f87a 	bl	1c974 <net_buf_get>
	BT_ASSERT(buf);
    9880:	4605      	mov	r5, r0
    9882:	2800      	cmp	r0, #0
    9884:	f000 808d 	beq.w	99a2 <send_cmd+0x132>
    9888:	4c51      	ldr	r4, [pc, #324]	; (99d0 <send_cmd+0x160>)
    988a:	f04f 32ff 	mov.w	r2, #4294967295
    988e:	f04f 33ff 	mov.w	r3, #4294967295
    9892:	f504 708c 	add.w	r0, r4, #280	; 0x118
    9896:	f00c fdb1 	bl	163fc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    989a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    989e:	b34b      	cbz	r3, 98f4 <send_cmd+0x84>
		BT_ERR("Uncleared pending sent_cmd");
    98a0:	4b4c      	ldr	r3, [pc, #304]	; (99d4 <send_cmd+0x164>)
    98a2:	61fb      	str	r3, [r7, #28]
    98a4:	2302      	movs	r3, #2
    98a6:	713b      	strb	r3, [r7, #4]
    98a8:	2400      	movs	r4, #0
    98aa:	717c      	strb	r4, [r7, #5]
    98ac:	71bc      	strb	r4, [r7, #6]
    98ae:	71fc      	strb	r4, [r7, #7]
    98b0:	687b      	ldr	r3, [r7, #4]
    98b2:	61bb      	str	r3, [r7, #24]
    98b4:	4621      	mov	r1, r4
    98b6:	f364 0100 	bfi	r1, r4, #0, #1
    98ba:	f364 0141 	bfi	r1, r4, #1, #1
    98be:	f364 0182 	bfi	r1, r4, #2, #1
    98c2:	f364 01c5 	bfi	r1, r4, #3, #3
    98c6:	2301      	movs	r3, #1
    98c8:	f363 1188 	bfi	r1, r3, #6, #3
    98cc:	2308      	movs	r3, #8
    98ce:	f363 2152 	bfi	r1, r3, #9, #10
    98d2:	f364 41de 	bfi	r1, r4, #19, #12
    98d6:	f364 71df 	bfi	r1, r4, #31, #1
    98da:	4623      	mov	r3, r4
    98dc:	f107 0218 	add.w	r2, r7, #24
    98e0:	483d      	ldr	r0, [pc, #244]	; (99d8 <send_cmd+0x168>)
    98e2:	f7f9 fef3 	bl	36cc <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
    98e6:	4e3a      	ldr	r6, [pc, #232]	; (99d0 <send_cmd+0x160>)
    98e8:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
    98ec:	f013 f8ce 	bl	1ca8c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    98f0:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    98f4:	4628      	mov	r0, r5
    98f6:	f013 f8ef 	bl	1cad8 <net_buf_ref>
    98fa:	4b35      	ldr	r3, [pc, #212]	; (99d0 <send_cmd+0x160>)
    98fc:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
    9900:	4628      	mov	r0, r5
    9902:	f7ff fdc7 	bl	9494 <bt_send>
	if (err) {
    9906:	4604      	mov	r4, r0
    9908:	2800      	cmp	r0, #0
    990a:	d047      	beq.n	999c <send_cmd+0x12c>
		BT_ERR("Unable to send to driver (err %d)", err);
    990c:	466e      	mov	r6, sp
    990e:	b088      	sub	sp, #32
    9910:	466b      	mov	r3, sp
    9912:	f113 0210 	adds.w	r2, r3, #16
    9916:	d052      	beq.n	99be <send_cmd+0x14e>
    9918:	210c      	movs	r1, #12
    991a:	b11a      	cbz	r2, 9924 <send_cmd+0xb4>
    991c:	2904      	cmp	r1, #4
    991e:	dd01      	ble.n	9924 <send_cmd+0xb4>
    9920:	482e      	ldr	r0, [pc, #184]	; (99dc <send_cmd+0x16c>)
    9922:	6158      	str	r0, [r3, #20]
    9924:	b112      	cbz	r2, 992c <send_cmd+0xbc>
    9926:	2908      	cmp	r1, #8
    9928:	dd00      	ble.n	992c <send_cmd+0xbc>
    992a:	619c      	str	r4, [r3, #24]
    992c:	290b      	cmp	r1, #11
    992e:	dd49      	ble.n	99c4 <send_cmd+0x154>
    9930:	240c      	movs	r4, #12
    9932:	b13a      	cbz	r2, 9944 <send_cmd+0xd4>
    9934:	2103      	movs	r1, #3
    9936:	7139      	strb	r1, [r7, #4]
    9938:	2100      	movs	r1, #0
    993a:	7179      	strb	r1, [r7, #5]
    993c:	71b9      	strb	r1, [r7, #6]
    993e:	71f9      	strb	r1, [r7, #7]
    9940:	6878      	ldr	r0, [r7, #4]
    9942:	6118      	str	r0, [r3, #16]
    9944:	2100      	movs	r1, #0
    9946:	f36f 0100 	bfc	r1, #0, #1
    994a:	f36f 0141 	bfc	r1, #1, #1
    994e:	f36f 0182 	bfc	r1, #2, #1
    9952:	f36f 01c5 	bfc	r1, #3, #3
    9956:	2301      	movs	r3, #1
    9958:	f363 1188 	bfi	r1, r3, #6, #3
    995c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    9960:	f364 2152 	bfi	r1, r4, #9, #10
    9964:	f36f 41de 	bfc	r1, #19, #12
    9968:	f36f 71df 	bfc	r1, #31, #1
    996c:	2300      	movs	r3, #0
    996e:	481a      	ldr	r0, [pc, #104]	; (99d8 <send_cmd+0x168>)
    9970:	f7f9 feac 	bl	36cc <z_impl_z_log_msg_static_create>
    9974:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    9976:	481a      	ldr	r0, [pc, #104]	; (99e0 <send_cmd+0x170>)
    9978:	f00c fd18 	bl	163ac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    997c:	4628      	mov	r0, r5
    997e:	f012 ff46 	bl	1c80e <net_buf_id>
    9982:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9986:	4b17      	ldr	r3, [pc, #92]	; (99e4 <send_cmd+0x174>)
    9988:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    998c:	462a      	mov	r2, r5
    998e:	211f      	movs	r1, #31
    9990:	8840      	ldrh	r0, [r0, #2]
    9992:	f7fe f871 	bl	7a78 <hci_cmd_done>
		net_buf_unref(buf);
    9996:	4628      	mov	r0, r5
    9998:	f013 f878 	bl	1ca8c <net_buf_unref>
}
    999c:	3724      	adds	r7, #36	; 0x24
    999e:	46bd      	mov	sp, r7
    99a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf);
    99a2:	f640 136c 	movw	r3, #2412	; 0x96c
    99a6:	4a10      	ldr	r2, [pc, #64]	; (99e8 <send_cmd+0x178>)
    99a8:	4910      	ldr	r1, [pc, #64]	; (99ec <send_cmd+0x17c>)
    99aa:	4811      	ldr	r0, [pc, #68]	; (99f0 <send_cmd+0x180>)
    99ac:	f00f f8b6 	bl	18b1c <assert_print>
    99b0:	4040      	eors	r0, r0
    99b2:	f380 8811 	msr	BASEPRI, r0
    99b6:	f04f 0003 	mov.w	r0, #3
    99ba:	df02      	svc	2
    99bc:	e764      	b.n	9888 <send_cmd+0x18>
		BT_ERR("Unable to send to driver (err %d)", err);
    99be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    99c2:	e7aa      	b.n	991a <send_cmd+0xaa>
    99c4:	f06f 041b 	mvn.w	r4, #27
    99c8:	e7b3      	b.n	9932 <send_cmd+0xc2>
    99ca:	bf00      	nop
    99cc:	2000013c 	.word	0x2000013c
    99d0:	20000000 	.word	0x20000000
    99d4:	00021d1c 	.word	0x00021d1c
    99d8:	00020548 	.word	0x00020548
    99dc:	00021c60 	.word	0x00021c60
    99e0:	20000118 	.word	0x20000118
    99e4:	20001f6c 	.word	0x20001f6c
    99e8:	00021914 	.word	0x00021914
    99ec:	00022ae0 	.word	0x00022ae0
    99f0:	00021964 	.word	0x00021964

000099f4 <process_events>:
{
    99f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99f8:	b082      	sub	sp, #8
    99fa:	af00      	add	r7, sp, #0
    99fc:	4604      	mov	r4, r0
    99fe:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
    9a00:	e03b      	b.n	9a7a <process_events+0x86>
				send_cmd();
    9a02:	f7ff ff35 	bl	9870 <send_cmd>
    9a06:	e036      	b.n	9a76 <process_events+0x82>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    9a08:	46e8      	mov	r8, sp
    9a0a:	b088      	sub	sp, #32
    9a0c:	4669      	mov	r1, sp
    9a0e:	f111 0210 	adds.w	r2, r1, #16
    9a12:	d044      	beq.n	9a9e <process_events+0xaa>
    9a14:	200c      	movs	r0, #12
    9a16:	b12a      	cbz	r2, 9a24 <process_events+0x30>
    9a18:	2804      	cmp	r0, #4
    9a1a:	dd03      	ble.n	9a24 <process_events+0x30>
    9a1c:	f8df c094 	ldr.w	ip, [pc, #148]	; 9ab4 <process_events+0xc0>
    9a20:	f8c1 c014 	str.w	ip, [r1, #20]
    9a24:	b112      	cbz	r2, 9a2c <process_events+0x38>
    9a26:	2808      	cmp	r0, #8
    9a28:	dd00      	ble.n	9a2c <process_events+0x38>
    9a2a:	618b      	str	r3, [r1, #24]
    9a2c:	280b      	cmp	r0, #11
    9a2e:	dd39      	ble.n	9aa4 <process_events+0xb0>
    9a30:	230c      	movs	r3, #12
    9a32:	b13a      	cbz	r2, 9a44 <process_events+0x50>
    9a34:	2003      	movs	r0, #3
    9a36:	7138      	strb	r0, [r7, #4]
    9a38:	2000      	movs	r0, #0
    9a3a:	7178      	strb	r0, [r7, #5]
    9a3c:	71b8      	strb	r0, [r7, #6]
    9a3e:	71f8      	strb	r0, [r7, #7]
    9a40:	6878      	ldr	r0, [r7, #4]
    9a42:	6108      	str	r0, [r1, #16]
    9a44:	f36f 0600 	bfc	r6, #0, #1
    9a48:	f36f 0641 	bfc	r6, #1, #1
    9a4c:	f36f 0682 	bfc	r6, #2, #1
    9a50:	f36f 06c5 	bfc	r6, #3, #3
    9a54:	2102      	movs	r1, #2
    9a56:	f361 1688 	bfi	r6, r1, #6, #3
    9a5a:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
    9a5e:	f363 2652 	bfi	r6, r3, #9, #10
    9a62:	f36f 46de 	bfc	r6, #19, #12
    9a66:	f36f 76df 	bfc	r6, #31, #1
    9a6a:	2300      	movs	r3, #0
    9a6c:	4631      	mov	r1, r6
    9a6e:	4812      	ldr	r0, [pc, #72]	; (9ab8 <process_events+0xc4>)
    9a70:	f7f9 fe2c 	bl	36cc <z_impl_z_log_msg_static_create>
    9a74:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
    9a76:	3414      	adds	r4, #20
    9a78:	3d01      	subs	r5, #1
    9a7a:	b1b5      	cbz	r5, 9aaa <process_events+0xb6>
		switch (ev->state) {
    9a7c:	68e3      	ldr	r3, [r4, #12]
    9a7e:	f3c3 3345 	ubfx	r3, r3, #13, #6
    9a82:	2b01      	cmp	r3, #1
    9a84:	d9f7      	bls.n	9a76 <process_events+0x82>
    9a86:	2b04      	cmp	r3, #4
    9a88:	d1be      	bne.n	9a08 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
    9a8a:	7b23      	ldrb	r3, [r4, #12]
    9a8c:	2b00      	cmp	r3, #0
    9a8e:	d0b8      	beq.n	9a02 <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    9a90:	2b01      	cmp	r3, #1
    9a92:	d1f0      	bne.n	9a76 <process_events+0x82>
					conn = CONTAINER_OF(ev->fifo,
    9a94:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    9a96:	3838      	subs	r0, #56	; 0x38
    9a98:	f002 fa0c 	bl	beb4 <bt_conn_process_tx>
    9a9c:	e7eb      	b.n	9a76 <process_events+0x82>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    9a9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9aa2:	e7b8      	b.n	9a16 <process_events+0x22>
    9aa4:	f06f 031b 	mvn.w	r3, #27
    9aa8:	e7c3      	b.n	9a32 <process_events+0x3e>
}
    9aaa:	3708      	adds	r7, #8
    9aac:	46bd      	mov	sp, r7
    9aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ab2:	bf00      	nop
    9ab4:	00021d38 	.word	0x00021d38
    9ab8:	00020548 	.word	0x00020548

00009abc <hci_tx_thread>:
{
    9abc:	b538      	push	{r3, r4, r5, lr}
    9abe:	e012      	b.n	9ae6 <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
    9ac0:	f640 13d3 	movw	r3, #2515	; 0x9d3
    9ac4:	4a12      	ldr	r2, [pc, #72]	; (9b10 <hci_tx_thread+0x54>)
    9ac6:	4913      	ldr	r1, [pc, #76]	; (9b14 <hci_tx_thread+0x58>)
    9ac8:	4813      	ldr	r0, [pc, #76]	; (9b18 <hci_tx_thread+0x5c>)
    9aca:	f00f f827 	bl	18b1c <assert_print>
    9ace:	4040      	eors	r0, r0
    9ad0:	f380 8811 	msr	BASEPRI, r0
    9ad4:	f04f 0003 	mov.w	r0, #3
    9ad8:	df02      	svc	2
		process_events(events, ev_count);
    9ada:	4621      	mov	r1, r4
    9adc:	480f      	ldr	r0, [pc, #60]	; (9b1c <hci_tx_thread+0x60>)
    9ade:	f7ff ff89 	bl	99f4 <process_events>
	z_impl_k_yield();
    9ae2:	f00d f99f 	bl	16e24 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    9ae6:	4d0d      	ldr	r5, [pc, #52]	; (9b1c <hci_tx_thread+0x60>)
    9ae8:	68eb      	ldr	r3, [r5, #12]
    9aea:	f36f 3352 	bfc	r3, #13, #6
    9aee:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    9af0:	f105 0014 	add.w	r0, r5, #20
    9af4:	f001 fd5a 	bl	b5ac <bt_conn_prepare_events>
    9af8:	1c44      	adds	r4, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    9afa:	f04f 32ff 	mov.w	r2, #4294967295
    9afe:	f04f 33ff 	mov.w	r3, #4294967295
    9b02:	4621      	mov	r1, r4
    9b04:	4628      	mov	r0, r5
    9b06:	f00d fecb 	bl	178a0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d1d8      	bne.n	9ac0 <hci_tx_thread+0x4>
    9b0e:	e7e4      	b.n	9ada <hci_tx_thread+0x1e>
    9b10:	00021914 	.word	0x00021914
    9b14:	00021a10 	.word	0x00021a10
    9b18:	00021964 	.word	0x00021964
    9b1c:	200002c0 	.word	0x200002c0

00009b20 <hci_event_prio>:
{
    9b20:	b570      	push	{r4, r5, r6, lr}
    9b22:	b082      	sub	sp, #8
    9b24:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    9b26:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    9b2a:	4628      	mov	r0, r5
    9b2c:	f013 f840 	bl	1cbb0 <net_buf_simple_headroom>
    9b30:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    9b34:	89a3      	ldrh	r3, [r4, #12]
    9b36:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9b3a:	2b01      	cmp	r3, #1
    9b3c:	d915      	bls.n	9b6a <hci_event_prio+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    9b3e:	2102      	movs	r1, #2
    9b40:	4628      	mov	r0, r5
    9b42:	f013 f825 	bl	1cb90 <net_buf_simple_pull_mem>
    9b46:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9b48:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    9b4a:	3b05      	subs	r3, #5
    9b4c:	2b15      	cmp	r3, #21
    9b4e:	d81c      	bhi.n	9b8a <hci_event_prio+0x6a>
    9b50:	e8df f003 	tbb	[pc, r3]
    9b54:	1b1b1b19 	.word	0x1b1b1b19
    9b58:	1b1b1b1b 	.word	0x1b1b1b1b
    9b5c:	1b32321b 	.word	0x1b32321b
    9b60:	1b321b1b 	.word	0x1b321b1b
    9b64:	1b1b1b1b 	.word	0x1b1b1b1b
    9b68:	321b      	.short	0x321b
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9b6a:	f640 536f 	movw	r3, #3439	; 0xd6f
    9b6e:	4a1c      	ldr	r2, [pc, #112]	; (9be0 <hci_event_prio+0xc0>)
    9b70:	491c      	ldr	r1, [pc, #112]	; (9be4 <hci_event_prio+0xc4>)
    9b72:	481d      	ldr	r0, [pc, #116]	; (9be8 <hci_event_prio+0xc8>)
    9b74:	f00e ffd2 	bl	18b1c <assert_print>
    9b78:	4040      	eors	r0, r0
    9b7a:	f380 8811 	msr	BASEPRI, r0
    9b7e:	f04f 0003 	mov.w	r0, #3
    9b82:	df02      	svc	2
    9b84:	e7db      	b.n	9b3e <hci_event_prio+0x1e>
    9b86:	2603      	movs	r6, #3
    9b88:	e000      	b.n	9b8c <hci_event_prio+0x6c>
		return BT_HCI_EVT_FLAG_RECV;
    9b8a:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9b8c:	f016 0f01 	tst.w	r6, #1
    9b90:	d014      	beq.n	9bbc <hci_event_prio+0x9c>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9b92:	2305      	movs	r3, #5
    9b94:	4a15      	ldr	r2, [pc, #84]	; (9bec <hci_event_prio+0xcc>)
    9b96:	4621      	mov	r1, r4
    9b98:	7828      	ldrb	r0, [r5, #0]
    9b9a:	f7fe f961 	bl	7e60 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9b9e:	f016 0f02 	tst.w	r6, #2
    9ba2:	d019      	beq.n	9bd8 <hci_event_prio+0xb8>
	buf->data = buf->__buf + state->offset;
    9ba4:	6923      	ldr	r3, [r4, #16]
    9ba6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9baa:	4413      	add	r3, r2
    9bac:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    9bae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9bb2:	81a3      	strh	r3, [r4, #12]
}
    9bb4:	b002      	add	sp, #8
    9bb6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    9bb8:	2601      	movs	r6, #1
    9bba:	e7e7      	b.n	9b8c <hci_event_prio+0x6c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9bbc:	f640 5373 	movw	r3, #3443	; 0xd73
    9bc0:	4a07      	ldr	r2, [pc, #28]	; (9be0 <hci_event_prio+0xc0>)
    9bc2:	490b      	ldr	r1, [pc, #44]	; (9bf0 <hci_event_prio+0xd0>)
    9bc4:	4808      	ldr	r0, [pc, #32]	; (9be8 <hci_event_prio+0xc8>)
    9bc6:	f00e ffa9 	bl	18b1c <assert_print>
    9bca:	4040      	eors	r0, r0
    9bcc:	f380 8811 	msr	BASEPRI, r0
    9bd0:	f04f 0003 	mov.w	r0, #3
    9bd4:	df02      	svc	2
    9bd6:	e7dc      	b.n	9b92 <hci_event_prio+0x72>
		net_buf_unref(buf);
    9bd8:	4620      	mov	r0, r4
    9bda:	f012 ff57 	bl	1ca8c <net_buf_unref>
}
    9bde:	e7e9      	b.n	9bb4 <hci_event_prio+0x94>
    9be0:	00021914 	.word	0x00021914
    9be4:	00021948 	.word	0x00021948
    9be8:	00021964 	.word	0x00021964
    9bec:	00021e5c 	.word	0x00021e5c
    9bf0:	00021d5c 	.word	0x00021d5c

00009bf4 <bt_recv>:
{
    9bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bf6:	b083      	sub	sp, #12
    9bf8:	af00      	add	r7, sp, #0
    9bfa:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9bfc:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9bfe:	2d01      	cmp	r5, #1
    9c00:	d009      	beq.n	9c16 <bt_recv+0x22>
    9c02:	4628      	mov	r0, r5
    9c04:	2d03      	cmp	r5, #3
    9c06:	d12c      	bne.n	9c62 <bt_recv+0x6e>
		rx_queue_put(buf);
    9c08:	4620      	mov	r0, r4
    9c0a:	f7fe f9ad 	bl	7f68 <rx_queue_put>
		return 0;
    9c0e:	2000      	movs	r0, #0
}
    9c10:	370c      	adds	r7, #12
    9c12:	46bd      	mov	sp, r7
    9c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    9c16:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9c18:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
    9c1a:	3b05      	subs	r3, #5
    9c1c:	2b15      	cmp	r3, #21
    9c1e:	d80e      	bhi.n	9c3e <bt_recv+0x4a>
    9c20:	e8df f003 	tbb	[pc, r3]
    9c24:	0d0d0d0b 	.word	0x0d0d0d0b
    9c28:	0d0d0d0d 	.word	0x0d0d0d0d
    9c2c:	0d0e0e0d 	.word	0x0d0e0e0d
    9c30:	0d0e0d0d 	.word	0x0d0e0d0d
    9c34:	0d0d0d0d 	.word	0x0d0d0d0d
    9c38:	0e0d      	.short	0x0e0d
    9c3a:	2503      	movs	r5, #3
    9c3c:	e000      	b.n	9c40 <bt_recv+0x4c>
		return BT_HCI_EVT_FLAG_RECV;
    9c3e:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    9c40:	f015 0f01 	tst.w	r5, #1
    9c44:	d104      	bne.n	9c50 <bt_recv+0x5c>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9c46:	f015 0f02 	tst.w	r5, #2
    9c4a:	d105      	bne.n	9c58 <bt_recv+0x64>
		return 0;
    9c4c:	2000      	movs	r0, #0
    9c4e:	e7df      	b.n	9c10 <bt_recv+0x1c>
			hci_event_prio(buf);
    9c50:	4620      	mov	r0, r4
    9c52:	f7ff ff65 	bl	9b20 <hci_event_prio>
    9c56:	e7f6      	b.n	9c46 <bt_recv+0x52>
			rx_queue_put(buf);
    9c58:	4620      	mov	r0, r4
    9c5a:	f7fe f985 	bl	7f68 <rx_queue_put>
		return 0;
    9c5e:	2000      	movs	r0, #0
    9c60:	e7d6      	b.n	9c10 <bt_recv+0x1c>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9c62:	466e      	mov	r6, sp
    9c64:	b088      	sub	sp, #32
    9c66:	466b      	mov	r3, sp
    9c68:	f113 0210 	adds.w	r2, r3, #16
    9c6c:	d034      	beq.n	9cd8 <bt_recv+0xe4>
    9c6e:	210c      	movs	r1, #12
    9c70:	b11a      	cbz	r2, 9c7a <bt_recv+0x86>
    9c72:	2904      	cmp	r1, #4
    9c74:	dd01      	ble.n	9c7a <bt_recv+0x86>
    9c76:	4d1b      	ldr	r5, [pc, #108]	; (9ce4 <bt_recv+0xf0>)
    9c78:	615d      	str	r5, [r3, #20]
    9c7a:	b112      	cbz	r2, 9c82 <bt_recv+0x8e>
    9c7c:	2908      	cmp	r1, #8
    9c7e:	dd00      	ble.n	9c82 <bt_recv+0x8e>
    9c80:	6198      	str	r0, [r3, #24]
    9c82:	290b      	cmp	r1, #11
    9c84:	dd2b      	ble.n	9cde <bt_recv+0xea>
    9c86:	250c      	movs	r5, #12
    9c88:	b13a      	cbz	r2, 9c9a <bt_recv+0xa6>
    9c8a:	2103      	movs	r1, #3
    9c8c:	7139      	strb	r1, [r7, #4]
    9c8e:	2100      	movs	r1, #0
    9c90:	7179      	strb	r1, [r7, #5]
    9c92:	71b9      	strb	r1, [r7, #6]
    9c94:	71f9      	strb	r1, [r7, #7]
    9c96:	6878      	ldr	r0, [r7, #4]
    9c98:	6118      	str	r0, [r3, #16]
    9c9a:	2100      	movs	r1, #0
    9c9c:	f36f 0100 	bfc	r1, #0, #1
    9ca0:	f36f 0141 	bfc	r1, #1, #1
    9ca4:	f36f 0182 	bfc	r1, #2, #1
    9ca8:	f36f 01c5 	bfc	r1, #3, #3
    9cac:	2301      	movs	r3, #1
    9cae:	f363 1188 	bfi	r1, r3, #6, #3
    9cb2:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    9cb6:	f363 2152 	bfi	r1, r3, #9, #10
    9cba:	f36f 41de 	bfc	r1, #19, #12
    9cbe:	f36f 71df 	bfc	r1, #31, #1
    9cc2:	2300      	movs	r3, #0
    9cc4:	4808      	ldr	r0, [pc, #32]	; (9ce8 <bt_recv+0xf4>)
    9cc6:	f7f9 fd01 	bl	36cc <z_impl_z_log_msg_static_create>
    9cca:	46b5      	mov	sp, r6
		net_buf_unref(buf);
    9ccc:	4620      	mov	r0, r4
    9cce:	f012 fedd 	bl	1ca8c <net_buf_unref>
		return -EINVAL;
    9cd2:	f06f 0015 	mvn.w	r0, #21
    9cd6:	e79b      	b.n	9c10 <bt_recv+0x1c>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9cdc:	e7c8      	b.n	9c70 <bt_recv+0x7c>
    9cde:	f06f 051b 	mvn.w	r5, #27
    9ce2:	e7d1      	b.n	9c88 <bt_recv+0x94>
    9ce4:	00021d78 	.word	0x00021d78
    9ce8:	00020548 	.word	0x00020548

00009cec <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9cec:	4b0a      	ldr	r3, [pc, #40]	; (9d18 <bt_hci_driver_register+0x2c>)
    9cee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    9cf2:	b943      	cbnz	r3, 9d06 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    9cf4:	68c3      	ldr	r3, [r0, #12]
    9cf6:	b14b      	cbz	r3, 9d0c <bt_hci_driver_register+0x20>
    9cf8:	6943      	ldr	r3, [r0, #20]
    9cfa:	b153      	cbz	r3, 9d12 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    9cfc:	4b06      	ldr	r3, [pc, #24]	; (9d18 <bt_hci_driver_register+0x2c>)
    9cfe:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	return 0;
    9d02:	2000      	movs	r0, #0
    9d04:	4770      	bx	lr
		return -EALREADY;
    9d06:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9d0a:	4770      	bx	lr
		return -EINVAL;
    9d0c:	f06f 0015 	mvn.w	r0, #21
    9d10:	4770      	bx	lr
    9d12:	f06f 0015 	mvn.w	r0, #21
}
    9d16:	4770      	bx	lr
    9d18:	20000000 	.word	0x20000000

00009d1c <bt_finalize_init>:
{
    9d1c:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9d1e:	4b06      	ldr	r3, [pc, #24]	; (9d38 <bt_finalize_init+0x1c>)
    9d20:	e8d3 2fef 	ldaex	r2, [r3]
    9d24:	f042 0204 	orr.w	r2, r2, #4
    9d28:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9d2c:	2900      	cmp	r1, #0
    9d2e:	d1f7      	bne.n	9d20 <bt_finalize_init+0x4>
	bt_dev_show_info();
    9d30:	f7fd faa8 	bl	7284 <bt_dev_show_info>
}
    9d34:	bd08      	pop	{r3, pc}
    9d36:	bf00      	nop
    9d38:	200000cc 	.word	0x200000cc

00009d3c <init_work>:
{
    9d3c:	b508      	push	{r3, lr}
	err = bt_init();
    9d3e:	f010 fb87 	bl	1a450 <bt_init>
	if (ready_cb) {
    9d42:	4b02      	ldr	r3, [pc, #8]	; (9d4c <init_work+0x10>)
    9d44:	681b      	ldr	r3, [r3, #0]
    9d46:	b103      	cbz	r3, 9d4a <init_work+0xe>
		ready_cb(err);
    9d48:	4798      	blx	r3
}
    9d4a:	bd08      	pop	{r3, pc}
    9d4c:	20001fe8 	.word	0x20001fe8

00009d50 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    9d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d54:	b090      	sub	sp, #64	; 0x40
    9d56:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
    9d58:	4b63      	ldr	r3, [pc, #396]	; (9ee8 <bt_enable+0x198>)
    9d5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d05a      	beq.n	9e18 <bt_enable+0xc8>
    9d62:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9d64:	4b61      	ldr	r3, [pc, #388]	; (9eec <bt_enable+0x19c>)
    9d66:	e8d3 2fef 	ldaex	r2, [r3]
    9d6a:	f022 0202 	bic.w	r2, r2, #2
    9d6e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    9d72:	2900      	cmp	r1, #0
    9d74:	d1f7      	bne.n	9d66 <bt_enable+0x16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9d76:	e8d3 2fef 	ldaex	r2, [r3]
    9d7a:	f042 0101 	orr.w	r1, r2, #1
    9d7e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    9d82:	2800      	cmp	r0, #0
    9d84:	d1f7      	bne.n	9d76 <bt_enable+0x26>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9d86:	f012 0f01 	tst.w	r2, #1
    9d8a:	f040 80aa 	bne.w	9ee2 <bt_enable+0x192>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    9d8e:	4b58      	ldr	r3, [pc, #352]	; (9ef0 <bt_enable+0x1a0>)
    9d90:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    9d92:	4e55      	ldr	r6, [pc, #340]	; (9ee8 <bt_enable+0x198>)
    9d94:	2201      	movs	r2, #1
    9d96:	4611      	mov	r1, r2
    9d98:	f506 708c 	add.w	r0, r6, #280	; 0x118
    9d9c:	f015 fc86 	bl	1f6ac <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    9da0:	f506 709e 	add.w	r0, r6, #316	; 0x13c
    9da4:	f015 fc20 	bl	1f5e8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9da8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 9ef4 <bt_enable+0x1a4>
    9dac:	2200      	movs	r2, #0
    9dae:	2300      	movs	r3, #0
    9db0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9db4:	2400      	movs	r4, #0
    9db6:	9404      	str	r4, [sp, #16]
    9db8:	f06f 0308 	mvn.w	r3, #8
    9dbc:	9303      	str	r3, [sp, #12]
    9dbe:	9402      	str	r4, [sp, #8]
    9dc0:	9401      	str	r4, [sp, #4]
    9dc2:	9400      	str	r4, [sp, #0]
    9dc4:	4b4c      	ldr	r3, [pc, #304]	; (9ef8 <bt_enable+0x1a8>)
    9dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9dca:	494c      	ldr	r1, [pc, #304]	; (9efc <bt_enable+0x1ac>)
    9dcc:	4640      	mov	r0, r8
    9dce:	f015 fb41 	bl	1f454 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    9dd2:	494b      	ldr	r1, [pc, #300]	; (9f00 <bt_enable+0x1b0>)
    9dd4:	4640      	mov	r0, r8
    9dd6:	f00c f8fb 	bl	15fd0 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_start(&bt_workq, rx_thread_stack,
    9dda:	f8df 8128 	ldr.w	r8, [pc, #296]	; 9f04 <bt_enable+0x1b4>
    9dde:	9400      	str	r4, [sp, #0]
    9de0:	f06f 0307 	mvn.w	r3, #7
    9de4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    9de8:	4947      	ldr	r1, [pc, #284]	; (9f08 <bt_enable+0x1b8>)
    9dea:	4640      	mov	r0, r8
    9dec:	f00c fcae 	bl	1674c <k_work_queue_start>
    9df0:	4946      	ldr	r1, [pc, #280]	; (9f0c <bt_enable+0x1bc>)
    9df2:	4640      	mov	r0, r8
    9df4:	f00c f8ec 	bl	15fd0 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    9df8:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
    9dfc:	68db      	ldr	r3, [r3, #12]
    9dfe:	4798      	blx	r3
	if (err) {
    9e00:	4604      	mov	r4, r0
    9e02:	bb70      	cbnz	r0, 9e62 <bt_enable+0x112>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    9e04:	2d00      	cmp	r5, #0
    9e06:	d068      	beq.n	9eda <bt_enable+0x18a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
    9e08:	4841      	ldr	r0, [pc, #260]	; (9f10 <bt_enable+0x1c0>)
    9e0a:	f00c fc97 	bl	1673c <k_work_submit>
	return 0;
}
    9e0e:	4620      	mov	r0, r4
    9e10:	3720      	adds	r7, #32
    9e12:	46bd      	mov	sp, r7
    9e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("No HCI driver registered");
    9e18:	4b3e      	ldr	r3, [pc, #248]	; (9f14 <bt_enable+0x1c4>)
    9e1a:	61fb      	str	r3, [r7, #28]
    9e1c:	2302      	movs	r3, #2
    9e1e:	713b      	strb	r3, [r7, #4]
    9e20:	2300      	movs	r3, #0
    9e22:	717b      	strb	r3, [r7, #5]
    9e24:	71bb      	strb	r3, [r7, #6]
    9e26:	71fb      	strb	r3, [r7, #7]
    9e28:	687a      	ldr	r2, [r7, #4]
    9e2a:	61ba      	str	r2, [r7, #24]
    9e2c:	4619      	mov	r1, r3
    9e2e:	f363 0100 	bfi	r1, r3, #0, #1
    9e32:	f363 0141 	bfi	r1, r3, #1, #1
    9e36:	f363 0182 	bfi	r1, r3, #2, #1
    9e3a:	f363 01c5 	bfi	r1, r3, #3, #3
    9e3e:	2201      	movs	r2, #1
    9e40:	f362 1188 	bfi	r1, r2, #6, #3
    9e44:	2208      	movs	r2, #8
    9e46:	f362 2152 	bfi	r1, r2, #9, #10
    9e4a:	f363 41de 	bfi	r1, r3, #19, #12
    9e4e:	f363 71df 	bfi	r1, r3, #31, #1
    9e52:	f107 0218 	add.w	r2, r7, #24
    9e56:	4830      	ldr	r0, [pc, #192]	; (9f18 <bt_enable+0x1c8>)
    9e58:	f7f9 fc38 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENODEV;
    9e5c:	f06f 0412 	mvn.w	r4, #18
    9e60:	e7d5      	b.n	9e0e <bt_enable+0xbe>
		BT_ERR("HCI driver open failed (%d)", err);
    9e62:	466e      	mov	r6, sp
    9e64:	b088      	sub	sp, #32
    9e66:	4633      	mov	r3, r6
    9e68:	f116 0210 	adds.w	r2, r6, #16
    9e6c:	d02f      	beq.n	9ece <bt_enable+0x17e>
    9e6e:	210c      	movs	r1, #12
    9e70:	b11a      	cbz	r2, 9e7a <bt_enable+0x12a>
    9e72:	2904      	cmp	r1, #4
    9e74:	dd01      	ble.n	9e7a <bt_enable+0x12a>
    9e76:	4829      	ldr	r0, [pc, #164]	; (9f1c <bt_enable+0x1cc>)
    9e78:	6158      	str	r0, [r3, #20]
    9e7a:	b112      	cbz	r2, 9e82 <bt_enable+0x132>
    9e7c:	2908      	cmp	r1, #8
    9e7e:	dd00      	ble.n	9e82 <bt_enable+0x132>
    9e80:	619c      	str	r4, [r3, #24]
    9e82:	290b      	cmp	r1, #11
    9e84:	dd26      	ble.n	9ed4 <bt_enable+0x184>
    9e86:	250c      	movs	r5, #12
    9e88:	b13a      	cbz	r2, 9e9a <bt_enable+0x14a>
    9e8a:	2103      	movs	r1, #3
    9e8c:	7139      	strb	r1, [r7, #4]
    9e8e:	2100      	movs	r1, #0
    9e90:	7179      	strb	r1, [r7, #5]
    9e92:	71b9      	strb	r1, [r7, #6]
    9e94:	71f9      	strb	r1, [r7, #7]
    9e96:	6878      	ldr	r0, [r7, #4]
    9e98:	6118      	str	r0, [r3, #16]
    9e9a:	2100      	movs	r1, #0
    9e9c:	f36f 0100 	bfc	r1, #0, #1
    9ea0:	f36f 0141 	bfc	r1, #1, #1
    9ea4:	f36f 0182 	bfc	r1, #2, #1
    9ea8:	f36f 01c5 	bfc	r1, #3, #3
    9eac:	2301      	movs	r3, #1
    9eae:	f363 1188 	bfi	r1, r3, #6, #3
    9eb2:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    9eb6:	f363 2152 	bfi	r1, r3, #9, #10
    9eba:	f36f 41de 	bfc	r1, #19, #12
    9ebe:	f36f 71df 	bfc	r1, #31, #1
    9ec2:	2300      	movs	r3, #0
    9ec4:	4814      	ldr	r0, [pc, #80]	; (9f18 <bt_enable+0x1c8>)
    9ec6:	f7f9 fc01 	bl	36cc <z_impl_z_log_msg_static_create>
    9eca:	46b5      	mov	sp, r6
		return err;
    9ecc:	e79f      	b.n	9e0e <bt_enable+0xbe>
		BT_ERR("HCI driver open failed (%d)", err);
    9ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    9ed2:	e7cd      	b.n	9e70 <bt_enable+0x120>
    9ed4:	f06f 051b 	mvn.w	r5, #27
    9ed8:	e7d6      	b.n	9e88 <bt_enable+0x138>
		return bt_init();
    9eda:	f010 fab9 	bl	1a450 <bt_init>
    9ede:	4604      	mov	r4, r0
    9ee0:	e795      	b.n	9e0e <bt_enable+0xbe>
		return -EALREADY;
    9ee2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9ee6:	e792      	b.n	9e0e <bt_enable+0xbe>
    9ee8:	20000000 	.word	0x20000000
    9eec:	200000cc 	.word	0x200000cc
    9ef0:	20001fe8 	.word	0x20001fe8
    9ef4:	200012c0 	.word	0x200012c0
    9ef8:	00009abd 	.word	0x00009abd
    9efc:	20003c48 	.word	0x20003c48
    9f00:	00021da8 	.word	0x00021da8
    9f04:	200011e8 	.word	0x200011e8
    9f08:	20003798 	.word	0x20003798
    9f0c:	00021db0 	.word	0x00021db0
    9f10:	200000bc 	.word	0x200000bc
    9f14:	00021d8c 	.word	0x00021d8c
    9f18:	00020548 	.word	0x00020548
    9f1c:	00021db8 	.word	0x00021db8

00009f20 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    9f20:	4800      	ldr	r0, [pc, #0]	; (9f24 <bt_get_name+0x4>)
    9f22:	4770      	bx	lr
    9f24:	000208a8 	.word	0x000208a8

00009f28 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    9f28:	b570      	push	{r4, r5, r6, lr}
    9f2a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    9f2c:	2400      	movs	r4, #0
    9f2e:	e001      	b.n	9f34 <id_find+0xc>
    9f30:	3401      	adds	r4, #1
    9f32:	b2e4      	uxtb	r4, r4
    9f34:	4b09      	ldr	r3, [pc, #36]	; (9f5c <id_find+0x34>)
    9f36:	79db      	ldrb	r3, [r3, #7]
    9f38:	42a3      	cmp	r3, r4
    9f3a:	d90b      	bls.n	9f54 <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    9f3c:	4626      	mov	r6, r4
    9f3e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    9f42:	2207      	movs	r2, #7
    9f44:	4905      	ldr	r1, [pc, #20]	; (9f5c <id_find+0x34>)
    9f46:	4419      	add	r1, r3
    9f48:	4628      	mov	r0, r5
    9f4a:	f010 f86c 	bl	1a026 <memcmp>
    9f4e:	2800      	cmp	r0, #0
    9f50:	d1ee      	bne.n	9f30 <id_find+0x8>
    9f52:	e001      	b.n	9f58 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
    9f54:	f06f 0601 	mvn.w	r6, #1
}
    9f58:	4630      	mov	r0, r6
    9f5a:	bd70      	pop	{r4, r5, r6, pc}
    9f5c:	20000000 	.word	0x20000000

00009f60 <set_random_address>:
{
    9f60:	b570      	push	{r4, r5, r6, lr}
    9f62:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    9f64:	2206      	movs	r2, #6
    9f66:	4914      	ldr	r1, [pc, #80]	; (9fb8 <set_random_address+0x58>)
    9f68:	f010 f85d 	bl	1a026 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9f6c:	4605      	mov	r5, r0
    9f6e:	b908      	cbnz	r0, 9f74 <set_random_address+0x14>
}
    9f70:	4628      	mov	r0, r5
    9f72:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9f74:	2106      	movs	r1, #6
    9f76:	f242 0005 	movw	r0, #8197	; 0x2005
    9f7a:	f7fe faad 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    9f7e:	4605      	mov	r5, r0
    9f80:	b1b8      	cbz	r0, 9fb2 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9f82:	2206      	movs	r2, #6
    9f84:	4621      	mov	r1, r4
    9f86:	3008      	adds	r0, #8
    9f88:	f012 fdd0 	bl	1cb2c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9f8c:	2200      	movs	r2, #0
    9f8e:	4629      	mov	r1, r5
    9f90:	f242 0005 	movw	r0, #8197	; 0x2005
    9f94:	f7fe fade 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    9f98:	4605      	mov	r5, r0
    9f9a:	2800      	cmp	r0, #0
    9f9c:	d1e8      	bne.n	9f70 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    9f9e:	4e06      	ldr	r6, [pc, #24]	; (9fb8 <set_random_address+0x58>)
    9fa0:	2206      	movs	r2, #6
    9fa2:	4621      	mov	r1, r4
    9fa4:	4630      	mov	r0, r6
    9fa6:	f010 f850 	bl	1a04a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9faa:	2301      	movs	r3, #1
    9fac:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
    9fb0:	e7de      	b.n	9f70 <set_random_address+0x10>
		return -ENOBUFS;
    9fb2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    9fb6:	e7db      	b.n	9f70 <set_random_address+0x10>
    9fb8:	20000061 	.word	0x20000061

00009fbc <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
    9fbc:	b530      	push	{r4, r5, lr}
    9fbe:	b085      	sub	sp, #20
    9fc0:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9fc2:	460d      	mov	r5, r1
    9fc4:	b149      	cbz	r1, 9fda <id_create+0x1e>
    9fc6:	2300      	movs	r3, #0
    9fc8:	9302      	str	r3, [sp, #8]
    9fca:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
    9fce:	2207      	movs	r2, #7
    9fd0:	a902      	add	r1, sp, #8
    9fd2:	4628      	mov	r0, r5
    9fd4:	f010 f827 	bl	1a026 <memcmp>
    9fd8:	b9e0      	cbnz	r0, a014 <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
    9fda:	4668      	mov	r0, sp
    9fdc:	f010 f8ea 	bl	1a1b4 <bt_addr_le_create_static>
			if (err) {
    9fe0:	4603      	mov	r3, r0
    9fe2:	b9a0      	cbnz	r0, a00e <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
    9fe4:	4668      	mov	r0, sp
    9fe6:	f7ff ff9f 	bl	9f28 <id_find>
    9fea:	2800      	cmp	r0, #0
    9fec:	daf5      	bge.n	9fda <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9fee:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9ff2:	4b0d      	ldr	r3, [pc, #52]	; (a028 <id_create+0x6c>)
    9ff4:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
    9ff6:	2207      	movs	r2, #7
    9ff8:	4669      	mov	r1, sp
    9ffa:	4620      	mov	r0, r4
    9ffc:	f010 f825 	bl	1a04a <memcpy>

		if (addr) {
    a000:	b125      	cbz	r5, a00c <id_create+0x50>
    a002:	2207      	movs	r2, #7
    a004:	4621      	mov	r1, r4
    a006:	4628      	mov	r0, r5
    a008:	f010 f81f 	bl	1a04a <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    a00c:	2300      	movs	r3, #0
}
    a00e:	4618      	mov	r0, r3
    a010:	b005      	add	sp, #20
    a012:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    a014:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    a018:	2207      	movs	r2, #7
    a01a:	4629      	mov	r1, r5
    a01c:	4802      	ldr	r0, [pc, #8]	; (a028 <id_create+0x6c>)
    a01e:	4420      	add	r0, r4
    a020:	f010 f813 	bl	1a04a <memcpy>
}
    a024:	e7f2      	b.n	a00c <id_create+0x50>
    a026:	bf00      	nop
    a028:	20000000 	.word	0x20000000

0000a02c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    a02c:	b570      	push	{r4, r5, r6, lr}
    a02e:	b08e      	sub	sp, #56	; 0x38
    a030:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a032:	4605      	mov	r5, r0
    a034:	2800      	cmp	r0, #0
    a036:	d03d      	beq.n	a0b4 <bt_id_create+0x88>
    a038:	2300      	movs	r3, #0
    a03a:	9304      	str	r3, [sp, #16]
    a03c:	f8cd 3013 	str.w	r3, [sp, #19]
	return memcmp(a, b, sizeof(*a));
    a040:	2207      	movs	r2, #7
    a042:	a904      	add	r1, sp, #16
    a044:	f00f ffef 	bl	1a026 <memcmp>
    a048:	b3a0      	cbz	r0, a0b4 <bt_id_create+0x88>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a04a:	782b      	ldrb	r3, [r5, #0]
    a04c:	2b01      	cmp	r3, #1
    a04e:	d104      	bne.n	a05a <bt_id_create+0x2e>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
    a050:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a056:	2bc0      	cmp	r3, #192	; 0xc0
    a058:	d027      	beq.n	a0aa <bt_id_create+0x7e>
			BT_ERR("Only static random identity address supported");
    a05a:	4b30      	ldr	r3, [pc, #192]	; (a11c <bt_id_create+0xf0>)
    a05c:	930d      	str	r3, [sp, #52]	; 0x34
    a05e:	2302      	movs	r3, #2
    a060:	f88d 3000 	strb.w	r3, [sp]
    a064:	2300      	movs	r3, #0
    a066:	f88d 3001 	strb.w	r3, [sp, #1]
    a06a:	f88d 3002 	strb.w	r3, [sp, #2]
    a06e:	f88d 3003 	strb.w	r3, [sp, #3]
    a072:	9a00      	ldr	r2, [sp, #0]
    a074:	920c      	str	r2, [sp, #48]	; 0x30
    a076:	4619      	mov	r1, r3
    a078:	f363 0100 	bfi	r1, r3, #0, #1
    a07c:	f363 0141 	bfi	r1, r3, #1, #1
    a080:	f363 0182 	bfi	r1, r3, #2, #1
    a084:	f363 01c5 	bfi	r1, r3, #3, #3
    a088:	2201      	movs	r2, #1
    a08a:	f362 1188 	bfi	r1, r2, #6, #3
    a08e:	2208      	movs	r2, #8
    a090:	f362 2152 	bfi	r1, r2, #9, #10
    a094:	f363 41de 	bfi	r1, r3, #19, #12
    a098:	f363 71df 	bfi	r1, r3, #31, #1
    a09c:	aa0c      	add	r2, sp, #48	; 0x30
    a09e:	4820      	ldr	r0, [pc, #128]	; (a120 <bt_id_create+0xf4>)
    a0a0:	f7f9 fb14 	bl	36cc <z_impl_z_log_msg_static_create>
			return -EINVAL;
    a0a4:	f06f 0015 	mvn.w	r0, #21
    a0a8:	e029      	b.n	a0fe <bt_id_create+0xd2>
		}

		if (id_find(addr) >= 0) {
    a0aa:	4628      	mov	r0, r5
    a0ac:	f7ff ff3c 	bl	9f28 <id_find>
    a0b0:	2800      	cmp	r0, #0
    a0b2:	da26      	bge.n	a102 <bt_id_create+0xd6>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    a0b4:	bb5c      	cbnz	r4, a10e <bt_id_create+0xe2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    a0b6:	4b1b      	ldr	r3, [pc, #108]	; (a124 <bt_id_create+0xf8>)
    a0b8:	79db      	ldrb	r3, [r3, #7]
    a0ba:	2b01      	cmp	r3, #1
    a0bc:	d02a      	beq.n	a114 <bt_id_create+0xe8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0be:	4b1a      	ldr	r3, [pc, #104]	; (a128 <bt_id_create+0xfc>)
    a0c0:	e8d3 3faf 	lda	r3, [r3]
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a0c4:	f013 0f01 	tst.w	r3, #1
    a0c8:	d10e      	bne.n	a0e8 <bt_id_create+0xbc>
		uint8_t zero_irk[16] = { 0 };
    a0ca:	2300      	movs	r3, #0
    a0cc:	9300      	str	r3, [sp, #0]
    a0ce:	9301      	str	r3, [sp, #4]
    a0d0:	9302      	str	r3, [sp, #8]
    a0d2:	9303      	str	r3, [sp, #12]

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    a0d4:	b1c5      	cbz	r5, a108 <bt_id_create+0xdc>
    a0d6:	9306      	str	r3, [sp, #24]
    a0d8:	f8cd 301b 	str.w	r3, [sp, #27]
    a0dc:	2207      	movs	r2, #7
    a0de:	a906      	add	r1, sp, #24
    a0e0:	4628      	mov	r0, r5
    a0e2:	f00f ffa0 	bl	1a026 <memcmp>
    a0e6:	b178      	cbz	r0, a108 <bt_id_create+0xdc>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
    a0e8:	4b0e      	ldr	r3, [pc, #56]	; (a124 <bt_id_create+0xf8>)
    a0ea:	79de      	ldrb	r6, [r3, #7]
    a0ec:	1c72      	adds	r2, r6, #1
    a0ee:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
    a0f0:	4622      	mov	r2, r4
    a0f2:	4629      	mov	r1, r5
    a0f4:	4630      	mov	r0, r6
    a0f6:	f7ff ff61 	bl	9fbc <id_create>
	if (err) {
    a0fa:	b900      	cbnz	r0, a0fe <bt_id_create+0xd2>
		return err;
	}

	return new_id;
    a0fc:	4630      	mov	r0, r6
}
    a0fe:	b00e      	add	sp, #56	; 0x38
    a100:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
    a102:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a106:	e7fa      	b.n	a0fe <bt_id_create+0xd2>
			return -EINVAL;
    a108:	f06f 0015 	mvn.w	r0, #21
    a10c:	e7f7      	b.n	a0fe <bt_id_create+0xd2>
		return -EINVAL;
    a10e:	f06f 0015 	mvn.w	r0, #21
    a112:	e7f4      	b.n	a0fe <bt_id_create+0xd2>
		return -ENOMEM;
    a114:	f06f 000b 	mvn.w	r0, #11
    a118:	e7f1      	b.n	a0fe <bt_id_create+0xd2>
    a11a:	bf00      	nop
    a11c:	00021e94 	.word	0x00021e94
    a120:	00020558 	.word	0x00020558
    a124:	20000000 	.word	0x20000000
    a128:	200000cc 	.word	0x200000cc

0000a12c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    a12c:	b530      	push	{r4, r5, lr}
    a12e:	b08d      	sub	sp, #52	; 0x34
    a130:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    a132:	aa01      	add	r2, sp, #4
    a134:	2100      	movs	r1, #0
    a136:	f241 0009 	movw	r0, #4105	; 0x1009
    a13a:	f7fe fa0b 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    a13e:	b9f0      	cbnz	r0, a17e <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    a140:	9b01      	ldr	r3, [sp, #4]
    a142:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a144:	3401      	adds	r4, #1
    a146:	2300      	movs	r3, #0
    a148:	9302      	str	r3, [sp, #8]
    a14a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    a14e:	2206      	movs	r2, #6
    a150:	a902      	add	r1, sp, #8
    a152:	4620      	mov	r0, r4
    a154:	f00f ff67 	bl	1a026 <memcmp>
    a158:	b158      	cbz	r0, a172 <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a15a:	4b22      	ldr	r3, [pc, #136]	; (a1e4 <bt_id_read_public_addr+0xb8>)
    a15c:	e893 0003 	ldmia.w	r3, {r0, r1}
    a160:	9004      	str	r0, [sp, #16]
    a162:	f8ad 1014 	strh.w	r1, [sp, #20]
    a166:	2206      	movs	r2, #6
    a168:	a904      	add	r1, sp, #16
    a16a:	4620      	mov	r0, r4
    a16c:	f00f ff5b 	bl	1a026 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a170:	bb60      	cbnz	r0, a1cc <bt_id_read_public_addr+0xa0>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    a172:	9801      	ldr	r0, [sp, #4]
    a174:	f012 fc8a 	bl	1ca8c <net_buf_unref>
		return 0U;
    a178:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    a17a:	b00d      	add	sp, #52	; 0x34
    a17c:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Failed to read public address");
    a17e:	4b1a      	ldr	r3, [pc, #104]	; (a1e8 <bt_id_read_public_addr+0xbc>)
    a180:	930b      	str	r3, [sp, #44]	; 0x2c
    a182:	2302      	movs	r3, #2
    a184:	f88d 3000 	strb.w	r3, [sp]
    a188:	2400      	movs	r4, #0
    a18a:	f88d 4001 	strb.w	r4, [sp, #1]
    a18e:	f88d 4002 	strb.w	r4, [sp, #2]
    a192:	f88d 4003 	strb.w	r4, [sp, #3]
    a196:	9a00      	ldr	r2, [sp, #0]
    a198:	920a      	str	r2, [sp, #40]	; 0x28
    a19a:	4621      	mov	r1, r4
    a19c:	f364 0100 	bfi	r1, r4, #0, #1
    a1a0:	f364 0141 	bfi	r1, r4, #1, #1
    a1a4:	f364 0182 	bfi	r1, r4, #2, #1
    a1a8:	f364 01c5 	bfi	r1, r4, #3, #3
    a1ac:	f363 1188 	bfi	r1, r3, #6, #3
    a1b0:	2308      	movs	r3, #8
    a1b2:	f363 2152 	bfi	r1, r3, #9, #10
    a1b6:	f364 41de 	bfi	r1, r4, #19, #12
    a1ba:	f364 71df 	bfi	r1, r4, #31, #1
    a1be:	4623      	mov	r3, r4
    a1c0:	aa0a      	add	r2, sp, #40	; 0x28
    a1c2:	480a      	ldr	r0, [pc, #40]	; (a1ec <bt_id_read_public_addr+0xc0>)
    a1c4:	f7f9 fa82 	bl	36cc <z_impl_z_log_msg_static_create>
		return 0U;
    a1c8:	4620      	mov	r0, r4
    a1ca:	e7d6      	b.n	a17a <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
    a1cc:	2206      	movs	r2, #6
    a1ce:	4621      	mov	r1, r4
    a1d0:	1c68      	adds	r0, r5, #1
    a1d2:	f00f ff3a 	bl	1a04a <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
    a1d6:	2300      	movs	r3, #0
    a1d8:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
    a1da:	9801      	ldr	r0, [sp, #4]
    a1dc:	f012 fc56 	bl	1ca8c <net_buf_unref>
	return 1U;
    a1e0:	2001      	movs	r0, #1
    a1e2:	e7ca      	b.n	a17a <bt_id_read_public_addr+0x4e>
    a1e4:	00020720 	.word	0x00020720
    a1e8:	00021ec4 	.word	0x00021ec4
    a1ec:	00020558 	.word	0x00020558

0000a1f0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    a1f0:	b500      	push	{lr}
    a1f2:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    a1f4:	4668      	mov	r0, sp
    a1f6:	f7ff ff99 	bl	a12c <bt_id_read_public_addr>
    a1fa:	4b06      	ldr	r3, [pc, #24]	; (a214 <bt_setup_public_id_addr+0x24>)
    a1fc:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    a1fe:	b918      	cbnz	r0, a208 <bt_setup_public_id_addr+0x18>
		return 0;
    a200:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
    a202:	b003      	add	sp, #12
    a204:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
    a208:	2200      	movs	r2, #0
    a20a:	4669      	mov	r1, sp
    a20c:	4610      	mov	r0, r2
    a20e:	f7ff fed5 	bl	9fbc <id_create>
    a212:	e7f6      	b.n	a202 <bt_setup_public_id_addr+0x12>
    a214:	20000000 	.word	0x20000000

0000a218 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    a218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a21c:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a21e:	4b4c      	ldr	r3, [pc, #304]	; (a350 <bt_read_static_addr+0x138>)
    a220:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
    a224:	f015 0501 	ands.w	r5, r5, #1
    a228:	d010      	beq.n	a24c <bt_read_static_addr+0x34>
    a22a:	4607      	mov	r7, r0
    a22c:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a22e:	aa01      	add	r2, sp, #4
    a230:	2100      	movs	r1, #0
    a232:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a236:	f7fe f98d 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    a23a:	4604      	mov	r4, r0
    a23c:	bb58      	cbnz	r0, a296 <bt_read_static_addr+0x7e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    a23e:	9b01      	ldr	r3, [sp, #4]
    a240:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a242:	7875      	ldrb	r5, [r6, #1]
    a244:	4545      	cmp	r5, r8
    a246:	bf28      	it	cs
    a248:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
    a24a:	e051      	b.n	a2f0 <bt_read_static_addr+0xd8>
		BT_WARN("Read Static Addresses command not available");
    a24c:	4b41      	ldr	r3, [pc, #260]	; (a354 <bt_read_static_addr+0x13c>)
    a24e:	9313      	str	r3, [sp, #76]	; 0x4c
    a250:	2202      	movs	r2, #2
    a252:	f88d 2000 	strb.w	r2, [sp]
    a256:	2300      	movs	r3, #0
    a258:	f88d 3001 	strb.w	r3, [sp, #1]
    a25c:	f88d 3002 	strb.w	r3, [sp, #2]
    a260:	f88d 3003 	strb.w	r3, [sp, #3]
    a264:	9900      	ldr	r1, [sp, #0]
    a266:	9112      	str	r1, [sp, #72]	; 0x48
    a268:	4619      	mov	r1, r3
    a26a:	f363 0100 	bfi	r1, r3, #0, #1
    a26e:	f363 0141 	bfi	r1, r3, #1, #1
    a272:	f363 0182 	bfi	r1, r3, #2, #1
    a276:	f363 01c5 	bfi	r1, r3, #3, #3
    a27a:	f362 1188 	bfi	r1, r2, #6, #3
    a27e:	2208      	movs	r2, #8
    a280:	f362 2152 	bfi	r1, r2, #9, #10
    a284:	f363 41de 	bfi	r1, r3, #19, #12
    a288:	f363 71df 	bfi	r1, r3, #31, #1
    a28c:	aa12      	add	r2, sp, #72	; 0x48
    a28e:	4832      	ldr	r0, [pc, #200]	; (a358 <bt_read_static_addr+0x140>)
    a290:	f7f9 fa1c 	bl	36cc <z_impl_z_log_msg_static_create>
		return 0;
    a294:	e032      	b.n	a2fc <bt_read_static_addr+0xe4>
		BT_WARN("Failed to read static addresses");
    a296:	4b31      	ldr	r3, [pc, #196]	; (a35c <bt_read_static_addr+0x144>)
    a298:	930d      	str	r3, [sp, #52]	; 0x34
    a29a:	2302      	movs	r3, #2
    a29c:	f88d 3000 	strb.w	r3, [sp]
    a2a0:	2500      	movs	r5, #0
    a2a2:	f88d 5001 	strb.w	r5, [sp, #1]
    a2a6:	f88d 5002 	strb.w	r5, [sp, #2]
    a2aa:	f88d 5003 	strb.w	r5, [sp, #3]
    a2ae:	9a00      	ldr	r2, [sp, #0]
    a2b0:	920c      	str	r2, [sp, #48]	; 0x30
    a2b2:	4629      	mov	r1, r5
    a2b4:	f365 0100 	bfi	r1, r5, #0, #1
    a2b8:	f365 0141 	bfi	r1, r5, #1, #1
    a2bc:	f365 0182 	bfi	r1, r5, #2, #1
    a2c0:	f365 01c5 	bfi	r1, r5, #3, #3
    a2c4:	f363 1188 	bfi	r1, r3, #6, #3
    a2c8:	2308      	movs	r3, #8
    a2ca:	f363 2152 	bfi	r1, r3, #9, #10
    a2ce:	f365 41de 	bfi	r1, r5, #19, #12
    a2d2:	f365 71df 	bfi	r1, r5, #31, #1
    a2d6:	462b      	mov	r3, r5
    a2d8:	aa0c      	add	r2, sp, #48	; 0x30
    a2da:	481f      	ldr	r0, [pc, #124]	; (a358 <bt_read_static_addr+0x140>)
    a2dc:	f7f9 f9f6 	bl	36cc <z_impl_z_log_msg_static_create>
		return 0;
    a2e0:	e00c      	b.n	a2fc <bt_read_static_addr+0xe4>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a2e2:	2216      	movs	r2, #22
    a2e4:	1cb1      	adds	r1, r6, #2
    a2e6:	fb02 7004 	mla	r0, r2, r4, r7
    a2ea:	f00f feae 	bl	1a04a <memcpy>
	for (i = 0; i < cnt; i++) {
    a2ee:	3401      	adds	r4, #1
    a2f0:	42a5      	cmp	r5, r4
    a2f2:	dcf6      	bgt.n	a2e2 <bt_read_static_addr+0xca>
	}

	net_buf_unref(rsp);
    a2f4:	9801      	ldr	r0, [sp, #4]
    a2f6:	f012 fbc9 	bl	1ca8c <net_buf_unref>
	if (!cnt) {
    a2fa:	b11d      	cbz	r5, a304 <bt_read_static_addr+0xec>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    a2fc:	4628      	mov	r0, r5
    a2fe:	b014      	add	sp, #80	; 0x50
    a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No static addresses stored in controller");
    a304:	4b16      	ldr	r3, [pc, #88]	; (a360 <bt_read_static_addr+0x148>)
    a306:	9307      	str	r3, [sp, #28]
    a308:	2202      	movs	r2, #2
    a30a:	f88d 2000 	strb.w	r2, [sp]
    a30e:	2300      	movs	r3, #0
    a310:	f88d 3001 	strb.w	r3, [sp, #1]
    a314:	f88d 3002 	strb.w	r3, [sp, #2]
    a318:	f88d 3003 	strb.w	r3, [sp, #3]
    a31c:	9900      	ldr	r1, [sp, #0]
    a31e:	9106      	str	r1, [sp, #24]
    a320:	4619      	mov	r1, r3
    a322:	f363 0100 	bfi	r1, r3, #0, #1
    a326:	f363 0141 	bfi	r1, r3, #1, #1
    a32a:	f363 0182 	bfi	r1, r3, #2, #1
    a32e:	f363 01c5 	bfi	r1, r3, #3, #3
    a332:	f362 1188 	bfi	r1, r2, #6, #3
    a336:	2208      	movs	r2, #8
    a338:	f362 2152 	bfi	r1, r2, #9, #10
    a33c:	f363 41de 	bfi	r1, r3, #19, #12
    a340:	f363 71df 	bfi	r1, r3, #31, #1
    a344:	aa06      	add	r2, sp, #24
    a346:	4804      	ldr	r0, [pc, #16]	; (a358 <bt_read_static_addr+0x140>)
    a348:	f7f9 f9c0 	bl	36cc <z_impl_z_log_msg_static_create>
    a34c:	e7d6      	b.n	a2fc <bt_read_static_addr+0xe4>
    a34e:	bf00      	nop
    a350:	20000000 	.word	0x20000000
    a354:	00021ee4 	.word	0x00021ee4
    a358:	00020558 	.word	0x00020558
    a35c:	00021f10 	.word	0x00021f10
    a360:	00021f30 	.word	0x00021f30

0000a364 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    a364:	b510      	push	{r4, lr}
    a366:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    a368:	4b17      	ldr	r3, [pc, #92]	; (a3c8 <bt_setup_random_id_addr+0x64>)
    a36a:	79dc      	ldrb	r4, [r3, #7]
    a36c:	b934      	cbnz	r4, a37c <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a36e:	2101      	movs	r1, #1
    a370:	a802      	add	r0, sp, #8
    a372:	f7ff ff51 	bl	a218 <bt_read_static_addr>
    a376:	4b14      	ldr	r3, [pc, #80]	; (a3c8 <bt_setup_random_id_addr+0x64>)
    a378:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
    a37a:	b948      	cbnz	r0, a390 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    a37c:	2100      	movs	r1, #0
    a37e:	4608      	mov	r0, r1
    a380:	f7ff fe54 	bl	a02c <bt_id_create>
    a384:	4603      	mov	r3, r0
}
    a386:	4618      	mov	r0, r3
    a388:	b008      	add	sp, #32
    a38a:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a38c:	3401      	adds	r4, #1
    a38e:	b2e4      	uxtb	r4, r4
    a390:	4b0d      	ldr	r3, [pc, #52]	; (a3c8 <bt_setup_random_id_addr+0x64>)
    a392:	79db      	ldrb	r3, [r3, #7]
    a394:	42a3      	cmp	r3, r4
    a396:	d914      	bls.n	a3c2 <bt_setup_random_id_addr+0x5e>
    a398:	2206      	movs	r2, #6
    a39a:	2116      	movs	r1, #22
    a39c:	ab02      	add	r3, sp, #8
    a39e:	fb01 3104 	mla	r1, r1, r4, r3
    a3a2:	f10d 0001 	add.w	r0, sp, #1
    a3a6:	f00f fe50 	bl	1a04a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    a3aa:	2301      	movs	r3, #1
    a3ac:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    a3b0:	2200      	movs	r2, #0
    a3b2:	4669      	mov	r1, sp
    a3b4:	4620      	mov	r0, r4
    a3b6:	f7ff fe01 	bl	9fbc <id_create>
				if (err) {
    a3ba:	4603      	mov	r3, r0
    a3bc:	2800      	cmp	r0, #0
    a3be:	d0e5      	beq.n	a38c <bt_setup_random_id_addr+0x28>
    a3c0:	e7e1      	b.n	a386 <bt_setup_random_id_addr+0x22>
			return 0;
    a3c2:	2300      	movs	r3, #0
    a3c4:	e7df      	b.n	a386 <bt_setup_random_id_addr+0x22>
    a3c6:	bf00      	nop
    a3c8:	20000000 	.word	0x20000000

0000a3cc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3ce:	460d      	mov	r5, r1
    a3d0:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
    a3d2:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    a3d4:	f011 0f01 	tst.w	r1, #1
    a3d8:	d027      	beq.n	a42a <bt_id_set_adv_own_addr+0x5e>
    a3da:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    a3dc:	b142      	cbz	r2, a3f0 <bt_id_set_adv_own_addr+0x24>
    a3de:	f011 0f20 	tst.w	r1, #32
    a3e2:	d005      	beq.n	a3f0 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    a3e4:	4b22      	ldr	r3, [pc, #136]	; (a470 <bt_id_set_adv_own_addr+0xa4>)
    a3e6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    a3ea:	f013 0f40 	tst.w	r3, #64	; 0x40
    a3ee:	d038      	beq.n	a462 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a3f0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    a3f4:	4a1e      	ldr	r2, [pc, #120]	; (a470 <bt_id_set_adv_own_addr+0xa4>)
    a3f6:	5cd3      	ldrb	r3, [r2, r3]
    a3f8:	2b01      	cmp	r3, #1
    a3fa:	d00d      	beq.n	a418 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    a3fc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    a400:	4b1b      	ldr	r3, [pc, #108]	; (a470 <bt_id_set_adv_own_addr+0xa4>)
    a402:	5d1b      	ldrb	r3, [r3, r4]
    a404:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    a406:	b37f      	cbz	r7, a468 <bt_id_set_adv_own_addr+0x9c>
    a408:	f015 0f20 	tst.w	r5, #32
    a40c:	d02e      	beq.n	a46c <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    a40e:	f043 0302 	orr.w	r3, r3, #2
    a412:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    a414:	2000      	movs	r0, #0
    a416:	e017      	b.n	a448 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    a418:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a41c:	4411      	add	r1, r2
    a41e:	3101      	adds	r1, #1
    a420:	f010 f82b 	bl	1a47a <bt_id_set_adv_random_addr>
				if (err) {
    a424:	2800      	cmp	r0, #0
    a426:	d0e9      	beq.n	a3fc <bt_id_set_adv_own_addr+0x30>
    a428:	e00e      	b.n	a448 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    a42a:	f011 0f04 	tst.w	r1, #4
    a42e:	d013      	beq.n	a458 <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a430:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    a434:	4a0e      	ldr	r2, [pc, #56]	; (a470 <bt_id_set_adv_own_addr+0xa4>)
    a436:	5cd3      	ldrb	r3, [r2, r3]
    a438:	2b01      	cmp	r3, #1
    a43a:	d006      	beq.n	a44a <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
    a43c:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
    a43e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    a442:	4b0b      	ldr	r3, [pc, #44]	; (a470 <bt_id_set_adv_own_addr+0xa4>)
    a444:	5d1b      	ldrb	r3, [r3, r4]
    a446:	7033      	strb	r3, [r6, #0]
}
    a448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    a44a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a44e:	4411      	add	r1, r2
    a450:	3101      	adds	r1, #1
    a452:	f010 f812 	bl	1a47a <bt_id_set_adv_random_addr>
    a456:	e7f2      	b.n	a43e <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
    a458:	f010 f814 	bl	1a484 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    a45c:	2301      	movs	r3, #1
    a45e:	7033      	strb	r3, [r6, #0]
		if (err) {
    a460:	e7f2      	b.n	a448 <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
    a462:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a466:	e7ef      	b.n	a448 <bt_id_set_adv_own_addr+0x7c>
	return 0;
    a468:	2000      	movs	r0, #0
    a46a:	e7ed      	b.n	a448 <bt_id_set_adv_own_addr+0x7c>
    a46c:	2000      	movs	r0, #0
    a46e:	e7eb      	b.n	a448 <bt_id_set_adv_own_addr+0x7c>
    a470:	20000000 	.word	0x20000000

0000a474 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    a474:	b510      	push	{r4, lr}
    a476:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a478:	4b45      	ldr	r3, [pc, #276]	; (a590 <bt_id_init+0x11c>)
    a47a:	79db      	ldrb	r3, [r3, #7]
    a47c:	b133      	cbz	r3, a48c <bt_id_init+0x18>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a47e:	4b44      	ldr	r3, [pc, #272]	; (a590 <bt_id_init+0x11c>)
    a480:	79db      	ldrb	r3, [r3, #7]
    a482:	b373      	cbz	r3, a4e2 <bt_id_init+0x6e>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    a484:	2400      	movs	r4, #0
}
    a486:	4620      	mov	r0, r4
    a488:	b014      	add	sp, #80	; 0x50
    a48a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    a48c:	f7ff feb0 	bl	a1f0 <bt_setup_public_id_addr>
		if (err) {
    a490:	4604      	mov	r4, r0
    a492:	2800      	cmp	r0, #0
    a494:	d0f3      	beq.n	a47e <bt_id_init+0xa>
			BT_ERR("Unable to set identity address");
    a496:	4b3f      	ldr	r3, [pc, #252]	; (a594 <bt_id_init+0x120>)
    a498:	9307      	str	r3, [sp, #28]
    a49a:	2302      	movs	r3, #2
    a49c:	f88d 3004 	strb.w	r3, [sp, #4]
    a4a0:	2300      	movs	r3, #0
    a4a2:	f88d 3005 	strb.w	r3, [sp, #5]
    a4a6:	f88d 3006 	strb.w	r3, [sp, #6]
    a4aa:	f88d 3007 	strb.w	r3, [sp, #7]
    a4ae:	9a01      	ldr	r2, [sp, #4]
    a4b0:	9206      	str	r2, [sp, #24]
    a4b2:	4619      	mov	r1, r3
    a4b4:	f363 0100 	bfi	r1, r3, #0, #1
    a4b8:	f363 0141 	bfi	r1, r3, #1, #1
    a4bc:	f363 0182 	bfi	r1, r3, #2, #1
    a4c0:	f363 01c5 	bfi	r1, r3, #3, #3
    a4c4:	2201      	movs	r2, #1
    a4c6:	f362 1188 	bfi	r1, r2, #6, #3
    a4ca:	2208      	movs	r2, #8
    a4cc:	f362 2152 	bfi	r1, r2, #9, #10
    a4d0:	f363 41de 	bfi	r1, r3, #19, #12
    a4d4:	f363 71df 	bfi	r1, r3, #31, #1
    a4d8:	aa06      	add	r2, sp, #24
    a4da:	482f      	ldr	r0, [pc, #188]	; (a598 <bt_id_init+0x124>)
    a4dc:	f7f9 f8f6 	bl	36cc <z_impl_z_log_msg_static_create>
			return err;
    a4e0:	e7d1      	b.n	a486 <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
    a4e2:	f7ff ff3f 	bl	a364 <bt_setup_random_id_addr>
		if (err) {
    a4e6:	4604      	mov	r4, r0
    a4e8:	bb58      	cbnz	r0, a542 <bt_id_init+0xce>
		err = set_random_address(&bt_dev.id_addr[0].a);
    a4ea:	482c      	ldr	r0, [pc, #176]	; (a59c <bt_id_init+0x128>)
    a4ec:	f7ff fd38 	bl	9f60 <set_random_address>
		if (err) {
    a4f0:	4604      	mov	r4, r0
    a4f2:	2800      	cmp	r0, #0
    a4f4:	d0c7      	beq.n	a486 <bt_id_init+0x12>
			BT_ERR("Unable to set random address");
    a4f6:	4b2a      	ldr	r3, [pc, #168]	; (a5a0 <bt_id_init+0x12c>)
    a4f8:	930d      	str	r3, [sp, #52]	; 0x34
    a4fa:	2302      	movs	r3, #2
    a4fc:	f88d 3004 	strb.w	r3, [sp, #4]
    a500:	2300      	movs	r3, #0
    a502:	f88d 3005 	strb.w	r3, [sp, #5]
    a506:	f88d 3006 	strb.w	r3, [sp, #6]
    a50a:	f88d 3007 	strb.w	r3, [sp, #7]
    a50e:	9a01      	ldr	r2, [sp, #4]
    a510:	920c      	str	r2, [sp, #48]	; 0x30
    a512:	4619      	mov	r1, r3
    a514:	f363 0100 	bfi	r1, r3, #0, #1
    a518:	f363 0141 	bfi	r1, r3, #1, #1
    a51c:	f363 0182 	bfi	r1, r3, #2, #1
    a520:	f363 01c5 	bfi	r1, r3, #3, #3
    a524:	2201      	movs	r2, #1
    a526:	f362 1188 	bfi	r1, r2, #6, #3
    a52a:	2208      	movs	r2, #8
    a52c:	f362 2152 	bfi	r1, r2, #9, #10
    a530:	f363 41de 	bfi	r1, r3, #19, #12
    a534:	f363 71df 	bfi	r1, r3, #31, #1
    a538:	aa0c      	add	r2, sp, #48	; 0x30
    a53a:	4817      	ldr	r0, [pc, #92]	; (a598 <bt_id_init+0x124>)
    a53c:	f7f9 f8c6 	bl	36cc <z_impl_z_log_msg_static_create>
			return err;
    a540:	e7a1      	b.n	a486 <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
    a542:	4b14      	ldr	r3, [pc, #80]	; (a594 <bt_id_init+0x120>)
    a544:	9313      	str	r3, [sp, #76]	; 0x4c
    a546:	2302      	movs	r3, #2
    a548:	f88d 3004 	strb.w	r3, [sp, #4]
    a54c:	2300      	movs	r3, #0
    a54e:	f88d 3005 	strb.w	r3, [sp, #5]
    a552:	f88d 3006 	strb.w	r3, [sp, #6]
    a556:	f88d 3007 	strb.w	r3, [sp, #7]
    a55a:	9a01      	ldr	r2, [sp, #4]
    a55c:	9212      	str	r2, [sp, #72]	; 0x48
    a55e:	4619      	mov	r1, r3
    a560:	f363 0100 	bfi	r1, r3, #0, #1
    a564:	f363 0141 	bfi	r1, r3, #1, #1
    a568:	f363 0182 	bfi	r1, r3, #2, #1
    a56c:	f363 01c5 	bfi	r1, r3, #3, #3
    a570:	2201      	movs	r2, #1
    a572:	f362 1188 	bfi	r1, r2, #6, #3
    a576:	2208      	movs	r2, #8
    a578:	f362 2152 	bfi	r1, r2, #9, #10
    a57c:	f363 41de 	bfi	r1, r3, #19, #12
    a580:	f363 71df 	bfi	r1, r3, #31, #1
    a584:	aa12      	add	r2, sp, #72	; 0x48
    a586:	4804      	ldr	r0, [pc, #16]	; (a598 <bt_id_init+0x124>)
    a588:	f7f9 f8a0 	bl	36cc <z_impl_z_log_msg_static_create>
			return err;
    a58c:	e77b      	b.n	a486 <bt_id_init+0x12>
    a58e:	bf00      	nop
    a590:	20000000 	.word	0x20000000
    a594:	00021f5c 	.word	0x00021f5c
    a598:	00020558 	.word	0x00020558
    a59c:	20000001 	.word	0x20000001
    a5a0:	00021f7c 	.word	0x00021f7c

0000a5a4 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
    a5a4:	4800      	ldr	r0, [pc, #0]	; (a5a8 <adv_new_legacy+0x4>)
    a5a6:	4770      	bx	lr
    a5a8:	20000018 	.word	0x20000018

0000a5ac <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
    a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5b0:	b08b      	sub	sp, #44	; 0x2c
    a5b2:	4607      	mov	r7, r0
    a5b4:	4689      	mov	r9, r1
    a5b6:	9201      	str	r2, [sp, #4]
    a5b8:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
    a5ba:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
    a5be:	465c      	mov	r4, fp
	for (size_t i = 0; i < ad_len; i++) {
    a5c0:	9b00      	ldr	r3, [sp, #0]
    a5c2:	459b      	cmp	fp, r3
    a5c4:	d25b      	bcs.n	a67e <set_data_add_complete+0xd2>
		const struct bt_data *data = ad[i].data;
    a5c6:	9b01      	ldr	r3, [sp, #4]
    a5c8:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
    a5cc:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
    a5d0:	2500      	movs	r5, #0
    a5d2:	e03a      	b.n	a64a <set_data_add_complete+0x9e>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
    a5d4:	4b2c      	ldr	r3, [pc, #176]	; (a688 <set_data_add_complete+0xdc>)
    a5d6:	9309      	str	r3, [sp, #36]	; 0x24
    a5d8:	2302      	movs	r3, #2
    a5da:	f88d 300c 	strb.w	r3, [sp, #12]
    a5de:	2300      	movs	r3, #0
    a5e0:	f88d 300d 	strb.w	r3, [sp, #13]
    a5e4:	f88d 300e 	strb.w	r3, [sp, #14]
    a5e8:	f88d 300f 	strb.w	r3, [sp, #15]
    a5ec:	9a03      	ldr	r2, [sp, #12]
    a5ee:	9208      	str	r2, [sp, #32]
    a5f0:	4619      	mov	r1, r3
    a5f2:	f363 0100 	bfi	r1, r3, #0, #1
    a5f6:	f363 0141 	bfi	r1, r3, #1, #1
    a5fa:	f363 0182 	bfi	r1, r3, #2, #1
    a5fe:	f363 01c5 	bfi	r1, r3, #3, #3
    a602:	2201      	movs	r2, #1
    a604:	f362 1188 	bfi	r1, r2, #6, #3
    a608:	2208      	movs	r2, #8
    a60a:	f362 2152 	bfi	r1, r2, #9, #10
    a60e:	f363 41de 	bfi	r1, r3, #19, #12
    a612:	f363 71df 	bfi	r1, r3, #31, #1
    a616:	aa08      	add	r2, sp, #32
    a618:	481c      	ldr	r0, [pc, #112]	; (a68c <set_data_add_complete+0xe0>)
    a61a:	f7f9 f857 	bl	36cc <z_impl_z_log_msg_static_create>
					return -EINVAL;
    a61e:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
    a622:	b00b      	add	sp, #44	; 0x2c
    a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
    a628:	b2d6      	uxtb	r6, r2
    a62a:	1c63      	adds	r3, r4, #1
    a62c:	b2db      	uxtb	r3, r3
    a62e:	f106 0e01 	add.w	lr, r6, #1
    a632:	f807 e00c 	strb.w	lr, [r7, ip]
			set_data[set_data_len++] = type;
    a636:	3402      	adds	r4, #2
    a638:	b2e4      	uxtb	r4, r4
    a63a:	54f8      	strb	r0, [r7, r3]
			memcpy(&set_data[set_data_len], data[j].data, len);
    a63c:	6849      	ldr	r1, [r1, #4]
    a63e:	1938      	adds	r0, r7, r4
    a640:	f00f fd03 	bl	1a04a <memcpy>
			set_data_len += len;
    a644:	4434      	add	r4, r6
    a646:	b2e4      	uxtb	r4, r4
		for (size_t j = 0; j < ad[i].len; j++) {
    a648:	3501      	adds	r5, #1
    a64a:	f8da 3004 	ldr.w	r3, [sl, #4]
    a64e:	429d      	cmp	r5, r3
    a650:	d212      	bcs.n	a678 <set_data_add_complete+0xcc>
			size_t len = data[j].data_len;
    a652:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
    a656:	784a      	ldrb	r2, [r1, #1]
			uint8_t type = data[j].type;
    a658:	f818 0035 	ldrb.w	r0, [r8, r5, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
    a65c:	46a4      	mov	ip, r4
    a65e:	18a3      	adds	r3, r4, r2
    a660:	3302      	adds	r3, #2
    a662:	454b      	cmp	r3, r9
    a664:	d9e0      	bls.n	a628 <set_data_add_complete+0x7c>
							(set_data_len + 2);
    a666:	1ca2      	adds	r2, r4, #2
				ssize_t shortened_len = set_data_len_max -
    a668:	eba9 0202 	sub.w	r2, r9, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
    a66c:	2809      	cmp	r0, #9
    a66e:	d1b1      	bne.n	a5d4 <set_data_add_complete+0x28>
    a670:	2a00      	cmp	r2, #0
    a672:	ddaf      	ble.n	a5d4 <set_data_add_complete+0x28>
				type = BT_DATA_NAME_SHORTENED;
    a674:	2008      	movs	r0, #8
    a676:	e7d7      	b.n	a628 <set_data_add_complete+0x7c>
	for (size_t i = 0; i < ad_len; i++) {
    a678:	f10b 0b01 	add.w	fp, fp, #1
    a67c:	e7a0      	b.n	a5c0 <set_data_add_complete+0x14>
	*data_len = set_data_len;
    a67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a680:	701c      	strb	r4, [r3, #0]
	return 0;
    a682:	2000      	movs	r0, #0
    a684:	e7cd      	b.n	a622 <set_data_add_complete+0x76>
    a686:	bf00      	nop
    a688:	00021fa4 	.word	0x00021fa4
    a68c:	00020518 	.word	0x00020518

0000a690 <valid_adv_ext_param>:
{
    a690:	b510      	push	{r4, lr}
    a692:	b082      	sub	sp, #8
    a694:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
    a696:	7800      	ldrb	r0, [r0, #0]
    a698:	4b23      	ldr	r3, [pc, #140]	; (a728 <valid_adv_ext_param+0x98>)
    a69a:	79db      	ldrb	r3, [r3, #7]
    a69c:	4298      	cmp	r0, r3
    a69e:	d302      	bcc.n	a6a6 <valid_adv_ext_param+0x16>
		return false;
    a6a0:	2000      	movs	r0, #0
}
    a6a2:	b002      	add	sp, #8
    a6a4:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    a6a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a6aa:	2300      	movs	r3, #0
    a6ac:	9300      	str	r3, [sp, #0]
    a6ae:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    a6b2:	2207      	movs	r2, #7
    a6b4:	4669      	mov	r1, sp
    a6b6:	4b1c      	ldr	r3, [pc, #112]	; (a728 <valid_adv_ext_param+0x98>)
    a6b8:	4418      	add	r0, r3
    a6ba:	f00f fcb4 	bl	1a026 <memcmp>
	if (param->id >= bt_dev.id_count ||
    a6be:	2800      	cmp	r0, #0
    a6c0:	d0ee      	beq.n	a6a0 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a6c2:	6863      	ldr	r3, [r4, #4]
    a6c4:	f013 0f01 	tst.w	r3, #1
    a6c8:	d107      	bne.n	a6da <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    a6ca:	4a17      	ldr	r2, [pc, #92]	; (a728 <valid_adv_ext_param+0x98>)
    a6cc:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
    a6d0:	2a08      	cmp	r2, #8
    a6d2:	d802      	bhi.n	a6da <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
    a6d4:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    a6d6:	2a9f      	cmp	r2, #159	; 0x9f
    a6d8:	d91b      	bls.n	a712 <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    a6da:	f013 0f30 	tst.w	r3, #48	; 0x30
    a6de:	d001      	beq.n	a6e4 <valid_adv_ext_param+0x54>
	    !param->peer) {
    a6e0:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    a6e2:	b1c2      	cbz	r2, a716 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    a6e4:	f013 0f10 	tst.w	r3, #16
    a6e8:	d108      	bne.n	a6fc <valid_adv_ext_param+0x6c>
	    !param->peer) {
    a6ea:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    a6ec:	b132      	cbz	r2, a6fc <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    a6ee:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    a6f2:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
    a6f6:	d014      	beq.n	a722 <valid_adv_ext_param+0x92>
	return true;
    a6f8:	2001      	movs	r0, #1
    a6fa:	e7d2      	b.n	a6a2 <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
    a6fc:	68a2      	ldr	r2, [r4, #8]
    a6fe:	68e1      	ldr	r1, [r4, #12]
    a700:	428a      	cmp	r2, r1
    a702:	d80a      	bhi.n	a71a <valid_adv_ext_param+0x8a>
    a704:	2a1f      	cmp	r2, #31
    a706:	d90a      	bls.n	a71e <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
    a708:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    a70c:	d9ef      	bls.n	a6ee <valid_adv_ext_param+0x5e>
			return false;
    a70e:	2000      	movs	r0, #0
    a710:	e7c7      	b.n	a6a2 <valid_adv_ext_param+0x12>
			return false;
    a712:	2000      	movs	r0, #0
    a714:	e7c5      	b.n	a6a2 <valid_adv_ext_param+0x12>
		return false;
    a716:	2000      	movs	r0, #0
    a718:	e7c3      	b.n	a6a2 <valid_adv_ext_param+0x12>
			return false;
    a71a:	2000      	movs	r0, #0
    a71c:	e7c1      	b.n	a6a2 <valid_adv_ext_param+0x12>
    a71e:	2000      	movs	r0, #0
    a720:	e7bf      	b.n	a6a2 <valid_adv_ext_param+0x12>
		return false;
    a722:	2000      	movs	r0, #0
    a724:	e7bd      	b.n	a6a2 <valid_adv_ext_param+0x12>
    a726:	bf00      	nop
    a728:	20000000 	.word	0x20000000

0000a72c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a72e:	b085      	sub	sp, #20
    a730:	4604      	mov	r4, r0
    a732:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    a734:	4605      	mov	r5, r0
    a736:	f815 2b09 	ldrb.w	r2, [r5], #9
    a73a:	4b1f      	ldr	r3, [pc, #124]	; (a7b8 <le_adv_start_add_conn+0x8c>)
    a73c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    a740:	2300      	movs	r3, #0
    a742:	9300      	str	r3, [sp, #0]
    a744:	f8cd 3003 	str.w	r3, [sp, #3]
    a748:	2207      	movs	r2, #7
    a74a:	4669      	mov	r1, sp
    a74c:	4628      	mov	r0, r5
    a74e:	f00f fc6a 	bl	1a026 <memcmp>
    a752:	b9b8      	cbnz	r0, a784 <le_adv_start_add_conn+0x58>
    a754:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    a756:	4b19      	ldr	r3, [pc, #100]	; (a7bc <le_adv_start_add_conn+0x90>)
    a758:	e893 0003 	ldmia.w	r3, {r0, r1}
    a75c:	9002      	str	r0, [sp, #8]
    a75e:	f8ad 100c 	strh.w	r1, [sp, #12]
    a762:	0c09      	lsrs	r1, r1, #16
    a764:	f88d 100e 	strb.w	r1, [sp, #14]
    a768:	a902      	add	r1, sp, #8
    a76a:	7820      	ldrb	r0, [r4, #0]
    a76c:	f010 f992 	bl	1aa94 <bt_conn_add_le>
		if (!conn) {
    a770:	4604      	mov	r4, r0
    a772:	b120      	cbz	r0, a77e <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    a774:	2104      	movs	r1, #4
    a776:	f000 ff47 	bl	b608 <bt_conn_set_state>
		*out_conn = conn;
    a77a:	603c      	str	r4, [r7, #0]
		return 0;
    a77c:	e012      	b.n	a7a4 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
    a77e:	f06f 060b 	mvn.w	r6, #11
    a782:	e00f      	b.n	a7a4 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    a784:	4629      	mov	r1, r5
    a786:	7820      	ldrb	r0, [r4, #0]
    a788:	f001 f9c8 	bl	bb1c <bt_conn_exists_le>
    a78c:	b968      	cbnz	r0, a7aa <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    a78e:	4629      	mov	r1, r5
    a790:	7820      	ldrb	r0, [r4, #0]
    a792:	f010 f97f 	bl	1aa94 <bt_conn_add_le>
	if (!conn) {
    a796:	4604      	mov	r4, r0
    a798:	b150      	cbz	r0, a7b0 <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    a79a:	2105      	movs	r1, #5
    a79c:	f000 ff34 	bl	b608 <bt_conn_set_state>
	*out_conn = conn;
    a7a0:	603c      	str	r4, [r7, #0]
	return 0;
    a7a2:	2600      	movs	r6, #0
}
    a7a4:	4630      	mov	r0, r6
    a7a6:	b005      	add	sp, #20
    a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
    a7aa:	f06f 0615 	mvn.w	r6, #21
    a7ae:	e7f9      	b.n	a7a4 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
    a7b0:	f06f 060b 	mvn.w	r6, #11
    a7b4:	e7f6      	b.n	a7a4 <le_adv_start_add_conn+0x78>
    a7b6:	bf00      	nop
    a7b8:	20000000 	.word	0x20000000
    a7bc:	00020728 	.word	0x00020728

0000a7c0 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
    a7c0:	b570      	push	{r4, r5, r6, lr}
    a7c2:	b084      	sub	sp, #16
    a7c4:	4604      	mov	r4, r0
    a7c6:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    a7c8:	f100 0509 	add.w	r5, r0, #9
    a7cc:	2300      	movs	r3, #0
    a7ce:	9300      	str	r3, [sp, #0]
    a7d0:	f8cd 3003 	str.w	r3, [sp, #3]
    a7d4:	2207      	movs	r2, #7
    a7d6:	4669      	mov	r1, sp
    a7d8:	4628      	mov	r0, r5
    a7da:	f00f fc24 	bl	1a026 <memcmp>
    a7de:	b9c8      	cbnz	r0, a814 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    a7e0:	4b10      	ldr	r3, [pc, #64]	; (a824 <le_adv_stop_free_conn+0x64>)
    a7e2:	e893 0003 	ldmia.w	r3, {r0, r1}
    a7e6:	9002      	str	r0, [sp, #8]
    a7e8:	f8ad 100c 	strh.w	r1, [sp, #12]
    a7ec:	0c09      	lsrs	r1, r1, #16
    a7ee:	f88d 100e 	strb.w	r1, [sp, #14]
    a7f2:	2204      	movs	r2, #4
    a7f4:	a902      	add	r1, sp, #8
    a7f6:	7820      	ldrb	r0, [r4, #0]
    a7f8:	f001 fa2a 	bl	bc50 <bt_conn_lookup_state_le>
    a7fc:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
    a7fe:	b13c      	cbz	r4, a810 <le_adv_stop_free_conn+0x50>
		conn->err = status;
    a800:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a802:	2100      	movs	r1, #0
    a804:	4620      	mov	r0, r4
    a806:	f000 feff 	bl	b608 <bt_conn_set_state>
		bt_conn_unref(conn);
    a80a:	4620      	mov	r0, r4
    a80c:	f010 f8f7 	bl	1a9fe <bt_conn_unref>
	}
}
    a810:	b004      	add	sp, #16
    a812:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a814:	2205      	movs	r2, #5
    a816:	4629      	mov	r1, r5
    a818:	7820      	ldrb	r0, [r4, #0]
    a81a:	f001 fa19 	bl	bc50 <bt_conn_lookup_state_le>
    a81e:	4604      	mov	r4, r0
    a820:	e7ed      	b.n	a7fe <le_adv_stop_free_conn+0x3e>
    a822:	bf00      	nop
    a824:	00020728 	.word	0x00020728

0000a828 <bt_le_adv_lookup_legacy>:
}
    a828:	4800      	ldr	r0, [pc, #0]	; (a82c <bt_le_adv_lookup_legacy+0x4>)
    a82a:	4770      	bx	lr
    a82c:	20000018 	.word	0x20000018

0000a830 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a834:	b095      	sub	sp, #84	; 0x54
    a836:	9204      	str	r2, [sp, #16]
    a838:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    a83a:	2300      	movs	r3, #0
    a83c:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    a83e:	690f      	ldr	r7, [r1, #16]
    a840:	ebb7 0b03 	subs.w	fp, r7, r3
    a844:	bf18      	it	ne
    a846:	f04f 0b01 	movne.w	fp, #1
    a84a:	4bba      	ldr	r3, [pc, #744]	; (ab34 <bt_le_adv_start_legacy+0x304>)
    a84c:	e8d3 3faf 	lda	r3, [r3]
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a850:	f013 0f04 	tst.w	r3, #4
    a854:	f000 819b 	beq.w	ab8e <bt_le_adv_start_legacy+0x35e>
    a858:	4605      	mov	r5, r0
    a85a:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a85c:	4608      	mov	r0, r1
    a85e:	f00f ff1c 	bl	1a69a <valid_adv_param>
    a862:	2800      	cmp	r0, #0
    a864:	f000 8196 	beq.w	ab94 <bt_le_adv_start_legacy+0x364>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
    a868:	4620      	mov	r0, r4
    a86a:	f00f fe20 	bl	1a4ae <bt_id_adv_random_addr_check>
    a86e:	4681      	mov	r9, r0
    a870:	2800      	cmp	r0, #0
    a872:	f000 8192 	beq.w	ab9a <bt_le_adv_start_legacy+0x36a>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a876:	f105 0610 	add.w	r6, r5, #16
    a87a:	e8d6 3faf 	lda	r3, [r6]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a87e:	f3c3 1a80 	ubfx	sl, r3, #6, #1
    a882:	f013 0f40 	tst.w	r3, #64	; 0x40
    a886:	f040 818b 	bne.w	aba0 <bt_le_adv_start_legacy+0x370>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    a88a:	220f      	movs	r2, #15
    a88c:	2100      	movs	r1, #0
    a88e:	a808      	add	r0, sp, #32
    a890:	f00f fc0a 	bl	1a0a8 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a894:	68a3      	ldr	r3, [r4, #8]
    a896:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a89a:	68e3      	ldr	r3, [r4, #12]
    a89c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    a8a0:	f8d4 8004 	ldr.w	r8, [r4, #4]
    a8a4:	4640      	mov	r0, r8
    a8a6:	f00f fe25 	bl	1a4f4 <get_adv_channel_map>
    a8aa:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
    a8ae:	4640      	mov	r0, r8
    a8b0:	f00f fe1e 	bl	1a4f0 <get_filter_policy>
    a8b4:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
    a8b8:	782a      	ldrb	r2, [r5, #0]
    a8ba:	7823      	ldrb	r3, [r4, #0]
    a8bc:	429a      	cmp	r2, r3
    a8be:	d008      	beq.n	a8d2 <bt_le_adv_start_legacy+0xa2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a8c0:	4b9c      	ldr	r3, [pc, #624]	; (ab34 <bt_le_adv_start_legacy+0x304>)
    a8c2:	e8d3 2fef 	ldaex	r2, [r3]
    a8c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    a8ca:	e8c3 2fe1 	stlex	r1, r2, [r3]
    a8ce:	2900      	cmp	r1, #0
    a8d0:	d1f7      	bne.n	a8c2 <bt_le_adv_start_legacy+0x92>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    a8d2:	7823      	ldrb	r3, [r4, #0]
    a8d4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    a8d6:	4a98      	ldr	r2, [pc, #608]	; (ab38 <bt_le_adv_start_legacy+0x308>)
    a8d8:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    a8dc:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    a8e0:	465a      	mov	r2, fp
    a8e2:	6861      	ldr	r1, [r4, #4]
    a8e4:	4628      	mov	r0, r5
    a8e6:	f7ff fd71 	bl	a3cc <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
    a8ea:	4680      	mov	r8, r0
    a8ec:	2800      	cmp	r0, #0
    a8ee:	f040 80d4 	bne.w	aa9a <bt_le_adv_start_legacy+0x26a>
		return err;
	}

	if (dir_adv) {
    a8f2:	b1e7      	cbz	r7, a92e <bt_le_adv_start_legacy+0xfe>
	memcpy(dst, src, sizeof(*dst));
    a8f4:	2207      	movs	r2, #7
    a8f6:	6921      	ldr	r1, [r4, #16]
    a8f8:	f105 0009 	add.w	r0, r5, #9
    a8fc:	f00f fba5 	bl	1a04a <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
    a900:	4620      	mov	r0, r4
    a902:	f00f fedb 	bl	1a6bc <get_adv_name_type_param>
    a906:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a908:	6863      	ldr	r3, [r4, #4]
    a90a:	f013 0f01 	tst.w	r3, #1
    a90e:	d021      	beq.n	a954 <bt_le_adv_start_legacy+0x124>
		if (dir_adv) {
    a910:	b1e7      	cbz	r7, a94c <bt_le_adv_start_legacy+0x11c>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
    a912:	f013 0f10 	tst.w	r3, #16
    a916:	d015      	beq.n	a944 <bt_le_adv_start_legacy+0x114>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    a918:	2304      	movs	r3, #4
    a91a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a91e:	2207      	movs	r2, #7
    a920:	6921      	ldr	r1, [r4, #16]
    a922:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    a926:	f00f fb90 	bl	1a04a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    a92a:	46d1      	mov	r9, sl
}
    a92c:	e01a      	b.n	a964 <bt_le_adv_start_legacy+0x134>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a92e:	2300      	movs	r3, #0
    a930:	930c      	str	r3, [sp, #48]	; 0x30
    a932:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	memcpy(dst, src, sizeof(*dst));
    a936:	2207      	movs	r2, #7
    a938:	a90c      	add	r1, sp, #48	; 0x30
    a93a:	f105 0009 	add.w	r0, r5, #9
    a93e:	f00f fb84 	bl	1a04a <memcpy>
    a942:	e7dd      	b.n	a900 <bt_le_adv_start_legacy+0xd0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    a944:	2301      	movs	r3, #1
    a946:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a94a:	e7e8      	b.n	a91e <bt_le_adv_start_legacy+0xee>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
    a94c:	2300      	movs	r3, #0
    a94e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a952:	e007      	b.n	a964 <bt_le_adv_start_legacy+0x134>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    a954:	f413 7f00 	tst.w	r3, #512	; 0x200
    a958:	d101      	bne.n	a95e <bt_le_adv_start_legacy+0x12e>
    a95a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a95c:	b35b      	cbz	r3, a9b6 <bt_le_adv_start_legacy+0x186>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
    a95e:	2302      	movs	r3, #2
    a960:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a964:	210f      	movs	r1, #15
    a966:	f242 0006 	movw	r0, #8198	; 0x2006
    a96a:	f7fd fdb5 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
    a96e:	4680      	mov	r8, r0
    a970:	2800      	cmp	r0, #0
    a972:	f000 8118 	beq.w	aba6 <bt_le_adv_start_legacy+0x376>
    a976:	220f      	movs	r2, #15
    a978:	a908      	add	r1, sp, #32
    a97a:	3008      	adds	r0, #8
    a97c:	f012 f8d6 	bl	1cb2c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a980:	2200      	movs	r2, #0
    a982:	4641      	mov	r1, r8
    a984:	f242 0006 	movw	r0, #8198	; 0x2006
    a988:	f7fd fde4 	bl	8554 <bt_hci_cmd_send_sync>
	if (err) {
    a98c:	4680      	mov	r8, r0
    a98e:	2800      	cmp	r0, #0
    a990:	f040 8083 	bne.w	aa9a <bt_le_adv_start_legacy+0x26a>
		return err;
	}

	if (!dir_adv) {
    a994:	b1b7      	cbz	r7, a9c4 <bt_le_adv_start_legacy+0x194>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a996:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a998:	f013 0f01 	tst.w	r3, #1
    a99c:	d02a      	beq.n	a9f4 <bt_le_adv_start_legacy+0x1c4>
		err = le_adv_start_add_conn(adv, &conn);
    a99e:	a907      	add	r1, sp, #28
    a9a0:	4628      	mov	r0, r5
    a9a2:	f7ff fec3 	bl	a72c <le_adv_start_add_conn>
		if (err) {
    a9a6:	b328      	cbz	r0, a9f4 <bt_le_adv_start_legacy+0x1c4>
			if (err == -ENOMEM && !dir_adv &&
    a9a8:	f110 0f0c 	cmn.w	r0, #12
    a9ac:	f040 80fe 	bne.w	abac <bt_le_adv_start_legacy+0x37c>
    a9b0:	b1d7      	cbz	r7, a9e8 <bt_le_adv_start_legacy+0x1b8>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
    a9b2:	4680      	mov	r8, r0
    a9b4:	e071      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    a9b6:	2802      	cmp	r0, #2
    a9b8:	d0d1      	beq.n	a95e <bt_le_adv_start_legacy+0x12e>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    a9ba:	2303      	movs	r3, #3
    a9bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    a9c0:	46d1      	mov	r9, sl
    a9c2:	e7cf      	b.n	a964 <bt_le_adv_start_legacy+0x134>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    a9c4:	f8cd b00c 	str.w	fp, [sp, #12]
    a9c8:	f8cd 9008 	str.w	r9, [sp, #8]
    a9cc:	2300      	movs	r3, #0
    a9ce:	9301      	str	r3, [sp, #4]
    a9d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a9d2:	9300      	str	r3, [sp, #0]
    a9d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    a9d6:	9a05      	ldr	r2, [sp, #20]
    a9d8:	9904      	ldr	r1, [sp, #16]
    a9da:	4628      	mov	r0, r5
    a9dc:	f00f fdd6 	bl	1a58c <le_adv_update>
		if (err) {
    a9e0:	2800      	cmp	r0, #0
    a9e2:	d0d8      	beq.n	a996 <bt_le_adv_start_legacy+0x166>
			return err;
    a9e4:	4680      	mov	r8, r0
    a9e6:	e058      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a9e8:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    a9ea:	f012 0f02 	tst.w	r2, #2
    a9ee:	d00c      	beq.n	aa0a <bt_le_adv_start_legacy+0x1da>
			return err;
    a9f0:	4680      	mov	r8, r0
    a9f2:	e052      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
    a9f4:	2101      	movs	r1, #1
    a9f6:	4628      	mov	r0, r5
    a9f8:	f00f fe9c 	bl	1a734 <bt_le_adv_set_enable>
	if (err) {
    a9fc:	4605      	mov	r5, r0
    a9fe:	2800      	cmp	r0, #0
    aa00:	d14f      	bne.n	aaa2 <bt_le_adv_start_legacy+0x272>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    aa02:	9807      	ldr	r0, [sp, #28]
    aa04:	b108      	cbz	r0, aa0a <bt_le_adv_start_legacy+0x1da>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
    aa06:	f00f fffa 	bl	1a9fe <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    aa0a:	2f00      	cmp	r7, #0
    aa0c:	d078      	beq.n	ab00 <bt_le_adv_start_legacy+0x2d0>
    aa0e:	4643      	mov	r3, r8
	if (val) {
    aa10:	f013 0f01 	tst.w	r3, #1
    aa14:	d07c      	beq.n	ab10 <bt_le_adv_start_legacy+0x2e0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aa16:	e8d6 3fef 	ldaex	r3, [r6]
    aa1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    aa1e:	e8c6 3fe2 	stlex	r2, r3, [r6]
    aa22:	2a00      	cmp	r2, #0
    aa24:	d1f7      	bne.n	aa16 <bt_le_adv_start_legacy+0x1e6>
    aa26:	f1bb 0f01 	cmp.w	fp, #1
    aa2a:	d17a      	bne.n	ab22 <bt_le_adv_start_legacy+0x2f2>
    aa2c:	e8d6 3fef 	ldaex	r3, [r6]
    aa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa34:	e8c6 3fe2 	stlex	r2, r3, [r6]
    aa38:	2a00      	cmp	r2, #0
    aa3a:	d1f7      	bne.n	aa2c <bt_le_adv_start_legacy+0x1fc>
    aa3c:	f1bb 0f02 	cmp.w	fp, #2
    aa40:	f040 8080 	bne.w	ab44 <bt_le_adv_start_legacy+0x314>
    aa44:	e8d6 3fef 	ldaex	r3, [r6]
    aa48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    aa4c:	e8c6 3fe2 	stlex	r2, r3, [r6]
    aa50:	2a00      	cmp	r2, #0
    aa52:	d1f7      	bne.n	aa44 <bt_le_adv_start_legacy+0x214>

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
    aa54:	6863      	ldr	r3, [r4, #4]
    aa56:	f013 0f01 	tst.w	r3, #1
    aa5a:	d07d      	beq.n	ab58 <bt_le_adv_start_legacy+0x328>
    aa5c:	e8d6 3fef 	ldaex	r3, [r6]
    aa60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    aa64:	e8c6 3fe2 	stlex	r2, r3, [r6]
    aa68:	2a00      	cmp	r2, #0
    aa6a:	d1f7      	bne.n	aa5c <bt_le_adv_start_legacy+0x22c>
    aa6c:	f1b9 0f00 	cmp.w	r9, #0
    aa70:	d07b      	beq.n	ab6a <bt_le_adv_start_legacy+0x33a>
    aa72:	e8d6 3fef 	ldaex	r3, [r6]
    aa76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    aa7a:	e8c6 3fe2 	stlex	r2, r3, [r6]
    aa7e:	2a00      	cmp	r2, #0
    aa80:	d1f7      	bne.n	aa72 <bt_le_adv_start_legacy+0x242>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
    aa82:	6863      	ldr	r3, [r4, #4]
    aa84:	f013 0f04 	tst.w	r3, #4
    aa88:	d078      	beq.n	ab7c <bt_le_adv_start_legacy+0x34c>
    aa8a:	e8d6 3fef 	ldaex	r3, [r6]
    aa8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    aa92:	e8c6 3fe2 	stlex	r2, r3, [r6]
    aa96:	2a00      	cmp	r2, #0
    aa98:	d1f7      	bne.n	aa8a <bt_le_adv_start_legacy+0x25a>

	return 0;
}
    aa9a:	4640      	mov	r0, r8
    aa9c:	b015      	add	sp, #84	; 0x54
    aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
    aaa2:	4b26      	ldr	r3, [pc, #152]	; (ab3c <bt_le_adv_start_legacy+0x30c>)
    aaa4:	9313      	str	r3, [sp, #76]	; 0x4c
    aaa6:	2302      	movs	r3, #2
    aaa8:	f88d 3018 	strb.w	r3, [sp, #24]
    aaac:	2300      	movs	r3, #0
    aaae:	f88d 3019 	strb.w	r3, [sp, #25]
    aab2:	f88d 301a 	strb.w	r3, [sp, #26]
    aab6:	f88d 301b 	strb.w	r3, [sp, #27]
    aaba:	9a06      	ldr	r2, [sp, #24]
    aabc:	9212      	str	r2, [sp, #72]	; 0x48
    aabe:	4619      	mov	r1, r3
    aac0:	f363 0100 	bfi	r1, r3, #0, #1
    aac4:	f363 0141 	bfi	r1, r3, #1, #1
    aac8:	f363 0182 	bfi	r1, r3, #2, #1
    aacc:	f363 01c5 	bfi	r1, r3, #3, #3
    aad0:	2201      	movs	r2, #1
    aad2:	f362 1188 	bfi	r1, r2, #6, #3
    aad6:	2208      	movs	r2, #8
    aad8:	f362 2152 	bfi	r1, r2, #9, #10
    aadc:	f363 41de 	bfi	r1, r3, #19, #12
    aae0:	f363 71df 	bfi	r1, r3, #31, #1
    aae4:	aa12      	add	r2, sp, #72	; 0x48
    aae6:	4816      	ldr	r0, [pc, #88]	; (ab40 <bt_le_adv_start_legacy+0x310>)
    aae8:	f7f8 fdf0 	bl	36cc <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    aaec:	9807      	ldr	r0, [sp, #28]
    aaee:	b128      	cbz	r0, aafc <bt_le_adv_start_legacy+0x2cc>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aaf0:	2100      	movs	r1, #0
    aaf2:	f000 fd89 	bl	b608 <bt_conn_set_state>
			bt_conn_unref(conn);
    aaf6:	9807      	ldr	r0, [sp, #28]
    aaf8:	f00f ff81 	bl	1a9fe <bt_conn_unref>
		return err;
    aafc:	46a8      	mov	r8, r5
    aafe:	e7cc      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
    ab00:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ab02:	f013 0f02 	tst.w	r3, #2
    ab06:	d001      	beq.n	ab0c <bt_le_adv_start_legacy+0x2dc>
    ab08:	4643      	mov	r3, r8
    ab0a:	e781      	b.n	aa10 <bt_le_adv_start_legacy+0x1e0>
    ab0c:	2301      	movs	r3, #1
    ab0e:	e77f      	b.n	aa10 <bt_le_adv_start_legacy+0x1e0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ab10:	e8d6 3fef 	ldaex	r3, [r6]
    ab14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ab18:	e8c6 3fe2 	stlex	r2, r3, [r6]
    ab1c:	2a00      	cmp	r2, #0
    ab1e:	d082      	beq.n	aa26 <bt_le_adv_start_legacy+0x1f6>
    ab20:	e7f6      	b.n	ab10 <bt_le_adv_start_legacy+0x2e0>
    ab22:	e8d6 3fef 	ldaex	r3, [r6]
    ab26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ab2a:	e8c6 3fe2 	stlex	r2, r3, [r6]
    ab2e:	2a00      	cmp	r2, #0
    ab30:	d084      	beq.n	aa3c <bt_le_adv_start_legacy+0x20c>
    ab32:	e7f6      	b.n	ab22 <bt_le_adv_start_legacy+0x2f2>
    ab34:	200000cc 	.word	0x200000cc
    ab38:	20000000 	.word	0x20000000
    ab3c:	00021fc0 	.word	0x00021fc0
    ab40:	00020518 	.word	0x00020518
    ab44:	e8d6 3fef 	ldaex	r3, [r6]
    ab48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ab4c:	e8c6 3fe2 	stlex	r2, r3, [r6]
    ab50:	2a00      	cmp	r2, #0
    ab52:	f43f af7f 	beq.w	aa54 <bt_le_adv_start_legacy+0x224>
    ab56:	e7f5      	b.n	ab44 <bt_le_adv_start_legacy+0x314>
    ab58:	e8d6 3fef 	ldaex	r3, [r6]
    ab5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    ab60:	e8c6 3fe2 	stlex	r2, r3, [r6]
    ab64:	2a00      	cmp	r2, #0
    ab66:	d081      	beq.n	aa6c <bt_le_adv_start_legacy+0x23c>
    ab68:	e7f6      	b.n	ab58 <bt_le_adv_start_legacy+0x328>
    ab6a:	e8d6 3fef 	ldaex	r3, [r6]
    ab6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    ab72:	e8c6 3fe2 	stlex	r2, r3, [r6]
    ab76:	2a00      	cmp	r2, #0
    ab78:	d083      	beq.n	aa82 <bt_le_adv_start_legacy+0x252>
    ab7a:	e7f6      	b.n	ab6a <bt_le_adv_start_legacy+0x33a>
    ab7c:	e8d6 3fef 	ldaex	r3, [r6]
    ab80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ab84:	e8c6 3fe2 	stlex	r2, r3, [r6]
    ab88:	2a00      	cmp	r2, #0
    ab8a:	d086      	beq.n	aa9a <bt_le_adv_start_legacy+0x26a>
    ab8c:	e7f6      	b.n	ab7c <bt_le_adv_start_legacy+0x34c>
		return -EAGAIN;
    ab8e:	f06f 080a 	mvn.w	r8, #10
    ab92:	e782      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
		return -EINVAL;
    ab94:	f06f 0815 	mvn.w	r8, #21
    ab98:	e77f      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
		return -EINVAL;
    ab9a:	f06f 0815 	mvn.w	r8, #21
    ab9e:	e77c      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
		return -EALREADY;
    aba0:	f06f 0877 	mvn.w	r8, #119	; 0x77
    aba4:	e779      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
		return -ENOBUFS;
    aba6:	f06f 0868 	mvn.w	r8, #104	; 0x68
    abaa:	e776      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>
			return err;
    abac:	4680      	mov	r8, r0
    abae:	e774      	b.n	aa9a <bt_le_adv_start_legacy+0x26a>

0000abb0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abb4:	b082      	sub	sp, #8
    abb6:	4606      	mov	r6, r0
    abb8:	460c      	mov	r4, r1
    abba:	4615      	mov	r5, r2
    abbc:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
    abbe:	f7ff fcf1 	bl	a5a4 <adv_new_legacy>
	int err;

	if (!adv) {
    abc2:	b1f8      	cbz	r0, ac04 <bt_le_adv_start+0x54>
    abc4:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    abc6:	9b08      	ldr	r3, [sp, #32]
    abc8:	9301      	str	r3, [sp, #4]
    abca:	9700      	str	r7, [sp, #0]
    abcc:	462b      	mov	r3, r5
    abce:	4622      	mov	r2, r4
    abd0:	4631      	mov	r1, r6
    abd2:	f7ff fe2d 	bl	a830 <bt_le_adv_start_legacy>
    abd6:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
    abd8:	4629      	mov	r1, r5
    abda:	4620      	mov	r0, r4
    abdc:	f00f fc69 	bl	1a4b2 <ad_is_limited>
    abe0:	b918      	cbnz	r0, abea <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    abe2:	4630      	mov	r0, r6
    abe4:	b002      	add	sp, #8
    abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    abea:	f108 0818 	add.w	r8, r8, #24
    abee:	4907      	ldr	r1, [pc, #28]	; (ac0c <bt_le_adv_start+0x5c>)
    abf0:	4640      	mov	r0, r8
    abf2:	f014 fe0f 	bl	1f814 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    abf6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    abfa:	2300      	movs	r3, #0
    abfc:	4640      	mov	r0, r8
    abfe:	f00b fdeb 	bl	167d8 <k_work_reschedule>
    ac02:	e7ee      	b.n	abe2 <bt_le_adv_start+0x32>
		return -ENOMEM;
    ac04:	f06f 060b 	mvn.w	r6, #11
    ac08:	e7eb      	b.n	abe2 <bt_le_adv_start+0x32>
    ac0a:	bf00      	nop
    ac0c:	0000acbd 	.word	0x0000acbd

0000ac10 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    ac10:	b510      	push	{r4, lr}
    ac12:	b088      	sub	sp, #32
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    ac14:	f7ff fe08 	bl	a828 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
    ac18:	b1a0      	cbz	r0, ac44 <bt_le_adv_stop+0x34>
    ac1a:	4604      	mov	r4, r0
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    ac1c:	f00f fd8e 	bl	1a73c <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
    ac20:	f104 0310 	add.w	r3, r4, #16
    ac24:	e8d3 2fef 	ldaex	r2, [r3]
    ac28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    ac2c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ac30:	2900      	cmp	r1, #0
    ac32:	d1f7      	bne.n	ac24 <bt_le_adv_stop+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ac34:	e8d3 2faf 	lda	r2, [r3]

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ac38:	f012 0f40 	tst.w	r2, #64	; 0x40
    ac3c:	d12a      	bne.n	ac94 <bt_le_adv_stop+0x84>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    ac3e:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    ac40:	b008      	add	sp, #32
    ac42:	bd10      	pop	{r4, pc}
		BT_ERR("No valid legacy adv");
    ac44:	4b1b      	ldr	r3, [pc, #108]	; (acb4 <bt_le_adv_stop+0xa4>)
    ac46:	9307      	str	r3, [sp, #28]
    ac48:	2302      	movs	r3, #2
    ac4a:	f88d 3004 	strb.w	r3, [sp, #4]
    ac4e:	2400      	movs	r4, #0
    ac50:	f88d 4005 	strb.w	r4, [sp, #5]
    ac54:	f88d 4006 	strb.w	r4, [sp, #6]
    ac58:	f88d 4007 	strb.w	r4, [sp, #7]
    ac5c:	9b01      	ldr	r3, [sp, #4]
    ac5e:	9306      	str	r3, [sp, #24]
    ac60:	4621      	mov	r1, r4
    ac62:	f364 0100 	bfi	r1, r4, #0, #1
    ac66:	f364 0141 	bfi	r1, r4, #1, #1
    ac6a:	f364 0182 	bfi	r1, r4, #2, #1
    ac6e:	f364 01c5 	bfi	r1, r4, #3, #3
    ac72:	2301      	movs	r3, #1
    ac74:	f363 1188 	bfi	r1, r3, #6, #3
    ac78:	2308      	movs	r3, #8
    ac7a:	f363 2152 	bfi	r1, r3, #9, #10
    ac7e:	f364 41de 	bfi	r1, r4, #19, #12
    ac82:	f364 71df 	bfi	r1, r4, #31, #1
    ac86:	4623      	mov	r3, r4
    ac88:	aa06      	add	r2, sp, #24
    ac8a:	480b      	ldr	r0, [pc, #44]	; (acb8 <bt_le_adv_stop+0xa8>)
    ac8c:	f7f8 fd1e 	bl	36cc <z_impl_z_log_msg_static_create>
		return 0;
    ac90:	4620      	mov	r0, r4
    ac92:	e7d5      	b.n	ac40 <bt_le_adv_stop+0x30>
    ac94:	e8d3 3faf 	lda	r3, [r3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ac98:	f413 7f00 	tst.w	r3, #512	; 0x200
    ac9c:	d104      	bne.n	aca8 <bt_le_adv_stop+0x98>
		err = bt_le_adv_set_enable_legacy(adv, false);
    ac9e:	2100      	movs	r1, #0
    aca0:	4620      	mov	r0, r4
    aca2:	f00f fd1f 	bl	1a6e4 <bt_le_adv_set_enable_legacy>
		if (err) {
    aca6:	e7cb      	b.n	ac40 <bt_le_adv_stop+0x30>
		le_adv_stop_free_conn(adv, 0);
    aca8:	2100      	movs	r1, #0
    acaa:	4620      	mov	r0, r4
    acac:	f7ff fd88 	bl	a7c0 <le_adv_stop_free_conn>
    acb0:	e7f5      	b.n	ac9e <bt_le_adv_stop+0x8e>
    acb2:	bf00      	nop
    acb4:	00021fdc 	.word	0x00021fdc
    acb8:	00020518 	.word	0x00020518

0000acbc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    acbc:	b590      	push	{r4, r7, lr}
    acbe:	b083      	sub	sp, #12
    acc0:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    acc2:	f7ff ffa5 	bl	ac10 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    acc6:	b088      	sub	sp, #32
    acc8:	466b      	mov	r3, sp
    acca:	f113 0210 	adds.w	r2, r3, #16
    acce:	d031      	beq.n	ad34 <adv_timeout+0x78>
    acd0:	210c      	movs	r1, #12
    acd2:	b11a      	cbz	r2, acdc <adv_timeout+0x20>
    acd4:	2904      	cmp	r1, #4
    acd6:	dd01      	ble.n	acdc <adv_timeout+0x20>
    acd8:	4c19      	ldr	r4, [pc, #100]	; (ad40 <adv_timeout+0x84>)
    acda:	615c      	str	r4, [r3, #20]
    acdc:	b112      	cbz	r2, ace4 <adv_timeout+0x28>
    acde:	2908      	cmp	r1, #8
    ace0:	dd00      	ble.n	ace4 <adv_timeout+0x28>
    ace2:	6198      	str	r0, [r3, #24]
    ace4:	290b      	cmp	r1, #11
    ace6:	dd28      	ble.n	ad3a <adv_timeout+0x7e>
    ace8:	f04f 0c0c 	mov.w	ip, #12
    acec:	b13a      	cbz	r2, acfe <adv_timeout+0x42>
    acee:	2103      	movs	r1, #3
    acf0:	7139      	strb	r1, [r7, #4]
    acf2:	2100      	movs	r1, #0
    acf4:	7179      	strb	r1, [r7, #5]
    acf6:	71b9      	strb	r1, [r7, #6]
    acf8:	71f9      	strb	r1, [r7, #7]
    acfa:	6878      	ldr	r0, [r7, #4]
    acfc:	6118      	str	r0, [r3, #16]
    acfe:	2100      	movs	r1, #0
    ad00:	f36f 0100 	bfc	r1, #0, #1
    ad04:	f36f 0141 	bfc	r1, #1, #1
    ad08:	f36f 0182 	bfc	r1, #2, #1
    ad0c:	f36f 01c5 	bfc	r1, #3, #3
    ad10:	2302      	movs	r3, #2
    ad12:	f363 1188 	bfi	r1, r3, #6, #3
    ad16:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    ad1a:	f36c 2152 	bfi	r1, ip, #9, #10
    ad1e:	f36f 41de 	bfc	r1, #19, #12
    ad22:	f36f 71df 	bfc	r1, #31, #1
    ad26:	2300      	movs	r3, #0
    ad28:	4806      	ldr	r0, [pc, #24]	; (ad44 <adv_timeout+0x88>)
    ad2a:	f7f8 fccf 	bl	36cc <z_impl_z_log_msg_static_create>
}
    ad2e:	370c      	adds	r7, #12
    ad30:	46bd      	mov	sp, r7
    ad32:	bd90      	pop	{r4, r7, pc}
	BT_WARN("Failed to stop advertising: %d", err);
    ad34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ad38:	e7cb      	b.n	acd2 <adv_timeout+0x16>
    ad3a:	f06f 0c1b 	mvn.w	ip, #27
    ad3e:	e7d5      	b.n	acec <adv_timeout+0x30>
    ad40:	00021ff0 	.word	0x00021ff0
    ad44:	00020518 	.word	0x00020518

0000ad48 <prng_reseed>:
#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
{
    ad48:	b530      	push	{r4, r5, lr}
    ad4a:	b095      	sub	sp, #84	; 0x54
    ad4c:	4604      	mov	r4, r0
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
    ad4e:	2120      	movs	r1, #32
    ad50:	a806      	add	r0, sp, #24
    ad52:	f7fe f91f 	bl	8f94 <bt_hci_le_rand>
	if (ret) {
    ad56:	4605      	mov	r5, r0
    ad58:	b110      	cbz	r0, ad60 <prng_reseed+0x18>
		BT_ERR("Failed to re-seed PRNG");
		return -EIO;
	}

	return 0;
}
    ad5a:	4628      	mov	r0, r5
    ad5c:	b015      	add	sp, #84	; 0x54
    ad5e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_uptime_ticks();
    ad60:	f015 f81d 	bl	1fd9e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    ad64:	014a      	lsls	r2, r1, #5
    ad66:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    ad6a:	0143      	lsls	r3, r0, #5
    ad6c:	1a1b      	subs	r3, r3, r0
    ad6e:	eb62 0201 	sbc.w	r2, r2, r1
    ad72:	0092      	lsls	r2, r2, #2
    ad74:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    ad78:	009b      	lsls	r3, r3, #2
    ad7a:	181b      	adds	r3, r3, r0
    ad7c:	eb42 0101 	adc.w	r1, r2, r1
    ad80:	00c9      	lsls	r1, r1, #3
    ad82:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    ad86:	f3c3 3310 	ubfx	r3, r3, #12, #17
    ad8a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    ad8e:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
    ad90:	9304      	str	r3, [sp, #16]
    ad92:	9105      	str	r1, [sp, #20]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    ad94:	2308      	movs	r3, #8
    ad96:	9300      	str	r3, [sp, #0]
    ad98:	ab04      	add	r3, sp, #16
    ad9a:	2220      	movs	r2, #32
    ad9c:	a906      	add	r1, sp, #24
    ad9e:	4620      	mov	r0, r4
    ada0:	f00e ffd0 	bl	19d44 <tc_hmac_prng_reseed>
	if (ret == TC_CRYPTO_FAIL) {
    ada4:	2800      	cmp	r0, #0
    ada6:	d1d8      	bne.n	ad5a <prng_reseed+0x12>
		BT_ERR("Failed to re-seed PRNG");
    ada8:	4b13      	ldr	r3, [pc, #76]	; (adf8 <prng_reseed+0xb0>)
    adaa:	9313      	str	r3, [sp, #76]	; 0x4c
    adac:	2302      	movs	r3, #2
    adae:	f88d 300c 	strb.w	r3, [sp, #12]
    adb2:	2300      	movs	r3, #0
    adb4:	f88d 300d 	strb.w	r3, [sp, #13]
    adb8:	f88d 300e 	strb.w	r3, [sp, #14]
    adbc:	f88d 300f 	strb.w	r3, [sp, #15]
    adc0:	9a03      	ldr	r2, [sp, #12]
    adc2:	9212      	str	r2, [sp, #72]	; 0x48
    adc4:	4619      	mov	r1, r3
    adc6:	f363 0100 	bfi	r1, r3, #0, #1
    adca:	f363 0141 	bfi	r1, r3, #1, #1
    adce:	f363 0182 	bfi	r1, r3, #2, #1
    add2:	f363 01c5 	bfi	r1, r3, #3, #3
    add6:	2201      	movs	r2, #1
    add8:	f362 1188 	bfi	r1, r2, #6, #3
    addc:	2208      	movs	r2, #8
    adde:	f362 2152 	bfi	r1, r2, #9, #10
    ade2:	f363 41de 	bfi	r1, r3, #19, #12
    ade6:	f363 71df 	bfi	r1, r3, #31, #1
    adea:	aa12      	add	r2, sp, #72	; 0x48
    adec:	4803      	ldr	r0, [pc, #12]	; (adfc <prng_reseed+0xb4>)
    adee:	f7f8 fc6d 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
    adf2:	f06f 0504 	mvn.w	r5, #4
    adf6:	e7b0      	b.n	ad5a <prng_reseed+0x12>
    adf8:	00022018 	.word	0x00022018
    adfc:	00020538 	.word	0x00020538

0000ae00 <prng_init>:

int prng_init(void)
{
    ae00:	b500      	push	{lr}
    ae02:	b08b      	sub	sp, #44	; 0x2c
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
    ae04:	2108      	movs	r1, #8
    ae06:	eb0d 0001 	add.w	r0, sp, r1
    ae0a:	f7fe f8c3 	bl	8f94 <bt_hci_le_rand>
	if (ret) {
    ae0e:	b110      	cbz	r0, ae16 <prng_init+0x16>
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    ae10:	b00b      	add	sp, #44	; 0x2c
    ae12:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
    ae16:	2208      	movs	r2, #8
    ae18:	eb0d 0102 	add.w	r1, sp, r2
    ae1c:	4817      	ldr	r0, [pc, #92]	; (ae7c <prng_init+0x7c>)
    ae1e:	f00e ff6e 	bl	19cfe <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
    ae22:	b118      	cbz	r0, ae2c <prng_init+0x2c>
	return prng_reseed(&prng);
    ae24:	4815      	ldr	r0, [pc, #84]	; (ae7c <prng_init+0x7c>)
    ae26:	f7ff ff8f 	bl	ad48 <prng_reseed>
    ae2a:	e7f1      	b.n	ae10 <prng_init+0x10>
		BT_ERR("Failed to initialize PRNG");
    ae2c:	4b14      	ldr	r3, [pc, #80]	; (ae80 <prng_init+0x80>)
    ae2e:	9309      	str	r3, [sp, #36]	; 0x24
    ae30:	2302      	movs	r3, #2
    ae32:	f88d 3004 	strb.w	r3, [sp, #4]
    ae36:	2300      	movs	r3, #0
    ae38:	f88d 3005 	strb.w	r3, [sp, #5]
    ae3c:	f88d 3006 	strb.w	r3, [sp, #6]
    ae40:	f88d 3007 	strb.w	r3, [sp, #7]
    ae44:	9a01      	ldr	r2, [sp, #4]
    ae46:	9208      	str	r2, [sp, #32]
    ae48:	4619      	mov	r1, r3
    ae4a:	f363 0100 	bfi	r1, r3, #0, #1
    ae4e:	f363 0141 	bfi	r1, r3, #1, #1
    ae52:	f363 0182 	bfi	r1, r3, #2, #1
    ae56:	f363 01c5 	bfi	r1, r3, #3, #3
    ae5a:	2201      	movs	r2, #1
    ae5c:	f362 1188 	bfi	r1, r2, #6, #3
    ae60:	2208      	movs	r2, #8
    ae62:	f362 2152 	bfi	r1, r2, #9, #10
    ae66:	f363 41de 	bfi	r1, r3, #19, #12
    ae6a:	f363 71df 	bfi	r1, r3, #31, #1
    ae6e:	aa08      	add	r2, sp, #32
    ae70:	4804      	ldr	r0, [pc, #16]	; (ae84 <prng_init+0x84>)
    ae72:	f7f8 fc2b 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
    ae76:	f06f 0004 	mvn.w	r0, #4
    ae7a:	e7c9      	b.n	ae10 <prng_init+0x10>
    ae7c:	20001378 	.word	0x20001378
    ae80:	00022030 	.word	0x00022030
    ae84:	00020538 	.word	0x00020538

0000ae88 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
    ae88:	b538      	push	{r3, r4, r5, lr}
    ae8a:	4604      	mov	r4, r0
    ae8c:	460d      	mov	r5, r1
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    ae8e:	4a0c      	ldr	r2, [pc, #48]	; (aec0 <bt_rand+0x38>)
    ae90:	f00e ff7a 	bl	19d88 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    ae94:	f1b0 3fff 	cmp.w	r0, #4294967295
    ae98:	d003      	beq.n	aea2 <bt_rand+0x1a>
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
	}

	if (ret == TC_CRYPTO_SUCCESS) {
    ae9a:	2801      	cmp	r0, #1
    ae9c:	d10c      	bne.n	aeb8 <bt_rand+0x30>
		return 0;
    ae9e:	2000      	movs	r0, #0
	}

	return -EIO;
}
    aea0:	bd38      	pop	{r3, r4, r5, pc}
		ret = prng_reseed(&prng);
    aea2:	4807      	ldr	r0, [pc, #28]	; (aec0 <bt_rand+0x38>)
    aea4:	f7ff ff50 	bl	ad48 <prng_reseed>
		if (ret) {
    aea8:	2800      	cmp	r0, #0
    aeaa:	d1f9      	bne.n	aea0 <bt_rand+0x18>
		ret = tc_hmac_prng_generate(buf, len, &prng);
    aeac:	4a04      	ldr	r2, [pc, #16]	; (aec0 <bt_rand+0x38>)
    aeae:	4629      	mov	r1, r5
    aeb0:	4620      	mov	r0, r4
    aeb2:	f00e ff69 	bl	19d88 <tc_hmac_prng_generate>
    aeb6:	e7f0      	b.n	ae9a <bt_rand+0x12>
	return -EIO;
    aeb8:	f06f 0004 	mvn.w	r0, #4
    aebc:	e7f0      	b.n	aea0 <bt_rand+0x18>
    aebe:	bf00      	nop
    aec0:	20001378 	.word	0x20001378

0000aec4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    aec4:	b538      	push	{r3, r4, r5, lr}
    aec6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    aec8:	4b0c      	ldr	r3, [pc, #48]	; (aefc <notify_connected+0x38>)
    aeca:	681c      	ldr	r4, [r3, #0]
    aecc:	e003      	b.n	aed6 <notify_connected+0x12>
		if (cb->connected) {
			cb->connected(conn, conn->err);
    aece:	7a69      	ldrb	r1, [r5, #9]
    aed0:	4628      	mov	r0, r5
    aed2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    aed4:	6924      	ldr	r4, [r4, #16]
    aed6:	b11c      	cbz	r4, aee0 <notify_connected+0x1c>
		if (cb->connected) {
    aed8:	6823      	ldr	r3, [r4, #0]
    aeda:	2b00      	cmp	r3, #0
    aedc:	d1f7      	bne.n	aece <notify_connected+0xa>
    aede:	e7f9      	b.n	aed4 <notify_connected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    aee0:	4c07      	ldr	r4, [pc, #28]	; (af00 <notify_connected+0x3c>)
    aee2:	e000      	b.n	aee6 <notify_connected+0x22>
    aee4:	3414      	adds	r4, #20
    aee6:	4b07      	ldr	r3, [pc, #28]	; (af04 <notify_connected+0x40>)
    aee8:	429c      	cmp	r4, r3
    aeea:	d206      	bcs.n	aefa <notify_connected+0x36>
		if (cb->connected) {
    aeec:	6823      	ldr	r3, [r4, #0]
    aeee:	2b00      	cmp	r3, #0
    aef0:	d0f8      	beq.n	aee4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    aef2:	7a69      	ldrb	r1, [r5, #9]
    aef4:	4628      	mov	r0, r5
    aef6:	4798      	blx	r3
    aef8:	e7f4      	b.n	aee4 <notify_connected+0x20>
		}
	}
}
    aefa:	bd38      	pop	{r3, r4, r5, pc}
    aefc:	20001fec 	.word	0x20001fec
    af00:	000204cc 	.word	0x000204cc
    af04:	000204e0 	.word	0x000204e0

0000af08 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    af08:	b538      	push	{r3, r4, r5, lr}
    af0a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    af0c:	4b0c      	ldr	r3, [pc, #48]	; (af40 <notify_disconnected+0x38>)
    af0e:	681c      	ldr	r4, [r3, #0]
    af10:	e003      	b.n	af1a <notify_disconnected+0x12>
		if (cb->disconnected) {
			cb->disconnected(conn, conn->err);
    af12:	7a69      	ldrb	r1, [r5, #9]
    af14:	4628      	mov	r0, r5
    af16:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    af18:	6924      	ldr	r4, [r4, #16]
    af1a:	b11c      	cbz	r4, af24 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    af1c:	6863      	ldr	r3, [r4, #4]
    af1e:	2b00      	cmp	r3, #0
    af20:	d1f7      	bne.n	af12 <notify_disconnected+0xa>
    af22:	e7f9      	b.n	af18 <notify_disconnected+0x10>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    af24:	4c07      	ldr	r4, [pc, #28]	; (af44 <notify_disconnected+0x3c>)
    af26:	e000      	b.n	af2a <notify_disconnected+0x22>
    af28:	3414      	adds	r4, #20
    af2a:	4b07      	ldr	r3, [pc, #28]	; (af48 <notify_disconnected+0x40>)
    af2c:	429c      	cmp	r4, r3
    af2e:	d206      	bcs.n	af3e <notify_disconnected+0x36>
		if (cb->disconnected) {
    af30:	6863      	ldr	r3, [r4, #4]
    af32:	2b00      	cmp	r3, #0
    af34:	d0f8      	beq.n	af28 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
    af36:	7a69      	ldrb	r1, [r5, #9]
    af38:	4628      	mov	r0, r5
    af3a:	4798      	blx	r3
    af3c:	e7f4      	b.n	af28 <notify_disconnected+0x20>
		}
	}
}
    af3e:	bd38      	pop	{r3, r4, r5, pc}
    af40:	20001fec 	.word	0x20001fec
    af44:	000204cc 	.word	0x000204cc
    af48:	000204e0 	.word	0x000204e0

0000af4c <tx_free>:
{
    af4c:	b508      	push	{r3, lr}
    af4e:	4601      	mov	r1, r0
	tx->cb = NULL;
    af50:	2300      	movs	r3, #0
    af52:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
    af54:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
    af56:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    af58:	4801      	ldr	r0, [pc, #4]	; (af60 <tx_free+0x14>)
    af5a:	f014 fb51 	bl	1f600 <k_queue_append>
}
    af5e:	bd08      	pop	{r3, pc}
    af60:	20000740 	.word	0x20000740

0000af64 <conn_tx_alloc>:
{
    af64:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
    af66:	f00c f819 	bl	16f9c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    af6a:	4b08      	ldr	r3, [pc, #32]	; (af8c <conn_tx_alloc+0x28>)
    af6c:	4283      	cmp	r3, r0
    af6e:	d007      	beq.n	af80 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
    af70:	f04f 32ff 	mov.w	r2, #4294967295
    af74:	f04f 33ff 	mov.w	r3, #4294967295
    af78:	4805      	ldr	r0, [pc, #20]	; (af90 <conn_tx_alloc+0x2c>)
    af7a:	f00b f9dd 	bl	16338 <z_impl_k_queue_get>
}
    af7e:	bd08      	pop	{r3, pc}
    af80:	2200      	movs	r2, #0
    af82:	2300      	movs	r3, #0
    af84:	4802      	ldr	r0, [pc, #8]	; (af90 <conn_tx_alloc+0x2c>)
    af86:	f00b f9d7 	bl	16338 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
    af8a:	e7f8      	b.n	af7e <conn_tx_alloc+0x1a>
    af8c:	200017d0 	.word	0x200017d0
    af90:	20000740 	.word	0x20000740

0000af94 <bt_conn_get_pkts>:
}
    af94:	4800      	ldr	r0, [pc, #0]	; (af98 <bt_conn_get_pkts+0x4>)
    af96:	4770      	bx	lr
    af98:	20000100 	.word	0x20000100

0000af9c <send_frag>:
{
    af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afa0:	b083      	sub	sp, #12
    afa2:	af00      	add	r7, sp, #0
    afa4:	4605      	mov	r5, r0
    afa6:	460e      	mov	r6, r1
    afa8:	4692      	mov	sl, r2
    afaa:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    afac:	f8d1 8014 	ldr.w	r8, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    afb0:	f7ff fff0 	bl	af94 <bt_conn_get_pkts>
    afb4:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
    afb6:	f04f 32ff 	mov.w	r2, #4294967295
    afba:	f04f 33ff 	mov.w	r3, #4294967295
    afbe:	f00b fa1d 	bl	163fc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    afc2:	7aab      	ldrb	r3, [r5, #10]
    afc4:	2b07      	cmp	r3, #7
    afc6:	f040 80a3 	bne.w	b110 <send_frag+0x174>
    afca:	f04f 0220 	mov.w	r2, #32
    afce:	f3ef 8311 	mrs	r3, BASEPRI
    afd2:	f382 8812 	msr	BASEPRI_MAX, r2
    afd6:	f3bf 8f6f 	isb	sy
	if (tx) {
    afda:	f1b8 0f00 	cmp.w	r8, #0
    afde:	d01a      	beq.n	b016 <send_frag+0x7a>
	parent->next = child;
    afe0:	2200      	movs	r2, #0
    afe2:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    afe6:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
    afe8:	b182      	cbz	r2, b00c <send_frag+0x70>
	parent->next = child;
    afea:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    afee:	f8c5 8018 	str.w	r8, [r5, #24]
	__asm__ volatile(
    aff2:	f383 8811 	msr	BASEPRI, r3
    aff6:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
    affa:	4652      	mov	r2, sl
    affc:	4631      	mov	r1, r6
    affe:	4628      	mov	r0, r5
    b000:	f00f fc17 	bl	1a832 <send_acl>
	if (err) {
    b004:	4684      	mov	ip, r0
    b006:	b998      	cbnz	r0, b030 <send_frag+0x94>
	return true;
    b008:	2001      	movs	r0, #1
    b00a:	e08f      	b.n	b12c <send_frag+0x190>
    b00c:	f8c5 8018 	str.w	r8, [r5, #24]
	list->head = node;
    b010:	f8c5 8014 	str.w	r8, [r5, #20]
}
    b014:	e7ed      	b.n	aff2 <send_frag+0x56>
	return list->tail;
    b016:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
    b018:	b13a      	cbz	r2, b02a <send_frag+0x8e>
			pending_no_cb = &tail_tx->pending_no_cb;
    b01a:	f102 0b0c 	add.w	fp, r2, #12
		(*pending_no_cb)++;
    b01e:	f8db 2000 	ldr.w	r2, [fp]
    b022:	3201      	adds	r2, #1
    b024:	f8cb 2000 	str.w	r2, [fp]
    b028:	e7e3      	b.n	aff2 <send_frag+0x56>
			pending_no_cb = &conn->pending_no_cb;
    b02a:	f105 0b1c 	add.w	fp, r5, #28
    b02e:	e7f6      	b.n	b01e <send_frag+0x82>
		BT_ERR("Unable to send to driver (err %d)", err);
    b030:	46ea      	mov	sl, sp
    b032:	b088      	sub	sp, #32
    b034:	466b      	mov	r3, sp
    b036:	f113 0210 	adds.w	r2, r3, #16
    b03a:	d045      	beq.n	b0c8 <send_frag+0x12c>
    b03c:	210c      	movs	r1, #12
    b03e:	b11a      	cbz	r2, b048 <send_frag+0xac>
    b040:	2904      	cmp	r1, #4
    b042:	dd01      	ble.n	b048 <send_frag+0xac>
    b044:	483e      	ldr	r0, [pc, #248]	; (b140 <send_frag+0x1a4>)
    b046:	6158      	str	r0, [r3, #20]
    b048:	b11a      	cbz	r2, b052 <send_frag+0xb6>
    b04a:	2908      	cmp	r1, #8
    b04c:	dd01      	ble.n	b052 <send_frag+0xb6>
    b04e:	f8c3 c018 	str.w	ip, [r3, #24]
    b052:	290b      	cmp	r1, #11
    b054:	dd3b      	ble.n	b0ce <send_frag+0x132>
    b056:	f04f 0c0c 	mov.w	ip, #12
    b05a:	b13a      	cbz	r2, b06c <send_frag+0xd0>
    b05c:	2103      	movs	r1, #3
    b05e:	7139      	strb	r1, [r7, #4]
    b060:	2100      	movs	r1, #0
    b062:	7179      	strb	r1, [r7, #5]
    b064:	71b9      	strb	r1, [r7, #6]
    b066:	71f9      	strb	r1, [r7, #7]
    b068:	6878      	ldr	r0, [r7, #4]
    b06a:	6118      	str	r0, [r3, #16]
    b06c:	2100      	movs	r1, #0
    b06e:	f36f 0100 	bfc	r1, #0, #1
    b072:	f36f 0141 	bfc	r1, #1, #1
    b076:	f36f 0182 	bfc	r1, #2, #1
    b07a:	f36f 01c5 	bfc	r1, #3, #3
    b07e:	2301      	movs	r3, #1
    b080:	f363 1188 	bfi	r1, r3, #6, #3
    b084:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    b088:	f36c 2152 	bfi	r1, ip, #9, #10
    b08c:	f36f 41de 	bfc	r1, #19, #12
    b090:	f36f 71df 	bfc	r1, #31, #1
    b094:	2300      	movs	r3, #0
    b096:	482b      	ldr	r0, [pc, #172]	; (b144 <send_frag+0x1a8>)
    b098:	f7f8 fb18 	bl	36cc <z_impl_z_log_msg_static_create>
    b09c:	46d5      	mov	sp, sl
	__asm__ volatile(
    b09e:	f04f 0320 	mov.w	r3, #32
    b0a2:	f3ef 8111 	mrs	r1, BASEPRI
    b0a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b0aa:	f3bf 8f6f 	isb	sy
		if (tx) {
    b0ae:	f1b8 0f00 	cmp.w	r8, #0
    b0b2:	d024      	beq.n	b0fe <send_frag+0x162>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
    b0b4:	f105 0014 	add.w	r0, r5, #20
	return list->head;
    b0b8:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b0ba:	2200      	movs	r2, #0
    b0bc:	b323      	cbz	r3, b108 <send_frag+0x16c>
    b0be:	4598      	cmp	r8, r3
    b0c0:	d008      	beq.n	b0d4 <send_frag+0x138>
    b0c2:	461a      	mov	r2, r3
    b0c4:	681b      	ldr	r3, [r3, #0]
    b0c6:	e7f9      	b.n	b0bc <send_frag+0x120>
		BT_ERR("Unable to send to driver (err %d)", err);
    b0c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b0cc:	e7b7      	b.n	b03e <send_frag+0xa2>
    b0ce:	f06f 0c1b 	mvn.w	ip, #27
    b0d2:	e7c2      	b.n	b05a <send_frag+0xbe>
Z_GENLIST_REMOVE(slist, snode)
    b0d4:	b14a      	cbz	r2, b0ea <send_frag+0x14e>
	return node->next;
    b0d6:	f8d8 3000 	ldr.w	r3, [r8]
	parent->next = child;
    b0da:	6013      	str	r3, [r2, #0]
	return list->tail;
    b0dc:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    b0de:	4598      	cmp	r8, r3
    b0e0:	d00b      	beq.n	b0fa <send_frag+0x15e>
	parent->next = child;
    b0e2:	2300      	movs	r3, #0
    b0e4:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_REMOVE(slist, snode)
    b0e8:	e00e      	b.n	b108 <send_frag+0x16c>
	return node->next;
    b0ea:	f8d8 3000 	ldr.w	r3, [r8]
	list->head = node;
    b0ee:	616b      	str	r3, [r5, #20]
	return list->tail;
    b0f0:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    b0f2:	4590      	cmp	r8, r2
    b0f4:	d1f5      	bne.n	b0e2 <send_frag+0x146>
	list->tail = node;
    b0f6:	6043      	str	r3, [r0, #4]
}
    b0f8:	e7f3      	b.n	b0e2 <send_frag+0x146>
	list->tail = node;
    b0fa:	6042      	str	r2, [r0, #4]
}
    b0fc:	e7f1      	b.n	b0e2 <send_frag+0x146>
			(*pending_no_cb)--;
    b0fe:	f8db 3000 	ldr.w	r3, [fp]
    b102:	3b01      	subs	r3, #1
    b104:	f8cb 3000 	str.w	r3, [fp]
	__asm__ volatile(
    b108:	f381 8811 	msr	BASEPRI, r1
    b10c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b110:	4648      	mov	r0, r9
    b112:	f00b f94b 	bl	163ac <z_impl_k_sem_give>
	if (tx) {
    b116:	f1b8 0f00 	cmp.w	r8, #0
    b11a:	d005      	beq.n	b128 <send_frag+0x18c>
		tx_data(buf)->tx = NULL;
    b11c:	2300      	movs	r3, #0
    b11e:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
    b120:	4641      	mov	r1, r8
    b122:	4628      	mov	r0, r5
    b124:	f00f fb78 	bl	1a818 <conn_tx_destroy>
	if (always_consume) {
    b128:	b924      	cbnz	r4, b134 <send_frag+0x198>
	return false;
    b12a:	4620      	mov	r0, r4
}
    b12c:	370c      	adds	r7, #12
    b12e:	46bd      	mov	sp, r7
    b130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
    b134:	4630      	mov	r0, r6
    b136:	f011 fca9 	bl	1ca8c <net_buf_unref>
	return false;
    b13a:	2000      	movs	r0, #0
    b13c:	e7f6      	b.n	b12c <send_frag+0x190>
    b13e:	bf00      	nop
    b140:	00021c60 	.word	0x00021c60
    b144:	00020530 	.word	0x00020530

0000b148 <bt_conn_new>:
{
    b148:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    b14a:	2300      	movs	r3, #0
    b14c:	428b      	cmp	r3, r1
    b14e:	d225      	bcs.n	b19c <bt_conn_new+0x54>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    b150:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    b154:	eb00 1484 	add.w	r4, r0, r4, lsl #6
    b158:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b15c:	f04f 0c01 	mov.w	ip, #1
    b160:	e8d2 efef 	ldaex	lr, [r2]
    b164:	f1be 0f00 	cmp.w	lr, #0
    b168:	d103      	bne.n	b172 <bt_conn_new+0x2a>
    b16a:	e8c2 cfe5 	stlex	r5, ip, [r2]
    b16e:	2d00      	cmp	r5, #0
    b170:	d1f6      	bne.n	b160 <bt_conn_new+0x18>
    b172:	d111      	bne.n	b198 <bt_conn_new+0x50>
	if (!conn) {
    b174:	b174      	cbz	r4, b194 <bt_conn_new+0x4c>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    b176:	22b8      	movs	r2, #184	; 0xb8
    b178:	2100      	movs	r1, #0
    b17a:	4620      	mov	r0, r4
    b17c:	f00e ff94 	bl	1a0a8 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    b180:	4907      	ldr	r1, [pc, #28]	; (b1a0 <bt_conn_new+0x58>)
    b182:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b186:	f014 fb45 	bl	1f814 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    b18a:	4906      	ldr	r1, [pc, #24]	; (b1a4 <bt_conn_new+0x5c>)
    b18c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b190:	f014 fb0c 	bl	1f7ac <k_work_init>
}
    b194:	4620      	mov	r0, r4
    b196:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
    b198:	4463      	add	r3, ip
    b19a:	e7d7      	b.n	b14c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
    b19c:	2400      	movs	r4, #0
    b19e:	e7e9      	b.n	b174 <bt_conn_new+0x2c>
    b1a0:	0000bd25 	.word	0x0000bd25
    b1a4:	0001a80f 	.word	0x0001a80f

0000b1a8 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
    b1a8:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    b1aa:	2101      	movs	r1, #1
    b1ac:	4801      	ldr	r0, [pc, #4]	; (b1b4 <acl_conn_new+0xc>)
    b1ae:	f7ff ffcb 	bl	b148 <bt_conn_new>
}
    b1b2:	bd08      	pop	{r3, pc}
    b1b4:	200014b0 	.word	0x200014b0

0000b1b8 <bt_acl_recv>:
{
    b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ba:	b095      	sub	sp, #84	; 0x54
    b1bc:	af00      	add	r7, sp, #0
    b1be:	4604      	mov	r4, r0
    b1c0:	460d      	mov	r5, r1
	switch (flags) {
    b1c2:	2a01      	cmp	r2, #1
    b1c4:	d07d      	beq.n	b2c2 <bt_acl_recv+0x10a>
    b1c6:	4613      	mov	r3, r2
    b1c8:	2a02      	cmp	r2, #2
    b1ca:	f040 80e7 	bne.w	b39c <bt_acl_recv+0x1e4>
		if (conn->rx) {
    b1ce:	6903      	ldr	r3, [r0, #16]
    b1d0:	b323      	cbz	r3, b21c <bt_acl_recv+0x64>
			BT_ERR("Unexpected first L2CAP frame");
    b1d2:	4b9c      	ldr	r3, [pc, #624]	; (b444 <bt_acl_recv+0x28c>)
    b1d4:	61fb      	str	r3, [r7, #28]
    b1d6:	2302      	movs	r3, #2
    b1d8:	713b      	strb	r3, [r7, #4]
    b1da:	2300      	movs	r3, #0
    b1dc:	717b      	strb	r3, [r7, #5]
    b1de:	71bb      	strb	r3, [r7, #6]
    b1e0:	71fb      	strb	r3, [r7, #7]
    b1e2:	687a      	ldr	r2, [r7, #4]
    b1e4:	61ba      	str	r2, [r7, #24]
    b1e6:	4619      	mov	r1, r3
    b1e8:	f363 0100 	bfi	r1, r3, #0, #1
    b1ec:	f363 0141 	bfi	r1, r3, #1, #1
    b1f0:	f363 0182 	bfi	r1, r3, #2, #1
    b1f4:	f363 01c5 	bfi	r1, r3, #3, #3
    b1f8:	2201      	movs	r2, #1
    b1fa:	f362 1188 	bfi	r1, r2, #6, #3
    b1fe:	2208      	movs	r2, #8
    b200:	f362 2152 	bfi	r1, r2, #9, #10
    b204:	f363 41de 	bfi	r1, r3, #19, #12
    b208:	f363 71df 	bfi	r1, r3, #31, #1
    b20c:	f107 0218 	add.w	r2, r7, #24
    b210:	488d      	ldr	r0, [pc, #564]	; (b448 <bt_acl_recv+0x290>)
    b212:	f7f8 fa5b 	bl	36cc <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
    b216:	4620      	mov	r0, r4
    b218:	f00f fb6f 	bl	1a8fa <bt_conn_reset_rx_state>
		conn->rx = buf;
    b21c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b21e:	6921      	ldr	r1, [r4, #16]
    b220:	8988      	ldrh	r0, [r1, #12]
    b222:	2801      	cmp	r0, #1
    b224:	f240 80f7 	bls.w	b416 <bt_acl_recv+0x25e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b228:	688a      	ldr	r2, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    b22a:	7855      	ldrb	r5, [r2, #1]
    b22c:	7813      	ldrb	r3, [r2, #0]
    b22e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    b232:	3304      	adds	r3, #4
    b234:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    b236:	4283      	cmp	r3, r0
    b238:	f200 80ed 	bhi.w	b416 <bt_acl_recv+0x25e>
	if (conn->rx->len > acl_total_len) {
    b23c:	f080 80fa 	bcs.w	b434 <bt_acl_recv+0x27c>
		BT_ERR("ACL len mismatch (%u > %u)",
    b240:	466d      	mov	r5, sp
    b242:	b088      	sub	sp, #32
    b244:	4669      	mov	r1, sp
    b246:	f111 0210 	adds.w	r2, r1, #16
    b24a:	f000 80ed 	beq.w	b428 <bt_acl_recv+0x270>
    b24e:	2610      	movs	r6, #16
    b250:	b12a      	cbz	r2, b25e <bt_acl_recv+0xa6>
    b252:	2e04      	cmp	r6, #4
    b254:	dd03      	ble.n	b25e <bt_acl_recv+0xa6>
    b256:	f8df c1f4 	ldr.w	ip, [pc, #500]	; b44c <bt_acl_recv+0x294>
    b25a:	f8c1 c014 	str.w	ip, [r1, #20]
    b25e:	b112      	cbz	r2, b266 <bt_acl_recv+0xae>
    b260:	2e08      	cmp	r6, #8
    b262:	dd00      	ble.n	b266 <bt_acl_recv+0xae>
    b264:	6188      	str	r0, [r1, #24]
    b266:	b112      	cbz	r2, b26e <bt_acl_recv+0xb6>
    b268:	2e0c      	cmp	r6, #12
    b26a:	dd00      	ble.n	b26e <bt_acl_recv+0xb6>
    b26c:	61cb      	str	r3, [r1, #28]
    b26e:	2e0f      	cmp	r6, #15
    b270:	f340 80dd 	ble.w	b42e <bt_acl_recv+0x276>
    b274:	2310      	movs	r3, #16
    b276:	b13a      	cbz	r2, b288 <bt_acl_recv+0xd0>
    b278:	2004      	movs	r0, #4
    b27a:	7138      	strb	r0, [r7, #4]
    b27c:	2000      	movs	r0, #0
    b27e:	7178      	strb	r0, [r7, #5]
    b280:	71b8      	strb	r0, [r7, #6]
    b282:	71f8      	strb	r0, [r7, #7]
    b284:	6878      	ldr	r0, [r7, #4]
    b286:	6108      	str	r0, [r1, #16]
    b288:	2100      	movs	r1, #0
    b28a:	f36f 0100 	bfc	r1, #0, #1
    b28e:	f36f 0141 	bfc	r1, #1, #1
    b292:	f36f 0182 	bfc	r1, #2, #1
    b296:	f36f 01c5 	bfc	r1, #3, #3
    b29a:	2001      	movs	r0, #1
    b29c:	f360 1188 	bfi	r1, r0, #6, #3
    b2a0:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
    b2a4:	f363 2152 	bfi	r1, r3, #9, #10
    b2a8:	f36f 41de 	bfc	r1, #19, #12
    b2ac:	f36f 71df 	bfc	r1, #31, #1
    b2b0:	2300      	movs	r3, #0
    b2b2:	4865      	ldr	r0, [pc, #404]	; (b448 <bt_acl_recv+0x290>)
    b2b4:	f7f8 fa0a 	bl	36cc <z_impl_z_log_msg_static_create>
    b2b8:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
    b2ba:	4620      	mov	r0, r4
    b2bc:	f00f fb1d 	bl	1a8fa <bt_conn_reset_rx_state>
		return;
    b2c0:	e0a9      	b.n	b416 <bt_acl_recv+0x25e>
		if (!conn->rx) {
    b2c2:	6900      	ldr	r0, [r0, #16]
    b2c4:	b180      	cbz	r0, b2e8 <bt_acl_recv+0x130>
		if (!buf->len) {
    b2c6:	898e      	ldrh	r6, [r1, #12]
    b2c8:	b3be      	cbz	r6, b33a <bt_acl_recv+0x182>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    b2ca:	3008      	adds	r0, #8
    b2cc:	f011 fc74 	bl	1cbb8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    b2d0:	42b0      	cmp	r0, r6
    b2d2:	d336      	bcc.n	b342 <bt_acl_recv+0x18a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    b2d4:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b2d6:	89aa      	ldrh	r2, [r5, #12]
    b2d8:	68a9      	ldr	r1, [r5, #8]
    b2da:	3008      	adds	r0, #8
    b2dc:	f011 fc26 	bl	1cb2c <net_buf_simple_add_mem>
		net_buf_unref(buf);
    b2e0:	4628      	mov	r0, r5
    b2e2:	f011 fbd3 	bl	1ca8c <net_buf_unref>
		break;
    b2e6:	e79a      	b.n	b21e <bt_acl_recv+0x66>
			BT_ERR("Unexpected L2CAP continuation");
    b2e8:	4b59      	ldr	r3, [pc, #356]	; (b450 <bt_acl_recv+0x298>)
    b2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    b2ec:	2302      	movs	r3, #2
    b2ee:	713b      	strb	r3, [r7, #4]
    b2f0:	2300      	movs	r3, #0
    b2f2:	717b      	strb	r3, [r7, #5]
    b2f4:	71bb      	strb	r3, [r7, #6]
    b2f6:	71fb      	strb	r3, [r7, #7]
    b2f8:	687a      	ldr	r2, [r7, #4]
    b2fa:	64ba      	str	r2, [r7, #72]	; 0x48
    b2fc:	4619      	mov	r1, r3
    b2fe:	f363 0100 	bfi	r1, r3, #0, #1
    b302:	f363 0141 	bfi	r1, r3, #1, #1
    b306:	f363 0182 	bfi	r1, r3, #2, #1
    b30a:	f363 01c5 	bfi	r1, r3, #3, #3
    b30e:	2201      	movs	r2, #1
    b310:	f362 1188 	bfi	r1, r2, #6, #3
    b314:	2208      	movs	r2, #8
    b316:	f362 2152 	bfi	r1, r2, #9, #10
    b31a:	f363 41de 	bfi	r1, r3, #19, #12
    b31e:	f363 71df 	bfi	r1, r3, #31, #1
    b322:	f107 0248 	add.w	r2, r7, #72	; 0x48
    b326:	4848      	ldr	r0, [pc, #288]	; (b448 <bt_acl_recv+0x290>)
    b328:	f7f8 f9d0 	bl	36cc <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
    b32c:	4620      	mov	r0, r4
    b32e:	f00f fae4 	bl	1a8fa <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    b332:	4628      	mov	r0, r5
    b334:	f011 fbaa 	bl	1ca8c <net_buf_unref>
			return;
    b338:	e06d      	b.n	b416 <bt_acl_recv+0x25e>
			net_buf_unref(buf);
    b33a:	4608      	mov	r0, r1
    b33c:	f011 fba6 	bl	1ca8c <net_buf_unref>
			return;
    b340:	e069      	b.n	b416 <bt_acl_recv+0x25e>
			BT_ERR("Not enough buffer space for L2CAP data");
    b342:	4b44      	ldr	r3, [pc, #272]	; (b454 <bt_acl_recv+0x29c>)
    b344:	637b      	str	r3, [r7, #52]	; 0x34
    b346:	2302      	movs	r3, #2
    b348:	713b      	strb	r3, [r7, #4]
    b34a:	2600      	movs	r6, #0
    b34c:	717e      	strb	r6, [r7, #5]
    b34e:	71be      	strb	r6, [r7, #6]
    b350:	71fe      	strb	r6, [r7, #7]
    b352:	687b      	ldr	r3, [r7, #4]
    b354:	633b      	str	r3, [r7, #48]	; 0x30
    b356:	4631      	mov	r1, r6
    b358:	f366 0100 	bfi	r1, r6, #0, #1
    b35c:	f366 0141 	bfi	r1, r6, #1, #1
    b360:	f366 0182 	bfi	r1, r6, #2, #1
    b364:	f366 01c5 	bfi	r1, r6, #3, #3
    b368:	2301      	movs	r3, #1
    b36a:	f363 1188 	bfi	r1, r3, #6, #3
    b36e:	2308      	movs	r3, #8
    b370:	f363 2152 	bfi	r1, r3, #9, #10
    b374:	f366 41de 	bfi	r1, r6, #19, #12
    b378:	f366 71df 	bfi	r1, r6, #31, #1
    b37c:	4633      	mov	r3, r6
    b37e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b382:	4831      	ldr	r0, [pc, #196]	; (b448 <bt_acl_recv+0x290>)
    b384:	f7f8 f9a2 	bl	36cc <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
    b388:	4632      	mov	r2, r6
    b38a:	6921      	ldr	r1, [r4, #16]
    b38c:	4620      	mov	r0, r4
    b38e:	f001 f867 	bl	c460 <bt_l2cap_recv>
			conn->rx = NULL;
    b392:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
    b394:	4628      	mov	r0, r5
    b396:	f011 fb79 	bl	1ca8c <net_buf_unref>
			return;
    b39a:	e03c      	b.n	b416 <bt_acl_recv+0x25e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b39c:	466e      	mov	r6, sp
    b39e:	b088      	sub	sp, #32
    b3a0:	4669      	mov	r1, sp
    b3a2:	f111 0210 	adds.w	r2, r1, #16
    b3a6:	d039      	beq.n	b41c <bt_acl_recv+0x264>
    b3a8:	200c      	movs	r0, #12
    b3aa:	b12a      	cbz	r2, b3b8 <bt_acl_recv+0x200>
    b3ac:	2804      	cmp	r0, #4
    b3ae:	dd03      	ble.n	b3b8 <bt_acl_recv+0x200>
    b3b0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; b458 <bt_acl_recv+0x2a0>
    b3b4:	f8c1 c014 	str.w	ip, [r1, #20]
    b3b8:	b112      	cbz	r2, b3c0 <bt_acl_recv+0x208>
    b3ba:	2808      	cmp	r0, #8
    b3bc:	dd00      	ble.n	b3c0 <bt_acl_recv+0x208>
    b3be:	618b      	str	r3, [r1, #24]
    b3c0:	280b      	cmp	r0, #11
    b3c2:	dd2e      	ble.n	b422 <bt_acl_recv+0x26a>
    b3c4:	230c      	movs	r3, #12
    b3c6:	b13a      	cbz	r2, b3d8 <bt_acl_recv+0x220>
    b3c8:	2003      	movs	r0, #3
    b3ca:	7138      	strb	r0, [r7, #4]
    b3cc:	2000      	movs	r0, #0
    b3ce:	7178      	strb	r0, [r7, #5]
    b3d0:	71b8      	strb	r0, [r7, #6]
    b3d2:	71f8      	strb	r0, [r7, #7]
    b3d4:	6878      	ldr	r0, [r7, #4]
    b3d6:	6108      	str	r0, [r1, #16]
    b3d8:	2100      	movs	r1, #0
    b3da:	f36f 0100 	bfc	r1, #0, #1
    b3de:	f36f 0141 	bfc	r1, #1, #1
    b3e2:	f36f 0182 	bfc	r1, #2, #1
    b3e6:	f36f 01c5 	bfc	r1, #3, #3
    b3ea:	2001      	movs	r0, #1
    b3ec:	f360 1188 	bfi	r1, r0, #6, #3
    b3f0:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
    b3f4:	f363 2152 	bfi	r1, r3, #9, #10
    b3f8:	f36f 41de 	bfc	r1, #19, #12
    b3fc:	f36f 71df 	bfc	r1, #31, #1
    b400:	2300      	movs	r3, #0
    b402:	4811      	ldr	r0, [pc, #68]	; (b448 <bt_acl_recv+0x290>)
    b404:	f7f8 f962 	bl	36cc <z_impl_z_log_msg_static_create>
    b408:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
    b40a:	4620      	mov	r0, r4
    b40c:	f00f fa75 	bl	1a8fa <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    b410:	4628      	mov	r0, r5
    b412:	f011 fb3b 	bl	1ca8c <net_buf_unref>
}
    b416:	3754      	adds	r7, #84	; 0x54
    b418:	46bd      	mov	sp, r7
    b41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b41c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b420:	e7c3      	b.n	b3aa <bt_acl_recv+0x1f2>
    b422:	f06f 031b 	mvn.w	r3, #27
    b426:	e7ce      	b.n	b3c6 <bt_acl_recv+0x20e>
		BT_ERR("ACL len mismatch (%u > %u)",
    b428:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    b42c:	e710      	b.n	b250 <bt_acl_recv+0x98>
    b42e:	f06f 031b 	mvn.w	r3, #27
    b432:	e720      	b.n	b276 <bt_acl_recv+0xbe>
	conn->rx = NULL;
    b434:	2300      	movs	r3, #0
    b436:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    b438:	2201      	movs	r2, #1
    b43a:	4620      	mov	r0, r4
    b43c:	f001 f810 	bl	c460 <bt_l2cap_recv>
    b440:	e7e9      	b.n	b416 <bt_acl_recv+0x25e>
    b442:	bf00      	nop
    b444:	00022058 	.word	0x00022058
    b448:	00020530 	.word	0x00020530
    b44c:	000220e0 	.word	0x000220e0
    b450:	00022078 	.word	0x00022078
    b454:	00022098 	.word	0x00022098
    b458:	000220c0 	.word	0x000220c0

0000b45c <bt_conn_send_cb>:
{
    b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b460:	b094      	sub	sp, #80	; 0x50
    b462:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    b464:	7a83      	ldrb	r3, [r0, #10]
    b466:	2b07      	cmp	r3, #7
    b468:	d11b      	bne.n	b4a2 <bt_conn_send_cb+0x46>
    b46a:	4604      	mov	r4, r0
    b46c:	460d      	mov	r5, r1
    b46e:	4616      	mov	r6, r2
	if (cb) {
    b470:	2a00      	cmp	r2, #0
    b472:	f000 8090 	beq.w	b596 <bt_conn_send_cb+0x13a>
		tx = conn_tx_alloc();
    b476:	f7ff fd75 	bl	af64 <conn_tx_alloc>
		if (!tx) {
    b47a:	4680      	mov	r8, r0
    b47c:	2800      	cmp	r0, #0
    b47e:	d038      	beq.n	b4f2 <bt_conn_send_cb+0x96>
		if (conn->state != BT_CONN_CONNECTED) {
    b480:	7aa3      	ldrb	r3, [r4, #10]
    b482:	2b07      	cmp	r3, #7
    b484:	d15d      	bne.n	b542 <bt_conn_send_cb+0xe6>
		tx->cb = cb;
    b486:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
    b488:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
    b48a:	2300      	movs	r3, #0
    b48c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    b48e:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    b490:	4629      	mov	r1, r5
    b492:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b496:	f011 faeb 	bl	1ca70 <net_buf_put>
	return 0;
    b49a:	2000      	movs	r0, #0
}
    b49c:	b014      	add	sp, #80	; 0x50
    b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
    b4a2:	4b3e      	ldr	r3, [pc, #248]	; (b59c <bt_conn_send_cb+0x140>)
    b4a4:	9313      	str	r3, [sp, #76]	; 0x4c
    b4a6:	2302      	movs	r3, #2
    b4a8:	f88d 3004 	strb.w	r3, [sp, #4]
    b4ac:	2300      	movs	r3, #0
    b4ae:	f88d 3005 	strb.w	r3, [sp, #5]
    b4b2:	f88d 3006 	strb.w	r3, [sp, #6]
    b4b6:	f88d 3007 	strb.w	r3, [sp, #7]
    b4ba:	9a01      	ldr	r2, [sp, #4]
    b4bc:	9212      	str	r2, [sp, #72]	; 0x48
    b4be:	4619      	mov	r1, r3
    b4c0:	f363 0100 	bfi	r1, r3, #0, #1
    b4c4:	f363 0141 	bfi	r1, r3, #1, #1
    b4c8:	f363 0182 	bfi	r1, r3, #2, #1
    b4cc:	f363 01c5 	bfi	r1, r3, #3, #3
    b4d0:	2201      	movs	r2, #1
    b4d2:	f362 1188 	bfi	r1, r2, #6, #3
    b4d6:	2208      	movs	r2, #8
    b4d8:	f362 2152 	bfi	r1, r2, #9, #10
    b4dc:	f363 41de 	bfi	r1, r3, #19, #12
    b4e0:	f363 71df 	bfi	r1, r3, #31, #1
    b4e4:	aa12      	add	r2, sp, #72	; 0x48
    b4e6:	482e      	ldr	r0, [pc, #184]	; (b5a0 <bt_conn_send_cb+0x144>)
    b4e8:	f7f8 f8f0 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
    b4ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b4f0:	e7d4      	b.n	b49c <bt_conn_send_cb+0x40>
			BT_ERR("Unable to allocate TX context");
    b4f2:	4b2c      	ldr	r3, [pc, #176]	; (b5a4 <bt_conn_send_cb+0x148>)
    b4f4:	930d      	str	r3, [sp, #52]	; 0x34
    b4f6:	2302      	movs	r3, #2
    b4f8:	f88d 3004 	strb.w	r3, [sp, #4]
    b4fc:	2300      	movs	r3, #0
    b4fe:	f88d 3005 	strb.w	r3, [sp, #5]
    b502:	f88d 3006 	strb.w	r3, [sp, #6]
    b506:	f88d 3007 	strb.w	r3, [sp, #7]
    b50a:	9a01      	ldr	r2, [sp, #4]
    b50c:	920c      	str	r2, [sp, #48]	; 0x30
    b50e:	4619      	mov	r1, r3
    b510:	f363 0100 	bfi	r1, r3, #0, #1
    b514:	f363 0141 	bfi	r1, r3, #1, #1
    b518:	f363 0182 	bfi	r1, r3, #2, #1
    b51c:	f363 01c5 	bfi	r1, r3, #3, #3
    b520:	2201      	movs	r2, #1
    b522:	f362 1188 	bfi	r1, r2, #6, #3
    b526:	2208      	movs	r2, #8
    b528:	f362 2152 	bfi	r1, r2, #9, #10
    b52c:	f363 41de 	bfi	r1, r3, #19, #12
    b530:	f363 71df 	bfi	r1, r3, #31, #1
    b534:	aa0c      	add	r2, sp, #48	; 0x30
    b536:	481a      	ldr	r0, [pc, #104]	; (b5a0 <bt_conn_send_cb+0x144>)
    b538:	f7f8 f8c8 	bl	36cc <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
    b53c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b540:	e7ac      	b.n	b49c <bt_conn_send_cb+0x40>
			BT_WARN("Disconnected while allocating context");
    b542:	4b19      	ldr	r3, [pc, #100]	; (b5a8 <bt_conn_send_cb+0x14c>)
    b544:	9307      	str	r3, [sp, #28]
    b546:	2202      	movs	r2, #2
    b548:	f88d 2004 	strb.w	r2, [sp, #4]
    b54c:	2300      	movs	r3, #0
    b54e:	f88d 3005 	strb.w	r3, [sp, #5]
    b552:	f88d 3006 	strb.w	r3, [sp, #6]
    b556:	f88d 3007 	strb.w	r3, [sp, #7]
    b55a:	9901      	ldr	r1, [sp, #4]
    b55c:	9106      	str	r1, [sp, #24]
    b55e:	4619      	mov	r1, r3
    b560:	f363 0100 	bfi	r1, r3, #0, #1
    b564:	f363 0141 	bfi	r1, r3, #1, #1
    b568:	f363 0182 	bfi	r1, r3, #2, #1
    b56c:	f363 01c5 	bfi	r1, r3, #3, #3
    b570:	f362 1188 	bfi	r1, r2, #6, #3
    b574:	2208      	movs	r2, #8
    b576:	f362 2152 	bfi	r1, r2, #9, #10
    b57a:	f363 41de 	bfi	r1, r3, #19, #12
    b57e:	f363 71df 	bfi	r1, r3, #31, #1
    b582:	aa06      	add	r2, sp, #24
    b584:	4806      	ldr	r0, [pc, #24]	; (b5a0 <bt_conn_send_cb+0x144>)
    b586:	f7f8 f8a1 	bl	36cc <z_impl_z_log_msg_static_create>
			tx_free(tx);
    b58a:	4640      	mov	r0, r8
    b58c:	f7ff fcde 	bl	af4c <tx_free>
			return -ENOTCONN;
    b590:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b594:	e782      	b.n	b49c <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
    b596:	2300      	movs	r3, #0
    b598:	614b      	str	r3, [r1, #20]
    b59a:	e779      	b.n	b490 <bt_conn_send_cb+0x34>
    b59c:	000220fc 	.word	0x000220fc
    b5a0:	00020530 	.word	0x00020530
    b5a4:	0002210c 	.word	0x0002210c
    b5a8:	0002212c 	.word	0x0002212c

0000b5ac <bt_conn_prepare_events>:
{
    b5ac:	b570      	push	{r4, r5, r6, lr}
    b5ae:	4606      	mov	r6, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    b5b0:	4c0e      	ldr	r4, [pc, #56]	; (b5ec <bt_conn_prepare_events+0x40>)
    b5b2:	4620      	mov	r0, r4
    b5b4:	f014 fce7 	bl	1ff86 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b5b8:	4623      	mov	r3, r4
    b5ba:	2200      	movs	r2, #0
    b5bc:	2101      	movs	r1, #1
    b5be:	4630      	mov	r0, r6
    b5c0:	f014 fcb9 	bl	1ff36 <k_poll_event_init>
    b5c4:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b5c6:	2400      	movs	r4, #0
    b5c8:	b10c      	cbz	r4, b5ce <bt_conn_prepare_events+0x22>
}
    b5ca:	4628      	mov	r0, r5
    b5cc:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
    b5ce:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
    b5d2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    b5d6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    b5da:	4b05      	ldr	r3, [pc, #20]	; (b5f0 <bt_conn_prepare_events+0x44>)
    b5dc:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    b5e0:	f00f f9b5 	bl	1a94e <conn_prepare_events>
    b5e4:	b900      	cbnz	r0, b5e8 <bt_conn_prepare_events+0x3c>
			ev_count++;
    b5e6:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    b5e8:	3401      	adds	r4, #1
    b5ea:	e7ed      	b.n	b5c8 <bt_conn_prepare_events+0x1c>
    b5ec:	2000030c 	.word	0x2000030c
    b5f0:	200014b0 	.word	0x200014b0

0000b5f4 <bt_conn_lookup_handle>:
{
    b5f4:	b508      	push	{r3, lr}
    b5f6:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b5f8:	2101      	movs	r1, #1
    b5fa:	4802      	ldr	r0, [pc, #8]	; (b604 <bt_conn_lookup_handle+0x10>)
    b5fc:	f00f fa14 	bl	1aa28 <conn_lookup_handle>
}
    b600:	bd08      	pop	{r3, pc}
    b602:	bf00      	nop
    b604:	200014b0 	.word	0x200014b0

0000b608 <bt_conn_set_state>:
{
    b608:	b5f0      	push	{r4, r5, r6, r7, lr}
    b60a:	b083      	sub	sp, #12
    b60c:	af00      	add	r7, sp, #0
    b60e:	460d      	mov	r5, r1
	if (conn->state == state) {
    b610:	7a86      	ldrb	r6, [r0, #10]
    b612:	428e      	cmp	r6, r1
    b614:	d014      	beq.n	b640 <bt_conn_set_state+0x38>
    b616:	4604      	mov	r4, r0
	conn->state = state;
    b618:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    b61a:	b916      	cbnz	r6, b622 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
    b61c:	7883      	ldrb	r3, [r0, #2]
    b61e:	2b08      	cmp	r3, #8
    b620:	d17c      	bne.n	b71c <bt_conn_set_state+0x114>
	switch (conn->state) {
    b622:	7aa3      	ldrb	r3, [r4, #10]
    b624:	2b08      	cmp	r3, #8
    b626:	f200 812b 	bhi.w	b880 <bt_conn_set_state+0x278>
    b62a:	e8df f013 	tbh	[pc, r3, lsl #1]
    b62e:	0093      	.short	0x0093
    b630:	00530125 	.word	0x00530125
    b634:	00530053 	.word	0x00530053
    b638:	00530053 	.word	0x00530053
    b63c:	0053007a 	.word	0x0053007a
	switch (state) {
    b640:	2908      	cmp	r1, #8
    b642:	d858      	bhi.n	b6f6 <bt_conn_set_state+0xee>
    b644:	e8df f001 	tbb	[pc, r1]
    b648:	4f495905 	.word	0x4f495905
    b64c:	53514b4d 	.word	0x53514b4d
    b650:	55          	.byte	0x55
    b651:	00          	.byte	0x00
    b652:	48a9      	ldr	r0, [pc, #676]	; (b8f8 <bt_conn_set_state+0x2f0>)
		BT_WARN("no transition %s", state2str(state));
    b654:	2302      	movs	r3, #2
    b656:	713b      	strb	r3, [r7, #4]
    b658:	466c      	mov	r4, sp
    b65a:	b088      	sub	sp, #32
    b65c:	466b      	mov	r3, sp
    b65e:	f113 0210 	adds.w	r2, r3, #16
    b662:	d04c      	beq.n	b6fe <bt_conn_set_state+0xf6>
    b664:	250d      	movs	r5, #13
    b666:	b11a      	cbz	r2, b670 <bt_conn_set_state+0x68>
    b668:	2d04      	cmp	r5, #4
    b66a:	dd01      	ble.n	b670 <bt_conn_set_state+0x68>
    b66c:	49a3      	ldr	r1, [pc, #652]	; (b8fc <bt_conn_set_state+0x2f4>)
    b66e:	6159      	str	r1, [r3, #20]
    b670:	2102      	movs	r1, #2
    b672:	7039      	strb	r1, [r7, #0]
    b674:	b112      	cbz	r2, b67c <bt_conn_set_state+0x74>
    b676:	2d08      	cmp	r5, #8
    b678:	dd00      	ble.n	b67c <bt_conn_set_state+0x74>
    b67a:	6198      	str	r0, [r3, #24]
    b67c:	b122      	cbz	r2, b688 <bt_conn_set_state+0x80>
    b67e:	f103 011c 	add.w	r1, r3, #28
    b682:	2000      	movs	r0, #0
    b684:	2800      	cmp	r0, #0
    b686:	d03d      	beq.n	b704 <bt_conn_set_state+0xfc>
    b688:	2d0c      	cmp	r5, #12
    b68a:	dd44      	ble.n	b716 <bt_conn_set_state+0x10e>
    b68c:	250d      	movs	r5, #13
    b68e:	b142      	cbz	r2, b6a2 <bt_conn_set_state+0x9a>
    b690:	2103      	movs	r1, #3
    b692:	7139      	strb	r1, [r7, #4]
    b694:	2100      	movs	r1, #0
    b696:	7179      	strb	r1, [r7, #5]
    b698:	71b9      	strb	r1, [r7, #6]
    b69a:	2101      	movs	r1, #1
    b69c:	71f9      	strb	r1, [r7, #7]
    b69e:	6878      	ldr	r0, [r7, #4]
    b6a0:	6118      	str	r0, [r3, #16]
    b6a2:	2100      	movs	r1, #0
    b6a4:	f36f 0100 	bfc	r1, #0, #1
    b6a8:	f36f 0141 	bfc	r1, #1, #1
    b6ac:	f36f 0182 	bfc	r1, #2, #1
    b6b0:	f36f 01c5 	bfc	r1, #3, #3
    b6b4:	2302      	movs	r3, #2
    b6b6:	f363 1188 	bfi	r1, r3, #6, #3
    b6ba:	f3c5 0309 	ubfx	r3, r5, #0, #10
    b6be:	f363 2152 	bfi	r1, r3, #9, #10
    b6c2:	f36f 41de 	bfc	r1, #19, #12
    b6c6:	f36f 71df 	bfc	r1, #31, #1
    b6ca:	2300      	movs	r3, #0
    b6cc:	488c      	ldr	r0, [pc, #560]	; (b900 <bt_conn_set_state+0x2f8>)
    b6ce:	f7f7 fffd 	bl	36cc <z_impl_z_log_msg_static_create>
    b6d2:	46a5      	mov	sp, r4
}
    b6d4:	370c      	adds	r7, #12
    b6d6:	46bd      	mov	sp, r7
    b6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return "connecting-scan";
    b6da:	488a      	ldr	r0, [pc, #552]	; (b904 <bt_conn_set_state+0x2fc>)
    b6dc:	e7ba      	b.n	b654 <bt_conn_set_state+0x4c>
		return "connecting-dir-adv";
    b6de:	488a      	ldr	r0, [pc, #552]	; (b908 <bt_conn_set_state+0x300>)
    b6e0:	e7b8      	b.n	b654 <bt_conn_set_state+0x4c>
		return "connecting-adv";
    b6e2:	488a      	ldr	r0, [pc, #552]	; (b90c <bt_conn_set_state+0x304>)
    b6e4:	e7b6      	b.n	b654 <bt_conn_set_state+0x4c>
		return "connecting-auto";
    b6e6:	488a      	ldr	r0, [pc, #552]	; (b910 <bt_conn_set_state+0x308>)
    b6e8:	e7b4      	b.n	b654 <bt_conn_set_state+0x4c>
		return "connecting";
    b6ea:	488a      	ldr	r0, [pc, #552]	; (b914 <bt_conn_set_state+0x30c>)
    b6ec:	e7b2      	b.n	b654 <bt_conn_set_state+0x4c>
		return "connected";
    b6ee:	488a      	ldr	r0, [pc, #552]	; (b918 <bt_conn_set_state+0x310>)
    b6f0:	e7b0      	b.n	b654 <bt_conn_set_state+0x4c>
		return "disconnecting";
    b6f2:	488a      	ldr	r0, [pc, #552]	; (b91c <bt_conn_set_state+0x314>)
    b6f4:	e7ae      	b.n	b654 <bt_conn_set_state+0x4c>
		return "(unknown)";
    b6f6:	488a      	ldr	r0, [pc, #552]	; (b920 <bt_conn_set_state+0x318>)
    b6f8:	e7ac      	b.n	b654 <bt_conn_set_state+0x4c>
		return "disconnect-complete";
    b6fa:	488a      	ldr	r0, [pc, #552]	; (b924 <bt_conn_set_state+0x31c>)
    b6fc:	e7aa      	b.n	b654 <bt_conn_set_state+0x4c>
		BT_WARN("no transition %s", state2str(state));
    b6fe:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b702:	e7b0      	b.n	b666 <bt_conn_set_state+0x5e>
    b704:	f107 0608 	add.w	r6, r7, #8
    b708:	4406      	add	r6, r0
    b70a:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    b70e:	f801 6b01 	strb.w	r6, [r1], #1
    b712:	3001      	adds	r0, #1
    b714:	e7b6      	b.n	b684 <bt_conn_set_state+0x7c>
    b716:	f06f 051b 	mvn.w	r5, #27
    b71a:	e7b8      	b.n	b68e <bt_conn_set_state+0x86>
			bt_conn_ref(conn);
    b71c:	f00f f952 	bl	1a9c4 <bt_conn_ref>
    b720:	e77f      	b.n	b622 <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b722:	78a3      	ldrb	r3, [r4, #2]
    b724:	2b04      	cmp	r3, #4
    b726:	d0d5      	beq.n	b6d4 <bt_conn_set_state+0xcc>
		k_fifo_init(&conn->tx_queue);
    b728:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
    b72c:	f013 ff5c 	bl	1f5e8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    b730:	2100      	movs	r1, #0
    b732:	487d      	ldr	r0, [pc, #500]	; (b928 <bt_conn_set_state+0x320>)
    b734:	f00c f960 	bl	179f8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b738:	2300      	movs	r3, #0
    b73a:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
    b73c:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
    b73e:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b740:	2b01      	cmp	r3, #1
    b742:	d1c7      	bne.n	b6d4 <bt_conn_set_state+0xcc>
			k_work_schedule(&conn->deferred_work,
    b744:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b748:	2300      	movs	r3, #0
    b74a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b74e:	f00b f83b 	bl	167c8 <k_work_schedule>
    b752:	e7bf      	b.n	b6d4 <bt_conn_set_state+0xcc>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b754:	78a3      	ldrb	r3, [r4, #2]
    b756:	2b04      	cmp	r3, #4
    b758:	d008      	beq.n	b76c <bt_conn_set_state+0x164>
		switch (old_state) {
    b75a:	2e08      	cmp	r6, #8
    b75c:	d8ba      	bhi.n	b6d4 <bt_conn_set_state+0xcc>
    b75e:	e8df f006 	tbb	[pc, r6]
    b762:	094f      	.short	0x094f
    b764:	3d4b4733 	.word	0x3d4b4733
    b768:	4f29      	.short	0x4f29
    b76a:	4f          	.byte	0x4f
    b76b:	00          	.byte	0x00
			bt_conn_unref(conn);
    b76c:	4620      	mov	r0, r4
    b76e:	f00f f946 	bl	1a9fe <bt_conn_unref>
			break;
    b772:	e7af      	b.n	b6d4 <bt_conn_set_state+0xcc>
			tx_notify(conn);
    b774:	4620      	mov	r0, r4
    b776:	f00f f827 	bl	1a7c8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    b77a:	78a3      	ldrb	r3, [r4, #2]
    b77c:	2b01      	cmp	r3, #1
    b77e:	d00d      	beq.n	b79c <bt_conn_set_state+0x194>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    b780:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b782:	e8d4 3fef 	ldaex	r3, [r4]
    b786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b78a:	e8c4 3fe2 	stlex	r2, r3, [r4]
    b78e:	2a00      	cmp	r2, #0
    b790:	d1f7      	bne.n	b782 <bt_conn_set_state+0x17a>
    b792:	2100      	movs	r1, #0
    b794:	4864      	ldr	r0, [pc, #400]	; (b928 <bt_conn_set_state+0x320>)
    b796:	f00c f92f 	bl	179f8 <z_impl_k_poll_signal_raise>
    b79a:	e79b      	b.n	b6d4 <bt_conn_set_state+0xcc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    b79c:	f104 0558 	add.w	r5, r4, #88	; 0x58
    b7a0:	4628      	mov	r0, r5
    b7a2:	f014 f843 	bl	1f82c <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    b7a6:	f010 0f0c 	tst.w	r0, #12
    b7aa:	d0e9      	beq.n	b780 <bt_conn_set_state+0x178>
				k_work_cancel_delayable(&conn->deferred_work);
    b7ac:	4628      	mov	r0, r5
    b7ae:	f014 f88d 	bl	1f8cc <k_work_cancel_delayable>
    b7b2:	e7e5      	b.n	b780 <bt_conn_set_state+0x178>
			if (conn->err) {
    b7b4:	7a63      	ldrb	r3, [r4, #9]
    b7b6:	b91b      	cbnz	r3, b7c0 <bt_conn_set_state+0x1b8>
			bt_conn_unref(conn);
    b7b8:	4620      	mov	r0, r4
    b7ba:	f00f f920 	bl	1a9fe <bt_conn_unref>
			break;
    b7be:	e789      	b.n	b6d4 <bt_conn_set_state+0xcc>
				notify_connected(conn);
    b7c0:	4620      	mov	r0, r4
    b7c2:	f7ff fb7f 	bl	aec4 <notify_connected>
    b7c6:	e7f7      	b.n	b7b8 <bt_conn_set_state+0x1b0>
			if (conn->err) {
    b7c8:	7a63      	ldrb	r3, [r4, #9]
    b7ca:	b91b      	cbnz	r3, b7d4 <bt_conn_set_state+0x1cc>
			bt_conn_unref(conn);
    b7cc:	4620      	mov	r0, r4
    b7ce:	f00f f916 	bl	1a9fe <bt_conn_unref>
			break;
    b7d2:	e77f      	b.n	b6d4 <bt_conn_set_state+0xcc>
				notify_connected(conn);
    b7d4:	4620      	mov	r0, r4
    b7d6:	f7ff fb75 	bl	aec4 <notify_connected>
    b7da:	e7f7      	b.n	b7cc <bt_conn_set_state+0x1c4>
			if (conn->err) {
    b7dc:	7a63      	ldrb	r3, [r4, #9]
    b7de:	b91b      	cbnz	r3, b7e8 <bt_conn_set_state+0x1e0>
			bt_conn_unref(conn);
    b7e0:	4620      	mov	r0, r4
    b7e2:	f00f f90c 	bl	1a9fe <bt_conn_unref>
			break;
    b7e6:	e775      	b.n	b6d4 <bt_conn_set_state+0xcc>
				notify_connected(conn);
    b7e8:	4620      	mov	r0, r4
    b7ea:	f7ff fb6b 	bl	aec4 <notify_connected>
    b7ee:	e7f7      	b.n	b7e0 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
    b7f0:	4620      	mov	r0, r4
    b7f2:	f00f f904 	bl	1a9fe <bt_conn_unref>
			break;
    b7f6:	e76d      	b.n	b6d4 <bt_conn_set_state+0xcc>
			bt_conn_unref(conn);
    b7f8:	4620      	mov	r0, r4
    b7fa:	f00f f900 	bl	1a9fe <bt_conn_unref>
			break;
    b7fe:	e769      	b.n	b6d4 <bt_conn_set_state+0xcc>
			BT_WARN("Invalid (%u) old state", state);
    b800:	466e      	mov	r6, sp
    b802:	b088      	sub	sp, #32
    b804:	466b      	mov	r3, sp
    b806:	f113 0210 	adds.w	r2, r3, #16
    b80a:	d02f      	beq.n	b86c <bt_conn_set_state+0x264>
    b80c:	210c      	movs	r1, #12
    b80e:	b11a      	cbz	r2, b818 <bt_conn_set_state+0x210>
    b810:	2904      	cmp	r1, #4
    b812:	dd01      	ble.n	b818 <bt_conn_set_state+0x210>
    b814:	4845      	ldr	r0, [pc, #276]	; (b92c <bt_conn_set_state+0x324>)
    b816:	6158      	str	r0, [r3, #20]
    b818:	b112      	cbz	r2, b820 <bt_conn_set_state+0x218>
    b81a:	2908      	cmp	r1, #8
    b81c:	dd00      	ble.n	b820 <bt_conn_set_state+0x218>
    b81e:	619d      	str	r5, [r3, #24]
    b820:	290b      	cmp	r1, #11
    b822:	dd26      	ble.n	b872 <bt_conn_set_state+0x26a>
    b824:	240c      	movs	r4, #12
    b826:	b13a      	cbz	r2, b838 <bt_conn_set_state+0x230>
    b828:	2103      	movs	r1, #3
    b82a:	7139      	strb	r1, [r7, #4]
    b82c:	2100      	movs	r1, #0
    b82e:	7179      	strb	r1, [r7, #5]
    b830:	71b9      	strb	r1, [r7, #6]
    b832:	71f9      	strb	r1, [r7, #7]
    b834:	6878      	ldr	r0, [r7, #4]
    b836:	6118      	str	r0, [r3, #16]
    b838:	2100      	movs	r1, #0
    b83a:	f36f 0100 	bfc	r1, #0, #1
    b83e:	f36f 0141 	bfc	r1, #1, #1
    b842:	f36f 0182 	bfc	r1, #2, #1
    b846:	f36f 01c5 	bfc	r1, #3, #3
    b84a:	2302      	movs	r3, #2
    b84c:	f363 1188 	bfi	r1, r3, #6, #3
    b850:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    b854:	f363 2152 	bfi	r1, r3, #9, #10
    b858:	f36f 41de 	bfc	r1, #19, #12
    b85c:	f36f 71df 	bfc	r1, #31, #1
    b860:	2300      	movs	r3, #0
    b862:	4827      	ldr	r0, [pc, #156]	; (b900 <bt_conn_set_state+0x2f8>)
    b864:	f7f7 ff32 	bl	36cc <z_impl_z_log_msg_static_create>
    b868:	46b5      	mov	sp, r6
    b86a:	e733      	b.n	b6d4 <bt_conn_set_state+0xcc>
    b86c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b870:	e7cd      	b.n	b80e <bt_conn_set_state+0x206>
    b872:	f06f 041b 	mvn.w	r4, #27
    b876:	e7d6      	b.n	b826 <bt_conn_set_state+0x21e>
		process_unack_tx(conn);
    b878:	4620      	mov	r0, r4
    b87a:	f00e fffc 	bl	1a876 <process_unack_tx>
		break;
    b87e:	e729      	b.n	b6d4 <bt_conn_set_state+0xcc>
		BT_WARN("no valid (%u) state was set", state);
    b880:	466e      	mov	r6, sp
    b882:	b088      	sub	sp, #32
    b884:	466b      	mov	r3, sp
    b886:	f113 0210 	adds.w	r2, r3, #16
    b88a:	d130      	bne.n	b8ee <bt_conn_set_state+0x2e6>
    b88c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b890:	b11a      	cbz	r2, b89a <bt_conn_set_state+0x292>
    b892:	2904      	cmp	r1, #4
    b894:	dd01      	ble.n	b89a <bt_conn_set_state+0x292>
    b896:	4826      	ldr	r0, [pc, #152]	; (b930 <bt_conn_set_state+0x328>)
    b898:	6158      	str	r0, [r3, #20]
    b89a:	b112      	cbz	r2, b8a2 <bt_conn_set_state+0x29a>
    b89c:	2908      	cmp	r1, #8
    b89e:	dd00      	ble.n	b8a2 <bt_conn_set_state+0x29a>
    b8a0:	619d      	str	r5, [r3, #24]
    b8a2:	290b      	cmp	r1, #11
    b8a4:	dd25      	ble.n	b8f2 <bt_conn_set_state+0x2ea>
    b8a6:	240c      	movs	r4, #12
    b8a8:	b13a      	cbz	r2, b8ba <bt_conn_set_state+0x2b2>
    b8aa:	2103      	movs	r1, #3
    b8ac:	7139      	strb	r1, [r7, #4]
    b8ae:	2100      	movs	r1, #0
    b8b0:	7179      	strb	r1, [r7, #5]
    b8b2:	71b9      	strb	r1, [r7, #6]
    b8b4:	71f9      	strb	r1, [r7, #7]
    b8b6:	6878      	ldr	r0, [r7, #4]
    b8b8:	6118      	str	r0, [r3, #16]
    b8ba:	2100      	movs	r1, #0
    b8bc:	f36f 0100 	bfc	r1, #0, #1
    b8c0:	f36f 0141 	bfc	r1, #1, #1
    b8c4:	f36f 0182 	bfc	r1, #2, #1
    b8c8:	f36f 01c5 	bfc	r1, #3, #3
    b8cc:	2302      	movs	r3, #2
    b8ce:	f363 1188 	bfi	r1, r3, #6, #3
    b8d2:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    b8d6:	f364 2152 	bfi	r1, r4, #9, #10
    b8da:	f36f 41de 	bfc	r1, #19, #12
    b8de:	f36f 71df 	bfc	r1, #31, #1
    b8e2:	2300      	movs	r3, #0
    b8e4:	4806      	ldr	r0, [pc, #24]	; (b900 <bt_conn_set_state+0x2f8>)
    b8e6:	f7f7 fef1 	bl	36cc <z_impl_z_log_msg_static_create>
    b8ea:	46b5      	mov	sp, r6
    b8ec:	e6f2      	b.n	b6d4 <bt_conn_set_state+0xcc>
    b8ee:	210c      	movs	r1, #12
    b8f0:	e7ce      	b.n	b890 <bt_conn_set_state+0x288>
    b8f2:	f06f 041b 	mvn.w	r4, #27
    b8f6:	e7d7      	b.n	b8a8 <bt_conn_set_state+0x2a0>
    b8f8:	000221d4 	.word	0x000221d4
    b8fc:	000221e4 	.word	0x000221e4
    b900:	00020530 	.word	0x00020530
    b904:	00022174 	.word	0x00022174
    b908:	00022184 	.word	0x00022184
    b90c:	00022198 	.word	0x00022198
    b910:	000221a8 	.word	0x000221a8
    b914:	000221b8 	.word	0x000221b8
    b918:	0002246c 	.word	0x0002246c
    b91c:	000221c4 	.word	0x000221c4
    b920:	00022154 	.word	0x00022154
    b924:	00022160 	.word	0x00022160
    b928:	2000030c 	.word	0x2000030c
    b92c:	000221f8 	.word	0x000221f8
    b930:	00022210 	.word	0x00022210

0000b934 <bt_conn_index>:
		index = conn - acl_conns;
    b934:	4b03      	ldr	r3, [pc, #12]	; (b944 <bt_conn_index+0x10>)
    b936:	1ac0      	subs	r0, r0, r3
    b938:	1180      	asrs	r0, r0, #6
    b93a:	4b03      	ldr	r3, [pc, #12]	; (b948 <bt_conn_index+0x14>)
    b93c:	fb03 f000 	mul.w	r0, r3, r0
}
    b940:	b2c0      	uxtb	r0, r0
    b942:	4770      	bx	lr
    b944:	200014b0 	.word	0x200014b0
    b948:	aaaaaaab 	.word	0xaaaaaaab

0000b94c <bt_conn_create_pdu_timeout>:
{
    b94c:	b530      	push	{r4, r5, lr}
    b94e:	b089      	sub	sp, #36	; 0x24
    b950:	460c      	mov	r4, r1
	if (!pool) {
    b952:	4601      	mov	r1, r0
    b954:	b158      	cbz	r0, b96e <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
    b956:	4608      	mov	r0, r1
    b958:	f011 f805 	bl	1c966 <net_buf_alloc_fixed>
	if (!buf) {
    b95c:	4605      	mov	r5, r0
    b95e:	b140      	cbz	r0, b972 <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
    b960:	1d61      	adds	r1, r4, #5
    b962:	3008      	adds	r0, #8
    b964:	f011 f827 	bl	1c9b6 <net_buf_simple_reserve>
}
    b968:	4628      	mov	r0, r5
    b96a:	b009      	add	sp, #36	; 0x24
    b96c:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
    b96e:	4913      	ldr	r1, [pc, #76]	; (b9bc <bt_conn_create_pdu_timeout+0x70>)
    b970:	e7f1      	b.n	b956 <bt_conn_create_pdu_timeout+0xa>
		BT_WARN("Unable to allocate buffer within timeout");
    b972:	4b13      	ldr	r3, [pc, #76]	; (b9c0 <bt_conn_create_pdu_timeout+0x74>)
    b974:	9307      	str	r3, [sp, #28]
    b976:	2202      	movs	r2, #2
    b978:	f88d 2004 	strb.w	r2, [sp, #4]
    b97c:	2300      	movs	r3, #0
    b97e:	f88d 3005 	strb.w	r3, [sp, #5]
    b982:	f88d 3006 	strb.w	r3, [sp, #6]
    b986:	f88d 3007 	strb.w	r3, [sp, #7]
    b98a:	9901      	ldr	r1, [sp, #4]
    b98c:	9106      	str	r1, [sp, #24]
    b98e:	4619      	mov	r1, r3
    b990:	f363 0100 	bfi	r1, r3, #0, #1
    b994:	f363 0141 	bfi	r1, r3, #1, #1
    b998:	f363 0182 	bfi	r1, r3, #2, #1
    b99c:	f363 01c5 	bfi	r1, r3, #3, #3
    b9a0:	f362 1188 	bfi	r1, r2, #6, #3
    b9a4:	2208      	movs	r2, #8
    b9a6:	f362 2152 	bfi	r1, r2, #9, #10
    b9aa:	f363 41de 	bfi	r1, r3, #19, #12
    b9ae:	f363 71df 	bfi	r1, r3, #31, #1
    b9b2:	aa06      	add	r2, sp, #24
    b9b4:	4803      	ldr	r0, [pc, #12]	; (b9c4 <bt_conn_create_pdu_timeout+0x78>)
    b9b6:	f7f7 fe89 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
    b9ba:	e7d5      	b.n	b968 <bt_conn_create_pdu_timeout+0x1c>
    b9bc:	20000784 	.word	0x20000784
    b9c0:	0002222c 	.word	0x0002222c
    b9c4:	00020530 	.word	0x00020530

0000b9c8 <notify_le_param_updated>:
{
    b9c8:	b570      	push	{r4, r5, r6, lr}
    b9ca:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b9cc:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b9ce:	e8d3 2faf 	lda	r2, [r3]
    b9d2:	f412 7f80 	tst.w	r2, #256	; 0x100
    b9d6:	d00f      	beq.n	b9f8 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
    b9d8:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    b9dc:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b9e0:	428a      	cmp	r2, r1
    b9e2:	d309      	bcc.n	b9f8 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
    b9e4:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
    b9e8:	428a      	cmp	r2, r1
    b9ea:	d805      	bhi.n	b9f8 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
    b9ec:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
    b9f0:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    b9f4:	4291      	cmp	r1, r2
    b9f6:	d002      	beq.n	b9fe <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
    b9f8:	4b16      	ldr	r3, [pc, #88]	; (ba54 <notify_le_param_updated+0x8c>)
    b9fa:	681d      	ldr	r5, [r3, #0]
    b9fc:	e011      	b.n	ba22 <notify_le_param_updated+0x5a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b9fe:	e8d3 2fef 	ldaex	r2, [r3]
    ba02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    ba06:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ba0a:	2900      	cmp	r1, #0
    ba0c:	d0f4      	beq.n	b9f8 <notify_le_param_updated+0x30>
    ba0e:	e7f6      	b.n	b9fe <notify_le_param_updated+0x36>
			cb->le_param_updated(conn, conn->le.interval,
    ba10:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    ba14:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    ba18:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    ba1c:	4620      	mov	r0, r4
    ba1e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    ba20:	692d      	ldr	r5, [r5, #16]
    ba22:	b11d      	cbz	r5, ba2c <notify_le_param_updated+0x64>
		if (cb->le_param_updated) {
    ba24:	68ee      	ldr	r6, [r5, #12]
    ba26:	2e00      	cmp	r6, #0
    ba28:	d1f2      	bne.n	ba10 <notify_le_param_updated+0x48>
    ba2a:	e7f9      	b.n	ba20 <notify_le_param_updated+0x58>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ba2c:	4d0a      	ldr	r5, [pc, #40]	; (ba58 <notify_le_param_updated+0x90>)
    ba2e:	e000      	b.n	ba32 <notify_le_param_updated+0x6a>
    ba30:	3514      	adds	r5, #20
    ba32:	4b0a      	ldr	r3, [pc, #40]	; (ba5c <notify_le_param_updated+0x94>)
    ba34:	429d      	cmp	r5, r3
    ba36:	d20b      	bcs.n	ba50 <notify_le_param_updated+0x88>
		if (cb->le_param_updated) {
    ba38:	68ee      	ldr	r6, [r5, #12]
    ba3a:	2e00      	cmp	r6, #0
    ba3c:	d0f8      	beq.n	ba30 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
    ba3e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    ba42:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    ba46:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    ba4a:	4620      	mov	r0, r4
    ba4c:	47b0      	blx	r6
    ba4e:	e7ef      	b.n	ba30 <notify_le_param_updated+0x68>
}
    ba50:	bd70      	pop	{r4, r5, r6, pc}
    ba52:	bf00      	nop
    ba54:	20001fec 	.word	0x20001fec
    ba58:	000204cc 	.word	0x000204cc
    ba5c:	000204e0 	.word	0x000204e0

0000ba60 <le_param_req>:
{
    ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba62:	4606      	mov	r6, r0
    ba64:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    ba66:	4608      	mov	r0, r1
    ba68:	f00e fca5 	bl	1a3b6 <bt_le_conn_params_valid>
    ba6c:	4607      	mov	r7, r0
    ba6e:	b338      	cbz	r0, bac0 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
    ba70:	4b15      	ldr	r3, [pc, #84]	; (bac8 <le_param_req+0x68>)
    ba72:	681c      	ldr	r4, [r3, #0]
    ba74:	e000      	b.n	ba78 <le_param_req+0x18>
    ba76:	6924      	ldr	r4, [r4, #16]
    ba78:	b16c      	cbz	r4, ba96 <le_param_req+0x36>
		if (!cb->le_param_req) {
    ba7a:	68a3      	ldr	r3, [r4, #8]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d0fa      	beq.n	ba76 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    ba80:	4629      	mov	r1, r5
    ba82:	4630      	mov	r0, r6
    ba84:	4798      	blx	r3
    ba86:	b1d0      	cbz	r0, babe <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
    ba88:	4628      	mov	r0, r5
    ba8a:	f00e fc94 	bl	1a3b6 <bt_le_conn_params_valid>
    ba8e:	2800      	cmp	r0, #0
    ba90:	d1f1      	bne.n	ba76 <le_param_req+0x16>
			return false;
    ba92:	4607      	mov	r7, r0
    ba94:	e014      	b.n	bac0 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ba96:	4c0d      	ldr	r4, [pc, #52]	; (bacc <le_param_req+0x6c>)
    ba98:	e000      	b.n	ba9c <le_param_req+0x3c>
    ba9a:	3414      	adds	r4, #20
    ba9c:	4b0c      	ldr	r3, [pc, #48]	; (bad0 <le_param_req+0x70>)
    ba9e:	429c      	cmp	r4, r3
    baa0:	d20e      	bcs.n	bac0 <le_param_req+0x60>
		if (!cb->le_param_req) {
    baa2:	68a3      	ldr	r3, [r4, #8]
    baa4:	2b00      	cmp	r3, #0
    baa6:	d0f8      	beq.n	ba9a <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
    baa8:	4629      	mov	r1, r5
    baaa:	4630      	mov	r0, r6
    baac:	4798      	blx	r3
    baae:	b148      	cbz	r0, bac4 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
    bab0:	4628      	mov	r0, r5
    bab2:	f00e fc80 	bl	1a3b6 <bt_le_conn_params_valid>
    bab6:	2800      	cmp	r0, #0
    bab8:	d1ef      	bne.n	ba9a <le_param_req+0x3a>
			return false;
    baba:	4607      	mov	r7, r0
    babc:	e000      	b.n	bac0 <le_param_req+0x60>
			return false;
    babe:	4607      	mov	r7, r0
}
    bac0:	4638      	mov	r0, r7
    bac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
    bac4:	4607      	mov	r7, r0
    bac6:	e7fb      	b.n	bac0 <le_param_req+0x60>
    bac8:	20001fec 	.word	0x20001fec
    bacc:	000204cc 	.word	0x000204cc
    bad0:	000204e0 	.word	0x000204e0

0000bad4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bad6:	4607      	mov	r7, r0
    bad8:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    bada:	2400      	movs	r4, #0
    badc:	b114      	cbz	r4, bae4 <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
    bade:	2500      	movs	r5, #0
}
    bae0:	4628      	mov	r0, r5
    bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bae4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    bae8:	480b      	ldr	r0, [pc, #44]	; (bb18 <bt_conn_lookup_addr_le+0x44>)
    baea:	eb00 1083 	add.w	r0, r0, r3, lsl #6
    baee:	f00e ff69 	bl	1a9c4 <bt_conn_ref>
		if (!conn) {
    baf2:	4605      	mov	r5, r0
    baf4:	b170      	cbz	r0, bb14 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
    baf6:	7883      	ldrb	r3, [r0, #2]
    baf8:	2b01      	cmp	r3, #1
    bafa:	d109      	bne.n	bb10 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    bafc:	4632      	mov	r2, r6
    bafe:	4639      	mov	r1, r7
    bb00:	f00e ffdf 	bl	1aac2 <bt_conn_is_peer_addr_le>
    bb04:	2800      	cmp	r0, #0
    bb06:	d1eb      	bne.n	bae0 <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
    bb08:	4628      	mov	r0, r5
    bb0a:	f00e ff78 	bl	1a9fe <bt_conn_unref>
			continue;
    bb0e:	e001      	b.n	bb14 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
    bb10:	f00e ff75 	bl	1a9fe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    bb14:	3401      	adds	r4, #1
    bb16:	e7e1      	b.n	badc <bt_conn_lookup_addr_le+0x8>
    bb18:	200014b0 	.word	0x200014b0

0000bb1c <bt_conn_exists_le>:
{
    bb1c:	b5b0      	push	{r4, r5, r7, lr}
    bb1e:	b082      	sub	sp, #8
    bb20:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    bb22:	f7ff ffd7 	bl	bad4 <bt_conn_lookup_addr_le>
	if (conn) {
    bb26:	2800      	cmp	r0, #0
    bb28:	d078      	beq.n	bc1c <bt_conn_exists_le+0x100>
    bb2a:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
    bb2c:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
    bb2e:	2b08      	cmp	r3, #8
    bb30:	d861      	bhi.n	bbf6 <bt_conn_exists_le+0xda>
    bb32:	e8df f003 	tbb	[pc, r3]
    bb36:	6205      	.short	0x6205
    bb38:	54565852 	.word	0x54565852
    bb3c:	5c5a      	.short	0x5c5a
    bb3e:	5e          	.byte	0x5e
    bb3f:	00          	.byte	0x00
    bb40:	4837      	ldr	r0, [pc, #220]	; (bc20 <bt_conn_exists_le+0x104>)
		BT_WARN("Found valid connection in %s state",
    bb42:	2302      	movs	r3, #2
    bb44:	713b      	strb	r3, [r7, #4]
    bb46:	466d      	mov	r5, sp
    bb48:	b088      	sub	sp, #32
    bb4a:	466b      	mov	r3, sp
    bb4c:	f113 0210 	adds.w	r2, r3, #16
    bb50:	d055      	beq.n	bbfe <bt_conn_exists_le+0xe2>
    bb52:	f04f 0c0d 	mov.w	ip, #13
    bb56:	b122      	cbz	r2, bb62 <bt_conn_exists_le+0x46>
    bb58:	f1bc 0f04 	cmp.w	ip, #4
    bb5c:	dd01      	ble.n	bb62 <bt_conn_exists_le+0x46>
    bb5e:	4931      	ldr	r1, [pc, #196]	; (bc24 <bt_conn_exists_le+0x108>)
    bb60:	6159      	str	r1, [r3, #20]
    bb62:	2102      	movs	r1, #2
    bb64:	7039      	strb	r1, [r7, #0]
    bb66:	b11a      	cbz	r2, bb70 <bt_conn_exists_le+0x54>
    bb68:	f1bc 0f08 	cmp.w	ip, #8
    bb6c:	dd00      	ble.n	bb70 <bt_conn_exists_le+0x54>
    bb6e:	6198      	str	r0, [r3, #24]
    bb70:	b122      	cbz	r2, bb7c <bt_conn_exists_le+0x60>
    bb72:	f103 011c 	add.w	r1, r3, #28
    bb76:	2000      	movs	r0, #0
    bb78:	2800      	cmp	r0, #0
    bb7a:	d043      	beq.n	bc04 <bt_conn_exists_le+0xe8>
    bb7c:	f1bc 0f0c 	cmp.w	ip, #12
    bb80:	dd49      	ble.n	bc16 <bt_conn_exists_le+0xfa>
    bb82:	f04f 0c0d 	mov.w	ip, #13
    bb86:	b142      	cbz	r2, bb9a <bt_conn_exists_le+0x7e>
    bb88:	2103      	movs	r1, #3
    bb8a:	7139      	strb	r1, [r7, #4]
    bb8c:	2100      	movs	r1, #0
    bb8e:	7179      	strb	r1, [r7, #5]
    bb90:	71b9      	strb	r1, [r7, #6]
    bb92:	2101      	movs	r1, #1
    bb94:	71f9      	strb	r1, [r7, #7]
    bb96:	6878      	ldr	r0, [r7, #4]
    bb98:	6118      	str	r0, [r3, #16]
    bb9a:	2100      	movs	r1, #0
    bb9c:	f36f 0100 	bfc	r1, #0, #1
    bba0:	f36f 0141 	bfc	r1, #1, #1
    bba4:	f36f 0182 	bfc	r1, #2, #1
    bba8:	f36f 01c5 	bfc	r1, #3, #3
    bbac:	2302      	movs	r3, #2
    bbae:	f363 1188 	bfi	r1, r3, #6, #3
    bbb2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    bbb6:	f36c 2152 	bfi	r1, ip, #9, #10
    bbba:	f36f 41de 	bfc	r1, #19, #12
    bbbe:	f36f 71df 	bfc	r1, #31, #1
    bbc2:	2300      	movs	r3, #0
    bbc4:	4818      	ldr	r0, [pc, #96]	; (bc28 <bt_conn_exists_le+0x10c>)
    bbc6:	f7f7 fd81 	bl	36cc <z_impl_z_log_msg_static_create>
    bbca:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
    bbcc:	4620      	mov	r0, r4
    bbce:	f00e ff16 	bl	1a9fe <bt_conn_unref>
		return true;
    bbd2:	2001      	movs	r0, #1
}
    bbd4:	3708      	adds	r7, #8
    bbd6:	46bd      	mov	sp, r7
    bbd8:	bdb0      	pop	{r4, r5, r7, pc}
		return "connecting-scan";
    bbda:	4814      	ldr	r0, [pc, #80]	; (bc2c <bt_conn_exists_le+0x110>)
    bbdc:	e7b1      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "connecting-dir-adv";
    bbde:	4814      	ldr	r0, [pc, #80]	; (bc30 <bt_conn_exists_le+0x114>)
    bbe0:	e7af      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "connecting-adv";
    bbe2:	4814      	ldr	r0, [pc, #80]	; (bc34 <bt_conn_exists_le+0x118>)
    bbe4:	e7ad      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "connecting-auto";
    bbe6:	4814      	ldr	r0, [pc, #80]	; (bc38 <bt_conn_exists_le+0x11c>)
    bbe8:	e7ab      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "connecting";
    bbea:	4814      	ldr	r0, [pc, #80]	; (bc3c <bt_conn_exists_le+0x120>)
    bbec:	e7a9      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "connected";
    bbee:	4814      	ldr	r0, [pc, #80]	; (bc40 <bt_conn_exists_le+0x124>)
    bbf0:	e7a7      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "disconnecting";
    bbf2:	4814      	ldr	r0, [pc, #80]	; (bc44 <bt_conn_exists_le+0x128>)
    bbf4:	e7a5      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "(unknown)";
    bbf6:	4814      	ldr	r0, [pc, #80]	; (bc48 <bt_conn_exists_le+0x12c>)
    bbf8:	e7a3      	b.n	bb42 <bt_conn_exists_le+0x26>
		return "disconnect-complete";
    bbfa:	4814      	ldr	r0, [pc, #80]	; (bc4c <bt_conn_exists_le+0x130>)
    bbfc:	e7a1      	b.n	bb42 <bt_conn_exists_le+0x26>
		BT_WARN("Found valid connection in %s state",
    bbfe:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    bc02:	e7a8      	b.n	bb56 <bt_conn_exists_le+0x3a>
    bc04:	f107 0e08 	add.w	lr, r7, #8
    bc08:	4486      	add	lr, r0
    bc0a:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    bc0e:	f801 eb01 	strb.w	lr, [r1], #1
    bc12:	3001      	adds	r0, #1
    bc14:	e7b0      	b.n	bb78 <bt_conn_exists_le+0x5c>
    bc16:	f06f 0c1b 	mvn.w	ip, #27
    bc1a:	e7b4      	b.n	bb86 <bt_conn_exists_le+0x6a>
	return false;
    bc1c:	2000      	movs	r0, #0
    bc1e:	e7d9      	b.n	bbd4 <bt_conn_exists_le+0xb8>
    bc20:	000221d4 	.word	0x000221d4
    bc24:	00022258 	.word	0x00022258
    bc28:	00020530 	.word	0x00020530
    bc2c:	00022174 	.word	0x00022174
    bc30:	00022184 	.word	0x00022184
    bc34:	00022198 	.word	0x00022198
    bc38:	000221a8 	.word	0x000221a8
    bc3c:	000221b8 	.word	0x000221b8
    bc40:	0002246c 	.word	0x0002246c
    bc44:	000221c4 	.word	0x000221c4
    bc48:	00022154 	.word	0x00022154
    bc4c:	00022160 	.word	0x00022160

0000bc50 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc54:	4607      	mov	r7, r0
    bc56:	460e      	mov	r6, r1
    bc58:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    bc5a:	2400      	movs	r4, #0
    bc5c:	b11c      	cbz	r4, bc66 <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
    bc5e:	2500      	movs	r5, #0
}
    bc60:	4628      	mov	r0, r5
    bc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bc66:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    bc6a:	4811      	ldr	r0, [pc, #68]	; (bcb0 <bt_conn_lookup_state_le+0x60>)
    bc6c:	eb00 1083 	add.w	r0, r0, r3, lsl #6
    bc70:	f00e fea8 	bl	1a9c4 <bt_conn_ref>
		if (!conn) {
    bc74:	4605      	mov	r5, r0
    bc76:	b188      	cbz	r0, bc9c <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
    bc78:	7883      	ldrb	r3, [r0, #2]
    bc7a:	2b01      	cmp	r3, #1
    bc7c:	d110      	bne.n	bca0 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    bc7e:	b126      	cbz	r6, bc8a <bt_conn_lookup_state_le+0x3a>
    bc80:	4632      	mov	r2, r6
    bc82:	4639      	mov	r1, r7
    bc84:	f00e ff1d 	bl	1aac2 <bt_conn_is_peer_addr_le>
    bc88:	b168      	cbz	r0, bca6 <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
    bc8a:	7aab      	ldrb	r3, [r5, #10]
    bc8c:	4543      	cmp	r3, r8
    bc8e:	d102      	bne.n	bc96 <bt_conn_lookup_state_le+0x46>
    bc90:	7a2b      	ldrb	r3, [r5, #8]
    bc92:	42bb      	cmp	r3, r7
    bc94:	d0e4      	beq.n	bc60 <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
    bc96:	4628      	mov	r0, r5
    bc98:	f00e feb1 	bl	1a9fe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
    bc9c:	3401      	adds	r4, #1
    bc9e:	e7dd      	b.n	bc5c <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
    bca0:	f00e fead 	bl	1a9fe <bt_conn_unref>
			continue;
    bca4:	e7fa      	b.n	bc9c <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
    bca6:	4628      	mov	r0, r5
    bca8:	f00e fea9 	bl	1a9fe <bt_conn_unref>
			continue;
    bcac:	e7f6      	b.n	bc9c <bt_conn_lookup_state_le+0x4c>
    bcae:	bf00      	nop
    bcb0:	200014b0 	.word	0x200014b0

0000bcb4 <send_conn_le_param_update>:
{
    bcb4:	b538      	push	{r3, r4, r5, lr}
    bcb6:	4604      	mov	r4, r0
    bcb8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    bcba:	4608      	mov	r0, r1
    bcbc:	f00e fb7b 	bl	1a3b6 <bt_le_conn_params_valid>
    bcc0:	b350      	cbz	r0, bd18 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    bcc2:	4b17      	ldr	r3, [pc, #92]	; (bd20 <send_conn_le_param_update+0x6c>)
    bcc4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    bcc8:	f013 0f02 	tst.w	r3, #2
    bccc:	d004      	beq.n	bcd8 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    bcce:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    bcd2:	f013 0f02 	tst.w	r3, #2
    bcd6:	d113      	bne.n	bd00 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
    bcd8:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    bcda:	b9c3      	cbnz	r3, bd0e <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
    bcdc:	4629      	mov	r1, r5
    bcde:	4620      	mov	r0, r4
    bce0:	f00e ff16 	bl	1ab10 <bt_conn_le_conn_update>
		if (rc == 0) {
    bce4:	b9b8      	cbnz	r0, bd16 <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
    bce6:	882b      	ldrh	r3, [r5, #0]
    bce8:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    bcec:	886b      	ldrh	r3, [r5, #2]
    bcee:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    bcf2:	88ab      	ldrh	r3, [r5, #4]
    bcf4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    bcf8:	88eb      	ldrh	r3, [r5, #6]
    bcfa:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
    bcfe:	e00a      	b.n	bd16 <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    bd00:	1d23      	adds	r3, r4, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd02:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    bd06:	f413 7f00 	tst.w	r3, #512	; 0x200
    bd0a:	d1e5      	bne.n	bcd8 <send_conn_le_param_update+0x24>
    bd0c:	e7e6      	b.n	bcdc <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
    bd0e:	4629      	mov	r1, r5
    bd10:	4620      	mov	r0, r4
    bd12:	f00e ffcb 	bl	1acac <bt_l2cap_update_conn_param>
}
    bd16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bd18:	f06f 0015 	mvn.w	r0, #21
    bd1c:	e7fb      	b.n	bd16 <send_conn_le_param_update+0x62>
    bd1e:	bf00      	nop
    bd20:	20000000 	.word	0x20000000

0000bd24 <deferred_work>:
{
    bd24:	b530      	push	{r4, r5, lr}
    bd26:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    bd28:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    bd2c:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
    bd30:	b373      	cbz	r3, bd90 <deferred_work+0x6c>
	if (conn->type != BT_CONN_TYPE_LE) {
    bd32:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    bd36:	2b01      	cmp	r3, #1
    bd38:	d128      	bne.n	bd8c <deferred_work+0x68>
	if (atomic_test_and_clear_bit(conn->flags,
    bd3a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bd3e:	e8d5 3fef 	ldaex	r3, [r5]
    bd42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    bd46:	e8c5 2fe1 	stlex	r1, r2, [r5]
    bd4a:	2900      	cmp	r1, #0
    bd4c:	d1f7      	bne.n	bd3e <deferred_work+0x1a>
    bd4e:	f413 7f80 	tst.w	r3, #256	; 0x100
    bd52:	d027      	beq.n	bda4 <deferred_work+0x80>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    bd54:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    bd58:	f8ad 3000 	strh.w	r3, [sp]
    bd5c:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
    bd60:	f8ad 3002 	strh.w	r3, [sp, #2]
    bd64:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
    bd68:	f8ad 3004 	strh.w	r3, [sp, #4]
    bd6c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
    bd70:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    bd74:	4669      	mov	r1, sp
    bd76:	4620      	mov	r0, r4
    bd78:	f7ff ff9c 	bl	bcb4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd7c:	e8d5 3fef 	ldaex	r3, [r5]
    bd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd84:	e8c5 3fe2 	stlex	r2, r3, [r5]
    bd88:	2a00      	cmp	r2, #0
    bd8a:	d1f7      	bne.n	bd7c <deferred_work+0x58>
}
    bd8c:	b005      	add	sp, #20
    bd8e:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
    bd90:	4620      	mov	r0, r4
    bd92:	f00e ff12 	bl	1abba <bt_l2cap_disconnected>
		notify_disconnected(conn);
    bd96:	4620      	mov	r0, r4
    bd98:	f7ff f8b6 	bl	af08 <notify_disconnected>
		bt_conn_unref(conn);
    bd9c:	4620      	mov	r0, r4
    bd9e:	f00e fe2e 	bl	1a9fe <bt_conn_unref>
		return;
    bda2:	e7f3      	b.n	bd8c <deferred_work+0x68>
		param = BT_LE_CONN_PARAM(
    bda4:	4a05      	ldr	r2, [pc, #20]	; (bdbc <deferred_work+0x98>)
    bda6:	ab02      	add	r3, sp, #8
    bda8:	e892 0003 	ldmia.w	r2, {r0, r1}
    bdac:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
    bdb0:	4619      	mov	r1, r3
    bdb2:	4620      	mov	r0, r4
    bdb4:	f7ff ff7e 	bl	bcb4 <send_conn_le_param_update>
    bdb8:	e7e0      	b.n	bd7c <deferred_work+0x58>
    bdba:	bf00      	nop
    bdbc:	00020730 	.word	0x00020730

0000bdc0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    bdc0:	b508      	push	{r3, lr}
    bdc2:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    bdc4:	4801      	ldr	r0, [pc, #4]	; (bdcc <bt_conn_create_frag_timeout+0xc>)
    bdc6:	f7ff fdc1 	bl	b94c <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
    bdca:	bd08      	pop	{r3, pc}
    bdcc:	20000808 	.word	0x20000808

0000bdd0 <create_frag>:
{
    bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdd2:	4606      	mov	r6, r0
    bdd4:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
    bdd6:	f04f 32ff 	mov.w	r2, #4294967295
    bdda:	f04f 33ff 	mov.w	r3, #4294967295
    bdde:	2000      	movs	r0, #0
    bde0:	f7ff ffee 	bl	bdc0 <bt_conn_create_frag_timeout>
    bde4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    bde6:	7ab3      	ldrb	r3, [r6, #10]
    bde8:	2b07      	cmp	r3, #7
    bdea:	d11a      	bne.n	be22 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
    bdec:	2300      	movs	r3, #0
    bdee:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
    bdf0:	4b10      	ldr	r3, [pc, #64]	; (be34 <create_frag+0x64>)
    bdf2:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
    bdf6:	f100 0708 	add.w	r7, r0, #8
    bdfa:	4638      	mov	r0, r7
    bdfc:	f010 fedc 	bl	1cbb8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    be00:	4286      	cmp	r6, r0
    be02:	d212      	bcs.n	be2a <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
    be04:	4b0b      	ldr	r3, [pc, #44]	; (be34 <create_frag+0x64>)
    be06:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    be0a:	4632      	mov	r2, r6
    be0c:	f855 1f08 	ldr.w	r1, [r5, #8]!
    be10:	4638      	mov	r0, r7
    be12:	f010 fe8b 	bl	1cb2c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    be16:	4631      	mov	r1, r6
    be18:	4628      	mov	r0, r5
    be1a:	f010 feb1 	bl	1cb80 <net_buf_simple_pull>
}
    be1e:	4620      	mov	r0, r4
    be20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    be22:	f010 fe33 	bl	1ca8c <net_buf_unref>
		return NULL;
    be26:	2400      	movs	r4, #0
    be28:	e7f9      	b.n	be1e <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
    be2a:	4638      	mov	r0, r7
    be2c:	f010 fec4 	bl	1cbb8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    be30:	b286      	uxth	r6, r0
    be32:	e7ea      	b.n	be0a <create_frag+0x3a>
    be34:	20000000 	.word	0x20000000

0000be38 <send_buf>:
{
    be38:	b538      	push	{r3, r4, r5, lr}
    be3a:	4605      	mov	r5, r0
    be3c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    be3e:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
    be40:	4a1b      	ldr	r2, [pc, #108]	; (beb0 <send_buf+0x78>)
    be42:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
    be46:	429a      	cmp	r2, r3
    be48:	d21f      	bcs.n	be8a <send_buf+0x52>
	frag = create_frag(conn, buf);
    be4a:	f7ff ffc1 	bl	bdd0 <create_frag>
	if (!frag) {
    be4e:	4601      	mov	r1, r0
    be50:	b350      	cbz	r0, bea8 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    be52:	2301      	movs	r3, #1
    be54:	2200      	movs	r2, #0
    be56:	4628      	mov	r0, r5
    be58:	f7ff f8a0 	bl	af9c <send_frag>
    be5c:	4603      	mov	r3, r0
    be5e:	b1c8      	cbz	r0, be94 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    be60:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
    be62:	4a13      	ldr	r2, [pc, #76]	; (beb0 <send_buf+0x78>)
    be64:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
    be68:	429a      	cmp	r2, r3
    be6a:	d215      	bcs.n	be98 <send_buf+0x60>
		frag = create_frag(conn, buf);
    be6c:	4621      	mov	r1, r4
    be6e:	4628      	mov	r0, r5
    be70:	f7ff ffae 	bl	bdd0 <create_frag>
		if (!frag) {
    be74:	4601      	mov	r1, r0
    be76:	b1c8      	cbz	r0, beac <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    be78:	2301      	movs	r3, #1
    be7a:	461a      	mov	r2, r3
    be7c:	4628      	mov	r0, r5
    be7e:	f7ff f88d 	bl	af9c <send_frag>
    be82:	4603      	mov	r3, r0
    be84:	2800      	cmp	r0, #0
    be86:	d1eb      	bne.n	be60 <send_buf+0x28>
    be88:	e004      	b.n	be94 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    be8a:	2300      	movs	r3, #0
    be8c:	2202      	movs	r2, #2
    be8e:	f7ff f885 	bl	af9c <send_frag>
    be92:	4603      	mov	r3, r0
}
    be94:	4618      	mov	r0, r3
    be96:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
    be98:	2300      	movs	r3, #0
    be9a:	2203      	movs	r2, #3
    be9c:	4621      	mov	r1, r4
    be9e:	4628      	mov	r0, r5
    bea0:	f7ff f87c 	bl	af9c <send_frag>
    bea4:	4603      	mov	r3, r0
    bea6:	e7f5      	b.n	be94 <send_buf+0x5c>
		return false;
    bea8:	2300      	movs	r3, #0
    beaa:	e7f3      	b.n	be94 <send_buf+0x5c>
			return false;
    beac:	2300      	movs	r3, #0
    beae:	e7f1      	b.n	be94 <send_buf+0x5c>
    beb0:	20000000 	.word	0x20000000

0000beb4 <bt_conn_process_tx>:
{
    beb4:	b570      	push	{r4, r5, r6, lr}
    beb6:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    beb8:	7a83      	ldrb	r3, [r0, #10]
    beba:	b95b      	cbnz	r3, bed4 <bt_conn_process_tx+0x20>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    bebc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bebe:	e8d3 2fef 	ldaex	r2, [r3]
    bec2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    bec6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    beca:	2800      	cmp	r0, #0
    becc:	d1f7      	bne.n	bebe <bt_conn_process_tx+0xa>
	if (conn->state == BT_CONN_DISCONNECTED &&
    bece:	f012 0f40 	tst.w	r2, #64	; 0x40
    bed2:	d10d      	bne.n	bef0 <bt_conn_process_tx+0x3c>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    bed4:	2200      	movs	r2, #0
    bed6:	2300      	movs	r3, #0
    bed8:	f104 0038 	add.w	r0, r4, #56	; 0x38
    bedc:	f010 fd4a 	bl	1c974 <net_buf_get>
	BT_ASSERT(buf);
    bee0:	4605      	mov	r5, r0
    bee2:	b148      	cbz	r0, bef8 <bt_conn_process_tx+0x44>
	if (!send_buf(conn, buf)) {
    bee4:	4629      	mov	r1, r5
    bee6:	4620      	mov	r0, r4
    bee8:	f7ff ffa6 	bl	be38 <send_buf>
    beec:	b190      	cbz	r0, bf14 <bt_conn_process_tx+0x60>
}
    beee:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
    bef0:	4620      	mov	r0, r4
    bef2:	f00e fd0b 	bl	1a90c <conn_cleanup>
		return;
    bef6:	e7fa      	b.n	beee <bt_conn_process_tx+0x3a>
	BT_ASSERT(buf);
    bef8:	f240 330b 	movw	r3, #779	; 0x30b
    befc:	4a0c      	ldr	r2, [pc, #48]	; (bf30 <bt_conn_process_tx+0x7c>)
    befe:	490d      	ldr	r1, [pc, #52]	; (bf34 <bt_conn_process_tx+0x80>)
    bf00:	480d      	ldr	r0, [pc, #52]	; (bf38 <bt_conn_process_tx+0x84>)
    bf02:	f00c fe0b 	bl	18b1c <assert_print>
    bf06:	4040      	eors	r0, r0
    bf08:	f380 8811 	msr	BASEPRI, r0
    bf0c:	f04f 0003 	mov.w	r0, #3
    bf10:	df02      	svc	2
    bf12:	e7e7      	b.n	bee4 <bt_conn_process_tx+0x30>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    bf14:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
    bf16:	2300      	movs	r3, #0
    bf18:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
    bf1a:	4628      	mov	r0, r5
    bf1c:	f010 fdb6 	bl	1ca8c <net_buf_unref>
		if (tx) {
    bf20:	2e00      	cmp	r6, #0
    bf22:	d0e4      	beq.n	beee <bt_conn_process_tx+0x3a>
			conn_tx_destroy(conn, tx);
    bf24:	4631      	mov	r1, r6
    bf26:	4620      	mov	r0, r4
    bf28:	f00e fc76 	bl	1a818 <conn_tx_destroy>
    bf2c:	e7df      	b.n	beee <bt_conn_process_tx+0x3a>
    bf2e:	bf00      	nop
    bf30:	0002227c 	.word	0x0002227c
    bf34:	00022ae0 	.word	0x00022ae0
    bf38:	00021964 	.word	0x00021964

0000bf3c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    bf3c:	b940      	cbnz	r0, bf50 <bt_conn_lookup_index+0x14>
{
    bf3e:	b508      	push	{r3, lr}
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    bf40:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    bf44:	4803      	ldr	r0, [pc, #12]	; (bf54 <bt_conn_lookup_index+0x18>)
    bf46:	eb00 1083 	add.w	r0, r0, r3, lsl #6
    bf4a:	f00e fd3b 	bl	1a9c4 <bt_conn_ref>
}
    bf4e:	bd08      	pop	{r3, pc}
		return NULL;
    bf50:	2000      	movs	r0, #0
}
    bf52:	4770      	bx	lr
    bf54:	200014b0 	.word	0x200014b0

0000bf58 <bt_conn_init>:

int bt_conn_init(void)
{
    bf58:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    bf5a:	2400      	movs	r4, #0
    bf5c:	e006      	b.n	bf6c <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
    bf5e:	490a      	ldr	r1, [pc, #40]	; (bf88 <bt_conn_init+0x30>)
    bf60:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    bf64:	4809      	ldr	r0, [pc, #36]	; (bf8c <bt_conn_init+0x34>)
    bf66:	f013 fb4b 	bl	1f600 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    bf6a:	3401      	adds	r4, #1
    bf6c:	2c02      	cmp	r4, #2
    bf6e:	d9f6      	bls.n	bf5e <bt_conn_init+0x6>
	}

	bt_att_init();
    bf70:	f001 fd90 	bl	da94 <bt_att_init>

	err = bt_smp_init();
    bf74:	f010 fc23 	bl	1c7be <bt_smp_init>
	if (err) {
    bf78:	4604      	mov	r4, r0
    bf7a:	b108      	cbz	r0, bf80 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    bf7c:	4620      	mov	r0, r4
    bf7e:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
    bf80:	f00e fec1 	bl	1ad06 <bt_l2cap_init>
	return 0;
    bf84:	e7fa      	b.n	bf7c <bt_conn_init+0x24>
    bf86:	bf00      	nop
    bf88:	20001ff0 	.word	0x20001ff0
    bf8c:	20000740 	.word	0x20000740

0000bf90 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
    bf90:	4a05      	ldr	r2, [pc, #20]	; (bfa8 <get_ident+0x18>)
    bf92:	7813      	ldrb	r3, [r2, #0]
    bf94:	3301      	adds	r3, #1
    bf96:	b2db      	uxtb	r3, r3
    bf98:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    bf9a:	b90b      	cbnz	r3, bfa0 <get_ident+0x10>
		ident++;
    bf9c:	3301      	adds	r3, #1
    bf9e:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    bfa0:	4b01      	ldr	r3, [pc, #4]	; (bfa8 <get_ident+0x18>)
    bfa2:	7818      	ldrb	r0, [r3, #0]
    bfa4:	4770      	bx	lr
    bfa6:	bf00      	nop
    bfa8:	20002b79 	.word	0x20002b79

0000bfac <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    bfac:	b5b0      	push	{r4, r5, r7, lr}
    bfae:	b082      	sub	sp, #8
    bfb0:	af00      	add	r7, sp, #0
    bfb2:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    bfb4:	2000      	movs	r0, #0
    bfb6:	2800      	cmp	r0, #0
    bfb8:	d03a      	beq.n	c030 <l2cap_accept+0x84>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    bfba:	466c      	mov	r4, sp
    bfbc:	b088      	sub	sp, #32
    bfbe:	466b      	mov	r3, sp
    bfc0:	f113 0210 	adds.w	r2, r3, #16
    bfc4:	d044      	beq.n	c050 <l2cap_accept+0xa4>
    bfc6:	210c      	movs	r1, #12
    bfc8:	b11a      	cbz	r2, bfd2 <l2cap_accept+0x26>
    bfca:	2904      	cmp	r1, #4
    bfcc:	dd01      	ble.n	bfd2 <l2cap_accept+0x26>
    bfce:	4823      	ldr	r0, [pc, #140]	; (c05c <l2cap_accept+0xb0>)
    bfd0:	6158      	str	r0, [r3, #20]
    bfd2:	b112      	cbz	r2, bfda <l2cap_accept+0x2e>
    bfd4:	2908      	cmp	r1, #8
    bfd6:	dd00      	ble.n	bfda <l2cap_accept+0x2e>
    bfd8:	619d      	str	r5, [r3, #24]
    bfda:	290b      	cmp	r1, #11
    bfdc:	dd3b      	ble.n	c056 <l2cap_accept+0xaa>
    bfde:	f04f 0c0c 	mov.w	ip, #12
    bfe2:	b13a      	cbz	r2, bff4 <l2cap_accept+0x48>
    bfe4:	2103      	movs	r1, #3
    bfe6:	7139      	strb	r1, [r7, #4]
    bfe8:	2100      	movs	r1, #0
    bfea:	7179      	strb	r1, [r7, #5]
    bfec:	71b9      	strb	r1, [r7, #6]
    bfee:	71f9      	strb	r1, [r7, #7]
    bff0:	6878      	ldr	r0, [r7, #4]
    bff2:	6118      	str	r0, [r3, #16]
    bff4:	2100      	movs	r1, #0
    bff6:	f36f 0100 	bfc	r1, #0, #1
    bffa:	f36f 0141 	bfc	r1, #1, #1
    bffe:	f36f 0182 	bfc	r1, #2, #1
    c002:	f36f 01c5 	bfc	r1, #3, #3
    c006:	2301      	movs	r3, #1
    c008:	f363 1188 	bfi	r1, r3, #6, #3
    c00c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    c010:	f36c 2152 	bfi	r1, ip, #9, #10
    c014:	f36f 41de 	bfc	r1, #19, #12
    c018:	f36f 71df 	bfc	r1, #31, #1
    c01c:	2300      	movs	r3, #0
    c01e:	4810      	ldr	r0, [pc, #64]	; (c060 <l2cap_accept+0xb4>)
    c020:	f7f7 fb54 	bl	36cc <z_impl_z_log_msg_static_create>
    c024:	46a5      	mov	sp, r4

	return -ENOMEM;
    c026:	f06f 000b 	mvn.w	r0, #11
}
    c02a:	3708      	adds	r7, #8
    c02c:	46bd      	mov	sp, r7
    c02e:	bdb0      	pop	{r4, r5, r7, pc}
		if (l2cap->chan.chan.conn) {
    c030:	238c      	movs	r3, #140	; 0x8c
    c032:	fb00 f303 	mul.w	r3, r0, r3
    c036:	4a0b      	ldr	r2, [pc, #44]	; (c064 <l2cap_accept+0xb8>)
    c038:	58d3      	ldr	r3, [r2, r3]
    c03a:	b10b      	cbz	r3, c040 <l2cap_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    c03c:	3001      	adds	r0, #1
    c03e:	e7ba      	b.n	bfb6 <l2cap_accept+0xa>
		l2cap->chan.chan.ops = &ops;
    c040:	4b08      	ldr	r3, [pc, #32]	; (c064 <l2cap_accept+0xb8>)
    c042:	228c      	movs	r2, #140	; 0x8c
    c044:	fb02 3300 	mla	r3, r2, r0, r3
    c048:	4a07      	ldr	r2, [pc, #28]	; (c068 <l2cap_accept+0xbc>)
    c04a:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    c04c:	600b      	str	r3, [r1, #0]
		return 0;
    c04e:	e7ec      	b.n	c02a <l2cap_accept+0x7e>
	BT_ERR("No available L2CAP context for conn %p", conn);
    c050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c054:	e7b8      	b.n	bfc8 <l2cap_accept+0x1c>
    c056:	f06f 0c1b 	mvn.w	ip, #27
    c05a:	e7c2      	b.n	bfe2 <l2cap_accept+0x36>
    c05c:	000222d4 	.word	0x000222d4
    c060:	00020560 	.word	0x00020560
    c064:	20002020 	.word	0x20002020
    c068:	00022444 	.word	0x00022444

0000c06c <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
    c06c:	898b      	ldrh	r3, [r1, #12]
    c06e:	2b01      	cmp	r3, #1
    c070:	d900      	bls.n	c074 <le_conn_param_rsp+0x8>
    c072:	4770      	bx	lr
{
    c074:	b500      	push	{lr}
    c076:	b089      	sub	sp, #36	; 0x24
		BT_ERR("Too small LE conn param rsp");
    c078:	4b13      	ldr	r3, [pc, #76]	; (c0c8 <le_conn_param_rsp+0x5c>)
    c07a:	9307      	str	r3, [sp, #28]
    c07c:	2302      	movs	r3, #2
    c07e:	f88d 3004 	strb.w	r3, [sp, #4]
    c082:	2300      	movs	r3, #0
    c084:	f88d 3005 	strb.w	r3, [sp, #5]
    c088:	f88d 3006 	strb.w	r3, [sp, #6]
    c08c:	f88d 3007 	strb.w	r3, [sp, #7]
    c090:	9a01      	ldr	r2, [sp, #4]
    c092:	9206      	str	r2, [sp, #24]
    c094:	4619      	mov	r1, r3
    c096:	f363 0100 	bfi	r1, r3, #0, #1
    c09a:	f363 0141 	bfi	r1, r3, #1, #1
    c09e:	f363 0182 	bfi	r1, r3, #2, #1
    c0a2:	f363 01c5 	bfi	r1, r3, #3, #3
    c0a6:	2201      	movs	r2, #1
    c0a8:	f362 1188 	bfi	r1, r2, #6, #3
    c0ac:	2208      	movs	r2, #8
    c0ae:	f362 2152 	bfi	r1, r2, #9, #10
    c0b2:	f363 41de 	bfi	r1, r3, #19, #12
    c0b6:	f363 71df 	bfi	r1, r3, #31, #1
    c0ba:	aa06      	add	r2, sp, #24
    c0bc:	4803      	ldr	r0, [pc, #12]	; (c0cc <le_conn_param_rsp+0x60>)
    c0be:	f7f7 fb05 	bl	36cc <z_impl_z_log_msg_static_create>
}
    c0c2:	b009      	add	sp, #36	; 0x24
    c0c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c0c8:	000222fc 	.word	0x000222fc
    c0cc:	00020560 	.word	0x00020560

0000c0d0 <l2cap_chan_add>:
{
    c0d0:	b510      	push	{r4, lr}
    c0d2:	b088      	sub	sp, #32
	if (!le_chan) {
    c0d4:	b179      	cbz	r1, c0f6 <l2cap_chan_add+0x26>
    c0d6:	460b      	mov	r3, r1
	atomic_clear(chan->status);
    c0d8:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c0da:	2400      	movs	r4, #0
    c0dc:	e8d1 cfef 	ldaex	ip, [r1]
    c0e0:	e8c1 4fee 	stlex	lr, r4, [r1]
    c0e4:	f1be 0f00 	cmp.w	lr, #0
    c0e8:	d1f8      	bne.n	c0dc <l2cap_chan_add+0xc>
	bt_l2cap_chan_add(conn, chan, destroy);
    c0ea:	4619      	mov	r1, r3
    c0ec:	f00e fd55 	bl	1ab9a <bt_l2cap_chan_add>
	return true;
    c0f0:	2001      	movs	r0, #1
}
    c0f2:	b008      	add	sp, #32
    c0f4:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to allocate L2CAP channel ID");
    c0f6:	4b14      	ldr	r3, [pc, #80]	; (c148 <l2cap_chan_add+0x78>)
    c0f8:	9307      	str	r3, [sp, #28]
    c0fa:	2302      	movs	r3, #2
    c0fc:	f88d 3004 	strb.w	r3, [sp, #4]
    c100:	2400      	movs	r4, #0
    c102:	f88d 4005 	strb.w	r4, [sp, #5]
    c106:	f88d 4006 	strb.w	r4, [sp, #6]
    c10a:	f88d 4007 	strb.w	r4, [sp, #7]
    c10e:	9b01      	ldr	r3, [sp, #4]
    c110:	9306      	str	r3, [sp, #24]
    c112:	4621      	mov	r1, r4
    c114:	f364 0100 	bfi	r1, r4, #0, #1
    c118:	f364 0141 	bfi	r1, r4, #1, #1
    c11c:	f364 0182 	bfi	r1, r4, #2, #1
    c120:	f364 01c5 	bfi	r1, r4, #3, #3
    c124:	2301      	movs	r3, #1
    c126:	f363 1188 	bfi	r1, r3, #6, #3
    c12a:	2308      	movs	r3, #8
    c12c:	f363 2152 	bfi	r1, r3, #9, #10
    c130:	f364 41de 	bfi	r1, r4, #19, #12
    c134:	f364 71df 	bfi	r1, r4, #31, #1
    c138:	4623      	mov	r3, r4
    c13a:	aa06      	add	r2, sp, #24
    c13c:	4803      	ldr	r0, [pc, #12]	; (c14c <l2cap_chan_add+0x7c>)
    c13e:	f7f7 fac5 	bl	36cc <z_impl_z_log_msg_static_create>
		return false;
    c142:	4620      	mov	r0, r4
    c144:	e7d5      	b.n	c0f2 <l2cap_chan_add+0x22>
    c146:	bf00      	nop
    c148:	00022318 	.word	0x00022318
    c14c:	00020560 	.word	0x00020560

0000c150 <bt_l2cap_connected>:
{
    c150:	b530      	push	{r4, r5, lr}
    c152:	b083      	sub	sp, #12
    c154:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c156:	4c17      	ldr	r4, [pc, #92]	; (c1b4 <bt_l2cap_connected+0x64>)
    c158:	e000      	b.n	c15c <bt_l2cap_connected+0xc>
    c15a:	340c      	adds	r4, #12
    c15c:	4b16      	ldr	r3, [pc, #88]	; (c1b8 <bt_l2cap_connected+0x68>)
    c15e:	429c      	cmp	r4, r3
    c160:	d226      	bcs.n	c1b0 <bt_l2cap_connected+0x60>
		if (fchan->accept(conn, &chan) < 0) {
    c162:	6863      	ldr	r3, [r4, #4]
    c164:	a901      	add	r1, sp, #4
    c166:	4628      	mov	r0, r5
    c168:	4798      	blx	r3
    c16a:	2800      	cmp	r0, #0
    c16c:	dbf5      	blt.n	c15a <bt_l2cap_connected+0xa>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    c16e:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    c170:	8823      	ldrh	r3, [r4, #0]
    c172:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
    c174:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    c176:	68a2      	ldr	r2, [r4, #8]
    c178:	4628      	mov	r0, r5
    c17a:	f7ff ffa9 	bl	c0d0 <l2cap_chan_add>
    c17e:	b1b8      	cbz	r0, c1b0 <bt_l2cap_connected+0x60>
		if (chan->ops->connected) {
    c180:	9801      	ldr	r0, [sp, #4]
    c182:	6843      	ldr	r3, [r0, #4]
    c184:	681b      	ldr	r3, [r3, #0]
    c186:	b103      	cbz	r3, c18a <bt_l2cap_connected+0x3a>
			chan->ops->connected(chan);
    c188:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
    c18a:	9b01      	ldr	r3, [sp, #4]
    c18c:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c18e:	e8d3 2fef 	ldaex	r2, [r3]
    c192:	f042 0201 	orr.w	r2, r2, #1
    c196:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c19a:	2900      	cmp	r1, #0
    c19c:	d1f7      	bne.n	c18e <bt_l2cap_connected+0x3e>
		if (chan->ops->status) {
    c19e:	9801      	ldr	r0, [sp, #4]
    c1a0:	6843      	ldr	r3, [r0, #4]
    c1a2:	699b      	ldr	r3, [r3, #24]
    c1a4:	2b00      	cmp	r3, #0
    c1a6:	d0d8      	beq.n	c15a <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
    c1a8:	f100 0110 	add.w	r1, r0, #16
    c1ac:	4798      	blx	r3
    c1ae:	e7d4      	b.n	c15a <bt_l2cap_connected+0xa>
}
    c1b0:	b003      	add	sp, #12
    c1b2:	bd30      	pop	{r4, r5, pc}
    c1b4:	000204a8 	.word	0x000204a8
    c1b8:	000204cc 	.word	0x000204cc

0000c1bc <l2cap_create_le_sig_pdu>:
{
    c1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1c0:	b082      	sub	sp, #8
    c1c2:	af00      	add	r7, sp, #0
    c1c4:	460c      	mov	r4, r1
    c1c6:	4616      	mov	r6, r2
    c1c8:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
    c1ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c1ce:	2300      	movs	r3, #0
    c1d0:	2100      	movs	r1, #0
    c1d2:	4608      	mov	r0, r1
    c1d4:	f00e fd12 	bl	1abfc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    c1d8:	4680      	mov	r8, r0
    c1da:	b158      	cbz	r0, c1f4 <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
    c1dc:	2104      	movs	r1, #4
    c1de:	3008      	adds	r0, #8
    c1e0:	f010 fc9e 	bl	1cb20 <net_buf_simple_add>
	hdr->code = code;
    c1e4:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
    c1e6:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    c1e8:	8045      	strh	r5, [r0, #2]
}
    c1ea:	4640      	mov	r0, r8
    c1ec:	3708      	adds	r7, #8
    c1ee:	46bd      	mov	sp, r7
    c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    c1f4:	466d      	mov	r5, sp
    c1f6:	b088      	sub	sp, #32
    c1f8:	466b      	mov	r3, sp
    c1fa:	f113 0210 	adds.w	r2, r3, #16
    c1fe:	d02f      	beq.n	c260 <l2cap_create_le_sig_pdu+0xa4>
    c200:	210c      	movs	r1, #12
    c202:	b11a      	cbz	r2, c20c <l2cap_create_le_sig_pdu+0x50>
    c204:	2904      	cmp	r1, #4
    c206:	dd01      	ble.n	c20c <l2cap_create_le_sig_pdu+0x50>
    c208:	4818      	ldr	r0, [pc, #96]	; (c26c <l2cap_create_le_sig_pdu+0xb0>)
    c20a:	6158      	str	r0, [r3, #20]
    c20c:	b112      	cbz	r2, c214 <l2cap_create_le_sig_pdu+0x58>
    c20e:	2908      	cmp	r1, #8
    c210:	dd00      	ble.n	c214 <l2cap_create_le_sig_pdu+0x58>
    c212:	619c      	str	r4, [r3, #24]
    c214:	290b      	cmp	r1, #11
    c216:	dd26      	ble.n	c266 <l2cap_create_le_sig_pdu+0xaa>
    c218:	240c      	movs	r4, #12
    c21a:	b13a      	cbz	r2, c22c <l2cap_create_le_sig_pdu+0x70>
    c21c:	2103      	movs	r1, #3
    c21e:	7139      	strb	r1, [r7, #4]
    c220:	2100      	movs	r1, #0
    c222:	7179      	strb	r1, [r7, #5]
    c224:	71b9      	strb	r1, [r7, #6]
    c226:	71f9      	strb	r1, [r7, #7]
    c228:	6878      	ldr	r0, [r7, #4]
    c22a:	6118      	str	r0, [r3, #16]
    c22c:	2100      	movs	r1, #0
    c22e:	f36f 0100 	bfc	r1, #0, #1
    c232:	f36f 0141 	bfc	r1, #1, #1
    c236:	f36f 0182 	bfc	r1, #2, #1
    c23a:	f36f 01c5 	bfc	r1, #3, #3
    c23e:	2301      	movs	r3, #1
    c240:	f363 1188 	bfi	r1, r3, #6, #3
    c244:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    c248:	f364 2152 	bfi	r1, r4, #9, #10
    c24c:	f36f 41de 	bfc	r1, #19, #12
    c250:	f36f 71df 	bfc	r1, #31, #1
    c254:	2300      	movs	r3, #0
    c256:	4806      	ldr	r0, [pc, #24]	; (c270 <l2cap_create_le_sig_pdu+0xb4>)
    c258:	f7f7 fa38 	bl	36cc <z_impl_z_log_msg_static_create>
    c25c:	46ad      	mov	sp, r5
		return NULL;
    c25e:	e7c4      	b.n	c1ea <l2cap_create_le_sig_pdu+0x2e>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    c260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c264:	e7cd      	b.n	c202 <l2cap_create_le_sig_pdu+0x46>
    c266:	f06f 041b 	mvn.w	r4, #27
    c26a:	e7d6      	b.n	c21a <l2cap_create_le_sig_pdu+0x5e>
    c26c:	0002233c 	.word	0x0002233c
    c270:	00020560 	.word	0x00020560

0000c274 <l2cap_recv>:
{
    c274:	b5f0      	push	{r4, r5, r6, r7, lr}
    c276:	b091      	sub	sp, #68	; 0x44
    c278:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
    c27a:	898b      	ldrh	r3, [r1, #12]
    c27c:	2b03      	cmp	r3, #3
    c27e:	d945      	bls.n	c30c <l2cap_recv+0x98>
    c280:	4606      	mov	r6, r0
    c282:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
    c284:	2104      	movs	r1, #4
    c286:	f104 0008 	add.w	r0, r4, #8
    c28a:	f010 fc81 	bl	1cb90 <net_buf_simple_pull_mem>
    c28e:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    c290:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
    c292:	89a0      	ldrh	r0, [r4, #12]
    c294:	4281      	cmp	r1, r0
    c296:	d065      	beq.n	c364 <l2cap_recv+0xf0>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    c298:	466d      	mov	r5, sp
    c29a:	b088      	sub	sp, #32
    c29c:	ab02      	add	r3, sp, #8
    c29e:	f113 0210 	adds.w	r2, r3, #16
    c2a2:	d059      	beq.n	c358 <l2cap_recv+0xe4>
    c2a4:	2410      	movs	r4, #16
    c2a6:	b11a      	cbz	r2, c2b0 <l2cap_recv+0x3c>
    c2a8:	2c04      	cmp	r4, #4
    c2aa:	dd01      	ble.n	c2b0 <l2cap_recv+0x3c>
    c2ac:	4e67      	ldr	r6, [pc, #412]	; (c44c <l2cap_recv+0x1d8>)
    c2ae:	615e      	str	r6, [r3, #20]
    c2b0:	b112      	cbz	r2, c2b8 <l2cap_recv+0x44>
    c2b2:	2c08      	cmp	r4, #8
    c2b4:	dd00      	ble.n	c2b8 <l2cap_recv+0x44>
    c2b6:	6198      	str	r0, [r3, #24]
    c2b8:	b112      	cbz	r2, c2c0 <l2cap_recv+0x4c>
    c2ba:	2c0c      	cmp	r4, #12
    c2bc:	dd00      	ble.n	c2c0 <l2cap_recv+0x4c>
    c2be:	61d9      	str	r1, [r3, #28]
    c2c0:	2c0f      	cmp	r4, #15
    c2c2:	dd4c      	ble.n	c35e <l2cap_recv+0xea>
    c2c4:	2410      	movs	r4, #16
    c2c6:	b13a      	cbz	r2, c2d8 <l2cap_recv+0x64>
    c2c8:	2104      	movs	r1, #4
    c2ca:	7139      	strb	r1, [r7, #4]
    c2cc:	2100      	movs	r1, #0
    c2ce:	7179      	strb	r1, [r7, #5]
    c2d0:	71b9      	strb	r1, [r7, #6]
    c2d2:	71f9      	strb	r1, [r7, #7]
    c2d4:	6878      	ldr	r0, [r7, #4]
    c2d6:	6118      	str	r0, [r3, #16]
    c2d8:	2100      	movs	r1, #0
    c2da:	f36f 0100 	bfc	r1, #0, #1
    c2de:	f36f 0141 	bfc	r1, #1, #1
    c2e2:	f36f 0182 	bfc	r1, #2, #1
    c2e6:	f36f 01c5 	bfc	r1, #3, #3
    c2ea:	2301      	movs	r3, #1
    c2ec:	f363 1188 	bfi	r1, r3, #6, #3
    c2f0:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
    c2f4:	f364 2152 	bfi	r1, r4, #9, #10
    c2f8:	f36f 41de 	bfc	r1, #19, #12
    c2fc:	f36f 71df 	bfc	r1, #31, #1
    c300:	2300      	movs	r3, #0
    c302:	4853      	ldr	r0, [pc, #332]	; (c450 <l2cap_recv+0x1dc>)
    c304:	f7f7 f9e2 	bl	36cc <z_impl_z_log_msg_static_create>
    c308:	46ad      	mov	sp, r5
		return 0;
    c30a:	e021      	b.n	c350 <l2cap_recv+0xdc>
		BT_ERR("Too small L2CAP signaling PDU");
    c30c:	4b51      	ldr	r3, [pc, #324]	; (c454 <l2cap_recv+0x1e0>)
    c30e:	637b      	str	r3, [r7, #52]	; 0x34
    c310:	2302      	movs	r3, #2
    c312:	713b      	strb	r3, [r7, #4]
    c314:	2300      	movs	r3, #0
    c316:	717b      	strb	r3, [r7, #5]
    c318:	71bb      	strb	r3, [r7, #6]
    c31a:	71fb      	strb	r3, [r7, #7]
    c31c:	687a      	ldr	r2, [r7, #4]
    c31e:	633a      	str	r2, [r7, #48]	; 0x30
    c320:	4619      	mov	r1, r3
    c322:	f363 0100 	bfi	r1, r3, #0, #1
    c326:	f363 0141 	bfi	r1, r3, #1, #1
    c32a:	f363 0182 	bfi	r1, r3, #2, #1
    c32e:	f363 01c5 	bfi	r1, r3, #3, #3
    c332:	2201      	movs	r2, #1
    c334:	f362 1188 	bfi	r1, r2, #6, #3
    c338:	2208      	movs	r2, #8
    c33a:	f362 2152 	bfi	r1, r2, #9, #10
    c33e:	f363 41de 	bfi	r1, r3, #19, #12
    c342:	f363 71df 	bfi	r1, r3, #31, #1
    c346:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c34a:	4841      	ldr	r0, [pc, #260]	; (c450 <l2cap_recv+0x1dc>)
    c34c:	f7f7 f9be 	bl	36cc <z_impl_z_log_msg_static_create>
}
    c350:	2000      	movs	r0, #0
    c352:	373c      	adds	r7, #60	; 0x3c
    c354:	46bd      	mov	sp, r7
    c356:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    c358:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c35c:	e7a3      	b.n	c2a6 <l2cap_recv+0x32>
    c35e:	f06f 041b 	mvn.w	r4, #27
    c362:	e7b0      	b.n	c2c6 <l2cap_recv+0x52>
	if (!hdr->ident) {
    c364:	786b      	ldrb	r3, [r5, #1]
    c366:	b14b      	cbz	r3, c37c <l2cap_recv+0x108>
	switch (hdr->code) {
    c368:	782b      	ldrb	r3, [r5, #0]
    c36a:	2b01      	cmp	r3, #1
    c36c:	d0f0      	beq.n	c350 <l2cap_recv+0xdc>
    c36e:	2b13      	cmp	r3, #19
    c370:	d127      	bne.n	c3c2 <l2cap_recv+0x14e>
		le_conn_param_rsp(l2cap, buf);
    c372:	4621      	mov	r1, r4
    c374:	4630      	mov	r0, r6
    c376:	f7ff fe79 	bl	c06c <le_conn_param_rsp>
		break;
    c37a:	e7e9      	b.n	c350 <l2cap_recv+0xdc>
		BT_ERR("Invalid ident value in L2CAP PDU");
    c37c:	4b36      	ldr	r3, [pc, #216]	; (c458 <l2cap_recv+0x1e4>)
    c37e:	61fb      	str	r3, [r7, #28]
    c380:	2302      	movs	r3, #2
    c382:	713b      	strb	r3, [r7, #4]
    c384:	2300      	movs	r3, #0
    c386:	717b      	strb	r3, [r7, #5]
    c388:	71bb      	strb	r3, [r7, #6]
    c38a:	71fb      	strb	r3, [r7, #7]
    c38c:	687a      	ldr	r2, [r7, #4]
    c38e:	61ba      	str	r2, [r7, #24]
    c390:	4619      	mov	r1, r3
    c392:	f363 0100 	bfi	r1, r3, #0, #1
    c396:	f363 0141 	bfi	r1, r3, #1, #1
    c39a:	f363 0182 	bfi	r1, r3, #2, #1
    c39e:	f363 01c5 	bfi	r1, r3, #3, #3
    c3a2:	2201      	movs	r2, #1
    c3a4:	f362 1188 	bfi	r1, r2, #6, #3
    c3a8:	2208      	movs	r2, #8
    c3aa:	f362 2152 	bfi	r1, r2, #9, #10
    c3ae:	f363 41de 	bfi	r1, r3, #19, #12
    c3b2:	f363 71df 	bfi	r1, r3, #31, #1
    c3b6:	f107 0218 	add.w	r2, r7, #24
    c3ba:	4825      	ldr	r0, [pc, #148]	; (c450 <l2cap_recv+0x1dc>)
    c3bc:	f7f7 f986 	bl	36cc <z_impl_z_log_msg_static_create>
		return 0;
    c3c0:	e7c6      	b.n	c350 <l2cap_recv+0xdc>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c3c2:	466c      	mov	r4, sp
    c3c4:	b088      	sub	sp, #32
    c3c6:	a902      	add	r1, sp, #8
    c3c8:	f111 0210 	adds.w	r2, r1, #16
    c3cc:	d038      	beq.n	c440 <l2cap_recv+0x1cc>
    c3ce:	200c      	movs	r0, #12
    c3d0:	b12a      	cbz	r2, c3de <l2cap_recv+0x16a>
    c3d2:	2804      	cmp	r0, #4
    c3d4:	dd03      	ble.n	c3de <l2cap_recv+0x16a>
    c3d6:	f8df c084 	ldr.w	ip, [pc, #132]	; c45c <l2cap_recv+0x1e8>
    c3da:	f8c1 c014 	str.w	ip, [r1, #20]
    c3de:	b112      	cbz	r2, c3e6 <l2cap_recv+0x172>
    c3e0:	2808      	cmp	r0, #8
    c3e2:	dd00      	ble.n	c3e6 <l2cap_recv+0x172>
    c3e4:	618b      	str	r3, [r1, #24]
    c3e6:	280b      	cmp	r0, #11
    c3e8:	dd2d      	ble.n	c446 <l2cap_recv+0x1d2>
    c3ea:	230c      	movs	r3, #12
    c3ec:	b13a      	cbz	r2, c3fe <l2cap_recv+0x18a>
    c3ee:	2003      	movs	r0, #3
    c3f0:	7138      	strb	r0, [r7, #4]
    c3f2:	2000      	movs	r0, #0
    c3f4:	7178      	strb	r0, [r7, #5]
    c3f6:	71b8      	strb	r0, [r7, #6]
    c3f8:	71f8      	strb	r0, [r7, #7]
    c3fa:	6878      	ldr	r0, [r7, #4]
    c3fc:	6108      	str	r0, [r1, #16]
    c3fe:	2100      	movs	r1, #0
    c400:	f36f 0100 	bfc	r1, #0, #1
    c404:	f36f 0141 	bfc	r1, #1, #1
    c408:	f36f 0182 	bfc	r1, #2, #1
    c40c:	f36f 01c5 	bfc	r1, #3, #3
    c410:	2002      	movs	r0, #2
    c412:	f360 1188 	bfi	r1, r0, #6, #3
    c416:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
    c41a:	f363 2152 	bfi	r1, r3, #9, #10
    c41e:	f36f 41de 	bfc	r1, #19, #12
    c422:	f36f 71df 	bfc	r1, #31, #1
    c426:	2300      	movs	r3, #0
    c428:	4809      	ldr	r0, [pc, #36]	; (c450 <l2cap_recv+0x1dc>)
    c42a:	f7f7 f94f 	bl	36cc <z_impl_z_log_msg_static_create>
    c42e:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
    c430:	7869      	ldrb	r1, [r5, #1]
    c432:	6830      	ldr	r0, [r6, #0]
    c434:	2200      	movs	r2, #0
    c436:	9200      	str	r2, [sp, #0]
    c438:	4613      	mov	r3, r2
    c43a:	f00e fbf9 	bl	1ac30 <l2cap_send_reject>
		break;
    c43e:	e787      	b.n	c350 <l2cap_recv+0xdc>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c440:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c444:	e7c4      	b.n	c3d0 <l2cap_recv+0x15c>
    c446:	f06f 031b 	mvn.w	r3, #27
    c44a:	e7cf      	b.n	c3ec <l2cap_recv+0x178>
    c44c:	00022384 	.word	0x00022384
    c450:	00020560 	.word	0x00020560
    c454:	00022364 	.word	0x00022364
    c458:	000223a8 	.word	0x000223a8
    c45c:	000223cc 	.word	0x000223cc

0000c460 <bt_l2cap_recv>:
{
    c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c464:	b088      	sub	sp, #32
    c466:	af00      	add	r7, sp, #0
    c468:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    c46a:	898b      	ldrh	r3, [r1, #12]
    c46c:	2b03      	cmp	r3, #3
    c46e:	d915      	bls.n	c49c <bt_l2cap_recv+0x3c>
    c470:	4606      	mov	r6, r0
    c472:	4615      	mov	r5, r2
    c474:	2104      	movs	r1, #4
    c476:	f104 0008 	add.w	r0, r4, #8
    c47a:	f010 fb89 	bl	1cb90 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    c47e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    c482:	4641      	mov	r1, r8
    c484:	4630      	mov	r0, r6
    c486:	f00e fc00 	bl	1ac8a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c48a:	b368      	cbz	r0, c4e8 <bt_l2cap_recv+0x88>
	l2cap_chan_recv(chan, buf, complete);
    c48c:	462a      	mov	r2, r5
    c48e:	4621      	mov	r1, r4
    c490:	f00e fb67 	bl	1ab62 <l2cap_chan_recv>
}
    c494:	3720      	adds	r7, #32
    c496:	46bd      	mov	sp, r7
    c498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Too small L2CAP PDU received");
    c49c:	4b32      	ldr	r3, [pc, #200]	; (c568 <bt_l2cap_recv+0x108>)
    c49e:	61fb      	str	r3, [r7, #28]
    c4a0:	2302      	movs	r3, #2
    c4a2:	713b      	strb	r3, [r7, #4]
    c4a4:	2300      	movs	r3, #0
    c4a6:	717b      	strb	r3, [r7, #5]
    c4a8:	71bb      	strb	r3, [r7, #6]
    c4aa:	71fb      	strb	r3, [r7, #7]
    c4ac:	687a      	ldr	r2, [r7, #4]
    c4ae:	61ba      	str	r2, [r7, #24]
    c4b0:	4619      	mov	r1, r3
    c4b2:	f363 0100 	bfi	r1, r3, #0, #1
    c4b6:	f363 0141 	bfi	r1, r3, #1, #1
    c4ba:	f363 0182 	bfi	r1, r3, #2, #1
    c4be:	f363 01c5 	bfi	r1, r3, #3, #3
    c4c2:	2201      	movs	r2, #1
    c4c4:	f362 1188 	bfi	r1, r2, #6, #3
    c4c8:	2208      	movs	r2, #8
    c4ca:	f362 2152 	bfi	r1, r2, #9, #10
    c4ce:	f363 41de 	bfi	r1, r3, #19, #12
    c4d2:	f363 71df 	bfi	r1, r3, #31, #1
    c4d6:	f107 0218 	add.w	r2, r7, #24
    c4da:	4824      	ldr	r0, [pc, #144]	; (c56c <bt_l2cap_recv+0x10c>)
    c4dc:	f7f7 f8f6 	bl	36cc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    c4e0:	4620      	mov	r0, r4
    c4e2:	f010 fad3 	bl	1ca8c <net_buf_unref>
		return;
    c4e6:	e7d5      	b.n	c494 <bt_l2cap_recv+0x34>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    c4e8:	466e      	mov	r6, sp
    c4ea:	b088      	sub	sp, #32
    c4ec:	466b      	mov	r3, sp
    c4ee:	f113 0210 	adds.w	r2, r3, #16
    c4f2:	d033      	beq.n	c55c <bt_l2cap_recv+0xfc>
    c4f4:	210c      	movs	r1, #12
    c4f6:	b11a      	cbz	r2, c500 <bt_l2cap_recv+0xa0>
    c4f8:	2904      	cmp	r1, #4
    c4fa:	dd01      	ble.n	c500 <bt_l2cap_recv+0xa0>
    c4fc:	481c      	ldr	r0, [pc, #112]	; (c570 <bt_l2cap_recv+0x110>)
    c4fe:	6158      	str	r0, [r3, #20]
    c500:	b11a      	cbz	r2, c50a <bt_l2cap_recv+0xaa>
    c502:	2908      	cmp	r1, #8
    c504:	dd01      	ble.n	c50a <bt_l2cap_recv+0xaa>
    c506:	f8c3 8018 	str.w	r8, [r3, #24]
    c50a:	290b      	cmp	r1, #11
    c50c:	dd29      	ble.n	c562 <bt_l2cap_recv+0x102>
    c50e:	250c      	movs	r5, #12
    c510:	b13a      	cbz	r2, c522 <bt_l2cap_recv+0xc2>
    c512:	2103      	movs	r1, #3
    c514:	7139      	strb	r1, [r7, #4]
    c516:	2100      	movs	r1, #0
    c518:	7179      	strb	r1, [r7, #5]
    c51a:	71b9      	strb	r1, [r7, #6]
    c51c:	71f9      	strb	r1, [r7, #7]
    c51e:	6878      	ldr	r0, [r7, #4]
    c520:	6118      	str	r0, [r3, #16]
    c522:	2100      	movs	r1, #0
    c524:	f36f 0100 	bfc	r1, #0, #1
    c528:	f36f 0141 	bfc	r1, #1, #1
    c52c:	f36f 0182 	bfc	r1, #2, #1
    c530:	f36f 01c5 	bfc	r1, #3, #3
    c534:	2302      	movs	r3, #2
    c536:	f363 1188 	bfi	r1, r3, #6, #3
    c53a:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    c53e:	f365 2152 	bfi	r1, r5, #9, #10
    c542:	f36f 41de 	bfc	r1, #19, #12
    c546:	f36f 71df 	bfc	r1, #31, #1
    c54a:	2300      	movs	r3, #0
    c54c:	4807      	ldr	r0, [pc, #28]	; (c56c <bt_l2cap_recv+0x10c>)
    c54e:	f7f7 f8bd 	bl	36cc <z_impl_z_log_msg_static_create>
    c552:	46b5      	mov	sp, r6
		net_buf_unref(buf);
    c554:	4620      	mov	r0, r4
    c556:	f010 fa99 	bl	1ca8c <net_buf_unref>
		return;
    c55a:	e79b      	b.n	c494 <bt_l2cap_recv+0x34>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    c55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c560:	e7c9      	b.n	c4f6 <bt_l2cap_recv+0x96>
    c562:	f06f 051b 	mvn.w	r5, #27
    c566:	e7d3      	b.n	c510 <bt_l2cap_recv+0xb0>
    c568:	000223ec 	.word	0x000223ec
    c56c:	00020560 	.word	0x00020560
    c570:	0002240c 	.word	0x0002240c

0000c574 <att_cb>:

	chan_unknown(conn, user_data, err);
}

static bt_conn_tx_cb_t att_cb(const struct net_buf *buf)
{
    c574:	b508      	push	{r3, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    c576:	6883      	ldr	r3, [r0, #8]
    c578:	7818      	ldrb	r0, [r3, #0]
    c57a:	f00e fc12 	bl	1ada2 <att_op_get_type>

	switch (op_type) {
    c57e:	2805      	cmp	r0, #5
    c580:	d80a      	bhi.n	c598 <att_cb+0x24>
    c582:	e8df f000 	tbb	[pc, r0]
    c586:	0507      	.short	0x0507
    c588:	050b0703 	.word	0x050b0703
    c58c:	4804      	ldr	r0, [pc, #16]	; (c5a0 <att_cb+0x2c>)
    c58e:	e000      	b.n	c592 <att_cb+0x1e>
		return att_rsp_sent;
	case ATT_CONFIRMATION:
		return att_cfm_sent;
	case ATT_REQUEST:
	case ATT_INDICATION:
		return att_req_sent;
    c590:	4804      	ldr	r0, [pc, #16]	; (c5a4 <att_cb+0x30>)
	default:
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
	}

	return att_unknown;
}
    c592:	bd08      	pop	{r3, pc}
		return att_tx_complete;
    c594:	4804      	ldr	r0, [pc, #16]	; (c5a8 <att_cb+0x34>)
    c596:	e7fc      	b.n	c592 <att_cb+0x1e>
	return att_unknown;
    c598:	4804      	ldr	r0, [pc, #16]	; (c5ac <att_cb+0x38>)
    c59a:	e7fa      	b.n	c592 <att_cb+0x1e>
		return att_cfm_sent;
    c59c:	4804      	ldr	r0, [pc, #16]	; (c5b0 <att_cb+0x3c>)
    c59e:	e7f8      	b.n	c592 <att_cb+0x1e>
    c5a0:	0001b59f 	.word	0x0001b59f
    c5a4:	0001b567 	.word	0x0001b567
    c5a8:	0001b54b 	.word	0x0001b54b
    c5ac:	0001b52f 	.word	0x0001b52f
    c5b0:	0001b583 	.word	0x0001b583

0000c5b4 <tx_meta_data_alloc>:
{
    c5b4:	b508      	push	{r3, lr}
    c5b6:	4602      	mov	r2, r0
    c5b8:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
    c5ba:	4802      	ldr	r0, [pc, #8]	; (c5c4 <tx_meta_data_alloc+0x10>)
    c5bc:	f009 febc 	bl	16338 <z_impl_k_queue_get>
}
    c5c0:	bd08      	pop	{r3, pc}
    c5c2:	bf00      	nop
    c5c4:	20000728 	.word	0x20000728

0000c5c8 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    c5c8:	b510      	push	{r4, lr}
    c5ca:	b08e      	sub	sp, #56	; 0x38
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    c5cc:	7a83      	ldrb	r3, [r0, #10]
    c5ce:	2b07      	cmp	r3, #7
    c5d0:	d109      	bne.n	c5e6 <att_get+0x1e>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c5d2:	2104      	movs	r1, #4
    c5d4:	f00e fb59 	bl	1ac8a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c5d8:	4604      	mov	r4, r0
    c5da:	b350      	cbz	r0, c632 <att_get+0x6a>

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
    c5dc:	f850 4c04 	ldr.w	r4, [r0, #-4]
}
    c5e0:	4620      	mov	r0, r4
    c5e2:	b00e      	add	sp, #56	; 0x38
    c5e4:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
    c5e6:	4b26      	ldr	r3, [pc, #152]	; (c680 <att_get+0xb8>)
    c5e8:	930d      	str	r3, [sp, #52]	; 0x34
    c5ea:	2302      	movs	r3, #2
    c5ec:	f88d 3004 	strb.w	r3, [sp, #4]
    c5f0:	2400      	movs	r4, #0
    c5f2:	f88d 4005 	strb.w	r4, [sp, #5]
    c5f6:	f88d 4006 	strb.w	r4, [sp, #6]
    c5fa:	f88d 4007 	strb.w	r4, [sp, #7]
    c5fe:	9a01      	ldr	r2, [sp, #4]
    c600:	920c      	str	r2, [sp, #48]	; 0x30
    c602:	4621      	mov	r1, r4
    c604:	f364 0100 	bfi	r1, r4, #0, #1
    c608:	f364 0141 	bfi	r1, r4, #1, #1
    c60c:	f364 0182 	bfi	r1, r4, #2, #1
    c610:	f364 01c5 	bfi	r1, r4, #3, #3
    c614:	f363 1188 	bfi	r1, r3, #6, #3
    c618:	2308      	movs	r3, #8
    c61a:	f363 2152 	bfi	r1, r3, #9, #10
    c61e:	f364 41de 	bfi	r1, r4, #19, #12
    c622:	f364 71df 	bfi	r1, r4, #31, #1
    c626:	4623      	mov	r3, r4
    c628:	aa0c      	add	r2, sp, #48	; 0x30
    c62a:	4816      	ldr	r0, [pc, #88]	; (c684 <att_get+0xbc>)
    c62c:	f7f7 f84e 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
    c630:	e7d6      	b.n	c5e0 <att_get+0x18>
		BT_ERR("Unable to find ATT channel");
    c632:	4b15      	ldr	r3, [pc, #84]	; (c688 <att_get+0xc0>)
    c634:	9307      	str	r3, [sp, #28]
    c636:	2302      	movs	r3, #2
    c638:	f88d 3004 	strb.w	r3, [sp, #4]
    c63c:	2300      	movs	r3, #0
    c63e:	f88d 3005 	strb.w	r3, [sp, #5]
    c642:	f88d 3006 	strb.w	r3, [sp, #6]
    c646:	f88d 3007 	strb.w	r3, [sp, #7]
    c64a:	9a01      	ldr	r2, [sp, #4]
    c64c:	9206      	str	r2, [sp, #24]
    c64e:	4619      	mov	r1, r3
    c650:	f363 0100 	bfi	r1, r3, #0, #1
    c654:	f363 0141 	bfi	r1, r3, #1, #1
    c658:	f363 0182 	bfi	r1, r3, #2, #1
    c65c:	f363 01c5 	bfi	r1, r3, #3, #3
    c660:	2201      	movs	r2, #1
    c662:	f362 1188 	bfi	r1, r2, #6, #3
    c666:	2208      	movs	r2, #8
    c668:	f362 2152 	bfi	r1, r2, #9, #10
    c66c:	f363 41de 	bfi	r1, r3, #19, #12
    c670:	f363 71df 	bfi	r1, r3, #31, #1
    c674:	aa06      	add	r2, sp, #24
    c676:	4803      	ldr	r0, [pc, #12]	; (c684 <att_get+0xbc>)
    c678:	f7f7 f828 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
    c67c:	e7b0      	b.n	c5e0 <att_get+0x18>
    c67e:	bf00      	nop
    c680:	00022468 	.word	0x00022468
    c684:	00020520 	.word	0x00020520
    c688:	00022478 	.word	0x00022478

0000c68c <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
    c68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c690:	b082      	sub	sp, #8
    c692:	af00      	add	r7, sp, #0
    c694:	4606      	mov	r6, r0
    c696:	4688      	mov	r8, r1
	return list->head;
    c698:	6a43      	ldr	r3, [r0, #36]	; 0x24
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c69a:	b103      	cbz	r3, c69e <att_chan_new+0x12>
    c69c:	3be0      	subs	r3, #224	; 0xe0
    c69e:	607b      	str	r3, [r7, #4]
	int quota = 0;
    c6a0:	2500      	movs	r5, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c6a2:	e03f      	b.n	c724 <att_chan_new+0x98>
		if (chan->att == att) {
			quota++;
    c6a4:	3501      	adds	r5, #1
    c6a6:	e042      	b.n	c72e <att_chan_new+0xa2>
		}

		if (quota == ATT_CHAN_MAX) {
			BT_WARN("Maximum number of channels reached: %d", quota);
    c6a8:	466e      	mov	r6, sp
    c6aa:	b088      	sub	sp, #32
    c6ac:	466b      	mov	r3, sp
    c6ae:	f113 0210 	adds.w	r2, r3, #16
    c6b2:	d030      	beq.n	c716 <att_chan_new+0x8a>
    c6b4:	210c      	movs	r1, #12
    c6b6:	b11a      	cbz	r2, c6c0 <att_chan_new+0x34>
    c6b8:	2904      	cmp	r1, #4
    c6ba:	dd01      	ble.n	c6c0 <att_chan_new+0x34>
    c6bc:	4853      	ldr	r0, [pc, #332]	; (c80c <att_chan_new+0x180>)
    c6be:	6158      	str	r0, [r3, #20]
    c6c0:	b112      	cbz	r2, c6c8 <att_chan_new+0x3c>
    c6c2:	2908      	cmp	r1, #8
    c6c4:	dd00      	ble.n	c6c8 <att_chan_new+0x3c>
    c6c6:	619d      	str	r5, [r3, #24]
    c6c8:	290b      	cmp	r1, #11
    c6ca:	dd27      	ble.n	c71c <att_chan_new+0x90>
    c6cc:	240c      	movs	r4, #12
    c6ce:	b13a      	cbz	r2, c6e0 <att_chan_new+0x54>
    c6d0:	2103      	movs	r1, #3
    c6d2:	7039      	strb	r1, [r7, #0]
    c6d4:	2100      	movs	r1, #0
    c6d6:	7079      	strb	r1, [r7, #1]
    c6d8:	70b9      	strb	r1, [r7, #2]
    c6da:	70f9      	strb	r1, [r7, #3]
    c6dc:	6838      	ldr	r0, [r7, #0]
    c6de:	6118      	str	r0, [r3, #16]
    c6e0:	2100      	movs	r1, #0
    c6e2:	f36f 0100 	bfc	r1, #0, #1
    c6e6:	f36f 0141 	bfc	r1, #1, #1
    c6ea:	f36f 0182 	bfc	r1, #2, #1
    c6ee:	f36f 01c5 	bfc	r1, #3, #3
    c6f2:	2302      	movs	r3, #2
    c6f4:	f363 1188 	bfi	r1, r3, #6, #3
    c6f8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    c6fc:	f364 2152 	bfi	r1, r4, #9, #10
    c700:	f36f 41de 	bfc	r1, #19, #12
    c704:	f36f 71df 	bfc	r1, #31, #1
    c708:	2300      	movs	r3, #0
    c70a:	4841      	ldr	r0, [pc, #260]	; (c810 <att_chan_new+0x184>)
    c70c:	f7f6 ffde 	bl	36cc <z_impl_z_log_msg_static_create>
    c710:	46b5      	mov	sp, r6
			return NULL;
    c712:	2400      	movs	r4, #0
    c714:	e037      	b.n	c786 <att_chan_new+0xfa>
			BT_WARN("Maximum number of channels reached: %d", quota);
    c716:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c71a:	e7cc      	b.n	c6b6 <att_chan_new+0x2a>
    c71c:	f06f 041b 	mvn.w	r4, #27
    c720:	e7d5      	b.n	c6ce <att_chan_new+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c722:	607b      	str	r3, [r7, #4]
    c724:	687c      	ldr	r4, [r7, #4]
    c726:	b16c      	cbz	r4, c744 <att_chan_new+0xb8>
		if (chan->att == att) {
    c728:	6823      	ldr	r3, [r4, #0]
    c72a:	42b3      	cmp	r3, r6
    c72c:	d0ba      	beq.n	c6a4 <att_chan_new+0x18>
		if (quota == ATT_CHAN_MAX) {
    c72e:	2d01      	cmp	r5, #1
    c730:	d0ba      	beq.n	c6a8 <att_chan_new+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c732:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
    c736:	d0f4      	beq.n	c722 <att_chan_new+0x96>
	return node->next;
    c738:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c73c:	2b00      	cmp	r3, #0
    c73e:	d0f0      	beq.n	c722 <att_chan_new+0x96>
    c740:	3be0      	subs	r3, #224	; 0xe0
    c742:	e7ee      	b.n	c722 <att_chan_new+0x96>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c744:	2200      	movs	r2, #0
    c746:	2300      	movs	r3, #0
    c748:	1d39      	adds	r1, r7, #4
    c74a:	4832      	ldr	r0, [pc, #200]	; (c814 <att_chan_new+0x188>)
    c74c:	f009 fbec 	bl	15f28 <k_mem_slab_alloc>
    c750:	b9f0      	cbnz	r0, c790 <att_chan_new+0x104>
		BT_WARN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
    c752:	22e8      	movs	r2, #232	; 0xe8
    c754:	2100      	movs	r1, #0
    c756:	6878      	ldr	r0, [r7, #4]
    c758:	f00d fca6 	bl	1a0a8 <memset>
	chan->chan.chan.ops = &ops;
    c75c:	6878      	ldr	r0, [r7, #4]
    c75e:	4b2e      	ldr	r3, [pc, #184]	; (c818 <att_chan_new+0x18c>)
    c760:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
    c762:	3098      	adds	r0, #152	; 0x98
	z_impl_k_queue_init(queue);
    c764:	f012 ff40 	bl	1f5e8 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	3390      	adds	r3, #144	; 0x90
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c76c:	e8d3 2fef 	ldaex	r2, [r3]
    c770:	e8c3 8fe1 	stlex	r1, r8, [r3]
    c774:	2900      	cmp	r1, #0
    c776:	d1f9      	bne.n	c76c <att_chan_new+0xe0>
	chan->att = att;
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	601e      	str	r6, [r3, #0]
	att_chan_attach(att, chan);
    c77c:	6879      	ldr	r1, [r7, #4]
    c77e:	4630      	mov	r0, r6
    c780:	f00e fb90 	bl	1aea4 <att_chan_attach>

	return chan;
    c784:	687c      	ldr	r4, [r7, #4]
}
    c786:	4620      	mov	r0, r4
    c788:	3708      	adds	r7, #8
    c78a:	46bd      	mov	sp, r7
    c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No available ATT channel for conn %p", att->conn);
    c790:	6830      	ldr	r0, [r6, #0]
    c792:	466e      	mov	r6, sp
    c794:	b088      	sub	sp, #32
    c796:	466b      	mov	r3, sp
    c798:	f113 0210 	adds.w	r2, r3, #16
    c79c:	d02f      	beq.n	c7fe <att_chan_new+0x172>
    c79e:	210c      	movs	r1, #12
    c7a0:	b11a      	cbz	r2, c7aa <att_chan_new+0x11e>
    c7a2:	2904      	cmp	r1, #4
    c7a4:	dd01      	ble.n	c7aa <att_chan_new+0x11e>
    c7a6:	4d1d      	ldr	r5, [pc, #116]	; (c81c <att_chan_new+0x190>)
    c7a8:	615d      	str	r5, [r3, #20]
    c7aa:	b112      	cbz	r2, c7b2 <att_chan_new+0x126>
    c7ac:	2908      	cmp	r1, #8
    c7ae:	dd00      	ble.n	c7b2 <att_chan_new+0x126>
    c7b0:	6198      	str	r0, [r3, #24]
    c7b2:	290b      	cmp	r1, #11
    c7b4:	dd26      	ble.n	c804 <att_chan_new+0x178>
    c7b6:	250c      	movs	r5, #12
    c7b8:	b13a      	cbz	r2, c7ca <att_chan_new+0x13e>
    c7ba:	2103      	movs	r1, #3
    c7bc:	7039      	strb	r1, [r7, #0]
    c7be:	2100      	movs	r1, #0
    c7c0:	7079      	strb	r1, [r7, #1]
    c7c2:	70b9      	strb	r1, [r7, #2]
    c7c4:	70f9      	strb	r1, [r7, #3]
    c7c6:	6838      	ldr	r0, [r7, #0]
    c7c8:	6118      	str	r0, [r3, #16]
    c7ca:	2100      	movs	r1, #0
    c7cc:	f36f 0100 	bfc	r1, #0, #1
    c7d0:	f36f 0141 	bfc	r1, #1, #1
    c7d4:	f36f 0182 	bfc	r1, #2, #1
    c7d8:	f36f 01c5 	bfc	r1, #3, #3
    c7dc:	2302      	movs	r3, #2
    c7de:	f363 1188 	bfi	r1, r3, #6, #3
    c7e2:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    c7e6:	f365 2152 	bfi	r1, r5, #9, #10
    c7ea:	f36f 41de 	bfc	r1, #19, #12
    c7ee:	f36f 71df 	bfc	r1, #31, #1
    c7f2:	2300      	movs	r3, #0
    c7f4:	4806      	ldr	r0, [pc, #24]	; (c810 <att_chan_new+0x184>)
    c7f6:	f7f6 ff69 	bl	36cc <z_impl_z_log_msg_static_create>
    c7fa:	46b5      	mov	sp, r6
		return NULL;
    c7fc:	e7c3      	b.n	c786 <att_chan_new+0xfa>
		BT_WARN("No available ATT channel for conn %p", att->conn);
    c7fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c802:	e7cd      	b.n	c7a0 <att_chan_new+0x114>
    c804:	f06f 051b 	mvn.w	r5, #27
    c808:	e7d6      	b.n	c7b8 <att_chan_new+0x12c>
    c80a:	bf00      	nop
    c80c:	00022494 	.word	0x00022494
    c810:	00020520 	.word	0x00020520
    c814:	20000648 	.word	0x20000648
    c818:	2000031c 	.word	0x2000031c
    c81c:	000224bc 	.word	0x000224bc

0000c820 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c820:	b5f0      	push	{r4, r5, r6, r7, lr}
    c822:	b083      	sub	sp, #12
    c824:	af00      	add	r7, sp, #0
    c826:	4606      	mov	r6, r0
    c828:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c82a:	2200      	movs	r2, #0
    c82c:	2300      	movs	r3, #0
    c82e:	1d39      	adds	r1, r7, #4
    c830:	4830      	ldr	r0, [pc, #192]	; (c8f4 <bt_att_accept+0xd4>)
    c832:	f009 fb79 	bl	15f28 <k_mem_slab_alloc>
    c836:	b9e0      	cbnz	r0, c872 <bt_att_accept+0x52>
    c838:	4605      	mov	r5, r0
	return z_impl_z_current_get();
    c83a:	f00a fbaf 	bl	16f9c <z_impl_z_current_get>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
    c83e:	4b2e      	ldr	r3, [pc, #184]	; (c8f8 <bt_att_accept+0xd8>)
    c840:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
    c842:	222c      	movs	r2, #44	; 0x2c
    c844:	2100      	movs	r1, #0
    c846:	6878      	ldr	r0, [r7, #4]
    c848:	f00d fc2e 	bl	1a0a8 <memset>
	att->conn = conn;
    c84c:	687b      	ldr	r3, [r7, #4]
    c84e:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
    c850:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
    c852:	2100      	movs	r1, #0
    c854:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
    c856:	6081      	str	r1, [r0, #8]
	list->head = NULL;
    c858:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
    c85a:	6281      	str	r1, [r0, #40]	; 0x28
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
    c85c:	f7ff ff16 	bl	c68c <att_chan_new>
	if (!chan) {
    c860:	4603      	mov	r3, r0
    c862:	2800      	cmp	r0, #0
    c864:	d043      	beq.n	c8ee <bt_att_accept+0xce>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
    c866:	3304      	adds	r3, #4
    c868:	6023      	str	r3, [r4, #0]

	return 0;
}
    c86a:	4628      	mov	r0, r5
    c86c:	370c      	adds	r7, #12
    c86e:	46bd      	mov	sp, r7
    c870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("No available ATT context for conn %p", conn);
    c872:	466d      	mov	r5, sp
    c874:	b088      	sub	sp, #32
    c876:	466b      	mov	r3, sp
    c878:	f113 0210 	adds.w	r2, r3, #16
    c87c:	d031      	beq.n	c8e2 <bt_att_accept+0xc2>
    c87e:	210c      	movs	r1, #12
    c880:	b11a      	cbz	r2, c88a <bt_att_accept+0x6a>
    c882:	2904      	cmp	r1, #4
    c884:	dd01      	ble.n	c88a <bt_att_accept+0x6a>
    c886:	481d      	ldr	r0, [pc, #116]	; (c8fc <bt_att_accept+0xdc>)
    c888:	6158      	str	r0, [r3, #20]
    c88a:	b112      	cbz	r2, c892 <bt_att_accept+0x72>
    c88c:	2908      	cmp	r1, #8
    c88e:	dd00      	ble.n	c892 <bt_att_accept+0x72>
    c890:	619e      	str	r6, [r3, #24]
    c892:	290b      	cmp	r1, #11
    c894:	dd28      	ble.n	c8e8 <bt_att_accept+0xc8>
    c896:	240c      	movs	r4, #12
    c898:	b13a      	cbz	r2, c8aa <bt_att_accept+0x8a>
    c89a:	2103      	movs	r1, #3
    c89c:	7039      	strb	r1, [r7, #0]
    c89e:	2100      	movs	r1, #0
    c8a0:	7079      	strb	r1, [r7, #1]
    c8a2:	70b9      	strb	r1, [r7, #2]
    c8a4:	70f9      	strb	r1, [r7, #3]
    c8a6:	6838      	ldr	r0, [r7, #0]
    c8a8:	6118      	str	r0, [r3, #16]
    c8aa:	2100      	movs	r1, #0
    c8ac:	f36f 0100 	bfc	r1, #0, #1
    c8b0:	f36f 0141 	bfc	r1, #1, #1
    c8b4:	f36f 0182 	bfc	r1, #2, #1
    c8b8:	f36f 01c5 	bfc	r1, #3, #3
    c8bc:	2301      	movs	r3, #1
    c8be:	f363 1188 	bfi	r1, r3, #6, #3
    c8c2:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    c8c6:	f364 2152 	bfi	r1, r4, #9, #10
    c8ca:	f36f 41de 	bfc	r1, #19, #12
    c8ce:	f36f 71df 	bfc	r1, #31, #1
    c8d2:	2300      	movs	r3, #0
    c8d4:	480a      	ldr	r0, [pc, #40]	; (c900 <bt_att_accept+0xe0>)
    c8d6:	f7f6 fef9 	bl	36cc <z_impl_z_log_msg_static_create>
    c8da:	46ad      	mov	sp, r5
		return -ENOMEM;
    c8dc:	f06f 050b 	mvn.w	r5, #11
    c8e0:	e7c3      	b.n	c86a <bt_att_accept+0x4a>
		BT_ERR("No available ATT context for conn %p", conn);
    c8e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c8e6:	e7cb      	b.n	c880 <bt_att_accept+0x60>
    c8e8:	f06f 041b 	mvn.w	r4, #27
    c8ec:	e7d4      	b.n	c898 <bt_att_accept+0x78>
		return -ENOMEM;
    c8ee:	f06f 050b 	mvn.w	r5, #11
    c8f2:	e7ba      	b.n	c86a <bt_att_accept+0x4a>
    c8f4:	2000062c 	.word	0x2000062c
    c8f8:	200020ac 	.word	0x200020ac
    c8fc:	000224e4 	.word	0x000224e4
    c900:	00020520 	.word	0x00020520

0000c904 <bt_att_released>:
{
    c904:	b500      	push	{lr}
    c906:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c908:	3804      	subs	r0, #4
    c90a:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
    c90c:	a901      	add	r1, sp, #4
    c90e:	4803      	ldr	r0, [pc, #12]	; (c91c <bt_att_released+0x18>)
    c910:	f012 fd51 	bl	1f3b6 <k_mem_slab_free>
}
    c914:	b003      	add	sp, #12
    c916:	f85d fb04 	ldr.w	pc, [sp], #4
    c91a:	bf00      	nop
    c91c:	20000648 	.word	0x20000648

0000c920 <read_group_cb>:
{
    c920:	b5f0      	push	{r4, r5, r6, r7, lr}
    c922:	b085      	sub	sp, #20
    c924:	4605      	mov	r5, r0
    c926:	460e      	mov	r6, r1
    c928:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    c92a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c92c:	2300      	movs	r3, #0
    c92e:	f88d 3008 	strb.w	r3, [sp, #8]
    c932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c936:	f8ad 300a 	strh.w	r3, [sp, #10]
    c93a:	a902      	add	r1, sp, #8
    c93c:	6800      	ldr	r0, [r0, #0]
    c93e:	f00d fbf0 	bl	1a122 <bt_uuid_cmp>
    c942:	b158      	cbz	r0, c95c <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c944:	2300      	movs	r3, #0
    c946:	f88d 300c 	strb.w	r3, [sp, #12]
    c94a:	f642 0301 	movw	r3, #10241	; 0x2801
    c94e:	f8ad 300e 	strh.w	r3, [sp, #14]
    c952:	a903      	add	r1, sp, #12
    c954:	6828      	ldr	r0, [r5, #0]
    c956:	f00d fbe4 	bl	1a122 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c95a:	bb28      	cbnz	r0, c9a8 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c95c:	6861      	ldr	r1, [r4, #4]
    c95e:	6828      	ldr	r0, [r5, #0]
    c960:	f00d fbdf 	bl	1a122 <bt_uuid_cmp>
    c964:	bb40      	cbnz	r0, c9b8 <read_group_cb+0x98>
	if (data->rsp->len &&
    c966:	68e3      	ldr	r3, [r4, #12]
    c968:	781a      	ldrb	r2, [r3, #0]
    c96a:	b12a      	cbz	r2, c978 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c96c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    c96e:	68a1      	ldr	r1, [r4, #8]
    c970:	8989      	ldrh	r1, [r1, #12]
    c972:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c974:	4293      	cmp	r3, r2
    c976:	db24      	blt.n	c9c2 <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c978:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
    c97a:	2104      	movs	r1, #4
    c97c:	3008      	adds	r0, #8
    c97e:	f010 f8cf 	bl	1cb20 <net_buf_simple_add>
    c982:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c984:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c986:	6923      	ldr	r3, [r4, #16]
    c988:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c98a:	9401      	str	r4, [sp, #4]
    c98c:	4b10      	ldr	r3, [pc, #64]	; (c9d0 <read_group_cb+0xb0>)
    c98e:	9300      	str	r3, [sp, #0]
    c990:	2300      	movs	r3, #0
    c992:	68a2      	ldr	r2, [r4, #8]
    c994:	4629      	mov	r1, r5
    c996:	4638      	mov	r0, r7
    c998:	f00e fb25 	bl	1afe6 <att_chan_read>
	if (read < 0) {
    c99c:	2800      	cmp	r0, #0
    c99e:	db12      	blt.n	c9c6 <read_group_cb+0xa6>
	if (!data->group) {
    c9a0:	6923      	ldr	r3, [r4, #16]
    c9a2:	b193      	cbz	r3, c9ca <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
    c9a4:	2001      	movs	r0, #1
    c9a6:	e00a      	b.n	c9be <read_group_cb+0x9e>
		if (data->group &&
    c9a8:	6923      	ldr	r3, [r4, #16]
    c9aa:	b11b      	cbz	r3, c9b4 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
    c9ac:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
    c9ae:	42b2      	cmp	r2, r6
    c9b0:	d200      	bcs.n	c9b4 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c9b2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c9b4:	2001      	movs	r0, #1
    c9b6:	e002      	b.n	c9be <read_group_cb+0x9e>
		data->group = NULL;
    c9b8:	2300      	movs	r3, #0
    c9ba:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c9bc:	2001      	movs	r0, #1
}
    c9be:	b005      	add	sp, #20
    c9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
    c9c2:	2000      	movs	r0, #0
    c9c4:	e7fb      	b.n	c9be <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
    c9c6:	2000      	movs	r0, #0
    c9c8:	e7f9      	b.n	c9be <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
    c9ca:	2000      	movs	r0, #0
    c9cc:	e7f7      	b.n	c9be <read_group_cb+0x9e>
    c9ce:	bf00      	nop
    c9d0:	0001ad75 	.word	0x0001ad75

0000c9d4 <read_type_cb>:
{
    c9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c9d8:	b083      	sub	sp, #12
    c9da:	4606      	mov	r6, r0
    c9dc:	4688      	mov	r8, r1
    c9de:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    c9e0:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c9e2:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c9e4:	6851      	ldr	r1, [r2, #4]
    c9e6:	6800      	ldr	r0, [r0, #0]
    c9e8:	f00d fb9b 	bl	1a122 <bt_uuid_cmp>
    c9ec:	b120      	cbz	r0, c9f8 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
    c9ee:	2501      	movs	r5, #1
}
    c9f0:	4628      	mov	r0, r5
    c9f2:	b003      	add	sp, #12
    c9f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c9f8:	2295      	movs	r2, #149	; 0x95
    c9fa:	4631      	mov	r1, r6
    c9fc:	4628      	mov	r0, r5
    c9fe:	f00f fccc 	bl	1c39a <bt_gatt_check_perm>
    ca02:	4605      	mov	r5, r0
    ca04:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    ca06:	b130      	cbz	r0, ca16 <read_type_cb+0x42>
		if (data->rsp->len) {
    ca08:	68e3      	ldr	r3, [r4, #12]
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	b10b      	cbz	r3, ca12 <read_type_cb+0x3e>
			data->err = 0x00;
    ca0e:	2300      	movs	r3, #0
    ca10:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
    ca12:	2500      	movs	r5, #0
    ca14:	e7ec      	b.n	c9f0 <read_type_cb+0x1c>
	data->err = 0x00;
    ca16:	f04f 0900 	mov.w	r9, #0
    ca1a:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    ca1e:	68a0      	ldr	r0, [r4, #8]
    ca20:	f010 f85e 	bl	1cae0 <net_buf_frag_last>
    ca24:	2102      	movs	r1, #2
    ca26:	3008      	adds	r0, #8
    ca28:	f010 f87a 	bl	1cb20 <net_buf_simple_add>
    ca2c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
    ca2e:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    ca32:	9401      	str	r4, [sp, #4]
    ca34:	4b10      	ldr	r3, [pc, #64]	; (ca78 <read_type_cb+0xa4>)
    ca36:	9300      	str	r3, [sp, #0]
    ca38:	464b      	mov	r3, r9
    ca3a:	68a2      	ldr	r2, [r4, #8]
    ca3c:	4631      	mov	r1, r6
    ca3e:	4638      	mov	r0, r7
    ca40:	f00e fad1 	bl	1afe6 <att_chan_read>
	if (read < 0) {
    ca44:	2800      	cmp	r0, #0
    ca46:	db06      	blt.n	ca56 <read_type_cb+0x82>
	if (!data->item) {
    ca48:	6923      	ldr	r3, [r4, #16]
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d0d0      	beq.n	c9f0 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    ca4e:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
    ca50:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    ca52:	2200      	movs	r2, #0

	while (buf) {
    ca54:	e006      	b.n	ca64 <read_type_cb+0x90>
		data->err = err_to_att(read);
    ca56:	f00e f971 	bl	1ad3c <err_to_att>
    ca5a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    ca5c:	e7c8      	b.n	c9f0 <read_type_cb+0x1c>
		bytes += buf->len;
    ca5e:	8999      	ldrh	r1, [r3, #12]
    ca60:	440a      	add	r2, r1
		buf = buf->frags;
    ca62:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    ca64:	2b00      	cmp	r3, #0
    ca66:	d1fa      	bne.n	ca5e <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    ca68:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    ca6a:	68e3      	ldr	r3, [r4, #12]
    ca6c:	781d      	ldrb	r5, [r3, #0]
    ca6e:	42aa      	cmp	r2, r5
    ca70:	bf94      	ite	ls
    ca72:	2500      	movls	r5, #0
    ca74:	2501      	movhi	r5, #1
    ca76:	e7bb      	b.n	c9f0 <read_type_cb+0x1c>
    ca78:	0001ad4d 	.word	0x0001ad4d

0000ca7c <find_type_cb>:
{
    ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca80:	b097      	sub	sp, #92	; 0x5c
    ca82:	af02      	add	r7, sp, #8
    ca84:	4605      	mov	r5, r0
    ca86:	460e      	mov	r6, r1
    ca88:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    ca8a:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
    ca8e:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ca92:	2300      	movs	r3, #0
    ca94:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    ca98:	f642 0301 	movw	r3, #10241	; 0x2801
    ca9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    caa0:	f107 0148 	add.w	r1, r7, #72	; 0x48
    caa4:	6800      	ldr	r0, [r0, #0]
    caa6:	f00d fb3c 	bl	1a122 <bt_uuid_cmp>
    caaa:	b930      	cbnz	r0, caba <find_type_cb+0x3e>
	data->group = NULL;
    caac:	2300      	movs	r3, #0
    caae:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    cab0:	2001      	movs	r0, #1
}
    cab2:	3754      	adds	r7, #84	; 0x54
    cab4:	46bd      	mov	sp, r7
    cab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    caba:	2300      	movs	r3, #0
    cabc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    cac0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cac4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    cac8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
    cacc:	6828      	ldr	r0, [r5, #0]
    cace:	f00d fb28 	bl	1a122 <bt_uuid_cmp>
    cad2:	b928      	cbnz	r0, cae0 <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    cad4:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
    cad8:	6860      	ldr	r0, [r4, #4]
    cada:	4603      	mov	r3, r0
	size_t bytes = 0;
    cadc:	2200      	movs	r2, #0
	while (buf) {
    cade:	e00a      	b.n	caf6 <find_type_cb+0x7a>
		if (data->group &&
    cae0:	68a3      	ldr	r3, [r4, #8]
    cae2:	b11b      	cbz	r3, caec <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
    cae4:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
    cae6:	42b2      	cmp	r2, r6
    cae8:	d200      	bcs.n	caec <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
    caea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    caec:	2001      	movs	r0, #1
    caee:	e7e0      	b.n	cab2 <find_type_cb+0x36>
		bytes += buf->len;
    caf0:	8999      	ldrh	r1, [r3, #12]
    caf2:	440a      	add	r2, r1
		buf = buf->frags;
    caf4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    caf6:	2b00      	cmp	r3, #0
    caf8:	d1fa      	bne.n	caf0 <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    cafa:	ebac 0202 	sub.w	r2, ip, r2
    cafe:	2a03      	cmp	r2, #3
    cb00:	d801      	bhi.n	cb06 <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
    cb02:	2000      	movs	r0, #0
    cb04:	e7d5      	b.n	cab2 <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
    cb06:	f00f ffeb 	bl	1cae0 <net_buf_frag_last>
    cb0a:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    cb0c:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
    cb10:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
    cb12:	2200      	movs	r2, #0
	while (buf) {
    cb14:	e002      	b.n	cb1c <find_type_cb+0xa0>
		bytes += buf->len;
    cb16:	8999      	ldrh	r1, [r3, #12]
    cb18:	440a      	add	r2, r1
		buf = buf->frags;
    cb1a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    cb1c:	2b00      	cmp	r3, #0
    cb1e:	d1fa      	bne.n	cb16 <find_type_cb+0x9a>
    cb20:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
    cb24:	687b      	ldr	r3, [r7, #4]
    cb26:	f103 0b08 	add.w	fp, r3, #8
    cb2a:	4658      	mov	r0, fp
    cb2c:	f010 f844 	bl	1cbb8 <net_buf_simple_tailroom>
    cb30:	4582      	cmp	sl, r0
    cb32:	d25a      	bcs.n	cbea <find_type_cb+0x16e>
    cb34:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
    cb38:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
    cb3a:	2200      	movs	r2, #0
	while (buf) {
    cb3c:	e002      	b.n	cb44 <find_type_cb+0xc8>
		bytes += buf->len;
    cb3e:	8999      	ldrh	r1, [r3, #12]
    cb40:	440a      	add	r2, r1
		buf = buf->frags;
    cb42:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    cb44:	2b00      	cmp	r3, #0
    cb46:	d1fa      	bne.n	cb3e <find_type_cb+0xc2>
    cb48:	1a80      	subs	r0, r0, r2
	if (!len) {
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d051      	beq.n	cbf2 <find_type_cb+0x176>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    cb4e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    cb52:	2300      	movs	r3, #0
    cb54:	9300      	str	r3, [sp, #0]
    cb56:	2310      	movs	r3, #16
    cb58:	f107 0238 	add.w	r2, r7, #56	; 0x38
    cb5c:	4629      	mov	r1, r5
    cb5e:	4648      	mov	r0, r9
    cb60:	47c0      	blx	r8
	if (read < 0) {
    cb62:	1e05      	subs	r5, r0, #0
    cb64:	dba2      	blt.n	caac <find_type_cb+0x30>
	if (read != data->value_len) {
    cb66:	7c22      	ldrb	r2, [r4, #16]
    cb68:	4295      	cmp	r5, r2
    cb6a:	f000 80a6 	beq.w	ccba <find_type_cb+0x23e>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    cb6e:	68e1      	ldr	r1, [r4, #12]
    cb70:	f107 0024 	add.w	r0, r7, #36	; 0x24
    cb74:	f00d faf3 	bl	1a15e <bt_uuid_create>
    cb78:	2800      	cmp	r0, #0
    cb7a:	d151      	bne.n	cc20 <find_type_cb+0x1a4>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    cb7c:	7c20      	ldrb	r0, [r4, #16]
    cb7e:	466e      	mov	r6, sp
    cb80:	b088      	sub	sp, #32
    cb82:	ab02      	add	r3, sp, #8
    cb84:	f113 0210 	adds.w	r2, r3, #16
    cb88:	d044      	beq.n	cc14 <find_type_cb+0x198>
    cb8a:	210c      	movs	r1, #12
    cb8c:	b11a      	cbz	r2, cb96 <find_type_cb+0x11a>
    cb8e:	2904      	cmp	r1, #4
    cb90:	dd01      	ble.n	cb96 <find_type_cb+0x11a>
    cb92:	4d55      	ldr	r5, [pc, #340]	; (cce8 <find_type_cb+0x26c>)
    cb94:	615d      	str	r5, [r3, #20]
    cb96:	b112      	cbz	r2, cb9e <find_type_cb+0x122>
    cb98:	2908      	cmp	r1, #8
    cb9a:	dd00      	ble.n	cb9e <find_type_cb+0x122>
    cb9c:	6198      	str	r0, [r3, #24]
    cb9e:	290b      	cmp	r1, #11
    cba0:	dd3b      	ble.n	cc1a <find_type_cb+0x19e>
    cba2:	250c      	movs	r5, #12
    cba4:	b13a      	cbz	r2, cbb6 <find_type_cb+0x13a>
    cba6:	2103      	movs	r1, #3
    cba8:	7439      	strb	r1, [r7, #16]
    cbaa:	2100      	movs	r1, #0
    cbac:	7479      	strb	r1, [r7, #17]
    cbae:	74b9      	strb	r1, [r7, #18]
    cbb0:	74f9      	strb	r1, [r7, #19]
    cbb2:	6938      	ldr	r0, [r7, #16]
    cbb4:	6118      	str	r0, [r3, #16]
    cbb6:	2100      	movs	r1, #0
    cbb8:	f36f 0100 	bfc	r1, #0, #1
    cbbc:	f36f 0141 	bfc	r1, #1, #1
    cbc0:	f36f 0182 	bfc	r1, #2, #1
    cbc4:	f36f 01c5 	bfc	r1, #3, #3
    cbc8:	2302      	movs	r3, #2
    cbca:	f363 1188 	bfi	r1, r3, #6, #3
    cbce:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    cbd2:	f365 2152 	bfi	r1, r5, #9, #10
    cbd6:	f36f 41de 	bfc	r1, #19, #12
    cbda:	f36f 71df 	bfc	r1, #31, #1
    cbde:	2300      	movs	r3, #0
    cbe0:	4842      	ldr	r0, [pc, #264]	; (ccec <find_type_cb+0x270>)
    cbe2:	f7f6 fd73 	bl	36cc <z_impl_z_log_msg_static_create>
    cbe6:	46b5      	mov	sp, r6
			goto skip;
    cbe8:	e760      	b.n	caac <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
    cbea:	4658      	mov	r0, fp
    cbec:	f00f ffe4 	bl	1cbb8 <net_buf_simple_tailroom>
    cbf0:	e7ab      	b.n	cb4a <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    cbf2:	6863      	ldr	r3, [r4, #4]
    cbf4:	7998      	ldrb	r0, [r3, #6]
    cbf6:	f002 fbd5 	bl	f3a4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    cbfa:	2200      	movs	r2, #0
    cbfc:	2300      	movs	r3, #0
    cbfe:	f00f feb2 	bl	1c966 <net_buf_alloc_fixed>
		if (!frag) {
    cc02:	6078      	str	r0, [r7, #4]
    cc04:	2800      	cmp	r0, #0
    cc06:	f43f af54 	beq.w	cab2 <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
    cc0a:	6879      	ldr	r1, [r7, #4]
    cc0c:	6860      	ldr	r0, [r4, #4]
    cc0e:	f00f ff78 	bl	1cb02 <net_buf_frag_add>
    cc12:	e79c      	b.n	cb4e <find_type_cb+0xd2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    cc14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cc18:	e7b8      	b.n	cb8c <find_type_cb+0x110>
    cc1a:	f06f 051b 	mvn.w	r5, #27
    cc1e:	e7c1      	b.n	cba4 <find_type_cb+0x128>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    cc20:	b2ea      	uxtb	r2, r5
    cc22:	f107 0138 	add.w	r1, r7, #56	; 0x38
    cc26:	f107 0010 	add.w	r0, r7, #16
    cc2a:	f00d fa98 	bl	1a15e <bt_uuid_create>
    cc2e:	2800      	cmp	r0, #0
    cc30:	d13b      	bne.n	ccaa <find_type_cb+0x22e>
			BT_WARN("Unable to create UUID: size %d", read);
    cc32:	466e      	mov	r6, sp
    cc34:	b088      	sub	sp, #32
    cc36:	ab02      	add	r3, sp, #8
    cc38:	f113 0210 	adds.w	r2, r3, #16
    cc3c:	d02f      	beq.n	cc9e <find_type_cb+0x222>
    cc3e:	210c      	movs	r1, #12
    cc40:	b11a      	cbz	r2, cc4a <find_type_cb+0x1ce>
    cc42:	2904      	cmp	r1, #4
    cc44:	dd01      	ble.n	cc4a <find_type_cb+0x1ce>
    cc46:	482a      	ldr	r0, [pc, #168]	; (ccf0 <find_type_cb+0x274>)
    cc48:	6158      	str	r0, [r3, #20]
    cc4a:	b112      	cbz	r2, cc52 <find_type_cb+0x1d6>
    cc4c:	2908      	cmp	r1, #8
    cc4e:	dd00      	ble.n	cc52 <find_type_cb+0x1d6>
    cc50:	619d      	str	r5, [r3, #24]
    cc52:	290b      	cmp	r1, #11
    cc54:	dd26      	ble.n	cca4 <find_type_cb+0x228>
    cc56:	250c      	movs	r5, #12
    cc58:	b13a      	cbz	r2, cc6a <find_type_cb+0x1ee>
    cc5a:	2103      	movs	r1, #3
    cc5c:	7339      	strb	r1, [r7, #12]
    cc5e:	2100      	movs	r1, #0
    cc60:	7379      	strb	r1, [r7, #13]
    cc62:	73b9      	strb	r1, [r7, #14]
    cc64:	73f9      	strb	r1, [r7, #15]
    cc66:	68f8      	ldr	r0, [r7, #12]
    cc68:	6118      	str	r0, [r3, #16]
    cc6a:	2100      	movs	r1, #0
    cc6c:	f36f 0100 	bfc	r1, #0, #1
    cc70:	f36f 0141 	bfc	r1, #1, #1
    cc74:	f36f 0182 	bfc	r1, #2, #1
    cc78:	f36f 01c5 	bfc	r1, #3, #3
    cc7c:	2302      	movs	r3, #2
    cc7e:	f363 1188 	bfi	r1, r3, #6, #3
    cc82:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    cc86:	f363 2152 	bfi	r1, r3, #9, #10
    cc8a:	f36f 41de 	bfc	r1, #19, #12
    cc8e:	f36f 71df 	bfc	r1, #31, #1
    cc92:	2300      	movs	r3, #0
    cc94:	4815      	ldr	r0, [pc, #84]	; (ccec <find_type_cb+0x270>)
    cc96:	f7f6 fd19 	bl	36cc <z_impl_z_log_msg_static_create>
    cc9a:	46b5      	mov	sp, r6
			goto skip;
    cc9c:	e706      	b.n	caac <find_type_cb+0x30>
			BT_WARN("Unable to create UUID: size %d", read);
    cc9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cca2:	e7cd      	b.n	cc40 <find_type_cb+0x1c4>
    cca4:	f06f 051b 	mvn.w	r5, #27
    cca8:	e7d6      	b.n	cc58 <find_type_cb+0x1dc>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    ccaa:	f107 0110 	add.w	r1, r7, #16
    ccae:	f107 0024 	add.w	r0, r7, #36	; 0x24
    ccb2:	f00d fa36 	bl	1a122 <bt_uuid_cmp>
    ccb6:	b148      	cbz	r0, cccc <find_type_cb+0x250>
    ccb8:	e6f8      	b.n	caac <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
    ccba:	462a      	mov	r2, r5
    ccbc:	f107 0138 	add.w	r1, r7, #56	; 0x38
    ccc0:	68e0      	ldr	r0, [r4, #12]
    ccc2:	f00d f9b0 	bl	1a026 <memcmp>
    ccc6:	2800      	cmp	r0, #0
    ccc8:	f47f aef0 	bne.w	caac <find_type_cb+0x30>
	data->err = 0x00;
    cccc:	2300      	movs	r3, #0
    ccce:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    ccd0:	2104      	movs	r1, #4
    ccd2:	6878      	ldr	r0, [r7, #4]
    ccd4:	3008      	adds	r0, #8
    ccd6:	f00f ff23 	bl	1cb20 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    ccda:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    ccdc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    ccde:	68a3      	ldr	r3, [r4, #8]
    cce0:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    cce2:	2001      	movs	r0, #1
    cce4:	e6e5      	b.n	cab2 <find_type_cb+0x36>
    cce6:	bf00      	nop
    cce8:	0002250c 	.word	0x0002250c
    ccec:	00020520 	.word	0x00020520
    ccf0:	0002252c 	.word	0x0002252c

0000ccf4 <bt_att_connected>:
{
    ccf4:	b510      	push	{r4, lr}
    ccf6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    ccf8:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
    ccfa:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ccfe:	e8d3 2fef 	ldaex	r2, [r3]
    cd02:	f042 0204 	orr.w	r2, r2, #4
    cd06:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cd0a:	2900      	cmp	r1, #0
    cd0c:	d1f7      	bne.n	ccfe <bt_att_connected+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd0e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    cd12:	f013 0f08 	tst.w	r3, #8
    cd16:	d102      	bne.n	cd1e <bt_att_connected+0x2a>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cd18:	2317      	movs	r3, #23
    cd1a:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    cd1c:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    cd1e:	f00e f8f4 	bl	1af0a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    cd22:	4904      	ldr	r1, [pc, #16]	; (cd34 <bt_att_connected+0x40>)
    cd24:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    cd28:	f012 fd74 	bl	1f814 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    cd2c:	6820      	ldr	r0, [r4, #0]
    cd2e:	f002 fa7f 	bl	f230 <bt_gatt_connected>
}
    cd32:	bd10      	pop	{r4, pc}
    cd34:	0000dd49 	.word	0x0000dd49

0000cd38 <chan_unknown>:
{
    cd38:	b510      	push	{r4, lr}
    cd3a:	460c      	mov	r4, r1
	(void)memset(data, 0, sizeof(*data));
    cd3c:	2214      	movs	r2, #20
    cd3e:	2100      	movs	r1, #0
    cd40:	4620      	mov	r0, r4
    cd42:	f00d f9b1 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    cd46:	4621      	mov	r1, r4
    cd48:	4801      	ldr	r0, [pc, #4]	; (cd50 <chan_unknown+0x18>)
    cd4a:	f012 fc59 	bl	1f600 <k_queue_append>
}
    cd4e:	bd10      	pop	{r4, pc}
    cd50:	20000728 	.word	0x20000728

0000cd54 <chan_cfm_sent>:
{
    cd54:	b510      	push	{r4, lr}
    cd56:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
    cd58:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
    cd5a:	3390      	adds	r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cd5c:	e8d3 2fef 	ldaex	r2, [r3]
    cd60:	f022 0202 	bic.w	r2, r2, #2
    cd64:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cd68:	2900      	cmp	r1, #0
    cd6a:	d1f7      	bne.n	cd5c <chan_cfm_sent+0x8>
	(void)memset(data, 0, sizeof(*data));
    cd6c:	2214      	movs	r2, #20
    cd6e:	2100      	movs	r1, #0
    cd70:	4620      	mov	r0, r4
    cd72:	f00d f999 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    cd76:	4621      	mov	r1, r4
    cd78:	4801      	ldr	r0, [pc, #4]	; (cd80 <chan_cfm_sent+0x2c>)
    cd7a:	f012 fc41 	bl	1f600 <k_queue_append>
}
    cd7e:	bd10      	pop	{r4, pc}
    cd80:	20000728 	.word	0x20000728

0000cd84 <chan_rsp_sent>:
{
    cd84:	b510      	push	{r4, lr}
    cd86:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
    cd88:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
    cd8a:	3390      	adds	r3, #144	; 0x90
    cd8c:	e8d3 2fef 	ldaex	r2, [r3]
    cd90:	f022 0201 	bic.w	r2, r2, #1
    cd94:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cd98:	2900      	cmp	r1, #0
    cd9a:	d1f7      	bne.n	cd8c <chan_rsp_sent+0x8>
	(void)memset(data, 0, sizeof(*data));
    cd9c:	2214      	movs	r2, #20
    cd9e:	2100      	movs	r1, #0
    cda0:	4620      	mov	r0, r4
    cda2:	f00d f981 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    cda6:	4621      	mov	r1, r4
    cda8:	4801      	ldr	r0, [pc, #4]	; (cdb0 <chan_rsp_sent+0x2c>)
    cdaa:	f012 fc29 	bl	1f600 <k_queue_append>
}
    cdae:	bd10      	pop	{r4, pc}
    cdb0:	20000728 	.word	0x20000728

0000cdb4 <chan_req_sent>:
{
    cdb4:	b510      	push	{r4, lr}
    cdb6:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
    cdb8:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
    cdba:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    cdbe:	b12b      	cbz	r3, cdcc <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
    cdc0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    cdc4:	2300      	movs	r3, #0
    cdc6:	30b0      	adds	r0, #176	; 0xb0
    cdc8:	f009 fd06 	bl	167d8 <k_work_reschedule>
	(void)memset(data, 0, sizeof(*data));
    cdcc:	2214      	movs	r2, #20
    cdce:	2100      	movs	r1, #0
    cdd0:	4620      	mov	r0, r4
    cdd2:	f00d f969 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    cdd6:	4621      	mov	r1, r4
    cdd8:	4801      	ldr	r0, [pc, #4]	; (cde0 <chan_req_sent+0x2c>)
    cdda:	f012 fc11 	bl	1f600 <k_queue_append>
}
    cdde:	bd10      	pop	{r4, pc}
    cde0:	20000728 	.word	0x20000728

0000cde4 <chan_tx_complete>:
{
    cde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cde8:	4605      	mov	r5, r0
    cdea:	460c      	mov	r4, r1
    cdec:	4690      	mov	r8, r2
	bt_gatt_complete_func_t func = data->func;
    cdee:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
    cdf0:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
    cdf2:	f8d1 900c 	ldr.w	r9, [r1, #12]
	(void)memset(data, 0, sizeof(*data));
    cdf6:	2214      	movs	r2, #20
    cdf8:	2100      	movs	r1, #0
    cdfa:	4620      	mov	r0, r4
    cdfc:	f00d f954 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    ce00:	4621      	mov	r1, r4
    ce02:	4809      	ldr	r0, [pc, #36]	; (ce28 <chan_tx_complete+0x44>)
    ce04:	f012 fbfc 	bl	1f600 <k_queue_append>
	if (!err && func) {
    ce08:	f1b8 0f00 	cmp.w	r8, #0
    ce0c:	d109      	bne.n	ce22 <chan_tx_complete+0x3e>
    ce0e:	b146      	cbz	r6, ce22 <chan_tx_complete+0x3e>
		for (uint16_t i = 0; i < attr_count; i++) {
    ce10:	2400      	movs	r4, #0
    ce12:	e004      	b.n	ce1e <chan_tx_complete+0x3a>
			func(conn, ud);
    ce14:	4649      	mov	r1, r9
    ce16:	4628      	mov	r0, r5
    ce18:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
    ce1a:	3401      	adds	r4, #1
    ce1c:	b2a4      	uxth	r4, r4
    ce1e:	42a7      	cmp	r7, r4
    ce20:	d8f8      	bhi.n	ce14 <chan_tx_complete+0x30>
}
    ce22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ce26:	bf00      	nop
    ce28:	20000728 	.word	0x20000728

0000ce2c <chan_send>:
{
    ce2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce30:	b08b      	sub	sp, #44	; 0x2c
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    ce32:	694f      	ldr	r7, [r1, #20]
	hdr = (void *)buf->data;
    ce34:	688a      	ldr	r2, [r1, #8]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    ce36:	f100 0390 	add.w	r3, r0, #144	; 0x90
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ce3a:	e8d3 3faf 	lda	r3, [r3]
    ce3e:	f013 0f04 	tst.w	r3, #4
    ce42:	d061      	beq.n	cf08 <chan_send+0xdc>
    ce44:	4605      	mov	r5, r0
    ce46:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    ce48:	7813      	ldrb	r3, [r2, #0]
    ce4a:	2bd2      	cmp	r3, #210	; 0xd2
    ce4c:	d021      	beq.n	ce92 <chan_send+0x66>
	state->offset = net_buf_simple_headroom(buf);
    ce4e:	f104 0008 	add.w	r0, r4, #8
    ce52:	f00f fead 	bl	1cbb0 <net_buf_simple_headroom>
    ce56:	b286      	uxth	r6, r0
    ce58:	f8ad 600c 	strh.w	r6, [sp, #12]
	state->len = buf->len;
    ce5c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    ce60:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
    ce64:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ce66:	682d      	ldr	r5, [r5, #0]
    ce68:	4620      	mov	r0, r4
    ce6a:	f7ff fb83 	bl	c574 <att_cb>
    ce6e:	4603      	mov	r3, r0
    ce70:	6828      	ldr	r0, [r5, #0]
    ce72:	9700      	str	r7, [sp, #0]
    ce74:	4622      	mov	r2, r4
    ce76:	2104      	movs	r1, #4
    ce78:	f00d fec5 	bl	1ac06 <bt_l2cap_send_cb>
	if (err) {
    ce7c:	4681      	mov	r9, r0
    ce7e:	b120      	cbz	r0, ce8a <chan_send+0x5e>
	buf->data = buf->__buf + state->offset;
    ce80:	6920      	ldr	r0, [r4, #16]
    ce82:	4430      	add	r0, r6
    ce84:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    ce86:	f8a4 800c 	strh.w	r8, [r4, #12]
}
    ce8a:	4648      	mov	r0, r9
    ce8c:	b00b      	add	sp, #44	; 0x2c
    ce8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
    ce92:	6803      	ldr	r3, [r0, #0]
    ce94:	6818      	ldr	r0, [r3, #0]
    ce96:	f00f fc8f 	bl	1c7b8 <bt_smp_sign>
		if (err) {
    ce9a:	4681      	mov	r9, r0
    ce9c:	2800      	cmp	r0, #0
    ce9e:	d0d6      	beq.n	ce4e <chan_send+0x22>
			BT_ERR("Error signing data");
    cea0:	4b1b      	ldr	r3, [pc, #108]	; (cf10 <chan_send+0xe4>)
    cea2:	9309      	str	r3, [sp, #36]	; 0x24
    cea4:	2302      	movs	r3, #2
    cea6:	f88d 3008 	strb.w	r3, [sp, #8]
    ceaa:	2500      	movs	r5, #0
    ceac:	f88d 5009 	strb.w	r5, [sp, #9]
    ceb0:	f88d 500a 	strb.w	r5, [sp, #10]
    ceb4:	f88d 500b 	strb.w	r5, [sp, #11]
    ceb8:	9b02      	ldr	r3, [sp, #8]
    ceba:	9308      	str	r3, [sp, #32]
    cebc:	4629      	mov	r1, r5
    cebe:	f365 0100 	bfi	r1, r5, #0, #1
    cec2:	f365 0141 	bfi	r1, r5, #1, #1
    cec6:	f365 0182 	bfi	r1, r5, #2, #1
    ceca:	f365 01c5 	bfi	r1, r5, #3, #3
    cece:	2301      	movs	r3, #1
    ced0:	f363 1188 	bfi	r1, r3, #6, #3
    ced4:	2308      	movs	r3, #8
    ced6:	f363 2152 	bfi	r1, r3, #9, #10
    ceda:	f365 41de 	bfi	r1, r5, #19, #12
    cede:	f365 71df 	bfi	r1, r5, #31, #1
    cee2:	462b      	mov	r3, r5
    cee4:	aa08      	add	r2, sp, #32
    cee6:	480b      	ldr	r0, [pc, #44]	; (cf14 <chan_send+0xe8>)
    cee8:	f7f6 fbf0 	bl	36cc <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    ceec:	6966      	ldr	r6, [r4, #20]
	(void)memset(data, 0, sizeof(*data));
    ceee:	2214      	movs	r2, #20
    cef0:	4629      	mov	r1, r5
    cef2:	4630      	mov	r0, r6
    cef4:	f00d f8d8 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    cef8:	4631      	mov	r1, r6
    cefa:	4807      	ldr	r0, [pc, #28]	; (cf18 <chan_send+0xec>)
    cefc:	f012 fb80 	bl	1f600 <k_queue_append>
			net_buf_unref(buf);
    cf00:	4620      	mov	r0, r4
    cf02:	f00f fdc3 	bl	1ca8c <net_buf_unref>
			return err;
    cf06:	e7c0      	b.n	ce8a <chan_send+0x5e>
		return -EINVAL;
    cf08:	f06f 0915 	mvn.w	r9, #21
    cf0c:	e7bd      	b.n	ce8a <chan_send+0x5e>
    cf0e:	bf00      	nop
    cf10:	0002254c 	.word	0x0002254c
    cf14:	00020520 	.word	0x00020520
    cf18:	20000728 	.word	0x20000728

0000cf1c <bt_att_chan_create_pdu>:
{
    cf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf20:	b089      	sub	sp, #36	; 0x24
    cf22:	af00      	add	r7, sp, #0
    cf24:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    cf26:	1c53      	adds	r3, r2, #1
    cf28:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    cf2a:	428b      	cmp	r3, r1
    cf2c:	d80b      	bhi.n	cf46 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
    cf2e:	4620      	mov	r0, r4
    cf30:	f00d ff37 	bl	1ada2 <att_op_get_type>
    cf34:	2802      	cmp	r0, #2
    cf36:	d047      	beq.n	cfc8 <bt_att_chan_create_pdu+0xac>
    cf38:	2804      	cmp	r0, #4
    cf3a:	d045      	beq.n	cfc8 <bt_att_chan_create_pdu+0xac>
		timeout = K_FOREVER;
    cf3c:	f04f 38ff 	mov.w	r8, #4294967295
    cf40:	f04f 39ff 	mov.w	r9, #4294967295
    cf44:	e044      	b.n	cfd0 <bt_att_chan_create_pdu+0xb4>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    cf46:	466d      	mov	r5, sp
    cf48:	b088      	sub	sp, #32
    cf4a:	466c      	mov	r4, sp
    cf4c:	f114 0210 	adds.w	r2, r4, #16
    cf50:	d034      	beq.n	cfbc <bt_att_chan_create_pdu+0xa0>
    cf52:	2010      	movs	r0, #16
    cf54:	b11a      	cbz	r2, cf5e <bt_att_chan_create_pdu+0x42>
    cf56:	2804      	cmp	r0, #4
    cf58:	dd01      	ble.n	cf5e <bt_att_chan_create_pdu+0x42>
    cf5a:	4e5c      	ldr	r6, [pc, #368]	; (d0cc <bt_att_chan_create_pdu+0x1b0>)
    cf5c:	6166      	str	r6, [r4, #20]
    cf5e:	b112      	cbz	r2, cf66 <bt_att_chan_create_pdu+0x4a>
    cf60:	2808      	cmp	r0, #8
    cf62:	dd00      	ble.n	cf66 <bt_att_chan_create_pdu+0x4a>
    cf64:	61a1      	str	r1, [r4, #24]
    cf66:	b112      	cbz	r2, cf6e <bt_att_chan_create_pdu+0x52>
    cf68:	280c      	cmp	r0, #12
    cf6a:	dd00      	ble.n	cf6e <bt_att_chan_create_pdu+0x52>
    cf6c:	61e3      	str	r3, [r4, #28]
    cf6e:	280f      	cmp	r0, #15
    cf70:	dd27      	ble.n	cfc2 <bt_att_chan_create_pdu+0xa6>
    cf72:	2310      	movs	r3, #16
    cf74:	b13a      	cbz	r2, cf86 <bt_att_chan_create_pdu+0x6a>
    cf76:	2104      	movs	r1, #4
    cf78:	7139      	strb	r1, [r7, #4]
    cf7a:	2100      	movs	r1, #0
    cf7c:	7179      	strb	r1, [r7, #5]
    cf7e:	71b9      	strb	r1, [r7, #6]
    cf80:	71f9      	strb	r1, [r7, #7]
    cf82:	6878      	ldr	r0, [r7, #4]
    cf84:	6120      	str	r0, [r4, #16]
    cf86:	2100      	movs	r1, #0
    cf88:	f36f 0100 	bfc	r1, #0, #1
    cf8c:	f36f 0141 	bfc	r1, #1, #1
    cf90:	f36f 0182 	bfc	r1, #2, #1
    cf94:	f36f 01c5 	bfc	r1, #3, #3
    cf98:	2002      	movs	r0, #2
    cf9a:	f360 1188 	bfi	r1, r0, #6, #3
    cf9e:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
    cfa2:	f363 2152 	bfi	r1, r3, #9, #10
    cfa6:	f36f 41de 	bfc	r1, #19, #12
    cfaa:	f36f 71df 	bfc	r1, #31, #1
    cfae:	2300      	movs	r3, #0
    cfb0:	4847      	ldr	r0, [pc, #284]	; (d0d0 <bt_att_chan_create_pdu+0x1b4>)
    cfb2:	f7f6 fb8b 	bl	36cc <z_impl_z_log_msg_static_create>
    cfb6:	46ad      	mov	sp, r5
		return NULL;
    cfb8:	2500      	movs	r5, #0
    cfba:	e01f      	b.n	cffc <bt_att_chan_create_pdu+0xe0>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    cfbc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cfc0:	e7c8      	b.n	cf54 <bt_att_chan_create_pdu+0x38>
    cfc2:	f06f 031b 	mvn.w	r3, #27
    cfc6:	e7d5      	b.n	cf74 <bt_att_chan_create_pdu+0x58>
		timeout = BT_ATT_TIMEOUT;
    cfc8:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
    cfcc:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    cfd0:	4642      	mov	r2, r8
    cfd2:	464b      	mov	r3, r9
    cfd4:	2100      	movs	r1, #0
    cfd6:	4608      	mov	r0, r1
    cfd8:	f00d fe10 	bl	1abfc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    cfdc:	4605      	mov	r5, r0
    cfde:	b190      	cbz	r0, d006 <bt_att_chan_create_pdu+0xea>
	data = tx_meta_data_alloc(timeout);
    cfe0:	4640      	mov	r0, r8
    cfe2:	4649      	mov	r1, r9
    cfe4:	f7ff fae6 	bl	c5b4 <tx_meta_data_alloc>
	if (!data) {
    cfe8:	4606      	mov	r6, r0
    cfea:	2800      	cmp	r0, #0
    cfec:	d047      	beq.n	d07e <bt_att_chan_create_pdu+0x162>
	bt_att_tx_meta_data(buf) = data;
    cfee:	6168      	str	r0, [r5, #20]
	return net_buf_simple_add(&buf->b, len);
    cff0:	2101      	movs	r1, #1
    cff2:	f105 0008 	add.w	r0, r5, #8
    cff6:	f00f fd93 	bl	1cb20 <net_buf_simple_add>
	hdr->code = op;
    cffa:	7004      	strb	r4, [r0, #0]
}
    cffc:	4628      	mov	r0, r5
    cffe:	3724      	adds	r7, #36	; 0x24
    d000:	46bd      	mov	sp, r7
    d002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    d006:	466e      	mov	r6, sp
    d008:	b088      	sub	sp, #32
    d00a:	466b      	mov	r3, sp
    d00c:	f113 0210 	adds.w	r2, r3, #16
    d010:	d02f      	beq.n	d072 <bt_att_chan_create_pdu+0x156>
    d012:	210c      	movs	r1, #12
    d014:	b11a      	cbz	r2, d01e <bt_att_chan_create_pdu+0x102>
    d016:	2904      	cmp	r1, #4
    d018:	dd01      	ble.n	d01e <bt_att_chan_create_pdu+0x102>
    d01a:	482e      	ldr	r0, [pc, #184]	; (d0d4 <bt_att_chan_create_pdu+0x1b8>)
    d01c:	6158      	str	r0, [r3, #20]
    d01e:	b112      	cbz	r2, d026 <bt_att_chan_create_pdu+0x10a>
    d020:	2908      	cmp	r1, #8
    d022:	dd00      	ble.n	d026 <bt_att_chan_create_pdu+0x10a>
    d024:	619c      	str	r4, [r3, #24]
    d026:	290b      	cmp	r1, #11
    d028:	dd26      	ble.n	d078 <bt_att_chan_create_pdu+0x15c>
    d02a:	240c      	movs	r4, #12
    d02c:	b13a      	cbz	r2, d03e <bt_att_chan_create_pdu+0x122>
    d02e:	2103      	movs	r1, #3
    d030:	7139      	strb	r1, [r7, #4]
    d032:	2100      	movs	r1, #0
    d034:	7179      	strb	r1, [r7, #5]
    d036:	71b9      	strb	r1, [r7, #6]
    d038:	71f9      	strb	r1, [r7, #7]
    d03a:	6878      	ldr	r0, [r7, #4]
    d03c:	6118      	str	r0, [r3, #16]
    d03e:	2100      	movs	r1, #0
    d040:	f36f 0100 	bfc	r1, #0, #1
    d044:	f36f 0141 	bfc	r1, #1, #1
    d048:	f36f 0182 	bfc	r1, #2, #1
    d04c:	f36f 01c5 	bfc	r1, #3, #3
    d050:	2301      	movs	r3, #1
    d052:	f363 1188 	bfi	r1, r3, #6, #3
    d056:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    d05a:	f363 2152 	bfi	r1, r3, #9, #10
    d05e:	f36f 41de 	bfc	r1, #19, #12
    d062:	f36f 71df 	bfc	r1, #31, #1
    d066:	2300      	movs	r3, #0
    d068:	4819      	ldr	r0, [pc, #100]	; (d0d0 <bt_att_chan_create_pdu+0x1b4>)
    d06a:	f7f6 fb2f 	bl	36cc <z_impl_z_log_msg_static_create>
    d06e:	46b5      	mov	sp, r6
		return NULL;
    d070:	e7c4      	b.n	cffc <bt_att_chan_create_pdu+0xe0>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    d072:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d076:	e7cd      	b.n	d014 <bt_att_chan_create_pdu+0xf8>
    d078:	f06f 041b 	mvn.w	r4, #27
    d07c:	e7d6      	b.n	d02c <bt_att_chan_create_pdu+0x110>
		BT_WARN("Unable to allocate ATT TX meta");
    d07e:	4b16      	ldr	r3, [pc, #88]	; (d0d8 <bt_att_chan_create_pdu+0x1bc>)
    d080:	61fb      	str	r3, [r7, #28]
    d082:	2202      	movs	r2, #2
    d084:	713a      	strb	r2, [r7, #4]
    d086:	2300      	movs	r3, #0
    d088:	717b      	strb	r3, [r7, #5]
    d08a:	71bb      	strb	r3, [r7, #6]
    d08c:	71fb      	strb	r3, [r7, #7]
    d08e:	6879      	ldr	r1, [r7, #4]
    d090:	61b9      	str	r1, [r7, #24]
    d092:	4619      	mov	r1, r3
    d094:	f363 0100 	bfi	r1, r3, #0, #1
    d098:	f363 0141 	bfi	r1, r3, #1, #1
    d09c:	f363 0182 	bfi	r1, r3, #2, #1
    d0a0:	f363 01c5 	bfi	r1, r3, #3, #3
    d0a4:	f362 1188 	bfi	r1, r2, #6, #3
    d0a8:	2208      	movs	r2, #8
    d0aa:	f362 2152 	bfi	r1, r2, #9, #10
    d0ae:	f363 41de 	bfi	r1, r3, #19, #12
    d0b2:	f363 71df 	bfi	r1, r3, #31, #1
    d0b6:	f107 0218 	add.w	r2, r7, #24
    d0ba:	4805      	ldr	r0, [pc, #20]	; (d0d0 <bt_att_chan_create_pdu+0x1b4>)
    d0bc:	f7f6 fb06 	bl	36cc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    d0c0:	4628      	mov	r0, r5
    d0c2:	f00f fce3 	bl	1ca8c <net_buf_unref>
		return NULL;
    d0c6:	4635      	mov	r5, r6
    d0c8:	e798      	b.n	cffc <bt_att_chan_create_pdu+0xe0>
    d0ca:	bf00      	nop
    d0cc:	00022560 	.word	0x00022560
    d0d0:	00020520 	.word	0x00020520
    d0d4:	0002233c 	.word	0x0002233c
    d0d8:	00022588 	.word	0x00022588

0000d0dc <bt_att_recv>:
{
    d0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d0e0:	b095      	sub	sp, #84	; 0x54
    d0e2:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
    d0e4:	898b      	ldrh	r3, [r1, #12]
    d0e6:	b173      	cbz	r3, d106 <bt_att_recv+0x2a>
    d0e8:	4606      	mov	r6, r0
    d0ea:	460d      	mov	r5, r1
    d0ec:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
    d0f0:	2101      	movs	r1, #1
    d0f2:	f105 0008 	add.w	r0, r5, #8
    d0f6:	f00f fd4b 	bl	1cb90 <net_buf_simple_pull_mem>
    d0fa:	4604      	mov	r4, r0
	if (!att_chan->att) {
    d0fc:	f856 3c04 	ldr.w	r3, [r6, #-4]
    d100:	b31b      	cbz	r3, d14a <bt_att_recv+0x6e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d102:	2300      	movs	r3, #0
    d104:	e027      	b.n	d156 <bt_att_recv+0x7a>
		BT_ERR("Too small ATT PDU received");
    d106:	4ba7      	ldr	r3, [pc, #668]	; (d3a4 <bt_att_recv+0x2c8>)
    d108:	64fb      	str	r3, [r7, #76]	; 0x4c
    d10a:	2302      	movs	r3, #2
    d10c:	713b      	strb	r3, [r7, #4]
    d10e:	2300      	movs	r3, #0
    d110:	717b      	strb	r3, [r7, #5]
    d112:	71bb      	strb	r3, [r7, #6]
    d114:	71fb      	strb	r3, [r7, #7]
    d116:	687a      	ldr	r2, [r7, #4]
    d118:	64ba      	str	r2, [r7, #72]	; 0x48
    d11a:	4619      	mov	r1, r3
    d11c:	f363 0100 	bfi	r1, r3, #0, #1
    d120:	f363 0141 	bfi	r1, r3, #1, #1
    d124:	f363 0182 	bfi	r1, r3, #2, #1
    d128:	f363 01c5 	bfi	r1, r3, #3, #3
    d12c:	2201      	movs	r2, #1
    d12e:	f362 1188 	bfi	r1, r2, #6, #3
    d132:	2208      	movs	r2, #8
    d134:	f362 2152 	bfi	r1, r2, #9, #10
    d138:	f363 41de 	bfi	r1, r3, #19, #12
    d13c:	f363 71df 	bfi	r1, r3, #31, #1
    d140:	f107 0248 	add.w	r2, r7, #72	; 0x48
    d144:	4898      	ldr	r0, [pc, #608]	; (d3a8 <bt_att_recv+0x2cc>)
    d146:	f7f6 fac1 	bl	36cc <z_impl_z_log_msg_static_create>
}
    d14a:	2000      	movs	r0, #0
    d14c:	3754      	adds	r7, #84	; 0x54
    d14e:	46bd      	mov	sp, r7
    d150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d154:	3301      	adds	r3, #1
    d156:	2b1d      	cmp	r3, #29
    d158:	d868      	bhi.n	d22c <bt_att_recv+0x150>
		if (hdr->code == handlers[i].op) {
    d15a:	f894 c000 	ldrb.w	ip, [r4]
    d15e:	4a93      	ldr	r2, [pc, #588]	; (d3ac <bt_att_recv+0x2d0>)
    d160:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    d164:	4594      	cmp	ip, r2
    d166:	d1f5      	bne.n	d154 <bt_att_recv+0x78>
			handler = &handlers[i];
    d168:	4a90      	ldr	r2, [pc, #576]	; (d3ac <bt_att_recv+0x2d0>)
    d16a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	if (!handler) {
    d16e:	f1b9 0f00 	cmp.w	r9, #0
    d172:	d05e      	beq.n	d232 <bt_att_recv+0x156>
		if (handler->type == ATT_REQUEST &&
    d174:	f899 3002 	ldrb.w	r3, [r9, #2]
    d178:	2b01      	cmp	r3, #1
    d17a:	f000 80a7 	beq.w	d2cc <bt_att_recv+0x1f0>
		} else if (handler->type == ATT_INDICATION &&
    d17e:	f899 3002 	ldrb.w	r3, [r9, #2]
    d182:	2b05      	cmp	r3, #5
    d184:	f000 80d2 	beq.w	d32c <bt_att_recv+0x250>
	if (buf->len < handler->expect_len) {
    d188:	89a9      	ldrh	r1, [r5, #12]
    d18a:	f899 3001 	ldrb.w	r3, [r9, #1]
    d18e:	4299      	cmp	r1, r3
    d190:	f080 8101 	bcs.w	d396 <bt_att_recv+0x2ba>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d194:	7826      	ldrb	r6, [r4, #0]
    d196:	466d      	mov	r5, sp
    d198:	b088      	sub	sp, #32
    d19a:	466b      	mov	r3, sp
    d19c:	f113 0210 	adds.w	r2, r3, #16
    d1a0:	f000 80f3 	beq.w	d38a <bt_att_recv+0x2ae>
    d1a4:	2010      	movs	r0, #16
    d1a6:	b12a      	cbz	r2, d1b4 <bt_att_recv+0xd8>
    d1a8:	2804      	cmp	r0, #4
    d1aa:	dd03      	ble.n	d1b4 <bt_att_recv+0xd8>
    d1ac:	f8df c200 	ldr.w	ip, [pc, #512]	; d3b0 <bt_att_recv+0x2d4>
    d1b0:	f8c3 c014 	str.w	ip, [r3, #20]
    d1b4:	b112      	cbz	r2, d1bc <bt_att_recv+0xe0>
    d1b6:	2808      	cmp	r0, #8
    d1b8:	dd00      	ble.n	d1bc <bt_att_recv+0xe0>
    d1ba:	6199      	str	r1, [r3, #24]
    d1bc:	b112      	cbz	r2, d1c4 <bt_att_recv+0xe8>
    d1be:	280c      	cmp	r0, #12
    d1c0:	dd00      	ble.n	d1c4 <bt_att_recv+0xe8>
    d1c2:	61de      	str	r6, [r3, #28]
    d1c4:	280f      	cmp	r0, #15
    d1c6:	f340 80e3 	ble.w	d390 <bt_att_recv+0x2b4>
    d1ca:	2610      	movs	r6, #16
    d1cc:	b13a      	cbz	r2, d1de <bt_att_recv+0x102>
    d1ce:	2104      	movs	r1, #4
    d1d0:	7139      	strb	r1, [r7, #4]
    d1d2:	2100      	movs	r1, #0
    d1d4:	7179      	strb	r1, [r7, #5]
    d1d6:	71b9      	strb	r1, [r7, #6]
    d1d8:	71f9      	strb	r1, [r7, #7]
    d1da:	6878      	ldr	r0, [r7, #4]
    d1dc:	6118      	str	r0, [r3, #16]
    d1de:	2100      	movs	r1, #0
    d1e0:	f36f 0100 	bfc	r1, #0, #1
    d1e4:	f36f 0141 	bfc	r1, #1, #1
    d1e8:	f36f 0182 	bfc	r1, #2, #1
    d1ec:	f36f 01c5 	bfc	r1, #3, #3
    d1f0:	2301      	movs	r3, #1
    d1f2:	f363 1188 	bfi	r1, r3, #6, #3
    d1f6:	f406 767d 	and.w	r6, r6, #1012	; 0x3f4
    d1fa:	f366 2152 	bfi	r1, r6, #9, #10
    d1fe:	f36f 41de 	bfc	r1, #19, #12
    d202:	f36f 71df 	bfc	r1, #31, #1
    d206:	2300      	movs	r3, #0
    d208:	4867      	ldr	r0, [pc, #412]	; (d3a8 <bt_att_recv+0x2cc>)
    d20a:	f7f6 fa5f 	bl	36cc <z_impl_z_log_msg_static_create>
    d20e:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
    d210:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    d212:	f899 3002 	ldrb.w	r3, [r9, #2]
    d216:	2b01      	cmp	r3, #1
    d218:	d197      	bne.n	d14a <bt_att_recv+0x6e>
    d21a:	2800      	cmp	r0, #0
    d21c:	d095      	beq.n	d14a <bt_att_recv+0x6e>
		send_err_rsp(att_chan, hdr->code, 0, err);
    d21e:	4603      	mov	r3, r0
    d220:	2200      	movs	r2, #0
    d222:	7821      	ldrb	r1, [r4, #0]
    d224:	4640      	mov	r0, r8
    d226:	f00e f9e2 	bl	1b5ee <send_err_rsp>
    d22a:	e78e      	b.n	d14a <bt_att_recv+0x6e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    d22c:	f04f 0900 	mov.w	r9, #0
    d230:	e79d      	b.n	d16e <bt_att_recv+0x92>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    d232:	7820      	ldrb	r0, [r4, #0]
    d234:	466d      	mov	r5, sp
    d236:	b088      	sub	sp, #32
    d238:	466b      	mov	r3, sp
    d23a:	f113 0210 	adds.w	r2, r3, #16
    d23e:	d03f      	beq.n	d2c0 <bt_att_recv+0x1e4>
    d240:	210c      	movs	r1, #12
    d242:	b11a      	cbz	r2, d24c <bt_att_recv+0x170>
    d244:	2904      	cmp	r1, #4
    d246:	dd01      	ble.n	d24c <bt_att_recv+0x170>
    d248:	4e5a      	ldr	r6, [pc, #360]	; (d3b4 <bt_att_recv+0x2d8>)
    d24a:	615e      	str	r6, [r3, #20]
    d24c:	b112      	cbz	r2, d254 <bt_att_recv+0x178>
    d24e:	2908      	cmp	r1, #8
    d250:	dd00      	ble.n	d254 <bt_att_recv+0x178>
    d252:	6198      	str	r0, [r3, #24]
    d254:	290b      	cmp	r1, #11
    d256:	dd36      	ble.n	d2c6 <bt_att_recv+0x1ea>
    d258:	260c      	movs	r6, #12
    d25a:	b13a      	cbz	r2, d26c <bt_att_recv+0x190>
    d25c:	2103      	movs	r1, #3
    d25e:	7139      	strb	r1, [r7, #4]
    d260:	2100      	movs	r1, #0
    d262:	7179      	strb	r1, [r7, #5]
    d264:	71b9      	strb	r1, [r7, #6]
    d266:	71f9      	strb	r1, [r7, #7]
    d268:	6878      	ldr	r0, [r7, #4]
    d26a:	6118      	str	r0, [r3, #16]
    d26c:	2100      	movs	r1, #0
    d26e:	f36f 0100 	bfc	r1, #0, #1
    d272:	f36f 0141 	bfc	r1, #1, #1
    d276:	f36f 0182 	bfc	r1, #2, #1
    d27a:	f36f 01c5 	bfc	r1, #3, #3
    d27e:	2302      	movs	r3, #2
    d280:	f363 1188 	bfi	r1, r3, #6, #3
    d284:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
    d288:	f363 2152 	bfi	r1, r3, #9, #10
    d28c:	f36f 41de 	bfc	r1, #19, #12
    d290:	f36f 71df 	bfc	r1, #31, #1
    d294:	2300      	movs	r3, #0
    d296:	4844      	ldr	r0, [pc, #272]	; (d3a8 <bt_att_recv+0x2cc>)
    d298:	f7f6 fa18 	bl	36cc <z_impl_z_log_msg_static_create>
    d29c:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    d29e:	7824      	ldrb	r4, [r4, #0]
    d2a0:	4620      	mov	r0, r4
    d2a2:	f00d fd7e 	bl	1ada2 <att_op_get_type>
    d2a6:	2800      	cmp	r0, #0
    d2a8:	f43f af4f 	beq.w	d14a <bt_att_recv+0x6e>
    d2ac:	2805      	cmp	r0, #5
    d2ae:	f43f af4c 	beq.w	d14a <bt_att_recv+0x6e>
			send_err_rsp(att_chan, hdr->code, 0,
    d2b2:	2306      	movs	r3, #6
    d2b4:	2200      	movs	r2, #0
    d2b6:	4621      	mov	r1, r4
    d2b8:	4640      	mov	r0, r8
    d2ba:	f00e f998 	bl	1b5ee <send_err_rsp>
		return 0;
    d2be:	e744      	b.n	d14a <bt_att_recv+0x6e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    d2c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d2c4:	e7bd      	b.n	d242 <bt_att_recv+0x166>
    d2c6:	f06f 061b 	mvn.w	r6, #27
    d2ca:	e7c6      	b.n	d25a <bt_att_recv+0x17e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    d2cc:	f106 038c 	add.w	r3, r6, #140	; 0x8c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d2d0:	e8d3 2fef 	ldaex	r2, [r3]
    d2d4:	f042 0101 	orr.w	r1, r2, #1
    d2d8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d2dc:	2800      	cmp	r0, #0
    d2de:	d1f7      	bne.n	d2d0 <bt_att_recv+0x1f4>
		if (handler->type == ATT_REQUEST &&
    d2e0:	f012 0f01 	tst.w	r2, #1
    d2e4:	f43f af4b 	beq.w	d17e <bt_att_recv+0xa2>
			BT_WARN("Ignoring unexpected request");
    d2e8:	4b33      	ldr	r3, [pc, #204]	; (d3b8 <bt_att_recv+0x2dc>)
    d2ea:	61fb      	str	r3, [r7, #28]
    d2ec:	2202      	movs	r2, #2
    d2ee:	713a      	strb	r2, [r7, #4]
    d2f0:	2300      	movs	r3, #0
    d2f2:	717b      	strb	r3, [r7, #5]
    d2f4:	71bb      	strb	r3, [r7, #6]
    d2f6:	71fb      	strb	r3, [r7, #7]
    d2f8:	6879      	ldr	r1, [r7, #4]
    d2fa:	61b9      	str	r1, [r7, #24]
    d2fc:	4619      	mov	r1, r3
    d2fe:	f363 0100 	bfi	r1, r3, #0, #1
    d302:	f363 0141 	bfi	r1, r3, #1, #1
    d306:	f363 0182 	bfi	r1, r3, #2, #1
    d30a:	f363 01c5 	bfi	r1, r3, #3, #3
    d30e:	f362 1188 	bfi	r1, r2, #6, #3
    d312:	2208      	movs	r2, #8
    d314:	f362 2152 	bfi	r1, r2, #9, #10
    d318:	f363 41de 	bfi	r1, r3, #19, #12
    d31c:	f363 71df 	bfi	r1, r3, #31, #1
    d320:	f107 0218 	add.w	r2, r7, #24
    d324:	4820      	ldr	r0, [pc, #128]	; (d3a8 <bt_att_recv+0x2cc>)
    d326:	f7f6 f9d1 	bl	36cc <z_impl_z_log_msg_static_create>
			return 0;
    d32a:	e70e      	b.n	d14a <bt_att_recv+0x6e>
			   atomic_test_and_set_bit(att_chan->flags,
    d32c:	368c      	adds	r6, #140	; 0x8c
    d32e:	e8d6 3fef 	ldaex	r3, [r6]
    d332:	f043 0202 	orr.w	r2, r3, #2
    d336:	e8c6 2fe1 	stlex	r1, r2, [r6]
    d33a:	2900      	cmp	r1, #0
    d33c:	d1f7      	bne.n	d32e <bt_att_recv+0x252>
		} else if (handler->type == ATT_INDICATION &&
    d33e:	f013 0f02 	tst.w	r3, #2
    d342:	f43f af21 	beq.w	d188 <bt_att_recv+0xac>
			BT_WARN("Ignoring unexpected indication");
    d346:	4b1d      	ldr	r3, [pc, #116]	; (d3bc <bt_att_recv+0x2e0>)
    d348:	637b      	str	r3, [r7, #52]	; 0x34
    d34a:	2202      	movs	r2, #2
    d34c:	713a      	strb	r2, [r7, #4]
    d34e:	2300      	movs	r3, #0
    d350:	717b      	strb	r3, [r7, #5]
    d352:	71bb      	strb	r3, [r7, #6]
    d354:	71fb      	strb	r3, [r7, #7]
    d356:	6879      	ldr	r1, [r7, #4]
    d358:	6339      	str	r1, [r7, #48]	; 0x30
    d35a:	4619      	mov	r1, r3
    d35c:	f363 0100 	bfi	r1, r3, #0, #1
    d360:	f363 0141 	bfi	r1, r3, #1, #1
    d364:	f363 0182 	bfi	r1, r3, #2, #1
    d368:	f363 01c5 	bfi	r1, r3, #3, #3
    d36c:	f362 1188 	bfi	r1, r2, #6, #3
    d370:	2208      	movs	r2, #8
    d372:	f362 2152 	bfi	r1, r2, #9, #10
    d376:	f363 41de 	bfi	r1, r3, #19, #12
    d37a:	f363 71df 	bfi	r1, r3, #31, #1
    d37e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d382:	4809      	ldr	r0, [pc, #36]	; (d3a8 <bt_att_recv+0x2cc>)
    d384:	f7f6 f9a2 	bl	36cc <z_impl_z_log_msg_static_create>
			return 0;
    d388:	e6df      	b.n	d14a <bt_att_recv+0x6e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d38a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d38e:	e70a      	b.n	d1a6 <bt_att_recv+0xca>
    d390:	f06f 061b 	mvn.w	r6, #27
    d394:	e71a      	b.n	d1cc <bt_att_recv+0xf0>
		err = handler->func(att_chan, buf);
    d396:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d39a:	4629      	mov	r1, r5
    d39c:	4640      	mov	r0, r8
    d39e:	4798      	blx	r3
    d3a0:	e737      	b.n	d212 <bt_att_recv+0x136>
    d3a2:	bf00      	nop
    d3a4:	000225a8 	.word	0x000225a8
    d3a8:	00020520 	.word	0x00020520
    d3ac:	00022684 	.word	0x00022684
    d3b0:	0002261c 	.word	0x0002261c
    d3b4:	000225c4 	.word	0x000225c4
    d3b8:	000225e0 	.word	0x000225e0
    d3bc:	000225fc 	.word	0x000225fc

0000d3c0 <att_write_rsp>:
{
    d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3c4:	b08a      	sub	sp, #40	; 0x28
    d3c6:	4604      	mov	r4, r0
    d3c8:	4617      	mov	r7, r2
    d3ca:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    d3cc:	6803      	ldr	r3, [r0, #0]
    d3ce:	4688      	mov	r8, r1
    d3d0:	3900      	subs	r1, #0
    d3d2:	bf18      	it	ne
    d3d4:	2101      	movne	r1, #1
    d3d6:	6818      	ldr	r0, [r3, #0]
    d3d8:	f00f f973 	bl	1c6c2 <bt_gatt_change_aware>
    d3dc:	b128      	cbz	r0, d3ea <att_write_rsp+0x2a>
	if (!handle) {
    d3de:	b9a5      	cbnz	r5, d40a <att_write_rsp+0x4a>
		return BT_ATT_ERR_INVALID_HANDLE;
    d3e0:	2601      	movs	r6, #1
}
    d3e2:	4630      	mov	r0, r6
    d3e4:	b00a      	add	sp, #40	; 0x28
    d3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    d3ea:	3490      	adds	r4, #144	; 0x90
    d3ec:	e8d4 3fef 	ldaex	r3, [r4]
    d3f0:	f043 0220 	orr.w	r2, r3, #32
    d3f4:	e8c4 2fe1 	stlex	r1, r2, [r4]
    d3f8:	2900      	cmp	r1, #0
    d3fa:	d1f7      	bne.n	d3ec <att_write_rsp+0x2c>
    d3fc:	f013 0f20 	tst.w	r3, #32
    d400:	d001      	beq.n	d406 <att_write_rsp+0x46>
			return 0;
    d402:	2600      	movs	r6, #0
    d404:	e7ed      	b.n	d3e2 <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d406:	2612      	movs	r6, #18
    d408:	e7eb      	b.n	d3e2 <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
    d40a:	2218      	movs	r2, #24
    d40c:	2100      	movs	r1, #0
    d40e:	a804      	add	r0, sp, #16
    d410:	f00c fe4a 	bl	1a0a8 <memset>
	if (rsp) {
    d414:	b13f      	cbz	r7, d426 <att_write_rsp+0x66>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    d416:	2200      	movs	r2, #0
    d418:	4639      	mov	r1, r7
    d41a:	4620      	mov	r0, r4
    d41c:	f7ff fd7e 	bl	cf1c <bt_att_chan_create_pdu>
    d420:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
    d422:	2800      	cmp	r0, #0
    d424:	d045      	beq.n	d4b2 <att_write_rsp+0xf2>
	data.conn = chan->att->conn;
    d426:	6823      	ldr	r3, [r4, #0]
    d428:	681b      	ldr	r3, [r3, #0]
    d42a:	9304      	str	r3, [sp, #16]
	data.req = req;
    d42c:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
    d430:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    d434:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
    d438:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d43a:	9307      	str	r3, [sp, #28]
	data.len = len;
    d43c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    d440:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d444:	2301      	movs	r3, #1
    d446:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
    d44a:	ab04      	add	r3, sp, #16
    d44c:	9302      	str	r3, [sp, #8]
    d44e:	4b1a      	ldr	r3, [pc, #104]	; (d4b8 <att_write_rsp+0xf8>)
    d450:	9301      	str	r3, [sp, #4]
    d452:	2200      	movs	r2, #0
    d454:	9200      	str	r2, [sp, #0]
    d456:	4613      	mov	r3, r2
    d458:	4629      	mov	r1, r5
    d45a:	4628      	mov	r0, r5
    d45c:	f001 f88e 	bl	e57c <bt_gatt_foreach_attr_type>
	if (data.err) {
    d460:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    d464:	b936      	cbnz	r6, d474 <att_write_rsp+0xb4>
	if (data.buf) {
    d466:	9905      	ldr	r1, [sp, #20]
    d468:	2900      	cmp	r1, #0
    d46a:	d0ba      	beq.n	d3e2 <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
    d46c:	4620      	mov	r0, r4
    d46e:	f00e f849 	bl	1b504 <bt_att_chan_send_rsp>
    d472:	e7b6      	b.n	d3e2 <att_write_rsp+0x22>
		if (rsp) {
    d474:	b927      	cbnz	r7, d480 <att_write_rsp+0xc0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    d476:	f1b8 0f18 	cmp.w	r8, #24
    d47a:	d017      	beq.n	d4ac <att_write_rsp+0xec>
    d47c:	2600      	movs	r6, #0
    d47e:	e7b0      	b.n	d3e2 <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d480:	9b05      	ldr	r3, [sp, #20]
    d482:	695e      	ldr	r6, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d484:	2214      	movs	r2, #20
    d486:	2100      	movs	r1, #0
    d488:	4630      	mov	r0, r6
    d48a:	f00c fe0d 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d48e:	4631      	mov	r1, r6
    d490:	480a      	ldr	r0, [pc, #40]	; (d4bc <att_write_rsp+0xfc>)
    d492:	f012 f8b5 	bl	1f600 <k_queue_append>
			net_buf_unref(data.buf);
    d496:	9805      	ldr	r0, [sp, #20]
    d498:	f00f faf8 	bl	1ca8c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
    d49c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d4a0:	462a      	mov	r2, r5
    d4a2:	4641      	mov	r1, r8
    d4a4:	4620      	mov	r0, r4
    d4a6:	f00e f8a2 	bl	1b5ee <send_err_rsp>
    d4aa:	e7e4      	b.n	d476 <att_write_rsp+0xb6>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    d4ac:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    d4b0:	e797      	b.n	d3e2 <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
    d4b2:	260e      	movs	r6, #14
    d4b4:	e795      	b.n	d3e2 <att_write_rsp+0x22>
    d4b6:	bf00      	nop
    d4b8:	0001af87 	.word	0x0001af87
    d4bc:	20000728 	.word	0x20000728

0000d4c0 <bt_att_create_pdu>:
{
    d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4c2:	b083      	sub	sp, #12
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	460e      	mov	r6, r1
    d4c8:	4615      	mov	r5, r2
	att = att_get(conn);
    d4ca:	f7ff f87d 	bl	c5c8 <att_get>
	if (!att) {
    d4ce:	4604      	mov	r4, r0
    d4d0:	b320      	cbz	r0, d51c <bt_att_create_pdu+0x5c>
	return list->head;
    d4d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d4d4:	b334      	cbz	r4, d524 <bt_att_create_pdu+0x64>
    d4d6:	3ce0      	subs	r4, #224	; 0xe0
    d4d8:	d026      	beq.n	d528 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d4da:	f114 00e0 	adds.w	r0, r4, #224	; 0xe0
    d4de:	d007      	beq.n	d4f0 <bt_att_create_pdu+0x30>
	return node->next;
    d4e0:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    d4e4:	b120      	cbz	r0, d4f0 <bt_att_create_pdu+0x30>
    d4e6:	38e0      	subs	r0, #224	; 0xe0
    d4e8:	e002      	b.n	d4f0 <bt_att_create_pdu+0x30>
    d4ea:	4603      	mov	r3, r0
    d4ec:	4604      	mov	r4, r0
    d4ee:	4618      	mov	r0, r3
    d4f0:	b1e4      	cbz	r4, d52c <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    d4f2:	1c6b      	adds	r3, r5, #1
    d4f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    d4f6:	4293      	cmp	r3, r2
    d4f8:	d90a      	bls.n	d510 <bt_att_create_pdu+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d4fa:	2800      	cmp	r0, #0
    d4fc:	d0f5      	beq.n	d4ea <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d4fe:	f110 03e0 	adds.w	r3, r0, #224	; 0xe0
    d502:	d0f3      	beq.n	d4ec <bt_att_create_pdu+0x2c>
	return node->next;
    d504:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
    d508:	2b00      	cmp	r3, #0
    d50a:	d0ef      	beq.n	d4ec <bt_att_create_pdu+0x2c>
    d50c:	3be0      	subs	r3, #224	; 0xe0
    d50e:	e7ed      	b.n	d4ec <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
    d510:	462a      	mov	r2, r5
    d512:	4631      	mov	r1, r6
    d514:	4620      	mov	r0, r4
    d516:	f7ff fd01 	bl	cf1c <bt_att_chan_create_pdu>
    d51a:	4604      	mov	r4, r0
}
    d51c:	4620      	mov	r0, r4
    d51e:	370c      	adds	r7, #12
    d520:	46bd      	mov	sp, r7
    d522:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d524:	4620      	mov	r0, r4
    d526:	e7e3      	b.n	d4f0 <bt_att_create_pdu+0x30>
    d528:	4620      	mov	r0, r4
    d52a:	e7e1      	b.n	d4f0 <bt_att_create_pdu+0x30>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    d52c:	3501      	adds	r5, #1
    d52e:	466e      	mov	r6, sp
    d530:	b088      	sub	sp, #32
    d532:	466b      	mov	r3, sp
    d534:	f113 0210 	adds.w	r2, r3, #16
    d538:	d02f      	beq.n	d59a <bt_att_create_pdu+0xda>
    d53a:	210c      	movs	r1, #12
    d53c:	b11a      	cbz	r2, d546 <bt_att_create_pdu+0x86>
    d53e:	2904      	cmp	r1, #4
    d540:	dd01      	ble.n	d546 <bt_att_create_pdu+0x86>
    d542:	4819      	ldr	r0, [pc, #100]	; (d5a8 <bt_att_create_pdu+0xe8>)
    d544:	6158      	str	r0, [r3, #20]
    d546:	b112      	cbz	r2, d54e <bt_att_create_pdu+0x8e>
    d548:	2908      	cmp	r1, #8
    d54a:	dd00      	ble.n	d54e <bt_att_create_pdu+0x8e>
    d54c:	619d      	str	r5, [r3, #24]
    d54e:	290b      	cmp	r1, #11
    d550:	dd26      	ble.n	d5a0 <bt_att_create_pdu+0xe0>
    d552:	250c      	movs	r5, #12
    d554:	b13a      	cbz	r2, d566 <bt_att_create_pdu+0xa6>
    d556:	2103      	movs	r1, #3
    d558:	7139      	strb	r1, [r7, #4]
    d55a:	2100      	movs	r1, #0
    d55c:	7179      	strb	r1, [r7, #5]
    d55e:	71b9      	strb	r1, [r7, #6]
    d560:	71f9      	strb	r1, [r7, #7]
    d562:	6878      	ldr	r0, [r7, #4]
    d564:	6118      	str	r0, [r3, #16]
    d566:	2100      	movs	r1, #0
    d568:	f36f 0100 	bfc	r1, #0, #1
    d56c:	f36f 0141 	bfc	r1, #1, #1
    d570:	f36f 0182 	bfc	r1, #2, #1
    d574:	f36f 01c5 	bfc	r1, #3, #3
    d578:	2302      	movs	r3, #2
    d57a:	f363 1188 	bfi	r1, r3, #6, #3
    d57e:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
    d582:	f363 2152 	bfi	r1, r3, #9, #10
    d586:	f36f 41de 	bfc	r1, #19, #12
    d58a:	f36f 71df 	bfc	r1, #31, #1
    d58e:	2300      	movs	r3, #0
    d590:	4806      	ldr	r0, [pc, #24]	; (d5ac <bt_att_create_pdu+0xec>)
    d592:	f7f6 f89b 	bl	36cc <z_impl_z_log_msg_static_create>
    d596:	46b5      	mov	sp, r6
	return NULL;
    d598:	e7c0      	b.n	d51c <bt_att_create_pdu+0x5c>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    d59a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d59e:	e7cd      	b.n	d53c <bt_att_create_pdu+0x7c>
    d5a0:	f06f 051b 	mvn.w	r5, #27
    d5a4:	e7d6      	b.n	d554 <bt_att_create_pdu+0x94>
    d5a6:	bf00      	nop
    d5a8:	0002263c 	.word	0x0002263c
    d5ac:	00020520 	.word	0x00020520

0000d5b0 <att_read_group_rsp>:
{
    d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b4:	b08a      	sub	sp, #40	; 0x28
    d5b6:	4604      	mov	r4, r0
    d5b8:	460f      	mov	r7, r1
    d5ba:	4615      	mov	r5, r2
    d5bc:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
    d5be:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    d5c2:	2214      	movs	r2, #20
    d5c4:	2100      	movs	r1, #0
    d5c6:	eb0d 0002 	add.w	r0, sp, r2
    d5ca:	f00c fd6d 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    d5ce:	2201      	movs	r2, #1
    d5d0:	2111      	movs	r1, #17
    d5d2:	4640      	mov	r0, r8
    d5d4:	f7ff ff74 	bl	d4c0 <bt_att_create_pdu>
    d5d8:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
    d5da:	2800      	cmp	r0, #0
    d5dc:	d034      	beq.n	d648 <att_read_group_rsp+0x98>
	data.chan = chan;
    d5de:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
    d5e0:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
    d5e2:	2101      	movs	r1, #1
    d5e4:	3008      	adds	r0, #8
    d5e6:	f00f fa9b 	bl	1cb20 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d5ea:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
    d5ec:	2200      	movs	r2, #0
    d5ee:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
    d5f0:	9209      	str	r2, [sp, #36]	; 0x24
    d5f2:	ab05      	add	r3, sp, #20
    d5f4:	9302      	str	r3, [sp, #8]
    d5f6:	4b15      	ldr	r3, [pc, #84]	; (d64c <att_read_group_rsp+0x9c>)
    d5f8:	9301      	str	r3, [sp, #4]
    d5fa:	9200      	str	r2, [sp, #0]
    d5fc:	4613      	mov	r3, r2
    d5fe:	4631      	mov	r1, r6
    d600:	4628      	mov	r0, r5
    d602:	f000 ffbb 	bl	e57c <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
    d606:	9b08      	ldr	r3, [sp, #32]
    d608:	781e      	ldrb	r6, [r3, #0]
    d60a:	b146      	cbz	r6, d61e <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf);
    d60c:	9907      	ldr	r1, [sp, #28]
    d60e:	4620      	mov	r0, r4
    d610:	f00d ff78 	bl	1b504 <bt_att_chan_send_rsp>
	return 0;
    d614:	2600      	movs	r6, #0
}
    d616:	4630      	mov	r0, r6
    d618:	b00a      	add	sp, #40	; 0x28
    d61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d61e:	9b07      	ldr	r3, [sp, #28]
    d620:	695f      	ldr	r7, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d622:	2214      	movs	r2, #20
    d624:	2100      	movs	r1, #0
    d626:	4638      	mov	r0, r7
    d628:	f00c fd3e 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d62c:	4639      	mov	r1, r7
    d62e:	4808      	ldr	r0, [pc, #32]	; (d650 <att_read_group_rsp+0xa0>)
    d630:	f011 ffe6 	bl	1f600 <k_queue_append>
		net_buf_unref(data.buf);
    d634:	9807      	ldr	r0, [sp, #28]
    d636:	f00f fa29 	bl	1ca8c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    d63a:	230a      	movs	r3, #10
    d63c:	462a      	mov	r2, r5
    d63e:	2110      	movs	r1, #16
    d640:	4620      	mov	r0, r4
    d642:	f00d ffd4 	bl	1b5ee <send_err_rsp>
		return 0;
    d646:	e7e6      	b.n	d616 <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
    d648:	260e      	movs	r6, #14
    d64a:	e7e4      	b.n	d616 <att_read_group_rsp+0x66>
    d64c:	0000c921 	.word	0x0000c921
    d650:	20000728 	.word	0x20000728

0000d654 <att_read_mult_vl_req>:
{
    d654:	b570      	push	{r4, r5, r6, lr}
    d656:	b088      	sub	sp, #32
    d658:	4606      	mov	r6, r0
    d65a:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    d65c:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
    d65e:	2101      	movs	r1, #1
    d660:	4620      	mov	r0, r4
    d662:	f00f f82e 	bl	1c6c2 <bt_gatt_change_aware>
    d666:	b980      	cbnz	r0, d68a <att_read_mult_vl_req+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    d668:	3690      	adds	r6, #144	; 0x90
    d66a:	e8d6 3fef 	ldaex	r3, [r6]
    d66e:	f043 0220 	orr.w	r2, r3, #32
    d672:	e8c6 2fe1 	stlex	r1, r2, [r6]
    d676:	2900      	cmp	r1, #0
    d678:	d1f7      	bne.n	d66a <att_read_mult_vl_req+0x16>
    d67a:	f013 0f20 	tst.w	r3, #32
    d67e:	d002      	beq.n	d686 <att_read_mult_vl_req+0x32>
			return 0;
    d680:	2000      	movs	r0, #0
}
    d682:	b008      	add	sp, #32
    d684:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d686:	2012      	movs	r0, #18
    d688:	e7fb      	b.n	d682 <att_read_mult_vl_req+0x2e>
	(void)memset(&data, 0, sizeof(data));
    d68a:	2210      	movs	r2, #16
    d68c:	2100      	movs	r1, #0
    d68e:	eb0d 0002 	add.w	r0, sp, r2
    d692:	f00c fd09 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    d696:	2200      	movs	r2, #0
    d698:	2121      	movs	r1, #33	; 0x21
    d69a:	4620      	mov	r0, r4
    d69c:	f7ff ff10 	bl	d4c0 <bt_att_create_pdu>
    d6a0:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    d6a2:	2800      	cmp	r0, #0
    d6a4:	d036      	beq.n	d714 <att_read_mult_vl_req+0xc0>
	data.chan = chan;
    d6a6:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
    d6a8:	89ab      	ldrh	r3, [r5, #12]
    d6aa:	2b01      	cmp	r3, #1
    d6ac:	d92c      	bls.n	d708 <att_read_mult_vl_req+0xb4>
	return net_buf_simple_pull_le16(&buf->b);
    d6ae:	f105 0008 	add.w	r0, r5, #8
    d6b2:	f00f fa75 	bl	1cba0 <net_buf_simple_pull_le16>
    d6b6:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d6b8:	2301      	movs	r3, #1
    d6ba:	f88d 301c 	strb.w	r3, [sp, #28]
    d6be:	ab04      	add	r3, sp, #16
    d6c0:	9302      	str	r3, [sp, #8]
    d6c2:	4b15      	ldr	r3, [pc, #84]	; (d718 <att_read_mult_vl_req+0xc4>)
    d6c4:	9301      	str	r3, [sp, #4]
    d6c6:	2200      	movs	r2, #0
    d6c8:	9200      	str	r2, [sp, #0]
    d6ca:	4613      	mov	r3, r2
    d6cc:	4601      	mov	r1, r0
    d6ce:	f000 ff55 	bl	e57c <bt_gatt_foreach_attr_type>
		if (data.err) {
    d6d2:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d0e6      	beq.n	d6a8 <att_read_mult_vl_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d6da:	9b06      	ldr	r3, [sp, #24]
    d6dc:	695d      	ldr	r5, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d6de:	2214      	movs	r2, #20
    d6e0:	2100      	movs	r1, #0
    d6e2:	4628      	mov	r0, r5
    d6e4:	f00c fce0 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d6e8:	4629      	mov	r1, r5
    d6ea:	480c      	ldr	r0, [pc, #48]	; (d71c <att_read_mult_vl_req+0xc8>)
    d6ec:	f011 ff88 	bl	1f600 <k_queue_append>
			net_buf_unref(data.buf);
    d6f0:	9806      	ldr	r0, [sp, #24]
    d6f2:	f00f f9cb 	bl	1ca8c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
    d6f6:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d6fa:	4622      	mov	r2, r4
    d6fc:	2120      	movs	r1, #32
    d6fe:	4630      	mov	r0, r6
    d700:	f00d ff75 	bl	1b5ee <send_err_rsp>
			return 0;
    d704:	2000      	movs	r0, #0
    d706:	e7bc      	b.n	d682 <att_read_mult_vl_req+0x2e>
	bt_att_chan_send_rsp(chan, data.buf);
    d708:	9906      	ldr	r1, [sp, #24]
    d70a:	4630      	mov	r0, r6
    d70c:	f00d fefa 	bl	1b504 <bt_att_chan_send_rsp>
	return 0;
    d710:	2000      	movs	r0, #0
    d712:	e7b6      	b.n	d682 <att_read_mult_vl_req+0x2e>
		return BT_ATT_ERR_UNLIKELY;
    d714:	200e      	movs	r0, #14
    d716:	e7b4      	b.n	d682 <att_read_mult_vl_req+0x2e>
    d718:	0001b13b 	.word	0x0001b13b
    d71c:	20000728 	.word	0x20000728

0000d720 <att_read_mult_req>:
{
    d720:	b570      	push	{r4, r5, r6, lr}
    d722:	b088      	sub	sp, #32
    d724:	4606      	mov	r6, r0
    d726:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    d728:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
    d72a:	2101      	movs	r1, #1
    d72c:	4620      	mov	r0, r4
    d72e:	f00e ffc8 	bl	1c6c2 <bt_gatt_change_aware>
    d732:	b980      	cbnz	r0, d756 <att_read_mult_req+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    d734:	3690      	adds	r6, #144	; 0x90
    d736:	e8d6 3fef 	ldaex	r3, [r6]
    d73a:	f043 0220 	orr.w	r2, r3, #32
    d73e:	e8c6 2fe1 	stlex	r1, r2, [r6]
    d742:	2900      	cmp	r1, #0
    d744:	d1f7      	bne.n	d736 <att_read_mult_req+0x16>
    d746:	f013 0f20 	tst.w	r3, #32
    d74a:	d002      	beq.n	d752 <att_read_mult_req+0x32>
			return 0;
    d74c:	2000      	movs	r0, #0
}
    d74e:	b008      	add	sp, #32
    d750:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d752:	2012      	movs	r0, #18
    d754:	e7fb      	b.n	d74e <att_read_mult_req+0x2e>
	(void)memset(&data, 0, sizeof(data));
    d756:	2210      	movs	r2, #16
    d758:	2100      	movs	r1, #0
    d75a:	eb0d 0002 	add.w	r0, sp, r2
    d75e:	f00c fca3 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    d762:	2200      	movs	r2, #0
    d764:	210f      	movs	r1, #15
    d766:	4620      	mov	r0, r4
    d768:	f7ff feaa 	bl	d4c0 <bt_att_create_pdu>
    d76c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    d76e:	2800      	cmp	r0, #0
    d770:	d036      	beq.n	d7e0 <att_read_mult_req+0xc0>
	data.chan = chan;
    d772:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
    d774:	89ab      	ldrh	r3, [r5, #12]
    d776:	2b01      	cmp	r3, #1
    d778:	d92c      	bls.n	d7d4 <att_read_mult_req+0xb4>
    d77a:	f105 0008 	add.w	r0, r5, #8
    d77e:	f00f fa0f 	bl	1cba0 <net_buf_simple_pull_le16>
    d782:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    d784:	2301      	movs	r3, #1
    d786:	f88d 301c 	strb.w	r3, [sp, #28]
    d78a:	ab04      	add	r3, sp, #16
    d78c:	9302      	str	r3, [sp, #8]
    d78e:	4b15      	ldr	r3, [pc, #84]	; (d7e4 <att_read_mult_req+0xc4>)
    d790:	9301      	str	r3, [sp, #4]
    d792:	2200      	movs	r2, #0
    d794:	9200      	str	r2, [sp, #0]
    d796:	4613      	mov	r3, r2
    d798:	4601      	mov	r1, r0
    d79a:	f000 feef 	bl	e57c <bt_gatt_foreach_attr_type>
		if (data.err) {
    d79e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	d0e6      	beq.n	d774 <att_read_mult_req+0x54>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d7a6:	9b06      	ldr	r3, [sp, #24]
    d7a8:	695d      	ldr	r5, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d7aa:	2214      	movs	r2, #20
    d7ac:	2100      	movs	r1, #0
    d7ae:	4628      	mov	r0, r5
    d7b0:	f00c fc7a 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d7b4:	4629      	mov	r1, r5
    d7b6:	480c      	ldr	r0, [pc, #48]	; (d7e8 <att_read_mult_req+0xc8>)
    d7b8:	f011 ff22 	bl	1f600 <k_queue_append>
			net_buf_unref(data.buf);
    d7bc:	9806      	ldr	r0, [sp, #24]
    d7be:	f00f f965 	bl	1ca8c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
    d7c2:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d7c6:	4622      	mov	r2, r4
    d7c8:	210e      	movs	r1, #14
    d7ca:	4630      	mov	r0, r6
    d7cc:	f00d ff0f 	bl	1b5ee <send_err_rsp>
			return 0;
    d7d0:	2000      	movs	r0, #0
    d7d2:	e7bc      	b.n	d74e <att_read_mult_req+0x2e>
	bt_att_chan_send_rsp(chan, data.buf);
    d7d4:	9906      	ldr	r1, [sp, #24]
    d7d6:	4630      	mov	r0, r6
    d7d8:	f00d fe94 	bl	1b504 <bt_att_chan_send_rsp>
	return 0;
    d7dc:	2000      	movs	r0, #0
    d7de:	e7b6      	b.n	d74e <att_read_mult_req+0x2e>
		return BT_ATT_ERR_UNLIKELY;
    d7e0:	200e      	movs	r0, #14
    d7e2:	e7b4      	b.n	d74e <att_read_mult_req+0x2e>
    d7e4:	0001b1a1 	.word	0x0001b1a1
    d7e8:	20000728 	.word	0x20000728

0000d7ec <att_read_rsp>:
{
    d7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7f0:	b088      	sub	sp, #32
    d7f2:	4604      	mov	r4, r0
    d7f4:	4688      	mov	r8, r1
    d7f6:	4616      	mov	r6, r2
    d7f8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
    d7fa:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
    d7fc:	2101      	movs	r1, #1
    d7fe:	4638      	mov	r0, r7
    d800:	f00e ff5f 	bl	1c6c2 <bt_gatt_change_aware>
    d804:	b128      	cbz	r0, d812 <att_read_rsp+0x26>
	if (!handle) {
    d806:	b9a5      	cbnz	r5, d832 <att_read_rsp+0x46>
		return BT_ATT_ERR_INVALID_HANDLE;
    d808:	2601      	movs	r6, #1
}
    d80a:	4630      	mov	r0, r6
    d80c:	b008      	add	sp, #32
    d80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    d812:	3490      	adds	r4, #144	; 0x90
    d814:	e8d4 3fef 	ldaex	r3, [r4]
    d818:	f043 0220 	orr.w	r2, r3, #32
    d81c:	e8c4 2fe1 	stlex	r1, r2, [r4]
    d820:	2900      	cmp	r1, #0
    d822:	d1f7      	bne.n	d814 <att_read_rsp+0x28>
    d824:	f013 0f20 	tst.w	r3, #32
    d828:	d001      	beq.n	d82e <att_read_rsp+0x42>
			return 0;
    d82a:	2600      	movs	r6, #0
    d82c:	e7ed      	b.n	d80a <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    d82e:	2612      	movs	r6, #18
    d830:	e7eb      	b.n	d80a <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
    d832:	2210      	movs	r2, #16
    d834:	2100      	movs	r1, #0
    d836:	eb0d 0002 	add.w	r0, sp, r2
    d83a:	f00c fc35 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    d83e:	2200      	movs	r2, #0
    d840:	4631      	mov	r1, r6
    d842:	4638      	mov	r0, r7
    d844:	f7ff fe3c 	bl	d4c0 <bt_att_create_pdu>
    d848:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    d84a:	b388      	cbz	r0, d8b0 <att_read_rsp+0xc4>
	data.chan = chan;
    d84c:	9404      	str	r4, [sp, #16]
	data.offset = offset;
    d84e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    d852:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    d856:	2301      	movs	r3, #1
    d858:	f88d 301c 	strb.w	r3, [sp, #28]
    d85c:	ab04      	add	r3, sp, #16
    d85e:	9302      	str	r3, [sp, #8]
    d860:	4b14      	ldr	r3, [pc, #80]	; (d8b4 <att_read_rsp+0xc8>)
    d862:	9301      	str	r3, [sp, #4]
    d864:	2200      	movs	r2, #0
    d866:	9200      	str	r2, [sp, #0]
    d868:	4613      	mov	r3, r2
    d86a:	4629      	mov	r1, r5
    d86c:	4628      	mov	r0, r5
    d86e:	f000 fe85 	bl	e57c <bt_gatt_foreach_attr_type>
	if (data.err) {
    d872:	f89d 601c 	ldrb.w	r6, [sp, #28]
    d876:	b926      	cbnz	r6, d882 <att_read_rsp+0x96>
	bt_att_chan_send_rsp(chan, data.buf);
    d878:	9906      	ldr	r1, [sp, #24]
    d87a:	4620      	mov	r0, r4
    d87c:	f00d fe42 	bl	1b504 <bt_att_chan_send_rsp>
	return 0;
    d880:	e7c3      	b.n	d80a <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d882:	9b06      	ldr	r3, [sp, #24]
    d884:	695e      	ldr	r6, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d886:	2214      	movs	r2, #20
    d888:	2100      	movs	r1, #0
    d88a:	4630      	mov	r0, r6
    d88c:	f00c fc0c 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d890:	4631      	mov	r1, r6
    d892:	4809      	ldr	r0, [pc, #36]	; (d8b8 <att_read_rsp+0xcc>)
    d894:	f011 feb4 	bl	1f600 <k_queue_append>
		net_buf_unref(data.buf);
    d898:	9806      	ldr	r0, [sp, #24]
    d89a:	f00f f8f7 	bl	1ca8c <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
    d89e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    d8a2:	462a      	mov	r2, r5
    d8a4:	4641      	mov	r1, r8
    d8a6:	4620      	mov	r0, r4
    d8a8:	f00d fea1 	bl	1b5ee <send_err_rsp>
		return 0;
    d8ac:	2600      	movs	r6, #0
    d8ae:	e7ac      	b.n	d80a <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
    d8b0:	260e      	movs	r6, #14
    d8b2:	e7aa      	b.n	d80a <att_read_rsp+0x1e>
    d8b4:	0001b1a1 	.word	0x0001b1a1
    d8b8:	20000728 	.word	0x20000728

0000d8bc <att_read_type_rsp>:
{
    d8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8c0:	b08a      	sub	sp, #40	; 0x28
    d8c2:	4604      	mov	r4, r0
    d8c4:	460f      	mov	r7, r1
    d8c6:	4615      	mov	r5, r2
    d8c8:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
    d8ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    d8ce:	2218      	movs	r2, #24
    d8d0:	2100      	movs	r1, #0
    d8d2:	a804      	add	r0, sp, #16
    d8d4:	f00c fbe8 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    d8d8:	2201      	movs	r2, #1
    d8da:	2109      	movs	r1, #9
    d8dc:	4640      	mov	r0, r8
    d8de:	f7ff fdef 	bl	d4c0 <bt_att_create_pdu>
    d8e2:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    d8e4:	2800      	cmp	r0, #0
    d8e6:	d037      	beq.n	d958 <att_read_type_rsp+0x9c>
	data.chan = chan;
    d8e8:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
    d8ea:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
    d8ec:	2101      	movs	r1, #1
    d8ee:	3008      	adds	r0, #8
    d8f0:	f00f f916 	bl	1cb20 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    d8f4:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
    d8f6:	2200      	movs	r2, #0
    d8f8:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d8fa:	230a      	movs	r3, #10
    d8fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    d900:	ab04      	add	r3, sp, #16
    d902:	9302      	str	r3, [sp, #8]
    d904:	4b15      	ldr	r3, [pc, #84]	; (d95c <att_read_type_rsp+0xa0>)
    d906:	9301      	str	r3, [sp, #4]
    d908:	9200      	str	r2, [sp, #0]
    d90a:	4613      	mov	r3, r2
    d90c:	4631      	mov	r1, r6
    d90e:	4628      	mov	r0, r5
    d910:	f000 fe34 	bl	e57c <bt_gatt_foreach_attr_type>
	if (data.err) {
    d914:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    d918:	b93e      	cbnz	r6, d92a <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf);
    d91a:	9906      	ldr	r1, [sp, #24]
    d91c:	4620      	mov	r0, r4
    d91e:	f00d fdf1 	bl	1b504 <bt_att_chan_send_rsp>
}
    d922:	4630      	mov	r0, r6
    d924:	b00a      	add	sp, #40	; 0x28
    d926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d92a:	9b06      	ldr	r3, [sp, #24]
    d92c:	695e      	ldr	r6, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d92e:	2214      	movs	r2, #20
    d930:	2100      	movs	r1, #0
    d932:	4630      	mov	r0, r6
    d934:	f00c fbb8 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d938:	4631      	mov	r1, r6
    d93a:	4809      	ldr	r0, [pc, #36]	; (d960 <att_read_type_rsp+0xa4>)
    d93c:	f011 fe60 	bl	1f600 <k_queue_append>
		net_buf_unref(data.buf);
    d940:	9806      	ldr	r0, [sp, #24]
    d942:	f00f f8a3 	bl	1ca8c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    d946:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d94a:	462a      	mov	r2, r5
    d94c:	2108      	movs	r1, #8
    d94e:	4620      	mov	r0, r4
    d950:	f00d fe4d 	bl	1b5ee <send_err_rsp>
		return 0;
    d954:	2600      	movs	r6, #0
    d956:	e7e4      	b.n	d922 <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
    d958:	260e      	movs	r6, #14
    d95a:	e7e2      	b.n	d922 <att_read_type_rsp+0x66>
    d95c:	0000c9d5 	.word	0x0000c9d5
    d960:	20000728 	.word	0x20000728

0000d964 <att_find_type_rsp>:
{
    d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d968:	b08a      	sub	sp, #40	; 0x28
    d96a:	4604      	mov	r4, r0
    d96c:	460d      	mov	r5, r1
    d96e:	4616      	mov	r6, r2
    d970:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
    d972:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    d976:	2214      	movs	r2, #20
    d978:	2100      	movs	r1, #0
    d97a:	eb0d 0002 	add.w	r0, sp, r2
    d97e:	f00c fb93 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    d982:	2200      	movs	r2, #0
    d984:	2107      	movs	r1, #7
    d986:	4640      	mov	r0, r8
    d988:	f7ff fd9a 	bl	d4c0 <bt_att_create_pdu>
    d98c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
    d98e:	2800      	cmp	r0, #0
    d990:	d036      	beq.n	da00 <att_find_type_rsp+0x9c>
	data.chan = chan;
    d992:	9405      	str	r4, [sp, #20]
	data.group = NULL;
    d994:	2200      	movs	r2, #0
    d996:	9207      	str	r2, [sp, #28]
	data.value = value;
    d998:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
    d99a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    d99e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d9a2:	230a      	movs	r3, #10
    d9a4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    d9a8:	ab05      	add	r3, sp, #20
    d9aa:	9302      	str	r3, [sp, #8]
    d9ac:	4b15      	ldr	r3, [pc, #84]	; (da04 <att_find_type_rsp+0xa0>)
    d9ae:	9301      	str	r3, [sp, #4]
    d9b0:	9200      	str	r2, [sp, #0]
    d9b2:	4613      	mov	r3, r2
    d9b4:	4631      	mov	r1, r6
    d9b6:	4628      	mov	r0, r5
    d9b8:	f000 fde0 	bl	e57c <bt_gatt_foreach_attr_type>
	if (data.err) {
    d9bc:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
    d9c0:	b93e      	cbnz	r6, d9d2 <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf);
    d9c2:	9906      	ldr	r1, [sp, #24]
    d9c4:	4620      	mov	r0, r4
    d9c6:	f00d fd9d 	bl	1b504 <bt_att_chan_send_rsp>
}
    d9ca:	4630      	mov	r0, r6
    d9cc:	b00a      	add	sp, #40	; 0x28
    d9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    d9d2:	9b06      	ldr	r3, [sp, #24]
    d9d4:	695e      	ldr	r6, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    d9d6:	2214      	movs	r2, #20
    d9d8:	2100      	movs	r1, #0
    d9da:	4630      	mov	r0, r6
    d9dc:	f00c fb64 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    d9e0:	4631      	mov	r1, r6
    d9e2:	4809      	ldr	r0, [pc, #36]	; (da08 <att_find_type_rsp+0xa4>)
    d9e4:	f011 fe0c 	bl	1f600 <k_queue_append>
		net_buf_unref(data.buf);
    d9e8:	9806      	ldr	r0, [sp, #24]
    d9ea:	f00f f84f 	bl	1ca8c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    d9ee:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    d9f2:	462a      	mov	r2, r5
    d9f4:	2106      	movs	r1, #6
    d9f6:	4620      	mov	r0, r4
    d9f8:	f00d fdf9 	bl	1b5ee <send_err_rsp>
		return 0;
    d9fc:	2600      	movs	r6, #0
    d9fe:	e7e4      	b.n	d9ca <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
    da00:	260e      	movs	r6, #14
    da02:	e7e2      	b.n	d9ca <att_find_type_rsp+0x66>
    da04:	0000ca7d 	.word	0x0000ca7d
    da08:	20000728 	.word	0x20000728

0000da0c <att_find_info_rsp>:
{
    da0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da0e:	b089      	sub	sp, #36	; 0x24
    da10:	4604      	mov	r4, r0
    da12:	460f      	mov	r7, r1
    da14:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    da16:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    da18:	2210      	movs	r2, #16
    da1a:	2100      	movs	r1, #0
    da1c:	eb0d 0002 	add.w	r0, sp, r2
    da20:	f00c fb42 	bl	1a0a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    da24:	2200      	movs	r2, #0
    da26:	2105      	movs	r1, #5
    da28:	4628      	mov	r0, r5
    da2a:	f7ff fd49 	bl	d4c0 <bt_att_create_pdu>
    da2e:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
    da30:	b350      	cbz	r0, da88 <att_find_info_rsp+0x7c>
	data.chan = chan;
    da32:	9404      	str	r4, [sp, #16]
    da34:	ab04      	add	r3, sp, #16
    da36:	9302      	str	r3, [sp, #8]
    da38:	4b14      	ldr	r3, [pc, #80]	; (da8c <att_find_info_rsp+0x80>)
    da3a:	9301      	str	r3, [sp, #4]
    da3c:	2200      	movs	r2, #0
    da3e:	9200      	str	r2, [sp, #0]
    da40:	4613      	mov	r3, r2
    da42:	4631      	mov	r1, r6
    da44:	4638      	mov	r0, r7
    da46:	f000 fd99 	bl	e57c <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
    da4a:	9b06      	ldr	r3, [sp, #24]
    da4c:	b133      	cbz	r3, da5c <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
    da4e:	9905      	ldr	r1, [sp, #20]
    da50:	4620      	mov	r0, r4
    da52:	f00d fd57 	bl	1b504 <bt_att_chan_send_rsp>
	return 0;
    da56:	2000      	movs	r0, #0
}
    da58:	b009      	add	sp, #36	; 0x24
    da5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    da5c:	9b05      	ldr	r3, [sp, #20]
    da5e:	695d      	ldr	r5, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    da60:	2214      	movs	r2, #20
    da62:	2100      	movs	r1, #0
    da64:	4628      	mov	r0, r5
    da66:	f00c fb1f 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    da6a:	4629      	mov	r1, r5
    da6c:	4808      	ldr	r0, [pc, #32]	; (da90 <att_find_info_rsp+0x84>)
    da6e:	f011 fdc7 	bl	1f600 <k_queue_append>
		net_buf_unref(data.buf);
    da72:	9805      	ldr	r0, [sp, #20]
    da74:	f00f f80a 	bl	1ca8c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    da78:	230a      	movs	r3, #10
    da7a:	463a      	mov	r2, r7
    da7c:	2104      	movs	r1, #4
    da7e:	4620      	mov	r0, r4
    da80:	f00d fdb5 	bl	1b5ee <send_err_rsp>
		return 0;
    da84:	2000      	movs	r0, #0
    da86:	e7e7      	b.n	da58 <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
    da88:	200e      	movs	r0, #14
    da8a:	e7e5      	b.n	da58 <att_find_info_rsp+0x4c>
    da8c:	0001b1e9 	.word	0x0001b1e9
    da90:	20000728 	.word	0x20000728

0000da94 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    da94:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
    da96:	2400      	movs	r4, #0
    da98:	e008      	b.n	daac <bt_att_init+0x18>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    da9a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    da9e:	0093      	lsls	r3, r2, #2
    daa0:	4905      	ldr	r1, [pc, #20]	; (dab8 <bt_att_init+0x24>)
    daa2:	4419      	add	r1, r3
    daa4:	4805      	ldr	r0, [pc, #20]	; (dabc <bt_att_init+0x28>)
    daa6:	f011 fdab 	bl	1f600 <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
    daaa:	3401      	adds	r4, #1
    daac:	2c02      	cmp	r4, #2
    daae:	d9f4      	bls.n	da9a <bt_att_init+0x6>
	}

	bt_gatt_init();
    dab0:	f000 fd02 	bl	e4b8 <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    dab4:	bd10      	pop	{r4, pc}
    dab6:	bf00      	nop
    dab8:	200020c0 	.word	0x200020c0
    dabc:	20000728 	.word	0x20000728

0000dac0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    dac0:	b530      	push	{r4, r5, lr}
    dac2:	b083      	sub	sp, #12
    dac4:	4605      	mov	r5, r0
    dac6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    dac8:	2300      	movs	r3, #0
    daca:	9301      	str	r3, [sp, #4]
    dacc:	f009 fa66 	bl	16f9c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    dad0:	4b0b      	ldr	r3, [pc, #44]	; (db00 <bt_att_req_alloc+0x40>)
    dad2:	681b      	ldr	r3, [r3, #0]
    dad4:	4283      	cmp	r3, r0
    dad6:	d00e      	beq.n	daf6 <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    dad8:	462a      	mov	r2, r5
    dada:	4623      	mov	r3, r4
    dadc:	a901      	add	r1, sp, #4
    dade:	4809      	ldr	r0, [pc, #36]	; (db04 <bt_att_req_alloc+0x44>)
    dae0:	f008 fa22 	bl	15f28 <k_mem_slab_alloc>
    dae4:	b950      	cbnz	r0, dafc <bt_att_req_alloc+0x3c>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    dae6:	2210      	movs	r2, #16
    dae8:	2100      	movs	r1, #0
    daea:	9801      	ldr	r0, [sp, #4]
    daec:	f00c fadc 	bl	1a0a8 <memset>

	return req;
    daf0:	9801      	ldr	r0, [sp, #4]
}
    daf2:	b003      	add	sp, #12
    daf4:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
    daf6:	2500      	movs	r5, #0
    daf8:	462c      	mov	r4, r5
    dafa:	e7ed      	b.n	dad8 <bt_att_req_alloc+0x18>
		return NULL;
    dafc:	2000      	movs	r0, #0
    dafe:	e7f8      	b.n	daf2 <bt_att_req_alloc+0x32>
    db00:	200020ac 	.word	0x200020ac
    db04:	20000664 	.word	0x20000664

0000db08 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    db08:	b510      	push	{r4, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    db0e:	6883      	ldr	r3, [r0, #8]
    db10:	b183      	cbz	r3, db34 <bt_att_req_free+0x2c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    db12:	695c      	ldr	r4, [r3, #20]
	(void)memset(data, 0, sizeof(*data));
    db14:	2214      	movs	r2, #20
    db16:	2100      	movs	r1, #0
    db18:	4620      	mov	r0, r4
    db1a:	f00c fac5 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    db1e:	4621      	mov	r1, r4
    db20:	4807      	ldr	r0, [pc, #28]	; (db40 <bt_att_req_free+0x38>)
    db22:	f011 fd6d 	bl	1f600 <k_queue_append>
		net_buf_unref(req->buf);
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	6898      	ldr	r0, [r3, #8]
    db2a:	f00e ffaf 	bl	1ca8c <net_buf_unref>
		req->buf = NULL;
    db2e:	9b01      	ldr	r3, [sp, #4]
    db30:	2200      	movs	r2, #0
    db32:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    db34:	a901      	add	r1, sp, #4
    db36:	4803      	ldr	r0, [pc, #12]	; (db44 <bt_att_req_free+0x3c>)
    db38:	f011 fc3d 	bl	1f3b6 <k_mem_slab_free>
}
    db3c:	b002      	add	sp, #8
    db3e:	bd10      	pop	{r4, pc}
    db40:	20000728 	.word	0x20000728
    db44:	20000664 	.word	0x20000664

0000db48 <att_handle_rsp>:
{
    db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db4c:	b08a      	sub	sp, #40	; 0x28
    db4e:	4604      	mov	r4, r0
    db50:	460f      	mov	r7, r1
    db52:	4691      	mov	r9, r2
    db54:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
    db56:	30b0      	adds	r0, #176	; 0xb0
    db58:	f011 feb8 	bl	1f8cc <k_work_cancel_delayable>
	if (!chan->req) {
    db5c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    db60:	b1f8      	cbz	r0, dba2 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    db62:	4b25      	ldr	r3, [pc, #148]	; (dbf8 <att_handle_rsp+0xb0>)
    db64:	4298      	cmp	r0, r3
    db66:	d042      	beq.n	dbee <att_handle_rsp+0xa6>
	func = chan->req->func;
    db68:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    db6a:	f04f 0a00 	mov.w	sl, #0
    db6e:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
    db72:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    db76:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
    db7a:	f7ff ffc5 	bl	db08 <bt_att_req_free>
	chan->req = NULL;
    db7e:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
    db82:	6820      	ldr	r0, [r4, #0]
    db84:	f00d fbdc 	bl	1b340 <att_req_send_process>
	if (func) {
    db88:	b13d      	cbz	r5, db9a <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
    db8a:	6823      	ldr	r3, [r4, #0]
    db8c:	6818      	ldr	r0, [r3, #0]
    db8e:	f8cd 8000 	str.w	r8, [sp]
    db92:	464b      	mov	r3, r9
    db94:	463a      	mov	r2, r7
    db96:	4631      	mov	r1, r6
    db98:	47a8      	blx	r5
}
    db9a:	2000      	movs	r0, #0
    db9c:	b00a      	add	sp, #40	; 0x28
    db9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
    dba2:	4b16      	ldr	r3, [pc, #88]	; (dbfc <att_handle_rsp+0xb4>)
    dba4:	9309      	str	r3, [sp, #36]	; 0x24
    dba6:	2302      	movs	r3, #2
    dba8:	f88d 300c 	strb.w	r3, [sp, #12]
    dbac:	2500      	movs	r5, #0
    dbae:	f88d 500d 	strb.w	r5, [sp, #13]
    dbb2:	f88d 500e 	strb.w	r5, [sp, #14]
    dbb6:	f88d 500f 	strb.w	r5, [sp, #15]
    dbba:	9a03      	ldr	r2, [sp, #12]
    dbbc:	9208      	str	r2, [sp, #32]
    dbbe:	4629      	mov	r1, r5
    dbc0:	f365 0100 	bfi	r1, r5, #0, #1
    dbc4:	f365 0141 	bfi	r1, r5, #1, #1
    dbc8:	f365 0182 	bfi	r1, r5, #2, #1
    dbcc:	f365 01c5 	bfi	r1, r5, #3, #3
    dbd0:	f363 1188 	bfi	r1, r3, #6, #3
    dbd4:	2308      	movs	r3, #8
    dbd6:	f363 2152 	bfi	r1, r3, #9, #10
    dbda:	f365 41de 	bfi	r1, r5, #19, #12
    dbde:	f365 71df 	bfi	r1, r5, #31, #1
    dbe2:	462b      	mov	r3, r5
    dbe4:	aa08      	add	r2, sp, #32
    dbe6:	4806      	ldr	r0, [pc, #24]	; (dc00 <att_handle_rsp+0xb8>)
    dbe8:	f7f5 fd70 	bl	36cc <z_impl_z_log_msg_static_create>
		goto process;
    dbec:	e7c9      	b.n	db82 <att_handle_rsp+0x3a>
		chan->req = NULL;
    dbee:	2500      	movs	r5, #0
    dbf0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		goto process;
    dbf4:	e7c5      	b.n	db82 <att_handle_rsp+0x3a>
    dbf6:	bf00      	nop
    dbf8:	200020b0 	.word	0x200020b0
    dbfc:	00022658 	.word	0x00022658
    dc00:	00020520 	.word	0x00020520

0000dc04 <att_error_rsp>:
{
    dc04:	b508      	push	{r3, lr}
	rsp = (void *)buf->data;
    dc06:	688a      	ldr	r2, [r1, #8]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
    dc08:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    dc0c:	b14b      	cbz	r3, dc22 <att_error_rsp+0x1e>
    dc0e:	4908      	ldr	r1, [pc, #32]	; (dc30 <att_error_rsp+0x2c>)
    dc10:	428b      	cmp	r3, r1
    dc12:	d008      	beq.n	dc26 <att_error_rsp+0x22>
    dc14:	78d3      	ldrb	r3, [r2, #3]
    dc16:	b143      	cbz	r3, dc2a <att_error_rsp+0x26>
	return att_handle_rsp(chan, NULL, 0, err);
    dc18:	2200      	movs	r2, #0
    dc1a:	4611      	mov	r1, r2
    dc1c:	f7ff ff94 	bl	db48 <att_handle_rsp>
}
    dc20:	bd08      	pop	{r3, pc}
		err = BT_ATT_ERR_UNLIKELY;
    dc22:	230e      	movs	r3, #14
    dc24:	e7f8      	b.n	dc18 <att_error_rsp+0x14>
    dc26:	230e      	movs	r3, #14
    dc28:	e7f6      	b.n	dc18 <att_error_rsp+0x14>
    dc2a:	230e      	movs	r3, #14
    dc2c:	e7f4      	b.n	dc18 <att_error_rsp+0x14>
    dc2e:	bf00      	nop
    dc30:	200020b0 	.word	0x200020b0

0000dc34 <att_chan_detach>:
{
    dc34:	b570      	push	{r4, r5, r6, lr}
    dc36:	4606      	mov	r6, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    dc38:	4602      	mov	r2, r0
    dc3a:	f852 0be0 	ldr.w	r0, [r2], #224
    dc3e:	f100 0424 	add.w	r4, r0, #36	; 0x24
	return list->head;
    dc42:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dc44:	2100      	movs	r1, #0
    dc46:	e00b      	b.n	dc60 <att_chan_detach+0x2c>
	return node->next;
    dc48:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
	list->head = node;
    dc4c:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
    dc4e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
    dc50:	428a      	cmp	r2, r1
    dc52:	d110      	bne.n	dc76 <att_chan_detach+0x42>
	list->tail = node;
    dc54:	6063      	str	r3, [r4, #4]
}
    dc56:	e00e      	b.n	dc76 <att_chan_detach+0x42>
	list->tail = node;
    dc58:	6061      	str	r1, [r4, #4]
}
    dc5a:	e00c      	b.n	dc76 <att_chan_detach+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    dc5c:	4619      	mov	r1, r3
    dc5e:	681b      	ldr	r3, [r3, #0]
    dc60:	b1d3      	cbz	r3, dc98 <att_chan_detach+0x64>
    dc62:	429a      	cmp	r2, r3
    dc64:	d1fa      	bne.n	dc5c <att_chan_detach+0x28>
Z_GENLIST_REMOVE(slist, snode)
    dc66:	2900      	cmp	r1, #0
    dc68:	d0ee      	beq.n	dc48 <att_chan_detach+0x14>
	return node->next;
    dc6a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
	parent->next = child;
    dc6e:	600b      	str	r3, [r1, #0]
	return list->tail;
    dc70:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
    dc72:	429a      	cmp	r2, r3
    dc74:	d0f0      	beq.n	dc58 <att_chan_detach+0x24>
	parent->next = child;
    dc76:	2300      	movs	r3, #0
    dc78:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
Z_GENLIST_REMOVE(slist, snode)
    dc7c:	e00c      	b.n	dc98 <att_chan_detach+0x64>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    dc7e:	6965      	ldr	r5, [r4, #20]
	(void)memset(data, 0, sizeof(*data));
    dc80:	2214      	movs	r2, #20
    dc82:	2100      	movs	r1, #0
    dc84:	4628      	mov	r0, r5
    dc86:	f00c fa0f 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    dc8a:	4629      	mov	r1, r5
    dc8c:	480d      	ldr	r0, [pc, #52]	; (dcc4 <att_chan_detach+0x90>)
    dc8e:	f011 fcb7 	bl	1f600 <k_queue_append>
		net_buf_unref(buf);
    dc92:	4620      	mov	r0, r4
    dc94:	f00e fefa 	bl	1ca8c <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    dc98:	2200      	movs	r2, #0
    dc9a:	2300      	movs	r3, #0
    dc9c:	f106 0098 	add.w	r0, r6, #152	; 0x98
    dca0:	f00e fe68 	bl	1c974 <net_buf_get>
    dca4:	4604      	mov	r4, r0
    dca6:	2800      	cmp	r0, #0
    dca8:	d1e9      	bne.n	dc7e <att_chan_detach+0x4a>
	if (chan->req) {
    dcaa:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
    dcae:	b12b      	cbz	r3, dcbc <att_chan_detach+0x88>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    dcb0:	230e      	movs	r3, #14
    dcb2:	2200      	movs	r2, #0
    dcb4:	4611      	mov	r1, r2
    dcb6:	4630      	mov	r0, r6
    dcb8:	f7ff ff46 	bl	db48 <att_handle_rsp>
	chan->att = NULL;
    dcbc:	2300      	movs	r3, #0
    dcbe:	6033      	str	r3, [r6, #0]
}
    dcc0:	bd70      	pop	{r4, r5, r6, pc}
    dcc2:	bf00      	nop
    dcc4:	20000728 	.word	0x20000728

0000dcc8 <att_reset>:
{
    dcc8:	b530      	push	{r4, r5, lr}
    dcca:	b085      	sub	sp, #20
    dccc:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    dcce:	e00c      	b.n	dcea <att_reset+0x22>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    dcd0:	6965      	ldr	r5, [r4, #20]
	(void)memset(data, 0, sizeof(*data));
    dcd2:	2214      	movs	r2, #20
    dcd4:	2100      	movs	r1, #0
    dcd6:	4628      	mov	r0, r5
    dcd8:	f00c f9e6 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    dcdc:	4629      	mov	r1, r5
    dcde:	4818      	ldr	r0, [pc, #96]	; (dd40 <att_reset+0x78>)
    dce0:	f011 fc8e 	bl	1f600 <k_queue_append>
		net_buf_unref(buf);
    dce4:	4620      	mov	r0, r4
    dce6:	f00e fed1 	bl	1ca8c <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    dcea:	2200      	movs	r2, #0
    dcec:	2300      	movs	r3, #0
    dcee:	9803      	ldr	r0, [sp, #12]
    dcf0:	300c      	adds	r0, #12
    dcf2:	f00e fe3f 	bl	1c974 <net_buf_get>
    dcf6:	4604      	mov	r4, r0
    dcf8:	2800      	cmp	r0, #0
    dcfa:	d1e9      	bne.n	dcd0 <att_reset+0x8>
    dcfc:	e00b      	b.n	dd16 <att_reset+0x4e>
	list->tail = node;
    dcfe:	609a      	str	r2, [r3, #8]
}
    dd00:	e011      	b.n	dd26 <att_reset+0x5e>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    dd02:	6818      	ldr	r0, [r3, #0]
    dd04:	68e3      	ldr	r3, [r4, #12]
    dd06:	9300      	str	r3, [sp, #0]
    dd08:	2300      	movs	r3, #0
    dd0a:	461a      	mov	r2, r3
    dd0c:	210e      	movs	r1, #14
    dd0e:	47a8      	blx	r5
		bt_att_req_free(req);
    dd10:	4620      	mov	r0, r4
    dd12:	f7ff fef9 	bl	db08 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
    dd16:	9b03      	ldr	r3, [sp, #12]
	return list->head;
    dd18:	685c      	ldr	r4, [r3, #4]
    dd1a:	b144      	cbz	r4, dd2e <att_reset+0x66>
	return node->next;
    dd1c:	6822      	ldr	r2, [r4, #0]
	list->head = node;
    dd1e:	605a      	str	r2, [r3, #4]
	return list->tail;
    dd20:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    dd22:	42a1      	cmp	r1, r4
    dd24:	d0eb      	beq.n	dcfe <att_reset+0x36>
		if (req->func) {
    dd26:	6865      	ldr	r5, [r4, #4]
    dd28:	2d00      	cmp	r5, #0
    dd2a:	d1ea      	bne.n	dd02 <att_reset+0x3a>
    dd2c:	e7f0      	b.n	dd10 <att_reset+0x48>
	att->conn = NULL;
    dd2e:	2200      	movs	r2, #0
    dd30:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    dd32:	a903      	add	r1, sp, #12
    dd34:	4803      	ldr	r0, [pc, #12]	; (dd44 <att_reset+0x7c>)
    dd36:	f011 fb3e 	bl	1f3b6 <k_mem_slab_free>
}
    dd3a:	b005      	add	sp, #20
    dd3c:	bd30      	pop	{r4, r5, pc}
    dd3e:	bf00      	nop
    dd40:	20000728 	.word	0x20000728
    dd44:	2000062c 	.word	0x2000062c

0000dd48 <att_timeout>:
{
    dd48:	b510      	push	{r4, lr}
    dd4a:	b088      	sub	sp, #32
    dd4c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    dd4e:	4b15      	ldr	r3, [pc, #84]	; (dda4 <att_timeout+0x5c>)
    dd50:	9307      	str	r3, [sp, #28]
    dd52:	2302      	movs	r3, #2
    dd54:	f88d 3004 	strb.w	r3, [sp, #4]
    dd58:	2300      	movs	r3, #0
    dd5a:	f88d 3005 	strb.w	r3, [sp, #5]
    dd5e:	f88d 3006 	strb.w	r3, [sp, #6]
    dd62:	f88d 3007 	strb.w	r3, [sp, #7]
    dd66:	9a01      	ldr	r2, [sp, #4]
    dd68:	9206      	str	r2, [sp, #24]
    dd6a:	4619      	mov	r1, r3
    dd6c:	f363 0100 	bfi	r1, r3, #0, #1
    dd70:	f363 0141 	bfi	r1, r3, #1, #1
    dd74:	f363 0182 	bfi	r1, r3, #2, #1
    dd78:	f363 01c5 	bfi	r1, r3, #3, #3
    dd7c:	2201      	movs	r2, #1
    dd7e:	f362 1188 	bfi	r1, r2, #6, #3
    dd82:	2208      	movs	r2, #8
    dd84:	f362 2152 	bfi	r1, r2, #9, #10
    dd88:	f363 41de 	bfi	r1, r3, #19, #12
    dd8c:	f363 71df 	bfi	r1, r3, #31, #1
    dd90:	aa06      	add	r2, sp, #24
    dd92:	4805      	ldr	r0, [pc, #20]	; (dda8 <att_timeout+0x60>)
    dd94:	f7f5 fc9a 	bl	36cc <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
    dd98:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
    dd9c:	f00d fe1a 	bl	1b9d4 <bt_att_disconnected>
}
    dda0:	b008      	add	sp, #32
    dda2:	bd10      	pop	{r4, pc}
    dda4:	00022670 	.word	0x00022670
    dda8:	00020520 	.word	0x00020520

0000ddac <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
    ddac:	b508      	push	{r3, lr}
	if (chan->req != req) {
    ddae:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    ddb2:	428b      	cmp	r3, r1
    ddb4:	d001      	beq.n	ddba <bt_att_chan_req_cancel+0xe>
		return false;
    ddb6:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
    ddb8:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
    ddba:	4b04      	ldr	r3, [pc, #16]	; (ddcc <bt_att_chan_req_cancel+0x20>)
    ddbc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	bt_att_req_free(req);
    ddc0:	4608      	mov	r0, r1
    ddc2:	f7ff fea1 	bl	db08 <bt_att_req_free>
	return true;
    ddc6:	2001      	movs	r0, #1
    ddc8:	e7f6      	b.n	ddb8 <bt_att_chan_req_cancel+0xc>
    ddca:	bf00      	nop
    ddcc:	200020b0 	.word	0x200020b0

0000ddd0 <bt_att_send>:
{
    ddd0:	b538      	push	{r3, r4, r5, lr}
    ddd2:	460c      	mov	r4, r1
	att = att_get(conn);
    ddd4:	f7fe fbf8 	bl	c5c8 <att_get>
	if (!att) {
    ddd8:	b148      	cbz	r0, ddee <bt_att_send+0x1e>
    ddda:	4605      	mov	r5, r0
	net_buf_put(&att->tx_queue, buf);
    dddc:	4621      	mov	r1, r4
    ddde:	300c      	adds	r0, #12
    dde0:	f00e fe46 	bl	1ca70 <net_buf_put>
	att_send_process(att);
    dde4:	4628      	mov	r0, r5
    dde6:	f00d fb4e 	bl	1b486 <att_send_process>
	return 0;
    ddea:	2000      	movs	r0, #0
}
    ddec:	bd38      	pop	{r3, r4, r5, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    ddee:	6965      	ldr	r5, [r4, #20]
	(void)memset(data, 0, sizeof(*data));
    ddf0:	2214      	movs	r2, #20
    ddf2:	2100      	movs	r1, #0
    ddf4:	4628      	mov	r0, r5
    ddf6:	f00c f957 	bl	1a0a8 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    ddfa:	4629      	mov	r1, r5
    ddfc:	4804      	ldr	r0, [pc, #16]	; (de10 <bt_att_send+0x40>)
    ddfe:	f011 fbff 	bl	1f600 <k_queue_append>
		net_buf_unref(buf);
    de02:	4620      	mov	r0, r4
    de04:	f00e fe42 	bl	1ca8c <net_buf_unref>
		return -ENOTCONN;
    de08:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    de0c:	e7ee      	b.n	ddec <bt_att_send+0x1c>
    de0e:	bf00      	nop
    de10:	20000728 	.word	0x20000728

0000de14 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    de14:	4b0b      	ldr	r3, [pc, #44]	; (de44 <bt_gatt_service_init+0x30>)
    de16:	2201      	movs	r2, #1
    de18:	e8d3 1fef 	ldaex	r1, [r3]
    de1c:	2900      	cmp	r1, #0
    de1e:	d103      	bne.n	de28 <bt_gatt_service_init+0x14>
    de20:	e8c3 2fe0 	stlex	r0, r2, [r3]
    de24:	2800      	cmp	r0, #0
    de26:	d1f7      	bne.n	de18 <bt_gatt_service_init+0x4>
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
    de28:	d101      	bne.n	de2e <bt_gatt_service_init+0x1a>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    de2a:	4b07      	ldr	r3, [pc, #28]	; (de48 <bt_gatt_service_init+0x34>)
    de2c:	e006      	b.n	de3c <bt_gatt_service_init+0x28>
    de2e:	4770      	bx	lr
		last_static_handle += svc->attr_count;
    de30:	685a      	ldr	r2, [r3, #4]
    de32:	4906      	ldr	r1, [pc, #24]	; (de4c <bt_gatt_service_init+0x38>)
    de34:	8808      	ldrh	r0, [r1, #0]
    de36:	4402      	add	r2, r0
    de38:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    de3a:	3308      	adds	r3, #8
    de3c:	4a04      	ldr	r2, [pc, #16]	; (de50 <bt_gatt_service_init+0x3c>)
    de3e:	4293      	cmp	r3, r2
    de40:	d3f6      	bcc.n	de30 <bt_gatt_service_init+0x1c>
	}
}
    de42:	4770      	bx	lr
    de44:	2000213c 	.word	0x2000213c
    de48:	000204e0 	.word	0x000204e0
    de4c:	20002b6e 	.word	0x20002b6e
    de50:	000204f8 	.word	0x000204f8

0000de54 <find_cf_cfg>:
{
    de54:	b570      	push	{r4, r5, r6, lr}
    de56:	b082      	sub	sp, #8
    de58:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    de5a:	2400      	movs	r4, #0
    de5c:	b11c      	cbz	r4, de66 <find_cf_cfg+0x12>
	return NULL;
    de5e:	2500      	movs	r5, #0
}
    de60:	4628      	mov	r0, r5
    de62:	b002      	add	sp, #8
    de64:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    de66:	4d0f      	ldr	r5, [pc, #60]	; (dea4 <find_cf_cfg+0x50>)
    de68:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
    de6c:	b166      	cbz	r6, de88 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    de6e:	490d      	ldr	r1, [pc, #52]	; (dea4 <find_cf_cfg+0x50>)
    de70:	0123      	lsls	r3, r4, #4
    de72:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    de76:	3201      	adds	r2, #1
    de78:	5cc9      	ldrb	r1, [r1, r3]
    de7a:	4630      	mov	r0, r6
    de7c:	f00c fe21 	bl	1aac2 <bt_conn_is_peer_addr_le>
    de80:	2800      	cmp	r0, #0
    de82:	d1ed      	bne.n	de60 <find_cf_cfg+0xc>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    de84:	3401      	adds	r4, #1
    de86:	e7e9      	b.n	de5c <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    de88:	4628      	mov	r0, r5
    de8a:	2300      	movs	r3, #0
    de8c:	9300      	str	r3, [sp, #0]
    de8e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    de92:	2207      	movs	r2, #7
    de94:	4669      	mov	r1, sp
    de96:	3001      	adds	r0, #1
    de98:	f00c f8c5 	bl	1a026 <memcmp>
    de9c:	2800      	cmp	r0, #0
    de9e:	d1f1      	bne.n	de84 <find_cf_cfg+0x30>
    dea0:	e7de      	b.n	de60 <find_cf_cfg+0xc>
    dea2:	bf00      	nop
    dea4:	20002104 	.word	0x20002104

0000dea8 <find_sc_cfg>:
{
    dea8:	b570      	push	{r4, r5, r6, lr}
    deaa:	4606      	mov	r6, r0
    deac:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    deae:	2400      	movs	r4, #0
    deb0:	b10c      	cbz	r4, deb6 <find_sc_cfg+0xe>
	return NULL;
    deb2:	2000      	movs	r0, #0
}
    deb4:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
    deb6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    deba:	4a0c      	ldr	r2, [pc, #48]	; (deec <find_sc_cfg+0x44>)
    debc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    dec0:	429e      	cmp	r6, r3
    dec2:	d001      	beq.n	dec8 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    dec4:	3401      	adds	r4, #1
    dec6:	e7f3      	b.n	deb0 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    dec8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    decc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    ded0:	2207      	movs	r2, #7
    ded2:	4629      	mov	r1, r5
    ded4:	3001      	adds	r0, #1
    ded6:	f00c f8a6 	bl	1a026 <memcmp>
		if (id == sc_cfg[i].id &&
    deda:	2800      	cmp	r0, #0
    dedc:	d1f2      	bne.n	dec4 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
    dede:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dee2:	4802      	ldr	r0, [pc, #8]	; (deec <find_sc_cfg+0x44>)
    dee4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    dee8:	e7e4      	b.n	deb4 <find_sc_cfg+0xc>
    deea:	bf00      	nop
    deec:	20002118 	.word	0x20002118

0000def0 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	b082      	sub	sp, #8
    def4:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    def6:	2400      	movs	r4, #0
    def8:	b11c      	cbz	r4, df02 <gatt_sub_find+0x12>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
			return sub;
		}
	}

	return NULL;
    defa:	2500      	movs	r5, #0
}
    defc:	4628      	mov	r0, r5
    defe:	b002      	add	sp, #8
    df00:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
    df02:	4d0f      	ldr	r5, [pc, #60]	; (df40 <gatt_sub_find+0x50>)
    df04:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
    df08:	b166      	cbz	r6, df24 <gatt_sub_find+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    df0a:	490d      	ldr	r1, [pc, #52]	; (df40 <gatt_sub_find+0x50>)
    df0c:	0123      	lsls	r3, r4, #4
    df0e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    df12:	3201      	adds	r2, #1
    df14:	5cc9      	ldrb	r1, [r1, r3]
    df16:	4630      	mov	r0, r6
    df18:	f00c fdd3 	bl	1aac2 <bt_conn_is_peer_addr_le>
    df1c:	2800      	cmp	r0, #0
    df1e:	d1ed      	bne.n	defc <gatt_sub_find+0xc>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
    df20:	3401      	adds	r4, #1
    df22:	e7e9      	b.n	def8 <gatt_sub_find+0x8>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    df24:	4628      	mov	r0, r5
    df26:	2300      	movs	r3, #0
    df28:	9300      	str	r3, [sp, #0]
    df2a:	f8cd 3003 	str.w	r3, [sp, #3]
    df2e:	2207      	movs	r2, #7
    df30:	4669      	mov	r1, sp
    df32:	3001      	adds	r0, #1
    df34:	f00c f877 	bl	1a026 <memcmp>
    df38:	2800      	cmp	r0, #0
    df3a:	d1f1      	bne.n	df20 <gatt_sub_find+0x30>
    df3c:	e7de      	b.n	defc <gatt_sub_find+0xc>
    df3e:	bf00      	nop
    df40:	20002140 	.word	0x20002140

0000df44 <cf_write>:
{
    df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df48:	b088      	sub	sp, #32
    df4a:	461d      	mov	r5, r3
    df4c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
    df50:	2b01      	cmp	r3, #1
    df52:	d851      	bhi.n	dff8 <cf_write+0xb4>
    df54:	4606      	mov	r6, r0
    df56:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
    df58:	462f      	mov	r7, r5
    df5a:	442b      	add	r3, r5
    df5c:	2b01      	cmp	r3, #1
    df5e:	d84e      	bhi.n	dffe <cf_write+0xba>
	cfg = find_cf_cfg(conn);
    df60:	f7ff ff78 	bl	de54 <find_cf_cfg>
	if (!cfg) {
    df64:	4604      	mov	r4, r0
    df66:	b1e0      	cbz	r0, dfa2 <cf_write+0x5e>
	if (!cfg) {
    df68:	b1fc      	cbz	r4, dfaa <cf_write+0x66>
	if (!cf_set_value(cfg, value, len)) {
    df6a:	462a      	mov	r2, r5
    df6c:	4641      	mov	r1, r8
    df6e:	4620      	mov	r0, r4
    df70:	f00d fe24 	bl	1bbbc <cf_set_value>
    df74:	2800      	cmp	r0, #0
    df76:	d045      	beq.n	e004 <cf_write+0xc0>
	memcpy(dst, src, sizeof(*dst));
    df78:	2207      	movs	r2, #7
    df7a:	f106 0188 	add.w	r1, r6, #136	; 0x88
    df7e:	1c60      	adds	r0, r4, #1
    df80:	f00c f863 	bl	1a04a <memcpy>
	cfg->id = conn->id;
    df84:	7a33      	ldrb	r3, [r6, #8]
    df86:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    df8a:	e8d4 3fef 	ldaex	r3, [r4]
    df8e:	f043 0301 	orr.w	r3, r3, #1
    df92:	e8c4 3fe2 	stlex	r2, r3, [r4]
    df96:	2a00      	cmp	r2, #0
    df98:	d1f7      	bne.n	df8a <cf_write+0x46>
}
    df9a:	4638      	mov	r0, r7
    df9c:	b008      	add	sp, #32
    df9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
    dfa2:	f7ff ff57 	bl	de54 <find_cf_cfg>
    dfa6:	4604      	mov	r4, r0
    dfa8:	e7de      	b.n	df68 <cf_write+0x24>
		BT_WARN("No space to store Client Supported Features");
    dfaa:	4b18      	ldr	r3, [pc, #96]	; (e00c <cf_write+0xc8>)
    dfac:	9307      	str	r3, [sp, #28]
    dfae:	2202      	movs	r2, #2
    dfb0:	f88d 2004 	strb.w	r2, [sp, #4]
    dfb4:	2300      	movs	r3, #0
    dfb6:	f88d 3005 	strb.w	r3, [sp, #5]
    dfba:	f88d 3006 	strb.w	r3, [sp, #6]
    dfbe:	f88d 3007 	strb.w	r3, [sp, #7]
    dfc2:	9901      	ldr	r1, [sp, #4]
    dfc4:	9106      	str	r1, [sp, #24]
    dfc6:	4619      	mov	r1, r3
    dfc8:	f363 0100 	bfi	r1, r3, #0, #1
    dfcc:	f363 0141 	bfi	r1, r3, #1, #1
    dfd0:	f363 0182 	bfi	r1, r3, #2, #1
    dfd4:	f363 01c5 	bfi	r1, r3, #3, #3
    dfd8:	f362 1188 	bfi	r1, r2, #6, #3
    dfdc:	2208      	movs	r2, #8
    dfde:	f362 2152 	bfi	r1, r2, #9, #10
    dfe2:	f363 41de 	bfi	r1, r3, #19, #12
    dfe6:	f363 71df 	bfi	r1, r3, #31, #1
    dfea:	aa06      	add	r2, sp, #24
    dfec:	4808      	ldr	r0, [pc, #32]	; (e010 <cf_write+0xcc>)
    dfee:	f7f5 fb6d 	bl	36cc <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    dff2:	f06f 0710 	mvn.w	r7, #16
    dff6:	e7d0      	b.n	df9a <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    dff8:	f06f 0706 	mvn.w	r7, #6
    dffc:	e7cd      	b.n	df9a <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    dffe:	f06f 070c 	mvn.w	r7, #12
    e002:	e7ca      	b.n	df9a <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    e004:	f06f 0712 	mvn.w	r7, #18
    e008:	e7c7      	b.n	df9a <cf_write+0x56>
    e00a:	bf00      	nop
    e00c:	00022774 	.word	0x00022774
    e010:	00020540 	.word	0x00020540

0000e014 <sc_save>:
{
    e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e018:	b08a      	sub	sp, #40	; 0x28
    e01a:	4607      	mov	r7, r0
    e01c:	4688      	mov	r8, r1
    e01e:	4616      	mov	r6, r2
    e020:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    e022:	f7ff ff41 	bl	dea8 <find_sc_cfg>
	if (!cfg) {
    e026:	4604      	mov	r4, r0
    e028:	b178      	cbz	r0, e04a <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
    e02a:	8923      	ldrh	r3, [r4, #8]
    e02c:	b913      	cbnz	r3, e034 <sc_save+0x20>
    e02e:	8963      	ldrh	r3, [r4, #10]
    e030:	2b00      	cmp	r3, #0
    e032:	d03f      	beq.n	e0b4 <sc_save+0xa0>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
    e034:	462b      	mov	r3, r5
    e036:	4632      	mov	r2, r6
    e038:	f104 010a 	add.w	r1, r4, #10
    e03c:	f104 0008 	add.w	r0, r4, #8
    e040:	f00d fd9a 	bl	1bb78 <update_range>
}
    e044:	b00a      	add	sp, #40	; 0x28
    e046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    e04a:	9002      	str	r0, [sp, #8]
    e04c:	f8cd 000b 	str.w	r0, [sp, #11]
    e050:	a902      	add	r1, sp, #8
    e052:	f7ff ff29 	bl	dea8 <find_sc_cfg>
		if (!cfg) {
    e056:	4604      	mov	r4, r0
    e058:	b130      	cbz	r0, e068 <sc_save+0x54>
		cfg->id = id;
    e05a:	f800 7b01 	strb.w	r7, [r0], #1
    e05e:	2207      	movs	r2, #7
    e060:	4641      	mov	r1, r8
    e062:	f00b fff2 	bl	1a04a <memcpy>
    e066:	e7e0      	b.n	e02a <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
    e068:	4b14      	ldr	r3, [pc, #80]	; (e0bc <sc_save+0xa8>)
    e06a:	9309      	str	r3, [sp, #36]	; 0x24
    e06c:	2302      	movs	r3, #2
    e06e:	f88d 3004 	strb.w	r3, [sp, #4]
    e072:	2300      	movs	r3, #0
    e074:	f88d 3005 	strb.w	r3, [sp, #5]
    e078:	f88d 3006 	strb.w	r3, [sp, #6]
    e07c:	f88d 3007 	strb.w	r3, [sp, #7]
    e080:	9a01      	ldr	r2, [sp, #4]
    e082:	9208      	str	r2, [sp, #32]
    e084:	4619      	mov	r1, r3
    e086:	f363 0100 	bfi	r1, r3, #0, #1
    e08a:	f363 0141 	bfi	r1, r3, #1, #1
    e08e:	f363 0182 	bfi	r1, r3, #2, #1
    e092:	f363 01c5 	bfi	r1, r3, #3, #3
    e096:	2201      	movs	r2, #1
    e098:	f362 1188 	bfi	r1, r2, #6, #3
    e09c:	2208      	movs	r2, #8
    e09e:	f362 2152 	bfi	r1, r2, #9, #10
    e0a2:	f363 41de 	bfi	r1, r3, #19, #12
    e0a6:	f363 71df 	bfi	r1, r3, #31, #1
    e0aa:	aa08      	add	r2, sp, #32
    e0ac:	4804      	ldr	r0, [pc, #16]	; (e0c0 <sc_save+0xac>)
    e0ae:	f7f5 fb0d 	bl	36cc <z_impl_z_log_msg_static_create>
			return;
    e0b2:	e7c7      	b.n	e044 <sc_save+0x30>
		cfg->data.start = start;
    e0b4:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
    e0b6:	8165      	strh	r5, [r4, #10]
		goto done;
    e0b8:	e7c4      	b.n	e044 <sc_save+0x30>
    e0ba:	bf00      	nop
    e0bc:	000227a0 	.word	0x000227a0
    e0c0:	00020540 	.word	0x00020540

0000e0c4 <bt_gatt_attr_write_ccc>:
{
    e0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e0c8:	b089      	sub	sp, #36	; 0x24
    e0ca:	461c      	mov	r4, r3
    e0cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    e0d0:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
    e0d2:	2b00      	cmp	r3, #0
    e0d4:	d16d      	bne.n	e1b2 <bt_gatt_attr_write_ccc+0xee>
    e0d6:	4681      	mov	r9, r0
    e0d8:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
    e0da:	1e63      	subs	r3, r4, #1
    e0dc:	b29b      	uxth	r3, r3
    e0de:	2b01      	cmp	r3, #1
    e0e0:	d86a      	bhi.n	e1b8 <bt_gatt_attr_write_ccc+0xf4>
	if (len < sizeof(uint16_t)) {
    e0e2:	2c01      	cmp	r4, #1
    e0e4:	d91f      	bls.n	e126 <bt_gatt_attr_write_ccc+0x62>
    e0e6:	7853      	ldrb	r3, [r2, #1]
    e0e8:	7815      	ldrb	r5, [r2, #0]
    e0ea:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    e0ee:	4639      	mov	r1, r7
    e0f0:	4648      	mov	r0, r9
    e0f2:	f00d fe41 	bl	1bd78 <find_ccc_cfg>
	if (!cfg) {
    e0f6:	4680      	mov	r8, r0
    e0f8:	b1b8      	cbz	r0, e12a <bt_gatt_attr_write_ccc+0x66>
	if (ccc->cfg_write) {
    e0fa:	693b      	ldr	r3, [r7, #16]
    e0fc:	b143      	cbz	r3, e110 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    e0fe:	462a      	mov	r2, r5
    e100:	4631      	mov	r1, r6
    e102:	4648      	mov	r0, r9
    e104:	4798      	blx	r3
		if (write < 0) {
    e106:	2800      	cmp	r0, #0
    e108:	db0a      	blt.n	e120 <bt_gatt_attr_write_ccc+0x5c>
		if (write != sizeof(value) && write != 1) {
    e10a:	3801      	subs	r0, #1
    e10c:	2801      	cmp	r0, #1
    e10e:	d856      	bhi.n	e1be <bt_gatt_attr_write_ccc+0xfa>
	cfg->value = value;
    e110:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
    e114:	897b      	ldrh	r3, [r7, #10]
    e116:	429d      	cmp	r5, r3
    e118:	d142      	bne.n	e1a0 <bt_gatt_attr_write_ccc+0xdc>
	if (!value) {
    e11a:	2d00      	cmp	r5, #0
    e11c:	d045      	beq.n	e1aa <bt_gatt_attr_write_ccc+0xe6>
	return len;
    e11e:	4620      	mov	r0, r4
}
    e120:	b009      	add	sp, #36	; 0x24
    e122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
    e126:	7815      	ldrb	r5, [r2, #0]
    e128:	e7e1      	b.n	e0ee <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
    e12a:	b90d      	cbnz	r5, e130 <bt_gatt_attr_write_ccc+0x6c>
			return len;
    e12c:	4620      	mov	r0, r4
    e12e:	e7f7      	b.n	e120 <bt_gatt_attr_write_ccc+0x5c>
		cfg = find_ccc_cfg(NULL, ccc);
    e130:	4639      	mov	r1, r7
    e132:	2000      	movs	r0, #0
    e134:	f00d fe20 	bl	1bd78 <find_ccc_cfg>
		if (!cfg) {
    e138:	4680      	mov	r8, r0
    e13a:	b150      	cbz	r0, e152 <bt_gatt_attr_write_ccc+0x8e>
    e13c:	2207      	movs	r2, #7
    e13e:	f109 0188 	add.w	r1, r9, #136	; 0x88
    e142:	3001      	adds	r0, #1
    e144:	f00b ff81 	bl	1a04a <memcpy>
		cfg->id = conn->id;
    e148:	f899 3008 	ldrb.w	r3, [r9, #8]
    e14c:	f888 3000 	strb.w	r3, [r8]
    e150:	e7d3      	b.n	e0fa <bt_gatt_attr_write_ccc+0x36>
			BT_WARN("No space to store CCC cfg");
    e152:	4b1c      	ldr	r3, [pc, #112]	; (e1c4 <bt_gatt_attr_write_ccc+0x100>)
    e154:	9307      	str	r3, [sp, #28]
    e156:	2202      	movs	r2, #2
    e158:	f88d 2004 	strb.w	r2, [sp, #4]
    e15c:	2300      	movs	r3, #0
    e15e:	f88d 3005 	strb.w	r3, [sp, #5]
    e162:	f88d 3006 	strb.w	r3, [sp, #6]
    e166:	f88d 3007 	strb.w	r3, [sp, #7]
    e16a:	9901      	ldr	r1, [sp, #4]
    e16c:	9106      	str	r1, [sp, #24]
    e16e:	4619      	mov	r1, r3
    e170:	f363 0100 	bfi	r1, r3, #0, #1
    e174:	f363 0141 	bfi	r1, r3, #1, #1
    e178:	f363 0182 	bfi	r1, r3, #2, #1
    e17c:	f363 01c5 	bfi	r1, r3, #3, #3
    e180:	f362 1188 	bfi	r1, r2, #6, #3
    e184:	2208      	movs	r2, #8
    e186:	f362 2152 	bfi	r1, r2, #9, #10
    e18a:	f363 41de 	bfi	r1, r3, #19, #12
    e18e:	f363 71df 	bfi	r1, r3, #31, #1
    e192:	aa06      	add	r2, sp, #24
    e194:	480c      	ldr	r0, [pc, #48]	; (e1c8 <bt_gatt_attr_write_ccc+0x104>)
    e196:	f7f5 fa99 	bl	36cc <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    e19a:	f06f 0010 	mvn.w	r0, #16
    e19e:	e7bf      	b.n	e120 <bt_gatt_attr_write_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
    e1a0:	4639      	mov	r1, r7
    e1a2:	4630      	mov	r0, r6
    e1a4:	f00d fd45 	bl	1bc32 <gatt_ccc_changed>
    e1a8:	e7b7      	b.n	e11a <bt_gatt_attr_write_ccc+0x56>
		clear_ccc_cfg(cfg);
    e1aa:	4640      	mov	r0, r8
    e1ac:	f00d fe10 	bl	1bdd0 <clear_ccc_cfg>
    e1b0:	e7b5      	b.n	e11e <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e1b2:	f06f 0006 	mvn.w	r0, #6
    e1b6:	e7b3      	b.n	e120 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    e1b8:	f06f 000c 	mvn.w	r0, #12
    e1bc:	e7b0      	b.n	e120 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    e1be:	f06f 000d 	mvn.w	r0, #13
    e1c2:	e7ad      	b.n	e120 <bt_gatt_attr_write_ccc+0x5c>
    e1c4:	000227c0 	.word	0x000227c0
    e1c8:	00020540 	.word	0x00020540

0000e1cc <sc_clear>:
{
    e1cc:	b5b0      	push	{r4, r5, r7, lr}
    e1ce:	b082      	sub	sp, #8
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e1d4:	f100 0588 	add.w	r5, r0, #136	; 0x88
    e1d8:	4629      	mov	r1, r5
    e1da:	7a00      	ldrb	r0, [r0, #8]
    e1dc:	f00c f949 	bl	1a472 <bt_addr_le_is_bonded>
    e1e0:	2800      	cmp	r0, #0
    e1e2:	d042      	beq.n	e26a <sc_clear+0x9e>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    e1e4:	4629      	mov	r1, r5
    e1e6:	7a20      	ldrb	r0, [r4, #8]
    e1e8:	f00d fe4b 	bl	1be82 <bt_gatt_clear_sc>
		if (err) {
    e1ec:	4604      	mov	r4, r0
    e1ee:	2800      	cmp	r0, #0
    e1f0:	d042      	beq.n	e278 <sc_clear+0xac>
			BT_ERR("Failed to clear SC %d", err);
    e1f2:	466d      	mov	r5, sp
    e1f4:	b088      	sub	sp, #32
    e1f6:	466b      	mov	r3, sp
    e1f8:	f113 0210 	adds.w	r2, r3, #16
    e1fc:	d02f      	beq.n	e25e <sc_clear+0x92>
    e1fe:	210c      	movs	r1, #12
    e200:	b11a      	cbz	r2, e20a <sc_clear+0x3e>
    e202:	2904      	cmp	r1, #4
    e204:	dd01      	ble.n	e20a <sc_clear+0x3e>
    e206:	481e      	ldr	r0, [pc, #120]	; (e280 <sc_clear+0xb4>)
    e208:	6158      	str	r0, [r3, #20]
    e20a:	b112      	cbz	r2, e212 <sc_clear+0x46>
    e20c:	2908      	cmp	r1, #8
    e20e:	dd00      	ble.n	e212 <sc_clear+0x46>
    e210:	619c      	str	r4, [r3, #24]
    e212:	290b      	cmp	r1, #11
    e214:	dd26      	ble.n	e264 <sc_clear+0x98>
    e216:	240c      	movs	r4, #12
    e218:	b13a      	cbz	r2, e22a <sc_clear+0x5e>
    e21a:	2103      	movs	r1, #3
    e21c:	7139      	strb	r1, [r7, #4]
    e21e:	2100      	movs	r1, #0
    e220:	7179      	strb	r1, [r7, #5]
    e222:	71b9      	strb	r1, [r7, #6]
    e224:	71f9      	strb	r1, [r7, #7]
    e226:	6878      	ldr	r0, [r7, #4]
    e228:	6118      	str	r0, [r3, #16]
    e22a:	2100      	movs	r1, #0
    e22c:	f36f 0100 	bfc	r1, #0, #1
    e230:	f36f 0141 	bfc	r1, #1, #1
    e234:	f36f 0182 	bfc	r1, #2, #1
    e238:	f36f 01c5 	bfc	r1, #3, #3
    e23c:	2301      	movs	r3, #1
    e23e:	f363 1188 	bfi	r1, r3, #6, #3
    e242:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    e246:	f364 2152 	bfi	r1, r4, #9, #10
    e24a:	f36f 41de 	bfc	r1, #19, #12
    e24e:	f36f 71df 	bfc	r1, #31, #1
    e252:	2300      	movs	r3, #0
    e254:	480b      	ldr	r0, [pc, #44]	; (e284 <sc_clear+0xb8>)
    e256:	f7f5 fa39 	bl	36cc <z_impl_z_log_msg_static_create>
    e25a:	46ad      	mov	sp, r5
    e25c:	e00c      	b.n	e278 <sc_clear+0xac>
    e25e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e262:	e7cd      	b.n	e200 <sc_clear+0x34>
    e264:	f06f 041b 	mvn.w	r4, #27
    e268:	e7d6      	b.n	e218 <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e26a:	4629      	mov	r1, r5
    e26c:	7a20      	ldrb	r0, [r4, #8]
    e26e:	f7ff fe1b 	bl	dea8 <find_sc_cfg>
		if (cfg) {
    e272:	b108      	cbz	r0, e278 <sc_clear+0xac>
			clear_sc_cfg(cfg);
    e274:	f00d fdff 	bl	1be76 <clear_sc_cfg>
}
    e278:	3708      	adds	r7, #8
    e27a:	46bd      	mov	sp, r7
    e27c:	bdb0      	pop	{r4, r5, r7, pc}
    e27e:	bf00      	nop
    e280:	000227dc 	.word	0x000227dc
    e284:	00020540 	.word	0x00020540

0000e288 <sc_indicate_rsp>:
{
    e288:	b510      	push	{r4, lr}
    e28a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e28c:	4b16      	ldr	r3, [pc, #88]	; (e2e8 <sc_indicate_rsp+0x60>)
    e28e:	e8d3 2fef 	ldaex	r2, [r3]
    e292:	f022 0202 	bic.w	r2, r2, #2
    e296:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e29a:	2900      	cmp	r1, #0
    e29c:	d1f7      	bne.n	e28e <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e29e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    e2a2:	f013 0f01 	tst.w	r3, #1
    e2a6:	d104      	bne.n	e2b2 <sc_indicate_rsp+0x2a>
	if (bt_att_fixed_chan_only(conn)) {
    e2a8:	4620      	mov	r0, r4
    e2aa:	f00d fc31 	bl	1bb10 <bt_att_fixed_chan_only>
    e2ae:	b930      	cbnz	r0, e2be <sc_indicate_rsp+0x36>
}
    e2b0:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
    e2b2:	2200      	movs	r2, #0
    e2b4:	2300      	movs	r3, #0
    e2b6:	480d      	ldr	r0, [pc, #52]	; (e2ec <sc_indicate_rsp+0x64>)
    e2b8:	f008 fa8e 	bl	167d8 <k_work_reschedule>
    e2bc:	e7f4      	b.n	e2a8 <sc_indicate_rsp+0x20>
		cfg = find_cf_cfg(conn);
    e2be:	4620      	mov	r0, r4
    e2c0:	f7ff fdc8 	bl	de54 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    e2c4:	4603      	mov	r3, r0
    e2c6:	2800      	cmp	r0, #0
    e2c8:	d0f2      	beq.n	e2b0 <sc_indicate_rsp+0x28>
    e2ca:	7a02      	ldrb	r2, [r0, #8]
    e2cc:	f012 0f01 	tst.w	r2, #1
    e2d0:	d0ee      	beq.n	e2b0 <sc_indicate_rsp+0x28>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    e2d2:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e2d4:	e8d3 2fef 	ldaex	r2, [r3]
    e2d8:	f042 0201 	orr.w	r2, r2, #1
    e2dc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e2e0:	2900      	cmp	r1, #0
    e2e2:	d0e5      	beq.n	e2b0 <sc_indicate_rsp+0x28>
    e2e4:	e7f6      	b.n	e2d4 <sc_indicate_rsp+0x4c>
    e2e6:	bf00      	nop
    e2e8:	20001628 	.word	0x20001628
    e2ec:	200015f8 	.word	0x200015f8

0000e2f0 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, uint8_t err,
			       const void *pdu, uint16_t length,
			       void *user_data)
{
    e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2f2:	b089      	sub	sp, #36	; 0x24
    e2f4:	4606      	mov	r6, r0
    e2f6:	460d      	mov	r5, r1
    e2f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
    e2fa:	f104 0314 	add.w	r3, r4, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e2fe:	e8d3 2fef 	ldaex	r2, [r3]
    e302:	f022 0204 	bic.w	r2, r2, #4
    e306:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e30a:	2900      	cmp	r1, #0
    e30c:	d1f7      	bne.n	e2fe <gatt_write_ccc_rsp+0xe>

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    e30e:	b975      	cbnz	r5, e32e <gatt_write_ccc_rsp+0x3e>
			if (node == &params->node) {
				gatt_sub_remove(conn, sub, tmp, params);
				break;
			}
		}
	} else if (!params->value) {
    e310:	8a23      	ldrh	r3, [r4, #16]
    e312:	b923      	cbnz	r3, e31e <gatt_write_ccc_rsp+0x2e>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    e314:	6827      	ldr	r7, [r4, #0]
    e316:	461a      	mov	r2, r3
    e318:	4621      	mov	r1, r4
    e31a:	4630      	mov	r0, r6
    e31c:	47b8      	blx	r7
	}

	if (params->subscribe) {
    e31e:	6863      	ldr	r3, [r4, #4]
    e320:	b31b      	cbz	r3, e36a <gatt_write_ccc_rsp+0x7a>
		params->subscribe(conn, err, params);
    e322:	4622      	mov	r2, r4
    e324:	4629      	mov	r1, r5
    e326:	4630      	mov	r0, r6
    e328:	4798      	blx	r3
	} else if (params->write) {
		/* TODO: Remove after deprecation */
		BT_WARN("write callback is deprecated, use subscribe cb instead");
		params->write(conn, err, NULL);
	}
}
    e32a:	b009      	add	sp, #36	; 0x24
    e32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
    e32e:	4630      	mov	r0, r6
    e330:	f7ff fdde 	bl	def0 <gatt_sub_find>
		if (!sub) {
    e334:	4601      	mov	r1, r0
    e336:	2800      	cmp	r0, #0
    e338:	d0f7      	beq.n	e32a <gatt_write_ccc_rsp+0x3a>
	return list->head;
    e33a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
    e33c:	b10b      	cbz	r3, e342 <gatt_write_ccc_rsp+0x52>
	return node->next;
    e33e:	681a      	ldr	r2, [r3, #0]
    e340:	e009      	b.n	e356 <gatt_write_ccc_rsp+0x66>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e342:	461a      	mov	r2, r3
    e344:	e007      	b.n	e356 <gatt_write_ccc_rsp+0x66>
				gatt_sub_remove(conn, sub, tmp, params);
    e346:	4623      	mov	r3, r4
    e348:	4630      	mov	r0, r6
    e34a:	f00d fd5f 	bl	1be0c <gatt_sub_remove>
				break;
    e34e:	e7e6      	b.n	e31e <gatt_write_ccc_rsp+0x2e>
    e350:	4610      	mov	r0, r2
    e352:	4613      	mov	r3, r2
    e354:	4602      	mov	r2, r0
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
    e356:	2b00      	cmp	r3, #0
    e358:	d0e1      	beq.n	e31e <gatt_write_ccc_rsp+0x2e>
			if (node == &params->node) {
    e35a:	f104 0c18 	add.w	ip, r4, #24
    e35e:	459c      	cmp	ip, r3
    e360:	d0f1      	beq.n	e346 <gatt_write_ccc_rsp+0x56>
    e362:	2a00      	cmp	r2, #0
    e364:	d0f4      	beq.n	e350 <gatt_write_ccc_rsp+0x60>
	return node->next;
    e366:	6810      	ldr	r0, [r2, #0]
    e368:	e7f3      	b.n	e352 <gatt_write_ccc_rsp+0x62>
	} else if (params->write) {
    e36a:	68a3      	ldr	r3, [r4, #8]
    e36c:	2b00      	cmp	r3, #0
    e36e:	d0dc      	beq.n	e32a <gatt_write_ccc_rsp+0x3a>
		BT_WARN("write callback is deprecated, use subscribe cb instead");
    e370:	4b15      	ldr	r3, [pc, #84]	; (e3c8 <gatt_write_ccc_rsp+0xd8>)
    e372:	9307      	str	r3, [sp, #28]
    e374:	2302      	movs	r3, #2
    e376:	f88d 3004 	strb.w	r3, [sp, #4]
    e37a:	2700      	movs	r7, #0
    e37c:	f88d 7005 	strb.w	r7, [sp, #5]
    e380:	f88d 7006 	strb.w	r7, [sp, #6]
    e384:	f88d 7007 	strb.w	r7, [sp, #7]
    e388:	9a01      	ldr	r2, [sp, #4]
    e38a:	9206      	str	r2, [sp, #24]
    e38c:	4639      	mov	r1, r7
    e38e:	f367 0100 	bfi	r1, r7, #0, #1
    e392:	f367 0141 	bfi	r1, r7, #1, #1
    e396:	f367 0182 	bfi	r1, r7, #2, #1
    e39a:	f367 01c5 	bfi	r1, r7, #3, #3
    e39e:	f363 1188 	bfi	r1, r3, #6, #3
    e3a2:	2308      	movs	r3, #8
    e3a4:	f363 2152 	bfi	r1, r3, #9, #10
    e3a8:	f367 41de 	bfi	r1, r7, #19, #12
    e3ac:	f367 71df 	bfi	r1, r7, #31, #1
    e3b0:	463b      	mov	r3, r7
    e3b2:	aa06      	add	r2, sp, #24
    e3b4:	4805      	ldr	r0, [pc, #20]	; (e3cc <gatt_write_ccc_rsp+0xdc>)
    e3b6:	f7f5 f989 	bl	36cc <z_impl_z_log_msg_static_create>
		params->write(conn, err, NULL);
    e3ba:	68a3      	ldr	r3, [r4, #8]
    e3bc:	463a      	mov	r2, r7
    e3be:	4629      	mov	r1, r5
    e3c0:	4630      	mov	r0, r6
    e3c2:	4798      	blx	r3
    e3c4:	e7b1      	b.n	e32a <gatt_write_ccc_rsp+0x3a>
    e3c6:	bf00      	nop
    e3c8:	000227f4 	.word	0x000227f4
    e3cc:	00020540 	.word	0x00020540

0000e3d0 <disconnected_cb>:
{
    e3d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e3d4:	6881      	ldr	r1, [r0, #8]
    e3d6:	4b2c      	ldr	r3, [pc, #176]	; (e488 <disconnected_cb+0xb8>)
    e3d8:	4299      	cmp	r1, r3
    e3da:	d002      	beq.n	e3e2 <disconnected_cb+0x12>
}
    e3dc:	2001      	movs	r0, #1
    e3de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3e2:	4604      	mov	r4, r0
    e3e4:	4616      	mov	r6, r2
	ccc = attr->user_data;
    e3e6:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
    e3e8:	897b      	ldrh	r3, [r7, #10]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d0f6      	beq.n	e3dc <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e3ee:	2500      	movs	r5, #0
	value_used = false;
    e3f0:	46aa      	mov	sl, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e3f2:	b15d      	cbz	r5, e40c <disconnected_cb+0x3c>
	if (!value_used) {
    e3f4:	f1ba 0f00 	cmp.w	sl, #0
    e3f8:	d1f0      	bne.n	e3dc <disconnected_cb+0xc>
		ccc->value = 0U;
    e3fa:	2300      	movs	r3, #0
    e3fc:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
    e3fe:	68fb      	ldr	r3, [r7, #12]
    e400:	2b00      	cmp	r3, #0
    e402:	d0eb      	beq.n	e3dc <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
    e404:	2100      	movs	r1, #0
    e406:	4620      	mov	r0, r4
    e408:	4798      	blx	r3
    e40a:	e7e7      	b.n	e3dc <disconnected_cb+0xc>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
    e40c:	eb05 0885 	add.w	r8, r5, r5, lsl #2
    e410:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
    e414:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    e418:	b1cb      	cbz	r3, e44e <disconnected_cb+0x7e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e41a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    e41e:	f108 0901 	add.w	r9, r8, #1
    e422:	464a      	mov	r2, r9
    e424:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
    e428:	4630      	mov	r0, r6
    e42a:	f00c fb4a 	bl	1aac2 <bt_conn_is_peer_addr_le>
    e42e:	b998      	cbnz	r0, e458 <disconnected_cb+0x88>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    e430:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    e434:	4649      	mov	r1, r9
    e436:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
    e43a:	f7fd fb4b 	bl	bad4 <bt_conn_lookup_addr_le>
			if (tmp) {
    e43e:	4603      	mov	r3, r0
    e440:	b128      	cbz	r0, e44e <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
    e442:	7a82      	ldrb	r2, [r0, #10]
    e444:	2a07      	cmp	r2, #7
    e446:	d004      	beq.n	e452 <disconnected_cb+0x82>
				bt_conn_unref(tmp);
    e448:	4618      	mov	r0, r3
    e44a:	f00c fad8 	bl	1a9fe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    e44e:	3501      	adds	r5, #1
    e450:	e7cf      	b.n	e3f2 <disconnected_cb+0x22>
					value_used = true;
    e452:	f04f 0a01 	mov.w	sl, #1
    e456:	e7f7      	b.n	e448 <disconnected_cb+0x78>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e458:	f106 0b88 	add.w	fp, r6, #136	; 0x88
    e45c:	4659      	mov	r1, fp
    e45e:	7a30      	ldrb	r0, [r6, #8]
    e460:	f00c f807 	bl	1a472 <bt_addr_le_is_bonded>
    e464:	b950      	cbnz	r0, e47c <disconnected_cb+0xac>
				if (ccc == &sc_ccc) {
    e466:	4b09      	ldr	r3, [pc, #36]	; (e48c <disconnected_cb+0xbc>)
    e468:	429f      	cmp	r7, r3
    e46a:	d003      	beq.n	e474 <disconnected_cb+0xa4>
				clear_ccc_cfg(cfg);
    e46c:	4640      	mov	r0, r8
    e46e:	f00d fcaf 	bl	1bdd0 <clear_ccc_cfg>
    e472:	e7ec      	b.n	e44e <disconnected_cb+0x7e>
					sc_clear(conn);
    e474:	4630      	mov	r0, r6
    e476:	f7ff fea9 	bl	e1cc <sc_clear>
    e47a:	e7f7      	b.n	e46c <disconnected_cb+0x9c>
    e47c:	2207      	movs	r2, #7
    e47e:	4659      	mov	r1, fp
    e480:	4648      	mov	r0, r9
    e482:	f00b fde2 	bl	1a04a <memcpy>
}
    e486:	e7e2      	b.n	e44e <disconnected_cb+0x7e>
    e488:	0000e0c5 	.word	0x0000e0c5
    e48c:	200003cc 	.word	0x200003cc

0000e490 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    e490:	b500      	push	{lr}
    e492:	b085      	sub	sp, #20
    e494:	460a      	mov	r2, r1
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    e496:	2301      	movs	r3, #1
    e498:	9302      	str	r3, [sp, #8]
    e49a:	2304      	movs	r3, #4
    e49c:	9301      	str	r3, [sp, #4]
    e49e:	2312      	movs	r3, #18
    e4a0:	9300      	str	r3, [sp, #0]
    e4a2:	4b03      	ldr	r3, [pc, #12]	; (e4b0 <gatt_write_ccc+0x20>)
    e4a4:	4903      	ldr	r1, [pc, #12]	; (e4b4 <gatt_write_ccc+0x24>)
    e4a6:	f00d fd69 	bl	1bf7c <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len,
			     BT_ATT_CHAN_OPT(params));
}
    e4aa:	b005      	add	sp, #20
    e4ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e4b0:	0001c001 	.word	0x0001c001
    e4b4:	0000e2f1 	.word	0x0000e2f1

0000e4b8 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e4b8:	4b11      	ldr	r3, [pc, #68]	; (e500 <bt_gatt_init+0x48>)
    e4ba:	2201      	movs	r2, #1
    e4bc:	e8d3 1fef 	ldaex	r1, [r3]
    e4c0:	2900      	cmp	r1, #0
    e4c2:	d103      	bne.n	e4cc <bt_gatt_init+0x14>
    e4c4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    e4c8:	2800      	cmp	r0, #0
    e4ca:	d1f7      	bne.n	e4bc <bt_gatt_init+0x4>
	if (!atomic_cas(&init, 0, 1)) {
    e4cc:	d116      	bne.n	e4fc <bt_gatt_init+0x44>
{
    e4ce:	b510      	push	{r4, lr}
	bt_gatt_service_init();
    e4d0:	f7ff fca0 	bl	de14 <bt_gatt_service_init>
	list->head = NULL;
    e4d4:	4b0b      	ldr	r3, [pc, #44]	; (e504 <bt_gatt_init+0x4c>)
    e4d6:	2200      	movs	r2, #0
    e4d8:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    e4da:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
    e4dc:	4c0a      	ldr	r4, [pc, #40]	; (e508 <bt_gatt_init+0x50>)
    e4de:	490b      	ldr	r1, [pc, #44]	; (e50c <bt_gatt_init+0x54>)
    e4e0:	4620      	mov	r0, r4
    e4e2:	f011 f997 	bl	1f814 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    e4e6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e4ea:	2300      	movs	r3, #0
    e4ec:	4620      	mov	r0, r4
    e4ee:	f7f8 fc6d 	bl	6dcc <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
    e4f2:	4907      	ldr	r1, [pc, #28]	; (e510 <bt_gatt_init+0x58>)
    e4f4:	4807      	ldr	r0, [pc, #28]	; (e514 <bt_gatt_init+0x5c>)
    e4f6:	f011 f98d 	bl	1f814 <k_work_init_delayable>
}
    e4fa:	bd10      	pop	{r4, pc}
    e4fc:	4770      	bx	lr
    e4fe:	bf00      	nop
    e500:	20002114 	.word	0x20002114
    e504:	200020fc 	.word	0x200020fc
    e508:	20001580 	.word	0x20001580
    e50c:	0001c391 	.word	0x0001c391
    e510:	0000eaa1 	.word	0x0000eaa1
    e514:	200015f8 	.word	0x200015f8

0000e518 <bt_gatt_attr_get_handle>:
	if (!attr) {
    e518:	b328      	cbz	r0, e566 <bt_gatt_attr_get_handle+0x4e>
    e51a:	4684      	mov	ip, r0
	if (attr->handle) {
    e51c:	8a00      	ldrh	r0, [r0, #16]
    e51e:	bb38      	cbnz	r0, e570 <bt_gatt_attr_get_handle+0x58>
{
    e520:	b470      	push	{r4, r5, r6}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e522:	4d14      	ldr	r5, [pc, #80]	; (e574 <bt_gatt_attr_get_handle+0x5c>)
	uint16_t handle = 1;
    e524:	2201      	movs	r2, #1
    e526:	e003      	b.n	e530 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
    e528:	686b      	ldr	r3, [r5, #4]
    e52a:	441a      	add	r2, r3
    e52c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e52e:	3508      	adds	r5, #8
    e530:	4b11      	ldr	r3, [pc, #68]	; (e578 <bt_gatt_attr_get_handle+0x60>)
    e532:	429d      	cmp	r5, r3
    e534:	d21a      	bcs.n	e56c <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
    e536:	682c      	ldr	r4, [r5, #0]
    e538:	4564      	cmp	r4, ip
    e53a:	d8f5      	bhi.n	e528 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    e53c:	686e      	ldr	r6, [r5, #4]
    e53e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    e542:	009b      	lsls	r3, r3, #2
    e544:	3b14      	subs	r3, #20
    e546:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
    e548:	4563      	cmp	r3, ip
    e54a:	d3ed      	bcc.n	e528 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    e54c:	2300      	movs	r3, #0
    e54e:	429e      	cmp	r6, r3
    e550:	d9ed      	bls.n	e52e <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
    e552:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    e556:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    e55a:	4561      	cmp	r1, ip
    e55c:	d005      	beq.n	e56a <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    e55e:	3301      	adds	r3, #1
    e560:	3201      	adds	r2, #1
    e562:	b292      	uxth	r2, r2
    e564:	e7f3      	b.n	e54e <bt_gatt_attr_get_handle+0x36>
		return 0;
    e566:	2000      	movs	r0, #0
    e568:	4770      	bx	lr
				return handle;
    e56a:	4610      	mov	r0, r2
}
    e56c:	bc70      	pop	{r4, r5, r6}
    e56e:	4770      	bx	lr
    e570:	4770      	bx	lr
    e572:	bf00      	nop
    e574:	000204e0 	.word	0x000204e0
    e578:	000204f8 	.word	0x000204f8

0000e57c <bt_gatt_foreach_attr_type>:
{
    e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e580:	b087      	sub	sp, #28
    e582:	4607      	mov	r7, r0
    e584:	468a      	mov	sl, r1
    e586:	4690      	mov	r8, r2
    e588:	4699      	mov	r9, r3
    e58a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
	if (!num_matches) {
    e58e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    e592:	b91b      	cbnz	r3, e59c <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
    e594:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e598:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	if (start_handle <= last_static_handle) {
    e59c:	4b18      	ldr	r3, [pc, #96]	; (e600 <bt_gatt_foreach_attr_type+0x84>)
    e59e:	881b      	ldrh	r3, [r3, #0]
    e5a0:	42bb      	cmp	r3, r7
    e5a2:	d22a      	bcs.n	e5fa <bt_gatt_foreach_attr_type+0x7e>
}
    e5a4:	b007      	add	sp, #28
    e5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
    e5aa:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e5ac:	3608      	adds	r6, #8
    e5ae:	4b15      	ldr	r3, [pc, #84]	; (e604 <bt_gatt_foreach_attr_type+0x88>)
    e5b0:	429e      	cmp	r6, r3
    e5b2:	d2f7      	bcs.n	e5a4 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
    e5b4:	6873      	ldr	r3, [r6, #4]
    e5b6:	18e2      	adds	r2, r4, r3
    e5b8:	42ba      	cmp	r2, r7
    e5ba:	d3f6      	bcc.n	e5aa <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e5bc:	2500      	movs	r5, #0
    e5be:	6873      	ldr	r3, [r6, #4]
    e5c0:	42ab      	cmp	r3, r5
    e5c2:	d9f3      	bls.n	e5ac <bt_gatt_foreach_attr_type+0x30>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    e5c4:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    e5c8:	f8cd b010 	str.w	fp, [sp, #16]
    e5cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e5ce:	9303      	str	r3, [sp, #12]
    e5d0:	ab10      	add	r3, sp, #64	; 0x40
    e5d2:	9302      	str	r3, [sp, #8]
    e5d4:	f8cd 9004 	str.w	r9, [sp, #4]
    e5d8:	f8cd 8000 	str.w	r8, [sp]
    e5dc:	4653      	mov	r3, sl
    e5de:	463a      	mov	r2, r7
    e5e0:	4621      	mov	r1, r4
    e5e2:	f8d6 c000 	ldr.w	ip, [r6]
    e5e6:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    e5ea:	f00d fc8e 	bl	1bf0a <gatt_foreach_iter>
    e5ee:	2800      	cmp	r0, #0
    e5f0:	d0d8      	beq.n	e5a4 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    e5f2:	3501      	adds	r5, #1
    e5f4:	3401      	adds	r4, #1
    e5f6:	b2a4      	uxth	r4, r4
    e5f8:	e7e1      	b.n	e5be <bt_gatt_foreach_attr_type+0x42>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    e5fa:	4e03      	ldr	r6, [pc, #12]	; (e608 <bt_gatt_foreach_attr_type+0x8c>)
		uint16_t handle = 1;
    e5fc:	2401      	movs	r4, #1
    e5fe:	e7d6      	b.n	e5ae <bt_gatt_foreach_attr_type+0x32>
    e600:	20002b6e 	.word	0x20002b6e
    e604:	000204f8 	.word	0x000204f8
    e608:	000204e0 	.word	0x000204e0

0000e60c <db_hash_gen>:
{
    e60c:	b510      	push	{r4, lr}
    e60e:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
    e610:	2300      	movs	r3, #0
    e612:	934a      	str	r3, [sp, #296]	; 0x128
    e614:	934b      	str	r3, [sp, #300]	; 0x12c
    e616:	934c      	str	r3, [sp, #304]	; 0x130
    e618:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    e61a:	aa1e      	add	r2, sp, #120	; 0x78
    e61c:	a94a      	add	r1, sp, #296	; 0x128
    e61e:	a806      	add	r0, sp, #24
    e620:	f00b f8dd 	bl	197de <tc_cmac_setup>
    e624:	b190      	cbz	r0, e64c <db_hash_gen+0x40>
    e626:	ac06      	add	r4, sp, #24
    e628:	9402      	str	r4, [sp, #8]
    e62a:	4b3a      	ldr	r3, [pc, #232]	; (e714 <db_hash_gen+0x108>)
    e62c:	9301      	str	r3, [sp, #4]
    e62e:	2200      	movs	r2, #0
    e630:	9200      	str	r2, [sp, #0]
    e632:	4613      	mov	r3, r2
    e634:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e638:	2001      	movs	r0, #1
    e63a:	f7ff ff9f 	bl	e57c <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    e63e:	4621      	mov	r1, r4
    e640:	4835      	ldr	r0, [pc, #212]	; (e718 <db_hash_gen+0x10c>)
    e642:	f00b f969 	bl	19918 <tc_cmac_final>
    e646:	b338      	cbz	r0, e698 <db_hash_gen+0x8c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    e648:	2300      	movs	r3, #0
    e64a:	e055      	b.n	e6f8 <db_hash_gen+0xec>
		BT_ERR("Unable to setup AES CMAC");
    e64c:	4b33      	ldr	r3, [pc, #204]	; (e71c <db_hash_gen+0x110>)
    e64e:	9359      	str	r3, [sp, #356]	; 0x164
    e650:	2302      	movs	r3, #2
    e652:	f88d 3014 	strb.w	r3, [sp, #20]
    e656:	2300      	movs	r3, #0
    e658:	f88d 3015 	strb.w	r3, [sp, #21]
    e65c:	f88d 3016 	strb.w	r3, [sp, #22]
    e660:	f88d 3017 	strb.w	r3, [sp, #23]
    e664:	9a05      	ldr	r2, [sp, #20]
    e666:	9258      	str	r2, [sp, #352]	; 0x160
    e668:	4619      	mov	r1, r3
    e66a:	f363 0100 	bfi	r1, r3, #0, #1
    e66e:	f363 0141 	bfi	r1, r3, #1, #1
    e672:	f363 0182 	bfi	r1, r3, #2, #1
    e676:	f363 01c5 	bfi	r1, r3, #3, #3
    e67a:	2201      	movs	r2, #1
    e67c:	f362 1188 	bfi	r1, r2, #6, #3
    e680:	2208      	movs	r2, #8
    e682:	f362 2152 	bfi	r1, r2, #9, #10
    e686:	f363 41de 	bfi	r1, r3, #19, #12
    e68a:	f363 71df 	bfi	r1, r3, #31, #1
    e68e:	aa58      	add	r2, sp, #352	; 0x160
    e690:	4823      	ldr	r0, [pc, #140]	; (e720 <db_hash_gen+0x114>)
    e692:	f7f5 f81b 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
    e696:	e03a      	b.n	e70e <db_hash_gen+0x102>
		BT_ERR("Unable to calculate hash");
    e698:	4b22      	ldr	r3, [pc, #136]	; (e724 <db_hash_gen+0x118>)
    e69a:	9353      	str	r3, [sp, #332]	; 0x14c
    e69c:	2302      	movs	r3, #2
    e69e:	f88d 3014 	strb.w	r3, [sp, #20]
    e6a2:	2300      	movs	r3, #0
    e6a4:	f88d 3015 	strb.w	r3, [sp, #21]
    e6a8:	f88d 3016 	strb.w	r3, [sp, #22]
    e6ac:	f88d 3017 	strb.w	r3, [sp, #23]
    e6b0:	9a05      	ldr	r2, [sp, #20]
    e6b2:	9252      	str	r2, [sp, #328]	; 0x148
    e6b4:	4619      	mov	r1, r3
    e6b6:	f363 0100 	bfi	r1, r3, #0, #1
    e6ba:	f363 0141 	bfi	r1, r3, #1, #1
    e6be:	f363 0182 	bfi	r1, r3, #2, #1
    e6c2:	f363 01c5 	bfi	r1, r3, #3, #3
    e6c6:	2201      	movs	r2, #1
    e6c8:	f362 1188 	bfi	r1, r2, #6, #3
    e6cc:	2208      	movs	r2, #8
    e6ce:	f362 2152 	bfi	r1, r2, #9, #10
    e6d2:	f363 41de 	bfi	r1, r3, #19, #12
    e6d6:	f363 71df 	bfi	r1, r3, #31, #1
    e6da:	aa52      	add	r2, sp, #328	; 0x148
    e6dc:	4810      	ldr	r0, [pc, #64]	; (e720 <db_hash_gen+0x114>)
    e6de:	f7f4 fff5 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
    e6e2:	e014      	b.n	e70e <db_hash_gen+0x102>
		uint8_t tmp = ((uint8_t *)buf)[i];
    e6e4:	4a0c      	ldr	r2, [pc, #48]	; (e718 <db_hash_gen+0x10c>)
    e6e6:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    e6e8:	f1c3 010f 	rsb	r1, r3, #15
    e6ec:	f812 c001 	ldrb.w	ip, [r2, r1]
    e6f0:	f802 c003 	strb.w	ip, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
    e6f4:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    e6f6:	3301      	adds	r3, #1
    e6f8:	2b07      	cmp	r3, #7
    e6fa:	d9f3      	bls.n	e6e4 <db_hash_gen+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e6fc:	4b0a      	ldr	r3, [pc, #40]	; (e728 <db_hash_gen+0x11c>)
    e6fe:	e8d3 2fef 	ldaex	r2, [r3]
    e702:	f042 0204 	orr.w	r2, r2, #4
    e706:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e70a:	2900      	cmp	r1, #0
    e70c:	d1f7      	bne.n	e6fe <db_hash_gen+0xf2>
}
    e70e:	b05a      	add	sp, #360	; 0x168
    e710:	bd10      	pop	{r4, pc}
    e712:	bf00      	nop
    e714:	0001bc9b 	.word	0x0001bc9b
    e718:	20001570 	.word	0x20001570
    e71c:	0002282c 	.word	0x0002282c
    e720:	00020540 	.word	0x00020540
    e724:	00022848 	.word	0x00022848
    e728:	20001628 	.word	0x20001628

0000e72c <db_hash_read>:
{
    e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e72e:	b085      	sub	sp, #20
    e730:	4604      	mov	r4, r0
    e732:	460d      	mov	r5, r1
    e734:	4616      	mov	r6, r2
    e736:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    e738:	481b      	ldr	r0, [pc, #108]	; (e7a8 <db_hash_read+0x7c>)
    e73a:	f100 0140 	add.w	r1, r0, #64	; 0x40
    e73e:	3010      	adds	r0, #16
    e740:	f011 f8d4 	bl	1f8ec <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e744:	4b19      	ldr	r3, [pc, #100]	; (e7ac <db_hash_read+0x80>)
    e746:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    e74a:	f013 0f04 	tst.w	r3, #4
    e74e:	d017      	beq.n	e780 <db_hash_read+0x54>
	cfg = find_cf_cfg(conn);
    e750:	4620      	mov	r0, r4
    e752:	f7ff fb7f 	bl	de54 <find_cf_cfg>
	if (cfg &&
    e756:	4603      	mov	r3, r0
    e758:	b118      	cbz	r0, e762 <db_hash_read+0x36>
	    CF_ROBUST_CACHING(cfg) &&
    e75a:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
    e75c:	f012 0f01 	tst.w	r2, #1
    e760:	d112      	bne.n	e788 <db_hash_read+0x5c>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    e762:	2310      	movs	r3, #16
    e764:	9302      	str	r3, [sp, #8]
    e766:	4b10      	ldr	r3, [pc, #64]	; (e7a8 <db_hash_read+0x7c>)
    e768:	9301      	str	r3, [sp, #4]
    e76a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    e76e:	9300      	str	r3, [sp, #0]
    e770:	463b      	mov	r3, r7
    e772:	4632      	mov	r2, r6
    e774:	4629      	mov	r1, r5
    e776:	4620      	mov	r0, r4
    e778:	f00d fcf7 	bl	1c16a <bt_gatt_attr_read>
}
    e77c:	b005      	add	sp, #20
    e77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
    e780:	2001      	movs	r0, #1
    e782:	f7ff ff43 	bl	e60c <db_hash_gen>
    e786:	e7e3      	b.n	e750 <db_hash_read+0x24>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    e788:	330c      	adds	r3, #12
    e78a:	e8d3 2faf 	lda	r2, [r3]
	    CF_ROBUST_CACHING(cfg) &&
    e78e:	f012 0f01 	tst.w	r2, #1
    e792:	d1e6      	bne.n	e762 <db_hash_read+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e794:	e8d3 2fef 	ldaex	r2, [r3]
    e798:	f042 0202 	orr.w	r2, r2, #2
    e79c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e7a0:	2900      	cmp	r1, #0
    e7a2:	d0de      	beq.n	e762 <db_hash_read+0x36>
    e7a4:	e7f6      	b.n	e794 <db_hash_read+0x68>
    e7a6:	bf00      	nop
    e7a8:	20001570 	.word	0x20001570
    e7ac:	20001628 	.word	0x20001628

0000e7b0 <gatt_find_by_uuid>:
{
    e7b0:	b510      	push	{r4, lr}
    e7b2:	b084      	sub	sp, #16
    e7b4:	4604      	mov	r4, r0
    e7b6:	460a      	mov	r2, r1
	found->attr = NULL;
    e7b8:	2300      	movs	r3, #0
    e7ba:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e7bc:	9002      	str	r0, [sp, #8]
    e7be:	4907      	ldr	r1, [pc, #28]	; (e7dc <gatt_find_by_uuid+0x2c>)
    e7c0:	9101      	str	r1, [sp, #4]
    e7c2:	2101      	movs	r1, #1
    e7c4:	9100      	str	r1, [sp, #0]
    e7c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e7ca:	8880      	ldrh	r0, [r0, #4]
    e7cc:	f7ff fed6 	bl	e57c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    e7d0:	6820      	ldr	r0, [r4, #0]
}
    e7d2:	3800      	subs	r0, #0
    e7d4:	bf18      	it	ne
    e7d6:	2001      	movne	r0, #1
    e7d8:	b004      	add	sp, #16
    e7da:	bd10      	pop	{r4, pc}
    e7dc:	0001bc85 	.word	0x0001bc85

0000e7e0 <bt_gatt_attr_next>:
{
    e7e0:	b510      	push	{r4, lr}
    e7e2:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
    e7e4:	2400      	movs	r4, #0
    e7e6:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
    e7e8:	f7ff fe96 	bl	e518 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
    e7ec:	3001      	adds	r0, #1
    e7ee:	b280      	uxth	r0, r0
    e7f0:	ab05      	add	r3, sp, #20
    e7f2:	9302      	str	r3, [sp, #8]
    e7f4:	4b05      	ldr	r3, [pc, #20]	; (e80c <bt_gatt_attr_next+0x2c>)
    e7f6:	9301      	str	r3, [sp, #4]
    e7f8:	9400      	str	r4, [sp, #0]
    e7fa:	4623      	mov	r3, r4
    e7fc:	4622      	mov	r2, r4
    e7fe:	4601      	mov	r1, r0
    e800:	f7ff febc 	bl	e57c <bt_gatt_foreach_attr_type>
}
    e804:	9805      	ldr	r0, [sp, #20]
    e806:	b006      	add	sp, #24
    e808:	bd10      	pop	{r4, pc}
    e80a:	bf00      	nop
    e80c:	0001bc2d 	.word	0x0001bc2d

0000e810 <gatt_indicate>:
{
    e810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e814:	b096      	sub	sp, #88	; 0x58
    e816:	4605      	mov	r5, r0
    e818:	460f      	mov	r7, r1
    e81a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    e81c:	2294      	movs	r2, #148	; 0x94
    e81e:	6861      	ldr	r1, [r4, #4]
    e820:	f00d fdbb 	bl	1c39a <bt_gatt_check_perm>
    e824:	2800      	cmp	r0, #0
    e826:	d13f      	bne.n	e8a8 <gatt_indicate+0x98>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
    e828:	2202      	movs	r2, #2
    e82a:	6861      	ldr	r1, [r4, #4]
    e82c:	4628      	mov	r0, r5
    e82e:	f00d fde6 	bl	1c3fe <bt_gatt_is_subscribed>
    e832:	2800      	cmp	r0, #0
    e834:	d05f      	beq.n	e8f6 <gatt_indicate+0xe6>
	len = sizeof(*ind) + params->len;
    e836:	8aa6      	ldrh	r6, [r4, #20]
    e838:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
    e83a:	9600      	str	r6, [sp, #0]
    e83c:	231d      	movs	r3, #29
    e83e:	2200      	movs	r2, #0
    e840:	4621      	mov	r1, r4
    e842:	4859      	ldr	r0, [pc, #356]	; (e9a8 <gatt_indicate+0x198>)
    e844:	f00d fb8c 	bl	1bf60 <gatt_req_alloc>
	if (!req) {
    e848:	4681      	mov	r9, r0
    e84a:	2800      	cmp	r0, #0
    e84c:	f000 80a8 	beq.w	e9a0 <gatt_indicate+0x190>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    e850:	4632      	mov	r2, r6
    e852:	211d      	movs	r1, #29
    e854:	4628      	mov	r0, r5
    e856:	f7fe fe33 	bl	d4c0 <bt_att_create_pdu>
	if (!buf) {
    e85a:	4680      	mov	r8, r0
    e85c:	2800      	cmp	r0, #0
    e85e:	d071      	beq.n	e944 <gatt_indicate+0x134>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
    e860:	2301      	movs	r3, #1
    e862:	2200      	movs	r2, #0
    e864:	4611      	mov	r1, r2
    e866:	f00d f980 	bl	1bb6a <bt_att_set_tx_meta_data>
    e86a:	f108 0a08 	add.w	sl, r8, #8
    e86e:	2102      	movs	r1, #2
    e870:	4650      	mov	r0, sl
    e872:	f00e f955 	bl	1cb20 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    e876:	4606      	mov	r6, r0
    e878:	f826 7b02 	strh.w	r7, [r6], #2
    e87c:	8aa1      	ldrh	r1, [r4, #20]
    e87e:	4650      	mov	r0, sl
    e880:	f00e f94e 	bl	1cb20 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    e884:	8aa2      	ldrh	r2, [r4, #20]
    e886:	6921      	ldr	r1, [r4, #16]
    e888:	4630      	mov	r0, r6
    e88a:	f00b fbde 	bl	1a04a <memcpy>
	req->buf = buf;
    e88e:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
    e892:	4649      	mov	r1, r9
    e894:	4628      	mov	r0, r5
    e896:	f00d f8af 	bl	1b9f8 <bt_att_req_send>
	if (err) {
    e89a:	4604      	mov	r4, r0
    e89c:	2800      	cmp	r0, #0
    e89e:	d17b      	bne.n	e998 <gatt_indicate+0x188>
}
    e8a0:	4620      	mov	r0, r4
    e8a2:	b016      	add	sp, #88	; 0x58
    e8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
    e8a8:	4b40      	ldr	r3, [pc, #256]	; (e9ac <gatt_indicate+0x19c>)
    e8aa:	9315      	str	r3, [sp, #84]	; 0x54
    e8ac:	2202      	movs	r2, #2
    e8ae:	f88d 200c 	strb.w	r2, [sp, #12]
    e8b2:	2300      	movs	r3, #0
    e8b4:	f88d 300d 	strb.w	r3, [sp, #13]
    e8b8:	f88d 300e 	strb.w	r3, [sp, #14]
    e8bc:	f88d 300f 	strb.w	r3, [sp, #15]
    e8c0:	9903      	ldr	r1, [sp, #12]
    e8c2:	9114      	str	r1, [sp, #80]	; 0x50
    e8c4:	4619      	mov	r1, r3
    e8c6:	f363 0100 	bfi	r1, r3, #0, #1
    e8ca:	f363 0141 	bfi	r1, r3, #1, #1
    e8ce:	f363 0182 	bfi	r1, r3, #2, #1
    e8d2:	f363 01c5 	bfi	r1, r3, #3, #3
    e8d6:	f362 1188 	bfi	r1, r2, #6, #3
    e8da:	2208      	movs	r2, #8
    e8dc:	f362 2152 	bfi	r1, r2, #9, #10
    e8e0:	f363 41de 	bfi	r1, r3, #19, #12
    e8e4:	f363 71df 	bfi	r1, r3, #31, #1
    e8e8:	aa14      	add	r2, sp, #80	; 0x50
    e8ea:	4831      	ldr	r0, [pc, #196]	; (e9b0 <gatt_indicate+0x1a0>)
    e8ec:	f7f4 feee 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EPERM;
    e8f0:	f04f 34ff 	mov.w	r4, #4294967295
    e8f4:	e7d4      	b.n	e8a0 <gatt_indicate+0x90>
			BT_WARN("Device is not subscribed to characteristic");
    e8f6:	4b2f      	ldr	r3, [pc, #188]	; (e9b4 <gatt_indicate+0x1a4>)
    e8f8:	930f      	str	r3, [sp, #60]	; 0x3c
    e8fa:	2202      	movs	r2, #2
    e8fc:	f88d 200c 	strb.w	r2, [sp, #12]
    e900:	2300      	movs	r3, #0
    e902:	f88d 300d 	strb.w	r3, [sp, #13]
    e906:	f88d 300e 	strb.w	r3, [sp, #14]
    e90a:	f88d 300f 	strb.w	r3, [sp, #15]
    e90e:	9903      	ldr	r1, [sp, #12]
    e910:	910e      	str	r1, [sp, #56]	; 0x38
    e912:	4619      	mov	r1, r3
    e914:	f363 0100 	bfi	r1, r3, #0, #1
    e918:	f363 0141 	bfi	r1, r3, #1, #1
    e91c:	f363 0182 	bfi	r1, r3, #2, #1
    e920:	f363 01c5 	bfi	r1, r3, #3, #3
    e924:	f362 1188 	bfi	r1, r2, #6, #3
    e928:	2208      	movs	r2, #8
    e92a:	f362 2152 	bfi	r1, r2, #9, #10
    e92e:	f363 41de 	bfi	r1, r3, #19, #12
    e932:	f363 71df 	bfi	r1, r3, #31, #1
    e936:	aa0e      	add	r2, sp, #56	; 0x38
    e938:	481d      	ldr	r0, [pc, #116]	; (e9b0 <gatt_indicate+0x1a0>)
    e93a:	f7f4 fec7 	bl	36cc <z_impl_z_log_msg_static_create>
			return -EINVAL;
    e93e:	f06f 0415 	mvn.w	r4, #21
    e942:	e7ad      	b.n	e8a0 <gatt_indicate+0x90>
		BT_WARN("No buffer available to send indication");
    e944:	4b1c      	ldr	r3, [pc, #112]	; (e9b8 <gatt_indicate+0x1a8>)
    e946:	9309      	str	r3, [sp, #36]	; 0x24
    e948:	2202      	movs	r2, #2
    e94a:	f88d 200c 	strb.w	r2, [sp, #12]
    e94e:	2300      	movs	r3, #0
    e950:	f88d 300d 	strb.w	r3, [sp, #13]
    e954:	f88d 300e 	strb.w	r3, [sp, #14]
    e958:	f88d 300f 	strb.w	r3, [sp, #15]
    e95c:	9903      	ldr	r1, [sp, #12]
    e95e:	9108      	str	r1, [sp, #32]
    e960:	4619      	mov	r1, r3
    e962:	f363 0100 	bfi	r1, r3, #0, #1
    e966:	f363 0141 	bfi	r1, r3, #1, #1
    e96a:	f363 0182 	bfi	r1, r3, #2, #1
    e96e:	f363 01c5 	bfi	r1, r3, #3, #3
    e972:	f362 1188 	bfi	r1, r2, #6, #3
    e976:	2208      	movs	r2, #8
    e978:	f362 2152 	bfi	r1, r2, #9, #10
    e97c:	f363 41de 	bfi	r1, r3, #19, #12
    e980:	f363 71df 	bfi	r1, r3, #31, #1
    e984:	aa08      	add	r2, sp, #32
    e986:	480a      	ldr	r0, [pc, #40]	; (e9b0 <gatt_indicate+0x1a0>)
    e988:	f7f4 fea0 	bl	36cc <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
    e98c:	4648      	mov	r0, r9
    e98e:	f7ff f8bb 	bl	db08 <bt_att_req_free>
		return -ENOMEM;
    e992:	f06f 040b 	mvn.w	r4, #11
    e996:	e783      	b.n	e8a0 <gatt_indicate+0x90>
		bt_att_req_free(req);
    e998:	4648      	mov	r0, r9
    e99a:	f7ff f8b5 	bl	db08 <bt_att_req_free>
    e99e:	e77f      	b.n	e8a0 <gatt_indicate+0x90>
		return -ENOMEM;
    e9a0:	f06f 040b 	mvn.w	r4, #11
    e9a4:	e77c      	b.n	e8a0 <gatt_indicate+0x90>
    e9a6:	bf00      	nop
    e9a8:	0001bc63 	.word	0x0001bc63
    e9ac:	00022864 	.word	0x00022864
    e9b0:	00020540 	.word	0x00020540
    e9b4:	0002287c 	.word	0x0002287c
    e9b8:	000228a8 	.word	0x000228a8

0000e9bc <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e9bc:	4b36      	ldr	r3, [pc, #216]	; (ea98 <bt_gatt_indicate+0xdc>)
    e9be:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e9c2:	f013 0f04 	tst.w	r3, #4
    e9c6:	d05e      	beq.n	ea86 <bt_gatt_indicate+0xca>
{
    e9c8:	b530      	push	{r4, r5, lr}
    e9ca:	b08d      	sub	sp, #52	; 0x34
    e9cc:	4605      	mov	r5, r0
    e9ce:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e9d0:	b110      	cbz	r0, e9d8 <bt_gatt_indicate+0x1c>
    e9d2:	7a83      	ldrb	r3, [r0, #10]
    e9d4:	2b07      	cmp	r3, #7
    e9d6:	d159      	bne.n	ea8c <bt_gatt_indicate+0xd0>
	data.attr = params->attr;
    e9d8:	6860      	ldr	r0, [r4, #4]
    e9da:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    e9dc:	f7ff fd9c 	bl	e518 <bt_gatt_attr_get_handle>
    e9e0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    e9e4:	6821      	ldr	r1, [r4, #0]
    e9e6:	b341      	cbz	r1, ea3a <bt_gatt_indicate+0x7e>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    e9e8:	a805      	add	r0, sp, #20
    e9ea:	f7ff fee1 	bl	e7b0 <gatt_find_by_uuid>
    e9ee:	2800      	cmp	r0, #0
    e9f0:	d04f      	beq.n	ea92 <bt_gatt_indicate+0xd6>
		params->attr = data.attr;
    e9f2:	9b05      	ldr	r3, [sp, #20]
    e9f4:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    e9f6:	9b05      	ldr	r3, [sp, #20]
    e9f8:	6818      	ldr	r0, [r3, #0]
    e9fa:	2300      	movs	r3, #0
    e9fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    ea00:	f642 0303 	movw	r3, #10243	; 0x2803
    ea04:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    ea08:	a90b      	add	r1, sp, #44	; 0x2c
    ea0a:	f00b fb8a 	bl	1a122 <bt_uuid_cmp>
    ea0e:	b948      	cbnz	r0, ea24 <bt_gatt_indicate+0x68>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    ea10:	9805      	ldr	r0, [sp, #20]
    ea12:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    ea14:	799b      	ldrb	r3, [r3, #6]
    ea16:	f013 0f20 	tst.w	r3, #32
    ea1a:	d013      	beq.n	ea44 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    ea1c:	f00d fc69 	bl	1c2f2 <bt_gatt_attr_value_handle>
    ea20:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
    ea24:	b18d      	cbz	r5, ea4a <bt_gatt_indicate+0x8e>
		params->_ref = 1;
    ea26:	2301      	movs	r3, #1
    ea28:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
    ea2a:	4622      	mov	r2, r4
    ea2c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    ea30:	4628      	mov	r0, r5
    ea32:	f7ff feed 	bl	e810 <gatt_indicate>
}
    ea36:	b00d      	add	sp, #52	; 0x34
    ea38:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
    ea3a:	2800      	cmp	r0, #0
    ea3c:	d1db      	bne.n	e9f6 <bt_gatt_indicate+0x3a>
			return -ENOENT;
    ea3e:	f06f 0001 	mvn.w	r0, #1
    ea42:	e7f8      	b.n	ea36 <bt_gatt_indicate+0x7a>
			return -EINVAL;
    ea44:	f06f 0015 	mvn.w	r0, #21
    ea48:	e7f5      	b.n	ea36 <bt_gatt_indicate+0x7a>
	data.err = -ENOTCONN;
    ea4a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    ea4e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    ea50:	2302      	movs	r3, #2
    ea52:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
    ea56:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
    ea58:	2300      	movs	r3, #0
    ea5a:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    ea5c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    ea60:	f642 1202 	movw	r2, #10498	; 0x2902
    ea64:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    ea68:	aa05      	add	r2, sp, #20
    ea6a:	9202      	str	r2, [sp, #8]
    ea6c:	4a0b      	ldr	r2, [pc, #44]	; (ea9c <bt_gatt_indicate+0xe0>)
    ea6e:	9201      	str	r2, [sp, #4]
    ea70:	2201      	movs	r2, #1
    ea72:	9200      	str	r2, [sp, #0]
    ea74:	aa0a      	add	r2, sp, #40	; 0x28
    ea76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea7a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    ea7e:	f7ff fd7d 	bl	e57c <bt_gatt_foreach_attr_type>
	return data.err;
    ea82:	9807      	ldr	r0, [sp, #28]
    ea84:	e7d7      	b.n	ea36 <bt_gatt_indicate+0x7a>
		return -EAGAIN;
    ea86:	f06f 000a 	mvn.w	r0, #10
}
    ea8a:	4770      	bx	lr
		return -ENOTCONN;
    ea8c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    ea90:	e7d1      	b.n	ea36 <bt_gatt_indicate+0x7a>
			return -ENOENT;
    ea92:	f06f 0001 	mvn.w	r0, #1
    ea96:	e7ce      	b.n	ea36 <bt_gatt_indicate+0x7a>
    ea98:	200000cc 	.word	0x200000cc
    ea9c:	0000ef19 	.word	0x0000ef19

0000eaa0 <sc_process>:
{
    eaa0:	b510      	push	{r4, lr}
    eaa2:	b082      	sub	sp, #8
    eaa4:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    eaa6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    eaaa:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    eaae:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    eab2:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    eab6:	f1a0 0120 	sub.w	r1, r0, #32
    eaba:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    eabe:	e8d4 2fef 	ldaex	r2, [r4]
    eac2:	f022 0201 	bic.w	r2, r2, #1
    eac6:	e8c4 2fe0 	stlex	r0, r2, [r4]
    eaca:	2800      	cmp	r0, #0
    eacc:	d1f7      	bne.n	eabe <sc_process+0x1e>
	sc->start = 0U;
    eace:	2000      	movs	r0, #0
    ead0:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    ead4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
    ead8:	4a0c      	ldr	r2, [pc, #48]	; (eb0c <sc_process+0x6c>)
    eada:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    eade:	4a0c      	ldr	r2, [pc, #48]	; (eb10 <sc_process+0x70>)
    eae0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    eae4:	aa01      	add	r2, sp, #4
    eae6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    eaea:	2204      	movs	r2, #4
    eaec:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    eaf0:	f7ff ff64 	bl	e9bc <bt_gatt_indicate>
    eaf4:	b108      	cbz	r0, eafa <sc_process+0x5a>
}
    eaf6:	b002      	add	sp, #8
    eaf8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    eafa:	e8d4 3fef 	ldaex	r3, [r4]
    eafe:	f043 0302 	orr.w	r3, r3, #2
    eb02:	e8c4 3fe2 	stlex	r2, r3, [r4]
    eb06:	2a00      	cmp	r2, #0
    eb08:	d0f5      	beq.n	eaf6 <sc_process+0x56>
    eb0a:	e7f6      	b.n	eafa <sc_process+0x5a>
    eb0c:	00022984 	.word	0x00022984
    eb10:	0000e289 	.word	0x0000e289

0000eb14 <sc_restore>:
{
    eb14:	b510      	push	{r4, lr}
    eb16:	b088      	sub	sp, #32
    eb18:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    eb1a:	f100 0188 	add.w	r1, r0, #136	; 0x88
    eb1e:	7a00      	ldrb	r0, [r0, #8]
    eb20:	f7ff f9c2 	bl	dea8 <find_sc_cfg>
	if (!cfg) {
    eb24:	b1f0      	cbz	r0, eb64 <sc_restore+0x50>
    eb26:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
    eb28:	8902      	ldrh	r2, [r0, #8]
    eb2a:	b90a      	cbnz	r2, eb30 <sc_restore+0x1c>
    eb2c:	8941      	ldrh	r1, [r0, #10]
    eb2e:	b1c9      	cbz	r1, eb64 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    eb30:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    eb34:	895b      	ldrh	r3, [r3, #10]
    eb36:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    eb3a:	4620      	mov	r0, r4
    eb3c:	f7fc fefa 	bl	b934 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    eb40:	491c      	ldr	r1, [pc, #112]	; (ebb4 <sc_restore+0xa0>)
    eb42:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    eb46:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    eb4a:	4a1b      	ldr	r2, [pc, #108]	; (ebb8 <sc_restore+0xa4>)
    eb4c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    eb4e:	4a1b      	ldr	r2, [pc, #108]	; (ebbc <sc_restore+0xa8>)
    eb50:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    eb52:	aa01      	add	r2, sp, #4
    eb54:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    eb56:	2204      	movs	r2, #4
    eb58:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    eb5a:	4619      	mov	r1, r3
    eb5c:	4620      	mov	r0, r4
    eb5e:	f7ff ff2d 	bl	e9bc <bt_gatt_indicate>
    eb62:	b908      	cbnz	r0, eb68 <sc_restore+0x54>
}
    eb64:	b008      	add	sp, #32
    eb66:	bd10      	pop	{r4, pc}
		BT_ERR("SC restore indication failed");
    eb68:	4b15      	ldr	r3, [pc, #84]	; (ebc0 <sc_restore+0xac>)
    eb6a:	9307      	str	r3, [sp, #28]
    eb6c:	2302      	movs	r3, #2
    eb6e:	f88d 3000 	strb.w	r3, [sp]
    eb72:	2300      	movs	r3, #0
    eb74:	f88d 3001 	strb.w	r3, [sp, #1]
    eb78:	f88d 3002 	strb.w	r3, [sp, #2]
    eb7c:	f88d 3003 	strb.w	r3, [sp, #3]
    eb80:	9a00      	ldr	r2, [sp, #0]
    eb82:	9206      	str	r2, [sp, #24]
    eb84:	4619      	mov	r1, r3
    eb86:	f363 0100 	bfi	r1, r3, #0, #1
    eb8a:	f363 0141 	bfi	r1, r3, #1, #1
    eb8e:	f363 0182 	bfi	r1, r3, #2, #1
    eb92:	f363 01c5 	bfi	r1, r3, #3, #3
    eb96:	2201      	movs	r2, #1
    eb98:	f362 1188 	bfi	r1, r2, #6, #3
    eb9c:	2208      	movs	r2, #8
    eb9e:	f362 2152 	bfi	r1, r2, #9, #10
    eba2:	f363 41de 	bfi	r1, r3, #19, #12
    eba6:	f363 71df 	bfi	r1, r3, #31, #1
    ebaa:	aa06      	add	r2, sp, #24
    ebac:	4805      	ldr	r0, [pc, #20]	; (ebc4 <sc_restore+0xb0>)
    ebae:	f7f4 fd8d 	bl	36cc <z_impl_z_log_msg_static_create>
    ebb2:	e7d7      	b.n	eb64 <sc_restore+0x50>
    ebb4:	20002124 	.word	0x20002124
    ebb8:	00022984 	.word	0x00022984
    ebbc:	0001bebf 	.word	0x0001bebf
    ebc0:	000228d0 	.word	0x000228d0
    ebc4:	00020540 	.word	0x00020540

0000ebc8 <update_ccc>:
{
    ebc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebcc:	b082      	sub	sp, #8
    ebce:	af00      	add	r7, sp, #0
	struct bt_conn *conn = data->conn;
    ebd0:	f8d2 8000 	ldr.w	r8, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
    ebd4:	6882      	ldr	r2, [r0, #8]
    ebd6:	4b39      	ldr	r3, [pc, #228]	; (ecbc <update_ccc+0xf4>)
    ebd8:	429a      	cmp	r2, r3
    ebda:	d004      	beq.n	ebe6 <update_ccc+0x1e>
}
    ebdc:	2001      	movs	r0, #1
    ebde:	3708      	adds	r7, #8
    ebe0:	46bd      	mov	sp, r7
    ebe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ebe6:	4604      	mov	r4, r0
	ccc = attr->user_data;
    ebe8:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ebec:	2500      	movs	r5, #0
    ebee:	2d00      	cmp	r5, #0
    ebf0:	d1f4      	bne.n	ebdc <update_ccc+0x14>
		if (!cfg->value ||
    ebf2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    ebf6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    ebfa:	891b      	ldrh	r3, [r3, #8]
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	d054      	beq.n	ecaa <update_ccc+0xe2>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ec00:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    ec04:	eb09 0243 	add.w	r2, r9, r3, lsl #1
    ec08:	3201      	adds	r2, #1
    ec0a:	f819 1013 	ldrb.w	r1, [r9, r3, lsl #1]
    ec0e:	4640      	mov	r0, r8
    ec10:	f00b ff57 	bl	1aac2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    ec14:	2800      	cmp	r0, #0
    ec16:	d048      	beq.n	ecaa <update_ccc+0xe2>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    ec18:	f44f 7295 	mov.w	r2, #298	; 0x12a
    ec1c:	4621      	mov	r1, r4
    ec1e:	4640      	mov	r0, r8
    ec20:	f00d fbbb 	bl	1c39a <bt_gatt_check_perm>
		if (err) {
    ec24:	b108      	cbz	r0, ec2a <update_ccc+0x62>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    ec26:	2803      	cmp	r0, #3
    ec28:	d00a      	beq.n	ec40 <update_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
    ec2a:	4649      	mov	r1, r9
    ec2c:	4620      	mov	r0, r4
    ec2e:	f00d f800 	bl	1bc32 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    ec32:	4b23      	ldr	r3, [pc, #140]	; (ecc0 <update_ccc+0xf8>)
    ec34:	4599      	cmp	r9, r3
    ec36:	d1d1      	bne.n	ebdc <update_ccc+0x14>
			sc_restore(conn);
    ec38:	4640      	mov	r0, r8
    ec3a:	f7ff ff6b 	bl	eb14 <sc_restore>
    ec3e:	e7cd      	b.n	ebdc <update_ccc+0x14>
				BT_WARN("CCC %p not writable", attr);
    ec40:	46ea      	mov	sl, sp
    ec42:	b088      	sub	sp, #32
    ec44:	466b      	mov	r3, sp
    ec46:	f113 0210 	adds.w	r2, r3, #16
    ec4a:	d030      	beq.n	ecae <update_ccc+0xe6>
    ec4c:	210c      	movs	r1, #12
    ec4e:	b11a      	cbz	r2, ec58 <update_ccc+0x90>
    ec50:	2904      	cmp	r1, #4
    ec52:	dd01      	ble.n	ec58 <update_ccc+0x90>
    ec54:	481b      	ldr	r0, [pc, #108]	; (ecc4 <update_ccc+0xfc>)
    ec56:	6158      	str	r0, [r3, #20]
    ec58:	b112      	cbz	r2, ec60 <update_ccc+0x98>
    ec5a:	2908      	cmp	r1, #8
    ec5c:	dd00      	ble.n	ec60 <update_ccc+0x98>
    ec5e:	619c      	str	r4, [r3, #24]
    ec60:	290b      	cmp	r1, #11
    ec62:	dd27      	ble.n	ecb4 <update_ccc+0xec>
    ec64:	210c      	movs	r1, #12
    ec66:	b13a      	cbz	r2, ec78 <update_ccc+0xb0>
    ec68:	2003      	movs	r0, #3
    ec6a:	7138      	strb	r0, [r7, #4]
    ec6c:	2000      	movs	r0, #0
    ec6e:	7178      	strb	r0, [r7, #5]
    ec70:	71b8      	strb	r0, [r7, #6]
    ec72:	71f8      	strb	r0, [r7, #7]
    ec74:	6878      	ldr	r0, [r7, #4]
    ec76:	6118      	str	r0, [r3, #16]
    ec78:	f36f 0600 	bfc	r6, #0, #1
    ec7c:	f36f 0641 	bfc	r6, #1, #1
    ec80:	f36f 0682 	bfc	r6, #2, #1
    ec84:	f36f 06c5 	bfc	r6, #3, #3
    ec88:	2302      	movs	r3, #2
    ec8a:	f363 1688 	bfi	r6, r3, #6, #3
    ec8e:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
    ec92:	f361 2652 	bfi	r6, r1, #9, #10
    ec96:	f36f 46de 	bfc	r6, #19, #12
    ec9a:	f36f 76df 	bfc	r6, #31, #1
    ec9e:	2300      	movs	r3, #0
    eca0:	4631      	mov	r1, r6
    eca2:	4809      	ldr	r0, [pc, #36]	; (ecc8 <update_ccc+0x100>)
    eca4:	f7f4 fd12 	bl	36cc <z_impl_z_log_msg_static_create>
    eca8:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ecaa:	3501      	adds	r5, #1
    ecac:	e79f      	b.n	ebee <update_ccc+0x26>
				BT_WARN("CCC %p not writable", attr);
    ecae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ecb2:	e7cc      	b.n	ec4e <update_ccc+0x86>
    ecb4:	f06f 011b 	mvn.w	r1, #27
    ecb8:	e7d5      	b.n	ec66 <update_ccc+0x9e>
    ecba:	bf00      	nop
    ecbc:	0000e0c5 	.word	0x0000e0c5
    ecc0:	200003cc 	.word	0x200003cc
    ecc4:	000228f0 	.word	0x000228f0
    ecc8:	00020540 	.word	0x00020540

0000eccc <gatt_notify>:
{
    eccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ecd0:	b095      	sub	sp, #84	; 0x54
    ecd2:	4605      	mov	r5, r0
    ecd4:	460f      	mov	r7, r1
    ecd6:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    ecd8:	2294      	movs	r2, #148	; 0x94
    ecda:	6861      	ldr	r1, [r4, #4]
    ecdc:	f00d fb5d 	bl	1c39a <bt_gatt_check_perm>
    ece0:	bb70      	cbnz	r0, ed40 <gatt_notify+0x74>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
    ece2:	2201      	movs	r2, #1
    ece4:	6861      	ldr	r1, [r4, #4]
    ece6:	4628      	mov	r0, r5
    ece8:	f00d fb89 	bl	1c3fe <bt_gatt_is_subscribed>
    ecec:	2800      	cmp	r0, #0
    ecee:	d04e      	beq.n	ed8e <gatt_notify+0xc2>
				sizeof(*nfy) + params->len);
    ecf0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    ecf2:	3202      	adds	r2, #2
    ecf4:	211b      	movs	r1, #27
    ecf6:	4628      	mov	r0, r5
    ecf8:	f7fe fbe2 	bl	d4c0 <bt_att_create_pdu>
	if (!buf) {
    ecfc:	4680      	mov	r8, r0
    ecfe:	2800      	cmp	r0, #0
    ed00:	d06c      	beq.n	eddc <gatt_notify+0x110>
    ed02:	f100 0908 	add.w	r9, r0, #8
    ed06:	2102      	movs	r1, #2
    ed08:	4648      	mov	r0, r9
    ed0a:	f00d ff09 	bl	1cb20 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    ed0e:	4606      	mov	r6, r0
    ed10:	f826 7b02 	strh.w	r7, [r6], #2
    ed14:	89a1      	ldrh	r1, [r4, #12]
    ed16:	4648      	mov	r0, r9
    ed18:	f00d ff02 	bl	1cb20 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    ed1c:	89a2      	ldrh	r2, [r4, #12]
    ed1e:	68a1      	ldr	r1, [r4, #8]
    ed20:	4630      	mov	r0, r6
    ed22:	f00b f992 	bl	1a04a <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
    ed26:	2301      	movs	r3, #1
    ed28:	6962      	ldr	r2, [r4, #20]
    ed2a:	6921      	ldr	r1, [r4, #16]
    ed2c:	4640      	mov	r0, r8
    ed2e:	f00c ff1c 	bl	1bb6a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
    ed32:	4641      	mov	r1, r8
    ed34:	4628      	mov	r0, r5
    ed36:	f7ff f84b 	bl	ddd0 <bt_att_send>
}
    ed3a:	b015      	add	sp, #84	; 0x54
    ed3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
    ed40:	4b3a      	ldr	r3, [pc, #232]	; (ee2c <gatt_notify+0x160>)
    ed42:	9313      	str	r3, [sp, #76]	; 0x4c
    ed44:	2202      	movs	r2, #2
    ed46:	f88d 2004 	strb.w	r2, [sp, #4]
    ed4a:	2300      	movs	r3, #0
    ed4c:	f88d 3005 	strb.w	r3, [sp, #5]
    ed50:	f88d 3006 	strb.w	r3, [sp, #6]
    ed54:	f88d 3007 	strb.w	r3, [sp, #7]
    ed58:	9901      	ldr	r1, [sp, #4]
    ed5a:	9112      	str	r1, [sp, #72]	; 0x48
    ed5c:	4619      	mov	r1, r3
    ed5e:	f363 0100 	bfi	r1, r3, #0, #1
    ed62:	f363 0141 	bfi	r1, r3, #1, #1
    ed66:	f363 0182 	bfi	r1, r3, #2, #1
    ed6a:	f363 01c5 	bfi	r1, r3, #3, #3
    ed6e:	f362 1188 	bfi	r1, r2, #6, #3
    ed72:	2208      	movs	r2, #8
    ed74:	f362 2152 	bfi	r1, r2, #9, #10
    ed78:	f363 41de 	bfi	r1, r3, #19, #12
    ed7c:	f363 71df 	bfi	r1, r3, #31, #1
    ed80:	aa12      	add	r2, sp, #72	; 0x48
    ed82:	482b      	ldr	r0, [pc, #172]	; (ee30 <gatt_notify+0x164>)
    ed84:	f7f4 fca2 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EPERM;
    ed88:	f04f 30ff 	mov.w	r0, #4294967295
    ed8c:	e7d5      	b.n	ed3a <gatt_notify+0x6e>
			BT_WARN("Device is not subscribed to characteristic");
    ed8e:	4b29      	ldr	r3, [pc, #164]	; (ee34 <gatt_notify+0x168>)
    ed90:	930d      	str	r3, [sp, #52]	; 0x34
    ed92:	2202      	movs	r2, #2
    ed94:	f88d 2004 	strb.w	r2, [sp, #4]
    ed98:	2300      	movs	r3, #0
    ed9a:	f88d 3005 	strb.w	r3, [sp, #5]
    ed9e:	f88d 3006 	strb.w	r3, [sp, #6]
    eda2:	f88d 3007 	strb.w	r3, [sp, #7]
    eda6:	9901      	ldr	r1, [sp, #4]
    eda8:	910c      	str	r1, [sp, #48]	; 0x30
    edaa:	4619      	mov	r1, r3
    edac:	f363 0100 	bfi	r1, r3, #0, #1
    edb0:	f363 0141 	bfi	r1, r3, #1, #1
    edb4:	f363 0182 	bfi	r1, r3, #2, #1
    edb8:	f363 01c5 	bfi	r1, r3, #3, #3
    edbc:	f362 1188 	bfi	r1, r2, #6, #3
    edc0:	2208      	movs	r2, #8
    edc2:	f362 2152 	bfi	r1, r2, #9, #10
    edc6:	f363 41de 	bfi	r1, r3, #19, #12
    edca:	f363 71df 	bfi	r1, r3, #31, #1
    edce:	aa0c      	add	r2, sp, #48	; 0x30
    edd0:	4817      	ldr	r0, [pc, #92]	; (ee30 <gatt_notify+0x164>)
    edd2:	f7f4 fc7b 	bl	36cc <z_impl_z_log_msg_static_create>
			return -EINVAL;
    edd6:	f06f 0015 	mvn.w	r0, #21
    edda:	e7ae      	b.n	ed3a <gatt_notify+0x6e>
		BT_WARN("No buffer available to send notification");
    eddc:	4b16      	ldr	r3, [pc, #88]	; (ee38 <gatt_notify+0x16c>)
    edde:	9307      	str	r3, [sp, #28]
    ede0:	2202      	movs	r2, #2
    ede2:	f88d 2004 	strb.w	r2, [sp, #4]
    ede6:	2300      	movs	r3, #0
    ede8:	f88d 3005 	strb.w	r3, [sp, #5]
    edec:	f88d 3006 	strb.w	r3, [sp, #6]
    edf0:	f88d 3007 	strb.w	r3, [sp, #7]
    edf4:	9901      	ldr	r1, [sp, #4]
    edf6:	9106      	str	r1, [sp, #24]
    edf8:	4619      	mov	r1, r3
    edfa:	f363 0100 	bfi	r1, r3, #0, #1
    edfe:	f363 0141 	bfi	r1, r3, #1, #1
    ee02:	f363 0182 	bfi	r1, r3, #2, #1
    ee06:	f363 01c5 	bfi	r1, r3, #3, #3
    ee0a:	f362 1188 	bfi	r1, r2, #6, #3
    ee0e:	2208      	movs	r2, #8
    ee10:	f362 2152 	bfi	r1, r2, #9, #10
    ee14:	f363 41de 	bfi	r1, r3, #19, #12
    ee18:	f363 71df 	bfi	r1, r3, #31, #1
    ee1c:	aa06      	add	r2, sp, #24
    ee1e:	4804      	ldr	r0, [pc, #16]	; (ee30 <gatt_notify+0x164>)
    ee20:	f7f4 fc54 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENOMEM;
    ee24:	f06f 000b 	mvn.w	r0, #11
    ee28:	e787      	b.n	ed3a <gatt_notify+0x6e>
    ee2a:	bf00      	nop
    ee2c:	00022864 	.word	0x00022864
    ee30:	00020540 	.word	0x00020540
    ee34:	0002287c 	.word	0x0002287c
    ee38:	00022904 	.word	0x00022904

0000ee3c <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ee3c:	4b34      	ldr	r3, [pc, #208]	; (ef10 <bt_gatt_notify_cb+0xd4>)
    ee3e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ee42:	f013 0f04 	tst.w	r3, #4
    ee46:	d05a      	beq.n	eefe <bt_gatt_notify_cb+0xc2>
{
    ee48:	b530      	push	{r4, r5, lr}
    ee4a:	b08d      	sub	sp, #52	; 0x34
    ee4c:	4605      	mov	r5, r0
    ee4e:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
    ee50:	b110      	cbz	r0, ee58 <bt_gatt_notify_cb+0x1c>
    ee52:	7a83      	ldrb	r3, [r0, #10]
    ee54:	2b07      	cmp	r3, #7
    ee56:	d155      	bne.n	ef04 <bt_gatt_notify_cb+0xc8>
	data.attr = params->attr;
    ee58:	6860      	ldr	r0, [r4, #4]
    ee5a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    ee5c:	f7ff fb5c 	bl	e518 <bt_gatt_attr_get_handle>
    ee60:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    ee64:	6821      	ldr	r1, [r4, #0]
    ee66:	b331      	cbz	r1, eeb6 <bt_gatt_notify_cb+0x7a>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    ee68:	a805      	add	r0, sp, #20
    ee6a:	f7ff fca1 	bl	e7b0 <gatt_find_by_uuid>
    ee6e:	2800      	cmp	r0, #0
    ee70:	d04b      	beq.n	ef0a <bt_gatt_notify_cb+0xce>
		params->attr = data.attr;
    ee72:	9b05      	ldr	r3, [sp, #20]
    ee74:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    ee76:	9b05      	ldr	r3, [sp, #20]
    ee78:	6818      	ldr	r0, [r3, #0]
    ee7a:	2300      	movs	r3, #0
    ee7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    ee80:	f642 0303 	movw	r3, #10243	; 0x2803
    ee84:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    ee88:	a90b      	add	r1, sp, #44	; 0x2c
    ee8a:	f00b f94a 	bl	1a122 <bt_uuid_cmp>
    ee8e:	b948      	cbnz	r0, eea4 <bt_gatt_notify_cb+0x68>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    ee90:	9805      	ldr	r0, [sp, #20]
    ee92:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    ee94:	799b      	ldrb	r3, [r3, #6]
    ee96:	f013 0f10 	tst.w	r3, #16
    ee9a:	d011      	beq.n	eec0 <bt_gatt_notify_cb+0x84>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    ee9c:	f00d fa29 	bl	1c2f2 <bt_gatt_attr_value_handle>
    eea0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
    eea4:	b17d      	cbz	r5, eec6 <bt_gatt_notify_cb+0x8a>
		return gatt_notify(conn, data.handle, params);
    eea6:	4622      	mov	r2, r4
    eea8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    eeac:	4628      	mov	r0, r5
    eeae:	f7ff ff0d 	bl	eccc <gatt_notify>
}
    eeb2:	b00d      	add	sp, #52	; 0x34
    eeb4:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
    eeb6:	2800      	cmp	r0, #0
    eeb8:	d1dd      	bne.n	ee76 <bt_gatt_notify_cb+0x3a>
			return -ENOENT;
    eeba:	f06f 0001 	mvn.w	r0, #1
    eebe:	e7f8      	b.n	eeb2 <bt_gatt_notify_cb+0x76>
			return -EINVAL;
    eec0:	f06f 0015 	mvn.w	r0, #21
    eec4:	e7f5      	b.n	eeb2 <bt_gatt_notify_cb+0x76>
	data.err = -ENOTCONN;
    eec6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    eeca:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    eecc:	2201      	movs	r2, #1
    eece:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
    eed2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    eed4:	2300      	movs	r3, #0
    eed6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    eeda:	f642 1102 	movw	r1, #10498	; 0x2902
    eede:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
    eee2:	a905      	add	r1, sp, #20
    eee4:	9102      	str	r1, [sp, #8]
    eee6:	490b      	ldr	r1, [pc, #44]	; (ef14 <bt_gatt_notify_cb+0xd8>)
    eee8:	9101      	str	r1, [sp, #4]
    eeea:	9200      	str	r2, [sp, #0]
    eeec:	aa0a      	add	r2, sp, #40	; 0x28
    eeee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eef2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    eef6:	f7ff fb41 	bl	e57c <bt_gatt_foreach_attr_type>
	return data.err;
    eefa:	9807      	ldr	r0, [sp, #28]
    eefc:	e7d9      	b.n	eeb2 <bt_gatt_notify_cb+0x76>
		return -EAGAIN;
    eefe:	f06f 000a 	mvn.w	r0, #10
}
    ef02:	4770      	bx	lr
		return -ENOTCONN;
    ef04:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    ef08:	e7d3      	b.n	eeb2 <bt_gatt_notify_cb+0x76>
			return -ENOENT;
    ef0a:	f06f 0001 	mvn.w	r0, #1
    ef0e:	e7d0      	b.n	eeb2 <bt_gatt_notify_cb+0x76>
    ef10:	200000cc 	.word	0x200000cc
    ef14:	0000ef19 	.word	0x0000ef19

0000ef18 <notify_cb>:
{
    ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef1c:	b08b      	sub	sp, #44	; 0x2c
    ef1e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ef20:	6882      	ldr	r2, [r0, #8]
    ef22:	4b69      	ldr	r3, [pc, #420]	; (f0c8 <notify_cb+0x1b0>)
    ef24:	429a      	cmp	r2, r3
    ef26:	d005      	beq.n	ef34 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
    ef28:	f04f 0a01 	mov.w	sl, #1
}
    ef2c:	4650      	mov	r0, sl
    ef2e:	b00b      	add	sp, #44	; 0x2c
    ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef34:	4607      	mov	r7, r0
	ccc = attr->user_data;
    ef36:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    ef38:	4b64      	ldr	r3, [pc, #400]	; (f0cc <notify_cb+0x1b4>)
    ef3a:	429d      	cmp	r5, r3
    ef3c:	d031      	beq.n	efa2 <notify_cb+0x8a>
			err = 0;
    ef3e:	2400      	movs	r4, #0
    ef40:	e088      	b.n	f054 <notify_cb+0x13c>
				sc = (struct sc_data *)data->ind_params->data;
    ef42:	6933      	ldr	r3, [r6, #16]
    ef44:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    ef46:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    ef4a:	8853      	ldrh	r3, [r2, #2]
    ef4c:	8812      	ldrh	r2, [r2, #0]
    ef4e:	4649      	mov	r1, r9
    ef50:	f8df c17c 	ldr.w	ip, [pc, #380]	; f0d0 <notify_cb+0x1b8>
    ef54:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
    ef58:	f7ff f85c 	bl	e014 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    ef5c:	3401      	adds	r4, #1
    ef5e:	2c00      	cmp	r4, #0
    ef60:	d1ed      	bne.n	ef3e <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    ef62:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    ef66:	4b5a      	ldr	r3, [pc, #360]	; (f0d0 <notify_cb+0x1b8>)
    ef68:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    ef6c:	f109 0901 	add.w	r9, r9, #1
    ef70:	2300      	movs	r3, #0
    ef72:	9302      	str	r3, [sp, #8]
    ef74:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
    ef78:	2207      	movs	r2, #7
    ef7a:	a902      	add	r1, sp, #8
    ef7c:	4648      	mov	r0, r9
    ef7e:	f00b f852 	bl	1a026 <memcmp>
    ef82:	2800      	cmp	r0, #0
    ef84:	d0ea      	beq.n	ef5c <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    ef86:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ef8a:	2207      	movs	r2, #7
    ef8c:	4649      	mov	r1, r9
    ef8e:	4850      	ldr	r0, [pc, #320]	; (f0d0 <notify_cb+0x1b8>)
    ef90:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
    ef94:	f7fc fe5c 	bl	bc50 <bt_conn_lookup_state_le>
			if (!conn) {
    ef98:	2800      	cmp	r0, #0
    ef9a:	d0d2      	beq.n	ef42 <notify_cb+0x2a>
			bt_conn_unref(conn);
    ef9c:	f00b fd2f 	bl	1a9fe <bt_conn_unref>
    efa0:	e7dc      	b.n	ef5c <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    efa2:	2400      	movs	r4, #0
    efa4:	e7db      	b.n	ef5e <notify_cb+0x46>
			bt_conn_unref(conn);
    efa6:	f00b fd2a 	bl	1a9fe <bt_conn_unref>
			continue;
    efaa:	e052      	b.n	f052 <notify_cb+0x13a>
			bt_conn_unref(conn);
    efac:	4648      	mov	r0, r9
    efae:	f00b fd26 	bl	1a9fe <bt_conn_unref>
			continue;
    efb2:	e04e      	b.n	f052 <notify_cb+0x13a>
			BT_WARN("Link is not encrypted");
    efb4:	4b47      	ldr	r3, [pc, #284]	; (f0d4 <notify_cb+0x1bc>)
    efb6:	9309      	str	r3, [sp, #36]	; 0x24
    efb8:	2202      	movs	r2, #2
    efba:	f88d 2004 	strb.w	r2, [sp, #4]
    efbe:	2300      	movs	r3, #0
    efc0:	f88d 3005 	strb.w	r3, [sp, #5]
    efc4:	f88d 3006 	strb.w	r3, [sp, #6]
    efc8:	f88d 3007 	strb.w	r3, [sp, #7]
    efcc:	9901      	ldr	r1, [sp, #4]
    efce:	9108      	str	r1, [sp, #32]
    efd0:	f363 0800 	bfi	r8, r3, #0, #1
    efd4:	f363 0841 	bfi	r8, r3, #1, #1
    efd8:	f363 0882 	bfi	r8, r3, #2, #1
    efdc:	f363 08c5 	bfi	r8, r3, #3, #3
    efe0:	f362 1888 	bfi	r8, r2, #6, #3
    efe4:	2208      	movs	r2, #8
    efe6:	f362 2852 	bfi	r8, r2, #9, #10
    efea:	f363 48de 	bfi	r8, r3, #19, #12
    efee:	f363 78df 	bfi	r8, r3, #31, #1
    eff2:	aa08      	add	r2, sp, #32
    eff4:	4641      	mov	r1, r8
    eff6:	4838      	ldr	r0, [pc, #224]	; (f0d8 <notify_cb+0x1c0>)
    eff8:	f7f4 fb68 	bl	36cc <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
    effc:	4648      	mov	r0, r9
    effe:	f00b fcfe 	bl	1a9fe <bt_conn_unref>
			continue;
    f002:	e026      	b.n	f052 <notify_cb+0x13a>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
    f004:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    f008:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    f00c:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
    f00e:	f012 0f02 	tst.w	r2, #2
    f012:	d049      	beq.n	f0a8 <notify_cb+0x190>
			err = gatt_indicate(conn, data->handle, data->ind_params);
    f014:	6932      	ldr	r2, [r6, #16]
    f016:	88b1      	ldrh	r1, [r6, #4]
    f018:	4648      	mov	r0, r9
    f01a:	f7ff fbf9 	bl	e810 <gatt_indicate>
			if (err == 0) {
    f01e:	4683      	mov	fp, r0
    f020:	b970      	cbnz	r0, f040 <notify_cb+0x128>
				data->ind_params->_ref++;
    f022:	6932      	ldr	r2, [r6, #16]
    f024:	7d93      	ldrb	r3, [r2, #22]
    f026:	3301      	adds	r3, #1
    f028:	7593      	strb	r3, [r2, #22]
    f02a:	e009      	b.n	f040 <notify_cb+0x128>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
    f02c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f030:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f034:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
    f036:	f013 0f01 	tst.w	r3, #1
    f03a:	d13a      	bne.n	f0b2 <notify_cb+0x19a>
			err = 0;
    f03c:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
    f040:	4648      	mov	r0, r9
    f042:	f00b fcdc 	bl	1a9fe <bt_conn_unref>
		if (err < 0) {
    f046:	f1bb 0f00 	cmp.w	fp, #0
    f04a:	f6ff af6f 	blt.w	ef2c <notify_cb+0x14>
		data->err = 0;
    f04e:	2300      	movs	r3, #0
    f050:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    f052:	3401      	adds	r4, #1
    f054:	2c00      	cmp	r4, #0
    f056:	d133      	bne.n	f0c0 <notify_cb+0x1a8>
		if (cfg->value != data->type) {
    f058:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f05c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    f060:	891a      	ldrh	r2, [r3, #8]
    f062:	89b3      	ldrh	r3, [r6, #12]
    f064:	429a      	cmp	r2, r3
    f066:	d1f4      	bne.n	f052 <notify_cb+0x13a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    f068:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f06c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    f070:	3101      	adds	r1, #1
    f072:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
    f076:	f7fc fd2d 	bl	bad4 <bt_conn_lookup_addr_le>
		if (!conn) {
    f07a:	4681      	mov	r9, r0
    f07c:	2800      	cmp	r0, #0
    f07e:	d0e8      	beq.n	f052 <notify_cb+0x13a>
		if (conn->state != BT_CONN_CONNECTED) {
    f080:	7a83      	ldrb	r3, [r0, #10]
    f082:	2b07      	cmp	r3, #7
    f084:	d18f      	bne.n	efa6 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    f086:	696b      	ldr	r3, [r5, #20]
    f088:	b11b      	cbz	r3, f092 <notify_cb+0x17a>
    f08a:	4639      	mov	r1, r7
    f08c:	4798      	blx	r3
    f08e:	2800      	cmp	r0, #0
    f090:	d08c      	beq.n	efac <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    f092:	2294      	movs	r2, #148	; 0x94
    f094:	4639      	mov	r1, r7
    f096:	4648      	mov	r0, r9
    f098:	f00d f97f 	bl	1c39a <bt_gatt_check_perm>
    f09c:	4682      	mov	sl, r0
    f09e:	2800      	cmp	r0, #0
    f0a0:	d188      	bne.n	efb4 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
    f0a2:	89b3      	ldrh	r3, [r6, #12]
    f0a4:	2b02      	cmp	r3, #2
    f0a6:	d0ad      	beq.n	f004 <notify_cb+0xec>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
    f0a8:	2b01      	cmp	r3, #1
    f0aa:	d0bf      	beq.n	f02c <notify_cb+0x114>
			err = 0;
    f0ac:	f04f 0b00 	mov.w	fp, #0
    f0b0:	e7c6      	b.n	f040 <notify_cb+0x128>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    f0b2:	6932      	ldr	r2, [r6, #16]
    f0b4:	88b1      	ldrh	r1, [r6, #4]
    f0b6:	4648      	mov	r0, r9
    f0b8:	f7ff fe08 	bl	eccc <gatt_notify>
    f0bc:	4683      	mov	fp, r0
    f0be:	e7bf      	b.n	f040 <notify_cb+0x128>
	return BT_GATT_ITER_CONTINUE;
    f0c0:	f04f 0a01 	mov.w	sl, #1
    f0c4:	e732      	b.n	ef2c <notify_cb+0x14>
    f0c6:	bf00      	nop
    f0c8:	0000e0c5 	.word	0x0000e0c5
    f0cc:	200003cc 	.word	0x200003cc
    f0d0:	20002118 	.word	0x20002118
    f0d4:	00022864 	.word	0x00022864
    f0d8:	00020540 	.word	0x00020540

0000f0dc <bt_gatt_mult_notification>:
{
    f0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0e0:	b087      	sub	sp, #28
    f0e2:	af00      	add	r7, sp, #0
    f0e4:	4680      	mov	r8, r0
    f0e6:	460c      	mov	r4, r1
    f0e8:	4615      	mov	r5, r2
    f0ea:	607a      	str	r2, [r7, #4]
	sub = gatt_sub_find(conn);
    f0ec:	f7fe ff00 	bl	def0 <gatt_sub_find>
	if (!sub) {
    f0f0:	2800      	cmp	r0, #0
    f0f2:	d043      	beq.n	f17c <bt_gatt_mult_notification+0xa0>
    f0f4:	4683      	mov	fp, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    f0f6:	462a      	mov	r2, r5
    f0f8:	4621      	mov	r1, r4
    f0fa:	f107 000c 	add.w	r0, r7, #12
    f0fe:	f00d fc54 	bl	1c9aa <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    f102:	465e      	mov	r6, fp
    f104:	e071      	b.n	f1ea <bt_gatt_mult_notification+0x10e>
			BT_ERR("Invalid data len %u > %u", len, length);
    f106:	466d      	mov	r5, sp
    f108:	b088      	sub	sp, #32
    f10a:	466b      	mov	r3, sp
    f10c:	f113 0210 	adds.w	r2, r3, #16
    f110:	d038      	beq.n	f184 <bt_gatt_mult_notification+0xa8>
    f112:	2110      	movs	r1, #16
    f114:	b11a      	cbz	r2, f11e <bt_gatt_mult_notification+0x42>
    f116:	2904      	cmp	r1, #4
    f118:	dd01      	ble.n	f11e <bt_gatt_mult_notification+0x42>
    f11a:	4843      	ldr	r0, [pc, #268]	; (f228 <bt_gatt_mult_notification+0x14c>)
    f11c:	6158      	str	r0, [r3, #20]
    f11e:	b11a      	cbz	r2, f128 <bt_gatt_mult_notification+0x4c>
    f120:	2908      	cmp	r1, #8
    f122:	dd01      	ble.n	f128 <bt_gatt_mult_notification+0x4c>
    f124:	f8c3 a018 	str.w	sl, [r3, #24]
    f128:	b11a      	cbz	r2, f132 <bt_gatt_mult_notification+0x56>
    f12a:	290c      	cmp	r1, #12
    f12c:	dd01      	ble.n	f132 <bt_gatt_mult_notification+0x56>
    f12e:	6878      	ldr	r0, [r7, #4]
    f130:	61d8      	str	r0, [r3, #28]
    f132:	290f      	cmp	r1, #15
    f134:	dd29      	ble.n	f18a <bt_gatt_mult_notification+0xae>
    f136:	2410      	movs	r4, #16
    f138:	b13a      	cbz	r2, f14a <bt_gatt_mult_notification+0x6e>
    f13a:	2104      	movs	r1, #4
    f13c:	7239      	strb	r1, [r7, #8]
    f13e:	2100      	movs	r1, #0
    f140:	7279      	strb	r1, [r7, #9]
    f142:	72b9      	strb	r1, [r7, #10]
    f144:	72f9      	strb	r1, [r7, #11]
    f146:	68b8      	ldr	r0, [r7, #8]
    f148:	6118      	str	r0, [r3, #16]
    f14a:	2100      	movs	r1, #0
    f14c:	f36f 0100 	bfc	r1, #0, #1
    f150:	f36f 0141 	bfc	r1, #1, #1
    f154:	f36f 0182 	bfc	r1, #2, #1
    f158:	f36f 01c5 	bfc	r1, #3, #3
    f15c:	2301      	movs	r3, #1
    f15e:	f363 1188 	bfi	r1, r3, #6, #3
    f162:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
    f166:	f364 2152 	bfi	r1, r4, #9, #10
    f16a:	f36f 41de 	bfc	r1, #19, #12
    f16e:	f36f 71df 	bfc	r1, #31, #1
    f172:	2300      	movs	r3, #0
    f174:	482d      	ldr	r0, [pc, #180]	; (f22c <bt_gatt_mult_notification+0x150>)
    f176:	f7f4 faa9 	bl	36cc <z_impl_z_log_msg_static_create>
    f17a:	46ad      	mov	sp, r5
}
    f17c:	371c      	adds	r7, #28
    f17e:	46bd      	mov	sp, r7
    f180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			BT_ERR("Invalid data len %u > %u", len, length);
    f184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f188:	e7c4      	b.n	f114 <bt_gatt_mult_notification+0x38>
    f18a:	f06f 041b 	mvn.w	r4, #27
    f18e:	e7d3      	b.n	f138 <bt_gatt_mult_notification+0x5c>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    f190:	b324      	cbz	r4, f1dc <bt_gatt_mult_notification+0x100>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f192:	f114 0318 	adds.w	r3, r4, #24
    f196:	d002      	beq.n	f19e <bt_gatt_mult_notification+0xc2>
	return node->next;
    f198:	69a3      	ldr	r3, [r4, #24]
    f19a:	b103      	cbz	r3, f19e <bt_gatt_mult_notification+0xc2>
    f19c:	3b18      	subs	r3, #24
    f19e:	4625      	mov	r5, r4
    f1a0:	461c      	mov	r4, r3
    f1a2:	b1ed      	cbz	r5, f1e0 <bt_gatt_mult_notification+0x104>
			if (handle != params->value_handle) {
    f1a4:	89ab      	ldrh	r3, [r5, #12]
    f1a6:	4599      	cmp	r9, r3
    f1a8:	d1f2      	bne.n	f190 <bt_gatt_mult_notification+0xb4>
			if (check_subscribe_security_level(conn, params)) {
    f1aa:	4629      	mov	r1, r5
    f1ac:	4640      	mov	r0, r8
    f1ae:	f00c fd72 	bl	1bc96 <check_subscribe_security_level>
    f1b2:	2800      	cmp	r0, #0
    f1b4:	d0ec      	beq.n	f190 <bt_gatt_mult_notification+0xb4>
				if (params->notify(conn, params, nfy->value, len) ==
    f1b6:	4653      	mov	r3, sl
    f1b8:	f10b 0204 	add.w	r2, fp, #4
    f1bc:	4629      	mov	r1, r5
    f1be:	4640      	mov	r0, r8
    f1c0:	f8d5 c000 	ldr.w	ip, [r5]
    f1c4:	47e0      	blx	ip
    f1c6:	2800      	cmp	r0, #0
    f1c8:	d1e2      	bne.n	f190 <bt_gatt_mult_notification+0xb4>
					bt_gatt_unsubscribe(conn, params);
    f1ca:	4629      	mov	r1, r5
    f1cc:	4640      	mov	r0, r8
    f1ce:	f00d f9c5 	bl	1c55c <bt_gatt_unsubscribe>
    f1d2:	e7dd      	b.n	f190 <bt_gatt_mult_notification+0xb4>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    f1d4:	462c      	mov	r4, r5
    f1d6:	e7e4      	b.n	f1a2 <bt_gatt_mult_notification+0xc6>
    f1d8:	462c      	mov	r4, r5
    f1da:	e7e2      	b.n	f1a2 <bt_gatt_mult_notification+0xc6>
    f1dc:	4623      	mov	r3, r4
    f1de:	e7de      	b.n	f19e <bt_gatt_mult_notification+0xc2>
		net_buf_simple_pull_mem(&buf, len);
    f1e0:	4651      	mov	r1, sl
    f1e2:	f107 000c 	add.w	r0, r7, #12
    f1e6:	f00d fcd3 	bl	1cb90 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
    f1ea:	8a3b      	ldrh	r3, [r7, #16]
    f1ec:	2b04      	cmp	r3, #4
    f1ee:	d9c5      	bls.n	f17c <bt_gatt_mult_notification+0xa0>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    f1f0:	2104      	movs	r1, #4
    f1f2:	f107 000c 	add.w	r0, r7, #12
    f1f6:	f00d fccb 	bl	1cb90 <net_buf_simple_pull_mem>
    f1fa:	4683      	mov	fp, r0
		handle = sys_cpu_to_le16(nfy->handle);
    f1fc:	f8b0 9000 	ldrh.w	r9, [r0]
		len = sys_cpu_to_le16(nfy->len);
    f200:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		if (len > buf.len) {
    f204:	8a3b      	ldrh	r3, [r7, #16]
    f206:	4553      	cmp	r3, sl
    f208:	f4ff af7d 	bcc.w	f106 <bt_gatt_mult_notification+0x2a>
	return list->head;
    f20c:	68b5      	ldr	r5, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    f20e:	2d00      	cmp	r5, #0
    f210:	d0e0      	beq.n	f1d4 <bt_gatt_mult_notification+0xf8>
    f212:	3d18      	subs	r5, #24
    f214:	d0e0      	beq.n	f1d8 <bt_gatt_mult_notification+0xfc>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f216:	f115 0418 	adds.w	r4, r5, #24
    f21a:	d0c2      	beq.n	f1a2 <bt_gatt_mult_notification+0xc6>
	return node->next;
    f21c:	69ac      	ldr	r4, [r5, #24]
    f21e:	2c00      	cmp	r4, #0
    f220:	d0bf      	beq.n	f1a2 <bt_gatt_mult_notification+0xc6>
    f222:	3c18      	subs	r4, #24
    f224:	e7bd      	b.n	f1a2 <bt_gatt_mult_notification+0xc6>
    f226:	bf00      	nop
    f228:	00022930 	.word	0x00022930
    f22c:	00020540 	.word	0x00020540

0000f230 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    f230:	b510      	push	{r4, lr}
    f232:	b086      	sub	sp, #24
    f234:	4604      	mov	r4, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
    f236:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
    f238:	2001      	movs	r0, #1
    f23a:	f88d 0014 	strb.w	r0, [sp, #20]
    f23e:	ab04      	add	r3, sp, #16
    f240:	9302      	str	r3, [sp, #8]
    f242:	4b07      	ldr	r3, [pc, #28]	; (f260 <bt_gatt_connected+0x30>)
    f244:	9301      	str	r3, [sp, #4]
    f246:	2200      	movs	r2, #0
    f248:	9200      	str	r2, [sp, #0]
    f24a:	4613      	mov	r3, r2
    f24c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f250:	f7ff f994 	bl	e57c <bt_gatt_foreach_attr_type>
				err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
    f254:	4620      	mov	r0, r4
    f256:	f00c ff1e 	bl	1c096 <add_subscriptions>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    f25a:	b006      	add	sp, #24
    f25c:	bd10      	pop	{r4, pc}
    f25e:	bf00      	nop
    f260:	0000ebc9 	.word	0x0000ebc9

0000f264 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    f264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f266:	4605      	mov	r5, r0
    f268:	460e      	mov	r6, r1
    f26a:	4617      	mov	r7, r2
	return list->head;
    f26c:	4b0a      	ldr	r3, [pc, #40]	; (f298 <bt_gatt_att_max_mtu_changed+0x34>)
    f26e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    f270:	b134      	cbz	r4, f280 <bt_gatt_att_max_mtu_changed+0x1c>
    f272:	3c04      	subs	r4, #4
    f274:	e004      	b.n	f280 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f276:	1d23      	adds	r3, r4, #4
    f278:	d00b      	beq.n	f292 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
    f27a:	6864      	ldr	r4, [r4, #4]
    f27c:	b15c      	cbz	r4, f296 <bt_gatt_att_max_mtu_changed+0x32>
    f27e:	3c04      	subs	r4, #4
    f280:	b14c      	cbz	r4, f296 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
    f282:	6823      	ldr	r3, [r4, #0]
    f284:	2b00      	cmp	r3, #0
    f286:	d0f6      	beq.n	f276 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
    f288:	463a      	mov	r2, r7
    f28a:	4631      	mov	r1, r6
    f28c:	4628      	mov	r0, r5
    f28e:	4798      	blx	r3
    f290:	e7f1      	b.n	f276 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    f292:	461c      	mov	r4, r3
    f294:	e7f4      	b.n	f280 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
    f296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f298:	200020fc 	.word	0x200020fc

0000f29c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    f29c:	b510      	push	{r4, lr}
    f29e:	b084      	sub	sp, #16
    f2a0:	4604      	mov	r4, r0
    f2a2:	9002      	str	r0, [sp, #8]
    f2a4:	4b08      	ldr	r3, [pc, #32]	; (f2c8 <bt_gatt_disconnected+0x2c>)
    f2a6:	9301      	str	r3, [sp, #4]
    f2a8:	2200      	movs	r2, #0
    f2aa:	9200      	str	r2, [sp, #0]
    f2ac:	4613      	mov	r3, r2
    f2ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f2b2:	2001      	movs	r0, #1
    f2b4:	f7ff f962 	bl	e57c <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
    f2b8:	4620      	mov	r0, r4
    f2ba:	f00c ff12 	bl	1c0e2 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
    f2be:	4620      	mov	r0, r4
    f2c0:	f00c fed2 	bl	1c068 <remove_cf_cfg>
#endif
}
    f2c4:	b004      	add	sp, #16
    f2c6:	bd10      	pop	{r4, pc}
    f2c8:	0000e3d1 	.word	0x0000e3d1

0000f2cc <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    f2cc:	b5b0      	push	{r4, r5, r7, lr}
    f2ce:	b082      	sub	sp, #8
    f2d0:	af00      	add	r7, sp, #0
    f2d2:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f2d4:	2000      	movs	r0, #0
    f2d6:	2800      	cmp	r0, #0
    f2d8:	d03a      	beq.n	f350 <bt_smp_accept+0x84>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
    f2da:	466c      	mov	r4, sp
    f2dc:	b088      	sub	sp, #32
    f2de:	466b      	mov	r3, sp
    f2e0:	f113 0210 	adds.w	r2, r3, #16
    f2e4:	d044      	beq.n	f370 <bt_smp_accept+0xa4>
    f2e6:	210c      	movs	r1, #12
    f2e8:	b11a      	cbz	r2, f2f2 <bt_smp_accept+0x26>
    f2ea:	2904      	cmp	r1, #4
    f2ec:	dd01      	ble.n	f2f2 <bt_smp_accept+0x26>
    f2ee:	4823      	ldr	r0, [pc, #140]	; (f37c <bt_smp_accept+0xb0>)
    f2f0:	6158      	str	r0, [r3, #20]
    f2f2:	b112      	cbz	r2, f2fa <bt_smp_accept+0x2e>
    f2f4:	2908      	cmp	r1, #8
    f2f6:	dd00      	ble.n	f2fa <bt_smp_accept+0x2e>
    f2f8:	619d      	str	r5, [r3, #24]
    f2fa:	290b      	cmp	r1, #11
    f2fc:	dd3b      	ble.n	f376 <bt_smp_accept+0xaa>
    f2fe:	f04f 0c0c 	mov.w	ip, #12
    f302:	b13a      	cbz	r2, f314 <bt_smp_accept+0x48>
    f304:	2103      	movs	r1, #3
    f306:	7139      	strb	r1, [r7, #4]
    f308:	2100      	movs	r1, #0
    f30a:	7179      	strb	r1, [r7, #5]
    f30c:	71b9      	strb	r1, [r7, #6]
    f30e:	71f9      	strb	r1, [r7, #7]
    f310:	6878      	ldr	r0, [r7, #4]
    f312:	6118      	str	r0, [r3, #16]
    f314:	2100      	movs	r1, #0
    f316:	f36f 0100 	bfc	r1, #0, #1
    f31a:	f36f 0141 	bfc	r1, #1, #1
    f31e:	f36f 0182 	bfc	r1, #2, #1
    f322:	f36f 01c5 	bfc	r1, #3, #3
    f326:	2301      	movs	r3, #1
    f328:	f363 1188 	bfi	r1, r3, #6, #3
    f32c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    f330:	f36c 2152 	bfi	r1, ip, #9, #10
    f334:	f36f 41de 	bfc	r1, #19, #12
    f338:	f36f 71df 	bfc	r1, #31, #1
    f33c:	2300      	movs	r3, #0
    f33e:	4810      	ldr	r0, [pc, #64]	; (f380 <bt_smp_accept+0xb4>)
    f340:	f7f4 f9c4 	bl	36cc <z_impl_z_log_msg_static_create>
    f344:	46a5      	mov	sp, r4

	return -ENOMEM;
    f346:	f06f 000b 	mvn.w	r0, #11
}
    f34a:	3708      	adds	r7, #8
    f34c:	46bd      	mov	sp, r7
    f34e:	bdb0      	pop	{r4, r5, r7, pc}
		if (smp->chan.conn) {
    f350:	238c      	movs	r3, #140	; 0x8c
    f352:	fb00 f303 	mul.w	r3, r0, r3
    f356:	4a0b      	ldr	r2, [pc, #44]	; (f384 <bt_smp_accept+0xb8>)
    f358:	58d3      	ldr	r3, [r2, r3]
    f35a:	b10b      	cbz	r3, f360 <bt_smp_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    f35c:	3001      	adds	r0, #1
    f35e:	e7ba      	b.n	f2d6 <bt_smp_accept+0xa>
		smp->chan.ops = &ops;
    f360:	4b08      	ldr	r3, [pc, #32]	; (f384 <bt_smp_accept+0xb8>)
    f362:	228c      	movs	r2, #140	; 0x8c
    f364:	fb02 3300 	mla	r3, r2, r0, r3
    f368:	4a07      	ldr	r2, [pc, #28]	; (f388 <bt_smp_accept+0xbc>)
    f36a:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
    f36c:	600b      	str	r3, [r1, #0]
		return 0;
    f36e:	e7ec      	b.n	f34a <bt_smp_accept+0x7e>
	BT_ERR("No available SMP context for conn %p", conn);
    f370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f374:	e7b8      	b.n	f2e8 <bt_smp_accept+0x1c>
    f376:	f06f 0c1b 	mvn.w	ip, #27
    f37a:	e7c2      	b.n	f302 <bt_smp_accept+0x36>
    f37c:	00022a88 	.word	0x00022a88
    f380:	00020568 	.word	0x00020568
    f384:	20002150 	.word	0x20002150
    f388:	00022ab8 	.word	0x00022ab8

0000f38c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
    f38c:	4b03      	ldr	r3, [pc, #12]	; (f39c <pool_id+0x10>)
    f38e:	1ac0      	subs	r0, r0, r3
    f390:	1080      	asrs	r0, r0, #2
}
    f392:	4b03      	ldr	r3, [pc, #12]	; (f3a0 <pool_id+0x14>)
    f394:	fb03 f000 	mul.w	r0, r3, r0
    f398:	4770      	bx	lr
    f39a:	bf00      	nop
    f39c:	20000758 	.word	0x20000758
    f3a0:	ba2e8ba3 	.word	0xba2e8ba3

0000f3a4 <net_buf_pool_get>:
}
    f3a4:	222c      	movs	r2, #44	; 0x2c
    f3a6:	4b02      	ldr	r3, [pc, #8]	; (f3b0 <net_buf_pool_get+0xc>)
    f3a8:	fb02 3000 	mla	r0, r2, r0, r3
    f3ac:	4770      	bx	lr
    f3ae:	bf00      	nop
    f3b0:	20000758 	.word	0x20000758

0000f3b4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    f3b4:	4800      	ldr	r0, [pc, #0]	; (f3b8 <get_hf_flags+0x4>)
    f3b6:	4770      	bx	lr
    f3b8:	20002264 	.word	0x20002264

0000f3bc <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    f3bc:	4b03      	ldr	r3, [pc, #12]	; (f3cc <get_subsys+0x10>)
    f3be:	1ac0      	subs	r0, r0, r3
    f3c0:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    f3c2:	4b03      	ldr	r3, [pc, #12]	; (f3d0 <get_subsys+0x14>)
    f3c4:	fb03 f000 	mul.w	r0, r3, r0
    f3c8:	4770      	bx	lr
    f3ca:	bf00      	nop
    f3cc:	200021ec 	.word	0x200021ec
    f3d0:	b6db6db7 	.word	0xb6db6db7

0000f3d4 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f3d4:	b538      	push	{r3, r4, r5, lr}
    f3d6:	4605      	mov	r5, r0
    f3d8:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    f3da:	f7ff ffef 	bl	f3bc <get_subsys>
    f3de:	4601      	mov	r1, r0
    f3e0:	2240      	movs	r2, #64	; 0x40
    f3e2:	4803      	ldr	r0, [pc, #12]	; (f3f0 <onoff_stop+0x1c>)
    f3e4:	f00d fc68 	bl	1ccb8 <stop>
    f3e8:	4601      	mov	r1, r0
	notify(mgr, res);
    f3ea:	4628      	mov	r0, r5
    f3ec:	47a0      	blx	r4
}
    f3ee:	bd38      	pop	{r3, r4, r5, pc}
    f3f0:	000200d4 	.word	0x000200d4

0000f3f4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f3f4:	b530      	push	{r4, r5, lr}
    f3f6:	b083      	sub	sp, #12
    f3f8:	4605      	mov	r5, r0
    f3fa:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    f3fc:	f7ff ffde 	bl	f3bc <get_subsys>
    f400:	4601      	mov	r1, r0
    f402:	2340      	movs	r3, #64	; 0x40
    f404:	9300      	str	r3, [sp, #0]
    f406:	4623      	mov	r3, r4
    f408:	4a05      	ldr	r2, [pc, #20]	; (f420 <onoff_start+0x2c>)
    f40a:	4806      	ldr	r0, [pc, #24]	; (f424 <onoff_start+0x30>)
    f40c:	f00d fc6e 	bl	1ccec <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    f410:	1e01      	subs	r1, r0, #0
    f412:	db01      	blt.n	f418 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    f414:	b003      	add	sp, #12
    f416:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    f418:	4628      	mov	r0, r5
    f41a:	47a0      	blx	r4
}
    f41c:	e7fa      	b.n	f414 <onoff_start+0x20>
    f41e:	bf00      	nop
    f420:	0001cd35 	.word	0x0001cd35
    f424:	000200d4 	.word	0x000200d4

0000f428 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    f428:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    f42a:	2805      	cmp	r0, #5
    f42c:	d815      	bhi.n	f45a <clock_event_handler+0x32>
    f42e:	e8df f000 	tbb	[pc, r0]
    f432:	1a03      	.short	0x1a03
    f434:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    f438:	2100      	movs	r1, #0
    f43a:	480d      	ldr	r0, [pc, #52]	; (f470 <clock_event_handler+0x48>)
    f43c:	f00d fbc5 	bl	1cbca <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    f440:	6883      	ldr	r3, [r0, #8]
    f442:	f013 0f07 	tst.w	r3, #7
    f446:	d108      	bne.n	f45a <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    f448:	2100      	movs	r1, #0
    f44a:	4809      	ldr	r0, [pc, #36]	; (f470 <clock_event_handler+0x48>)
    f44c:	f00d fc22 	bl	1cc94 <clkstarted_handle>
    f450:	e003      	b.n	f45a <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    f452:	2102      	movs	r1, #2
    f454:	4806      	ldr	r0, [pc, #24]	; (f470 <clock_event_handler+0x48>)
    f456:	f00d fc1d 	bl	1cc94 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    f45a:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    f45c:	2103      	movs	r1, #3
    f45e:	4804      	ldr	r0, [pc, #16]	; (f470 <clock_event_handler+0x48>)
    f460:	f00d fc18 	bl	1cc94 <clkstarted_handle>
		break;
    f464:	e7f9      	b.n	f45a <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    f466:	2101      	movs	r1, #1
    f468:	4801      	ldr	r0, [pc, #4]	; (f470 <clock_event_handler+0x48>)
    f46a:	f00d fc13 	bl	1cc94 <clkstarted_handle>
}
    f46e:	e7f4      	b.n	f45a <clock_event_handler+0x32>
    f470:	000200d4 	.word	0x000200d4

0000f474 <generic_hfclk_start>:
{
    f474:	b510      	push	{r4, lr}
	__asm__ volatile(
    f476:	f04f 0320 	mov.w	r3, #32
    f47a:	f3ef 8411 	mrs	r4, BASEPRI
    f47e:	f383 8812 	msr	BASEPRI_MAX, r3
    f482:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    f486:	4a13      	ldr	r2, [pc, #76]	; (f4d4 <generic_hfclk_start+0x60>)
    f488:	6813      	ldr	r3, [r2, #0]
    f48a:	f043 0302 	orr.w	r3, r3, #2
    f48e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    f490:	f013 0f01 	tst.w	r3, #1
    f494:	d108      	bne.n	f4a8 <generic_hfclk_start+0x34>
	bool already_started = false;
    f496:	2300      	movs	r3, #0
	__asm__ volatile(
    f498:	f384 8811 	msr	BASEPRI, r4
    f49c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    f4a0:	b99b      	cbnz	r3, f4ca <generic_hfclk_start+0x56>
	hfclk_start();
    f4a2:	f00d fc4f 	bl	1cd44 <hfclk_start>
}
    f4a6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f4a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f4ac:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f4b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    f4b4:	f012 0f01 	tst.w	r2, #1
    f4b8:	d101      	bne.n	f4be <generic_hfclk_start+0x4a>
	bool already_started = false;
    f4ba:	2300      	movs	r3, #0
    f4bc:	e7ec      	b.n	f498 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    f4be:	f7ff ff79 	bl	f3b4 <get_hf_flags>
    f4c2:	f00d fbd4 	bl	1cc6e <set_on_state>
			already_started = true;
    f4c6:	2301      	movs	r3, #1
    f4c8:	e7e6      	b.n	f498 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    f4ca:	2100      	movs	r1, #0
    f4cc:	4802      	ldr	r0, [pc, #8]	; (f4d8 <generic_hfclk_start+0x64>)
    f4ce:	f00d fbe1 	bl	1cc94 <clkstarted_handle>
		return;
    f4d2:	e7e8      	b.n	f4a6 <generic_hfclk_start+0x32>
    f4d4:	2000228c 	.word	0x2000228c
    f4d8:	000200d4 	.word	0x000200d4

0000f4dc <generic_hfclk_stop>:
{
    f4dc:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f4de:	4b08      	ldr	r3, [pc, #32]	; (f500 <generic_hfclk_stop+0x24>)
    f4e0:	e8d3 2fef 	ldaex	r2, [r3]
    f4e4:	f022 0102 	bic.w	r1, r2, #2
    f4e8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f4ec:	2800      	cmp	r0, #0
    f4ee:	d1f7      	bne.n	f4e0 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    f4f0:	f012 0f01 	tst.w	r2, #1
    f4f4:	d000      	beq.n	f4f8 <generic_hfclk_stop+0x1c>
}
    f4f6:	bd08      	pop	{r3, pc}
	hfclk_stop();
    f4f8:	f00d fc38 	bl	1cd6c <hfclk_stop>
    f4fc:	e7fb      	b.n	f4f6 <generic_hfclk_stop+0x1a>
    f4fe:	bf00      	nop
    f500:	2000228c 	.word	0x2000228c

0000f504 <api_blocking_start>:
{
    f504:	b500      	push	{lr}
    f506:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f508:	f8cd d000 	str.w	sp, [sp]
    f50c:	f8cd d004 	str.w	sp, [sp, #4]
    f510:	2300      	movs	r3, #0
    f512:	9302      	str	r3, [sp, #8]
    f514:	2301      	movs	r3, #1
    f516:	9303      	str	r3, [sp, #12]
    f518:	ab04      	add	r3, sp, #16
    f51a:	9304      	str	r3, [sp, #16]
    f51c:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    f51e:	466b      	mov	r3, sp
    f520:	4a06      	ldr	r2, [pc, #24]	; (f53c <api_blocking_start+0x38>)
    f522:	f00d fbff 	bl	1cd24 <api_start>
	if (err < 0) {
    f526:	2800      	cmp	r0, #0
    f528:	db05      	blt.n	f536 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
    f52a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f52e:	2300      	movs	r3, #0
    f530:	4668      	mov	r0, sp
    f532:	f006 ff63 	bl	163fc <z_impl_k_sem_take>
}
    f536:	b007      	add	sp, #28
    f538:	f85d fb04 	ldr.w	pc, [sp], #4
    f53c:	0001cd95 	.word	0x0001cd95

0000f540 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    f540:	b570      	push	{r4, r5, r6, lr}
    f542:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f544:	2200      	movs	r2, #0
    f546:	2101      	movs	r1, #1
    f548:	2005      	movs	r0, #5
    f54a:	f7f6 f871 	bl	5630 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    f54e:	4811      	ldr	r0, [pc, #68]	; (f594 <clk_init+0x54>)
    f550:	f004 f978 	bl	13844 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    f554:	4b10      	ldr	r3, [pc, #64]	; (f598 <clk_init+0x58>)
    f556:	4298      	cmp	r0, r3
    f558:	d119      	bne.n	f58e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    f55a:	f00e fe86 	bl	1e26a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    f55e:	2400      	movs	r4, #0
    f560:	2c03      	cmp	r4, #3
    f562:	d812      	bhi.n	f58a <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    f564:	4621      	mov	r1, r4
    f566:	4630      	mov	r0, r6
    f568:	f00d fb2f 	bl	1cbca <get_sub_data>
    f56c:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    f56e:	4621      	mov	r1, r4
    f570:	4630      	mov	r0, r6
    f572:	f00d fb37 	bl	1cbe4 <get_onoff_manager>
    f576:	4909      	ldr	r1, [pc, #36]	; (f59c <clk_init+0x5c>)
    f578:	f008 fdf2 	bl	18160 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    f57c:	2800      	cmp	r0, #0
    f57e:	db05      	blt.n	f58c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f580:	2301      	movs	r3, #1
    f582:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    f584:	441c      	add	r4, r3
    f586:	b2e4      	uxtb	r4, r4
    f588:	e7ea      	b.n	f560 <clk_init+0x20>
	}

	return 0;
    f58a:	2000      	movs	r0, #0
}
    f58c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    f58e:	f06f 0004 	mvn.w	r0, #4
    f592:	e7fb      	b.n	f58c <clk_init+0x4c>
    f594:	0000f429 	.word	0x0000f429
    f598:	0bad0000 	.word	0x0bad0000
    f59c:	00022b80 	.word	0x00022b80

0000f5a0 <lfclk_spinwait>:
{
    f5a0:	b570      	push	{r4, r5, r6, lr}
    f5a2:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    f5a4:	2801      	cmp	r0, #1
    f5a6:	d107      	bne.n	f5b8 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    f5a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5ac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    f5b0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    f5b4:	2b02      	cmp	r3, #2
    f5b6:	d03f      	beq.n	f638 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f5b8:	f00f ff35 	bl	1f426 <k_is_in_isr>
    f5bc:	b920      	cbnz	r0, f5c8 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    f5be:	4b31      	ldr	r3, [pc, #196]	; (f684 <lfclk_spinwait+0xe4>)
    f5c0:	781b      	ldrb	r3, [r3, #0]
    f5c2:	b19b      	cbz	r3, f5ec <lfclk_spinwait+0x4c>
    f5c4:	2300      	movs	r3, #0
    f5c6:	e000      	b.n	f5ca <lfclk_spinwait+0x2a>
    f5c8:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    f5ca:	461c      	mov	r4, r3
    f5cc:	b183      	cbz	r3, f5f0 <lfclk_spinwait+0x50>
	__asm__ volatile(
    f5ce:	f04f 0320 	mov.w	r3, #32
    f5d2:	f3ef 8611 	mrs	r6, BASEPRI
    f5d6:	f383 8812 	msr	BASEPRI_MAX, r3
    f5da:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    f5de:	b9a4      	cbnz	r4, f60a <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    f5e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f5e4:	2202      	movs	r2, #2
    f5e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f5ea:	e00e      	b.n	f60a <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f5ec:	2301      	movs	r3, #1
    f5ee:	e7ec      	b.n	f5ca <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    f5f0:	2600      	movs	r6, #0
    f5f2:	e7f4      	b.n	f5de <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    f5f4:	b30c      	cbz	r4, f63a <lfclk_spinwait+0x9a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    f5f6:	4630      	mov	r0, r6
    f5f8:	f7f5 febe 	bl	5378 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    f5fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f600:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    f604:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    f606:	2b01      	cmp	r3, #1
    f608:	d01c      	beq.n	f644 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f60a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    f60e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    f612:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f616:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    f61a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    f61e:	d128      	bne.n	f672 <lfclk_spinwait+0xd2>
    return false;
    f620:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    f622:	2a00      	cmp	r2, #0
    f624:	d0e6      	beq.n	f5f4 <lfclk_spinwait+0x54>
    f626:	2b02      	cmp	r3, #2
    f628:	d001      	beq.n	f62e <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    f62a:	2d01      	cmp	r5, #1
    f62c:	d1e2      	bne.n	f5f4 <lfclk_spinwait+0x54>
	if (isr_mode) {
    f62e:	b314      	cbz	r4, f676 <lfclk_spinwait+0xd6>
	__asm__ volatile(
    f630:	f386 8811 	msr	BASEPRI, r6
    f634:	f3bf 8f6f 	isb	sy
}
    f638:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    f63a:	2021      	movs	r0, #33	; 0x21
    f63c:	2100      	movs	r1, #0
    f63e:	f007 fc81 	bl	16f44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f642:	e7db      	b.n	f5fc <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f644:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f648:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    f64c:	2b00      	cmp	r3, #0
    f64e:	d0dc      	beq.n	f60a <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f650:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f654:	2200      	movs	r2, #0
    f656:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f65a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    f65e:	2202      	movs	r2, #2
    f660:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f664:	4a08      	ldr	r2, [pc, #32]	; (f688 <lfclk_spinwait+0xe8>)
    f666:	2120      	movs	r1, #32
    f668:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f66c:	2201      	movs	r2, #1
    f66e:	609a      	str	r2, [r3, #8]
}
    f670:	e7cb      	b.n	f60a <lfclk_spinwait+0x6a>
                return true;
    f672:	2201      	movs	r2, #1
    f674:	e7d5      	b.n	f622 <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    f676:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    f67a:	2202      	movs	r2, #2
    f67c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f680:	e7da      	b.n	f638 <lfclk_spinwait+0x98>
    f682:	bf00      	nop
    f684:	20002b7d 	.word	0x20002b7d
    f688:	e000e100 	.word	0xe000e100

0000f68c <z_nrf_clock_control_lf_on>:
{
    f68c:	b510      	push	{r4, lr}
    f68e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f690:	4b0e      	ldr	r3, [pc, #56]	; (f6cc <z_nrf_clock_control_lf_on+0x40>)
    f692:	2101      	movs	r1, #1
    f694:	e8d3 2fef 	ldaex	r2, [r3]
    f698:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f69c:	2800      	cmp	r0, #0
    f69e:	d1f9      	bne.n	f694 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    f6a0:	b11a      	cbz	r2, f6aa <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    f6a2:	1e63      	subs	r3, r4, #1
    f6a4:	2b01      	cmp	r3, #1
    f6a6:	d90d      	bls.n	f6c4 <z_nrf_clock_control_lf_on+0x38>
}
    f6a8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    f6aa:	4809      	ldr	r0, [pc, #36]	; (f6d0 <z_nrf_clock_control_lf_on+0x44>)
    f6ac:	f00d fa9a 	bl	1cbe4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    f6b0:	4908      	ldr	r1, [pc, #32]	; (f6d4 <z_nrf_clock_control_lf_on+0x48>)
    f6b2:	2300      	movs	r3, #0
    f6b4:	604b      	str	r3, [r1, #4]
    f6b6:	608b      	str	r3, [r1, #8]
    f6b8:	60cb      	str	r3, [r1, #12]
    f6ba:	2301      	movs	r3, #1
    f6bc:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    f6be:	f008 fd6c 	bl	1819a <onoff_request>
    f6c2:	e7ee      	b.n	f6a2 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    f6c4:	4620      	mov	r0, r4
    f6c6:	f7ff ff6b 	bl	f5a0 <lfclk_spinwait>
		break;
    f6ca:	e7ed      	b.n	f6a8 <z_nrf_clock_control_lf_on+0x1c>
    f6cc:	20002290 	.word	0x20002290
    f6d0:	000200d4 	.word	0x000200d4
    f6d4:	200021dc 	.word	0x200021dc

0000f6d8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    f6d8:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    f6da:	4c04      	ldr	r4, [pc, #16]	; (f6ec <rtt_console_init+0x14>)
    f6dc:	4620      	mov	r0, r4
    f6de:	f7f2 fe63 	bl	23a8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    f6e2:	4620      	mov	r0, r4
    f6e4:	f7f7 fa88 	bl	6bf8 <__stdout_hook_install>

	return 0;
}
    f6e8:	2000      	movs	r0, #0
    f6ea:	bd10      	pop	{r4, pc}
    f6ec:	0000f6f1 	.word	0x0000f6f1

0000f6f0 <rtt_console_out>:
{
    f6f0:	b570      	push	{r4, r5, r6, lr}
    f6f2:	b082      	sub	sp, #8
    f6f4:	4606      	mov	r6, r0
	char c = (char)character;
    f6f6:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    f6fa:	2502      	movs	r5, #2
		SEGGER_RTT_LOCK();
    f6fc:	f006 f96c 	bl	159d8 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    f700:	2201      	movs	r2, #1
    f702:	f10d 0107 	add.w	r1, sp, #7
    f706:	2000      	movs	r0, #0
    f708:	f006 f920 	bl	1594c <SEGGER_RTT_WriteNoLock>
    f70c:	4604      	mov	r4, r0
		SEGGER_RTT_UNLOCK();
    f70e:	f006 f96f 	bl	159f0 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    f712:	b93c      	cbnz	r4, f724 <rtt_console_out+0x34>
		} else if (host_present) {
    f714:	4b08      	ldr	r3, [pc, #32]	; (f738 <rtt_console_out+0x48>)
    f716:	781b      	ldrb	r3, [r3, #0]
    f718:	b15b      	cbz	r3, f732 <rtt_console_out+0x42>
			if (max_cnt) {
    f71a:	b13d      	cbz	r5, f72c <rtt_console_out+0x3c>
				wait();
    f71c:	f00d fb3f 	bl	1cd9e <wait>
				max_cnt--;
    f720:	3d01      	subs	r5, #1
		SEGGER_RTT_LOCK();
    f722:	e7eb      	b.n	f6fc <rtt_console_out+0xc>
			host_present = true;
    f724:	4b04      	ldr	r3, [pc, #16]	; (f738 <rtt_console_out+0x48>)
    f726:	2201      	movs	r2, #1
    f728:	701a      	strb	r2, [r3, #0]
    f72a:	e002      	b.n	f732 <rtt_console_out+0x42>
				host_present = false;
    f72c:	4b02      	ldr	r3, [pc, #8]	; (f738 <rtt_console_out+0x48>)
    f72e:	2200      	movs	r2, #0
    f730:	701a      	strb	r2, [r3, #0]
}
    f732:	4630      	mov	r0, r6
    f734:	b002      	add	sp, #8
    f736:	bd70      	pop	{r4, r5, r6, pc}
    f738:	20002b7a 	.word	0x20002b7a

0000f73c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    f73c:	b510      	push	{r4, lr}
    f73e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    f740:	280a      	cmp	r0, #10
    f742:	d007      	beq.n	f754 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    f744:	4b07      	ldr	r3, [pc, #28]	; (f764 <console_out+0x28>)
    f746:	6818      	ldr	r0, [r3, #0]
    f748:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    f74a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    f74c:	685b      	ldr	r3, [r3, #4]
    f74e:	4798      	blx	r3

	return c;
}
    f750:	4620      	mov	r0, r4
    f752:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    f754:	4b03      	ldr	r3, [pc, #12]	; (f764 <console_out+0x28>)
    f756:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    f758:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    f75a:	685b      	ldr	r3, [r3, #4]
    f75c:	210d      	movs	r1, #13
    f75e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    f760:	e7f0      	b.n	f744 <console_out+0x8>
    f762:	bf00      	nop
    f764:	20002294 	.word	0x20002294

0000f768 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    f768:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    f76a:	4c04      	ldr	r4, [pc, #16]	; (f77c <uart_console_hook_install+0x14>)
    f76c:	4620      	mov	r0, r4
    f76e:	f7f7 fa43 	bl	6bf8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    f772:	4620      	mov	r0, r4
    f774:	f7f2 fe18 	bl	23a8 <__printk_hook_install>
#endif
}
    f778:	bd10      	pop	{r4, pc}
    f77a:	bf00      	nop
    f77c:	0000f73d 	.word	0x0000f73d

0000f780 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    f780:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    f782:	4806      	ldr	r0, [pc, #24]	; (f79c <uart_console_init+0x1c>)
    f784:	4b06      	ldr	r3, [pc, #24]	; (f7a0 <uart_console_init+0x20>)
    f786:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    f788:	f00f fd6d 	bl	1f266 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    f78c:	b118      	cbz	r0, f796 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    f78e:	f7ff ffeb 	bl	f768 <uart_console_hook_install>

	return 0;
    f792:	2000      	movs	r0, #0
}
    f794:	bd08      	pop	{r3, pc}
		return -ENODEV;
    f796:	f06f 0012 	mvn.w	r0, #18
    f79a:	e7fb      	b.n	f794 <uart_console_init+0x14>
    f79c:	0002011c 	.word	0x0002011c
    f7a0:	20002294 	.word	0x20002294

0000f7a4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f7a4:	b128      	cbz	r0, f7b2 <get_dev+0xe>
    f7a6:	2801      	cmp	r0, #1
    f7a8:	d101      	bne.n	f7ae <get_dev+0xa>
    f7aa:	4803      	ldr	r0, [pc, #12]	; (f7b8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    f7ac:	4770      	bx	lr
	const struct device *dev = NULL;
    f7ae:	2000      	movs	r0, #0
    f7b0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f7b2:	4802      	ldr	r0, [pc, #8]	; (f7bc <get_dev+0x18>)
    f7b4:	4770      	bx	lr
    f7b6:	bf00      	nop
    f7b8:	000200ec 	.word	0x000200ec
    f7bc:	00020104 	.word	0x00020104

0000f7c0 <gpio_nrfx_pin_interrupt_configure>:
{
    f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7c2:	b085      	sub	sp, #20
    f7c4:	460e      	mov	r6, r1
    f7c6:	4619      	mov	r1, r3
	return port->config;
    f7c8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f7ca:	7b1b      	ldrb	r3, [r3, #12]
    f7cc:	f006 051f 	and.w	r5, r6, #31
    f7d0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    f7d4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    f7d8:	d022      	beq.n	f820 <gpio_nrfx_pin_interrupt_configure+0x60>
    f7da:	4607      	mov	r7, r0
    f7dc:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    f7de:	2300      	movs	r3, #0
    f7e0:	9301      	str	r3, [sp, #4]
    f7e2:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    f7e4:	4610      	mov	r0, r2
    f7e6:	f00d fb57 	bl	1ce98 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    f7ea:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    f7ee:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    f7f0:	6899      	ldr	r1, [r3, #8]
    f7f2:	40f1      	lsrs	r1, r6
    f7f4:	f011 0f01 	tst.w	r1, #1
    f7f8:	d102      	bne.n	f800 <gpio_nrfx_pin_interrupt_configure+0x40>
    f7fa:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    f7fe:	d014      	beq.n	f82a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f800:	2300      	movs	r3, #0
    f802:	aa01      	add	r2, sp, #4
    f804:	4619      	mov	r1, r3
    f806:	4628      	mov	r0, r5
    f808:	f004 fac0 	bl	13d8c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    f80c:	4b1a      	ldr	r3, [pc, #104]	; (f878 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    f80e:	4298      	cmp	r0, r3
    f810:	d12f      	bne.n	f872 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    f812:	2101      	movs	r1, #1
    f814:	4628      	mov	r0, r5
    f816:	f004 fc9b 	bl	14150 <nrfx_gpiote_trigger_enable>
	return 0;
    f81a:	2000      	movs	r0, #0
}
    f81c:	b005      	add	sp, #20
    f81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    f820:	4628      	mov	r0, r5
    f822:	f004 fcf7 	bl	14214 <nrfx_gpiote_trigger_disable>
		return 0;
    f826:	2000      	movs	r0, #0
    f828:	e7f8      	b.n	f81c <gpio_nrfx_pin_interrupt_configure+0x5c>
    *p_pin = pin_number & 0x1F;
    f82a:	f005 031f 	and.w	r3, r5, #31
    return pin_number >> 5;
    f82e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f830:	2a01      	cmp	r2, #1
    f832:	d012      	beq.n	f85a <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    f834:	4a11      	ldr	r2, [pc, #68]	; (f87c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f836:	3380      	adds	r3, #128	; 0x80
    f838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    f83c:	f013 0f01 	tst.w	r3, #1
    f840:	d1de      	bne.n	f800 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f842:	f10d 010f 	add.w	r1, sp, #15
    f846:	4628      	mov	r0, r5
    f848:	f004 fc26 	bl	14098 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    f84c:	4b0c      	ldr	r3, [pc, #48]	; (f880 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    f84e:	4298      	cmp	r0, r3
    f850:	d005      	beq.n	f85e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    f852:	f10d 030f 	add.w	r3, sp, #15
    f856:	9302      	str	r3, [sp, #8]
    f858:	e7d2      	b.n	f800 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    f85a:	4a0a      	ldr	r2, [pc, #40]	; (f884 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    f85c:	e7eb      	b.n	f836 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    f85e:	f10d 000f 	add.w	r0, sp, #15
    f862:	f004 fc6d 	bl	14140 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    f866:	4b04      	ldr	r3, [pc, #16]	; (f878 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    f868:	4298      	cmp	r0, r3
    f86a:	d0f2      	beq.n	f852 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    f86c:	f06f 000b 	mvn.w	r0, #11
    f870:	e7d4      	b.n	f81c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    f872:	f06f 0015 	mvn.w	r0, #21
    f876:	e7d1      	b.n	f81c <gpio_nrfx_pin_interrupt_configure+0x5c>
    f878:	0bad0000 	.word	0x0bad0000
    f87c:	50842500 	.word	0x50842500
    f880:	0bad0004 	.word	0x0bad0004
    f884:	50842800 	.word	0x50842800

0000f888 <gpio_nrfx_pin_configure>:
{
    f888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f88c:	b086      	sub	sp, #24
    f88e:	460e      	mov	r6, r1
    f890:	4614      	mov	r4, r2
	return port->config;
    f892:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f896:	f898 300c 	ldrb.w	r3, [r8, #12]
    f89a:	f001 051f 	and.w	r5, r1, #31
    f89e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f8a2:	f10d 0117 	add.w	r1, sp, #23
    f8a6:	4628      	mov	r0, r5
    f8a8:	f004 fbf6 	bl	14098 <nrfx_gpiote_channel_get>
    f8ac:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    f8ae:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    f8b2:	d03a      	beq.n	f92a <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    f8b4:	2100      	movs	r1, #0
    f8b6:	9103      	str	r1, [sp, #12]
    f8b8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f8ba:	460b      	mov	r3, r1
    f8bc:	aa03      	add	r2, sp, #12
    f8be:	4628      	mov	r0, r5
    f8c0:	f004 fa64 	bl	13d8c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    f8c4:	4b33      	ldr	r3, [pc, #204]	; (f994 <gpio_nrfx_pin_configure+0x10c>)
    f8c6:	4298      	cmp	r0, r3
    f8c8:	d161      	bne.n	f98e <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    f8ca:	429f      	cmp	r7, r3
    f8cc:	d03d      	beq.n	f94a <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    f8ce:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    f8d2:	d049      	beq.n	f968 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    f8d4:	f10d 0103 	add.w	r1, sp, #3
    f8d8:	4620      	mov	r0, r4
    f8da:	f00d fa6a 	bl	1cdb2 <get_drive>
		if (rv != 0) {
    f8de:	4607      	mov	r7, r0
    f8e0:	bb50      	cbnz	r0, f938 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    f8e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f8e6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    f8ea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    f8ee:	bf0c      	ite	eq
    f8f0:	2301      	moveq	r3, #1
    f8f2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    f8f4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    f8f8:	4620      	mov	r0, r4
    f8fa:	f00d fa9d 	bl	1ce38 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    f8fe:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    f902:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    f906:	d025      	beq.n	f954 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    f908:	f8d8 3004 	ldr.w	r3, [r8, #4]
    f90c:	2101      	movs	r1, #1
    f90e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    f912:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    f914:	2200      	movs	r2, #0
    f916:	a901      	add	r1, sp, #4
    f918:	4628      	mov	r0, r5
    f91a:	f004 faf1 	bl	13f00 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    f91e:	4b1d      	ldr	r3, [pc, #116]	; (f994 <gpio_nrfx_pin_configure+0x10c>)
    f920:	4298      	cmp	r0, r3
    f922:	d009      	beq.n	f938 <gpio_nrfx_pin_configure+0xb0>
    f924:	f06f 0715 	mvn.w	r7, #21
    f928:	e006      	b.n	f938 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    f92a:	4628      	mov	r0, r5
    f92c:	f004 fca2 	bl	14274 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    f930:	4b18      	ldr	r3, [pc, #96]	; (f994 <gpio_nrfx_pin_configure+0x10c>)
    f932:	429f      	cmp	r7, r3
    f934:	d004      	beq.n	f940 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    f936:	2700      	movs	r7, #0
}
    f938:	4638      	mov	r0, r7
    f93a:	b006      	add	sp, #24
    f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    f940:	f89d 0017 	ldrb.w	r0, [sp, #23]
    f944:	f004 fbf4 	bl	14130 <nrfx_gpiote_channel_free>
    f948:	e7f5      	b.n	f936 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    f94a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    f94e:	f004 fbef 	bl	14130 <nrfx_gpiote_channel_free>
    f952:	e7bc      	b.n	f8ce <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    f954:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    f958:	d0dc      	beq.n	f914 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    f95a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    f95e:	2301      	movs	r3, #1
    f960:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
    f964:	60d6      	str	r6, [r2, #12]
}
    f966:	e7d5      	b.n	f914 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    f968:	4620      	mov	r0, r4
    f96a:	f00d fa65 	bl	1ce38 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    f96e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f972:	2300      	movs	r3, #0
    f974:	461a      	mov	r2, r3
    f976:	a902      	add	r1, sp, #8
    f978:	4628      	mov	r0, r5
    f97a:	f004 fa07 	bl	13d8c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    f97e:	4b05      	ldr	r3, [pc, #20]	; (f994 <gpio_nrfx_pin_configure+0x10c>)
    f980:	4298      	cmp	r0, r3
    f982:	d101      	bne.n	f988 <gpio_nrfx_pin_configure+0x100>
    f984:	2700      	movs	r7, #0
    f986:	e7d7      	b.n	f938 <gpio_nrfx_pin_configure+0xb0>
    f988:	f06f 0715 	mvn.w	r7, #21
    f98c:	e7d4      	b.n	f938 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    f98e:	f06f 0715 	mvn.w	r7, #21
    f992:	e7d1      	b.n	f938 <gpio_nrfx_pin_configure+0xb0>
    f994:	0bad0000 	.word	0x0bad0000

0000f998 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    f998:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    f99a:	f004 fbbf 	bl	1411c <nrfx_gpiote_is_init>
    f99e:	b108      	cbz	r0, f9a4 <gpio_nrfx_init+0xc>
		return 0;
    f9a0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    f9a2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    f9a4:	f004 fb90 	bl	140c8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    f9a8:	4b08      	ldr	r3, [pc, #32]	; (f9cc <gpio_nrfx_init+0x34>)
    f9aa:	4298      	cmp	r0, r3
    f9ac:	d10a      	bne.n	f9c4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    f9ae:	2100      	movs	r1, #0
    f9b0:	4807      	ldr	r0, [pc, #28]	; (f9d0 <gpio_nrfx_init+0x38>)
    f9b2:	f004 fb6b 	bl	1408c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    f9b6:	2200      	movs	r2, #0
    f9b8:	2105      	movs	r1, #5
    f9ba:	200d      	movs	r0, #13
    f9bc:	f7f5 fe38 	bl	5630 <z_arm_irq_priority_set>
	return 0;
    f9c0:	2000      	movs	r0, #0
    f9c2:	e7ee      	b.n	f9a2 <gpio_nrfx_init+0xa>
		return -EIO;
    f9c4:	f06f 0004 	mvn.w	r0, #4
    f9c8:	e7eb      	b.n	f9a2 <gpio_nrfx_init+0xa>
    f9ca:	bf00      	nop
    f9cc:	0bad0000 	.word	0x0bad0000
    f9d0:	0001cf37 	.word	0x0001cf37

0000f9d4 <i2c_nrfx_twim_configure>:
}

static int i2c_nrfx_twim_configure(const struct device *dev,
				   uint32_t i2c_config)
{
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    f9d4:	6843      	ldr	r3, [r0, #4]

	if (I2C_ADDR_10_BITS & i2c_config) {
    f9d6:	f011 0f01 	tst.w	r1, #1
    f9da:	d148      	bne.n	fa6e <i2c_nrfx_twim_configure+0x9a>
		return -EINVAL;
	}

	switch (I2C_SPEED_GET(i2c_config)) {
    f9dc:	f3c1 0142 	ubfx	r1, r1, #1, #3
    f9e0:	2902      	cmp	r1, #2
    f9e2:	d036      	beq.n	fa52 <i2c_nrfx_twim_configure+0x7e>
    f9e4:	2903      	cmp	r1, #3
    f9e6:	d03b      	beq.n	fa60 <i2c_nrfx_twim_configure+0x8c>
    f9e8:	2901      	cmp	r1, #1
    f9ea:	d02b      	beq.n	fa44 <i2c_nrfx_twim_configure+0x70>
{
    f9ec:	b500      	push	{lr}
    f9ee:	b089      	sub	sp, #36	; 0x24
		nrf_twim_frequency_set(dev_config->twim.p_twim,
				       NRF_TWIM_FREQ_1000K);
		break;
#endif
	default:
		LOG_ERR("unsupported speed");
    f9f0:	4b20      	ldr	r3, [pc, #128]	; (fa74 <i2c_nrfx_twim_configure+0xa0>)
    f9f2:	9307      	str	r3, [sp, #28]
    f9f4:	2302      	movs	r3, #2
    f9f6:	f88d 3004 	strb.w	r3, [sp, #4]
    f9fa:	2300      	movs	r3, #0
    f9fc:	f88d 3005 	strb.w	r3, [sp, #5]
    fa00:	f88d 3006 	strb.w	r3, [sp, #6]
    fa04:	f88d 3007 	strb.w	r3, [sp, #7]
    fa08:	9a01      	ldr	r2, [sp, #4]
    fa0a:	9206      	str	r2, [sp, #24]
    fa0c:	4619      	mov	r1, r3
    fa0e:	f363 0100 	bfi	r1, r3, #0, #1
    fa12:	f363 0141 	bfi	r1, r3, #1, #1
    fa16:	f363 0182 	bfi	r1, r3, #2, #1
    fa1a:	f363 01c5 	bfi	r1, r3, #3, #3
    fa1e:	2201      	movs	r2, #1
    fa20:	f362 1188 	bfi	r1, r2, #6, #3
    fa24:	2208      	movs	r2, #8
    fa26:	f362 2152 	bfi	r1, r2, #9, #10
    fa2a:	f363 41de 	bfi	r1, r3, #19, #12
    fa2e:	f363 71df 	bfi	r1, r3, #31, #1
    fa32:	aa06      	add	r2, sp, #24
    fa34:	4810      	ldr	r0, [pc, #64]	; (fa78 <i2c_nrfx_twim_configure+0xa4>)
    fa36:	f7f3 fe49 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
    fa3a:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
    fa3e:	b009      	add	sp, #36	; 0x24
    fa40:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    fa44:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    fa46:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    fa4a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    fa4e:	2000      	movs	r0, #0
}
    fa50:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    fa52:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    fa54:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    fa58:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    fa5c:	2000      	movs	r0, #0
}
    fa5e:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    fa60:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    fa62:	f04f 627f 	mov.w	r2, #267386880	; 0xff00000
    fa66:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    fa6a:	2000      	movs	r0, #0
}
    fa6c:	4770      	bx	lr
		return -EINVAL;
    fa6e:	f06f 0015 	mvn.w	r0, #21
}
    fa72:	4770      	bx	lr
    fa74:	00022bec 	.word	0x00022bec
    fa78:	00020588 	.word	0x00020588

0000fa7c <event_handler>:
{
    fa7c:	b508      	push	{r3, lr}
	switch (p_event->type) {
    fa7e:	7803      	ldrb	r3, [r0, #0]
    fa80:	2b01      	cmp	r3, #1
    fa82:	d00c      	beq.n	fa9e <event_handler+0x22>
    fa84:	2b02      	cmp	r3, #2
    fa86:	d00d      	beq.n	faa4 <event_handler+0x28>
    fa88:	b113      	cbz	r3, fa90 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    fa8a:	4b08      	ldr	r3, [pc, #32]	; (faac <event_handler+0x30>)
    fa8c:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    fa8e:	e001      	b.n	fa94 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    fa90:	4b07      	ldr	r3, [pc, #28]	; (fab0 <event_handler+0x34>)
    fa92:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
    fa94:	f101 0018 	add.w	r0, r1, #24
	z_impl_k_sem_give(sem);
    fa98:	f006 fc88 	bl	163ac <z_impl_k_sem_give>
}
    fa9c:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    fa9e:	4b05      	ldr	r3, [pc, #20]	; (fab4 <event_handler+0x38>)
    faa0:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    faa2:	e7f7      	b.n	fa94 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    faa4:	4b04      	ldr	r3, [pc, #16]	; (fab8 <event_handler+0x3c>)
    faa6:	630b      	str	r3, [r1, #48]	; 0x30
		break;
    faa8:	e7f4      	b.n	fa94 <event_handler+0x18>
    faaa:	bf00      	nop
    faac:	0bad0001 	.word	0x0bad0001
    fab0:	0bad0000 	.word	0x0bad0000
    fab4:	0bae0001 	.word	0x0bae0001
    fab8:	0bae0002 	.word	0x0bae0002

0000fabc <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    fabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fac0:	b082      	sub	sp, #8
    fac2:	af00      	add	r7, sp, #0
    fac4:	4604      	mov	r4, r0
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    fac6:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    fac8:	f8d0 8010 	ldr.w	r8, [r0, #16]

	dev_config->irq_connect();
    facc:	69eb      	ldr	r3, [r5, #28]
    face:	4798      	blx	r3

#ifdef CONFIG_PINCTRL
	int err = pinctrl_apply_state(dev_config->pcfg,
    fad0:	6a2e      	ldr	r6, [r5, #32]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    fad2:	1d3a      	adds	r2, r7, #4
    fad4:	2100      	movs	r1, #0
    fad6:	4630      	mov	r0, r6
    fad8:	f00e fadc 	bl	1e094 <pinctrl_lookup_state>
	if (ret < 0) {
    fadc:	2800      	cmp	r0, #0
    fade:	db05      	blt.n	faec <i2c_nrfx_twim_init+0x30>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    fae0:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    fae2:	6832      	ldr	r2, [r6, #0]
    fae4:	7919      	ldrb	r1, [r3, #4]
    fae6:	6818      	ldr	r0, [r3, #0]
    fae8:	f003 f900 	bl	12cec <pinctrl_configure_pins>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    faec:	2800      	cmp	r0, #0
    faee:	db0d      	blt.n	fb0c <i2c_nrfx_twim_init+0x50>
		return err;
	}
#endif

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    faf0:	4643      	mov	r3, r8
    faf2:	4a31      	ldr	r2, [pc, #196]	; (fbb8 <i2c_nrfx_twim_init+0xfc>)
    faf4:	f105 0108 	add.w	r1, r5, #8
    faf8:	4628      	mov	r0, r5
    fafa:	f005 f9db 	bl	14eb4 <nrfx_twim_init>
    fafe:	4b2f      	ldr	r3, [pc, #188]	; (fbbc <i2c_nrfx_twim_init+0x100>)
    fb00:	4298      	cmp	r0, r3
    fb02:	d107      	bne.n	fb14 <i2c_nrfx_twim_init+0x58>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    fb04:	4628      	mov	r0, r5
    fb06:	f005 fa1f 	bl	14f48 <nrfx_twim_enable>
#endif

	return 0;
    fb0a:	2000      	movs	r0, #0
}
    fb0c:	3708      	adds	r7, #8
    fb0e:	46bd      	mov	sp, r7
    fb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Failed to initialize device: %s", dev->name);
    fb14:	6820      	ldr	r0, [r4, #0]
    fb16:	2302      	movs	r3, #2
    fb18:	713b      	strb	r3, [r7, #4]
    fb1a:	466c      	mov	r4, sp
    fb1c:	b088      	sub	sp, #32
    fb1e:	466b      	mov	r3, sp
    fb20:	f113 0210 	adds.w	r2, r3, #16
    fb24:	d039      	beq.n	fb9a <i2c_nrfx_twim_init+0xde>
    fb26:	250d      	movs	r5, #13
    fb28:	b11a      	cbz	r2, fb32 <i2c_nrfx_twim_init+0x76>
    fb2a:	2d04      	cmp	r5, #4
    fb2c:	dd01      	ble.n	fb32 <i2c_nrfx_twim_init+0x76>
    fb2e:	4924      	ldr	r1, [pc, #144]	; (fbc0 <i2c_nrfx_twim_init+0x104>)
    fb30:	6159      	str	r1, [r3, #20]
    fb32:	2102      	movs	r1, #2
    fb34:	7039      	strb	r1, [r7, #0]
    fb36:	b112      	cbz	r2, fb3e <i2c_nrfx_twim_init+0x82>
    fb38:	2d08      	cmp	r5, #8
    fb3a:	dd00      	ble.n	fb3e <i2c_nrfx_twim_init+0x82>
    fb3c:	6198      	str	r0, [r3, #24]
    fb3e:	b11a      	cbz	r2, fb48 <i2c_nrfx_twim_init+0x8c>
    fb40:	f103 011c 	add.w	r1, r3, #28
    fb44:	2000      	movs	r0, #0
    fb46:	b358      	cbz	r0, fba0 <i2c_nrfx_twim_init+0xe4>
    fb48:	2d0c      	cmp	r5, #12
    fb4a:	dd32      	ble.n	fbb2 <i2c_nrfx_twim_init+0xf6>
    fb4c:	250d      	movs	r5, #13
    fb4e:	b142      	cbz	r2, fb62 <i2c_nrfx_twim_init+0xa6>
    fb50:	2103      	movs	r1, #3
    fb52:	7139      	strb	r1, [r7, #4]
    fb54:	2100      	movs	r1, #0
    fb56:	7179      	strb	r1, [r7, #5]
    fb58:	71b9      	strb	r1, [r7, #6]
    fb5a:	2101      	movs	r1, #1
    fb5c:	71f9      	strb	r1, [r7, #7]
    fb5e:	6878      	ldr	r0, [r7, #4]
    fb60:	6118      	str	r0, [r3, #16]
    fb62:	2100      	movs	r1, #0
    fb64:	f36f 0100 	bfc	r1, #0, #1
    fb68:	f36f 0141 	bfc	r1, #1, #1
    fb6c:	f36f 0182 	bfc	r1, #2, #1
    fb70:	f36f 01c5 	bfc	r1, #3, #3
    fb74:	2301      	movs	r3, #1
    fb76:	f363 1188 	bfi	r1, r3, #6, #3
    fb7a:	f3c5 0309 	ubfx	r3, r5, #0, #10
    fb7e:	f363 2152 	bfi	r1, r3, #9, #10
    fb82:	f36f 41de 	bfc	r1, #19, #12
    fb86:	f36f 71df 	bfc	r1, #31, #1
    fb8a:	2300      	movs	r3, #0
    fb8c:	480d      	ldr	r0, [pc, #52]	; (fbc4 <i2c_nrfx_twim_init+0x108>)
    fb8e:	f7f3 fd9d 	bl	36cc <z_impl_z_log_msg_static_create>
    fb92:	46a5      	mov	sp, r4
		return -EIO;
    fb94:	f06f 0004 	mvn.w	r0, #4
    fb98:	e7b8      	b.n	fb0c <i2c_nrfx_twim_init+0x50>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    fb9a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    fb9e:	e7c3      	b.n	fb28 <i2c_nrfx_twim_init+0x6c>
    fba0:	f107 0608 	add.w	r6, r7, #8
    fba4:	4406      	add	r6, r0
    fba6:	f816 6c08 	ldrb.w	r6, [r6, #-8]
    fbaa:	f801 6b01 	strb.w	r6, [r1], #1
    fbae:	3001      	adds	r0, #1
    fbb0:	e7c9      	b.n	fb46 <i2c_nrfx_twim_init+0x8a>
    fbb2:	f06f 051b 	mvn.w	r5, #27
    fbb6:	e7ca      	b.n	fb4e <i2c_nrfx_twim_init+0x92>
    fbb8:	0000fa7d 	.word	0x0000fa7d
    fbbc:	0bad0000 	.word	0x0bad0000
    fbc0:	00022c00 	.word	0x00022c00
    fbc4:	00020588 	.word	0x00020588

0000fbc8 <i2c_nrfx_twim_recover_bus>:
{
    fbc8:	b570      	push	{r4, r5, r6, lr}
    fbca:	b082      	sub	sp, #8
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    fbcc:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    fbce:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
    fbd0:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
    return p_reg->PSEL.SDA;
    fbd4:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    fbd8:	4620      	mov	r0, r4
    fbda:	f005 f9c5 	bl	14f68 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    fbde:	4631      	mov	r1, r6
    fbe0:	4628      	mov	r0, r5
    fbe2:	f005 f9f9 	bl	14fd8 <nrfx_twi_twim_bus_recover>
    fbe6:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    fbe8:	6a26      	ldr	r6, [r4, #32]
	ret = pinctrl_lookup_state(config, id, &state);
    fbea:	aa01      	add	r2, sp, #4
    fbec:	2100      	movs	r1, #0
    fbee:	4630      	mov	r0, r6
    fbf0:	f00e fa50 	bl	1e094 <pinctrl_lookup_state>
	if (ret < 0) {
    fbf4:	2800      	cmp	r0, #0
    fbf6:	db05      	blt.n	fc04 <i2c_nrfx_twim_recover_bus+0x3c>
	return pinctrl_apply_state_direct(config, state);
    fbf8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    fbfa:	6832      	ldr	r2, [r6, #0]
    fbfc:	7919      	ldrb	r1, [r3, #4]
    fbfe:	6818      	ldr	r0, [r3, #0]
    fc00:	f003 f874 	bl	12cec <pinctrl_configure_pins>
		nrfx_twim_enable(&dev_config->twim);
    fc04:	4620      	mov	r0, r4
    fc06:	f005 f99f 	bl	14f48 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    fc0a:	4b04      	ldr	r3, [pc, #16]	; (fc1c <i2c_nrfx_twim_recover_bus+0x54>)
    fc0c:	429d      	cmp	r5, r3
    fc0e:	d102      	bne.n	fc16 <i2c_nrfx_twim_recover_bus+0x4e>
    fc10:	2000      	movs	r0, #0
}
    fc12:	b002      	add	sp, #8
    fc14:	bd70      	pop	{r4, r5, r6, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    fc16:	f06f 000f 	mvn.w	r0, #15
    fc1a:	e7fa      	b.n	fc12 <i2c_nrfx_twim_recover_bus+0x4a>
    fc1c:	0bad0000 	.word	0x0bad0000

0000fc20 <i2c_nrfx_twim_transfer>:
{
    fc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc24:	b091      	sub	sp, #68	; 0x44
    fc26:	af00      	add	r7, sp, #0
    fc28:	6038      	str	r0, [r7, #0]
    fc2a:	4689      	mov	r9, r1
    fc2c:	4692      	mov	sl, r2
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    fc2e:	6901      	ldr	r1, [r0, #16]
    fc30:	460c      	mov	r4, r1
    fc32:	60b9      	str	r1, [r7, #8]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    fc34:	6842      	ldr	r2, [r0, #4]
    fc36:	60fa      	str	r2, [r7, #12]
	uint8_t *msg_buf = dev_data->msg_buf;
    fc38:	6b48      	ldr	r0, [r1, #52]	; 0x34
    fc3a:	61b8      	str	r0, [r7, #24]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    fc3c:	8b12      	ldrh	r2, [r2, #24]
    fc3e:	613a      	str	r2, [r7, #16]
	nrfx_twim_xfer_desc_t cur_xfer = {
    fc40:	2500      	movs	r5, #0
    fc42:	62fd      	str	r5, [r7, #44]	; 0x2c
    fc44:	633d      	str	r5, [r7, #48]	; 0x30
    fc46:	637d      	str	r5, [r7, #52]	; 0x34
    fc48:	63bd      	str	r5, [r7, #56]	; 0x38
    fc4a:	63fd      	str	r5, [r7, #60]	; 0x3c
    fc4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	return z_impl_k_sem_take(sem, timeout);
    fc50:	f04f 32ff 	mov.w	r2, #4294967295
    fc54:	f04f 33ff 	mov.w	r3, #4294967295
    fc58:	4608      	mov	r0, r1
    fc5a:	f006 fbcf 	bl	163fc <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    fc5e:	f104 0318 	add.w	r3, r4, #24
    fc62:	4618      	mov	r0, r3
    fc64:	607b      	str	r3, [r7, #4]
    fc66:	2200      	movs	r2, #0
    fc68:	2300      	movs	r3, #0
    fc6a:	f006 fbc7 	bl	163fc <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    fc6e:	462e      	mov	r6, r5
	uint16_t msg_buf_used = 0;
    fc70:	462c      	mov	r4, r5
	int ret = 0;
    fc72:	617d      	str	r5, [r7, #20]
	for (size_t i = 0; i < num_msgs; i++) {
    fc74:	e04c      	b.n	fd10 <i2c_nrfx_twim_transfer+0xf0>
				&& ((msgs[i].flags & I2C_MSG_READ)
    fc76:	2200      	movs	r2, #0
		if (concat_next || (msg_buf_used != 0)) {
    fc78:	61fa      	str	r2, [r7, #28]
    fc7a:	b912      	cbnz	r2, fc82 <i2c_nrfx_twim_transfer+0x62>
    fc7c:	2c00      	cmp	r4, #0
    fc7e:	f000 80e1 	beq.w	fe44 <i2c_nrfx_twim_transfer+0x224>
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    fc82:	4620      	mov	r0, r4
    fc84:	686a      	ldr	r2, [r5, #4]
    fc86:	18a1      	adds	r1, r4, r2
    fc88:	f8d7 c010 	ldr.w	ip, [r7, #16]
    fc8c:	4561      	cmp	r1, ip
    fc8e:	d868      	bhi.n	fd62 <i2c_nrfx_twim_transfer+0x142>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    fc90:	f013 0f01 	tst.w	r3, #1
    fc94:	f000 80cf 	beq.w	fe36 <i2c_nrfx_twim_transfer+0x216>
			msg_buf_used += msgs[i].len;
    fc98:	686b      	ldr	r3, [r5, #4]
    fc9a:	441c      	add	r4, r3
    fc9c:	b2a4      	uxth	r4, r4
		if (concat_next) {
    fc9e:	69fb      	ldr	r3, [r7, #28]
    fca0:	2b00      	cmp	r3, #0
    fca2:	d134      	bne.n	fd0e <i2c_nrfx_twim_transfer+0xee>
		if (msg_buf_used == 0) {
    fca4:	2c00      	cmp	r4, #0
    fca6:	f040 8142 	bne.w	ff2e <i2c_nrfx_twim_transfer+0x30e>
			cur_xfer.p_primary_buf = msgs[i].buf;
    fcaa:	f859 300b 	ldr.w	r3, [r9, fp]
    fcae:	63bb      	str	r3, [r7, #56]	; 0x38
			cur_xfer.primary_length = msgs[i].len;
    fcb0:	686b      	ldr	r3, [r5, #4]
    fcb2:	633b      	str	r3, [r7, #48]	; 0x30
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    fcb4:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    fcb6:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    fcba:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    fcbe:	f013 0f02 	tst.w	r3, #2
    fcc2:	f000 8138 	beq.w	ff36 <i2c_nrfx_twim_transfer+0x316>
    fcc6:	2200      	movs	r2, #0
    fcc8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    fccc:	68f8      	ldr	r0, [r7, #12]
    fcce:	f005 f969 	bl	14fa4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    fcd2:	4b9f      	ldr	r3, [pc, #636]	; (ff50 <i2c_nrfx_twim_transfer+0x330>)
    fcd4:	4298      	cmp	r0, r3
    fcd6:	f040 8130 	bne.w	ff3a <i2c_nrfx_twim_transfer+0x31a>
    fcda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    fcde:	2300      	movs	r3, #0
    fce0:	6878      	ldr	r0, [r7, #4]
    fce2:	f006 fb8b 	bl	163fc <z_impl_k_sem_take>
		if (ret != 0) {
    fce6:	6178      	str	r0, [r7, #20]
    fce8:	2800      	cmp	r0, #0
    fcea:	f040 8139 	bne.w	ff60 <i2c_nrfx_twim_transfer+0x340>
		res = dev_data->res;
    fcee:	68bb      	ldr	r3, [r7, #8]
    fcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
    fcf2:	4a97      	ldr	r2, [pc, #604]	; (ff50 <i2c_nrfx_twim_transfer+0x330>)
    fcf4:	4293      	cmp	r3, r2
    fcf6:	f040 8179 	bne.w	ffec <i2c_nrfx_twim_transfer+0x3cc>
		if ((msgs[i].flags & I2C_MSG_READ)
    fcfa:	7a2b      	ldrb	r3, [r5, #8]
    fcfc:	f013 0f01 	tst.w	r3, #1
    fd00:	d004      	beq.n	fd0c <i2c_nrfx_twim_transfer+0xec>
		    && cur_xfer.p_primary_buf == msg_buf) {
    fd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fd04:	69ba      	ldr	r2, [r7, #24]
    fd06:	429a      	cmp	r2, r3
    fd08:	f000 81b7 	beq.w	1007a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x7a>
		msg_buf_used = 0;
    fd0c:	2400      	movs	r4, #0
    fd0e:	4646      	mov	r6, r8
	for (size_t i = 0; i < num_msgs; i++) {
    fd10:	4556      	cmp	r6, sl
    fd12:	f080 81c8 	bcs.w	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    fd16:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    fd1a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    fd1e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    fd22:	7a2b      	ldrb	r3, [r5, #8]
    fd24:	f013 0f08 	tst.w	r3, #8
    fd28:	f040 81ba 	bne.w	100a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa0>
		bool concat_next = ((i + 1) < num_msgs)
    fd2c:	f106 0801 	add.w	r8, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    fd30:	45d0      	cmp	r8, sl
    fd32:	d2a0      	bcs.n	fc76 <i2c_nrfx_twim_transfer+0x56>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    fd34:	f013 0f02 	tst.w	r3, #2
    fd38:	d10d      	bne.n	fd56 <i2c_nrfx_twim_transfer+0x136>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    fd3a:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    fd3e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    fd42:	7a12      	ldrb	r2, [r2, #8]
    fd44:	f012 0f04 	tst.w	r2, #4
    fd48:	d107      	bne.n	fd5a <i2c_nrfx_twim_transfer+0x13a>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    fd4a:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    fd4c:	f012 0f01 	tst.w	r2, #1
    fd50:	d005      	beq.n	fd5e <i2c_nrfx_twim_transfer+0x13e>
    fd52:	2200      	movs	r2, #0
    fd54:	e790      	b.n	fc78 <i2c_nrfx_twim_transfer+0x58>
    fd56:	2200      	movs	r2, #0
    fd58:	e78e      	b.n	fc78 <i2c_nrfx_twim_transfer+0x58>
    fd5a:	2200      	movs	r2, #0
    fd5c:	e78c      	b.n	fc78 <i2c_nrfx_twim_transfer+0x58>
    fd5e:	2201      	movs	r2, #1
    fd60:	e78a      	b.n	fc78 <i2c_nrfx_twim_transfer+0x58>
				LOG_ERR("Need to use concatenation buffer and "
    fd62:	683b      	ldr	r3, [r7, #0]
    fd64:	6818      	ldr	r0, [r3, #0]
    fd66:	2305      	movs	r3, #5
    fd68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fd6c:	466e      	mov	r6, sp
    fd6e:	b08c      	sub	sp, #48	; 0x30
    fd70:	466b      	mov	r3, sp
    fd72:	f113 0510 	adds.w	r5, r3, #16
    fd76:	d04f      	beq.n	fe18 <i2c_nrfx_twim_transfer+0x1f8>
    fd78:	2119      	movs	r1, #25
    fd7a:	b12d      	cbz	r5, fd88 <i2c_nrfx_twim_transfer+0x168>
    fd7c:	2904      	cmp	r1, #4
    fd7e:	dd03      	ble.n	fd88 <i2c_nrfx_twim_transfer+0x168>
    fd80:	f8df c1d0 	ldr.w	ip, [pc, #464]	; ff54 <i2c_nrfx_twim_transfer+0x334>
    fd84:	f8c3 c014 	str.w	ip, [r3, #20]
    fd88:	b115      	cbz	r5, fd90 <i2c_nrfx_twim_transfer+0x170>
    fd8a:	2908      	cmp	r1, #8
    fd8c:	dd00      	ble.n	fd90 <i2c_nrfx_twim_transfer+0x170>
    fd8e:	619c      	str	r4, [r3, #24]
    fd90:	b115      	cbz	r5, fd98 <i2c_nrfx_twim_transfer+0x178>
    fd92:	290c      	cmp	r1, #12
    fd94:	dd00      	ble.n	fd98 <i2c_nrfx_twim_transfer+0x178>
    fd96:	61da      	str	r2, [r3, #28]
    fd98:	b11d      	cbz	r5, fda2 <i2c_nrfx_twim_transfer+0x182>
    fd9a:	2910      	cmp	r1, #16
    fd9c:	dd01      	ble.n	fda2 <i2c_nrfx_twim_transfer+0x182>
    fd9e:	693a      	ldr	r2, [r7, #16]
    fda0:	621a      	str	r2, [r3, #32]
    fda2:	2205      	movs	r2, #5
    fda4:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    fda8:	b115      	cbz	r5, fdb0 <i2c_nrfx_twim_transfer+0x190>
    fdaa:	2914      	cmp	r1, #20
    fdac:	dd00      	ble.n	fdb0 <i2c_nrfx_twim_transfer+0x190>
    fdae:	6258      	str	r0, [r3, #36]	; 0x24
    fdb0:	b11d      	cbz	r5, fdba <i2c_nrfx_twim_transfer+0x19a>
    fdb2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    fdb6:	2000      	movs	r0, #0
    fdb8:	b388      	cbz	r0, fe1e <i2c_nrfx_twim_transfer+0x1fe>
    fdba:	2918      	cmp	r1, #24
    fdbc:	dd38      	ble.n	fe30 <i2c_nrfx_twim_transfer+0x210>
    fdbe:	2219      	movs	r2, #25
    fdc0:	b165      	cbz	r5, fddc <i2c_nrfx_twim_transfer+0x1bc>
    fdc2:	2106      	movs	r1, #6
    fdc4:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    fdc8:	2100      	movs	r1, #0
    fdca:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    fdce:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    fdd2:	2101      	movs	r1, #1
    fdd4:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    fdd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fdda:	6118      	str	r0, [r3, #16]
    fddc:	2100      	movs	r1, #0
    fdde:	f36f 0100 	bfc	r1, #0, #1
    fde2:	f36f 0141 	bfc	r1, #1, #1
    fde6:	f36f 0182 	bfc	r1, #2, #1
    fdea:	f36f 01c5 	bfc	r1, #3, #3
    fdee:	2301      	movs	r3, #1
    fdf0:	f363 1188 	bfi	r1, r3, #6, #3
    fdf4:	f3c2 0209 	ubfx	r2, r2, #0, #10
    fdf8:	f362 2152 	bfi	r1, r2, #9, #10
    fdfc:	f36f 41de 	bfc	r1, #19, #12
    fe00:	f36f 71df 	bfc	r1, #31, #1
    fe04:	2300      	movs	r3, #0
    fe06:	462a      	mov	r2, r5
    fe08:	4853      	ldr	r0, [pc, #332]	; (ff58 <i2c_nrfx_twim_transfer+0x338>)
    fe0a:	f7f3 fc5f 	bl	36cc <z_impl_z_log_msg_static_create>
    fe0e:	46b5      	mov	sp, r6
				ret = -ENOSPC;
    fe10:	f06f 031b 	mvn.w	r3, #27
    fe14:	617b      	str	r3, [r7, #20]
				break;
    fe16:	e146      	b.n	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
				LOG_ERR("Need to use concatenation buffer and "
    fe18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe1c:	e7ad      	b.n	fd7a <i2c_nrfx_twim_transfer+0x15a>
    fe1e:	f107 0440 	add.w	r4, r7, #64	; 0x40
    fe22:	4404      	add	r4, r0
    fe24:	f814 4c1c 	ldrb.w	r4, [r4, #-28]
    fe28:	f802 4b01 	strb.w	r4, [r2], #1
    fe2c:	3001      	adds	r0, #1
    fe2e:	e7c3      	b.n	fdb8 <i2c_nrfx_twim_transfer+0x198>
    fe30:	f06f 021b 	mvn.w	r2, #27
    fe34:	e7c4      	b.n	fdc0 <i2c_nrfx_twim_transfer+0x1a0>
				memcpy(msg_buf + msg_buf_used,
    fe36:	f859 100b 	ldr.w	r1, [r9, fp]
    fe3a:	69bb      	ldr	r3, [r7, #24]
    fe3c:	4418      	add	r0, r3
    fe3e:	f00a f904 	bl	1a04a <memcpy>
    fe42:	e729      	b.n	fc98 <i2c_nrfx_twim_transfer+0x78>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    fe44:	f013 0f01 	tst.w	r3, #1
    fe48:	f47f af29 	bne.w	fc9e <i2c_nrfx_twim_transfer+0x7e>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    fe4c:	f859 100b 	ldr.w	r1, [r9, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    fe50:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    fe54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fe58:	f43f af21 	beq.w	fc9e <i2c_nrfx_twim_transfer+0x7e>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    fe5c:	686a      	ldr	r2, [r5, #4]
    fe5e:	68fb      	ldr	r3, [r7, #12]
    fe60:	8b5b      	ldrh	r3, [r3, #26]
    fe62:	429a      	cmp	r2, r3
    fe64:	d804      	bhi.n	fe70 <i2c_nrfx_twim_transfer+0x250>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    fe66:	69b8      	ldr	r0, [r7, #24]
    fe68:	f00a f8ef 	bl	1a04a <memcpy>
			msg_buf_used = msgs[i].len;
    fe6c:	88ac      	ldrh	r4, [r5, #4]
    fe6e:	e716      	b.n	fc9e <i2c_nrfx_twim_transfer+0x7e>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    fe70:	683b      	ldr	r3, [r7, #0]
    fe72:	6818      	ldr	r0, [r3, #0]
    fe74:	2303      	movs	r3, #3
    fe76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    fe7a:	466d      	mov	r5, sp
    fe7c:	b08a      	sub	sp, #40	; 0x28
    fe7e:	466b      	mov	r3, sp
    fe80:	f113 0410 	adds.w	r4, r3, #16
    fe84:	d044      	beq.n	ff10 <i2c_nrfx_twim_transfer+0x2f0>
    fe86:	2111      	movs	r1, #17
    fe88:	b11c      	cbz	r4, fe92 <i2c_nrfx_twim_transfer+0x272>
    fe8a:	2904      	cmp	r1, #4
    fe8c:	dd01      	ble.n	fe92 <i2c_nrfx_twim_transfer+0x272>
    fe8e:	4e33      	ldr	r6, [pc, #204]	; (ff5c <i2c_nrfx_twim_transfer+0x33c>)
    fe90:	615e      	str	r6, [r3, #20]
    fe92:	b114      	cbz	r4, fe9a <i2c_nrfx_twim_transfer+0x27a>
    fe94:	2908      	cmp	r1, #8
    fe96:	dd00      	ble.n	fe9a <i2c_nrfx_twim_transfer+0x27a>
    fe98:	619a      	str	r2, [r3, #24]
    fe9a:	2203      	movs	r2, #3
    fe9c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
    fea0:	b114      	cbz	r4, fea8 <i2c_nrfx_twim_transfer+0x288>
    fea2:	290c      	cmp	r1, #12
    fea4:	dd00      	ble.n	fea8 <i2c_nrfx_twim_transfer+0x288>
    fea6:	61d8      	str	r0, [r3, #28]
    fea8:	b11c      	cbz	r4, feb2 <i2c_nrfx_twim_transfer+0x292>
    feaa:	f103 0220 	add.w	r2, r3, #32
    feae:	2000      	movs	r0, #0
    feb0:	b388      	cbz	r0, ff16 <i2c_nrfx_twim_transfer+0x2f6>
    feb2:	2910      	cmp	r1, #16
    feb4:	dd38      	ble.n	ff28 <i2c_nrfx_twim_transfer+0x308>
    feb6:	2211      	movs	r2, #17
    feb8:	b164      	cbz	r4, fed4 <i2c_nrfx_twim_transfer+0x2b4>
    feba:	2104      	movs	r1, #4
    febc:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    fec0:	2100      	movs	r1, #0
    fec2:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    fec6:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    feca:	2101      	movs	r1, #1
    fecc:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    fed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fed2:	6118      	str	r0, [r3, #16]
    fed4:	2100      	movs	r1, #0
    fed6:	f36f 0100 	bfc	r1, #0, #1
    feda:	f36f 0141 	bfc	r1, #1, #1
    fede:	f36f 0182 	bfc	r1, #2, #1
    fee2:	f36f 01c5 	bfc	r1, #3, #3
    fee6:	2301      	movs	r3, #1
    fee8:	f363 1188 	bfi	r1, r3, #6, #3
    feec:	f3c2 0209 	ubfx	r2, r2, #0, #10
    fef0:	f362 2152 	bfi	r1, r2, #9, #10
    fef4:	f36f 41de 	bfc	r1, #19, #12
    fef8:	f36f 71df 	bfc	r1, #31, #1
    fefc:	2300      	movs	r3, #0
    fefe:	4622      	mov	r2, r4
    ff00:	4815      	ldr	r0, [pc, #84]	; (ff58 <i2c_nrfx_twim_transfer+0x338>)
    ff02:	f7f3 fbe3 	bl	36cc <z_impl_z_log_msg_static_create>
    ff06:	46ad      	mov	sp, r5
				ret = -EINVAL;
    ff08:	f06f 0315 	mvn.w	r3, #21
    ff0c:	617b      	str	r3, [r7, #20]
				break;
    ff0e:	e0ca      	b.n	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    ff10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ff14:	e7b8      	b.n	fe88 <i2c_nrfx_twim_transfer+0x268>
    ff16:	f107 0640 	add.w	r6, r7, #64	; 0x40
    ff1a:	4406      	add	r6, r0
    ff1c:	f816 6c1c 	ldrb.w	r6, [r6, #-28]
    ff20:	f802 6b01 	strb.w	r6, [r2], #1
    ff24:	3001      	adds	r0, #1
    ff26:	e7c3      	b.n	feb0 <i2c_nrfx_twim_transfer+0x290>
    ff28:	f06f 021b 	mvn.w	r2, #27
    ff2c:	e7c4      	b.n	feb8 <i2c_nrfx_twim_transfer+0x298>
			cur_xfer.p_primary_buf = msg_buf;
    ff2e:	69bb      	ldr	r3, [r7, #24]
    ff30:	63bb      	str	r3, [r7, #56]	; 0x38
			cur_xfer.primary_length = msg_buf_used;
    ff32:	633c      	str	r4, [r7, #48]	; 0x30
    ff34:	e6be      	b.n	fcb4 <i2c_nrfx_twim_transfer+0x94>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    ff36:	2220      	movs	r2, #32
    ff38:	e6c6      	b.n	fcc8 <i2c_nrfx_twim_transfer+0xa8>
			if (res == NRFX_ERROR_BUSY) {
    ff3a:	330b      	adds	r3, #11
    ff3c:	4298      	cmp	r0, r3
    ff3e:	d003      	beq.n	ff48 <i2c_nrfx_twim_transfer+0x328>
				ret = -EIO;
    ff40:	f06f 0304 	mvn.w	r3, #4
    ff44:	617b      	str	r3, [r7, #20]
    ff46:	e0ae      	b.n	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
				ret = -EBUSY;
    ff48:	f06f 030f 	mvn.w	r3, #15
    ff4c:	617b      	str	r3, [r7, #20]
    ff4e:	e0aa      	b.n	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
    ff50:	0bad0000 	.word	0x0bad0000
    ff54:	00022c20 	.word	0x00022c20
    ff58:	00020588 	.word	0x00020588
    ff5c:	00022cb0 	.word	0x00022cb0
			LOG_ERR("Error on I2C line occurred for message %d", i);
    ff60:	466c      	mov	r4, sp
    ff62:	b088      	sub	sp, #32
    ff64:	466b      	mov	r3, sp
    ff66:	f113 0210 	adds.w	r2, r3, #16
    ff6a:	d039      	beq.n	ffe0 <i2c_nrfx_twim_transfer+0x3c0>
    ff6c:	210c      	movs	r1, #12
    ff6e:	b11a      	cbz	r2, ff78 <i2c_nrfx_twim_transfer+0x358>
    ff70:	2904      	cmp	r1, #4
    ff72:	dd01      	ble.n	ff78 <i2c_nrfx_twim_transfer+0x358>
    ff74:	4850      	ldr	r0, [pc, #320]	; (100b8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb8>)
    ff76:	6158      	str	r0, [r3, #20]
    ff78:	b112      	cbz	r2, ff80 <i2c_nrfx_twim_transfer+0x360>
    ff7a:	2908      	cmp	r1, #8
    ff7c:	dd00      	ble.n	ff80 <i2c_nrfx_twim_transfer+0x360>
    ff7e:	619e      	str	r6, [r3, #24]
    ff80:	290b      	cmp	r1, #11
    ff82:	dd30      	ble.n	ffe6 <i2c_nrfx_twim_transfer+0x3c6>
    ff84:	250c      	movs	r5, #12
    ff86:	b15a      	cbz	r2, ffa0 <i2c_nrfx_twim_transfer+0x380>
    ff88:	2103      	movs	r1, #3
    ff8a:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
    ff8e:	2100      	movs	r1, #0
    ff90:	f887 1029 	strb.w	r1, [r7, #41]	; 0x29
    ff94:	f887 102a 	strb.w	r1, [r7, #42]	; 0x2a
    ff98:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
    ff9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ff9e:	6118      	str	r0, [r3, #16]
    ffa0:	2100      	movs	r1, #0
    ffa2:	f36f 0100 	bfc	r1, #0, #1
    ffa6:	f36f 0141 	bfc	r1, #1, #1
    ffaa:	f36f 0182 	bfc	r1, #2, #1
    ffae:	f36f 01c5 	bfc	r1, #3, #3
    ffb2:	2301      	movs	r3, #1
    ffb4:	f363 1188 	bfi	r1, r3, #6, #3
    ffb8:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
    ffbc:	f365 2152 	bfi	r1, r5, #9, #10
    ffc0:	f36f 41de 	bfc	r1, #19, #12
    ffc4:	f36f 71df 	bfc	r1, #31, #1
    ffc8:	2300      	movs	r3, #0
    ffca:	483c      	ldr	r0, [pc, #240]	; (100bc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xbc>)
    ffcc:	f7f3 fb7e 	bl	36cc <z_impl_z_log_msg_static_create>
    ffd0:	46a5      	mov	sp, r4
			(void)i2c_nrfx_twim_recover_bus(dev);
    ffd2:	6838      	ldr	r0, [r7, #0]
    ffd4:	f7ff fdf8 	bl	fbc8 <i2c_nrfx_twim_recover_bus>
			ret = -EIO;
    ffd8:	f06f 0304 	mvn.w	r3, #4
    ffdc:	617b      	str	r3, [r7, #20]
			break;
    ffde:	e062      	b.n	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    ffe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ffe4:	e7c3      	b.n	ff6e <i2c_nrfx_twim_transfer+0x34e>
    ffe6:	f06f 051b 	mvn.w	r5, #27
    ffea:	e7cc      	b.n	ff86 <i2c_nrfx_twim_transfer+0x366>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    ffec:	466c      	mov	r4, sp
    ffee:	b088      	sub	sp, #32
    fff0:	4669      	mov	r1, sp
    fff2:	f111 0210 	adds.w	r2, r1, #16
    fff6:	d03a      	beq.n	1006e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6e>
    fff8:	2010      	movs	r0, #16
    fffa:	b11a      	cbz	r2, 10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>
    fffc:	2804      	cmp	r0, #4
    fffe:	dd01      	ble.n	10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>
   10000:	4d2f      	ldr	r5, [pc, #188]	; (100c0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc0>)
   10002:	614d      	str	r5, [r1, #20]
   10004:	b112      	cbz	r2, 1000c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc>
   10006:	2808      	cmp	r0, #8
   10008:	dd00      	ble.n	1000c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc>
   1000a:	618b      	str	r3, [r1, #24]
   1000c:	b112      	cbz	r2, 10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
   1000e:	280c      	cmp	r0, #12
   10010:	dd00      	ble.n	10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
   10012:	61ce      	str	r6, [r1, #28]
   10014:	280f      	cmp	r0, #15
   10016:	dd2d      	ble.n	10074 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x74>
   10018:	2310      	movs	r3, #16
   1001a:	b15a      	cbz	r2, 10034 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x34>
   1001c:	2004      	movs	r0, #4
   1001e:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
   10022:	2000      	movs	r0, #0
   10024:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
   10028:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
   1002c:	f887 002b 	strb.w	r0, [r7, #43]	; 0x2b
   10030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10032:	6108      	str	r0, [r1, #16]
   10034:	2100      	movs	r1, #0
   10036:	f36f 0100 	bfc	r1, #0, #1
   1003a:	f36f 0141 	bfc	r1, #1, #1
   1003e:	f36f 0182 	bfc	r1, #2, #1
   10042:	f36f 01c5 	bfc	r1, #3, #3
   10046:	2001      	movs	r0, #1
   10048:	f360 1188 	bfi	r1, r0, #6, #3
   1004c:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   10050:	f363 2152 	bfi	r1, r3, #9, #10
   10054:	f36f 41de 	bfc	r1, #19, #12
   10058:	f36f 71df 	bfc	r1, #31, #1
   1005c:	2300      	movs	r3, #0
   1005e:	4817      	ldr	r0, [pc, #92]	; (100bc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xbc>)
   10060:	f7f3 fb34 	bl	36cc <z_impl_z_log_msg_static_create>
   10064:	46a5      	mov	sp, r4
			ret = -EIO;
   10066:	f06f 0304 	mvn.w	r3, #4
   1006a:	617b      	str	r3, [r7, #20]
			break;
   1006c:	e01b      	b.n	100a6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa6>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1006e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10072:	e7c2      	b.n	fffa <i2c_nrfx_twim_transfer+0x3da>
   10074:	f06f 031b 	mvn.w	r3, #27
   10078:	e7cf      	b.n	1001a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a>
			while (msg_buf_used >= msgs[j].len) {
   1007a:	4615      	mov	r5, r2
   1007c:	e007      	b.n	1008e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8e>
				msg_buf_used -= msgs[j].len;
   1007e:	1aa4      	subs	r4, r4, r2
   10080:	b2a4      	uxth	r4, r4
				memcpy(msgs[j].buf,
   10082:	1929      	adds	r1, r5, r4
   10084:	f859 0000 	ldr.w	r0, [r9, r0]
   10088:	f009 ffdf 	bl	1a04a <memcpy>
				j--;
   1008c:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
   1008e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10092:	0098      	lsls	r0, r3, #2
   10094:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   10098:	685a      	ldr	r2, [r3, #4]
   1009a:	4294      	cmp	r4, r2
   1009c:	d2ef      	bcs.n	1007e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x7e>
   1009e:	e635      	b.n	fd0c <i2c_nrfx_twim_transfer+0xec>
			ret = -ENOTSUP;
   100a0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   100a4:	617b      	str	r3, [r7, #20]
	z_impl_k_sem_give(sem);
   100a6:	68b8      	ldr	r0, [r7, #8]
   100a8:	f006 f980 	bl	163ac <z_impl_k_sem_give>
}
   100ac:	6978      	ldr	r0, [r7, #20]
   100ae:	3744      	adds	r7, #68	; 0x44
   100b0:	46bd      	mov	sp, r7
   100b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100b6:	bf00      	nop
   100b8:	00022d18 	.word	0x00022d18
   100bc:	00020588 	.word	0x00020588
   100c0:	00022d44 	.word	0x00022d44

000100c4 <adxl362_freq_to_odr_val>:
	if (freq_int == 0U && freq_milli == 0U) {
   100c4:	4602      	mov	r2, r0
   100c6:	b918      	cbnz	r0, 100d0 <adxl362_freq_to_odr_val+0xc>
   100c8:	b929      	cbnz	r1, 100d6 <adxl362_freq_to_odr_val+0x12>
		return -EINVAL;
   100ca:	f06f 0015 	mvn.w	r0, #21
   100ce:	e010      	b.n	100f2 <adxl362_freq_to_odr_val+0x2e>
   100d0:	2000      	movs	r0, #0
   100d2:	e000      	b.n	100d6 <adxl362_freq_to_odr_val+0x12>
	for (i = 0; i < ARRAY_SIZE(adxl362_odr_map); i++) {
   100d4:	3001      	adds	r0, #1
   100d6:	2805      	cmp	r0, #5
   100d8:	d80c      	bhi.n	100f4 <adxl362_freq_to_odr_val+0x30>
		if (freq_int < adxl362_odr_map[i].freq_int ||
   100da:	4b08      	ldr	r3, [pc, #32]	; (100fc <adxl362_freq_to_odr_val+0x38>)
   100dc:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
   100e0:	4293      	cmp	r3, r2
   100e2:	d806      	bhi.n	100f2 <adxl362_freq_to_odr_val+0x2e>
   100e4:	d1f6      	bne.n	100d4 <adxl362_freq_to_odr_val+0x10>
		     freq_milli <= adxl362_odr_map[i].freq_milli)) {
   100e6:	4b05      	ldr	r3, [pc, #20]	; (100fc <adxl362_freq_to_odr_val+0x38>)
   100e8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   100ec:	885b      	ldrh	r3, [r3, #2]
		    (freq_int == adxl362_odr_map[i].freq_int &&
   100ee:	428b      	cmp	r3, r1
   100f0:	d3f0      	bcc.n	100d4 <adxl362_freq_to_odr_val+0x10>
}
   100f2:	4770      	bx	lr
	return -EINVAL;
   100f4:	f06f 0015 	mvn.w	r0, #21
   100f8:	4770      	bx	lr
   100fa:	bf00      	nop
   100fc:	00022e70 	.word	0x00022e70

00010100 <adxl362_range_to_reg_val>:
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   10100:	2300      	movs	r3, #0
   10102:	e000      	b.n	10106 <adxl362_range_to_reg_val+0x6>
   10104:	3301      	adds	r3, #1
   10106:	2b02      	cmp	r3, #2
   10108:	d809      	bhi.n	1011e <adxl362_range_to_reg_val+0x1e>
		if (range <= adxl362_acc_range_map[i].range) {
   1010a:	4a06      	ldr	r2, [pc, #24]	; (10124 <adxl362_range_to_reg_val+0x24>)
   1010c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
   10110:	4282      	cmp	r2, r0
   10112:	d3f7      	bcc.n	10104 <adxl362_range_to_reg_val+0x4>
			return adxl362_acc_range_map[i].reg_val;
   10114:	4a03      	ldr	r2, [pc, #12]	; (10124 <adxl362_range_to_reg_val+0x24>)
   10116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1011a:	7898      	ldrb	r0, [r3, #2]
   1011c:	4770      	bx	lr
	return -EINVAL;
   1011e:	f06f 0015 	mvn.w	r0, #21
}
   10122:	4770      	bx	lr
   10124:	00022e3c 	.word	0x00022e3c

00010128 <adxl362_accel_convert>:
	}
}

static void adxl362_accel_convert(struct sensor_value *val, int accel,
				  int range)
{
   10128:	b538      	push	{r3, r4, r5, lr}
   1012a:	4604      	mov	r4, r0
	switch (range) {
   1012c:	2a01      	cmp	r2, #1
   1012e:	d01d      	beq.n	1016c <adxl362_accel_convert+0x44>
   10130:	2a02      	cmp	r2, #2
   10132:	d01e      	beq.n	10172 <adxl362_accel_convert+0x4a>
   10134:	b1ba      	cbz	r2, 10166 <adxl362_accel_convert+0x3e>
		return -EINVAL;
   10136:	f06f 0215 	mvn.w	r2, #21
	int scale = adxl362_range_to_scale(range);
	long micro_ms2 = accel * SENSOR_G / scale;
   1013a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
   1013e:	4d0e      	ldr	r5, [pc, #56]	; (10178 <adxl362_accel_convert+0x50>)
   10140:	fba1 0105 	umull	r0, r1, r1, r5
   10144:	17d3      	asrs	r3, r2, #31
   10146:	fb05 110c 	mla	r1, r5, ip, r1
   1014a:	f7f0 fa83 	bl	654 <__aeabi_ldivmod>

	__ASSERT_NO_MSG(scale != -EINVAL);

	val->val1 = micro_ms2 / 1000000;
   1014e:	4a0b      	ldr	r2, [pc, #44]	; (1017c <adxl362_accel_convert+0x54>)
   10150:	fb82 3200 	smull	r3, r2, r2, r0
   10154:	17c3      	asrs	r3, r0, #31
   10156:	ebc3 43a2 	rsb	r3, r3, r2, asr #18
   1015a:	6023      	str	r3, [r4, #0]
	val->val2 = micro_ms2 % 1000000;
   1015c:	4a08      	ldr	r2, [pc, #32]	; (10180 <adxl362_accel_convert+0x58>)
   1015e:	fb02 0313 	mls	r3, r2, r3, r0
   10162:	6063      	str	r3, [r4, #4]
}
   10164:	bd38      	pop	{r3, r4, r5, pc}
	switch (range) {
   10166:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1016a:	e7e6      	b.n	1013a <adxl362_accel_convert+0x12>
		return ADXL362_ACCEL_4G_LSB_PER_G;
   1016c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   10170:	e7e3      	b.n	1013a <adxl362_accel_convert+0x12>
		return ADXL362_ACCEL_8G_LSB_PER_G;
   10172:	22eb      	movs	r2, #235	; 0xeb
   10174:	e7e1      	b.n	1013a <adxl362_accel_convert+0x12>
   10176:	bf00      	nop
   10178:	0095a33a 	.word	0x0095a33a
   1017c:	431bde83 	.word	0x431bde83
   10180:	000f4240 	.word	0x000f4240

00010184 <adxl362_temp_convert>:

static void adxl362_temp_convert(struct sensor_value *val, int temp)
{
	/* See sensitivity and bias specifications in table 1 of datasheet */
	int milli_c = (temp - ADXL362_TEMP_BIAS_LSB) * ADXL362_TEMP_MC_PER_LSB;
   10184:	f5a1 71af 	sub.w	r1, r1, #350	; 0x15e
   10188:	eb01 1181 	add.w	r1, r1, r1, lsl #6

	val->val1 = milli_c / 1000;
   1018c:	4a07      	ldr	r2, [pc, #28]	; (101ac <adxl362_temp_convert+0x28>)
   1018e:	fb82 3201 	smull	r3, r2, r2, r1
   10192:	17cb      	asrs	r3, r1, #31
   10194:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   10198:	6003      	str	r3, [r0, #0]
	val->val2 = (milli_c % 1000) * 1000;
   1019a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1019e:	fb02 1113 	mls	r1, r2, r3, r1
   101a2:	fb02 f101 	mul.w	r1, r2, r1
   101a6:	6041      	str	r1, [r0, #4]
}
   101a8:	4770      	bx	lr
   101aa:	bf00      	nop
   101ac:	10624dd3 	.word	0x10624dd3

000101b0 <adxl362_init>:
 * @return  0 - the initialization was successful and the device is present;
 *         -1 - an error occurred.
 *
 */
static int adxl362_init(const struct device *dev)
{
   101b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   101b2:	b085      	sub	sp, #20
   101b4:	af02      	add	r7, sp, #8
   101b6:	4604      	mov	r4, r0
	const struct adxl362_config *config = dev->config;
   101b8:	6845      	ldr	r5, [r0, #4]
 * @retval false if the SPI bus is not ready for use.
 */
static inline bool spi_is_ready(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
   101ba:	6828      	ldr	r0, [r5, #0]
   101bc:	f00f f853 	bl	1f266 <z_device_is_ready>
   101c0:	4603      	mov	r3, r0
   101c2:	b128      	cbz	r0, 101d0 <adxl362_init+0x20>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
   101c4:	68ea      	ldr	r2, [r5, #12]
   101c6:	b11a      	cbz	r2, 101d0 <adxl362_init+0x20>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   101c8:	6810      	ldr	r0, [r2, #0]
   101ca:	f00f f84c 	bl	1f266 <z_device_is_ready>
   101ce:	4603      	mov	r3, r0
	uint8_t value;
	int err;

	if (!spi_is_ready(&config->bus)) {
   101d0:	2b00      	cmp	r3, #0
   101d2:	f000 809a 	beq.w	1030a <adxl362_init+0x15a>
		LOG_DBG("spi device not ready: %s", config->bus.bus->name);
		return -EINVAL;
	}

	err = adxl362_software_reset(dev);
   101d6:	4620      	mov	r0, r4
   101d8:	f00c ff06 	bl	1cfe8 <adxl362_software_reset>

	if (err) {
   101dc:	4605      	mov	r5, r0
   101de:	b9c0      	cbnz	r0, 10212 <adxl362_init+0x62>
	return z_impl_k_sleep(timeout);
   101e0:	20a4      	movs	r0, #164	; 0xa4
   101e2:	2100      	movs	r1, #0
   101e4:	f006 feae 	bl	16f44 <z_impl_k_sleep>
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   101e8:	2301      	movs	r3, #1
   101ea:	9300      	str	r3, [sp, #0]
   101ec:	1dfb      	adds	r3, r7, #7
   101ee:	2202      	movs	r2, #2
   101f0:	210b      	movs	r1, #11
   101f2:	4620      	mov	r0, r4
   101f4:	f00c feca 	bl	1cf8c <adxl362_reg_access>
	}

	k_sleep(K_MSEC(5));

	adxl362_get_reg(dev, &value, ADXL362_REG_PARTID, 1);
	if (value != ADXL362_PART_ID) {
   101f8:	79fb      	ldrb	r3, [r7, #7]
   101fa:	2bf2      	cmp	r3, #242	; 0xf2
   101fc:	d147      	bne.n	1028e <adxl362_init+0xde>
		LOG_ERR("wrong part_id: %d\n", value);
		return -ENODEV;
	}

	if (adxl362_chip_init(dev) < 0) {
   101fe:	4620      	mov	r0, r4
   10200:	f00d f88b 	bl	1d31a <adxl362_chip_init>
   10204:	2800      	cmp	r0, #0
   10206:	f2c0 8083 	blt.w	10310 <adxl362_init+0x160>
		}
	}
#endif

	return 0;
}
   1020a:	4628      	mov	r0, r5
   1020c:	370c      	adds	r7, #12
   1020e:	46bd      	mov	sp, r7
   10210:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("adxl362_software_reset failed, error %d\n", err);
   10212:	466e      	mov	r6, sp
   10214:	b088      	sub	sp, #32
   10216:	ab02      	add	r3, sp, #8
   10218:	f113 0210 	adds.w	r2, r3, #16
   1021c:	d031      	beq.n	10282 <adxl362_init+0xd2>
   1021e:	210c      	movs	r1, #12
   10220:	b11a      	cbz	r2, 1022a <adxl362_init+0x7a>
   10222:	2904      	cmp	r1, #4
   10224:	dd01      	ble.n	1022a <adxl362_init+0x7a>
   10226:	483c      	ldr	r0, [pc, #240]	; (10318 <adxl362_init+0x168>)
   10228:	6158      	str	r0, [r3, #20]
   1022a:	b112      	cbz	r2, 10232 <adxl362_init+0x82>
   1022c:	2908      	cmp	r1, #8
   1022e:	dd00      	ble.n	10232 <adxl362_init+0x82>
   10230:	619d      	str	r5, [r3, #24]
   10232:	290b      	cmp	r1, #11
   10234:	dd28      	ble.n	10288 <adxl362_init+0xd8>
   10236:	240c      	movs	r4, #12
   10238:	b13a      	cbz	r2, 1024a <adxl362_init+0x9a>
   1023a:	2103      	movs	r1, #3
   1023c:	7039      	strb	r1, [r7, #0]
   1023e:	2100      	movs	r1, #0
   10240:	7079      	strb	r1, [r7, #1]
   10242:	70b9      	strb	r1, [r7, #2]
   10244:	70f9      	strb	r1, [r7, #3]
   10246:	6838      	ldr	r0, [r7, #0]
   10248:	6118      	str	r0, [r3, #16]
   1024a:	2100      	movs	r1, #0
   1024c:	f36f 0100 	bfc	r1, #0, #1
   10250:	f36f 0141 	bfc	r1, #1, #1
   10254:	f36f 0182 	bfc	r1, #2, #1
   10258:	f36f 01c5 	bfc	r1, #3, #3
   1025c:	2301      	movs	r3, #1
   1025e:	f363 1188 	bfi	r1, r3, #6, #3
   10262:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   10266:	f364 2152 	bfi	r1, r4, #9, #10
   1026a:	f36f 41de 	bfc	r1, #19, #12
   1026e:	f36f 71df 	bfc	r1, #31, #1
   10272:	2300      	movs	r3, #0
   10274:	4829      	ldr	r0, [pc, #164]	; (1031c <adxl362_init+0x16c>)
   10276:	f7f3 fa29 	bl	36cc <z_impl_z_log_msg_static_create>
   1027a:	46b5      	mov	sp, r6
		return -ENODEV;
   1027c:	f06f 0512 	mvn.w	r5, #18
   10280:	e7c3      	b.n	1020a <adxl362_init+0x5a>
		LOG_ERR("adxl362_software_reset failed, error %d\n", err);
   10282:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10286:	e7cb      	b.n	10220 <adxl362_init+0x70>
   10288:	f06f 041b 	mvn.w	r4, #27
   1028c:	e7d4      	b.n	10238 <adxl362_init+0x88>
		LOG_ERR("wrong part_id: %d\n", value);
   1028e:	466c      	mov	r4, sp
   10290:	b088      	sub	sp, #32
   10292:	a902      	add	r1, sp, #8
   10294:	f111 0210 	adds.w	r2, r1, #16
   10298:	d031      	beq.n	102fe <adxl362_init+0x14e>
   1029a:	200c      	movs	r0, #12
   1029c:	b11a      	cbz	r2, 102a6 <adxl362_init+0xf6>
   1029e:	2804      	cmp	r0, #4
   102a0:	dd01      	ble.n	102a6 <adxl362_init+0xf6>
   102a2:	4d1f      	ldr	r5, [pc, #124]	; (10320 <adxl362_init+0x170>)
   102a4:	614d      	str	r5, [r1, #20]
   102a6:	b112      	cbz	r2, 102ae <adxl362_init+0xfe>
   102a8:	2808      	cmp	r0, #8
   102aa:	dd00      	ble.n	102ae <adxl362_init+0xfe>
   102ac:	618b      	str	r3, [r1, #24]
   102ae:	280b      	cmp	r0, #11
   102b0:	dd28      	ble.n	10304 <adxl362_init+0x154>
   102b2:	230c      	movs	r3, #12
   102b4:	b13a      	cbz	r2, 102c6 <adxl362_init+0x116>
   102b6:	2003      	movs	r0, #3
   102b8:	7038      	strb	r0, [r7, #0]
   102ba:	2000      	movs	r0, #0
   102bc:	7078      	strb	r0, [r7, #1]
   102be:	70b8      	strb	r0, [r7, #2]
   102c0:	70f8      	strb	r0, [r7, #3]
   102c2:	6838      	ldr	r0, [r7, #0]
   102c4:	6108      	str	r0, [r1, #16]
   102c6:	2100      	movs	r1, #0
   102c8:	f36f 0100 	bfc	r1, #0, #1
   102cc:	f36f 0141 	bfc	r1, #1, #1
   102d0:	f36f 0182 	bfc	r1, #2, #1
   102d4:	f36f 01c5 	bfc	r1, #3, #3
   102d8:	2001      	movs	r0, #1
   102da:	f360 1188 	bfi	r1, r0, #6, #3
   102de:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   102e2:	f363 2152 	bfi	r1, r3, #9, #10
   102e6:	f36f 41de 	bfc	r1, #19, #12
   102ea:	f36f 71df 	bfc	r1, #31, #1
   102ee:	2300      	movs	r3, #0
   102f0:	480a      	ldr	r0, [pc, #40]	; (1031c <adxl362_init+0x16c>)
   102f2:	f7f3 f9eb 	bl	36cc <z_impl_z_log_msg_static_create>
   102f6:	46a5      	mov	sp, r4
		return -ENODEV;
   102f8:	f06f 0512 	mvn.w	r5, #18
   102fc:	e785      	b.n	1020a <adxl362_init+0x5a>
		LOG_ERR("wrong part_id: %d\n", value);
   102fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10302:	e7cb      	b.n	1029c <adxl362_init+0xec>
   10304:	f06f 031b 	mvn.w	r3, #27
   10308:	e7d4      	b.n	102b4 <adxl362_init+0x104>
		return -EINVAL;
   1030a:	f06f 0515 	mvn.w	r5, #21
   1030e:	e77c      	b.n	1020a <adxl362_init+0x5a>
		return -ENODEV;
   10310:	f06f 0512 	mvn.w	r5, #18
   10314:	e779      	b.n	1020a <adxl362_init+0x5a>
   10316:	bf00      	nop
   10318:	00022de0 	.word	0x00022de0
   1031c:	000204f8 	.word	0x000204f8
   10320:	00022e0c 	.word	0x00022e0c

00010324 <bme680_calc_humidity>:
			   + ((var1 + var2 + var3
			       + ((int32_t)data->par_p7 << 7)) >> 4);
}

static void bme680_calc_humidity(struct bme680_data *data, uint16_t adc_humidity)
{
   10324:	b570      	push	{r4, r5, r6, lr}
	int32_t var1, var2_1, var2_2, var2, var3, var4, var5, var6;
	int32_t temp_scaled, calc_hum;

	temp_scaled = (((int32_t)data->t_fine * 5) + 128) >> 8;
   10326:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   10328:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1032c:	3380      	adds	r3, #128	; 0x80
   1032e:	ea4f 2c23 	mov.w	ip, r3, asr #8
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   10332:	8802      	ldrh	r2, [r0, #0]
   10334:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
	       (((temp_scaled * (int32_t)data->par_h3)
   10338:	f990 2004 	ldrsb.w	r2, [r0, #4]
   1033c:	fb0c f202 	mul.w	r2, ip, r2
		 / ((int32_t)100)) >> 1);
   10340:	4c28      	ldr	r4, [pc, #160]	; (103e4 <bme680_calc_humidity+0xc0>)
   10342:	fb84 5302 	smull	r5, r3, r4, r2
   10346:	17d2      	asrs	r2, r2, #31
   10348:	ebc2 1263 	rsb	r2, r2, r3, asr #5
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   1034c:	eba1 0162 	sub.w	r1, r1, r2, asr #1
	var2_1 = (int32_t)data->par_h2;
   10350:	8845      	ldrh	r5, [r0, #2]
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   10352:	f990 e005 	ldrsb.w	lr, [r0, #5]
   10356:	fb0c fe0e 	mul.w	lr, ip, lr
   1035a:	fb84 230e 	smull	r2, r3, r4, lr
   1035e:	ea4f 7eee 	mov.w	lr, lr, asr #31
   10362:	ebce 1e63 	rsb	lr, lr, r3, asr #5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   10366:	f990 2006 	ldrsb.w	r2, [r0, #6]
   1036a:	fb0c f202 	mul.w	r2, ip, r2
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   1036e:	fb84 3602 	smull	r3, r6, r4, r2
   10372:	17d3      	asrs	r3, r2, #31
   10374:	ebc3 1366 	rsb	r3, r3, r6, asr #5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   10378:	fb0c f303 	mul.w	r3, ip, r3
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   1037c:	119a      	asrs	r2, r3, #6
   1037e:	fb84 6202 	smull	r6, r2, r4, r2
   10382:	17db      	asrs	r3, r3, #31
   10384:	ebc3 1362 	rsb	r3, r3, r2, asr #5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   10388:	4473      	add	r3, lr
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   1038a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		 +  (int32_t)(1 << 14);
	var2 = (var2_1 * var2_2) >> 10;
   1038e:	fb03 f505 	mul.w	r5, r3, r5
   10392:	12ad      	asrs	r5, r5, #10
	var3 = var1 * var2;
   10394:	fb05 f101 	mul.w	r1, r5, r1
	var4 = (int32_t)data->par_h6 << 7;
   10398:	79c5      	ldrb	r5, [r0, #7]
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   1039a:	f990 2008 	ldrsb.w	r2, [r0, #8]
   1039e:	fb0c f302 	mul.w	r3, ip, r2
   103a2:	fb84 2403 	smull	r2, r4, r4, r3
   103a6:	17db      	asrs	r3, r3, #31
   103a8:	ebc3 1364 	rsb	r3, r3, r4, asr #5
   103ac:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   103b0:	111b      	asrs	r3, r3, #4
			  ((int32_t)100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   103b2:	138a      	asrs	r2, r1, #14
   103b4:	fb02 f202 	mul.w	r2, r2, r2
   103b8:	1292      	asrs	r2, r2, #10
	var6 = (var4 * var5) >> 1;
   103ba:	fb02 f303 	mul.w	r3, r2, r3
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
   103be:	eb01 0363 	add.w	r3, r1, r3, asr #1
   103c2:	129b      	asrs	r3, r3, #10
   103c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   103c8:	fb02 f303 	mul.w	r3, r2, r3

	if (calc_hum > 100000) { /* Cap at 100%rH */
   103cc:	4906      	ldr	r1, [pc, #24]	; (103e8 <bme680_calc_humidity+0xc4>)
   103ce:	ebb1 3f23 	cmp.w	r1, r3, asr #12
   103d2:	db04      	blt.n	103de <bme680_calc_humidity+0xba>
   103d4:	131a      	asrs	r2, r3, #12
		calc_hum = 100000;
	} else if (calc_hum < 0) {
   103d6:	2a00      	cmp	r2, #0
   103d8:	da02      	bge.n	103e0 <bme680_calc_humidity+0xbc>
		calc_hum = 0;
   103da:	2200      	movs	r2, #0
   103dc:	e000      	b.n	103e0 <bme680_calc_humidity+0xbc>
		calc_hum = 100000;
   103de:	4a02      	ldr	r2, [pc, #8]	; (103e8 <bme680_calc_humidity+0xc4>)
	}

	data->calc_humidity = calc_hum;
   103e0:	6302      	str	r2, [r0, #48]	; 0x30
}
   103e2:	bd70      	pop	{r4, r5, r6, pc}
   103e4:	51eb851f 	.word	0x51eb851f
   103e8:	000186a0 	.word	0x000186a0

000103ec <bme680_calc_gas_resistance>:

static void bme680_calc_gas_resistance(struct bme680_data *data, uint8_t gas_range,
				       uint16_t adc_gas_res)
{
   103ec:	b538      	push	{r3, r4, r5, lr}
   103ee:	4604      	mov	r4, r0
	static const uint32_t look_up2[16] = { 4096000000, 2048000000, 1024000000,
			       512000000, 255744255, 127110228, 64000000,
			       32258064, 16016016, 8000000, 4000000, 2000000,
			       1000000, 500000, 250000, 125000 };

	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   103f0:	f990 0027 	ldrsb.w	r0, [r0, #39]	; 0x27
   103f4:	17c3      	asrs	r3, r0, #31
   103f6:	009d      	lsls	r5, r3, #2
   103f8:	ea45 7590 	orr.w	r5, r5, r0, lsr #30
   103fc:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   10400:	eb1c 0c00 	adds.w	ip, ip, r0
   10404:	eb43 0305 	adc.w	r3, r3, r5
   10408:	f240 503c 	movw	r0, #1340	; 0x53c
   1040c:	eb1c 0c00 	adds.w	ip, ip, r0
   10410:	f143 0300 	adc.w	r3, r3, #0
		       ((int64_t)look_up1[gas_range])) >> 16;
   10414:	4815      	ldr	r0, [pc, #84]	; (1046c <bme680_calc_gas_resistance+0x80>)
   10416:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1041a:	fbac c005 	umull	ip, r0, ip, r5
   1041e:	fb05 0303 	mla	r3, r5, r3, r0
   10422:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   10426:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
   1042a:	141d      	asrs	r5, r3, #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   1042c:	03d2      	lsls	r2, r2, #15
   1042e:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000
   10432:	eb60 0000 	sbc.w	r0, r0, r0
   10436:	eb12 020c 	adds.w	r2, r2, ip
   1043a:	eb40 4323 	adc.w	r3, r0, r3, asr #16
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   1043e:	480c      	ldr	r0, [pc, #48]	; (10470 <bme680_calc_gas_resistance+0x84>)
   10440:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   10444:	fba0 c10c 	umull	ip, r1, r0, ip
   10448:	fb00 1105 	mla	r1, r0, r5, r1
   1044c:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
   10450:	ea4c 5cc1 	orr.w	ip, ip, r1, lsl #23
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   10454:	0850      	lsrs	r0, r2, #1
   10456:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   1045a:	105d      	asrs	r5, r3, #1
   1045c:	eb10 000c 	adds.w	r0, r0, ip
					    / (int64_t)var2);
   10460:	eb45 2161 	adc.w	r1, r5, r1, asr #9
   10464:	f7f0 f8f6 	bl	654 <__aeabi_ldivmod>
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   10468:	6360      	str	r0, [r4, #52]	; 0x34
}
   1046a:	bd38      	pop	{r3, r4, r5, pc}
   1046c:	00022eec 	.word	0x00022eec
   10470:	00022f2c 	.word	0x00022f2c

00010474 <bme680_calc_res_heat>:

static uint8_t bme680_calc_res_heat(struct bme680_data *data, uint16_t heatr_temp)
{
   10474:	b510      	push	{r4, lr}
	uint8_t heatr_res;
	int32_t var1, var2, var3, var4, var5;
	int32_t heatr_res_x100;
	int32_t amb_temp = 25;    /* Assume ambient temperature to be 25 deg C */

	if (heatr_temp > 400) { /* Cap temperature */
   10476:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   1047a:	d901      	bls.n	10480 <bme680_calc_res_heat+0xc>
		heatr_temp = 400;
   1047c:	f44f 71c8 	mov.w	r1, #400	; 0x190
	}

	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   10480:	f990 200c 	ldrsb.w	r2, [r0, #12]
   10484:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10488:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1048c:	4b20      	ldr	r3, [pc, #128]	; (10510 <bme680_calc_res_heat+0x9c>)
   1048e:	fb83 3c02 	smull	r3, ip, r3, r2
   10492:	17d3      	asrs	r3, r2, #31
   10494:	ebc3 1cac 	rsb	ip, r3, ip, asr #6
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   10498:	f990 3009 	ldrsb.w	r3, [r0, #9]
   1049c:	f503 7244 	add.w	r2, r3, #784	; 0x310
   104a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   104a4:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
   104a8:	f203 1399 	addw	r3, r3, #409	; 0x199
					   * heatr_temp * 5) / 100)
   104ac:	fb03 f101 	mul.w	r1, r3, r1
   104b0:	4b18      	ldr	r3, [pc, #96]	; (10514 <bme680_calc_res_heat+0xa0>)
   104b2:	fb83 4e01 	smull	r4, lr, r3, r1
   104b6:	17c9      	asrs	r1, r1, #31
   104b8:	ebc1 01ee 	rsb	r1, r1, lr, asr #3
					 + 3276800) / 10);
   104bc:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
   104c0:	fb83 4301 	smull	r4, r3, r3, r1
   104c4:	17c9      	asrs	r1, r1, #31
   104c6:	ebc1 03a3 	rsb	r3, r1, r3, asr #2
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   104ca:	fb02 f303 	mul.w	r3, r2, r3
	var3 = var1 + (var2 / 2);
   104ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   104d2:	105b      	asrs	r3, r3, #1
   104d4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
	var4 = (var3 / (data->res_heat_range + 4));
   104d8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   104dc:	3204      	adds	r2, #4
   104de:	fb93 f3f2 	sdiv	r3, r3, r2
	var5 = (131 * data->res_heat_val) + 65536;
   104e2:	f990 0026 	ldrsb.w	r0, [r0, #38]	; 0x26
   104e6:	eb00 1280 	add.w	r2, r0, r0, lsl #6
   104ea:	eb00 0042 	add.w	r0, r0, r2, lsl #1
   104ee:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
   104f2:	fb93 f0f0 	sdiv	r0, r3, r0
   104f6:	38fa      	subs	r0, #250	; 0xfa
   104f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   104fc:	0040      	lsls	r0, r0, #1
	heatr_res = (heatr_res_x100 + 50) / 100;
   104fe:	3032      	adds	r0, #50	; 0x32
   10500:	4b05      	ldr	r3, [pc, #20]	; (10518 <bme680_calc_res_heat+0xa4>)
   10502:	fb83 2300 	smull	r2, r3, r3, r0
   10506:	17c0      	asrs	r0, r0, #31
   10508:	ebc0 1063 	rsb	r0, r0, r3, asr #5

	return heatr_res;
}
   1050c:	b2c0      	uxtb	r0, r0
   1050e:	bd10      	pop	{r4, pc}
   10510:	10624dd3 	.word	0x10624dd3
   10514:	66666667 	.word	0x66666667
   10518:	51eb851f 	.word	0x51eb851f

0001051c <bme680_channel_get>:

static int bme680_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
	struct bme680_data *data = dev->data;
   1051c:	6903      	ldr	r3, [r0, #16]

	switch (chan) {
   1051e:	390d      	subs	r1, #13
   10520:	2910      	cmp	r1, #16
   10522:	d84f      	bhi.n	105c4 <bme680_channel_get+0xa8>
   10524:	e8df f001 	tbb	[pc, r1]
   10528:	364e2309 	.word	0x364e2309
   1052c:	4e4e4e4e 	.word	0x4e4e4e4e
   10530:	4e4e4e4e 	.word	0x4e4e4e4e
   10534:	4e4e4e4e 	.word	0x4e4e4e4e
   10538:	49          	.byte	0x49
   10539:	00          	.byte	0x00
{
   1053a:	b500      	push	{lr}
	case SENSOR_CHAN_AMBIENT_TEMP:
		/*
		 * data->calc_temp has a resolution of 0.01 degC.
		 * So 5123 equals 51.23 degC.
		 */
		val->val1 = data->calc_temp / 100;
   1053c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1053e:	4823      	ldr	r0, [pc, #140]	; (105cc <bme680_channel_get+0xb0>)
   10540:	fb80 ec01 	smull	lr, ip, r0, r1
   10544:	17c9      	asrs	r1, r1, #31
   10546:	ebc1 116c 	rsb	r1, r1, ip, asr #5
   1054a:	6011      	str	r1, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
   1054c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1054e:	fb80 3001 	smull	r3, r0, r0, r1
   10552:	17cb      	asrs	r3, r1, #31
   10554:	ebc3 1360 	rsb	r3, r3, r0, asr #5
   10558:	2064      	movs	r0, #100	; 0x64
   1055a:	fb00 1313 	mls	r3, r0, r3, r1
   1055e:	f242 7110 	movw	r1, #10000	; 0x2710
   10562:	fb01 f303 	mul.w	r3, r1, r3
   10566:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -EINVAL;
	}

	return 0;
   10568:	2000      	movs	r0, #0
}
   1056a:	f85d fb04 	ldr.w	pc, [sp], #4
		val->val1 = data->calc_press / 1000;
   1056e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10570:	4917      	ldr	r1, [pc, #92]	; (105d0 <bme680_channel_get+0xb4>)
   10572:	fba1 c000 	umull	ip, r0, r1, r0
   10576:	0980      	lsrs	r0, r0, #6
   10578:	6010      	str	r0, [r2, #0]
		val->val2 = (data->calc_press % 1000) * 1000;
   1057a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1057c:	fba1 1300 	umull	r1, r3, r1, r0
   10580:	099b      	lsrs	r3, r3, #6
   10582:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10586:	fb01 0313 	mls	r3, r1, r3, r0
   1058a:	fb01 f303 	mul.w	r3, r1, r3
   1058e:	6053      	str	r3, [r2, #4]
	return 0;
   10590:	2000      	movs	r0, #0
		break;
   10592:	4770      	bx	lr
		val->val1 = data->calc_humidity / 1000;
   10594:	6b18      	ldr	r0, [r3, #48]	; 0x30
   10596:	490e      	ldr	r1, [pc, #56]	; (105d0 <bme680_channel_get+0xb4>)
   10598:	fba1 c000 	umull	ip, r0, r1, r0
   1059c:	0980      	lsrs	r0, r0, #6
   1059e:	6010      	str	r0, [r2, #0]
		val->val2 = (data->calc_humidity % 1000) * 1000;
   105a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
   105a2:	fba1 1300 	umull	r1, r3, r1, r0
   105a6:	099b      	lsrs	r3, r3, #6
   105a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   105ac:	fb01 0313 	mls	r3, r1, r3, r0
   105b0:	fb01 f303 	mul.w	r3, r1, r3
   105b4:	6053      	str	r3, [r2, #4]
	return 0;
   105b6:	2000      	movs	r0, #0
		break;
   105b8:	4770      	bx	lr
		val->val1 = data->calc_gas_resistance;
   105ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   105bc:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   105be:	2000      	movs	r0, #0
   105c0:	6050      	str	r0, [r2, #4]
		break;
   105c2:	4770      	bx	lr
	switch (chan) {
   105c4:	f06f 0015 	mvn.w	r0, #21
}
   105c8:	4770      	bx	lr
   105ca:	bf00      	nop
   105cc:	51eb851f 	.word	0x51eb851f
   105d0:	10624dd3 	.word	0x10624dd3

000105d4 <bme680_init>:

	return 0;
}

static int bme680_init(const struct device *dev)
{
   105d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   105d6:	b083      	sub	sp, #12
   105d8:	af00      	add	r7, sp, #0
   105da:	4605      	mov	r5, r0
	struct bme680_data *data = dev->data;
   105dc:	6906      	ldr	r6, [r0, #16]
	const struct bme680_config *config = dev->config;
   105de:	6840      	ldr	r0, [r0, #4]
	return config->bus_io->check(&config->bus);
   105e0:	6883      	ldr	r3, [r0, #8]
   105e2:	681b      	ldr	r3, [r3, #0]
   105e4:	4798      	blx	r3
	int err;

	err = bme680_bus_check(dev);
	if (err < 0) {
   105e6:	1e04      	subs	r4, r0, #0
   105e8:	db53      	blt.n	10692 <bme680_init+0xbe>
	const struct bme680_config *config = dev->config;
   105ea:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->read(dev, start, buf, size);
   105ec:	689b      	ldr	r3, [r3, #8]
   105ee:	685c      	ldr	r4, [r3, #4]
   105f0:	2301      	movs	r3, #1
   105f2:	f106 0240 	add.w	r2, r6, #64	; 0x40
   105f6:	21d0      	movs	r1, #208	; 0xd0
   105f8:	4628      	mov	r0, r5
   105fa:	47a0      	blx	r4
		}
	}
#endif

	err = bme680_reg_read(dev, BME680_REG_CHIP_ID, &data->chip_id, 1);
	if (err < 0) {
   105fc:	1e04      	subs	r4, r0, #0
   105fe:	f2c0 8088 	blt.w	10712 <bme680_init+0x13e>
		return err;
	}

	if (data->chip_id == BME680_CHIP_ID) {
   10602:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   10606:	2b61      	cmp	r3, #97	; 0x61
   10608:	f040 8096 	bne.w	10738 <bme680_init+0x164>
	} else {
		LOG_ERR("Bad BME680 chip id: 0x%x", data->chip_id);
		return -ENOTSUP;
	}

	err = bme680_read_compensation(dev);
   1060c:	4628      	mov	r0, r5
   1060e:	f00c ffce 	bl	1d5ae <bme680_read_compensation>
	if (err < 0) {
   10612:	1e04      	subs	r4, r0, #0
   10614:	db7d      	blt.n	10712 <bme680_init+0x13e>
	const struct bme680_config *config = dev->config;
   10616:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
   10618:	689b      	ldr	r3, [r3, #8]
   1061a:	689b      	ldr	r3, [r3, #8]
   1061c:	2201      	movs	r2, #1
   1061e:	2172      	movs	r1, #114	; 0x72
   10620:	4628      	mov	r0, r5
   10622:	4798      	blx	r3
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
	if (err < 0) {
   10624:	1e04      	subs	r4, r0, #0
   10626:	db74      	blt.n	10712 <bme680_init+0x13e>
	const struct bme680_config *config = dev->config;
   10628:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
   1062a:	689b      	ldr	r3, [r3, #8]
   1062c:	689b      	ldr	r3, [r3, #8]
   1062e:	2200      	movs	r2, #0
   10630:	2175      	movs	r1, #117	; 0x75
   10632:	4628      	mov	r0, r5
   10634:	4798      	blx	r3
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CONFIG, BME680_CONFIG_VAL);
	if (err < 0) {
   10636:	1e04      	subs	r4, r0, #0
   10638:	db6b      	blt.n	10712 <bme680_init+0x13e>
	const struct bme680_config *config = dev->config;
   1063a:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
   1063c:	689b      	ldr	r3, [r3, #8]
   1063e:	689b      	ldr	r3, [r3, #8]
   10640:	2210      	movs	r2, #16
   10642:	2171      	movs	r1, #113	; 0x71
   10644:	4628      	mov	r0, r5
   10646:	4798      	blx	r3
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_GAS_1,
			       BME680_CTRL_GAS_1_VAL);
	if (err < 0) {
   10648:	1e04      	subs	r4, r0, #0
   1064a:	db62      	blt.n	10712 <bme680_init+0x13e>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_RES_HEAT0,
   1064c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   10650:	4630      	mov	r0, r6
   10652:	f7ff ff0f 	bl	10474 <bme680_calc_res_heat>
   10656:	4602      	mov	r2, r0
	const struct bme680_config *config = dev->config;
   10658:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
   1065a:	689b      	ldr	r3, [r3, #8]
   1065c:	689b      	ldr	r3, [r3, #8]
   1065e:	215a      	movs	r1, #90	; 0x5a
   10660:	4628      	mov	r0, r5
   10662:	4798      	blx	r3
			       bme680_calc_res_heat(data, BME680_HEATR_TEMP));
	if (err < 0) {
   10664:	1e04      	subs	r4, r0, #0
   10666:	db54      	blt.n	10712 <bme680_init+0x13e>
		return err;
	}

	err = bme680_reg_write(dev, BME680_REG_GAS_WAIT0,
   10668:	20c5      	movs	r0, #197	; 0xc5
   1066a:	f00c ff2b 	bl	1d4c4 <bme680_calc_gas_wait>
   1066e:	4602      	mov	r2, r0
	const struct bme680_config *config = dev->config;
   10670:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
   10672:	689b      	ldr	r3, [r3, #8]
   10674:	689b      	ldr	r3, [r3, #8]
   10676:	2164      	movs	r1, #100	; 0x64
   10678:	4628      	mov	r0, r5
   1067a:	4798      	blx	r3
			       bme680_calc_gas_wait(BME680_HEATR_DUR_MS));
	if (err < 0) {
   1067c:	1e04      	subs	r4, r0, #0
   1067e:	db48      	blt.n	10712 <bme680_init+0x13e>
	const struct bme680_config *config = dev->config;
   10680:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->write(dev, reg, val);
   10682:	689b      	ldr	r3, [r3, #8]
   10684:	689b      	ldr	r3, [r3, #8]
   10686:	2255      	movs	r2, #85	; 0x55
   10688:	2174      	movs	r1, #116	; 0x74
   1068a:	4628      	mov	r0, r5
   1068c:	4798      	blx	r3
   1068e:	4604      	mov	r4, r0
	}

	err = bme680_reg_write(dev, BME680_REG_CTRL_MEAS,
			       BME680_CTRL_MEAS_VAL);

	return err;
   10690:	e03f      	b.n	10712 <bme680_init+0x13e>
		LOG_ERR("Bus not ready for '%s'", dev->name);
   10692:	6828      	ldr	r0, [r5, #0]
   10694:	2302      	movs	r3, #2
   10696:	713b      	strb	r3, [r7, #4]
   10698:	466d      	mov	r5, sp
   1069a:	b088      	sub	sp, #32
   1069c:	466b      	mov	r3, sp
   1069e:	f113 0210 	adds.w	r2, r3, #16
   106a2:	d03a      	beq.n	1071a <bme680_init+0x146>
   106a4:	260d      	movs	r6, #13
   106a6:	b11a      	cbz	r2, 106b0 <bme680_init+0xdc>
   106a8:	2e04      	cmp	r6, #4
   106aa:	dd01      	ble.n	106b0 <bme680_init+0xdc>
   106ac:	4941      	ldr	r1, [pc, #260]	; (107b4 <bme680_init+0x1e0>)
   106ae:	6159      	str	r1, [r3, #20]
   106b0:	2102      	movs	r1, #2
   106b2:	7039      	strb	r1, [r7, #0]
   106b4:	b112      	cbz	r2, 106bc <bme680_init+0xe8>
   106b6:	2e08      	cmp	r6, #8
   106b8:	dd00      	ble.n	106bc <bme680_init+0xe8>
   106ba:	6198      	str	r0, [r3, #24]
   106bc:	b11a      	cbz	r2, 106c6 <bme680_init+0xf2>
   106be:	f103 011c 	add.w	r1, r3, #28
   106c2:	2000      	movs	r0, #0
   106c4:	b360      	cbz	r0, 10720 <bme680_init+0x14c>
   106c6:	2e0c      	cmp	r6, #12
   106c8:	dd33      	ble.n	10732 <bme680_init+0x15e>
   106ca:	260d      	movs	r6, #13
   106cc:	b142      	cbz	r2, 106e0 <bme680_init+0x10c>
   106ce:	2103      	movs	r1, #3
   106d0:	7139      	strb	r1, [r7, #4]
   106d2:	2100      	movs	r1, #0
   106d4:	7179      	strb	r1, [r7, #5]
   106d6:	71b9      	strb	r1, [r7, #6]
   106d8:	2101      	movs	r1, #1
   106da:	71f9      	strb	r1, [r7, #7]
   106dc:	6878      	ldr	r0, [r7, #4]
   106de:	6118      	str	r0, [r3, #16]
   106e0:	2100      	movs	r1, #0
   106e2:	f36f 0100 	bfc	r1, #0, #1
   106e6:	f36f 0141 	bfc	r1, #1, #1
   106ea:	f36f 0182 	bfc	r1, #2, #1
   106ee:	f36f 01c5 	bfc	r1, #3, #3
   106f2:	2301      	movs	r3, #1
   106f4:	f363 1188 	bfi	r1, r3, #6, #3
   106f8:	f3c6 0309 	ubfx	r3, r6, #0, #10
   106fc:	f363 2152 	bfi	r1, r3, #9, #10
   10700:	f36f 41de 	bfc	r1, #19, #12
   10704:	f36f 71df 	bfc	r1, #31, #1
   10708:	2300      	movs	r3, #0
   1070a:	482b      	ldr	r0, [pc, #172]	; (107b8 <bme680_init+0x1e4>)
   1070c:	f7f2 ffde 	bl	36cc <z_impl_z_log_msg_static_create>
   10710:	46ad      	mov	sp, r5
}
   10712:	4620      	mov	r0, r4
   10714:	370c      	adds	r7, #12
   10716:	46bd      	mov	sp, r7
   10718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Bus not ready for '%s'", dev->name);
   1071a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1071e:	e7c2      	b.n	106a6 <bme680_init+0xd2>
   10720:	f107 0c08 	add.w	ip, r7, #8
   10724:	4484      	add	ip, r0
   10726:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   1072a:	f801 cb01 	strb.w	ip, [r1], #1
   1072e:	3001      	adds	r0, #1
   10730:	e7c8      	b.n	106c4 <bme680_init+0xf0>
   10732:	f06f 061b 	mvn.w	r6, #27
   10736:	e7c9      	b.n	106cc <bme680_init+0xf8>
		LOG_ERR("Bad BME680 chip id: 0x%x", data->chip_id);
   10738:	466c      	mov	r4, sp
   1073a:	b088      	sub	sp, #32
   1073c:	4669      	mov	r1, sp
   1073e:	f111 0210 	adds.w	r2, r1, #16
   10742:	d031      	beq.n	107a8 <bme680_init+0x1d4>
   10744:	200c      	movs	r0, #12
   10746:	b11a      	cbz	r2, 10750 <bme680_init+0x17c>
   10748:	2804      	cmp	r0, #4
   1074a:	dd01      	ble.n	10750 <bme680_init+0x17c>
   1074c:	4d1b      	ldr	r5, [pc, #108]	; (107bc <bme680_init+0x1e8>)
   1074e:	614d      	str	r5, [r1, #20]
   10750:	b112      	cbz	r2, 10758 <bme680_init+0x184>
   10752:	2808      	cmp	r0, #8
   10754:	dd00      	ble.n	10758 <bme680_init+0x184>
   10756:	618b      	str	r3, [r1, #24]
   10758:	280b      	cmp	r0, #11
   1075a:	dd28      	ble.n	107ae <bme680_init+0x1da>
   1075c:	230c      	movs	r3, #12
   1075e:	b13a      	cbz	r2, 10770 <bme680_init+0x19c>
   10760:	2003      	movs	r0, #3
   10762:	7138      	strb	r0, [r7, #4]
   10764:	2000      	movs	r0, #0
   10766:	7178      	strb	r0, [r7, #5]
   10768:	71b8      	strb	r0, [r7, #6]
   1076a:	71f8      	strb	r0, [r7, #7]
   1076c:	6878      	ldr	r0, [r7, #4]
   1076e:	6108      	str	r0, [r1, #16]
   10770:	2100      	movs	r1, #0
   10772:	f36f 0100 	bfc	r1, #0, #1
   10776:	f36f 0141 	bfc	r1, #1, #1
   1077a:	f36f 0182 	bfc	r1, #2, #1
   1077e:	f36f 01c5 	bfc	r1, #3, #3
   10782:	2001      	movs	r0, #1
   10784:	f360 1188 	bfi	r1, r0, #6, #3
   10788:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1078c:	f363 2152 	bfi	r1, r3, #9, #10
   10790:	f36f 41de 	bfc	r1, #19, #12
   10794:	f36f 71df 	bfc	r1, #31, #1
   10798:	2300      	movs	r3, #0
   1079a:	4807      	ldr	r0, [pc, #28]	; (107b8 <bme680_init+0x1e4>)
   1079c:	f7f2 ff96 	bl	36cc <z_impl_z_log_msg_static_create>
   107a0:	46a5      	mov	sp, r4
		return -ENOTSUP;
   107a2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   107a6:	e7b4      	b.n	10712 <bme680_init+0x13e>
		LOG_ERR("Bad BME680 chip id: 0x%x", data->chip_id);
   107a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   107ac:	e7cb      	b.n	10746 <bme680_init+0x172>
   107ae:	f06f 031b 	mvn.w	r3, #27
   107b2:	e7d4      	b.n	1075e <bme680_init+0x18a>
   107b4:	00022e88 	.word	0x00022e88
   107b8:	00020510 	.word	0x00020510
   107bc:	00022ea0 	.word	0x00022ea0

000107c0 <bmm150_convert>:
 * Gauss
 */
static void bmm150_convert(struct sensor_value *val, int raw_val)
{
	/* val = raw_val / 1600 */
	val->val1 = raw_val / 1600;
   107c0:	4a0a      	ldr	r2, [pc, #40]	; (107ec <bmm150_convert+0x2c>)
   107c2:	fb82 3201 	smull	r3, r2, r2, r1
   107c6:	17cb      	asrs	r3, r1, #31
   107c8:	ebc3 2362 	rsb	r3, r3, r2, asr #9
   107cc:	6003      	str	r3, [r0, #0]
	val->val2 = ((int32_t)raw_val * (1000000 / 1600)) % 1000000;
   107ce:	f240 2371 	movw	r3, #625	; 0x271
   107d2:	fb03 f101 	mul.w	r1, r3, r1
   107d6:	4a06      	ldr	r2, [pc, #24]	; (107f0 <bmm150_convert+0x30>)
   107d8:	fb82 3201 	smull	r3, r2, r2, r1
   107dc:	17cb      	asrs	r3, r1, #31
   107de:	ebc3 43a2 	rsb	r3, r3, r2, asr #18
   107e2:	4a04      	ldr	r2, [pc, #16]	; (107f4 <bmm150_convert+0x34>)
   107e4:	fb02 1313 	mls	r3, r2, r3, r1
   107e8:	6043      	str	r3, [r0, #4]
}
   107ea:	4770      	bx	lr
   107ec:	51eb851f 	.word	0x51eb851f
   107f0:	431bde83 	.word	0x431bde83
   107f4:	000f4240 	.word	0x000f4240

000107f8 <bmm150_sample_fetch>:
{
   107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   107fc:	b090      	sub	sp, #64	; 0x40
	struct bmm150_data *drv_data = dev->data;
   107fe:	6905      	ldr	r5, [r0, #16]
	const struct bmm150_config *config = dev->config;
   10800:	6843      	ldr	r3, [r0, #4]
static inline int i2c_burst_read_dt(const struct i2c_dt_spec *spec,
				    uint8_t start_addr,
				    uint8_t *buf,
				    uint32_t num_bytes)
{
	return i2c_burst_read(spec->bus, spec->addr,
   10802:	6818      	ldr	r0, [r3, #0]
   10804:	889b      	ldrh	r3, [r3, #4]
   10806:	2242      	movs	r2, #66	; 0x42
   10808:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1080c:	f10d 0207 	add.w	r2, sp, #7
   10810:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   10812:	2201      	movs	r2, #1
   10814:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   10816:	2200      	movs	r2, #0
   10818:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1081c:	aa08      	add	r2, sp, #32
   1081e:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   10820:	2208      	movs	r2, #8
   10822:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   10824:	2207      	movs	r2, #7
   10826:	f88d 201c 	strb.w	r2, [sp, #28]
	const struct i2c_driver_api *api =
   1082a:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1082c:	6894      	ldr	r4, [r2, #8]
   1082e:	2202      	movs	r2, #2
   10830:	a902      	add	r1, sp, #8
   10832:	47a0      	blx	r4
	if (i2c_burst_read_dt(&config->i2c,
   10834:	2800      	cmp	r0, #0
   10836:	db25      	blt.n	10884 <bmm150_sample_fetch+0x8c>
	raw_x = (int16_t)sys_le16_to_cpu(values[BMM150_AXIS_X]) >>
   10838:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
	raw_y = (int16_t)sys_le16_to_cpu(values[BMM150_AXIS_Y]) >>
   1083c:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
   10840:	ea4f 08e8 	mov.w	r8, r8, asr #3
	raw_z = (int16_t)sys_le16_to_cpu(values[BMM150_AXIS_Z]) >>
   10844:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
   10848:	107f      	asrs	r7, r7, #1
	rhall = sys_le16_to_cpu(values[BMM150_RHALL]) >>
   1084a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
   1084e:	08a4      	lsrs	r4, r4, #2
	drv_data->sample_x = bmm150_compensate_xy(&drv_data->tregs,
   10850:	f105 0618 	add.w	r6, r5, #24
   10854:	2301      	movs	r3, #1
   10856:	4622      	mov	r2, r4
   10858:	10c9      	asrs	r1, r1, #3
   1085a:	4630      	mov	r0, r6
   1085c:	f00c ff90 	bl	1d780 <bmm150_compensate_xy>
   10860:	6428      	str	r0, [r5, #64]	; 0x40
	drv_data->sample_y = bmm150_compensate_xy(&drv_data->tregs,
   10862:	2300      	movs	r3, #0
   10864:	4622      	mov	r2, r4
   10866:	4641      	mov	r1, r8
   10868:	4630      	mov	r0, r6
   1086a:	f00c ff89 	bl	1d780 <bmm150_compensate_xy>
   1086e:	6468      	str	r0, [r5, #68]	; 0x44
	drv_data->sample_z = bmm150_compensate_z(&drv_data->tregs,
   10870:	4622      	mov	r2, r4
   10872:	4639      	mov	r1, r7
   10874:	4630      	mov	r0, r6
   10876:	f00c ffbe 	bl	1d7f6 <bmm150_compensate_z>
   1087a:	64a8      	str	r0, [r5, #72]	; 0x48
	return 0;
   1087c:	2000      	movs	r0, #0
}
   1087e:	b010      	add	sp, #64	; 0x40
   10880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("failed to read sample");
   10884:	4b13      	ldr	r3, [pc, #76]	; (108d4 <bmm150_sample_fetch+0xdc>)
   10886:	930f      	str	r3, [sp, #60]	; 0x3c
   10888:	2302      	movs	r3, #2
   1088a:	f88d 3008 	strb.w	r3, [sp, #8]
   1088e:	2300      	movs	r3, #0
   10890:	f88d 3009 	strb.w	r3, [sp, #9]
   10894:	f88d 300a 	strb.w	r3, [sp, #10]
   10898:	f88d 300b 	strb.w	r3, [sp, #11]
   1089c:	9a02      	ldr	r2, [sp, #8]
   1089e:	920e      	str	r2, [sp, #56]	; 0x38
   108a0:	4619      	mov	r1, r3
   108a2:	f363 0100 	bfi	r1, r3, #0, #1
   108a6:	f363 0141 	bfi	r1, r3, #1, #1
   108aa:	f363 0182 	bfi	r1, r3, #2, #1
   108ae:	f363 01c5 	bfi	r1, r3, #3, #3
   108b2:	2201      	movs	r2, #1
   108b4:	f362 1188 	bfi	r1, r2, #6, #3
   108b8:	2208      	movs	r2, #8
   108ba:	f362 2152 	bfi	r1, r2, #9, #10
   108be:	f363 41de 	bfi	r1, r3, #19, #12
   108c2:	f363 71df 	bfi	r1, r3, #31, #1
   108c6:	aa0e      	add	r2, sp, #56	; 0x38
   108c8:	4803      	ldr	r0, [pc, #12]	; (108d8 <bmm150_sample_fetch+0xe0>)
   108ca:	f7f2 feff 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
   108ce:	f06f 0004 	mvn.w	r0, #4
   108d2:	e7d4      	b.n	1087e <bmm150_sample_fetch+0x86>
   108d4:	00022f78 	.word	0x00022f78
   108d8:	00020500 	.word	0x00020500

000108dc <bmm150_set_odr>:
{
   108dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   108de:	b089      	sub	sp, #36	; 0x24
	const struct bmm150_config *config = dev->config;
   108e0:	6844      	ldr	r4, [r0, #4]
	for (i = 0U; i < ARRAY_SIZE(bmm150_samp_freq_table); ++i) {
   108e2:	2300      	movs	r3, #0
   108e4:	2b07      	cmp	r3, #7
   108e6:	d847      	bhi.n	10978 <bmm150_set_odr+0x9c>
		if (val <= bmm150_samp_freq_table[i].freq) {
   108e8:	4618      	mov	r0, r3
   108ea:	4a25      	ldr	r2, [pc, #148]	; (10980 <bmm150_set_odr+0xa4>)
   108ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   108f0:	4291      	cmp	r1, r2
   108f2:	dd02      	ble.n	108fa <bmm150_set_odr+0x1e>
	for (i = 0U; i < ARRAY_SIZE(bmm150_samp_freq_table); ++i) {
   108f4:	3301      	adds	r3, #1
   108f6:	b2db      	uxtb	r3, r3
   108f8:	e7f4      	b.n	108e4 <bmm150_set_odr+0x8>
						      (bmm150_samp_freq_table[i].reg_val <<
   108fa:	4b21      	ldr	r3, [pc, #132]	; (10980 <bmm150_set_odr+0xa4>)
   108fc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   10900:	7903      	ldrb	r3, [r0, #4]
			return i2c_reg_update_byte_dt(&config->i2c,
   10902:	00db      	lsls	r3, r3, #3
   10904:	b2dd      	uxtb	r5, r3
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
   10906:	6826      	ldr	r6, [r4, #0]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   10908:	7924      	ldrb	r4, [r4, #4]
   1090a:	234c      	movs	r3, #76	; 0x4c
   1090c:	f88d 3004 	strb.w	r3, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   10910:	ab01      	add	r3, sp, #4
   10912:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   10914:	2301      	movs	r3, #1
   10916:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   10918:	2200      	movs	r2, #0
   1091a:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1091e:	f10d 0203 	add.w	r2, sp, #3
   10922:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   10924:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   10926:	2307      	movs	r3, #7
   10928:	f88d 301c 	strb.w	r3, [sp, #28]
	const struct i2c_driver_api *api =
   1092c:	68b3      	ldr	r3, [r6, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1092e:	689f      	ldr	r7, [r3, #8]
   10930:	4623      	mov	r3, r4
   10932:	2202      	movs	r2, #2
   10934:	a902      	add	r1, sp, #8
   10936:	4630      	mov	r0, r6
   10938:	47b8      	blx	r7
	if (rc != 0) {
   1093a:	b9f8      	cbnz	r0, 1097c <bmm150_set_odr+0xa0>
	new_value = (old_value & ~mask) | (value & mask);
   1093c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10940:	f022 0338 	bic.w	r3, r2, #56	; 0x38
   10944:	b25b      	sxtb	r3, r3
   10946:	f005 0538 	and.w	r5, r5, #56	; 0x38
   1094a:	432b      	orrs	r3, r5
   1094c:	b2db      	uxtb	r3, r3
	if (new_value == old_value) {
   1094e:	429a      	cmp	r2, r3
   10950:	d014      	beq.n	1097c <bmm150_set_odr+0xa0>
	uint8_t tx_buf[2] = {reg_addr, value};
   10952:	224c      	movs	r2, #76	; 0x4c
   10954:	f88d 2004 	strb.w	r2, [sp, #4]
   10958:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1095c:	ab01      	add	r3, sp, #4
   1095e:	9302      	str	r3, [sp, #8]
	msg.len = num_bytes;
   10960:	2302      	movs	r3, #2
   10962:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   10964:	f88d 3010 	strb.w	r3, [sp, #16]
	const struct i2c_driver_api *api =
   10968:	68b3      	ldr	r3, [r6, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1096a:	689d      	ldr	r5, [r3, #8]
   1096c:	4623      	mov	r3, r4
   1096e:	2201      	movs	r2, #1
   10970:	a902      	add	r1, sp, #8
   10972:	4630      	mov	r0, r6
   10974:	47a8      	blx	r5
   10976:	e001      	b.n	1097c <bmm150_set_odr+0xa0>
	return -ENOTSUP;
   10978:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1097c:	b009      	add	sp, #36	; 0x24
   1097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10980:	00023140 	.word	0x00023140

00010984 <bmm150_init_chip>:
	.sample_fetch = bmm150_sample_fetch,
	.channel_get = bmm150_channel_get,
};

static int bmm150_init_chip(const struct device *dev)
{
   10984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10988:	b0ac      	sub	sp, #176	; 0xb0
   1098a:	af00      	add	r7, sp, #0
   1098c:	4604      	mov	r4, r0
	struct bmm150_data *data = dev->data;
   1098e:	6906      	ldr	r6, [r0, #16]
	const struct bmm150_config *config = dev->config;
   10990:	6845      	ldr	r5, [r0, #4]
	uint8_t chip_id;
	struct bmm150_preset preset;

	if (bmm150_set_power_mode(dev, BMM150_POWER_MODE_NORMAL, 0) < 0) {
   10992:	2200      	movs	r2, #0
   10994:	2102      	movs	r1, #2
   10996:	f00c ff80 	bl	1d89a <bmm150_set_power_mode>
   1099a:	2800      	cmp	r0, #0
   1099c:	f2c0 808b 	blt.w	10ab6 <bmm150_init_chip+0x132>
		LOG_ERR("failed to bring up device from normal mode");
		return -EIO;
	}

	if (bmm150_set_power_mode(dev, BMM150_POWER_MODE_SUSPEND, 1) < 0) {
   109a0:	2201      	movs	r2, #1
   109a2:	2100      	movs	r1, #0
   109a4:	4620      	mov	r0, r4
   109a6:	f00c ff78 	bl	1d89a <bmm150_set_power_mode>
   109aa:	2800      	cmp	r0, #0
   109ac:	f2c0 80aa 	blt.w	10b04 <bmm150_init_chip+0x180>
		LOG_ERR("failed to bring up device in suspend mode");
		return -EIO;
	}

	if (bmm150_set_power_mode(dev, BMM150_POWER_MODE_SUSPEND, 0)
   109b0:	2200      	movs	r2, #0
   109b2:	4611      	mov	r1, r2
   109b4:	4620      	mov	r0, r4
   109b6:	f00c ff70 	bl	1d89a <bmm150_set_power_mode>
   109ba:	2800      	cmp	r0, #0
   109bc:	f2c0 80c9 	blt.w	10b52 <bmm150_init_chip+0x1ce>
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   109c0:	6828      	ldr	r0, [r5, #0]
   109c2:	88ab      	ldrh	r3, [r5, #4]
   109c4:	2240      	movs	r2, #64	; 0x40
   109c6:	703a      	strb	r2, [r7, #0]
	msg[0].buf = (uint8_t *)write_buf;
   109c8:	607f      	str	r7, [r7, #4]
	msg[0].len = num_write;
   109ca:	2201      	movs	r2, #1
   109cc:	60ba      	str	r2, [r7, #8]
	msg[0].flags = I2C_MSG_WRITE;
   109ce:	2100      	movs	r1, #0
   109d0:	7339      	strb	r1, [r7, #12]
	msg[1].buf = (uint8_t *)read_buf;
   109d2:	f107 011f 	add.w	r1, r7, #31
   109d6:	6139      	str	r1, [r7, #16]
	msg[1].len = num_read;
   109d8:	617a      	str	r2, [r7, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   109da:	2207      	movs	r2, #7
   109dc:	763a      	strb	r2, [r7, #24]
	const struct i2c_driver_api *api =
   109de:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   109e0:	f8d2 8008 	ldr.w	r8, [r2, #8]
   109e4:	2202      	movs	r2, #2
   109e6:	1d39      	adds	r1, r7, #4
   109e8:	47c0      	blx	r8
	    < 0) {
		LOG_ERR("failed to bring up device from suspend mode");
		return -EIO;
	}

	if (i2c_reg_read_byte_dt(&config->i2c,
   109ea:	2800      	cmp	r0, #0
   109ec:	f2c0 80d6 	blt.w	10b9c <bmm150_init_chip+0x218>
				 BMM150_REG_CHIP_ID, &chip_id) < 0) {
		LOG_ERR("failed reading chip id");
		goto err_poweroff;
	}

	if (chip_id != BMM150_CHIP_ID_VAL) {
   109f0:	7ffb      	ldrb	r3, [r7, #31]
   109f2:	2b32      	cmp	r3, #50	; 0x32
   109f4:	f040 80f5 	bne.w	10be2 <bmm150_init_chip+0x25e>
		LOG_ERR("invalid chip id 0x%x", chip_id);
		goto err_poweroff;
	}

	preset = bmm150_presets_table[BMM150_DEFAULT_PRESET];
   109f8:	4bbc      	ldr	r3, [pc, #752]	; (10cec <bmm150_init_chip+0x368>)
   109fa:	f8b3 2003 	ldrh.w	r2, [r3, #3]
   109fe:	795b      	ldrb	r3, [r3, #5]
   10a00:	83ba      	strh	r2, [r7, #28]
   10a02:	77bb      	strb	r3, [r7, #30]
	if (bmm150_set_odr(dev, preset.odr) < 0) {
   10a04:	210a      	movs	r1, #10
   10a06:	4620      	mov	r0, r4
   10a08:	f7ff ff68 	bl	108dc <bmm150_set_odr>
   10a0c:	2800      	cmp	r0, #0
   10a0e:	f2c0 8130 	blt.w	10c72 <bmm150_init_chip+0x2ee>
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   10a12:	6828      	ldr	r0, [r5, #0]
   10a14:	88ab      	ldrh	r3, [r5, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   10a16:	2251      	movs	r2, #81	; 0x51
   10a18:	703a      	strb	r2, [r7, #0]
   10a1a:	2204      	movs	r2, #4
   10a1c:	707a      	strb	r2, [r7, #1]
	msg.buf = (uint8_t *)buf;
   10a1e:	607f      	str	r7, [r7, #4]
	msg.len = num_bytes;
   10a20:	2202      	movs	r2, #2
   10a22:	60ba      	str	r2, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   10a24:	733a      	strb	r2, [r7, #12]
	const struct i2c_driver_api *api =
   10a26:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10a28:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10a2c:	2201      	movs	r2, #1
   10a2e:	1d39      	adds	r1, r7, #4
   10a30:	47c0      	blx	r8
		LOG_ERR("failed to set ODR to %d",
			    preset.odr);
		goto err_poweroff;
	}

	if (i2c_reg_write_byte_dt(&config->i2c,
   10a32:	2800      	cmp	r0, #0
   10a34:	f2c0 816a 	blt.w	10d0c <bmm150_init_chip+0x388>
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   10a38:	6828      	ldr	r0, [r5, #0]
   10a3a:	88ab      	ldrh	r3, [r5, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   10a3c:	2252      	movs	r2, #82	; 0x52
   10a3e:	703a      	strb	r2, [r7, #0]
   10a40:	220e      	movs	r2, #14
   10a42:	707a      	strb	r2, [r7, #1]
	msg.buf = (uint8_t *)buf;
   10a44:	607f      	str	r7, [r7, #4]
	msg.len = num_bytes;
   10a46:	2202      	movs	r2, #2
   10a48:	60ba      	str	r2, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   10a4a:	733a      	strb	r2, [r7, #12]
	const struct i2c_driver_api *api =
   10a4c:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10a4e:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10a52:	2201      	movs	r2, #1
   10a54:	1d39      	adds	r1, r7, #4
   10a56:	47c0      	blx	r8
		LOG_ERR("failed to set REP XY to %d",
			    preset.rep_xy);
		goto err_poweroff;
	}

	if (i2c_reg_write_byte_dt(&config->i2c,
   10a58:	2800      	cmp	r0, #0
   10a5a:	f2c0 8194 	blt.w	10d86 <bmm150_init_chip+0x402>
		LOG_ERR("failed to set REP Z to %d",
			    preset.rep_z);
		goto err_poweroff;
	}

	if (bmm150_set_power_mode(dev, BMM150_POWER_MODE_NORMAL, 1)
   10a5e:	2201      	movs	r2, #1
   10a60:	2102      	movs	r1, #2
   10a62:	4620      	mov	r0, r4
   10a64:	f00c ff19 	bl	1d89a <bmm150_set_power_mode>
   10a68:	2800      	cmp	r0, #0
   10a6a:	f2c0 81c9 	blt.w	10e00 <bmm150_init_chip+0x47c>
	    < 0) {
		LOG_ERR("failed to power on device");
	}

	if (i2c_burst_read_dt(&config->i2c,
			      BMM150_REG_TRIM_START, (uint8_t *)&data->tregs,
   10a6e:	f106 0218 	add.w	r2, r6, #24
	return i2c_burst_read(spec->bus, spec->addr,
   10a72:	6828      	ldr	r0, [r5, #0]
   10a74:	88ab      	ldrh	r3, [r5, #4]
   10a76:	215d      	movs	r1, #93	; 0x5d
   10a78:	7039      	strb	r1, [r7, #0]
	msg[0].buf = (uint8_t *)write_buf;
   10a7a:	607f      	str	r7, [r7, #4]
	msg[0].len = num_write;
   10a7c:	2101      	movs	r1, #1
   10a7e:	60b9      	str	r1, [r7, #8]
	msg[0].flags = I2C_MSG_WRITE;
   10a80:	2100      	movs	r1, #0
   10a82:	7339      	strb	r1, [r7, #12]
	msg[1].buf = (uint8_t *)read_buf;
   10a84:	613a      	str	r2, [r7, #16]
	msg[1].len = num_read;
   10a86:	2215      	movs	r2, #21
   10a88:	617a      	str	r2, [r7, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   10a8a:	2207      	movs	r2, #7
   10a8c:	763a      	strb	r2, [r7, #24]
	const struct i2c_driver_api *api =
   10a8e:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10a90:	6895      	ldr	r5, [r2, #8]
   10a92:	2202      	movs	r2, #2
   10a94:	1d39      	adds	r1, r7, #4
   10a96:	47a8      	blx	r5
	if (i2c_burst_read_dt(&config->i2c,
   10a98:	2800      	cmp	r0, #0
   10a9a:	f2c0 81d4 	blt.w	10e46 <bmm150_init_chip+0x4c2>
			      sizeof(data->tregs)) < 0) {
		LOG_ERR("failed to read trim regs");
		goto err_poweroff;
	}

	data->rep_xy = 0;
   10a9e:	2000      	movs	r0, #0
   10aa0:	6330      	str	r0, [r6, #48]	; 0x30
	data->rep_z = 0;
   10aa2:	6370      	str	r0, [r6, #52]	; 0x34
	data->odr = 0;
   10aa4:	63b0      	str	r0, [r6, #56]	; 0x38
	data->max_odr = 0;
   10aa6:	63f0      	str	r0, [r6, #60]	; 0x3c
	data->sample_x = 0;
   10aa8:	6430      	str	r0, [r6, #64]	; 0x40
	data->sample_y = 0;
   10aaa:	6470      	str	r0, [r6, #68]	; 0x44
	data->sample_z = 0;
   10aac:	64b0      	str	r0, [r6, #72]	; 0x48

err_poweroff:
	bmm150_set_power_mode(dev, BMM150_POWER_MODE_NORMAL, 0);
	bmm150_set_power_mode(dev, BMM150_POWER_MODE_SUSPEND, 1);
	return -EIO;
}
   10aae:	37b0      	adds	r7, #176	; 0xb0
   10ab0:	46bd      	mov	sp, r7
   10ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("failed to bring up device from normal mode");
   10ab6:	4b8e      	ldr	r3, [pc, #568]	; (10cf0 <bmm150_init_chip+0x36c>)
   10ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   10abc:	2302      	movs	r3, #2
   10abe:	713b      	strb	r3, [r7, #4]
   10ac0:	2300      	movs	r3, #0
   10ac2:	717b      	strb	r3, [r7, #5]
   10ac4:	71bb      	strb	r3, [r7, #6]
   10ac6:	71fb      	strb	r3, [r7, #7]
   10ac8:	687a      	ldr	r2, [r7, #4]
   10aca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   10ace:	4619      	mov	r1, r3
   10ad0:	f363 0100 	bfi	r1, r3, #0, #1
   10ad4:	f363 0141 	bfi	r1, r3, #1, #1
   10ad8:	f363 0182 	bfi	r1, r3, #2, #1
   10adc:	f363 01c5 	bfi	r1, r3, #3, #3
   10ae0:	2201      	movs	r2, #1
   10ae2:	f362 1188 	bfi	r1, r2, #6, #3
   10ae6:	2208      	movs	r2, #8
   10ae8:	f362 2152 	bfi	r1, r2, #9, #10
   10aec:	f363 41de 	bfi	r1, r3, #19, #12
   10af0:	f363 71df 	bfi	r1, r3, #31, #1
   10af4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   10af8:	487e      	ldr	r0, [pc, #504]	; (10cf4 <bmm150_init_chip+0x370>)
   10afa:	f7f2 fde7 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
   10afe:	f06f 0004 	mvn.w	r0, #4
   10b02:	e7d4      	b.n	10aae <bmm150_init_chip+0x12a>
		LOG_ERR("failed to bring up device in suspend mode");
   10b04:	4b7c      	ldr	r3, [pc, #496]	; (10cf8 <bmm150_init_chip+0x374>)
   10b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   10b0a:	2302      	movs	r3, #2
   10b0c:	713b      	strb	r3, [r7, #4]
   10b0e:	2300      	movs	r3, #0
   10b10:	717b      	strb	r3, [r7, #5]
   10b12:	71bb      	strb	r3, [r7, #6]
   10b14:	71fb      	strb	r3, [r7, #7]
   10b16:	687a      	ldr	r2, [r7, #4]
   10b18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   10b1c:	4619      	mov	r1, r3
   10b1e:	f363 0100 	bfi	r1, r3, #0, #1
   10b22:	f363 0141 	bfi	r1, r3, #1, #1
   10b26:	f363 0182 	bfi	r1, r3, #2, #1
   10b2a:	f363 01c5 	bfi	r1, r3, #3, #3
   10b2e:	2201      	movs	r2, #1
   10b30:	f362 1188 	bfi	r1, r2, #6, #3
   10b34:	2208      	movs	r2, #8
   10b36:	f362 2152 	bfi	r1, r2, #9, #10
   10b3a:	f363 41de 	bfi	r1, r3, #19, #12
   10b3e:	f363 71df 	bfi	r1, r3, #31, #1
   10b42:	f107 0290 	add.w	r2, r7, #144	; 0x90
   10b46:	486b      	ldr	r0, [pc, #428]	; (10cf4 <bmm150_init_chip+0x370>)
   10b48:	f7f2 fdc0 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
   10b4c:	f06f 0004 	mvn.w	r0, #4
   10b50:	e7ad      	b.n	10aae <bmm150_init_chip+0x12a>
		LOG_ERR("failed to bring up device from suspend mode");
   10b52:	4b6a      	ldr	r3, [pc, #424]	; (10cfc <bmm150_init_chip+0x378>)
   10b54:	67fb      	str	r3, [r7, #124]	; 0x7c
   10b56:	2302      	movs	r3, #2
   10b58:	713b      	strb	r3, [r7, #4]
   10b5a:	2300      	movs	r3, #0
   10b5c:	717b      	strb	r3, [r7, #5]
   10b5e:	71bb      	strb	r3, [r7, #6]
   10b60:	71fb      	strb	r3, [r7, #7]
   10b62:	687a      	ldr	r2, [r7, #4]
   10b64:	67ba      	str	r2, [r7, #120]	; 0x78
   10b66:	4619      	mov	r1, r3
   10b68:	f363 0100 	bfi	r1, r3, #0, #1
   10b6c:	f363 0141 	bfi	r1, r3, #1, #1
   10b70:	f363 0182 	bfi	r1, r3, #2, #1
   10b74:	f363 01c5 	bfi	r1, r3, #3, #3
   10b78:	2201      	movs	r2, #1
   10b7a:	f362 1188 	bfi	r1, r2, #6, #3
   10b7e:	2208      	movs	r2, #8
   10b80:	f362 2152 	bfi	r1, r2, #9, #10
   10b84:	f363 41de 	bfi	r1, r3, #19, #12
   10b88:	f363 71df 	bfi	r1, r3, #31, #1
   10b8c:	f107 0278 	add.w	r2, r7, #120	; 0x78
   10b90:	4858      	ldr	r0, [pc, #352]	; (10cf4 <bmm150_init_chip+0x370>)
   10b92:	f7f2 fd9b 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
   10b96:	f06f 0004 	mvn.w	r0, #4
   10b9a:	e788      	b.n	10aae <bmm150_init_chip+0x12a>
		LOG_ERR("failed reading chip id");
   10b9c:	4b58      	ldr	r3, [pc, #352]	; (10d00 <bmm150_init_chip+0x37c>)
   10b9e:	667b      	str	r3, [r7, #100]	; 0x64
   10ba0:	2302      	movs	r3, #2
   10ba2:	713b      	strb	r3, [r7, #4]
   10ba4:	2300      	movs	r3, #0
   10ba6:	717b      	strb	r3, [r7, #5]
   10ba8:	71bb      	strb	r3, [r7, #6]
   10baa:	71fb      	strb	r3, [r7, #7]
   10bac:	687a      	ldr	r2, [r7, #4]
   10bae:	663a      	str	r2, [r7, #96]	; 0x60
   10bb0:	4619      	mov	r1, r3
   10bb2:	f363 0100 	bfi	r1, r3, #0, #1
   10bb6:	f363 0141 	bfi	r1, r3, #1, #1
   10bba:	f363 0182 	bfi	r1, r3, #2, #1
   10bbe:	f363 01c5 	bfi	r1, r3, #3, #3
   10bc2:	2201      	movs	r2, #1
   10bc4:	f362 1188 	bfi	r1, r2, #6, #3
   10bc8:	2208      	movs	r2, #8
   10bca:	f362 2152 	bfi	r1, r2, #9, #10
   10bce:	f363 41de 	bfi	r1, r3, #19, #12
   10bd2:	f363 71df 	bfi	r1, r3, #31, #1
   10bd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
   10bda:	4846      	ldr	r0, [pc, #280]	; (10cf4 <bmm150_init_chip+0x370>)
   10bdc:	f7f2 fd76 	bl	36cc <z_impl_z_log_msg_static_create>
		goto err_poweroff;
   10be0:	e034      	b.n	10c4c <bmm150_init_chip+0x2c8>
		LOG_ERR("invalid chip id 0x%x", chip_id);
   10be2:	466d      	mov	r5, sp
   10be4:	b088      	sub	sp, #32
   10be6:	4669      	mov	r1, sp
   10be8:	f111 0210 	adds.w	r2, r1, #16
   10bec:	d03b      	beq.n	10c66 <bmm150_init_chip+0x2e2>
   10bee:	200c      	movs	r0, #12
   10bf0:	b11a      	cbz	r2, 10bfa <bmm150_init_chip+0x276>
   10bf2:	2804      	cmp	r0, #4
   10bf4:	dd01      	ble.n	10bfa <bmm150_init_chip+0x276>
   10bf6:	4e43      	ldr	r6, [pc, #268]	; (10d04 <bmm150_init_chip+0x380>)
   10bf8:	614e      	str	r6, [r1, #20]
   10bfa:	b112      	cbz	r2, 10c02 <bmm150_init_chip+0x27e>
   10bfc:	2808      	cmp	r0, #8
   10bfe:	dd00      	ble.n	10c02 <bmm150_init_chip+0x27e>
   10c00:	618b      	str	r3, [r1, #24]
   10c02:	280b      	cmp	r0, #11
   10c04:	dd32      	ble.n	10c6c <bmm150_init_chip+0x2e8>
   10c06:	230c      	movs	r3, #12
   10c08:	b13a      	cbz	r2, 10c1a <bmm150_init_chip+0x296>
   10c0a:	2003      	movs	r0, #3
   10c0c:	7138      	strb	r0, [r7, #4]
   10c0e:	2000      	movs	r0, #0
   10c10:	7178      	strb	r0, [r7, #5]
   10c12:	71b8      	strb	r0, [r7, #6]
   10c14:	71f8      	strb	r0, [r7, #7]
   10c16:	6878      	ldr	r0, [r7, #4]
   10c18:	6108      	str	r0, [r1, #16]
   10c1a:	2100      	movs	r1, #0
   10c1c:	f36f 0100 	bfc	r1, #0, #1
   10c20:	f36f 0141 	bfc	r1, #1, #1
   10c24:	f36f 0182 	bfc	r1, #2, #1
   10c28:	f36f 01c5 	bfc	r1, #3, #3
   10c2c:	2001      	movs	r0, #1
   10c2e:	f360 1188 	bfi	r1, r0, #6, #3
   10c32:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   10c36:	f363 2152 	bfi	r1, r3, #9, #10
   10c3a:	f36f 41de 	bfc	r1, #19, #12
   10c3e:	f36f 71df 	bfc	r1, #31, #1
   10c42:	2300      	movs	r3, #0
   10c44:	482b      	ldr	r0, [pc, #172]	; (10cf4 <bmm150_init_chip+0x370>)
   10c46:	f7f2 fd41 	bl	36cc <z_impl_z_log_msg_static_create>
   10c4a:	46ad      	mov	sp, r5
	bmm150_set_power_mode(dev, BMM150_POWER_MODE_NORMAL, 0);
   10c4c:	2200      	movs	r2, #0
   10c4e:	2102      	movs	r1, #2
   10c50:	4620      	mov	r0, r4
   10c52:	f00c fe22 	bl	1d89a <bmm150_set_power_mode>
	bmm150_set_power_mode(dev, BMM150_POWER_MODE_SUSPEND, 1);
   10c56:	2201      	movs	r2, #1
   10c58:	2100      	movs	r1, #0
   10c5a:	4620      	mov	r0, r4
   10c5c:	f00c fe1d 	bl	1d89a <bmm150_set_power_mode>
	return -EIO;
   10c60:	f06f 0004 	mvn.w	r0, #4
   10c64:	e723      	b.n	10aae <bmm150_init_chip+0x12a>
		LOG_ERR("invalid chip id 0x%x", chip_id);
   10c66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10c6a:	e7c1      	b.n	10bf0 <bmm150_init_chip+0x26c>
   10c6c:	f06f 031b 	mvn.w	r3, #27
   10c70:	e7ca      	b.n	10c08 <bmm150_init_chip+0x284>
		LOG_ERR("failed to set ODR to %d",
   10c72:	466e      	mov	r6, sp
   10c74:	b088      	sub	sp, #32
   10c76:	466b      	mov	r3, sp
   10c78:	f113 0210 	adds.w	r2, r3, #16
   10c7c:	d030      	beq.n	10ce0 <bmm150_init_chip+0x35c>
   10c7e:	210c      	movs	r1, #12
   10c80:	b11a      	cbz	r2, 10c8a <bmm150_init_chip+0x306>
   10c82:	2904      	cmp	r1, #4
   10c84:	dd01      	ble.n	10c8a <bmm150_init_chip+0x306>
   10c86:	4820      	ldr	r0, [pc, #128]	; (10d08 <bmm150_init_chip+0x384>)
   10c88:	6158      	str	r0, [r3, #20]
   10c8a:	b11a      	cbz	r2, 10c94 <bmm150_init_chip+0x310>
   10c8c:	2908      	cmp	r1, #8
   10c8e:	dd01      	ble.n	10c94 <bmm150_init_chip+0x310>
   10c90:	200a      	movs	r0, #10
   10c92:	6198      	str	r0, [r3, #24]
   10c94:	290b      	cmp	r1, #11
   10c96:	dd26      	ble.n	10ce6 <bmm150_init_chip+0x362>
   10c98:	250c      	movs	r5, #12
   10c9a:	b13a      	cbz	r2, 10cac <bmm150_init_chip+0x328>
   10c9c:	2103      	movs	r1, #3
   10c9e:	7139      	strb	r1, [r7, #4]
   10ca0:	2100      	movs	r1, #0
   10ca2:	7179      	strb	r1, [r7, #5]
   10ca4:	71b9      	strb	r1, [r7, #6]
   10ca6:	71f9      	strb	r1, [r7, #7]
   10ca8:	6878      	ldr	r0, [r7, #4]
   10caa:	6118      	str	r0, [r3, #16]
   10cac:	2100      	movs	r1, #0
   10cae:	f36f 0100 	bfc	r1, #0, #1
   10cb2:	f36f 0141 	bfc	r1, #1, #1
   10cb6:	f36f 0182 	bfc	r1, #2, #1
   10cba:	f36f 01c5 	bfc	r1, #3, #3
   10cbe:	2301      	movs	r3, #1
   10cc0:	f363 1188 	bfi	r1, r3, #6, #3
   10cc4:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   10cc8:	f363 2152 	bfi	r1, r3, #9, #10
   10ccc:	f36f 41de 	bfc	r1, #19, #12
   10cd0:	f36f 71df 	bfc	r1, #31, #1
   10cd4:	2300      	movs	r3, #0
   10cd6:	4807      	ldr	r0, [pc, #28]	; (10cf4 <bmm150_init_chip+0x370>)
   10cd8:	f7f2 fcf8 	bl	36cc <z_impl_z_log_msg_static_create>
   10cdc:	46b5      	mov	sp, r6
		goto err_poweroff;
   10cde:	e7b5      	b.n	10c4c <bmm150_init_chip+0x2c8>
		LOG_ERR("failed to set ODR to %d",
   10ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10ce4:	e7cc      	b.n	10c80 <bmm150_init_chip+0x2fc>
   10ce6:	f06f 051b 	mvn.w	r5, #27
   10cea:	e7d6      	b.n	10c9a <bmm150_init_chip+0x316>
   10cec:	00023134 	.word	0x00023134
   10cf0:	00022f90 	.word	0x00022f90
   10cf4:	00020500 	.word	0x00020500
   10cf8:	00022fbc 	.word	0x00022fbc
   10cfc:	00022fe8 	.word	0x00022fe8
   10d00:	00023014 	.word	0x00023014
   10d04:	0002302c 	.word	0x0002302c
   10d08:	00023044 	.word	0x00023044
		LOG_ERR("failed to set REP XY to %d",
   10d0c:	466e      	mov	r6, sp
   10d0e:	b088      	sub	sp, #32
   10d10:	466b      	mov	r3, sp
   10d12:	f113 0210 	adds.w	r2, r3, #16
   10d16:	d030      	beq.n	10d7a <bmm150_init_chip+0x3f6>
   10d18:	210c      	movs	r1, #12
   10d1a:	b11a      	cbz	r2, 10d24 <bmm150_init_chip+0x3a0>
   10d1c:	2904      	cmp	r1, #4
   10d1e:	dd01      	ble.n	10d24 <bmm150_init_chip+0x3a0>
   10d20:	485a      	ldr	r0, [pc, #360]	; (10e8c <bmm150_init_chip+0x508>)
   10d22:	6158      	str	r0, [r3, #20]
   10d24:	b11a      	cbz	r2, 10d2e <bmm150_init_chip+0x3aa>
   10d26:	2908      	cmp	r1, #8
   10d28:	dd01      	ble.n	10d2e <bmm150_init_chip+0x3aa>
   10d2a:	2009      	movs	r0, #9
   10d2c:	6198      	str	r0, [r3, #24]
   10d2e:	290b      	cmp	r1, #11
   10d30:	dd26      	ble.n	10d80 <bmm150_init_chip+0x3fc>
   10d32:	250c      	movs	r5, #12
   10d34:	b13a      	cbz	r2, 10d46 <bmm150_init_chip+0x3c2>
   10d36:	2103      	movs	r1, #3
   10d38:	7139      	strb	r1, [r7, #4]
   10d3a:	2100      	movs	r1, #0
   10d3c:	7179      	strb	r1, [r7, #5]
   10d3e:	71b9      	strb	r1, [r7, #6]
   10d40:	71f9      	strb	r1, [r7, #7]
   10d42:	6878      	ldr	r0, [r7, #4]
   10d44:	6118      	str	r0, [r3, #16]
   10d46:	2100      	movs	r1, #0
   10d48:	f36f 0100 	bfc	r1, #0, #1
   10d4c:	f36f 0141 	bfc	r1, #1, #1
   10d50:	f36f 0182 	bfc	r1, #2, #1
   10d54:	f36f 01c5 	bfc	r1, #3, #3
   10d58:	2301      	movs	r3, #1
   10d5a:	f363 1188 	bfi	r1, r3, #6, #3
   10d5e:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   10d62:	f363 2152 	bfi	r1, r3, #9, #10
   10d66:	f36f 41de 	bfc	r1, #19, #12
   10d6a:	f36f 71df 	bfc	r1, #31, #1
   10d6e:	2300      	movs	r3, #0
   10d70:	4847      	ldr	r0, [pc, #284]	; (10e90 <bmm150_init_chip+0x50c>)
   10d72:	f7f2 fcab 	bl	36cc <z_impl_z_log_msg_static_create>
   10d76:	46b5      	mov	sp, r6
		goto err_poweroff;
   10d78:	e768      	b.n	10c4c <bmm150_init_chip+0x2c8>
		LOG_ERR("failed to set REP XY to %d",
   10d7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10d7e:	e7cc      	b.n	10d1a <bmm150_init_chip+0x396>
   10d80:	f06f 051b 	mvn.w	r5, #27
   10d84:	e7d6      	b.n	10d34 <bmm150_init_chip+0x3b0>
		LOG_ERR("failed to set REP Z to %d",
   10d86:	466e      	mov	r6, sp
   10d88:	b088      	sub	sp, #32
   10d8a:	466b      	mov	r3, sp
   10d8c:	f113 0210 	adds.w	r2, r3, #16
   10d90:	d030      	beq.n	10df4 <bmm150_init_chip+0x470>
   10d92:	210c      	movs	r1, #12
   10d94:	b11a      	cbz	r2, 10d9e <bmm150_init_chip+0x41a>
   10d96:	2904      	cmp	r1, #4
   10d98:	dd01      	ble.n	10d9e <bmm150_init_chip+0x41a>
   10d9a:	483e      	ldr	r0, [pc, #248]	; (10e94 <bmm150_init_chip+0x510>)
   10d9c:	6158      	str	r0, [r3, #20]
   10d9e:	b11a      	cbz	r2, 10da8 <bmm150_init_chip+0x424>
   10da0:	2908      	cmp	r1, #8
   10da2:	dd01      	ble.n	10da8 <bmm150_init_chip+0x424>
   10da4:	200f      	movs	r0, #15
   10da6:	6198      	str	r0, [r3, #24]
   10da8:	290b      	cmp	r1, #11
   10daa:	dd26      	ble.n	10dfa <bmm150_init_chip+0x476>
   10dac:	250c      	movs	r5, #12
   10dae:	b13a      	cbz	r2, 10dc0 <bmm150_init_chip+0x43c>
   10db0:	2103      	movs	r1, #3
   10db2:	7139      	strb	r1, [r7, #4]
   10db4:	2100      	movs	r1, #0
   10db6:	7179      	strb	r1, [r7, #5]
   10db8:	71b9      	strb	r1, [r7, #6]
   10dba:	71f9      	strb	r1, [r7, #7]
   10dbc:	6878      	ldr	r0, [r7, #4]
   10dbe:	6118      	str	r0, [r3, #16]
   10dc0:	2100      	movs	r1, #0
   10dc2:	f36f 0100 	bfc	r1, #0, #1
   10dc6:	f36f 0141 	bfc	r1, #1, #1
   10dca:	f36f 0182 	bfc	r1, #2, #1
   10dce:	f36f 01c5 	bfc	r1, #3, #3
   10dd2:	2301      	movs	r3, #1
   10dd4:	f363 1188 	bfi	r1, r3, #6, #3
   10dd8:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   10ddc:	f363 2152 	bfi	r1, r3, #9, #10
   10de0:	f36f 41de 	bfc	r1, #19, #12
   10de4:	f36f 71df 	bfc	r1, #31, #1
   10de8:	2300      	movs	r3, #0
   10dea:	4829      	ldr	r0, [pc, #164]	; (10e90 <bmm150_init_chip+0x50c>)
   10dec:	f7f2 fc6e 	bl	36cc <z_impl_z_log_msg_static_create>
   10df0:	46b5      	mov	sp, r6
		goto err_poweroff;
   10df2:	e72b      	b.n	10c4c <bmm150_init_chip+0x2c8>
		LOG_ERR("failed to set REP Z to %d",
   10df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10df8:	e7cc      	b.n	10d94 <bmm150_init_chip+0x410>
   10dfa:	f06f 051b 	mvn.w	r5, #27
   10dfe:	e7d6      	b.n	10dae <bmm150_init_chip+0x42a>
		LOG_ERR("failed to power on device");
   10e00:	4b25      	ldr	r3, [pc, #148]	; (10e98 <bmm150_init_chip+0x514>)
   10e02:	637b      	str	r3, [r7, #52]	; 0x34
   10e04:	2302      	movs	r3, #2
   10e06:	713b      	strb	r3, [r7, #4]
   10e08:	2300      	movs	r3, #0
   10e0a:	717b      	strb	r3, [r7, #5]
   10e0c:	71bb      	strb	r3, [r7, #6]
   10e0e:	71fb      	strb	r3, [r7, #7]
   10e10:	687a      	ldr	r2, [r7, #4]
   10e12:	633a      	str	r2, [r7, #48]	; 0x30
   10e14:	4619      	mov	r1, r3
   10e16:	f363 0100 	bfi	r1, r3, #0, #1
   10e1a:	f363 0141 	bfi	r1, r3, #1, #1
   10e1e:	f363 0182 	bfi	r1, r3, #2, #1
   10e22:	f363 01c5 	bfi	r1, r3, #3, #3
   10e26:	2201      	movs	r2, #1
   10e28:	f362 1188 	bfi	r1, r2, #6, #3
   10e2c:	2208      	movs	r2, #8
   10e2e:	f362 2152 	bfi	r1, r2, #9, #10
   10e32:	f363 41de 	bfi	r1, r3, #19, #12
   10e36:	f363 71df 	bfi	r1, r3, #31, #1
   10e3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   10e3e:	4814      	ldr	r0, [pc, #80]	; (10e90 <bmm150_init_chip+0x50c>)
   10e40:	f7f2 fc44 	bl	36cc <z_impl_z_log_msg_static_create>
   10e44:	e613      	b.n	10a6e <bmm150_init_chip+0xea>
		LOG_ERR("failed to read trim regs");
   10e46:	4b15      	ldr	r3, [pc, #84]	; (10e9c <bmm150_init_chip+0x518>)
   10e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   10e4a:	2302      	movs	r3, #2
   10e4c:	713b      	strb	r3, [r7, #4]
   10e4e:	2300      	movs	r3, #0
   10e50:	717b      	strb	r3, [r7, #5]
   10e52:	71bb      	strb	r3, [r7, #6]
   10e54:	71fb      	strb	r3, [r7, #7]
   10e56:	687a      	ldr	r2, [r7, #4]
   10e58:	64ba      	str	r2, [r7, #72]	; 0x48
   10e5a:	4619      	mov	r1, r3
   10e5c:	f363 0100 	bfi	r1, r3, #0, #1
   10e60:	f363 0141 	bfi	r1, r3, #1, #1
   10e64:	f363 0182 	bfi	r1, r3, #2, #1
   10e68:	f363 01c5 	bfi	r1, r3, #3, #3
   10e6c:	2201      	movs	r2, #1
   10e6e:	f362 1188 	bfi	r1, r2, #6, #3
   10e72:	2208      	movs	r2, #8
   10e74:	f362 2152 	bfi	r1, r2, #9, #10
   10e78:	f363 41de 	bfi	r1, r3, #19, #12
   10e7c:	f363 71df 	bfi	r1, r3, #31, #1
   10e80:	f107 0248 	add.w	r2, r7, #72	; 0x48
   10e84:	4802      	ldr	r0, [pc, #8]	; (10e90 <bmm150_init_chip+0x50c>)
   10e86:	f7f2 fc21 	bl	36cc <z_impl_z_log_msg_static_create>
		goto err_poweroff;
   10e8a:	e6df      	b.n	10c4c <bmm150_init_chip+0x2c8>
   10e8c:	0002305c 	.word	0x0002305c
   10e90:	00020500 	.word	0x00020500
   10e94:	00023078 	.word	0x00023078
   10e98:	00023094 	.word	0x00023094
   10e9c:	000230b0 	.word	0x000230b0

00010ea0 <bmm150_init>:

static int bmm150_init(const struct device *dev)
{
   10ea0:	b510      	push	{r4, lr}
   10ea2:	b08e      	sub	sp, #56	; 0x38
   10ea4:	4604      	mov	r4, r0
	const struct bmm150_config *const config =
   10ea6:	6843      	ldr	r3, [r0, #4]
		dev->config;

	if (!device_is_ready(config->i2c.bus)) {
   10ea8:	6818      	ldr	r0, [r3, #0]
   10eaa:	f00e f9dc 	bl	1f266 <z_device_is_ready>
   10eae:	b138      	cbz	r0, 10ec0 <bmm150_init+0x20>
		LOG_ERR("I2C bus device not ready");
		return -ENODEV;
	}

	if (bmm150_init_chip(dev) < 0) {
   10eb0:	4620      	mov	r0, r4
   10eb2:	f7ff fd67 	bl	10984 <bmm150_init_chip>
   10eb6:	2800      	cmp	r0, #0
   10eb8:	db2a      	blt.n	10f10 <bmm150_init+0x70>
		LOG_ERR("failed to initialize chip");
		return -EIO;
	}

	return 0;
   10eba:	2000      	movs	r0, #0
}
   10ebc:	b00e      	add	sp, #56	; 0x38
   10ebe:	bd10      	pop	{r4, pc}
		LOG_ERR("I2C bus device not ready");
   10ec0:	4b27      	ldr	r3, [pc, #156]	; (10f60 <bmm150_init+0xc0>)
   10ec2:	930d      	str	r3, [sp, #52]	; 0x34
   10ec4:	2302      	movs	r3, #2
   10ec6:	f88d 3004 	strb.w	r3, [sp, #4]
   10eca:	2300      	movs	r3, #0
   10ecc:	f88d 3005 	strb.w	r3, [sp, #5]
   10ed0:	f88d 3006 	strb.w	r3, [sp, #6]
   10ed4:	f88d 3007 	strb.w	r3, [sp, #7]
   10ed8:	9a01      	ldr	r2, [sp, #4]
   10eda:	920c      	str	r2, [sp, #48]	; 0x30
   10edc:	4619      	mov	r1, r3
   10ede:	f363 0100 	bfi	r1, r3, #0, #1
   10ee2:	f363 0141 	bfi	r1, r3, #1, #1
   10ee6:	f363 0182 	bfi	r1, r3, #2, #1
   10eea:	f363 01c5 	bfi	r1, r3, #3, #3
   10eee:	2201      	movs	r2, #1
   10ef0:	f362 1188 	bfi	r1, r2, #6, #3
   10ef4:	2208      	movs	r2, #8
   10ef6:	f362 2152 	bfi	r1, r2, #9, #10
   10efa:	f363 41de 	bfi	r1, r3, #19, #12
   10efe:	f363 71df 	bfi	r1, r3, #31, #1
   10f02:	aa0c      	add	r2, sp, #48	; 0x30
   10f04:	4817      	ldr	r0, [pc, #92]	; (10f64 <bmm150_init+0xc4>)
   10f06:	f7f2 fbe1 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENODEV;
   10f0a:	f06f 0012 	mvn.w	r0, #18
   10f0e:	e7d5      	b.n	10ebc <bmm150_init+0x1c>
		LOG_ERR("failed to initialize chip");
   10f10:	4b15      	ldr	r3, [pc, #84]	; (10f68 <bmm150_init+0xc8>)
   10f12:	9307      	str	r3, [sp, #28]
   10f14:	2302      	movs	r3, #2
   10f16:	f88d 3004 	strb.w	r3, [sp, #4]
   10f1a:	2300      	movs	r3, #0
   10f1c:	f88d 3005 	strb.w	r3, [sp, #5]
   10f20:	f88d 3006 	strb.w	r3, [sp, #6]
   10f24:	f88d 3007 	strb.w	r3, [sp, #7]
   10f28:	9a01      	ldr	r2, [sp, #4]
   10f2a:	9206      	str	r2, [sp, #24]
   10f2c:	4619      	mov	r1, r3
   10f2e:	f363 0100 	bfi	r1, r3, #0, #1
   10f32:	f363 0141 	bfi	r1, r3, #1, #1
   10f36:	f363 0182 	bfi	r1, r3, #2, #1
   10f3a:	f363 01c5 	bfi	r1, r3, #3, #3
   10f3e:	2201      	movs	r2, #1
   10f40:	f362 1188 	bfi	r1, r2, #6, #3
   10f44:	2208      	movs	r2, #8
   10f46:	f362 2152 	bfi	r1, r2, #9, #10
   10f4a:	f363 41de 	bfi	r1, r3, #19, #12
   10f4e:	f363 71df 	bfi	r1, r3, #31, #1
   10f52:	aa06      	add	r2, sp, #24
   10f54:	4803      	ldr	r0, [pc, #12]	; (10f64 <bmm150_init+0xc4>)
   10f56:	f7f2 fbb9 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
   10f5a:	f06f 0004 	mvn.w	r0, #4
   10f5e:	e7ad      	b.n	10ebc <bmm150_init+0x1c>
   10f60:	000230cc 	.word	0x000230cc
   10f64:	00020500 	.word	0x00020500
   10f68:	000230e8 	.word	0x000230e8

00010f6c <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   10f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f70:	b0a1      	sub	sp, #132	; 0x84
   10f72:	af00      	add	r7, sp, #0
   10f74:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   10f76:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   10f78:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
   10f7a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   10f7e:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
   10f82:	f1b8 0f00 	cmp.w	r8, #0
   10f86:	d003      	beq.n	10f90 <configure+0x24>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   10f88:	682b      	ldr	r3, [r5, #0]
   10f8a:	428b      	cmp	r3, r1
   10f8c:	f000 81ea 	beq.w	11364 <configure+0x3f8>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   10f90:	88a3      	ldrh	r3, [r4, #4]
   10f92:	f413 6f00 	tst.w	r3, #2048	; 0x800
   10f96:	d14f      	bne.n	11038 <configure+0xcc>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   10f98:	f013 0f01 	tst.w	r3, #1
   10f9c:	d171      	bne.n	11082 <configure+0x116>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   10f9e:	f013 0f08 	tst.w	r3, #8
   10fa2:	f040 80c0 	bne.w	11126 <configure+0x1ba>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   10fa6:	f3c3 1345 	ubfx	r3, r3, #5, #6
   10faa:	2b08      	cmp	r3, #8
   10fac:	f040 80e0 	bne.w	11170 <configure+0x204>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   10fb0:	6822      	ldr	r2, [r4, #0]
   10fb2:	4bbc      	ldr	r3, [pc, #752]	; (112a4 <configure+0x338>)
   10fb4:	429a      	cmp	r2, r3
   10fb6:	f240 8100 	bls.w	111ba <configure+0x24e>
#if defined(CONFIG_SOC_NRF5340_CPUAPP)
	/* On nRF5340, the 32 Mbps speed is supported by the application core
	 * when it is running at 128 MHz (see the Timing specifications section
	 * in the nRF5340 PS).
	 */
	if (max_freq > 16000000 &&
   10fba:	4bbb      	ldr	r3, [pc, #748]	; (112a8 <configure+0x33c>)
   10fbc:	4599      	cmp	r9, r3
   10fbe:	d908      	bls.n	10fd2 <configure+0x66>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   10fc0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10fc4:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
   10fc8:	f013 0f03 	tst.w	r3, #3
   10fcc:	d001      	beq.n	10fd2 <configure+0x66>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
   10fce:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 112a8 <configure+0x33c>
	}
#endif

	config = dev_config->def_config;
   10fd2:	f107 0c08 	add.w	ip, r7, #8
   10fd6:	f106 0e0c 	add.w	lr, r6, #12
   10fda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   10fde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10fe2:	e89e 0003 	ldmia.w	lr, {r0, r1}
   10fe6:	e88c 0003 	stmia.w	ip, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   10fea:	6823      	ldr	r3, [r4, #0]
   10fec:	454b      	cmp	r3, r9
   10fee:	bf28      	it	cs
   10ff0:	464b      	movcs	r3, r9
	if (frequency < 250000) {
   10ff2:	4aae      	ldr	r2, [pc, #696]	; (112ac <configure+0x340>)
   10ff4:	4293      	cmp	r3, r2
   10ff6:	f240 8105 	bls.w	11204 <configure+0x298>
	} else if (frequency < 500000) {
   10ffa:	4aad      	ldr	r2, [pc, #692]	; (112b0 <configure+0x344>)
   10ffc:	4293      	cmp	r3, r2
   10ffe:	f240 8129 	bls.w	11254 <configure+0x2e8>
	} else if (frequency < 1000000) {
   11002:	4aac      	ldr	r2, [pc, #688]	; (112b4 <configure+0x348>)
   11004:	4293      	cmp	r3, r2
   11006:	f240 8128 	bls.w	1125a <configure+0x2ee>
	} else if (frequency < 2000000) {
   1100a:	4aab      	ldr	r2, [pc, #684]	; (112b8 <configure+0x34c>)
   1100c:	4293      	cmp	r3, r2
   1100e:	f240 8127 	bls.w	11260 <configure+0x2f4>
	} else if (frequency < 4000000) {
   11012:	4aaa      	ldr	r2, [pc, #680]	; (112bc <configure+0x350>)
   11014:	4293      	cmp	r3, r2
   11016:	f240 8126 	bls.w	11266 <configure+0x2fa>
	} else if (frequency < 8000000) {
   1101a:	4aa9      	ldr	r2, [pc, #676]	; (112c0 <configure+0x354>)
   1101c:	4293      	cmp	r3, r2
   1101e:	f0c0 8125 	bcc.w	1126c <configure+0x300>
	} else if (frequency < 16000000) {
   11022:	4aa1      	ldr	r2, [pc, #644]	; (112a8 <configure+0x33c>)
   11024:	4293      	cmp	r3, r2
   11026:	f0c0 8124 	bcc.w	11272 <configure+0x306>
	} else if (frequency < 32000000) {
   1102a:	4aa6      	ldr	r2, [pc, #664]	; (112c4 <configure+0x358>)
   1102c:	4293      	cmp	r3, r2
   1102e:	f080 8123 	bcs.w	11278 <configure+0x30c>
		return NRF_SPIM_FREQ_16M;
   11032:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
   11036:	e0e7      	b.n	11208 <configure+0x29c>
		LOG_ERR("Half-duplex not supported");
   11038:	4ba3      	ldr	r3, [pc, #652]	; (112c8 <configure+0x35c>)
   1103a:	67fb      	str	r3, [r7, #124]	; 0x7c
   1103c:	2302      	movs	r3, #2
   1103e:	713b      	strb	r3, [r7, #4]
   11040:	2300      	movs	r3, #0
   11042:	717b      	strb	r3, [r7, #5]
   11044:	71bb      	strb	r3, [r7, #6]
   11046:	71fb      	strb	r3, [r7, #7]
   11048:	687a      	ldr	r2, [r7, #4]
   1104a:	67ba      	str	r2, [r7, #120]	; 0x78
   1104c:	4619      	mov	r1, r3
   1104e:	f363 0100 	bfi	r1, r3, #0, #1
   11052:	f363 0141 	bfi	r1, r3, #1, #1
   11056:	f363 0182 	bfi	r1, r3, #2, #1
   1105a:	f363 01c5 	bfi	r1, r3, #3, #3
   1105e:	2201      	movs	r2, #1
   11060:	f362 1188 	bfi	r1, r2, #6, #3
   11064:	2208      	movs	r2, #8
   11066:	f362 2152 	bfi	r1, r2, #9, #10
   1106a:	f363 41de 	bfi	r1, r3, #19, #12
   1106e:	f363 71df 	bfi	r1, r3, #31, #1
   11072:	f107 0278 	add.w	r2, r7, #120	; 0x78
   11076:	4895      	ldr	r0, [pc, #596]	; (112cc <configure+0x360>)
   11078:	f7f2 fb28 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   1107c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11080:	e0e4      	b.n	1124c <configure+0x2e0>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   11082:	6800      	ldr	r0, [r0, #0]
   11084:	2302      	movs	r3, #2
   11086:	713b      	strb	r3, [r7, #4]
   11088:	466c      	mov	r4, sp
   1108a:	b088      	sub	sp, #32
   1108c:	466b      	mov	r3, sp
   1108e:	f113 0210 	adds.w	r2, r3, #16
   11092:	d039      	beq.n	11108 <configure+0x19c>
   11094:	250d      	movs	r5, #13
   11096:	b11a      	cbz	r2, 110a0 <configure+0x134>
   11098:	2d04      	cmp	r5, #4
   1109a:	dd01      	ble.n	110a0 <configure+0x134>
   1109c:	498c      	ldr	r1, [pc, #560]	; (112d0 <configure+0x364>)
   1109e:	6159      	str	r1, [r3, #20]
   110a0:	2102      	movs	r1, #2
   110a2:	7039      	strb	r1, [r7, #0]
   110a4:	b112      	cbz	r2, 110ac <configure+0x140>
   110a6:	2d08      	cmp	r5, #8
   110a8:	dd00      	ble.n	110ac <configure+0x140>
   110aa:	6198      	str	r0, [r3, #24]
   110ac:	b11a      	cbz	r2, 110b6 <configure+0x14a>
   110ae:	f103 011c 	add.w	r1, r3, #28
   110b2:	2000      	movs	r0, #0
   110b4:	b358      	cbz	r0, 1110e <configure+0x1a2>
   110b6:	2d0c      	cmp	r5, #12
   110b8:	dd32      	ble.n	11120 <configure+0x1b4>
   110ba:	250d      	movs	r5, #13
   110bc:	b142      	cbz	r2, 110d0 <configure+0x164>
   110be:	2103      	movs	r1, #3
   110c0:	7139      	strb	r1, [r7, #4]
   110c2:	2100      	movs	r1, #0
   110c4:	7179      	strb	r1, [r7, #5]
   110c6:	71b9      	strb	r1, [r7, #6]
   110c8:	2101      	movs	r1, #1
   110ca:	71f9      	strb	r1, [r7, #7]
   110cc:	6878      	ldr	r0, [r7, #4]
   110ce:	6118      	str	r0, [r3, #16]
   110d0:	2100      	movs	r1, #0
   110d2:	f36f 0100 	bfc	r1, #0, #1
   110d6:	f36f 0141 	bfc	r1, #1, #1
   110da:	f36f 0182 	bfc	r1, #2, #1
   110de:	f36f 01c5 	bfc	r1, #3, #3
   110e2:	2301      	movs	r3, #1
   110e4:	f363 1188 	bfi	r1, r3, #6, #3
   110e8:	f3c5 0309 	ubfx	r3, r5, #0, #10
   110ec:	f363 2152 	bfi	r1, r3, #9, #10
   110f0:	f36f 41de 	bfc	r1, #19, #12
   110f4:	f36f 71df 	bfc	r1, #31, #1
   110f8:	2300      	movs	r3, #0
   110fa:	4874      	ldr	r0, [pc, #464]	; (112cc <configure+0x360>)
   110fc:	f7f2 fae6 	bl	36cc <z_impl_z_log_msg_static_create>
   11100:	46a5      	mov	sp, r4
		return -EINVAL;
   11102:	f06f 0015 	mvn.w	r0, #21
   11106:	e0a1      	b.n	1124c <configure+0x2e0>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   11108:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1110c:	e7c3      	b.n	11096 <configure+0x12a>
   1110e:	f107 0680 	add.w	r6, r7, #128	; 0x80
   11112:	4406      	add	r6, r0
   11114:	f816 6c80 	ldrb.w	r6, [r6, #-128]
   11118:	f801 6b01 	strb.w	r6, [r1], #1
   1111c:	3001      	adds	r0, #1
   1111e:	e7c9      	b.n	110b4 <configure+0x148>
   11120:	f06f 051b 	mvn.w	r5, #27
   11124:	e7ca      	b.n	110bc <configure+0x150>
		LOG_ERR("Loopback mode is not supported");
   11126:	4b6b      	ldr	r3, [pc, #428]	; (112d4 <configure+0x368>)
   11128:	667b      	str	r3, [r7, #100]	; 0x64
   1112a:	2302      	movs	r3, #2
   1112c:	713b      	strb	r3, [r7, #4]
   1112e:	2300      	movs	r3, #0
   11130:	717b      	strb	r3, [r7, #5]
   11132:	71bb      	strb	r3, [r7, #6]
   11134:	71fb      	strb	r3, [r7, #7]
   11136:	687a      	ldr	r2, [r7, #4]
   11138:	663a      	str	r2, [r7, #96]	; 0x60
   1113a:	4619      	mov	r1, r3
   1113c:	f363 0100 	bfi	r1, r3, #0, #1
   11140:	f363 0141 	bfi	r1, r3, #1, #1
   11144:	f363 0182 	bfi	r1, r3, #2, #1
   11148:	f363 01c5 	bfi	r1, r3, #3, #3
   1114c:	2201      	movs	r2, #1
   1114e:	f362 1188 	bfi	r1, r2, #6, #3
   11152:	2208      	movs	r2, #8
   11154:	f362 2152 	bfi	r1, r2, #9, #10
   11158:	f363 41de 	bfi	r1, r3, #19, #12
   1115c:	f363 71df 	bfi	r1, r3, #31, #1
   11160:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11164:	4859      	ldr	r0, [pc, #356]	; (112cc <configure+0x360>)
   11166:	f7f2 fab1 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1116a:	f06f 0015 	mvn.w	r0, #21
   1116e:	e06d      	b.n	1124c <configure+0x2e0>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   11170:	4b59      	ldr	r3, [pc, #356]	; (112d8 <configure+0x36c>)
   11172:	64fb      	str	r3, [r7, #76]	; 0x4c
   11174:	2302      	movs	r3, #2
   11176:	713b      	strb	r3, [r7, #4]
   11178:	2300      	movs	r3, #0
   1117a:	717b      	strb	r3, [r7, #5]
   1117c:	71bb      	strb	r3, [r7, #6]
   1117e:	71fb      	strb	r3, [r7, #7]
   11180:	687a      	ldr	r2, [r7, #4]
   11182:	64ba      	str	r2, [r7, #72]	; 0x48
   11184:	4619      	mov	r1, r3
   11186:	f363 0100 	bfi	r1, r3, #0, #1
   1118a:	f363 0141 	bfi	r1, r3, #1, #1
   1118e:	f363 0182 	bfi	r1, r3, #2, #1
   11192:	f363 01c5 	bfi	r1, r3, #3, #3
   11196:	2201      	movs	r2, #1
   11198:	f362 1188 	bfi	r1, r2, #6, #3
   1119c:	2208      	movs	r2, #8
   1119e:	f362 2152 	bfi	r1, r2, #9, #10
   111a2:	f363 41de 	bfi	r1, r3, #19, #12
   111a6:	f363 71df 	bfi	r1, r3, #31, #1
   111aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
   111ae:	4847      	ldr	r0, [pc, #284]	; (112cc <configure+0x360>)
   111b0:	f7f2 fa8c 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   111b4:	f06f 0015 	mvn.w	r0, #21
   111b8:	e048      	b.n	1124c <configure+0x2e0>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   111ba:	4b48      	ldr	r3, [pc, #288]	; (112dc <configure+0x370>)
   111bc:	637b      	str	r3, [r7, #52]	; 0x34
   111be:	2302      	movs	r3, #2
   111c0:	713b      	strb	r3, [r7, #4]
   111c2:	2300      	movs	r3, #0
   111c4:	717b      	strb	r3, [r7, #5]
   111c6:	71bb      	strb	r3, [r7, #6]
   111c8:	71fb      	strb	r3, [r7, #7]
   111ca:	687a      	ldr	r2, [r7, #4]
   111cc:	633a      	str	r2, [r7, #48]	; 0x30
   111ce:	4619      	mov	r1, r3
   111d0:	f363 0100 	bfi	r1, r3, #0, #1
   111d4:	f363 0141 	bfi	r1, r3, #1, #1
   111d8:	f363 0182 	bfi	r1, r3, #2, #1
   111dc:	f363 01c5 	bfi	r1, r3, #3, #3
   111e0:	2201      	movs	r2, #1
   111e2:	f362 1188 	bfi	r1, r2, #6, #3
   111e6:	2208      	movs	r2, #8
   111e8:	f362 2152 	bfi	r1, r2, #9, #10
   111ec:	f363 41de 	bfi	r1, r3, #19, #12
   111f0:	f363 71df 	bfi	r1, r3, #31, #1
   111f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   111f8:	4834      	ldr	r0, [pc, #208]	; (112cc <configure+0x360>)
   111fa:	f7f2 fa67 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   111fe:	f06f 0015 	mvn.w	r0, #21
   11202:	e023      	b.n	1124c <configure+0x2e0>
		return NRF_SPIM_FREQ_125K;
   11204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   11208:	613b      	str	r3, [r7, #16]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1120a:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1120c:	f013 0f02 	tst.w	r3, #2
   11210:	d035      	beq.n	1127e <configure+0x312>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   11212:	f013 0f04 	tst.w	r3, #4
   11216:	d037      	beq.n	11288 <configure+0x31c>
			return NRF_SPIM_MODE_3;
   11218:	2303      	movs	r3, #3
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1121a:	753b      	strb	r3, [r7, #20]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1121c:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1121e:	f013 0f10 	tst.w	r3, #16
   11222:	d035      	beq.n	11290 <configure+0x324>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
   11224:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   11226:	757b      	strb	r3, [r7, #21]

	if (dev_data->initialized) {
   11228:	f1b8 0f00 	cmp.w	r8, #0
   1122c:	d132      	bne.n	11294 <configure+0x328>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
   1122e:	462b      	mov	r3, r5
   11230:	4a2b      	ldr	r2, [pc, #172]	; (112e0 <configure+0x374>)
   11232:	f107 0108 	add.w	r1, r7, #8
   11236:	4630      	mov	r0, r6
   11238:	f003 fa76 	bl	14728 <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1123c:	4b29      	ldr	r3, [pc, #164]	; (112e4 <configure+0x378>)
   1123e:	4298      	cmp	r0, r3
   11240:	d152      	bne.n	112e8 <configure+0x37c>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   11242:	2301      	movs	r3, #1
   11244:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
   11248:	602c      	str	r4, [r5, #0]

	return 0;
   1124a:	2000      	movs	r0, #0
}
   1124c:	3784      	adds	r7, #132	; 0x84
   1124e:	46bd      	mov	sp, r7
   11250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return NRF_SPIM_FREQ_250K;
   11254:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11258:	e7d6      	b.n	11208 <configure+0x29c>
		return NRF_SPIM_FREQ_500K;
   1125a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1125e:	e7d3      	b.n	11208 <configure+0x29c>
		return NRF_SPIM_FREQ_1M;
   11260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11264:	e7d0      	b.n	11208 <configure+0x29c>
		return NRF_SPIM_FREQ_2M;
   11266:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1126a:	e7cd      	b.n	11208 <configure+0x29c>
		return NRF_SPIM_FREQ_4M;
   1126c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11270:	e7ca      	b.n	11208 <configure+0x29c>
		return NRF_SPIM_FREQ_8M;
   11272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   11276:	e7c7      	b.n	11208 <configure+0x29c>
		return NRF_SPIM_FREQ_32M;
   11278:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
   1127c:	e7c4      	b.n	11208 <configure+0x29c>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1127e:	f013 0f04 	tst.w	r3, #4
   11282:	d003      	beq.n	1128c <configure+0x320>
			return NRF_SPIM_MODE_1;
   11284:	2301      	movs	r3, #1
   11286:	e7c8      	b.n	1121a <configure+0x2ae>
			return NRF_SPIM_MODE_2;
   11288:	2302      	movs	r3, #2
   1128a:	e7c6      	b.n	1121a <configure+0x2ae>
			return NRF_SPIM_MODE_0;
   1128c:	2300      	movs	r3, #0
   1128e:	e7c4      	b.n	1121a <configure+0x2ae>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
   11290:	2300      	movs	r3, #0
   11292:	e7c8      	b.n	11226 <configure+0x2ba>
		nrfx_spim_uninit(&dev_config->spim);
   11294:	4630      	mov	r0, r6
   11296:	f003 fac7 	bl	14828 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1129a:	2300      	movs	r3, #0
   1129c:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   112a0:	e7c5      	b.n	1122e <configure+0x2c2>
   112a2:	bf00      	nop
   112a4:	0001e847 	.word	0x0001e847
   112a8:	00f42400 	.word	0x00f42400
   112ac:	0003d08f 	.word	0x0003d08f
   112b0:	0007a11f 	.word	0x0007a11f
   112b4:	000f423f 	.word	0x000f423f
   112b8:	001e847f 	.word	0x001e847f
   112bc:	003d08ff 	.word	0x003d08ff
   112c0:	007a1200 	.word	0x007a1200
   112c4:	01e84800 	.word	0x01e84800
   112c8:	00023180 	.word	0x00023180
   112cc:	000205e8 	.word	0x000205e8
   112d0:	0002319c 	.word	0x0002319c
   112d4:	000231c0 	.word	0x000231c0
   112d8:	000231e0 	.word	0x000231e0
   112dc:	00023210 	.word	0x00023210
   112e0:	000117a5 	.word	0x000117a5
   112e4:	0bad0000 	.word	0x0bad0000
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   112e8:	466d      	mov	r5, sp
   112ea:	b088      	sub	sp, #32
   112ec:	466b      	mov	r3, sp
   112ee:	f113 0210 	adds.w	r2, r3, #16
   112f2:	d031      	beq.n	11358 <configure+0x3ec>
   112f4:	210c      	movs	r1, #12
   112f6:	b11a      	cbz	r2, 11300 <configure+0x394>
   112f8:	2904      	cmp	r1, #4
   112fa:	dd01      	ble.n	11300 <configure+0x394>
   112fc:	4c1a      	ldr	r4, [pc, #104]	; (11368 <configure+0x3fc>)
   112fe:	615c      	str	r4, [r3, #20]
   11300:	b112      	cbz	r2, 11308 <configure+0x39c>
   11302:	2908      	cmp	r1, #8
   11304:	dd00      	ble.n	11308 <configure+0x39c>
   11306:	6198      	str	r0, [r3, #24]
   11308:	290b      	cmp	r1, #11
   1130a:	dd28      	ble.n	1135e <configure+0x3f2>
   1130c:	240c      	movs	r4, #12
   1130e:	b13a      	cbz	r2, 11320 <configure+0x3b4>
   11310:	2103      	movs	r1, #3
   11312:	7139      	strb	r1, [r7, #4]
   11314:	2100      	movs	r1, #0
   11316:	7179      	strb	r1, [r7, #5]
   11318:	71b9      	strb	r1, [r7, #6]
   1131a:	71f9      	strb	r1, [r7, #7]
   1131c:	6878      	ldr	r0, [r7, #4]
   1131e:	6118      	str	r0, [r3, #16]
   11320:	2100      	movs	r1, #0
   11322:	f36f 0100 	bfc	r1, #0, #1
   11326:	f36f 0141 	bfc	r1, #1, #1
   1132a:	f36f 0182 	bfc	r1, #2, #1
   1132e:	f36f 01c5 	bfc	r1, #3, #3
   11332:	2301      	movs	r3, #1
   11334:	f363 1188 	bfi	r1, r3, #6, #3
   11338:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1133c:	f363 2152 	bfi	r1, r3, #9, #10
   11340:	f36f 41de 	bfc	r1, #19, #12
   11344:	f36f 71df 	bfc	r1, #31, #1
   11348:	2300      	movs	r3, #0
   1134a:	4808      	ldr	r0, [pc, #32]	; (1136c <configure+0x400>)
   1134c:	f7f2 f9be 	bl	36cc <z_impl_z_log_msg_static_create>
   11350:	46ad      	mov	sp, r5
		return -EIO;
   11352:	f06f 0004 	mvn.w	r0, #4
   11356:	e779      	b.n	1124c <configure+0x2e0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   11358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1135c:	e7cb      	b.n	112f6 <configure+0x38a>
   1135e:	f06f 041b 	mvn.w	r4, #27
   11362:	e7d4      	b.n	1130e <configure+0x3a2>
		return 0;
   11364:	2000      	movs	r0, #0
   11366:	e771      	b.n	1124c <configure+0x2e0>
   11368:	00023244 	.word	0x00023244
   1136c:	000205e8 	.word	0x000205e8

00011370 <spi_context_cs_configure_all>:
	k_sem_give(&ctx->sync);
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
   11370:	b5f0      	push	{r4, r5, r6, r7, lr}
   11372:	b083      	sub	sp, #12
   11374:	af00      	add	r7, sp, #0
   11376:	4605      	mov	r5, r0
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   11378:	6884      	ldr	r4, [r0, #8]
   1137a:	e069      	b.n	11450 <spi_context_cs_configure_all+0xe0>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1137c:	6823      	ldr	r3, [r4, #0]
   1137e:	681e      	ldr	r6, [r3, #0]
   11380:	7920      	ldrb	r0, [r4, #4]
   11382:	2302      	movs	r3, #2
   11384:	713b      	strb	r3, [r7, #4]
   11386:	466c      	mov	r4, sp
   11388:	b08a      	sub	sp, #40	; 0x28
   1138a:	466b      	mov	r3, sp
   1138c:	f113 0210 	adds.w	r2, r3, #16
   11390:	d03d      	beq.n	1140e <spi_context_cs_configure_all+0x9e>
   11392:	2511      	movs	r5, #17
   11394:	b11a      	cbz	r2, 1139e <spi_context_cs_configure_all+0x2e>
   11396:	2d04      	cmp	r5, #4
   11398:	dd01      	ble.n	1139e <spi_context_cs_configure_all+0x2e>
   1139a:	4941      	ldr	r1, [pc, #260]	; (114a0 <spi_context_cs_configure_all+0x130>)
   1139c:	6159      	str	r1, [r3, #20]
   1139e:	2102      	movs	r1, #2
   113a0:	7039      	strb	r1, [r7, #0]
   113a2:	b112      	cbz	r2, 113aa <spi_context_cs_configure_all+0x3a>
   113a4:	2d08      	cmp	r5, #8
   113a6:	dd00      	ble.n	113aa <spi_context_cs_configure_all+0x3a>
   113a8:	619e      	str	r6, [r3, #24]
   113aa:	b112      	cbz	r2, 113b2 <spi_context_cs_configure_all+0x42>
   113ac:	2d0c      	cmp	r5, #12
   113ae:	dd00      	ble.n	113b2 <spi_context_cs_configure_all+0x42>
   113b0:	61d8      	str	r0, [r3, #28]
   113b2:	b11a      	cbz	r2, 113bc <spi_context_cs_configure_all+0x4c>
   113b4:	f103 0120 	add.w	r1, r3, #32
   113b8:	2000      	movs	r0, #0
   113ba:	b358      	cbz	r0, 11414 <spi_context_cs_configure_all+0xa4>
   113bc:	2d10      	cmp	r5, #16
   113be:	dd32      	ble.n	11426 <spi_context_cs_configure_all+0xb6>
   113c0:	2511      	movs	r5, #17
   113c2:	b142      	cbz	r2, 113d6 <spi_context_cs_configure_all+0x66>
   113c4:	2104      	movs	r1, #4
   113c6:	7139      	strb	r1, [r7, #4]
   113c8:	2100      	movs	r1, #0
   113ca:	7179      	strb	r1, [r7, #5]
   113cc:	71b9      	strb	r1, [r7, #6]
   113ce:	2101      	movs	r1, #1
   113d0:	71f9      	strb	r1, [r7, #7]
   113d2:	6878      	ldr	r0, [r7, #4]
   113d4:	6118      	str	r0, [r3, #16]
   113d6:	2100      	movs	r1, #0
   113d8:	f36f 0100 	bfc	r1, #0, #1
   113dc:	f36f 0141 	bfc	r1, #1, #1
   113e0:	f36f 0182 	bfc	r1, #2, #1
   113e4:	f36f 01c5 	bfc	r1, #3, #3
   113e8:	2301      	movs	r3, #1
   113ea:	f363 1188 	bfi	r1, r3, #6, #3
   113ee:	f3c5 0309 	ubfx	r3, r5, #0, #10
   113f2:	f363 2152 	bfi	r1, r3, #9, #10
   113f6:	f36f 41de 	bfc	r1, #19, #12
   113fa:	f36f 71df 	bfc	r1, #31, #1
   113fe:	2300      	movs	r3, #0
   11400:	4828      	ldr	r0, [pc, #160]	; (114a4 <spi_context_cs_configure_all+0x134>)
   11402:	f7f2 f963 	bl	36cc <z_impl_z_log_msg_static_create>
   11406:	46a5      	mov	sp, r4
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
   11408:	f06f 0012 	mvn.w	r0, #18
   1140c:	e045      	b.n	1149a <spi_context_cs_configure_all+0x12a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1140e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   11412:	e7bf      	b.n	11394 <spi_context_cs_configure_all+0x24>
   11414:	f107 0608 	add.w	r6, r7, #8
   11418:	4406      	add	r6, r0
   1141a:	f816 6c08 	ldrb.w	r6, [r6, #-8]
   1141e:	f801 6b01 	strb.w	r6, [r1], #1
   11422:	3001      	adds	r0, #1
   11424:	e7c9      	b.n	113ba <spi_context_cs_configure_all+0x4a>
   11426:	f06f 051b 	mvn.w	r5, #27
   1142a:	e7ca      	b.n	113c2 <spi_context_cs_configure_all+0x52>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1142c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   11430:	f013 0f01 	tst.w	r3, #1
   11434:	d028      	beq.n	11488 <spi_context_cs_configure_all+0x118>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11436:	2301      	movs	r3, #1
   11438:	fa03 fe01 	lsl.w	lr, r3, r1
   1143c:	6833      	ldr	r3, [r6, #0]
   1143e:	ea43 030e 	orr.w	r3, r3, lr
   11442:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
   11444:	f8dc 3000 	ldr.w	r3, [ip]
   11448:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
   1144a:	2800      	cmp	r0, #0
   1144c:	db25      	blt.n	1149a <spi_context_cs_configure_all+0x12a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1144e:	3408      	adds	r4, #8
   11450:	68ab      	ldr	r3, [r5, #8]
   11452:	68ea      	ldr	r2, [r5, #12]
   11454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11458:	429c      	cmp	r4, r3
   1145a:	d21d      	bcs.n	11498 <spi_context_cs_configure_all+0x128>
		if (!device_is_ready(cs_gpio->port)) {
   1145c:	6820      	ldr	r0, [r4, #0]
   1145e:	f00d ff02 	bl	1f266 <z_device_is_ready>
   11462:	2800      	cmp	r0, #0
   11464:	d08a      	beq.n	1137c <spi_context_cs_configure_all+0xc>
	return gpio_pin_configure(spec->port,
   11466:	6820      	ldr	r0, [r4, #0]
   11468:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1146a:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
   1146c:	f443 13b0 	orr.w	r3, r3, #1441792	; 0x160000
	const struct gpio_driver_api *api =
   11470:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
   11474:	6906      	ldr	r6, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   11476:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   1147a:	d0d7      	beq.n	1142c <spi_context_cs_configure_all+0xbc>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1147c:	f013 0f01 	tst.w	r3, #1
   11480:	d0d4      	beq.n	1142c <spi_context_cs_configure_all+0xbc>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   11482:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
   11486:	e7d1      	b.n	1142c <spi_context_cs_configure_all+0xbc>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11488:	2301      	movs	r3, #1
   1148a:	fa03 fe01 	lsl.w	lr, r3, r1
   1148e:	6833      	ldr	r3, [r6, #0]
   11490:	ea23 030e 	bic.w	r3, r3, lr
   11494:	6033      	str	r3, [r6, #0]
   11496:	e7d5      	b.n	11444 <spi_context_cs_configure_all+0xd4>
			return ret;
		}
	}

	return 0;
   11498:	2000      	movs	r0, #0
}
   1149a:	370c      	adds	r7, #12
   1149c:	46bd      	mov	sp, r7
   1149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114a0:	0002326c 	.word	0x0002326c
   114a4:	000205e8 	.word	0x000205e8

000114a8 <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   114a8:	b570      	push	{r4, r5, r6, lr}
   114aa:	b084      	sub	sp, #16
	struct spi_nrfx_data *dev_data = dev->data;
   114ac:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   114ae:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   114b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   114b2:	2b00      	cmp	r3, #0
   114b4:	d068      	beq.n	11588 <transfer_next_chunk+0xe0>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   114b6:	6e25      	ldr	r5, [r4, #96]	; 0x60
   114b8:	2d00      	cmp	r5, #0
   114ba:	d067      	beq.n	1158c <transfer_next_chunk+0xe4>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   114bc:	429d      	cmp	r5, r3
   114be:	bf28      	it	cs
   114c0:	461d      	movcs	r5, r3
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   114c2:	2d00      	cmp	r5, #0
   114c4:	d072      	beq.n	115ac <transfer_next_chunk+0x104>
		nrfx_spim_xfer_desc_t xfer;
		nrfx_err_t result;
		const uint8_t *tx_buf = ctx->tx_buf;
   114c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   114c8:	2900      	cmp	r1, #0
   114ca:	d061      	beq.n	11590 <transfer_next_chunk+0xe8>
   114cc:	2b00      	cmp	r3, #0
   114ce:	d161      	bne.n	11594 <transfer_next_chunk+0xec>
#if (CONFIG_SPI_NRFX_RAM_BUFFER_SIZE > 0)
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   114d0:	b163      	cbz	r3, 114ec <transfer_next_chunk+0x44>
   114d2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   114d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   114da:	d007      	beq.n	114ec <transfer_next_chunk+0x44>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   114dc:	2d08      	cmp	r5, #8
   114de:	d900      	bls.n	114e2 <transfer_next_chunk+0x3a>
				chunk_len = CONFIG_SPI_NRFX_RAM_BUFFER_SIZE;
   114e0:	2508      	movs	r5, #8
			}

			memcpy(dev_data->buffer, tx_buf, chunk_len);
   114e2:	462a      	mov	r2, r5
   114e4:	6f20      	ldr	r0, [r4, #112]	; 0x70
   114e6:	f008 fdb0 	bl	1a04a <memcpy>
			tx_buf = dev_data->buffer;
   114ea:	6f21      	ldr	r1, [r4, #112]	; 0x70
		}
#endif
		if (chunk_len > MAX_CHUNK_LEN) {
   114ec:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   114f0:	d301      	bcc.n	114f6 <transfer_next_chunk+0x4e>
			chunk_len = MAX_CHUNK_LEN;
   114f2:	f64f 75ff 	movw	r5, #65535	; 0xffff
		}

		dev_data->chunk_len = chunk_len;
   114f6:	66a5      	str	r5, [r4, #104]	; 0x68

		xfer.p_tx_buffer = tx_buf;
   114f8:	9100      	str	r1, [sp, #0]
   114fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   114fc:	2b00      	cmp	r3, #0
   114fe:	d04b      	beq.n	11598 <transfer_next_chunk+0xf0>
   11500:	6da3      	ldr	r3, [r4, #88]	; 0x58
   11502:	2b00      	cmp	r3, #0
   11504:	d14a      	bne.n	1159c <transfer_next_chunk+0xf4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   11506:	2b00      	cmp	r3, #0
   11508:	d04a      	beq.n	115a0 <transfer_next_chunk+0xf8>
   1150a:	462b      	mov	r3, r5
   1150c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1150e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   11510:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   11512:	2b00      	cmp	r3, #0
   11514:	d046      	beq.n	115a4 <transfer_next_chunk+0xfc>
   11516:	6e23      	ldr	r3, [r4, #96]	; 0x60
   11518:	2b00      	cmp	r3, #0
   1151a:	d145      	bne.n	115a8 <transfer_next_chunk+0x100>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1151c:	b903      	cbnz	r3, 11520 <transfer_next_chunk+0x78>
   1151e:	2500      	movs	r5, #0
   11520:	9503      	str	r5, [sp, #12]
				error = -EIO;
			}
		}
#endif
		if (error == 0) {
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   11522:	2200      	movs	r2, #0
   11524:	4669      	mov	r1, sp
   11526:	4630      	mov	r0, r6
   11528:	f003 f9d2 	bl	148d0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1152c:	4b25      	ldr	r3, [pc, #148]	; (115c4 <transfer_next_chunk+0x11c>)
   1152e:	4298      	cmp	r0, r3
   11530:	d028      	beq.n	11584 <transfer_next_chunk+0xdc>
				return;
			}
			error = -EIO;
   11532:	f06f 0504 	mvn.w	r5, #4
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   11536:	6823      	ldr	r3, [r4, #0]
   11538:	b1e3      	cbz	r3, 11574 <transfer_next_chunk+0xcc>
   1153a:	689a      	ldr	r2, [r3, #8]
   1153c:	b1d2      	cbz	r2, 11574 <transfer_next_chunk+0xcc>
   1153e:	6811      	ldr	r1, [r2, #0]
   11540:	b1c1      	cbz	r1, 11574 <transfer_next_chunk+0xcc>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   11542:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   11544:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   11548:	d114      	bne.n	11574 <transfer_next_chunk+0xcc>
			k_busy_wait(ctx->config->cs->delay);
   1154a:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1154c:	f00e fc2b 	bl	1fda6 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   11550:	6823      	ldr	r3, [r4, #0]
   11552:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   11554:	6818      	ldr	r0, [r3, #0]
   11556:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   11558:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1155a:	681a      	ldr	r2, [r3, #0]
   1155c:	2301      	movs	r3, #1
   1155e:	408b      	lsls	r3, r1
   11560:	421a      	tst	r2, r3
   11562:	d125      	bne.n	115b0 <transfer_next_chunk+0x108>
   11564:	2300      	movs	r3, #0
	if (value != 0)	{
   11566:	b32b      	cbz	r3, 115b4 <transfer_next_chunk+0x10c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   11568:	2301      	movs	r3, #1
   1156a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1156e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   11570:	68db      	ldr	r3, [r3, #12]
   11572:	4798      	blx	r3
	ctx->sync_status = status;
   11574:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   11576:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1157a:	f004 ff17 	bl	163ac <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
   1157e:	2300      	movs	r3, #0
   11580:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   11584:	b004      	add	sp, #16
   11586:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
   11588:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1158a:	e79a      	b.n	114c2 <transfer_next_chunk+0x1a>
		return ctx->tx_len;
   1158c:	461d      	mov	r5, r3
   1158e:	e798      	b.n	114c2 <transfer_next_chunk+0x1a>
	return !!(ctx->tx_buf && ctx->tx_len);
   11590:	2300      	movs	r3, #0
   11592:	e79d      	b.n	114d0 <transfer_next_chunk+0x28>
   11594:	2301      	movs	r3, #1
   11596:	e79b      	b.n	114d0 <transfer_next_chunk+0x28>
   11598:	2300      	movs	r3, #0
   1159a:	e7b4      	b.n	11506 <transfer_next_chunk+0x5e>
   1159c:	2301      	movs	r3, #1
   1159e:	e7b2      	b.n	11506 <transfer_next_chunk+0x5e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   115a0:	2300      	movs	r3, #0
   115a2:	e7b3      	b.n	1150c <transfer_next_chunk+0x64>
	return !!(ctx->rx_buf && ctx->rx_len);
   115a4:	2300      	movs	r3, #0
   115a6:	e7b9      	b.n	1151c <transfer_next_chunk+0x74>
   115a8:	2301      	movs	r3, #1
   115aa:	e7b7      	b.n	1151c <transfer_next_chunk+0x74>
	int error = 0;
   115ac:	2500      	movs	r5, #0
   115ae:	e7c2      	b.n	11536 <transfer_next_chunk+0x8e>
		value = (value != 0) ? 0 : 1;
   115b0:	2301      	movs	r3, #1
   115b2:	e7d8      	b.n	11566 <transfer_next_chunk+0xbe>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   115b4:	2301      	movs	r3, #1
   115b6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   115ba:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   115bc:	691b      	ldr	r3, [r3, #16]
   115be:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   115c0:	e7d8      	b.n	11574 <transfer_next_chunk+0xcc>
   115c2:	bf00      	nop
   115c4:	0bad0000 	.word	0x0bad0000

000115c8 <transceive>:
		      const struct spi_config *spi_cfg,
		      const struct spi_buf_set *tx_bufs,
		      const struct spi_buf_set *rx_bufs,
		      bool asynchronous,
		      struct k_poll_signal *signal)
{
   115c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115cc:	b088      	sub	sp, #32
   115ce:	4606      	mov	r6, r0
   115d0:	460d      	mov	r5, r1
   115d2:	4690      	mov	r8, r2
   115d4:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   115d6:	6904      	ldr	r4, [r0, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   115d8:	888b      	ldrh	r3, [r1, #4]
   115da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   115de:	d004      	beq.n	115ea <transceive+0x22>
	return sem->count;
   115e0:	69a3      	ldr	r3, [r4, #24]
   115e2:	b913      	cbnz	r3, 115ea <transceive+0x22>
		(ctx->owner == spi_cfg)) {
   115e4:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   115e6:	4299      	cmp	r1, r3
   115e8:	d008      	beq.n	115fc <transceive+0x34>
	k_sem_take(&ctx->lock, K_FOREVER);
   115ea:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   115ee:	f04f 32ff 	mov.w	r2, #4294967295
   115f2:	f04f 33ff 	mov.w	r3, #4294967295
   115f6:	f004 ff01 	bl	163fc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   115fa:	6065      	str	r5, [r4, #4]
	int error;

	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);

	error = configure(dev, spi_cfg);
   115fc:	4629      	mov	r1, r5
   115fe:	4630      	mov	r0, r6
   11600:	f7ff fcb4 	bl	10f6c <configure>
	if (error == 0) {
   11604:	4605      	mov	r5, r0
   11606:	b148      	cbz	r0, 1161c <transceive+0x54>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   11608:	6823      	ldr	r3, [r4, #0]
   1160a:	889b      	ldrh	r3, [r3, #4]
   1160c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11610:	f000 80bd 	beq.w	1178e <transceive+0x1c6>
	}

	spi_context_release(&dev_data->ctx, error);

	return error;
}
   11614:	4628      	mov	r0, r5
   11616:	b008      	add	sp, #32
   11618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   1161c:	2301      	movs	r3, #1
   1161e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   11622:	f1b8 0f00 	cmp.w	r8, #0
   11626:	d015      	beq.n	11654 <transceive+0x8c>
   11628:	f8d8 3000 	ldr.w	r3, [r8]
   1162c:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1162e:	b19b      	cbz	r3, 11658 <transceive+0x90>
   11630:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11634:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   11636:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1163a:	f104 0348 	add.w	r3, r4, #72	; 0x48
	while (*count) {
   1163e:	681a      	ldr	r2, [r3, #0]
   11640:	b182      	cbz	r2, 11664 <transceive+0x9c>
		if (((*current)->len / dfs) != 0) {
   11642:	680a      	ldr	r2, [r1, #0]
   11644:	6850      	ldr	r0, [r2, #4]
   11646:	b948      	cbnz	r0, 1165c <transceive+0x94>
		++(*current);
   11648:	3208      	adds	r2, #8
   1164a:	600a      	str	r2, [r1, #0]
		--(*count);
   1164c:	681a      	ldr	r2, [r3, #0]
   1164e:	3a01      	subs	r2, #1
   11650:	601a      	str	r2, [r3, #0]
   11652:	e7f4      	b.n	1163e <transceive+0x76>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   11654:	4643      	mov	r3, r8
   11656:	e7e9      	b.n	1162c <transceive+0x64>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   11658:	2300      	movs	r3, #0
   1165a:	e7eb      	b.n	11634 <transceive+0x6c>
			*buf_len = (*current)->len / dfs;
   1165c:	65a0      	str	r0, [r4, #88]	; 0x58
			return (*current)->buf;
   1165e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11660:	681b      	ldr	r3, [r3, #0]
   11662:	e001      	b.n	11668 <transceive+0xa0>
	*buf_len = 0;
   11664:	2300      	movs	r3, #0
   11666:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
   11668:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1166a:	b19f      	cbz	r7, 11694 <transceive+0xcc>
   1166c:	683b      	ldr	r3, [r7, #0]
   1166e:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   11670:	b193      	cbz	r3, 11698 <transceive+0xd0>
   11672:	687b      	ldr	r3, [r7, #4]
   11674:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   11676:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1167a:	f104 0250 	add.w	r2, r4, #80	; 0x50
	while (*count) {
   1167e:	6813      	ldr	r3, [r2, #0]
   11680:	b183      	cbz	r3, 116a4 <transceive+0xdc>
		if (((*current)->len / dfs) != 0) {
   11682:	680b      	ldr	r3, [r1, #0]
   11684:	6858      	ldr	r0, [r3, #4]
   11686:	b948      	cbnz	r0, 1169c <transceive+0xd4>
		++(*current);
   11688:	3308      	adds	r3, #8
   1168a:	600b      	str	r3, [r1, #0]
		--(*count);
   1168c:	6813      	ldr	r3, [r2, #0]
   1168e:	3b01      	subs	r3, #1
   11690:	6013      	str	r3, [r2, #0]
   11692:	e7f4      	b.n	1167e <transceive+0xb6>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   11694:	463b      	mov	r3, r7
   11696:	e7ea      	b.n	1166e <transceive+0xa6>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   11698:	2300      	movs	r3, #0
   1169a:	e7eb      	b.n	11674 <transceive+0xac>
			*buf_len = (*current)->len / dfs;
   1169c:	6620      	str	r0, [r4, #96]	; 0x60
			return (*current)->buf;
   1169e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   116a0:	681b      	ldr	r3, [r3, #0]
   116a2:	e000      	b.n	116a6 <transceive+0xde>
	*buf_len = 0;
   116a4:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
   116a6:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   116a8:	2300      	movs	r3, #0
   116aa:	6423      	str	r3, [r4, #64]	; 0x40
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   116ac:	6823      	ldr	r3, [r4, #0]
   116ae:	b1bb      	cbz	r3, 116e0 <transceive+0x118>
   116b0:	689b      	ldr	r3, [r3, #8]
   116b2:	b1ab      	cbz	r3, 116e0 <transceive+0x118>
   116b4:	6818      	ldr	r0, [r3, #0]
   116b6:	b198      	cbz	r0, 116e0 <transceive+0x118>
	return gpio_pin_set(spec->port, spec->pin, value);
   116b8:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   116ba:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   116bc:	681a      	ldr	r2, [r3, #0]
   116be:	2301      	movs	r3, #1
   116c0:	408b      	lsls	r3, r1
   116c2:	421a      	tst	r2, r3
   116c4:	d100      	bne.n	116c8 <transceive+0x100>
   116c6:	2501      	movs	r5, #1
	if (value != 0)	{
   116c8:	b395      	cbz	r5, 11730 <transceive+0x168>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   116ca:	2301      	movs	r3, #1
   116cc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   116d0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   116d2:	68db      	ldr	r3, [r3, #12]
   116d4:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
   116d6:	6823      	ldr	r3, [r4, #0]
   116d8:	689b      	ldr	r3, [r3, #8]
   116da:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   116dc:	f00e fb63 	bl	1fda6 <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
   116e0:	4630      	mov	r0, r6
   116e2:	f7ff fee1 	bl	114a8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   116e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   116e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   116ea:	4298      	cmp	r0, r3
   116ec:	bf38      	it	cc
   116ee:	4618      	movcc	r0, r3
   116f0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   116f4:	fb03 f000 	mul.w	r0, r3, r0
			     ctx->config->frequency;
   116f8:	4625      	mov	r5, r4
   116fa:	f855 3b28 	ldr.w	r3, [r5], #40
   116fe:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   11700:	fbb0 f0f3 	udiv	r0, r0, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   11704:	30c8      	adds	r0, #200	; 0xc8
   11706:	0c41      	lsrs	r1, r0, #17
   11708:	03c0      	lsls	r0, r0, #15
   1170a:	f240 33e7 	movw	r3, #999	; 0x3e7
   1170e:	18c0      	adds	r0, r0, r3
   11710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11714:	f04f 0300 	mov.w	r3, #0
   11718:	f141 0100 	adc.w	r1, r1, #0
   1171c:	f7ee ffea 	bl	6f4 <__aeabi_uldivmod>
   11720:	4602      	mov	r2, r0
   11722:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   11724:	4628      	mov	r0, r5
   11726:	f004 fe69 	bl	163fc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1172a:	b940      	cbnz	r0, 1173e <transceive+0x176>
	status = ctx->sync_status;
   1172c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1172e:	e76b      	b.n	11608 <transceive+0x40>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   11730:	2301      	movs	r3, #1
   11732:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   11736:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   11738:	691b      	ldr	r3, [r3, #16]
   1173a:	4798      	blx	r3
   1173c:	e7cb      	b.n	116d6 <transceive+0x10e>
		LOG_ERR("Timeout waiting for transfer complete");
   1173e:	4b17      	ldr	r3, [pc, #92]	; (1179c <transceive+0x1d4>)
   11740:	9307      	str	r3, [sp, #28]
   11742:	2302      	movs	r3, #2
   11744:	f88d 3004 	strb.w	r3, [sp, #4]
   11748:	2300      	movs	r3, #0
   1174a:	f88d 3005 	strb.w	r3, [sp, #5]
   1174e:	f88d 3006 	strb.w	r3, [sp, #6]
   11752:	f88d 3007 	strb.w	r3, [sp, #7]
   11756:	9a01      	ldr	r2, [sp, #4]
   11758:	9206      	str	r2, [sp, #24]
   1175a:	4619      	mov	r1, r3
   1175c:	f363 0100 	bfi	r1, r3, #0, #1
   11760:	f363 0141 	bfi	r1, r3, #1, #1
   11764:	f363 0182 	bfi	r1, r3, #2, #1
   11768:	f363 01c5 	bfi	r1, r3, #3, #3
   1176c:	2201      	movs	r2, #1
   1176e:	f362 1188 	bfi	r1, r2, #6, #3
   11772:	2208      	movs	r2, #8
   11774:	f362 2152 	bfi	r1, r2, #9, #10
   11778:	f363 41de 	bfi	r1, r3, #19, #12
   1177c:	f363 71df 	bfi	r1, r3, #31, #1
   11780:	aa06      	add	r2, sp, #24
   11782:	4807      	ldr	r0, [pc, #28]	; (117a0 <transceive+0x1d8>)
   11784:	f7f1 ffa2 	bl	36cc <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
   11788:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1178c:	e73c      	b.n	11608 <transceive+0x40>
		ctx->owner = NULL;
   1178e:	2300      	movs	r3, #0
   11790:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   11792:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   11796:	f004 fe09 	bl	163ac <z_impl_k_sem_give>
	return error;
   1179a:	e73b      	b.n	11614 <transceive+0x4c>
   1179c:	00023290 	.word	0x00023290
   117a0:	000205e8 	.word	0x000205e8

000117a4 <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   117a4:	7803      	ldrb	r3, [r0, #0]
   117a6:	2b00      	cmp	r3, #0
   117a8:	f040 80a5 	bne.w	118f6 <event_handler+0x152>
{
   117ac:	b510      	push	{r4, lr}
   117ae:	b08e      	sub	sp, #56	; 0x38
   117b0:	460c      	mov	r4, r1
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   117b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   117b4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   117b6:	b14b      	cbz	r3, 117cc <event_handler+0x28>
	if (len > ctx->tx_len) {
   117b8:	429a      	cmp	r2, r3
   117ba:	d819      	bhi.n	117f0 <event_handler+0x4c>
	ctx->tx_len -= len;
   117bc:	1a9b      	subs	r3, r3, r2
   117be:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   117c0:	2b00      	cmp	r3, #0
   117c2:	d03b      	beq.n	1183c <event_handler+0x98>
	} else if (ctx->tx_buf) {
   117c4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   117c6:	b10b      	cbz	r3, 117cc <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   117c8:	4413      	add	r3, r2
   117ca:	654b      	str	r3, [r1, #84]	; 0x54
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   117cc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   117ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
   117d0:	b14b      	cbz	r3, 117e6 <event_handler+0x42>
	if (len > ctx->rx_len) {
   117d2:	429a      	cmp	r2, r3
   117d4:	d84d      	bhi.n	11872 <event_handler+0xce>
	ctx->rx_len -= len;
   117d6:	1a9b      	subs	r3, r3, r2
   117d8:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   117da:	2b00      	cmp	r3, #0
   117dc:	d06f      	beq.n	118be <event_handler+0x11a>
	} else if (ctx->rx_buf) {
   117de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   117e0:	b10b      	cbz	r3, 117e6 <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   117e2:	4413      	add	r3, r2
   117e4:	65e3      	str	r3, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   117e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
   117e8:	f7ff fe5e 	bl	114a8 <transfer_next_chunk>
}
   117ec:	b00e      	add	sp, #56	; 0x38
   117ee:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   117f0:	4b41      	ldr	r3, [pc, #260]	; (118f8 <event_handler+0x154>)
   117f2:	930d      	str	r3, [sp, #52]	; 0x34
   117f4:	2302      	movs	r3, #2
   117f6:	f88d 3004 	strb.w	r3, [sp, #4]
   117fa:	2300      	movs	r3, #0
   117fc:	f88d 3005 	strb.w	r3, [sp, #5]
   11800:	f88d 3006 	strb.w	r3, [sp, #6]
   11804:	f88d 3007 	strb.w	r3, [sp, #7]
   11808:	9a01      	ldr	r2, [sp, #4]
   1180a:	920c      	str	r2, [sp, #48]	; 0x30
   1180c:	4619      	mov	r1, r3
   1180e:	f363 0100 	bfi	r1, r3, #0, #1
   11812:	f363 0141 	bfi	r1, r3, #1, #1
   11816:	f363 0182 	bfi	r1, r3, #2, #1
   1181a:	f363 01c5 	bfi	r1, r3, #3, #3
   1181e:	2201      	movs	r2, #1
   11820:	f362 1188 	bfi	r1, r2, #6, #3
   11824:	2208      	movs	r2, #8
   11826:	f362 2152 	bfi	r1, r2, #9, #10
   1182a:	f363 41de 	bfi	r1, r3, #19, #12
   1182e:	f363 71df 	bfi	r1, r3, #31, #1
   11832:	aa0c      	add	r2, sp, #48	; 0x30
   11834:	4831      	ldr	r0, [pc, #196]	; (118fc <event_handler+0x158>)
   11836:	f7f1 ff49 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
   1183a:	e7c7      	b.n	117cc <event_handler+0x28>
		++ctx->current_tx;
   1183c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1183e:	3308      	adds	r3, #8
   11840:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   11842:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   11844:	3b01      	subs	r3, #1
   11846:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   11848:	3144      	adds	r1, #68	; 0x44
   1184a:	f104 0248 	add.w	r2, r4, #72	; 0x48
	while (*count) {
   1184e:	6813      	ldr	r3, [r2, #0]
   11850:	b163      	cbz	r3, 1186c <event_handler+0xc8>
		if (((*current)->len / dfs) != 0) {
   11852:	680b      	ldr	r3, [r1, #0]
   11854:	6858      	ldr	r0, [r3, #4]
   11856:	b928      	cbnz	r0, 11864 <event_handler+0xc0>
		++(*current);
   11858:	3308      	adds	r3, #8
   1185a:	600b      	str	r3, [r1, #0]
		--(*count);
   1185c:	6813      	ldr	r3, [r2, #0]
   1185e:	3b01      	subs	r3, #1
   11860:	6013      	str	r3, [r2, #0]
   11862:	e7f4      	b.n	1184e <event_handler+0xaa>
			*buf_len = (*current)->len / dfs;
   11864:	65a0      	str	r0, [r4, #88]	; 0x58
			return (*current)->buf;
   11866:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11868:	681b      	ldr	r3, [r3, #0]
   1186a:	e000      	b.n	1186e <event_handler+0xca>
	*buf_len = 0;
   1186c:	65a3      	str	r3, [r4, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
   1186e:	6563      	str	r3, [r4, #84]	; 0x54
   11870:	e7ac      	b.n	117cc <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   11872:	4b21      	ldr	r3, [pc, #132]	; (118f8 <event_handler+0x154>)
   11874:	9307      	str	r3, [sp, #28]
   11876:	2302      	movs	r3, #2
   11878:	f88d 3004 	strb.w	r3, [sp, #4]
   1187c:	2300      	movs	r3, #0
   1187e:	f88d 3005 	strb.w	r3, [sp, #5]
   11882:	f88d 3006 	strb.w	r3, [sp, #6]
   11886:	f88d 3007 	strb.w	r3, [sp, #7]
   1188a:	9a01      	ldr	r2, [sp, #4]
   1188c:	9206      	str	r2, [sp, #24]
   1188e:	4619      	mov	r1, r3
   11890:	f363 0100 	bfi	r1, r3, #0, #1
   11894:	f363 0141 	bfi	r1, r3, #1, #1
   11898:	f363 0182 	bfi	r1, r3, #2, #1
   1189c:	f363 01c5 	bfi	r1, r3, #3, #3
   118a0:	2201      	movs	r2, #1
   118a2:	f362 1188 	bfi	r1, r2, #6, #3
   118a6:	2208      	movs	r2, #8
   118a8:	f362 2152 	bfi	r1, r2, #9, #10
   118ac:	f363 41de 	bfi	r1, r3, #19, #12
   118b0:	f363 71df 	bfi	r1, r3, #31, #1
   118b4:	aa06      	add	r2, sp, #24
   118b6:	4811      	ldr	r0, [pc, #68]	; (118fc <event_handler+0x158>)
   118b8:	f7f1 ff08 	bl	36cc <z_impl_z_log_msg_static_create>
		return;
   118bc:	e793      	b.n	117e6 <event_handler+0x42>
		++ctx->current_rx;
   118be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   118c0:	3308      	adds	r3, #8
   118c2:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   118c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   118c6:	3b01      	subs	r3, #1
   118c8:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   118ca:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   118ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
	while (*count) {
   118d2:	6813      	ldr	r3, [r2, #0]
   118d4:	b163      	cbz	r3, 118f0 <event_handler+0x14c>
		if (((*current)->len / dfs) != 0) {
   118d6:	680b      	ldr	r3, [r1, #0]
   118d8:	6858      	ldr	r0, [r3, #4]
   118da:	b928      	cbnz	r0, 118e8 <event_handler+0x144>
		++(*current);
   118dc:	3308      	adds	r3, #8
   118de:	600b      	str	r3, [r1, #0]
		--(*count);
   118e0:	6813      	ldr	r3, [r2, #0]
   118e2:	3b01      	subs	r3, #1
   118e4:	6013      	str	r3, [r2, #0]
   118e6:	e7f4      	b.n	118d2 <event_handler+0x12e>
			*buf_len = (*current)->len / dfs;
   118e8:	6620      	str	r0, [r4, #96]	; 0x60
			return (*current)->buf;
   118ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   118ec:	681b      	ldr	r3, [r3, #0]
   118ee:	e000      	b.n	118f2 <event_handler+0x14e>
	*buf_len = 0;
   118f0:	6623      	str	r3, [r4, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
   118f2:	65e3      	str	r3, [r4, #92]	; 0x5c
   118f4:	e777      	b.n	117e6 <event_handler+0x42>
   118f6:	4770      	bx	lr
   118f8:	000232b8 	.word	0x000232b8
   118fc:	000205e8 	.word	0x000205e8

00011900 <common_init>:
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
{
   11900:	b5f0      	push	{r4, r5, r6, r7, lr}
   11902:	b083      	sub	sp, #12
   11904:	af00      	add	r7, sp, #0
	const struct driver_config *cfg = dev->config;
   11906:	6844      	ldr	r4, [r0, #4]
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
   11908:	68e0      	ldr	r0, [r4, #12]
   1190a:	f00d fcac 	bl	1f266 <z_device_is_ready>
   1190e:	b138      	cbz	r0, 11920 <common_init+0x20>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
		return -ENODEV;
	}

	bool on = cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON);
   11910:	7d23      	ldrb	r3, [r4, #20]
	uint32_t delay_us = 0;

	if (on) {
   11912:	f013 0f03 	tst.w	r3, #3
   11916:	d056      	beq.n	119c6 <common_init+0xc6>
		flags = GPIO_OUTPUT_ACTIVE;
		delay_us = cfg->startup_delay_us;
   11918:	6865      	ldr	r5, [r4, #4]
		flags = GPIO_OUTPUT_ACTIVE;
   1191a:	f44f 13d0 	mov.w	r3, #1703936	; 0x1a0000
   1191e:	e055      	b.n	119cc <common_init+0xcc>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   11920:	68e3      	ldr	r3, [r4, #12]
   11922:	6818      	ldr	r0, [r3, #0]
   11924:	2302      	movs	r3, #2
   11926:	713b      	strb	r3, [r7, #4]
   11928:	466c      	mov	r4, sp
   1192a:	b088      	sub	sp, #32
   1192c:	466b      	mov	r3, sp
   1192e:	f113 0210 	adds.w	r2, r3, #16
   11932:	d039      	beq.n	119a8 <common_init+0xa8>
   11934:	250d      	movs	r5, #13
   11936:	b11a      	cbz	r2, 11940 <common_init+0x40>
   11938:	2d04      	cmp	r5, #4
   1193a:	dd01      	ble.n	11940 <common_init+0x40>
   1193c:	493c      	ldr	r1, [pc, #240]	; (11a30 <common_init+0x130>)
   1193e:	6159      	str	r1, [r3, #20]
   11940:	2102      	movs	r1, #2
   11942:	7039      	strb	r1, [r7, #0]
   11944:	b112      	cbz	r2, 1194c <common_init+0x4c>
   11946:	2d08      	cmp	r5, #8
   11948:	dd00      	ble.n	1194c <common_init+0x4c>
   1194a:	6198      	str	r0, [r3, #24]
   1194c:	b11a      	cbz	r2, 11956 <common_init+0x56>
   1194e:	f103 011c 	add.w	r1, r3, #28
   11952:	2000      	movs	r0, #0
   11954:	b358      	cbz	r0, 119ae <common_init+0xae>
   11956:	2d0c      	cmp	r5, #12
   11958:	dd32      	ble.n	119c0 <common_init+0xc0>
   1195a:	250d      	movs	r5, #13
   1195c:	b142      	cbz	r2, 11970 <common_init+0x70>
   1195e:	2103      	movs	r1, #3
   11960:	7139      	strb	r1, [r7, #4]
   11962:	2100      	movs	r1, #0
   11964:	7179      	strb	r1, [r7, #5]
   11966:	71b9      	strb	r1, [r7, #6]
   11968:	2101      	movs	r1, #1
   1196a:	71f9      	strb	r1, [r7, #7]
   1196c:	6878      	ldr	r0, [r7, #4]
   1196e:	6118      	str	r0, [r3, #16]
   11970:	2100      	movs	r1, #0
   11972:	f36f 0100 	bfc	r1, #0, #1
   11976:	f36f 0141 	bfc	r1, #1, #1
   1197a:	f36f 0182 	bfc	r1, #2, #1
   1197e:	f36f 01c5 	bfc	r1, #3, #3
   11982:	2301      	movs	r3, #1
   11984:	f363 1188 	bfi	r1, r3, #6, #3
   11988:	f3c5 0509 	ubfx	r5, r5, #0, #10
   1198c:	f365 2152 	bfi	r1, r5, #9, #10
   11990:	f36f 41de 	bfc	r1, #19, #12
   11994:	f36f 71df 	bfc	r1, #31, #1
   11998:	2300      	movs	r3, #0
   1199a:	4826      	ldr	r0, [pc, #152]	; (11a34 <common_init+0x134>)
   1199c:	f7f1 fe96 	bl	36cc <z_impl_z_log_msg_static_create>
   119a0:	46a5      	mov	sp, r4
		return -ENODEV;
   119a2:	f06f 0412 	mvn.w	r4, #18
   119a6:	e033      	b.n	11a10 <common_init+0x110>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   119a8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   119ac:	e7c3      	b.n	11936 <common_init+0x36>
   119ae:	f107 0608 	add.w	r6, r7, #8
   119b2:	4406      	add	r6, r0
   119b4:	f816 6c08 	ldrb.w	r6, [r6, #-8]
   119b8:	f801 6b01 	strb.w	r6, [r1], #1
   119bc:	3001      	adds	r0, #1
   119be:	e7c9      	b.n	11954 <common_init+0x54>
   119c0:	f06f 051b 	mvn.w	r5, #27
   119c4:	e7ca      	b.n	1195c <common_init+0x5c>
	uint32_t delay_us = 0;
   119c6:	2500      	movs	r5, #0
	} else {
		flags = GPIO_OUTPUT_INACTIVE;
   119c8:	f44f 13b0 	mov.w	r3, #1441792	; 0x160000
	return gpio_pin_configure(spec->port,
   119cc:	68e0      	ldr	r0, [r4, #12]
   119ce:	7c21      	ldrb	r1, [r4, #16]
				  spec->dt_flags | extra_flags);
   119d0:	8a62      	ldrh	r2, [r4, #18]
	return gpio_pin_configure(spec->port,
   119d2:	4313      	orrs	r3, r2
	const struct gpio_driver_api *api =
   119d4:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
   119d6:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   119d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   119dc:	d007      	beq.n	119ee <common_init+0xee>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   119de:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   119e2:	d004      	beq.n	119ee <common_init+0xee>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   119e4:	f013 0f01 	tst.w	r3, #1
   119e8:	d001      	beq.n	119ee <common_init+0xee>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   119ea:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   119ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   119f2:	f013 0f01 	tst.w	r3, #1
   119f6:	d00f      	beq.n	11a18 <common_init+0x118>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   119f8:	2301      	movs	r3, #1
   119fa:	fa03 fc01 	lsl.w	ip, r3, r1
   119fe:	6823      	ldr	r3, [r4, #0]
   11a00:	ea43 030c 	orr.w	r3, r3, ip
   11a04:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   11a06:	6833      	ldr	r3, [r6, #0]
   11a08:	4798      	blx	r3
	}

	int rc = gpio_pin_configure_dt(&cfg->enable, flags);

	if ((rc == 0) && (delay_us > 0)) {
   11a0a:	4604      	mov	r4, r0
   11a0c:	b900      	cbnz	r0, 11a10 <common_init+0x110>
   11a0e:	b95d      	cbnz	r5, 11a28 <common_init+0x128>
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
   11a10:	4620      	mov	r0, r4
   11a12:	370c      	adds	r7, #12
   11a14:	46bd      	mov	sp, r7
   11a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11a18:	2301      	movs	r3, #1
   11a1a:	fa03 fc01 	lsl.w	ip, r3, r1
   11a1e:	6823      	ldr	r3, [r4, #0]
   11a20:	ea23 030c 	bic.w	r3, r3, ip
   11a24:	6023      	str	r3, [r4, #0]
   11a26:	e7ee      	b.n	11a06 <common_init+0x106>
	z_impl_k_busy_wait(usec_to_wait);
   11a28:	4628      	mov	r0, r5
   11a2a:	f00e f9bc 	bl	1fda6 <z_impl_k_busy_wait>
}
   11a2e:	e7ef      	b.n	11a10 <common_init+0x110>
   11a30:	00023360 	.word	0x00023360
   11a34:	000205d0 	.word	0x000205d0

00011a38 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
   11a38:	b5b0      	push	{r4, r5, r7, lr}
   11a3a:	b082      	sub	sp, #8
   11a3c:	af00      	add	r7, sp, #0
   11a3e:	4605      	mov	r5, r0
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   11a40:	f7ff ff5e 	bl	11900 <common_init>
   11a44:	4604      	mov	r4, r0
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
   11a46:	6828      	ldr	r0, [r5, #0]
   11a48:	2302      	movs	r3, #2
   11a4a:	713b      	strb	r3, [r7, #4]
   11a4c:	b08a      	sub	sp, #40	; 0x28
   11a4e:	466b      	mov	r3, sp
   11a50:	f113 0210 	adds.w	r2, r3, #16
   11a54:	d043      	beq.n	11ade <regulator_fixed_init_sync+0xa6>
   11a56:	f04f 0c11 	mov.w	ip, #17
   11a5a:	b122      	cbz	r2, 11a66 <regulator_fixed_init_sync+0x2e>
   11a5c:	f1bc 0f04 	cmp.w	ip, #4
   11a60:	dd01      	ble.n	11a66 <regulator_fixed_init_sync+0x2e>
   11a62:	4926      	ldr	r1, [pc, #152]	; (11afc <regulator_fixed_init_sync+0xc4>)
   11a64:	6159      	str	r1, [r3, #20]
   11a66:	2102      	movs	r1, #2
   11a68:	7039      	strb	r1, [r7, #0]
   11a6a:	b11a      	cbz	r2, 11a74 <regulator_fixed_init_sync+0x3c>
   11a6c:	f1bc 0f08 	cmp.w	ip, #8
   11a70:	dd00      	ble.n	11a74 <regulator_fixed_init_sync+0x3c>
   11a72:	6198      	str	r0, [r3, #24]
   11a74:	b11a      	cbz	r2, 11a7e <regulator_fixed_init_sync+0x46>
   11a76:	f1bc 0f0c 	cmp.w	ip, #12
   11a7a:	dd00      	ble.n	11a7e <regulator_fixed_init_sync+0x46>
   11a7c:	61dc      	str	r4, [r3, #28]
   11a7e:	b11a      	cbz	r2, 11a88 <regulator_fixed_init_sync+0x50>
   11a80:	f103 0120 	add.w	r1, r3, #32
   11a84:	2000      	movs	r0, #0
   11a86:	b368      	cbz	r0, 11ae4 <regulator_fixed_init_sync+0xac>
   11a88:	f1bc 0f10 	cmp.w	ip, #16
   11a8c:	dd33      	ble.n	11af6 <regulator_fixed_init_sync+0xbe>
   11a8e:	f04f 0c11 	mov.w	ip, #17
   11a92:	b142      	cbz	r2, 11aa6 <regulator_fixed_init_sync+0x6e>
   11a94:	2104      	movs	r1, #4
   11a96:	7139      	strb	r1, [r7, #4]
   11a98:	2100      	movs	r1, #0
   11a9a:	7179      	strb	r1, [r7, #5]
   11a9c:	71b9      	strb	r1, [r7, #6]
   11a9e:	2101      	movs	r1, #1
   11aa0:	71f9      	strb	r1, [r7, #7]
   11aa2:	6878      	ldr	r0, [r7, #4]
   11aa4:	6118      	str	r0, [r3, #16]
   11aa6:	2100      	movs	r1, #0
   11aa8:	f36f 0100 	bfc	r1, #0, #1
   11aac:	f36f 0141 	bfc	r1, #1, #1
   11ab0:	f36f 0182 	bfc	r1, #2, #1
   11ab4:	f36f 01c5 	bfc	r1, #3, #3
   11ab8:	2303      	movs	r3, #3
   11aba:	f363 1188 	bfi	r1, r3, #6, #3
   11abe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
   11ac2:	f36c 2152 	bfi	r1, ip, #9, #10
   11ac6:	f36f 41de 	bfc	r1, #19, #12
   11aca:	f36f 71df 	bfc	r1, #31, #1
   11ace:	2300      	movs	r3, #0
   11ad0:	480b      	ldr	r0, [pc, #44]	; (11b00 <regulator_fixed_init_sync+0xc8>)
   11ad2:	f7f1 fdfb 	bl	36cc <z_impl_z_log_msg_static_create>

	return rc;
}
   11ad6:	4620      	mov	r0, r4
   11ad8:	3708      	adds	r7, #8
   11ada:	46bd      	mov	sp, r7
   11adc:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_INF("%s sync: %d", dev->name, rc);
   11ade:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   11ae2:	e7ba      	b.n	11a5a <regulator_fixed_init_sync+0x22>
   11ae4:	f107 0508 	add.w	r5, r7, #8
   11ae8:	4405      	add	r5, r0
   11aea:	f815 5c08 	ldrb.w	r5, [r5, #-8]
   11aee:	f801 5b01 	strb.w	r5, [r1], #1
   11af2:	3001      	adds	r0, #1
   11af4:	e7c7      	b.n	11a86 <regulator_fixed_init_sync+0x4e>
   11af6:	f06f 0c1b 	mvn.w	ip, #27
   11afa:	e7ca      	b.n	11a92 <regulator_fixed_init_sync+0x5a>
   11afc:	00023378 	.word	0x00023378
   11b00:	000205d0 	.word	0x000205d0

00011b04 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   11b04:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   11b06:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   11b08:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   11b0c:	d06f      	beq.n	11bee <baudrate_set+0xea>
   11b0e:	d83a      	bhi.n	11b86 <baudrate_set+0x82>
   11b10:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   11b14:	d06e      	beq.n	11bf4 <baudrate_set+0xf0>
   11b16:	d90a      	bls.n	11b2e <baudrate_set+0x2a>
   11b18:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   11b1c:	d075      	beq.n	11c0a <baudrate_set+0x106>
   11b1e:	d924      	bls.n	11b6a <baudrate_set+0x66>
   11b20:	f647 2312 	movw	r3, #31250	; 0x7a12
   11b24:	4299      	cmp	r1, r3
   11b26:	d12b      	bne.n	11b80 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11b28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11b2c:	e013      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11b2e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   11b32:	d061      	beq.n	11bf8 <baudrate_set+0xf4>
   11b34:	d907      	bls.n	11b46 <baudrate_set+0x42>
   11b36:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   11b3a:	d063      	beq.n	11c04 <baudrate_set+0x100>
   11b3c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   11b40:	d110      	bne.n	11b64 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11b42:	4b3c      	ldr	r3, [pc, #240]	; (11c34 <baudrate_set+0x130>)
   11b44:	e007      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11b46:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11b4a:	d058      	beq.n	11bfe <baudrate_set+0xfa>
   11b4c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   11b50:	d105      	bne.n	11b5e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   11b52:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11b56:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   11b5a:	2000      	movs	r0, #0
   11b5c:	4770      	bx	lr
	switch (baudrate) {
   11b5e:	f06f 0015 	mvn.w	r0, #21
   11b62:	4770      	bx	lr
   11b64:	f06f 0015 	mvn.w	r0, #21
   11b68:	4770      	bx	lr
   11b6a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   11b6e:	d04e      	beq.n	11c0e <baudrate_set+0x10a>
   11b70:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   11b74:	d101      	bne.n	11b7a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11b76:	4b30      	ldr	r3, [pc, #192]	; (11c38 <baudrate_set+0x134>)
   11b78:	e7ed      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11b7a:	f06f 0015 	mvn.w	r0, #21
   11b7e:	4770      	bx	lr
   11b80:	f06f 0015 	mvn.w	r0, #21
   11b84:	4770      	bx	lr
   11b86:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   11b8a:	d042      	beq.n	11c12 <baudrate_set+0x10e>
   11b8c:	d909      	bls.n	11ba2 <baudrate_set+0x9e>
   11b8e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   11b92:	d046      	beq.n	11c22 <baudrate_set+0x11e>
   11b94:	d91f      	bls.n	11bd6 <baudrate_set+0xd2>
   11b96:	4b29      	ldr	r3, [pc, #164]	; (11c3c <baudrate_set+0x138>)
   11b98:	4299      	cmp	r1, r3
   11b9a:	d148      	bne.n	11c2e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11ba0:	e7d9      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11ba2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   11ba6:	d037      	beq.n	11c18 <baudrate_set+0x114>
   11ba8:	d905      	bls.n	11bb6 <baudrate_set+0xb2>
   11baa:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   11bae:	d10f      	bne.n	11bd0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11bb0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11bb4:	e7cf      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11bb6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   11bba:	4299      	cmp	r1, r3
   11bbc:	d02e      	beq.n	11c1c <baudrate_set+0x118>
   11bbe:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   11bc2:	d102      	bne.n	11bca <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11bc4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11bc8:	e7c5      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11bca:	f06f 0015 	mvn.w	r0, #21
   11bce:	4770      	bx	lr
   11bd0:	f06f 0015 	mvn.w	r0, #21
   11bd4:	4770      	bx	lr
   11bd6:	4b1a      	ldr	r3, [pc, #104]	; (11c40 <baudrate_set+0x13c>)
   11bd8:	4299      	cmp	r1, r3
   11bda:	d025      	beq.n	11c28 <baudrate_set+0x124>
   11bdc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   11be0:	d102      	bne.n	11be8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11be2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11be6:	e7b6      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11be8:	f06f 0015 	mvn.w	r0, #21
   11bec:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11bee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11bf2:	e7b0      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11bf4:	4b13      	ldr	r3, [pc, #76]	; (11c44 <baudrate_set+0x140>)
   11bf6:	e7ae      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11bf8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11bfc:	e7ab      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11bfe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11c02:	e7a8      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11c04:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11c08:	e7a5      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11c0a:	4b0f      	ldr	r3, [pc, #60]	; (11c48 <baudrate_set+0x144>)
   11c0c:	e7a3      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11c0e:	4b0f      	ldr	r3, [pc, #60]	; (11c4c <baudrate_set+0x148>)
   11c10:	e7a1      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11c12:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11c16:	e79e      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11c18:	4b0d      	ldr	r3, [pc, #52]	; (11c50 <baudrate_set+0x14c>)
   11c1a:	e79c      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11c1c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11c20:	e799      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11c22:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11c26:	e796      	b.n	11b56 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11c28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11c2c:	e793      	b.n	11b56 <baudrate_set+0x52>
	switch (baudrate) {
   11c2e:	f06f 0015 	mvn.w	r0, #21
}
   11c32:	4770      	bx	lr
   11c34:	0013b000 	.word	0x0013b000
   11c38:	004ea000 	.word	0x004ea000
   11c3c:	000f4240 	.word	0x000f4240
   11c40:	0003d090 	.word	0x0003d090
   11c44:	00275000 	.word	0x00275000
   11c48:	0075c000 	.word	0x0075c000
   11c4c:	003af000 	.word	0x003af000
   11c50:	013a9000 	.word	0x013a9000

00011c54 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   11c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c58:	4605      	mov	r5, r0
   11c5a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   11c5c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11c60:	f00d fbe1 	bl	1f426 <k_is_in_isr>
   11c64:	b920      	cbnz	r0, 11c70 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   11c66:	4b17      	ldr	r3, [pc, #92]	; (11cc4 <uarte_nrfx_poll_out+0x70>)
   11c68:	781b      	ldrb	r3, [r3, #0]
   11c6a:	b143      	cbz	r3, 11c7e <uarte_nrfx_poll_out+0x2a>
   11c6c:	2300      	movs	r3, #0
   11c6e:	e000      	b.n	11c72 <uarte_nrfx_poll_out+0x1e>
   11c70:	2301      	movs	r3, #1

		t = now;
	}
#endif

	if (isr_mode) {
   11c72:	b953      	cbnz	r3, 11c8a <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   11c74:	4628      	mov	r0, r5
   11c76:	f00c f8d6 	bl	1de26 <wait_tx_ready>
   11c7a:	4606      	mov	r6, r0
   11c7c:	e013      	b.n	11ca6 <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11c7e:	2301      	movs	r3, #1
   11c80:	e7f7      	b.n	11c72 <uarte_nrfx_poll_out+0x1e>
   11c82:	f384 8811 	msr	BASEPRI, r4
   11c86:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11c8a:	f04f 0320 	mov.w	r3, #32
   11c8e:	f3ef 8411 	mrs	r4, BASEPRI
   11c92:	f383 8812 	msr	BASEPRI_MAX, r3
   11c96:	f3bf 8f6f 	isb	sy
   11c9a:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   11c9c:	4628      	mov	r0, r5
   11c9e:	f00c f873 	bl	1dd88 <is_tx_ready>
   11ca2:	2800      	cmp	r0, #0
   11ca4:	d0ed      	beq.n	11c82 <uarte_nrfx_poll_out+0x2e>
	}

	*data->char_out = c;
   11ca6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   11caa:	701f      	strb	r7, [r3, #0]
	tx_start(dev, data->char_out, 1);
   11cac:	2201      	movs	r2, #1
   11cae:	f8d8 1010 	ldr.w	r1, [r8, #16]
   11cb2:	4628      	mov	r0, r5
   11cb4:	f00c f882 	bl	1ddbc <tx_start>
	__asm__ volatile(
   11cb8:	f386 8811 	msr	BASEPRI, r6
   11cbc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   11cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11cc4:	20002b7d 	.word	0x20002b7d

00011cc8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   11cc8:	b530      	push	{r4, r5, lr}
   11cca:	b089      	sub	sp, #36	; 0x24
   11ccc:	4605      	mov	r5, r0
   11cce:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   11cd0:	f101 0018 	add.w	r0, r1, #24
   11cd4:	f001 fe2c 	bl	13930 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   11cd8:	4b1d      	ldr	r3, [pc, #116]	; (11d50 <endtx_stoptx_ppi_init+0x88>)
   11cda:	4298      	cmp	r0, r3
   11cdc:	d10f      	bne.n	11cfe <endtx_stoptx_ppi_init+0x36>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   11cde:	7e23      	ldrb	r3, [r4, #24]
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   11ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11ce4:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   11ce8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   11cec:	7e22      	ldrb	r2, [r4, #24]
   11cee:	2301      	movs	r3, #1
   11cf0:	4093      	lsls	r3, r2
   11cf2:	4a18      	ldr	r2, [pc, #96]	; (11d54 <endtx_stoptx_ppi_init+0x8c>)
   11cf4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   11cf8:	2000      	movs	r0, #0
}
   11cfa:	b009      	add	sp, #36	; 0x24
   11cfc:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   11cfe:	4b16      	ldr	r3, [pc, #88]	; (11d58 <endtx_stoptx_ppi_init+0x90>)
   11d00:	9307      	str	r3, [sp, #28]
   11d02:	2302      	movs	r3, #2
   11d04:	f88d 3004 	strb.w	r3, [sp, #4]
   11d08:	2300      	movs	r3, #0
   11d0a:	f88d 3005 	strb.w	r3, [sp, #5]
   11d0e:	f88d 3006 	strb.w	r3, [sp, #6]
   11d12:	f88d 3007 	strb.w	r3, [sp, #7]
   11d16:	9a01      	ldr	r2, [sp, #4]
   11d18:	9206      	str	r2, [sp, #24]
   11d1a:	4619      	mov	r1, r3
   11d1c:	f363 0100 	bfi	r1, r3, #0, #1
   11d20:	f363 0141 	bfi	r1, r3, #1, #1
   11d24:	f363 0182 	bfi	r1, r3, #2, #1
   11d28:	f363 01c5 	bfi	r1, r3, #3, #3
   11d2c:	2201      	movs	r2, #1
   11d2e:	f362 1188 	bfi	r1, r2, #6, #3
   11d32:	2208      	movs	r2, #8
   11d34:	f362 2152 	bfi	r1, r2, #9, #10
   11d38:	f363 41de 	bfi	r1, r3, #19, #12
   11d3c:	f363 71df 	bfi	r1, r3, #31, #1
   11d40:	aa06      	add	r2, sp, #24
   11d42:	4806      	ldr	r0, [pc, #24]	; (11d5c <endtx_stoptx_ppi_init+0x94>)
   11d44:	f7f1 fcc2 	bl	36cc <z_impl_z_log_msg_static_create>
		return -EIO;
   11d48:	f06f 0004 	mvn.w	r0, #4
   11d4c:	e7d5      	b.n	11cfa <endtx_stoptx_ppi_init+0x32>
   11d4e:	bf00      	nop
   11d50:	0bad0000 	.word	0x0bad0000
   11d54:	50017000 	.word	0x50017000
   11d58:	00023404 	.word	0x00023404
   11d5c:	00020600 	.word	0x00020600

00011d60 <hci_ept_bound>:
	net_buf_unref(buf);
	return 0;
}

static void hci_ept_bound(void *priv)
{
   11d60:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   11d62:	4802      	ldr	r0, [pc, #8]	; (11d6c <hci_ept_bound+0xc>)
   11d64:	f004 fb22 	bl	163ac <z_impl_k_sem_give>
	k_sem_give(&ipc_bound_sem);
}
   11d68:	bd08      	pop	{r3, pc}
   11d6a:	bf00      	nop
   11d6c:	200006f8 	.word	0x200006f8

00011d70 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   11d70:	b5b0      	push	{r4, r5, r7, lr}
   11d72:	b082      	sub	sp, #8
   11d74:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   11d76:	4823      	ldr	r0, [pc, #140]	; (11e04 <bt_rpmsg_init+0x94>)
   11d78:	f7f7 ffb8 	bl	9cec <bt_hci_driver_register>
	if (err < 0) {
   11d7c:	1e04      	subs	r4, r0, #0
   11d7e:	db03      	blt.n	11d88 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
	}

	return err;
}
   11d80:	4620      	mov	r0, r4
   11d82:	3708      	adds	r7, #8
   11d84:	46bd      	mov	sp, r7
   11d86:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   11d88:	466d      	mov	r5, sp
   11d8a:	b088      	sub	sp, #32
   11d8c:	466b      	mov	r3, sp
   11d8e:	f113 0210 	adds.w	r2, r3, #16
   11d92:	d030      	beq.n	11df6 <bt_rpmsg_init+0x86>
   11d94:	210c      	movs	r1, #12
   11d96:	b11a      	cbz	r2, 11da0 <bt_rpmsg_init+0x30>
   11d98:	2904      	cmp	r1, #4
   11d9a:	dd01      	ble.n	11da0 <bt_rpmsg_init+0x30>
   11d9c:	481a      	ldr	r0, [pc, #104]	; (11e08 <bt_rpmsg_init+0x98>)
   11d9e:	6158      	str	r0, [r3, #20]
   11da0:	b112      	cbz	r2, 11da8 <bt_rpmsg_init+0x38>
   11da2:	2908      	cmp	r1, #8
   11da4:	dd00      	ble.n	11da8 <bt_rpmsg_init+0x38>
   11da6:	619c      	str	r4, [r3, #24]
   11da8:	290b      	cmp	r1, #11
   11daa:	dd27      	ble.n	11dfc <bt_rpmsg_init+0x8c>
   11dac:	f04f 0c0c 	mov.w	ip, #12
   11db0:	b13a      	cbz	r2, 11dc2 <bt_rpmsg_init+0x52>
   11db2:	2103      	movs	r1, #3
   11db4:	7139      	strb	r1, [r7, #4]
   11db6:	2100      	movs	r1, #0
   11db8:	7179      	strb	r1, [r7, #5]
   11dba:	71b9      	strb	r1, [r7, #6]
   11dbc:	71f9      	strb	r1, [r7, #7]
   11dbe:	6878      	ldr	r0, [r7, #4]
   11dc0:	6118      	str	r0, [r3, #16]
   11dc2:	2100      	movs	r1, #0
   11dc4:	f36f 0100 	bfc	r1, #0, #1
   11dc8:	f36f 0141 	bfc	r1, #1, #1
   11dcc:	f36f 0182 	bfc	r1, #2, #1
   11dd0:	f36f 01c5 	bfc	r1, #3, #3
   11dd4:	2301      	movs	r3, #1
   11dd6:	f363 1188 	bfi	r1, r3, #6, #3
   11dda:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   11dde:	f36c 2152 	bfi	r1, ip, #9, #10
   11de2:	f36f 41de 	bfc	r1, #19, #12
   11de6:	f36f 71df 	bfc	r1, #31, #1
   11dea:	2300      	movs	r3, #0
   11dec:	4807      	ldr	r0, [pc, #28]	; (11e0c <bt_rpmsg_init+0x9c>)
   11dee:	f7f1 fc6d 	bl	36cc <z_impl_z_log_msg_static_create>
   11df2:	46ad      	mov	sp, r5
	return err;
   11df4:	e7c4      	b.n	11d80 <bt_rpmsg_init+0x10>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   11df6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11dfa:	e7cc      	b.n	11d96 <bt_rpmsg_init+0x26>
   11dfc:	f06f 0c1b 	mvn.w	ip, #27
   11e00:	e7d6      	b.n	11db0 <bt_rpmsg_init+0x40>
   11e02:	bf00      	nop
   11e04:	000236ec 	.word	0x000236ec
   11e08:	00023488 	.word	0x00023488
   11e0c:	00020550 	.word	0x00020550

00011e10 <bt_rpmsg_send>:
{
   11e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e12:	b083      	sub	sp, #12
   11e14:	af00      	add	r7, sp, #0
   11e16:	4604      	mov	r4, r0
   11e18:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   11e1a:	2902      	cmp	r1, #2
   11e1c:	d041      	beq.n	11ea2 <bt_rpmsg_send+0x92>
   11e1e:	4608      	mov	r0, r1
   11e20:	2904      	cmp	r1, #4
   11e22:	d03d      	beq.n	11ea0 <bt_rpmsg_send+0x90>
   11e24:	2900      	cmp	r1, #0
   11e26:	d04e      	beq.n	11ec6 <bt_rpmsg_send+0xb6>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   11e28:	466e      	mov	r6, sp
   11e2a:	b088      	sub	sp, #32
   11e2c:	466b      	mov	r3, sp
   11e2e:	f113 0210 	adds.w	r2, r3, #16
   11e32:	d02f      	beq.n	11e94 <bt_rpmsg_send+0x84>
   11e34:	210c      	movs	r1, #12
   11e36:	b11a      	cbz	r2, 11e40 <bt_rpmsg_send+0x30>
   11e38:	2904      	cmp	r1, #4
   11e3a:	dd01      	ble.n	11e40 <bt_rpmsg_send+0x30>
   11e3c:	4d41      	ldr	r5, [pc, #260]	; (11f44 <bt_rpmsg_send+0x134>)
   11e3e:	615d      	str	r5, [r3, #20]
   11e40:	b112      	cbz	r2, 11e48 <bt_rpmsg_send+0x38>
   11e42:	2908      	cmp	r1, #8
   11e44:	dd00      	ble.n	11e48 <bt_rpmsg_send+0x38>
   11e46:	6198      	str	r0, [r3, #24]
   11e48:	290b      	cmp	r1, #11
   11e4a:	dd26      	ble.n	11e9a <bt_rpmsg_send+0x8a>
   11e4c:	250c      	movs	r5, #12
   11e4e:	b13a      	cbz	r2, 11e60 <bt_rpmsg_send+0x50>
   11e50:	2103      	movs	r1, #3
   11e52:	7139      	strb	r1, [r7, #4]
   11e54:	2100      	movs	r1, #0
   11e56:	7179      	strb	r1, [r7, #5]
   11e58:	71b9      	strb	r1, [r7, #6]
   11e5a:	71f9      	strb	r1, [r7, #7]
   11e5c:	6878      	ldr	r0, [r7, #4]
   11e5e:	6118      	str	r0, [r3, #16]
   11e60:	2100      	movs	r1, #0
   11e62:	f36f 0100 	bfc	r1, #0, #1
   11e66:	f36f 0141 	bfc	r1, #1, #1
   11e6a:	f36f 0182 	bfc	r1, #2, #1
   11e6e:	f36f 01c5 	bfc	r1, #3, #3
   11e72:	2301      	movs	r3, #1
   11e74:	f363 1188 	bfi	r1, r3, #6, #3
   11e78:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   11e7c:	f365 2152 	bfi	r1, r5, #9, #10
   11e80:	f36f 41de 	bfc	r1, #19, #12
   11e84:	f36f 71df 	bfc	r1, #31, #1
   11e88:	2300      	movs	r3, #0
   11e8a:	482f      	ldr	r0, [pc, #188]	; (11f48 <bt_rpmsg_send+0x138>)
   11e8c:	f7f1 fc1e 	bl	36cc <z_impl_z_log_msg_static_create>
   11e90:	46b5      	mov	sp, r6
		goto done;
   11e92:	e011      	b.n	11eb8 <bt_rpmsg_send+0xa8>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   11e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11e98:	e7cd      	b.n	11e36 <bt_rpmsg_send+0x26>
   11e9a:	f06f 051b 	mvn.w	r5, #27
   11e9e:	e7d6      	b.n	11e4e <bt_rpmsg_send+0x3e>
		pkt_indicator = RPMSG_ISO;
   11ea0:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   11ea2:	f104 0008 	add.w	r0, r4, #8
   11ea6:	f00a fe64 	bl	1cb72 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   11eaa:	89a2      	ldrh	r2, [r4, #12]
   11eac:	68a1      	ldr	r1, [r4, #8]
   11eae:	4827      	ldr	r0, [pc, #156]	; (11f4c <bt_rpmsg_send+0x13c>)
   11eb0:	f7f2 f820 	bl	3ef4 <ipc_service_send>
	if (err < 0) {
   11eb4:	2800      	cmp	r0, #0
   11eb6:	db08      	blt.n	11eca <bt_rpmsg_send+0xba>
	net_buf_unref(buf);
   11eb8:	4620      	mov	r0, r4
   11eba:	f00a fde7 	bl	1ca8c <net_buf_unref>
}
   11ebe:	2000      	movs	r0, #0
   11ec0:	370c      	adds	r7, #12
   11ec2:	46bd      	mov	sp, r7
   11ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pkt_indicator = RPMSG_CMD;
   11ec6:	2101      	movs	r1, #1
   11ec8:	e7eb      	b.n	11ea2 <bt_rpmsg_send+0x92>
		BT_ERR("Failed to send (err %d)", err);
   11eca:	466d      	mov	r5, sp
   11ecc:	b088      	sub	sp, #32
   11ece:	466b      	mov	r3, sp
   11ed0:	f113 0210 	adds.w	r2, r3, #16
   11ed4:	d030      	beq.n	11f38 <bt_rpmsg_send+0x128>
   11ed6:	210c      	movs	r1, #12
   11ed8:	b11a      	cbz	r2, 11ee2 <bt_rpmsg_send+0xd2>
   11eda:	2904      	cmp	r1, #4
   11edc:	dd01      	ble.n	11ee2 <bt_rpmsg_send+0xd2>
   11ede:	4e1c      	ldr	r6, [pc, #112]	; (11f50 <bt_rpmsg_send+0x140>)
   11ee0:	615e      	str	r6, [r3, #20]
   11ee2:	b112      	cbz	r2, 11eea <bt_rpmsg_send+0xda>
   11ee4:	2908      	cmp	r1, #8
   11ee6:	dd00      	ble.n	11eea <bt_rpmsg_send+0xda>
   11ee8:	6198      	str	r0, [r3, #24]
   11eea:	290b      	cmp	r1, #11
   11eec:	dd27      	ble.n	11f3e <bt_rpmsg_send+0x12e>
   11eee:	f04f 0c0c 	mov.w	ip, #12
   11ef2:	b13a      	cbz	r2, 11f04 <bt_rpmsg_send+0xf4>
   11ef4:	2103      	movs	r1, #3
   11ef6:	7139      	strb	r1, [r7, #4]
   11ef8:	2100      	movs	r1, #0
   11efa:	7179      	strb	r1, [r7, #5]
   11efc:	71b9      	strb	r1, [r7, #6]
   11efe:	71f9      	strb	r1, [r7, #7]
   11f00:	6878      	ldr	r0, [r7, #4]
   11f02:	6118      	str	r0, [r3, #16]
   11f04:	2100      	movs	r1, #0
   11f06:	f36f 0100 	bfc	r1, #0, #1
   11f0a:	f36f 0141 	bfc	r1, #1, #1
   11f0e:	f36f 0182 	bfc	r1, #2, #1
   11f12:	f36f 01c5 	bfc	r1, #3, #3
   11f16:	2301      	movs	r3, #1
   11f18:	f363 1188 	bfi	r1, r3, #6, #3
   11f1c:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11f20:	f363 2152 	bfi	r1, r3, #9, #10
   11f24:	f36f 41de 	bfc	r1, #19, #12
   11f28:	f36f 71df 	bfc	r1, #31, #1
   11f2c:	2300      	movs	r3, #0
   11f2e:	4806      	ldr	r0, [pc, #24]	; (11f48 <bt_rpmsg_send+0x138>)
   11f30:	f7f1 fbcc 	bl	36cc <z_impl_z_log_msg_static_create>
   11f34:	46ad      	mov	sp, r5
   11f36:	e7bf      	b.n	11eb8 <bt_rpmsg_send+0xa8>
   11f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11f3c:	e7cc      	b.n	11ed8 <bt_rpmsg_send+0xc8>
   11f3e:	f06f 0c1b 	mvn.w	ip, #27
   11f42:	e7d6      	b.n	11ef2 <bt_rpmsg_send+0xe2>
   11f44:	000234b4 	.word	0x000234b4
   11f48:	00020550 	.word	0x00020550
   11f4c:	2000236c 	.word	0x2000236c
   11f50:	000234c4 	.word	0x000234c4

00011f54 <bt_rpmsg_open>:
{
   11f54:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f56:	b083      	sub	sp, #12
   11f58:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   11f5a:	4869      	ldr	r0, [pc, #420]	; (12100 <bt_rpmsg_open+0x1ac>)
   11f5c:	f7f1 fefe 	bl	3d5c <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   11f60:	2800      	cmp	r0, #0
   11f62:	d040      	beq.n	11fe6 <bt_rpmsg_open+0x92>
   11f64:	4604      	mov	r4, r0
   11f66:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11f6a:	d03c      	beq.n	11fe6 <bt_rpmsg_open+0x92>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   11f6c:	466d      	mov	r5, sp
   11f6e:	b088      	sub	sp, #32
   11f70:	466b      	mov	r3, sp
   11f72:	f113 0210 	adds.w	r2, r3, #16
   11f76:	d030      	beq.n	11fda <bt_rpmsg_open+0x86>
   11f78:	210c      	movs	r1, #12
   11f7a:	b11a      	cbz	r2, 11f84 <bt_rpmsg_open+0x30>
   11f7c:	2904      	cmp	r1, #4
   11f7e:	dd01      	ble.n	11f84 <bt_rpmsg_open+0x30>
   11f80:	4860      	ldr	r0, [pc, #384]	; (12104 <bt_rpmsg_open+0x1b0>)
   11f82:	6158      	str	r0, [r3, #20]
   11f84:	b112      	cbz	r2, 11f8c <bt_rpmsg_open+0x38>
   11f86:	2908      	cmp	r1, #8
   11f88:	dd00      	ble.n	11f8c <bt_rpmsg_open+0x38>
   11f8a:	619c      	str	r4, [r3, #24]
   11f8c:	290b      	cmp	r1, #11
   11f8e:	dd27      	ble.n	11fe0 <bt_rpmsg_open+0x8c>
   11f90:	f04f 0c0c 	mov.w	ip, #12
   11f94:	b13a      	cbz	r2, 11fa6 <bt_rpmsg_open+0x52>
   11f96:	2103      	movs	r1, #3
   11f98:	7139      	strb	r1, [r7, #4]
   11f9a:	2100      	movs	r1, #0
   11f9c:	7179      	strb	r1, [r7, #5]
   11f9e:	71b9      	strb	r1, [r7, #6]
   11fa0:	71f9      	strb	r1, [r7, #7]
   11fa2:	6878      	ldr	r0, [r7, #4]
   11fa4:	6118      	str	r0, [r3, #16]
   11fa6:	2100      	movs	r1, #0
   11fa8:	f36f 0100 	bfc	r1, #0, #1
   11fac:	f36f 0141 	bfc	r1, #1, #1
   11fb0:	f36f 0182 	bfc	r1, #2, #1
   11fb4:	f36f 01c5 	bfc	r1, #3, #3
   11fb8:	2301      	movs	r3, #1
   11fba:	f363 1188 	bfi	r1, r3, #6, #3
   11fbe:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11fc2:	f363 2152 	bfi	r1, r3, #9, #10
   11fc6:	f36f 41de 	bfc	r1, #19, #12
   11fca:	f36f 71df 	bfc	r1, #31, #1
   11fce:	2300      	movs	r3, #0
   11fd0:	484d      	ldr	r0, [pc, #308]	; (12108 <bt_rpmsg_open+0x1b4>)
   11fd2:	f7f1 fb7b 	bl	36cc <z_impl_z_log_msg_static_create>
   11fd6:	46ad      	mov	sp, r5
		return err;
   11fd8:	e043      	b.n	12062 <bt_rpmsg_open+0x10e>
		BT_ERR("IPC service instance initialization failed: %d\n", err);
   11fda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11fde:	e7cc      	b.n	11f7a <bt_rpmsg_open+0x26>
   11fe0:	f06f 0c1b 	mvn.w	ip, #27
   11fe4:	e7d6      	b.n	11f94 <bt_rpmsg_open+0x40>
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   11fe6:	4a49      	ldr	r2, [pc, #292]	; (1210c <bt_rpmsg_open+0x1b8>)
   11fe8:	4949      	ldr	r1, [pc, #292]	; (12110 <bt_rpmsg_open+0x1bc>)
   11fea:	4845      	ldr	r0, [pc, #276]	; (12100 <bt_rpmsg_open+0x1ac>)
   11fec:	f7f1 ff1a 	bl	3e24 <ipc_service_register_endpoint>
	if (err) {
   11ff0:	4604      	mov	r4, r0
   11ff2:	2800      	cmp	r0, #0
   11ff4:	d03f      	beq.n	12076 <bt_rpmsg_open+0x122>
		BT_ERR("Registering endpoint failed with %d", err);
   11ff6:	466d      	mov	r5, sp
   11ff8:	b088      	sub	sp, #32
   11ffa:	466b      	mov	r3, sp
   11ffc:	f113 0210 	adds.w	r2, r3, #16
   12000:	d033      	beq.n	1206a <bt_rpmsg_open+0x116>
   12002:	210c      	movs	r1, #12
   12004:	b11a      	cbz	r2, 1200e <bt_rpmsg_open+0xba>
   12006:	2904      	cmp	r1, #4
   12008:	dd01      	ble.n	1200e <bt_rpmsg_open+0xba>
   1200a:	4842      	ldr	r0, [pc, #264]	; (12114 <bt_rpmsg_open+0x1c0>)
   1200c:	6158      	str	r0, [r3, #20]
   1200e:	b112      	cbz	r2, 12016 <bt_rpmsg_open+0xc2>
   12010:	2908      	cmp	r1, #8
   12012:	dd00      	ble.n	12016 <bt_rpmsg_open+0xc2>
   12014:	619c      	str	r4, [r3, #24]
   12016:	290b      	cmp	r1, #11
   12018:	dd2a      	ble.n	12070 <bt_rpmsg_open+0x11c>
   1201a:	f04f 0c0c 	mov.w	ip, #12
   1201e:	b13a      	cbz	r2, 12030 <bt_rpmsg_open+0xdc>
   12020:	2103      	movs	r1, #3
   12022:	7139      	strb	r1, [r7, #4]
   12024:	2100      	movs	r1, #0
   12026:	7179      	strb	r1, [r7, #5]
   12028:	71b9      	strb	r1, [r7, #6]
   1202a:	71f9      	strb	r1, [r7, #7]
   1202c:	6878      	ldr	r0, [r7, #4]
   1202e:	6118      	str	r0, [r3, #16]
   12030:	2100      	movs	r1, #0
   12032:	f36f 0100 	bfc	r1, #0, #1
   12036:	f36f 0141 	bfc	r1, #1, #1
   1203a:	f36f 0182 	bfc	r1, #2, #1
   1203e:	f36f 01c5 	bfc	r1, #3, #3
   12042:	2301      	movs	r3, #1
   12044:	f363 1188 	bfi	r1, r3, #6, #3
   12048:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1204c:	f36c 2152 	bfi	r1, ip, #9, #10
   12050:	f36f 41de 	bfc	r1, #19, #12
   12054:	f36f 71df 	bfc	r1, #31, #1
   12058:	2300      	movs	r3, #0
   1205a:	482b      	ldr	r0, [pc, #172]	; (12108 <bt_rpmsg_open+0x1b4>)
   1205c:	f7f1 fb36 	bl	36cc <z_impl_z_log_msg_static_create>
   12060:	46ad      	mov	sp, r5
}
   12062:	4620      	mov	r0, r4
   12064:	370c      	adds	r7, #12
   12066:	46bd      	mov	sp, r7
   12068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Registering endpoint failed with %d", err);
   1206a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1206e:	e7c9      	b.n	12004 <bt_rpmsg_open+0xb0>
   12070:	f06f 0c1b 	mvn.w	ip, #27
   12074:	e7d3      	b.n	1201e <bt_rpmsg_open+0xca>
	return z_impl_k_sem_take(sem, timeout);
   12076:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1207a:	2300      	movs	r3, #0
   1207c:	4826      	ldr	r0, [pc, #152]	; (12118 <bt_rpmsg_open+0x1c4>)
   1207e:	f004 f9bd 	bl	163fc <z_impl_k_sem_take>
	if (err) {
   12082:	4604      	mov	r4, r0
   12084:	2800      	cmp	r0, #0
   12086:	d0ec      	beq.n	12062 <bt_rpmsg_open+0x10e>
		BT_ERR("Endpoint binding failed with %d", err);
   12088:	466e      	mov	r6, sp
   1208a:	b088      	sub	sp, #32
   1208c:	466b      	mov	r3, sp
   1208e:	f113 0210 	adds.w	r2, r3, #16
   12092:	d02f      	beq.n	120f4 <bt_rpmsg_open+0x1a0>
   12094:	210c      	movs	r1, #12
   12096:	b11a      	cbz	r2, 120a0 <bt_rpmsg_open+0x14c>
   12098:	2904      	cmp	r1, #4
   1209a:	dd01      	ble.n	120a0 <bt_rpmsg_open+0x14c>
   1209c:	481f      	ldr	r0, [pc, #124]	; (1211c <bt_rpmsg_open+0x1c8>)
   1209e:	6158      	str	r0, [r3, #20]
   120a0:	b112      	cbz	r2, 120a8 <bt_rpmsg_open+0x154>
   120a2:	2908      	cmp	r1, #8
   120a4:	dd00      	ble.n	120a8 <bt_rpmsg_open+0x154>
   120a6:	619c      	str	r4, [r3, #24]
   120a8:	290b      	cmp	r1, #11
   120aa:	dd26      	ble.n	120fa <bt_rpmsg_open+0x1a6>
   120ac:	250c      	movs	r5, #12
   120ae:	b13a      	cbz	r2, 120c0 <bt_rpmsg_open+0x16c>
   120b0:	2103      	movs	r1, #3
   120b2:	7139      	strb	r1, [r7, #4]
   120b4:	2100      	movs	r1, #0
   120b6:	7179      	strb	r1, [r7, #5]
   120b8:	71b9      	strb	r1, [r7, #6]
   120ba:	71f9      	strb	r1, [r7, #7]
   120bc:	6878      	ldr	r0, [r7, #4]
   120be:	6118      	str	r0, [r3, #16]
   120c0:	2100      	movs	r1, #0
   120c2:	f36f 0100 	bfc	r1, #0, #1
   120c6:	f36f 0141 	bfc	r1, #1, #1
   120ca:	f36f 0182 	bfc	r1, #2, #1
   120ce:	f36f 01c5 	bfc	r1, #3, #3
   120d2:	2301      	movs	r3, #1
   120d4:	f363 1188 	bfi	r1, r3, #6, #3
   120d8:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   120dc:	f365 2152 	bfi	r1, r5, #9, #10
   120e0:	f36f 41de 	bfc	r1, #19, #12
   120e4:	f36f 71df 	bfc	r1, #31, #1
   120e8:	2300      	movs	r3, #0
   120ea:	4807      	ldr	r0, [pc, #28]	; (12108 <bt_rpmsg_open+0x1b4>)
   120ec:	f7f1 faee 	bl	36cc <z_impl_z_log_msg_static_create>
   120f0:	46b5      	mov	sp, r6
		return err;
   120f2:	e7b6      	b.n	12062 <bt_rpmsg_open+0x10e>
		BT_ERR("Endpoint binding failed with %d", err);
   120f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   120f8:	e7cd      	b.n	12096 <bt_rpmsg_open+0x142>
   120fa:	f06f 051b 	mvn.w	r5, #27
   120fe:	e7d6      	b.n	120ae <bt_rpmsg_open+0x15a>
   12100:	00020134 	.word	0x00020134
   12104:	000234dc 	.word	0x000234dc
   12108:	00020550 	.word	0x00020550
   1210c:	200004b8 	.word	0x200004b8
   12110:	2000236c 	.word	0x2000236c
   12114:	0002350c 	.word	0x0002350c
   12118:	200006f8 	.word	0x200006f8
   1211c:	00023530 	.word	0x00023530

00012120 <bt_rpmsg_evt_recv>:
{
   12120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12124:	b095      	sub	sp, #84	; 0x54
   12126:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   12128:	2901      	cmp	r1, #1
   1212a:	d934      	bls.n	12196 <bt_rpmsg_evt_recv+0x76>
   1212c:	4681      	mov	r9, r0
   1212e:	4688      	mov	r8, r1
	discardable = is_hci_event_discardable(data);
   12130:	f00b ff10 	bl	1df54 <is_hci_event_discardable>
   12134:	4604      	mov	r4, r0
	memcpy((void *)&hdr, data, sizeof(hdr));
   12136:	2202      	movs	r2, #2
   12138:	4649      	mov	r1, r9
   1213a:	1d38      	adds	r0, r7, #4
   1213c:	f007 ff85 	bl	1a04a <memcpy>
	data += sizeof(hdr);
   12140:	f109 0902 	add.w	r9, r9, #2
	remaining -= sizeof(hdr);
   12144:	f1a8 0802 	sub.w	r8, r8, #2
	if (remaining != hdr.len) {
   12148:	797b      	ldrb	r3, [r7, #5]
   1214a:	4543      	cmp	r3, r8
   1214c:	d04f      	beq.n	121ee <bt_rpmsg_evt_recv+0xce>
		BT_ERR("Event payload length is not correct");
   1214e:	4b6a      	ldr	r3, [pc, #424]	; (122f8 <bt_rpmsg_evt_recv+0x1d8>)
   12150:	637b      	str	r3, [r7, #52]	; 0x34
   12152:	2302      	movs	r3, #2
   12154:	703b      	strb	r3, [r7, #0]
   12156:	2600      	movs	r6, #0
   12158:	707e      	strb	r6, [r7, #1]
   1215a:	70be      	strb	r6, [r7, #2]
   1215c:	70fe      	strb	r6, [r7, #3]
   1215e:	683b      	ldr	r3, [r7, #0]
   12160:	633b      	str	r3, [r7, #48]	; 0x30
   12162:	4631      	mov	r1, r6
   12164:	f366 0100 	bfi	r1, r6, #0, #1
   12168:	f366 0141 	bfi	r1, r6, #1, #1
   1216c:	f366 0182 	bfi	r1, r6, #2, #1
   12170:	f366 01c5 	bfi	r1, r6, #3, #3
   12174:	2301      	movs	r3, #1
   12176:	f363 1188 	bfi	r1, r3, #6, #3
   1217a:	2308      	movs	r3, #8
   1217c:	f363 2152 	bfi	r1, r3, #9, #10
   12180:	f366 41de 	bfi	r1, r6, #19, #12
   12184:	f366 71df 	bfi	r1, r6, #31, #1
   12188:	4633      	mov	r3, r6
   1218a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1218e:	485b      	ldr	r0, [pc, #364]	; (122fc <bt_rpmsg_evt_recv+0x1dc>)
   12190:	f7f1 fa9c 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
   12194:	e066      	b.n	12264 <bt_rpmsg_evt_recv+0x144>
		BT_ERR("Not enough data for event header");
   12196:	4b5a      	ldr	r3, [pc, #360]	; (12300 <bt_rpmsg_evt_recv+0x1e0>)
   12198:	64fb      	str	r3, [r7, #76]	; 0x4c
   1219a:	2302      	movs	r3, #2
   1219c:	703b      	strb	r3, [r7, #0]
   1219e:	2600      	movs	r6, #0
   121a0:	707e      	strb	r6, [r7, #1]
   121a2:	70be      	strb	r6, [r7, #2]
   121a4:	70fe      	strb	r6, [r7, #3]
   121a6:	683b      	ldr	r3, [r7, #0]
   121a8:	64bb      	str	r3, [r7, #72]	; 0x48
   121aa:	4631      	mov	r1, r6
   121ac:	f366 0100 	bfi	r1, r6, #0, #1
   121b0:	f366 0141 	bfi	r1, r6, #1, #1
   121b4:	f366 0182 	bfi	r1, r6, #2, #1
   121b8:	f366 01c5 	bfi	r1, r6, #3, #3
   121bc:	2301      	movs	r3, #1
   121be:	f363 1188 	bfi	r1, r3, #6, #3
   121c2:	2308      	movs	r3, #8
   121c4:	f363 2152 	bfi	r1, r3, #9, #10
   121c8:	f366 41de 	bfi	r1, r6, #19, #12
   121cc:	f366 71df 	bfi	r1, r6, #31, #1
   121d0:	4633      	mov	r3, r6
   121d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
   121d6:	4849      	ldr	r0, [pc, #292]	; (122fc <bt_rpmsg_evt_recv+0x1dc>)
   121d8:	f7f1 fa78 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
   121dc:	e042      	b.n	12264 <bt_rpmsg_evt_recv+0x144>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   121de:	2200      	movs	r2, #0
   121e0:	2300      	movs	r3, #0
   121e2:	4621      	mov	r1, r4
   121e4:	f7f4 fe72 	bl	6ecc <bt_buf_get_evt>
		if (!buf) {
   121e8:	4606      	mov	r6, r0
   121ea:	b138      	cbz	r0, 121fc <bt_rpmsg_evt_recv+0xdc>
	} while (!buf);
   121ec:	bb4e      	cbnz	r6, 12242 <bt_rpmsg_evt_recv+0x122>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   121ee:	7938      	ldrb	r0, [r7, #4]
   121f0:	2c00      	cmp	r4, #0
   121f2:	d1f4      	bne.n	121de <bt_rpmsg_evt_recv+0xbe>
   121f4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   121f8:	2300      	movs	r3, #0
   121fa:	e7f2      	b.n	121e2 <bt_rpmsg_evt_recv+0xc2>
			if (discardable) {
   121fc:	bb94      	cbnz	r4, 12264 <bt_rpmsg_evt_recv+0x144>
			BT_WARN("Couldn't allocate a buffer after waiting 10 seconds.");
   121fe:	4b41      	ldr	r3, [pc, #260]	; (12304 <bt_rpmsg_evt_recv+0x1e4>)
   12200:	61fb      	str	r3, [r7, #28]
   12202:	2202      	movs	r2, #2
   12204:	703a      	strb	r2, [r7, #0]
   12206:	2300      	movs	r3, #0
   12208:	707b      	strb	r3, [r7, #1]
   1220a:	70bb      	strb	r3, [r7, #2]
   1220c:	70fb      	strb	r3, [r7, #3]
   1220e:	6839      	ldr	r1, [r7, #0]
   12210:	61b9      	str	r1, [r7, #24]
   12212:	f363 0500 	bfi	r5, r3, #0, #1
   12216:	f363 0541 	bfi	r5, r3, #1, #1
   1221a:	f363 0582 	bfi	r5, r3, #2, #1
   1221e:	f363 05c5 	bfi	r5, r3, #3, #3
   12222:	f362 1588 	bfi	r5, r2, #6, #3
   12226:	2208      	movs	r2, #8
   12228:	f362 2552 	bfi	r5, r2, #9, #10
   1222c:	f363 45de 	bfi	r5, r3, #19, #12
   12230:	f363 75df 	bfi	r5, r3, #31, #1
   12234:	f107 0218 	add.w	r2, r7, #24
   12238:	4629      	mov	r1, r5
   1223a:	4830      	ldr	r0, [pc, #192]	; (122fc <bt_rpmsg_evt_recv+0x1dc>)
   1223c:	f7f1 fa46 	bl	36cc <z_impl_z_log_msg_static_create>
   12240:	e7d4      	b.n	121ec <bt_rpmsg_evt_recv+0xcc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12242:	f106 0408 	add.w	r4, r6, #8
   12246:	2202      	movs	r2, #2
   12248:	1d39      	adds	r1, r7, #4
   1224a:	4620      	mov	r0, r4
   1224c:	f00a fc6e 	bl	1cb2c <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   12250:	4620      	mov	r0, r4
   12252:	f00a fcb1 	bl	1cbb8 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   12256:	4580      	cmp	r8, r0
   12258:	d809      	bhi.n	1226e <bt_rpmsg_evt_recv+0x14e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1225a:	4642      	mov	r2, r8
   1225c:	4649      	mov	r1, r9
   1225e:	4620      	mov	r0, r4
   12260:	f00a fc64 	bl	1cb2c <net_buf_simple_add_mem>
}
   12264:	4630      	mov	r0, r6
   12266:	3754      	adds	r7, #84	; 0x54
   12268:	46bd      	mov	sp, r7
   1226a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_ERR("Not enough space in buffer %zu/%zu",
   1226e:	466c      	mov	r4, sp
   12270:	b088      	sub	sp, #32
   12272:	466b      	mov	r3, sp
   12274:	f113 0210 	adds.w	r2, r3, #16
   12278:	d038      	beq.n	122ec <bt_rpmsg_evt_recv+0x1cc>
   1227a:	2110      	movs	r1, #16
   1227c:	b11a      	cbz	r2, 12286 <bt_rpmsg_evt_recv+0x166>
   1227e:	2904      	cmp	r1, #4
   12280:	dd01      	ble.n	12286 <bt_rpmsg_evt_recv+0x166>
   12282:	4d21      	ldr	r5, [pc, #132]	; (12308 <bt_rpmsg_evt_recv+0x1e8>)
   12284:	615d      	str	r5, [r3, #20]
   12286:	b11a      	cbz	r2, 12290 <bt_rpmsg_evt_recv+0x170>
   12288:	2908      	cmp	r1, #8
   1228a:	dd01      	ble.n	12290 <bt_rpmsg_evt_recv+0x170>
   1228c:	f8c3 8018 	str.w	r8, [r3, #24]
   12290:	b112      	cbz	r2, 12298 <bt_rpmsg_evt_recv+0x178>
   12292:	290c      	cmp	r1, #12
   12294:	dd00      	ble.n	12298 <bt_rpmsg_evt_recv+0x178>
   12296:	61d8      	str	r0, [r3, #28]
   12298:	290f      	cmp	r1, #15
   1229a:	dd2a      	ble.n	122f2 <bt_rpmsg_evt_recv+0x1d2>
   1229c:	2510      	movs	r5, #16
   1229e:	b13a      	cbz	r2, 122b0 <bt_rpmsg_evt_recv+0x190>
   122a0:	2104      	movs	r1, #4
   122a2:	7039      	strb	r1, [r7, #0]
   122a4:	2100      	movs	r1, #0
   122a6:	7079      	strb	r1, [r7, #1]
   122a8:	70b9      	strb	r1, [r7, #2]
   122aa:	70f9      	strb	r1, [r7, #3]
   122ac:	6838      	ldr	r0, [r7, #0]
   122ae:	6118      	str	r0, [r3, #16]
   122b0:	2100      	movs	r1, #0
   122b2:	f36f 0100 	bfc	r1, #0, #1
   122b6:	f36f 0141 	bfc	r1, #1, #1
   122ba:	f36f 0182 	bfc	r1, #2, #1
   122be:	f36f 01c5 	bfc	r1, #3, #3
   122c2:	2301      	movs	r3, #1
   122c4:	f363 1188 	bfi	r1, r3, #6, #3
   122c8:	f405 757d 	and.w	r5, r5, #1012	; 0x3f4
   122cc:	f365 2152 	bfi	r1, r5, #9, #10
   122d0:	f36f 41de 	bfc	r1, #19, #12
   122d4:	f36f 71df 	bfc	r1, #31, #1
   122d8:	2300      	movs	r3, #0
   122da:	4808      	ldr	r0, [pc, #32]	; (122fc <bt_rpmsg_evt_recv+0x1dc>)
   122dc:	f7f1 f9f6 	bl	36cc <z_impl_z_log_msg_static_create>
   122e0:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   122e2:	4630      	mov	r0, r6
   122e4:	f00a fbd2 	bl	1ca8c <net_buf_unref>
		return NULL;
   122e8:	2600      	movs	r6, #0
   122ea:	e7bb      	b.n	12264 <bt_rpmsg_evt_recv+0x144>
		BT_ERR("Not enough space in buffer %zu/%zu",
   122ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   122f0:	e7c4      	b.n	1227c <bt_rpmsg_evt_recv+0x15c>
   122f2:	f06f 051b 	mvn.w	r5, #27
   122f6:	e7d2      	b.n	1229e <bt_rpmsg_evt_recv+0x17e>
   122f8:	00023574 	.word	0x00023574
   122fc:	00020550 	.word	0x00020550
   12300:	00023550 	.word	0x00023550
   12304:	00023598 	.word	0x00023598
   12308:	000235d0 	.word	0x000235d0

0001230c <bt_rpmsg_acl_recv>:
{
   1230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12310:	b094      	sub	sp, #80	; 0x50
   12312:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   12314:	2903      	cmp	r1, #3
   12316:	d929      	bls.n	1236c <bt_rpmsg_acl_recv+0x60>
   12318:	4605      	mov	r5, r0
   1231a:	460c      	mov	r4, r1
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1231c:	2200      	movs	r2, #0
   1231e:	2300      	movs	r3, #0
   12320:	2003      	movs	r0, #3
   12322:	f7f4 fd9f 	bl	6e64 <bt_buf_get_rx>
	if (buf) {
   12326:	4606      	mov	r6, r0
   12328:	2800      	cmp	r0, #0
   1232a:	d043      	beq.n	123b4 <bt_rpmsg_acl_recv+0xa8>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1232c:	2204      	movs	r2, #4
   1232e:	4629      	mov	r1, r5
   12330:	18b8      	adds	r0, r7, r2
   12332:	f007 fe8a 	bl	1a04a <memcpy>
		data += sizeof(hdr);
   12336:	3504      	adds	r5, #4
		remaining -= sizeof(hdr);
   12338:	3c04      	subs	r4, #4
   1233a:	f106 0808 	add.w	r8, r6, #8
   1233e:	2204      	movs	r2, #4
   12340:	18b9      	adds	r1, r7, r2
   12342:	4640      	mov	r0, r8
   12344:	f00a fbf2 	bl	1cb2c <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   12348:	88fb      	ldrh	r3, [r7, #6]
   1234a:	429c      	cmp	r4, r3
   1234c:	d155      	bne.n	123fa <bt_rpmsg_acl_recv+0xee>
	return net_buf_simple_tailroom(&buf->b);
   1234e:	4640      	mov	r0, r8
   12350:	f00a fc32 	bl	1cbb8 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   12354:	4284      	cmp	r4, r0
   12356:	d878      	bhi.n	1244a <bt_rpmsg_acl_recv+0x13e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12358:	4622      	mov	r2, r4
   1235a:	4629      	mov	r1, r5
   1235c:	4640      	mov	r0, r8
   1235e:	f00a fbe5 	bl	1cb2c <net_buf_simple_add_mem>
}
   12362:	4630      	mov	r0, r6
   12364:	3750      	adds	r7, #80	; 0x50
   12366:	46bd      	mov	sp, r7
   12368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Not enough data for ACL header");
   1236c:	4b5a      	ldr	r3, [pc, #360]	; (124d8 <bt_rpmsg_acl_recv+0x1cc>)
   1236e:	64fb      	str	r3, [r7, #76]	; 0x4c
   12370:	2302      	movs	r3, #2
   12372:	703b      	strb	r3, [r7, #0]
   12374:	2600      	movs	r6, #0
   12376:	707e      	strb	r6, [r7, #1]
   12378:	70be      	strb	r6, [r7, #2]
   1237a:	70fe      	strb	r6, [r7, #3]
   1237c:	683b      	ldr	r3, [r7, #0]
   1237e:	64bb      	str	r3, [r7, #72]	; 0x48
   12380:	4631      	mov	r1, r6
   12382:	f366 0100 	bfi	r1, r6, #0, #1
   12386:	f366 0141 	bfi	r1, r6, #1, #1
   1238a:	f366 0182 	bfi	r1, r6, #2, #1
   1238e:	f366 01c5 	bfi	r1, r6, #3, #3
   12392:	2301      	movs	r3, #1
   12394:	f363 1188 	bfi	r1, r3, #6, #3
   12398:	2308      	movs	r3, #8
   1239a:	f363 2152 	bfi	r1, r3, #9, #10
   1239e:	f366 41de 	bfi	r1, r6, #19, #12
   123a2:	f366 71df 	bfi	r1, r6, #31, #1
   123a6:	4633      	mov	r3, r6
   123a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
   123ac:	484b      	ldr	r0, [pc, #300]	; (124dc <bt_rpmsg_acl_recv+0x1d0>)
   123ae:	f7f1 f98d 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
   123b2:	e7d6      	b.n	12362 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("No available ACL buffers!");
   123b4:	4b4a      	ldr	r3, [pc, #296]	; (124e0 <bt_rpmsg_acl_recv+0x1d4>)
   123b6:	61fb      	str	r3, [r7, #28]
   123b8:	2302      	movs	r3, #2
   123ba:	703b      	strb	r3, [r7, #0]
   123bc:	2300      	movs	r3, #0
   123be:	707b      	strb	r3, [r7, #1]
   123c0:	70bb      	strb	r3, [r7, #2]
   123c2:	70fb      	strb	r3, [r7, #3]
   123c4:	683a      	ldr	r2, [r7, #0]
   123c6:	61ba      	str	r2, [r7, #24]
   123c8:	4619      	mov	r1, r3
   123ca:	f363 0100 	bfi	r1, r3, #0, #1
   123ce:	f363 0141 	bfi	r1, r3, #1, #1
   123d2:	f363 0182 	bfi	r1, r3, #2, #1
   123d6:	f363 01c5 	bfi	r1, r3, #3, #3
   123da:	2201      	movs	r2, #1
   123dc:	f362 1188 	bfi	r1, r2, #6, #3
   123e0:	2208      	movs	r2, #8
   123e2:	f362 2152 	bfi	r1, r2, #9, #10
   123e6:	f363 41de 	bfi	r1, r3, #19, #12
   123ea:	f363 71df 	bfi	r1, r3, #31, #1
   123ee:	f107 0218 	add.w	r2, r7, #24
   123f2:	483a      	ldr	r0, [pc, #232]	; (124dc <bt_rpmsg_acl_recv+0x1d0>)
   123f4:	f7f1 f96a 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
   123f8:	e7b3      	b.n	12362 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("ACL payload length is not correct");
   123fa:	4b3a      	ldr	r3, [pc, #232]	; (124e4 <bt_rpmsg_acl_recv+0x1d8>)
   123fc:	637b      	str	r3, [r7, #52]	; 0x34
   123fe:	2302      	movs	r3, #2
   12400:	703b      	strb	r3, [r7, #0]
   12402:	2400      	movs	r4, #0
   12404:	707c      	strb	r4, [r7, #1]
   12406:	70bc      	strb	r4, [r7, #2]
   12408:	70fc      	strb	r4, [r7, #3]
   1240a:	683b      	ldr	r3, [r7, #0]
   1240c:	633b      	str	r3, [r7, #48]	; 0x30
   1240e:	4621      	mov	r1, r4
   12410:	f364 0100 	bfi	r1, r4, #0, #1
   12414:	f364 0141 	bfi	r1, r4, #1, #1
   12418:	f364 0182 	bfi	r1, r4, #2, #1
   1241c:	f364 01c5 	bfi	r1, r4, #3, #3
   12420:	2301      	movs	r3, #1
   12422:	f363 1188 	bfi	r1, r3, #6, #3
   12426:	2308      	movs	r3, #8
   12428:	f363 2152 	bfi	r1, r3, #9, #10
   1242c:	f364 41de 	bfi	r1, r4, #19, #12
   12430:	f364 71df 	bfi	r1, r4, #31, #1
   12434:	4623      	mov	r3, r4
   12436:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1243a:	4828      	ldr	r0, [pc, #160]	; (124dc <bt_rpmsg_acl_recv+0x1d0>)
   1243c:	f7f1 f946 	bl	36cc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   12440:	4630      	mov	r0, r6
   12442:	f00a fb23 	bl	1ca8c <net_buf_unref>
		return NULL;
   12446:	4626      	mov	r6, r4
   12448:	e78b      	b.n	12362 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("Not enough space in buffer %zu/%zu",
   1244a:	466d      	mov	r5, sp
   1244c:	b088      	sub	sp, #32
   1244e:	466b      	mov	r3, sp
   12450:	f113 0210 	adds.w	r2, r3, #16
   12454:	d039      	beq.n	124ca <bt_rpmsg_acl_recv+0x1be>
   12456:	2110      	movs	r1, #16
   12458:	b12a      	cbz	r2, 12466 <bt_rpmsg_acl_recv+0x15a>
   1245a:	2904      	cmp	r1, #4
   1245c:	dd03      	ble.n	12466 <bt_rpmsg_acl_recv+0x15a>
   1245e:	f8df c088 	ldr.w	ip, [pc, #136]	; 124e8 <bt_rpmsg_acl_recv+0x1dc>
   12462:	f8c3 c014 	str.w	ip, [r3, #20]
   12466:	b112      	cbz	r2, 1246e <bt_rpmsg_acl_recv+0x162>
   12468:	2908      	cmp	r1, #8
   1246a:	dd00      	ble.n	1246e <bt_rpmsg_acl_recv+0x162>
   1246c:	619c      	str	r4, [r3, #24]
   1246e:	b112      	cbz	r2, 12476 <bt_rpmsg_acl_recv+0x16a>
   12470:	290c      	cmp	r1, #12
   12472:	dd00      	ble.n	12476 <bt_rpmsg_acl_recv+0x16a>
   12474:	61d8      	str	r0, [r3, #28]
   12476:	290f      	cmp	r1, #15
   12478:	dd2a      	ble.n	124d0 <bt_rpmsg_acl_recv+0x1c4>
   1247a:	2410      	movs	r4, #16
   1247c:	b13a      	cbz	r2, 1248e <bt_rpmsg_acl_recv+0x182>
   1247e:	2104      	movs	r1, #4
   12480:	7039      	strb	r1, [r7, #0]
   12482:	2100      	movs	r1, #0
   12484:	7079      	strb	r1, [r7, #1]
   12486:	70b9      	strb	r1, [r7, #2]
   12488:	70f9      	strb	r1, [r7, #3]
   1248a:	6838      	ldr	r0, [r7, #0]
   1248c:	6118      	str	r0, [r3, #16]
   1248e:	2100      	movs	r1, #0
   12490:	f36f 0100 	bfc	r1, #0, #1
   12494:	f36f 0141 	bfc	r1, #1, #1
   12498:	f36f 0182 	bfc	r1, #2, #1
   1249c:	f36f 01c5 	bfc	r1, #3, #3
   124a0:	2301      	movs	r3, #1
   124a2:	f363 1188 	bfi	r1, r3, #6, #3
   124a6:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   124aa:	f363 2152 	bfi	r1, r3, #9, #10
   124ae:	f36f 41de 	bfc	r1, #19, #12
   124b2:	f36f 71df 	bfc	r1, #31, #1
   124b6:	2300      	movs	r3, #0
   124b8:	4808      	ldr	r0, [pc, #32]	; (124dc <bt_rpmsg_acl_recv+0x1d0>)
   124ba:	f7f1 f907 	bl	36cc <z_impl_z_log_msg_static_create>
   124be:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   124c0:	4630      	mov	r0, r6
   124c2:	f00a fae3 	bl	1ca8c <net_buf_unref>
		return NULL;
   124c6:	2600      	movs	r6, #0
   124c8:	e74b      	b.n	12362 <bt_rpmsg_acl_recv+0x56>
		BT_ERR("Not enough space in buffer %zu/%zu",
   124ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   124ce:	e7c3      	b.n	12458 <bt_rpmsg_acl_recv+0x14c>
   124d0:	f06f 041b 	mvn.w	r4, #27
   124d4:	e7d2      	b.n	1247c <bt_rpmsg_acl_recv+0x170>
   124d6:	bf00      	nop
   124d8:	000235f4 	.word	0x000235f4
   124dc:	00020550 	.word	0x00020550
   124e0:	00023614 	.word	0x00023614
   124e4:	00023630 	.word	0x00023630
   124e8:	000235d0 	.word	0x000235d0

000124ec <bt_rpmsg_iso_recv>:
{
   124ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   124f0:	b094      	sub	sp, #80	; 0x50
   124f2:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   124f4:	2903      	cmp	r1, #3
   124f6:	d92b      	bls.n	12550 <bt_rpmsg_iso_recv+0x64>
   124f8:	4605      	mov	r5, r0
   124fa:	460c      	mov	r4, r1
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   124fc:	2200      	movs	r2, #0
   124fe:	2300      	movs	r3, #0
   12500:	2005      	movs	r0, #5
   12502:	f7f4 fcaf 	bl	6e64 <bt_buf_get_rx>
	if (buf) {
   12506:	4606      	mov	r6, r0
   12508:	2800      	cmp	r0, #0
   1250a:	d045      	beq.n	12598 <bt_rpmsg_iso_recv+0xac>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1250c:	2204      	movs	r2, #4
   1250e:	4629      	mov	r1, r5
   12510:	18b8      	adds	r0, r7, r2
   12512:	f007 fd9a 	bl	1a04a <memcpy>
		data += sizeof(hdr);
   12516:	3504      	adds	r5, #4
		remaining -= sizeof(hdr);
   12518:	3c04      	subs	r4, #4
   1251a:	f106 0808 	add.w	r8, r6, #8
   1251e:	2204      	movs	r2, #4
   12520:	18b9      	adds	r1, r7, r2
   12522:	4640      	mov	r0, r8
   12524:	f00a fb02 	bl	1cb2c <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   12528:	88fb      	ldrh	r3, [r7, #6]
   1252a:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1252e:	429c      	cmp	r4, r3
   12530:	d155      	bne.n	125de <bt_rpmsg_iso_recv+0xf2>
	return net_buf_simple_tailroom(&buf->b);
   12532:	4640      	mov	r0, r8
   12534:	f00a fb40 	bl	1cbb8 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   12538:	4284      	cmp	r4, r0
   1253a:	d878      	bhi.n	1262e <bt_rpmsg_iso_recv+0x142>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1253c:	4622      	mov	r2, r4
   1253e:	4629      	mov	r1, r5
   12540:	4640      	mov	r0, r8
   12542:	f00a faf3 	bl	1cb2c <net_buf_simple_add_mem>
}
   12546:	4630      	mov	r0, r6
   12548:	3750      	adds	r7, #80	; 0x50
   1254a:	46bd      	mov	sp, r7
   1254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("Not enough data for ISO header");
   12550:	4b5a      	ldr	r3, [pc, #360]	; (126bc <bt_rpmsg_iso_recv+0x1d0>)
   12552:	64fb      	str	r3, [r7, #76]	; 0x4c
   12554:	2302      	movs	r3, #2
   12556:	703b      	strb	r3, [r7, #0]
   12558:	2600      	movs	r6, #0
   1255a:	707e      	strb	r6, [r7, #1]
   1255c:	70be      	strb	r6, [r7, #2]
   1255e:	70fe      	strb	r6, [r7, #3]
   12560:	683b      	ldr	r3, [r7, #0]
   12562:	64bb      	str	r3, [r7, #72]	; 0x48
   12564:	4631      	mov	r1, r6
   12566:	f366 0100 	bfi	r1, r6, #0, #1
   1256a:	f366 0141 	bfi	r1, r6, #1, #1
   1256e:	f366 0182 	bfi	r1, r6, #2, #1
   12572:	f366 01c5 	bfi	r1, r6, #3, #3
   12576:	2301      	movs	r3, #1
   12578:	f363 1188 	bfi	r1, r3, #6, #3
   1257c:	2308      	movs	r3, #8
   1257e:	f363 2152 	bfi	r1, r3, #9, #10
   12582:	f366 41de 	bfi	r1, r6, #19, #12
   12586:	f366 71df 	bfi	r1, r6, #31, #1
   1258a:	4633      	mov	r3, r6
   1258c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12590:	484b      	ldr	r0, [pc, #300]	; (126c0 <bt_rpmsg_iso_recv+0x1d4>)
   12592:	f7f1 f89b 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
   12596:	e7d6      	b.n	12546 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("No available ISO buffers!");
   12598:	4b4a      	ldr	r3, [pc, #296]	; (126c4 <bt_rpmsg_iso_recv+0x1d8>)
   1259a:	61fb      	str	r3, [r7, #28]
   1259c:	2302      	movs	r3, #2
   1259e:	703b      	strb	r3, [r7, #0]
   125a0:	2300      	movs	r3, #0
   125a2:	707b      	strb	r3, [r7, #1]
   125a4:	70bb      	strb	r3, [r7, #2]
   125a6:	70fb      	strb	r3, [r7, #3]
   125a8:	683a      	ldr	r2, [r7, #0]
   125aa:	61ba      	str	r2, [r7, #24]
   125ac:	4619      	mov	r1, r3
   125ae:	f363 0100 	bfi	r1, r3, #0, #1
   125b2:	f363 0141 	bfi	r1, r3, #1, #1
   125b6:	f363 0182 	bfi	r1, r3, #2, #1
   125ba:	f363 01c5 	bfi	r1, r3, #3, #3
   125be:	2201      	movs	r2, #1
   125c0:	f362 1188 	bfi	r1, r2, #6, #3
   125c4:	2208      	movs	r2, #8
   125c6:	f362 2152 	bfi	r1, r2, #9, #10
   125ca:	f363 41de 	bfi	r1, r3, #19, #12
   125ce:	f363 71df 	bfi	r1, r3, #31, #1
   125d2:	f107 0218 	add.w	r2, r7, #24
   125d6:	483a      	ldr	r0, [pc, #232]	; (126c0 <bt_rpmsg_iso_recv+0x1d4>)
   125d8:	f7f1 f878 	bl	36cc <z_impl_z_log_msg_static_create>
		return NULL;
   125dc:	e7b3      	b.n	12546 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("ISO payload length is not correct");
   125de:	4b3a      	ldr	r3, [pc, #232]	; (126c8 <bt_rpmsg_iso_recv+0x1dc>)
   125e0:	637b      	str	r3, [r7, #52]	; 0x34
   125e2:	2302      	movs	r3, #2
   125e4:	703b      	strb	r3, [r7, #0]
   125e6:	2400      	movs	r4, #0
   125e8:	707c      	strb	r4, [r7, #1]
   125ea:	70bc      	strb	r4, [r7, #2]
   125ec:	70fc      	strb	r4, [r7, #3]
   125ee:	683b      	ldr	r3, [r7, #0]
   125f0:	633b      	str	r3, [r7, #48]	; 0x30
   125f2:	4621      	mov	r1, r4
   125f4:	f364 0100 	bfi	r1, r4, #0, #1
   125f8:	f364 0141 	bfi	r1, r4, #1, #1
   125fc:	f364 0182 	bfi	r1, r4, #2, #1
   12600:	f364 01c5 	bfi	r1, r4, #3, #3
   12604:	2301      	movs	r3, #1
   12606:	f363 1188 	bfi	r1, r3, #6, #3
   1260a:	2308      	movs	r3, #8
   1260c:	f363 2152 	bfi	r1, r3, #9, #10
   12610:	f364 41de 	bfi	r1, r4, #19, #12
   12614:	f364 71df 	bfi	r1, r4, #31, #1
   12618:	4623      	mov	r3, r4
   1261a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1261e:	4828      	ldr	r0, [pc, #160]	; (126c0 <bt_rpmsg_iso_recv+0x1d4>)
   12620:	f7f1 f854 	bl	36cc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   12624:	4630      	mov	r0, r6
   12626:	f00a fa31 	bl	1ca8c <net_buf_unref>
		return NULL;
   1262a:	4626      	mov	r6, r4
   1262c:	e78b      	b.n	12546 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   1262e:	466d      	mov	r5, sp
   12630:	b088      	sub	sp, #32
   12632:	466b      	mov	r3, sp
   12634:	f113 0210 	adds.w	r2, r3, #16
   12638:	d039      	beq.n	126ae <bt_rpmsg_iso_recv+0x1c2>
   1263a:	2110      	movs	r1, #16
   1263c:	b12a      	cbz	r2, 1264a <bt_rpmsg_iso_recv+0x15e>
   1263e:	2904      	cmp	r1, #4
   12640:	dd03      	ble.n	1264a <bt_rpmsg_iso_recv+0x15e>
   12642:	f8df c088 	ldr.w	ip, [pc, #136]	; 126cc <bt_rpmsg_iso_recv+0x1e0>
   12646:	f8c3 c014 	str.w	ip, [r3, #20]
   1264a:	b112      	cbz	r2, 12652 <bt_rpmsg_iso_recv+0x166>
   1264c:	2908      	cmp	r1, #8
   1264e:	dd00      	ble.n	12652 <bt_rpmsg_iso_recv+0x166>
   12650:	619c      	str	r4, [r3, #24]
   12652:	b112      	cbz	r2, 1265a <bt_rpmsg_iso_recv+0x16e>
   12654:	290c      	cmp	r1, #12
   12656:	dd00      	ble.n	1265a <bt_rpmsg_iso_recv+0x16e>
   12658:	61d8      	str	r0, [r3, #28]
   1265a:	290f      	cmp	r1, #15
   1265c:	dd2a      	ble.n	126b4 <bt_rpmsg_iso_recv+0x1c8>
   1265e:	2410      	movs	r4, #16
   12660:	b13a      	cbz	r2, 12672 <bt_rpmsg_iso_recv+0x186>
   12662:	2104      	movs	r1, #4
   12664:	7039      	strb	r1, [r7, #0]
   12666:	2100      	movs	r1, #0
   12668:	7079      	strb	r1, [r7, #1]
   1266a:	70b9      	strb	r1, [r7, #2]
   1266c:	70f9      	strb	r1, [r7, #3]
   1266e:	6838      	ldr	r0, [r7, #0]
   12670:	6118      	str	r0, [r3, #16]
   12672:	2100      	movs	r1, #0
   12674:	f36f 0100 	bfc	r1, #0, #1
   12678:	f36f 0141 	bfc	r1, #1, #1
   1267c:	f36f 0182 	bfc	r1, #2, #1
   12680:	f36f 01c5 	bfc	r1, #3, #3
   12684:	2301      	movs	r3, #1
   12686:	f363 1188 	bfi	r1, r3, #6, #3
   1268a:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   1268e:	f363 2152 	bfi	r1, r3, #9, #10
   12692:	f36f 41de 	bfc	r1, #19, #12
   12696:	f36f 71df 	bfc	r1, #31, #1
   1269a:	2300      	movs	r3, #0
   1269c:	4808      	ldr	r0, [pc, #32]	; (126c0 <bt_rpmsg_iso_recv+0x1d4>)
   1269e:	f7f1 f815 	bl	36cc <z_impl_z_log_msg_static_create>
   126a2:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   126a4:	4630      	mov	r0, r6
   126a6:	f00a f9f1 	bl	1ca8c <net_buf_unref>
		return NULL;
   126aa:	2600      	movs	r6, #0
   126ac:	e74b      	b.n	12546 <bt_rpmsg_iso_recv+0x5a>
		BT_ERR("Not enough space in buffer %zu/%zu",
   126ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   126b2:	e7c3      	b.n	1263c <bt_rpmsg_iso_recv+0x150>
   126b4:	f06f 041b 	mvn.w	r4, #27
   126b8:	e7d2      	b.n	12660 <bt_rpmsg_iso_recv+0x174>
   126ba:	bf00      	nop
   126bc:	00023654 	.word	0x00023654
   126c0:	00020550 	.word	0x00020550
   126c4:	00023674 	.word	0x00023674
   126c8:	00023690 	.word	0x00023690
   126cc:	000235d0 	.word	0x000235d0

000126d0 <bt_rpmsg_rx>:
{
   126d0:	b5b0      	push	{r4, r5, r7, lr}
   126d2:	b082      	sub	sp, #8
   126d4:	af00      	add	r7, sp, #0
	pkt_indicator = *data++;
   126d6:	f810 3b01 	ldrb.w	r3, [r0], #1
	remaining -= sizeof(pkt_indicator);
   126da:	3901      	subs	r1, #1
	switch (pkt_indicator) {
   126dc:	2b04      	cmp	r3, #4
   126de:	d039      	beq.n	12754 <bt_rpmsg_rx+0x84>
   126e0:	2b05      	cmp	r3, #5
   126e2:	d042      	beq.n	1276a <bt_rpmsg_rx+0x9a>
   126e4:	2b02      	cmp	r3, #2
   126e6:	d03d      	beq.n	12764 <bt_rpmsg_rx+0x94>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   126e8:	466c      	mov	r4, sp
   126ea:	b088      	sub	sp, #32
   126ec:	4669      	mov	r1, sp
   126ee:	f111 0210 	adds.w	r2, r1, #16
   126f2:	d03d      	beq.n	12770 <bt_rpmsg_rx+0xa0>
   126f4:	200c      	movs	r0, #12
   126f6:	b11a      	cbz	r2, 12700 <bt_rpmsg_rx+0x30>
   126f8:	2804      	cmp	r0, #4
   126fa:	dd01      	ble.n	12700 <bt_rpmsg_rx+0x30>
   126fc:	4d1f      	ldr	r5, [pc, #124]	; (1277c <bt_rpmsg_rx+0xac>)
   126fe:	614d      	str	r5, [r1, #20]
   12700:	b112      	cbz	r2, 12708 <bt_rpmsg_rx+0x38>
   12702:	2808      	cmp	r0, #8
   12704:	dd00      	ble.n	12708 <bt_rpmsg_rx+0x38>
   12706:	618b      	str	r3, [r1, #24]
   12708:	280b      	cmp	r0, #11
   1270a:	dd34      	ble.n	12776 <bt_rpmsg_rx+0xa6>
   1270c:	230c      	movs	r3, #12
   1270e:	b13a      	cbz	r2, 12720 <bt_rpmsg_rx+0x50>
   12710:	2003      	movs	r0, #3
   12712:	7138      	strb	r0, [r7, #4]
   12714:	2000      	movs	r0, #0
   12716:	7178      	strb	r0, [r7, #5]
   12718:	71b8      	strb	r0, [r7, #6]
   1271a:	71f8      	strb	r0, [r7, #7]
   1271c:	6878      	ldr	r0, [r7, #4]
   1271e:	6108      	str	r0, [r1, #16]
   12720:	2100      	movs	r1, #0
   12722:	f36f 0100 	bfc	r1, #0, #1
   12726:	f36f 0141 	bfc	r1, #1, #1
   1272a:	f36f 0182 	bfc	r1, #2, #1
   1272e:	f36f 01c5 	bfc	r1, #3, #3
   12732:	2001      	movs	r0, #1
   12734:	f360 1188 	bfi	r1, r0, #6, #3
   12738:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1273c:	f363 2152 	bfi	r1, r3, #9, #10
   12740:	f36f 41de 	bfc	r1, #19, #12
   12744:	f36f 71df 	bfc	r1, #31, #1
   12748:	2300      	movs	r3, #0
   1274a:	480d      	ldr	r0, [pc, #52]	; (12780 <bt_rpmsg_rx+0xb0>)
   1274c:	f7f0 ffbe 	bl	36cc <z_impl_z_log_msg_static_create>
   12750:	46a5      	mov	sp, r4
   12752:	e004      	b.n	1275e <bt_rpmsg_rx+0x8e>
		buf = bt_rpmsg_evt_recv(data, remaining);
   12754:	f7ff fce4 	bl	12120 <bt_rpmsg_evt_recv>
	if (buf) {
   12758:	b108      	cbz	r0, 1275e <bt_rpmsg_rx+0x8e>
		bt_recv(buf);
   1275a:	f7f7 fa4b 	bl	9bf4 <bt_recv>
}
   1275e:	3708      	adds	r7, #8
   12760:	46bd      	mov	sp, r7
   12762:	bdb0      	pop	{r4, r5, r7, pc}
		buf = bt_rpmsg_acl_recv(data, remaining);
   12764:	f7ff fdd2 	bl	1230c <bt_rpmsg_acl_recv>
		break;
   12768:	e7f6      	b.n	12758 <bt_rpmsg_rx+0x88>
		buf = bt_rpmsg_iso_recv(data, remaining);
   1276a:	f7ff febf 	bl	124ec <bt_rpmsg_iso_recv>
		break;
   1276e:	e7f3      	b.n	12758 <bt_rpmsg_rx+0x88>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   12770:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12774:	e7bf      	b.n	126f6 <bt_rpmsg_rx+0x26>
   12776:	f06f 031b 	mvn.w	r3, #27
   1277a:	e7c8      	b.n	1270e <bt_rpmsg_rx+0x3e>
   1277c:	000236b4 	.word	0x000236b4
   12780:	00020550 	.word	0x00020550

00012784 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12784:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   12788:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1278c:	4b01      	ldr	r3, [pc, #4]	; (12794 <set_comparator+0x10>)
   1278e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   12792:	4770      	bx	lr
   12794:	50015000 	.word	0x50015000

00012798 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   12798:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1279c:	4b01      	ldr	r3, [pc, #4]	; (127a4 <get_comparator+0xc>)
   1279e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   127a2:	4770      	bx	lr
   127a4:	50015000 	.word	0x50015000

000127a8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   127a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   127ac:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   127ae:	4a02      	ldr	r2, [pc, #8]	; (127b8 <event_enable+0x10>)
   127b0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   127b4:	4770      	bx	lr
   127b6:	bf00      	nop
   127b8:	50015000 	.word	0x50015000

000127bc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   127bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   127c0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   127c2:	4a02      	ldr	r2, [pc, #8]	; (127cc <event_disable+0x10>)
   127c4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   127c8:	4770      	bx	lr
   127ca:	bf00      	nop
   127cc:	50015000 	.word	0x50015000

000127d0 <counter>:
     return p_reg->COUNTER;
   127d0:	4b01      	ldr	r3, [pc, #4]	; (127d8 <counter+0x8>)
   127d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   127d6:	4770      	bx	lr
   127d8:	50015000 	.word	0x50015000

000127dc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   127dc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   127de:	2301      	movs	r3, #1
   127e0:	4083      	lsls	r3, r0
   127e2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   127e6:	4a0d      	ldr	r2, [pc, #52]	; (1281c <compare_int_lock+0x40>)
   127e8:	e8d2 1fef 	ldaex	r1, [r2]
   127ec:	ea01 0e0c 	and.w	lr, r1, ip
   127f0:	e8c2 efe4 	stlex	r4, lr, [r2]
   127f4:	2c00      	cmp	r4, #0
   127f6:	d1f7      	bne.n	127e8 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   127f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   127fc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   12800:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
   12804:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   12808:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1280c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   12810:	420b      	tst	r3, r1
}
   12812:	bf14      	ite	ne
   12814:	2001      	movne	r0, #1
   12816:	2000      	moveq	r0, #0
   12818:	bd10      	pop	{r4, pc}
   1281a:	bf00      	nop
   1281c:	2000237c 	.word	0x2000237c

00012820 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   12820:	b570      	push	{r4, r5, r6, lr}
   12822:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   12824:	f00b fbba 	bl	1df9c <full_int_lock>
   12828:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1282a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1282e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   12830:	4a15      	ldr	r2, [pc, #84]	; (12888 <channel_processing_check_and_clear+0x68>)
   12832:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   12836:	4213      	tst	r3, r2
   12838:	d105      	bne.n	12846 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1283a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1283c:	4628      	mov	r0, r5
   1283e:	f00b fbb6 	bl	1dfae <full_int_unlock>

	return result;
}
   12842:	4630      	mov	r0, r6
   12844:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   12846:	2301      	movs	r3, #1
   12848:	40a3      	lsls	r3, r4
   1284a:	43db      	mvns	r3, r3
   1284c:	4a0f      	ldr	r2, [pc, #60]	; (1288c <channel_processing_check_and_clear+0x6c>)
   1284e:	e8d2 1fef 	ldaex	r1, [r2]
   12852:	ea01 0003 	and.w	r0, r1, r3
   12856:	e8c2 0fe6 	stlex	r6, r0, [r2]
   1285a:	2e00      	cmp	r6, #0
   1285c:	d1f7      	bne.n	1284e <channel_processing_check_and_clear+0x2e>
   1285e:	b959      	cbnz	r1, 12878 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   12860:	f104 0350 	add.w	r3, r4, #80	; 0x50
   12864:	009b      	lsls	r3, r3, #2
   12866:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12868:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   1286c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   12870:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   12872:	b113      	cbz	r3, 1287a <channel_processing_check_and_clear+0x5a>
   12874:	2301      	movs	r3, #1
   12876:	e000      	b.n	1287a <channel_processing_check_and_clear+0x5a>
   12878:	2301      	movs	r3, #1
		if (result) {
   1287a:	461e      	mov	r6, r3
   1287c:	2b00      	cmp	r3, #0
   1287e:	d0dd      	beq.n	1283c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   12880:	4620      	mov	r0, r4
   12882:	f00b fb7c 	bl	1df7e <event_clear>
   12886:	e7d9      	b.n	1283c <channel_processing_check_and_clear+0x1c>
   12888:	50015000 	.word	0x50015000
   1288c:	20002378 	.word	0x20002378

00012890 <compare_int_unlock>:
	if (key) {
   12890:	b901      	cbnz	r1, 12894 <compare_int_unlock+0x4>
}
   12892:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   12894:	2301      	movs	r3, #1
   12896:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12898:	4a0e      	ldr	r2, [pc, #56]	; (128d4 <compare_int_unlock+0x44>)
   1289a:	e8d2 1fef 	ldaex	r1, [r2]
   1289e:	4319      	orrs	r1, r3
   128a0:	e8c2 1fec 	stlex	ip, r1, [r2]
   128a4:	f1bc 0f00 	cmp.w	ip, #0
   128a8:	d1f7      	bne.n	1289a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   128aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   128ae:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   128b0:	4a09      	ldr	r2, [pc, #36]	; (128d8 <compare_int_unlock+0x48>)
   128b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   128b6:	4b09      	ldr	r3, [pc, #36]	; (128dc <compare_int_unlock+0x4c>)
   128b8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   128bc:	fa23 f000 	lsr.w	r0, r3, r0
   128c0:	f010 0f01 	tst.w	r0, #1
   128c4:	d0e5      	beq.n	12892 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   128c6:	4b06      	ldr	r3, [pc, #24]	; (128e0 <compare_int_unlock+0x50>)
   128c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   128cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   128d0:	e7df      	b.n	12892 <compare_int_unlock+0x2>
   128d2:	bf00      	nop
   128d4:	2000237c 	.word	0x2000237c
   128d8:	50015000 	.word	0x50015000
   128dc:	20002378 	.word	0x20002378
   128e0:	e000e100 	.word	0xe000e100

000128e4 <sys_clock_timeout_handler>:
{
   128e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   128e8:	4607      	mov	r7, r0
   128ea:	4614      	mov	r4, r2
   128ec:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   128ee:	4610      	mov	r0, r2
   128f0:	4619      	mov	r1, r3
   128f2:	f00b fb50 	bl	1df96 <absolute_time_to_cc>
   128f6:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   128f8:	4b15      	ldr	r3, [pc, #84]	; (12950 <sys_clock_timeout_handler+0x6c>)
   128fa:	681a      	ldr	r2, [r3, #0]
   128fc:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   128fe:	601c      	str	r4, [r3, #0]
   12900:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   12902:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   12906:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1290a:	d309      	bcc.n	12920 <sys_clock_timeout_handler+0x3c>
	return false;
   1290c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1290e:	f004 fc85 	bl	1721c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   12912:	4638      	mov	r0, r7
   12914:	f7ff ff40 	bl	12798 <get_comparator>
   12918:	42a8      	cmp	r0, r5
   1291a:	d00e      	beq.n	1293a <sys_clock_timeout_handler+0x56>
}
   1291c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   12920:	4b0c      	ldr	r3, [pc, #48]	; (12954 <sys_clock_timeout_handler+0x70>)
   12922:	681b      	ldr	r3, [r3, #0]
   12924:	0a1a      	lsrs	r2, r3, #8
   12926:	061b      	lsls	r3, r3, #24
   12928:	eb15 0803 	adds.w	r8, r5, r3
   1292c:	f142 0900 	adc.w	r9, r2, #0
   12930:	4b09      	ldr	r3, [pc, #36]	; (12958 <sys_clock_timeout_handler+0x74>)
   12932:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   12936:	2401      	movs	r4, #1
   12938:	e7e9      	b.n	1290e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   1293a:	b11c      	cbz	r4, 12944 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   1293c:	4638      	mov	r0, r7
   1293e:	f7ff ff33 	bl	127a8 <event_enable>
}
   12942:	e7eb      	b.n	1291c <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   12944:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   12948:	4638      	mov	r0, r7
   1294a:	f7ff ff1b 	bl	12784 <set_comparator>
   1294e:	e7f5      	b.n	1293c <sys_clock_timeout_handler+0x58>
   12950:	20001658 	.word	0x20001658
   12954:	20002380 	.word	0x20002380
   12958:	20001630 	.word	0x20001630

0001295c <z_nrf_rtc_timer_compare_evt_address_get>:
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1295c:	b2c3      	uxtb	r3, r0
   1295e:	009b      	lsls	r3, r3, #2
}
   12960:	4801      	ldr	r0, [pc, #4]	; (12968 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   12962:	4418      	add	r0, r3
   12964:	4770      	bx	lr
   12966:	bf00      	nop
   12968:	50015140 	.word	0x50015140

0001296c <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   1296c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12970:	4b01      	ldr	r3, [pc, #4]	; (12978 <z_nrf_rtc_timer_compare_read+0xc>)
   12972:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   12976:	4770      	bx	lr
   12978:	50015000 	.word	0x50015000

0001297c <z_nrf_rtc_timer_read>:
{
   1297c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1297e:	4b0d      	ldr	r3, [pc, #52]	; (129b4 <z_nrf_rtc_timer_read+0x38>)
   12980:	681c      	ldr	r4, [r3, #0]
   12982:	0a25      	lsrs	r5, r4, #8
   12984:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   12986:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1298a:	f7ff ff21 	bl	127d0 <counter>
   1298e:	4603      	mov	r3, r0
	val += cntr;
   12990:	1900      	adds	r0, r0, r4
   12992:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   12996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1299a:	d20a      	bcs.n	129b2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1299c:	4b06      	ldr	r3, [pc, #24]	; (129b8 <z_nrf_rtc_timer_read+0x3c>)
   1299e:	e9d3 2300 	ldrd	r2, r3, [r3]
   129a2:	4290      	cmp	r0, r2
   129a4:	eb71 0303 	sbcs.w	r3, r1, r3
   129a8:	d203      	bcs.n	129b2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   129aa:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   129ae:	f141 0100 	adc.w	r1, r1, #0
}
   129b2:	bd38      	pop	{r3, r4, r5, pc}
   129b4:	20002380 	.word	0x20002380
   129b8:	20001630 	.word	0x20001630

000129bc <compare_set_nolocks>:
{
   129bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129be:	4606      	mov	r6, r0
   129c0:	4614      	mov	r4, r2
   129c2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   129c4:	4610      	mov	r0, r2
   129c6:	4619      	mov	r1, r3
   129c8:	f00b fae5 	bl	1df96 <absolute_time_to_cc>
   129cc:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   129ce:	f7ff ffd5 	bl	1297c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   129d2:	42a0      	cmp	r0, r4
   129d4:	eb71 0305 	sbcs.w	r3, r1, r5
   129d8:	d21d      	bcs.n	12a16 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   129da:	1a23      	subs	r3, r4, r0
   129dc:	eb65 0101 	sbc.w	r1, r5, r1
   129e0:	4a19      	ldr	r2, [pc, #100]	; (12a48 <compare_set_nolocks+0x8c>)
   129e2:	4293      	cmp	r3, r2
   129e4:	f171 0300 	sbcs.w	r3, r1, #0
   129e8:	d22b      	bcs.n	12a42 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
   129ea:	4b18      	ldr	r3, [pc, #96]	; (12a4c <compare_set_nolocks+0x90>)
   129ec:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   129f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   129f4:	42ab      	cmp	r3, r5
   129f6:	bf08      	it	eq
   129f8:	42a2      	cmpeq	r2, r4
   129fa:	d016      	beq.n	12a2a <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   129fc:	4639      	mov	r1, r7
   129fe:	4630      	mov	r0, r6
   12a00:	f00b fada 	bl	1dfb8 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   12a04:	4639      	mov	r1, r7
   12a06:	f00b fab6 	bl	1df76 <counter_sub>
   12a0a:	1900      	adds	r0, r0, r4
   12a0c:	f145 0300 	adc.w	r3, r5, #0
   12a10:	4604      	mov	r4, r0
   12a12:	461d      	mov	r5, r3
   12a14:	e009      	b.n	12a2a <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
   12a16:	2301      	movs	r3, #1
   12a18:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12a1a:	4a0d      	ldr	r2, [pc, #52]	; (12a50 <compare_set_nolocks+0x94>)
   12a1c:	e8d2 1fef 	ldaex	r1, [r2]
   12a20:	4319      	orrs	r1, r3
   12a22:	e8c2 1fe0 	stlex	r0, r1, [r2]
   12a26:	2800      	cmp	r0, #0
   12a28:	d1f8      	bne.n	12a1c <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
   12a2a:	4b08      	ldr	r3, [pc, #32]	; (12a4c <compare_set_nolocks+0x90>)
   12a2c:	0132      	lsls	r2, r6, #4
   12a2e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   12a32:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   12a36:	9906      	ldr	r1, [sp, #24]
   12a38:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   12a3a:	9b07      	ldr	r3, [sp, #28]
   12a3c:	6073      	str	r3, [r6, #4]
	return ret;
   12a3e:	2000      	movs	r0, #0
}
   12a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   12a42:	f06f 0015 	mvn.w	r0, #21
   12a46:	e7fb      	b.n	12a40 <compare_set_nolocks+0x84>
   12a48:	01000001 	.word	0x01000001
   12a4c:	20001638 	.word	0x20001638
   12a50:	20002378 	.word	0x20002378

00012a54 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   12a54:	b530      	push	{r4, r5, lr}
   12a56:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   12a58:	2300      	movs	r3, #0
   12a5a:	4a1f      	ldr	r2, [pc, #124]	; (12ad8 <sys_clock_driver_init+0x84>)
   12a5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12a60:	e00f      	b.n	12a82 <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   12a62:	4a1e      	ldr	r2, [pc, #120]	; (12adc <sys_clock_driver_init+0x88>)
   12a64:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   12a68:	f04f 30ff 	mov.w	r0, #4294967295
   12a6c:	f04f 31ff 	mov.w	r1, #4294967295
   12a70:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12a78:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   12a7a:	4917      	ldr	r1, [pc, #92]	; (12ad8 <sys_clock_driver_init+0x84>)
   12a7c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12a80:	3301      	adds	r3, #1
   12a82:	2b01      	cmp	r3, #1
   12a84:	dded      	ble.n	12a62 <sys_clock_driver_init+0xe>
   12a86:	4c14      	ldr	r4, [pc, #80]	; (12ad8 <sys_clock_driver_init+0x84>)
   12a88:	2502      	movs	r5, #2
   12a8a:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12a8e:	4b14      	ldr	r3, [pc, #80]	; (12ae0 <sys_clock_driver_init+0x8c>)
   12a90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   12a94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12a98:	2200      	movs	r2, #0
   12a9a:	2101      	movs	r1, #1
   12a9c:	2015      	movs	r0, #21
   12a9e:	f7f2 fdc7 	bl	5630 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12aa2:	2015      	movs	r0, #21
   12aa4:	f7f2 fd94 	bl	55d0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12aa8:	2301      	movs	r3, #1
   12aaa:	60a3      	str	r3, [r4, #8]
   12aac:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12aae:	4b0d      	ldr	r3, [pc, #52]	; (12ae4 <sys_clock_driver_init+0x90>)
   12ab0:	2203      	movs	r2, #3
   12ab2:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   12ab4:	4b0c      	ldr	r3, [pc, #48]	; (12ae8 <sys_clock_driver_init+0x94>)
   12ab6:	601d      	str	r5, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   12ab8:	2400      	movs	r4, #0
   12aba:	9401      	str	r4, [sp, #4]
   12abc:	4b0b      	ldr	r3, [pc, #44]	; (12aec <sys_clock_driver_init+0x98>)
   12abe:	9300      	str	r3, [sp, #0]
   12ac0:	4a0b      	ldr	r2, [pc, #44]	; (12af0 <sys_clock_driver_init+0x9c>)
   12ac2:	2300      	movs	r3, #0
   12ac4:	4620      	mov	r0, r4
   12ac6:	f00b fabd 	bl	1e044 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   12aca:	4628      	mov	r0, r5
   12acc:	f7fc fdde 	bl	f68c <z_nrf_clock_control_lf_on>

	return 0;
}
   12ad0:	4620      	mov	r0, r4
   12ad2:	b003      	add	sp, #12
   12ad4:	bd30      	pop	{r4, r5, pc}
   12ad6:	bf00      	nop
   12ad8:	50015000 	.word	0x50015000
   12adc:	20001638 	.word	0x20001638
   12ae0:	e000e100 	.word	0xe000e100
   12ae4:	2000237c 	.word	0x2000237c
   12ae8:	20002374 	.word	0x20002374
   12aec:	000128e5 	.word	0x000128e5
   12af0:	007fffff 	.word	0x007fffff

00012af4 <process_channel>:
{
   12af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12af8:	b082      	sub	sp, #8
   12afa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   12afc:	f7ff fe90 	bl	12820 <channel_processing_check_and_clear>
   12b00:	b910      	cbnz	r0, 12b08 <process_channel+0x14>
}
   12b02:	b002      	add	sp, #8
   12b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   12b08:	f7ff ff38 	bl	1297c <z_nrf_rtc_timer_read>
   12b0c:	4682      	mov	sl, r0
   12b0e:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
   12b10:	f00b fa44 	bl	1df9c <full_int_lock>
   12b14:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
   12b16:	4b13      	ldr	r3, [pc, #76]	; (12b64 <process_channel+0x70>)
   12b18:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   12b1c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   12b20:	45c2      	cmp	sl, r8
   12b22:	eb76 0309 	sbcs.w	r3, r6, r9
   12b26:	d20b      	bcs.n	12b40 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   12b28:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   12b2a:	4628      	mov	r0, r5
   12b2c:	f00b fa3f 	bl	1dfae <full_int_unlock>
		if (handler) {
   12b30:	2e00      	cmp	r6, #0
   12b32:	d0e6      	beq.n	12b02 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   12b34:	9700      	str	r7, [sp, #0]
   12b36:	4642      	mov	r2, r8
   12b38:	464b      	mov	r3, r9
   12b3a:	4620      	mov	r0, r4
   12b3c:	47b0      	blx	r6
}
   12b3e:	e7e0      	b.n	12b02 <process_channel+0xe>
			handler = cc_data[chan].callback;
   12b40:	4a08      	ldr	r2, [pc, #32]	; (12b64 <process_channel+0x70>)
   12b42:	0123      	lsls	r3, r4, #4
   12b44:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   12b48:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   12b4a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   12b4c:	2000      	movs	r0, #0
   12b4e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   12b50:	f04f 32ff 	mov.w	r2, #4294967295
   12b54:	f04f 33ff 	mov.w	r3, #4294967295
   12b58:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   12b5c:	4620      	mov	r0, r4
   12b5e:	f7ff fe2d 	bl	127bc <event_disable>
   12b62:	e7e2      	b.n	12b2a <process_channel+0x36>
   12b64:	20001638 	.word	0x20001638

00012b68 <rtc_nrf_isr>:
{
   12b68:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   12b6a:	4b0e      	ldr	r3, [pc, #56]	; (12ba4 <rtc_nrf_isr+0x3c>)
   12b6c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   12b70:	f013 0f02 	tst.w	r3, #2
   12b74:	d00d      	beq.n	12b92 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b76:	4b0b      	ldr	r3, [pc, #44]	; (12ba4 <rtc_nrf_isr+0x3c>)
   12b78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   12b7c:	b14b      	cbz	r3, 12b92 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12b7e:	4b09      	ldr	r3, [pc, #36]	; (12ba4 <rtc_nrf_isr+0x3c>)
   12b80:	2200      	movs	r2, #0
   12b82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   12b86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   12b8a:	4a07      	ldr	r2, [pc, #28]	; (12ba8 <rtc_nrf_isr+0x40>)
   12b8c:	6813      	ldr	r3, [r2, #0]
   12b8e:	3301      	adds	r3, #1
   12b90:	6013      	str	r3, [r2, #0]
{
   12b92:	2400      	movs	r4, #0
   12b94:	e003      	b.n	12b9e <rtc_nrf_isr+0x36>
		process_channel(chan);
   12b96:	4620      	mov	r0, r4
   12b98:	f7ff ffac 	bl	12af4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12b9c:	3401      	adds	r4, #1
   12b9e:	2c01      	cmp	r4, #1
   12ba0:	ddf9      	ble.n	12b96 <rtc_nrf_isr+0x2e>
}
   12ba2:	bd10      	pop	{r4, pc}
   12ba4:	50015000 	.word	0x50015000
   12ba8:	20002380 	.word	0x20002380

00012bac <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   12bac:	4b17      	ldr	r3, [pc, #92]	; (12c0c <z_nrf_rtc_timer_chan_alloc+0x60>)
   12bae:	6818      	ldr	r0, [r3, #0]
   12bb0:	b330      	cbz	r0, 12c00 <z_nrf_rtc_timer_chan_alloc+0x54>
   12bb2:	fab0 f080 	clz	r0, r0
		if (chan < 0) {
   12bb6:	f1d0 001f 	rsbs	r0, r0, #31
   12bba:	d424      	bmi.n	12c06 <z_nrf_rtc_timer_chan_alloc+0x5a>
{
   12bbc:	b500      	push	{lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   12bbe:	2301      	movs	r3, #1
   12bc0:	4083      	lsls	r3, r0
   12bc2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12bc4:	4911      	ldr	r1, [pc, #68]	; (12c0c <z_nrf_rtc_timer_chan_alloc+0x60>)
   12bc6:	e8d1 2fef 	ldaex	r2, [r1]
   12bca:	ea02 0c03 	and.w	ip, r2, r3
   12bce:	e8c1 cfee 	stlex	lr, ip, [r1]
   12bd2:	f1be 0f00 	cmp.w	lr, #0
   12bd6:	d1f6      	bne.n	12bc6 <z_nrf_rtc_timer_chan_alloc+0x1a>
	} while (!(prev & BIT(chan)));
   12bd8:	fa22 f300 	lsr.w	r3, r2, r0
   12bdc:	f013 0f01 	tst.w	r3, #1
   12be0:	d10c      	bne.n	12bfc <z_nrf_rtc_timer_chan_alloc+0x50>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   12be2:	4b0a      	ldr	r3, [pc, #40]	; (12c0c <z_nrf_rtc_timer_chan_alloc+0x60>)
   12be4:	6818      	ldr	r0, [r3, #0]
   12be6:	b138      	cbz	r0, 12bf8 <z_nrf_rtc_timer_chan_alloc+0x4c>
   12be8:	fab0 f080 	clz	r0, r0
		if (chan < 0) {
   12bec:	f1d0 001f 	rsbs	r0, r0, #31
   12bf0:	d5e5      	bpl.n	12bbe <z_nrf_rtc_timer_chan_alloc+0x12>
			return -ENOMEM;
   12bf2:	f06f 000b 	mvn.w	r0, #11
   12bf6:	e001      	b.n	12bfc <z_nrf_rtc_timer_chan_alloc+0x50>
   12bf8:	f06f 000b 	mvn.w	r0, #11
}
   12bfc:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
   12c00:	f06f 000b 	mvn.w	r0, #11
   12c04:	4770      	bx	lr
   12c06:	f06f 000b 	mvn.w	r0, #11
}
   12c0a:	4770      	bx	lr
   12c0c:	20002374 	.word	0x20002374

00012c10 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   12c10:	2301      	movs	r3, #1
   12c12:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c14:	4a04      	ldr	r2, [pc, #16]	; (12c28 <z_nrf_rtc_timer_chan_free+0x18>)
   12c16:	e8d2 1fef 	ldaex	r1, [r2]
   12c1a:	4319      	orrs	r1, r3
   12c1c:	e8c2 1fe0 	stlex	r0, r1, [r2]
   12c20:	2800      	cmp	r0, #0
   12c22:	d1f8      	bne.n	12c16 <z_nrf_rtc_timer_chan_free+0x6>
}
   12c24:	4770      	bx	lr
   12c26:	bf00      	nop
   12c28:	20002374 	.word	0x20002374

00012c2c <sys_clock_set_timeout>:
{
   12c2c:	b510      	push	{r4, lr}
   12c2e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12c30:	f1b0 3fff 	cmp.w	r0, #4294967295
   12c34:	d006      	beq.n	12c44 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12c36:	2801      	cmp	r0, #1
   12c38:	dd06      	ble.n	12c48 <sys_clock_set_timeout+0x1c>
   12c3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12c3e:	da05      	bge.n	12c4c <sys_clock_set_timeout+0x20>
   12c40:	1e44      	subs	r4, r0, #1
   12c42:	e004      	b.n	12c4e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12c44:	480f      	ldr	r0, [pc, #60]	; (12c84 <sys_clock_set_timeout+0x58>)
   12c46:	e7f8      	b.n	12c3a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12c48:	2400      	movs	r4, #0
   12c4a:	e000      	b.n	12c4e <sys_clock_set_timeout+0x22>
   12c4c:	4c0d      	ldr	r4, [pc, #52]	; (12c84 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   12c4e:	f7ff fe95 	bl	1297c <z_nrf_rtc_timer_read>
   12c52:	4b0d      	ldr	r3, [pc, #52]	; (12c88 <sys_clock_set_timeout+0x5c>)
   12c54:	6819      	ldr	r1, [r3, #0]
   12c56:	685b      	ldr	r3, [r3, #4]
   12c58:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
   12c5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12c5e:	d300      	bcc.n	12c62 <sys_clock_set_timeout+0x36>
		ticks = 0;
   12c60:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   12c62:	4420      	add	r0, r4
   12c64:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
   12c66:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   12c6a:	d300      	bcc.n	12c6e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   12c6c:	4a05      	ldr	r2, [pc, #20]	; (12c84 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   12c6e:	2000      	movs	r0, #0
   12c70:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   12c72:	9001      	str	r0, [sp, #4]
   12c74:	4905      	ldr	r1, [pc, #20]	; (12c8c <sys_clock_set_timeout+0x60>)
   12c76:	9100      	str	r1, [sp, #0]
   12c78:	f143 0300 	adc.w	r3, r3, #0
   12c7c:	f00b f9e2 	bl	1e044 <compare_set>
}
   12c80:	b002      	add	sp, #8
   12c82:	bd10      	pop	{r4, pc}
   12c84:	007fffff 	.word	0x007fffff
   12c88:	20001658 	.word	0x20001658
   12c8c:	000128e5 	.word	0x000128e5

00012c90 <sys_clock_elapsed>:
{
   12c90:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   12c92:	f7ff fe73 	bl	1297c <z_nrf_rtc_timer_read>
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <sys_clock_elapsed+0x10>)
   12c98:	681b      	ldr	r3, [r3, #0]
}
   12c9a:	1ac0      	subs	r0, r0, r3
   12c9c:	bd08      	pop	{r3, pc}
   12c9e:	bf00      	nop
   12ca0:	20001658 	.word	0x20001658

00012ca4 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   12ca4:	b510      	push	{r4, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   12ca6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   12caa:	d001      	beq.n	12cb0 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12cac:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
   12cae:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
   12cb0:	f3c0 1e81 	ubfx	lr, r0, #6, #2
    *p_pin = pin_number & 0x1F;
   12cb4:	f000 0c1f 	and.w	ip, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12cb8:	f010 0f20 	tst.w	r0, #32
   12cbc:	d110      	bne.n	12ce0 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
   12cbe:	4c09      	ldr	r4, [pc, #36]	; (12ce4 <nrf_pin_configure+0x40>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   12cc0:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
   12cc4:	f854 002c 	ldr.w	r0, [r4, ip, lsl #2]
   12cc8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12ccc:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   12cd0:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12cd4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12cd8:	4301      	orrs	r1, r0
    reg->PIN_CNF[pin_number] = cnf;
   12cda:	f844 102c 	str.w	r1, [r4, ip, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
   12cde:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   12ce0:	4c01      	ldr	r4, [pc, #4]	; (12ce8 <nrf_pin_configure+0x44>)
   12ce2:	e7ed      	b.n	12cc0 <nrf_pin_configure+0x1c>
   12ce4:	50842500 	.word	0x50842500
   12ce8:	50842800 	.word	0x50842800

00012cec <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cf0:	4606      	mov	r6, r0
   12cf2:	460f      	mov	r7, r1
   12cf4:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12cf6:	2400      	movs	r4, #0
   12cf8:	e015      	b.n	12d26 <pinctrl_configure_pins+0x3a>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   12cfa:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12cfe:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   12d02:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   12d06:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12d0a:	f011 0f20 	tst.w	r1, #32
   12d0e:	d15f      	bne.n	12dd0 <pinctrl_configure_pins+0xe4>
        case 0: return NRF_P0;
   12d10:	4dbb      	ldr	r5, [pc, #748]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12d12:	2101      	movs	r1, #1
   12d14:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   12d18:	60aa      	str	r2, [r5, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12d1a:	460a      	mov	r2, r1
   12d1c:	5830      	ldr	r0, [r6, r0]
   12d1e:	f7ff ffc1 	bl	12ca4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12d22:	3401      	adds	r4, #1
   12d24:	b2e4      	uxtb	r4, r4
   12d26:	42bc      	cmp	r4, r7
   12d28:	f080 81b0 	bcs.w	1308c <pinctrl_configure_pins+0x3a0>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12d2c:	00a0      	lsls	r0, r4, #2
   12d2e:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   12d32:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   12d36:	0c2a      	lsrs	r2, r5, #16
   12d38:	2a22      	cmp	r2, #34	; 0x22
   12d3a:	f200 81a9 	bhi.w	13090 <pinctrl_configure_pins+0x3a4>
   12d3e:	a101      	add	r1, pc, #4	; (adr r1, 12d44 <pinctrl_configure_pins+0x58>)
   12d40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   12d44:	00012cfb 	.word	0x00012cfb
   12d48:	00012dd5 	.word	0x00012dd5
   12d4c:	00012deb 	.word	0x00012deb
   12d50:	00012e19 	.word	0x00012e19
   12d54:	00012e2f 	.word	0x00012e2f
   12d58:	00012e5d 	.word	0x00012e5d
   12d5c:	00012e8b 	.word	0x00012e8b
   12d60:	00013091 	.word	0x00013091
   12d64:	00013091 	.word	0x00013091
   12d68:	00013091 	.word	0x00013091
   12d6c:	00013091 	.word	0x00013091
   12d70:	00012ea1 	.word	0x00012ea1
   12d74:	00012eb9 	.word	0x00012eb9
   12d78:	00013091 	.word	0x00013091
   12d7c:	00013091 	.word	0x00013091
   12d80:	00013091 	.word	0x00013091
   12d84:	00013091 	.word	0x00013091
   12d88:	00013091 	.word	0x00013091
   12d8c:	00013091 	.word	0x00013091
   12d90:	00013091 	.word	0x00013091
   12d94:	00013091 	.word	0x00013091
   12d98:	00013091 	.word	0x00013091
   12d9c:	00012ed1 	.word	0x00012ed1
   12da0:	00012f1d 	.word	0x00012f1d
   12da4:	00012f69 	.word	0x00012f69
   12da8:	00012fb5 	.word	0x00012fb5
   12dac:	00013091 	.word	0x00013091
   12db0:	00013091 	.word	0x00013091
   12db4:	00013091 	.word	0x00013091
   12db8:	00013009 	.word	0x00013009
   12dbc:	0001301f 	.word	0x0001301f
   12dc0:	00013035 	.word	0x00013035
   12dc4:	0001304b 	.word	0x0001304b
   12dc8:	00013061 	.word	0x00013061
   12dcc:	00013077 	.word	0x00013077
        case 1: return NRF_P1;
   12dd0:	4d8c      	ldr	r5, [pc, #560]	; (13004 <pinctrl_configure_pins+0x318>)
   12dd2:	e79e      	b.n	12d12 <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   12dd4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12dd8:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12ddc:	2200      	movs	r2, #0
   12dde:	4611      	mov	r1, r2
   12de0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   12de4:	f7ff ff5e 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   12de8:	e79b      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   12dea:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12dee:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   12df2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   12df6:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12dfa:	f011 0f20 	tst.w	r1, #32
   12dfe:	d109      	bne.n	12e14 <pinctrl_configure_pins+0x128>
        case 0: return NRF_P0;
   12e00:	4d7f      	ldr	r5, [pc, #508]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12e02:	2101      	movs	r1, #1
   12e04:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
   12e08:	60aa      	str	r2, [r5, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12e0a:	460a      	mov	r2, r1
   12e0c:	5830      	ldr	r0, [r6, r0]
   12e0e:	f7ff ff49 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   12e12:	e786      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12e14:	4d7b      	ldr	r5, [pc, #492]	; (13004 <pinctrl_configure_pins+0x318>)
   12e16:	e7f4      	b.n	12e02 <pinctrl_configure_pins+0x116>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   12e18:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12e1c:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12e20:	2200      	movs	r2, #0
   12e22:	4611      	mov	r1, r2
   12e24:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   12e28:	f7ff ff3c 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   12e2c:	e779      	b.n	12d22 <pinctrl_configure_pins+0x36>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   12e2e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12e32:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   12e36:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   12e3a:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e3e:	f011 0f20 	tst.w	r1, #32
   12e42:	d109      	bne.n	12e58 <pinctrl_configure_pins+0x16c>
        case 0: return NRF_P0;
   12e44:	4d6e      	ldr	r5, [pc, #440]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12e46:	2101      	movs	r1, #1
   12e48:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   12e4c:	60ea      	str	r2, [r5, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12e4e:	2200      	movs	r2, #0
   12e50:	5830      	ldr	r0, [r6, r0]
   12e52:	f7ff ff27 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   12e56:	e764      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12e58:	4d6a      	ldr	r5, [pc, #424]	; (13004 <pinctrl_configure_pins+0x318>)
   12e5a:	e7f4      	b.n	12e46 <pinctrl_configure_pins+0x15a>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   12e5c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12e60:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   12e64:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   12e68:	f001 021f 	and.w	r2, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12e6c:	f011 0f20 	tst.w	r1, #32
   12e70:	d109      	bne.n	12e86 <pinctrl_configure_pins+0x19a>
        case 0: return NRF_P0;
   12e72:	4d63      	ldr	r5, [pc, #396]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12e74:	2101      	movs	r1, #1
   12e76:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
   12e7a:	60ea      	str	r2, [r5, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12e7c:	460a      	mov	r2, r1
   12e7e:	5830      	ldr	r0, [r6, r0]
   12e80:	f7ff ff10 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   12e84:	e74d      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12e86:	4d5f      	ldr	r5, [pc, #380]	; (13004 <pinctrl_configure_pins+0x318>)
   12e88:	e7f4      	b.n	12e74 <pinctrl_configure_pins+0x188>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   12e8a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12e8e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12e92:	2200      	movs	r2, #0
   12e94:	4611      	mov	r1, r2
   12e96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   12e9a:	f7ff ff03 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   12e9e:	e740      	b.n	12d22 <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   12ea0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12ea4:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   12ea8:	b903      	cbnz	r3, 12eac <pinctrl_configure_pins+0x1c0>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
   12eaa:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12eac:	2200      	movs	r2, #0
   12eae:	4611      	mov	r1, r2
   12eb0:	5830      	ldr	r0, [r6, r0]
   12eb2:	f7ff fef7 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   12eb6:	e734      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   12eb8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12ebc:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   12ec0:	b903      	cbnz	r3, 12ec4 <pinctrl_configure_pins+0x1d8>
				drive = NRF_DRIVE_S0D1;
   12ec2:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   12ec4:	2200      	movs	r2, #0
   12ec6:	4611      	mov	r1, r2
   12ec8:	5830      	ldr	r0, [r6, r0]
   12eca:	f7ff feeb 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
   12ece:	e728      	b.n	12d22 <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   12ed0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12ed4:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12ed8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   12edc:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   12ee0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   12ee4:	d10f      	bne.n	12f06 <pinctrl_configure_pins+0x21a>
    *p_pin = pin_number & 0x1F;
   12ee6:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12eea:	094a      	lsrs	r2, r1, #5
   12eec:	d109      	bne.n	12f02 <pinctrl_configure_pins+0x216>
        case 0: return NRF_P0;
   12eee:	4944      	ldr	r1, [pc, #272]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12ef0:	2201      	movs	r2, #1
   12ef2:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   12ef4:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12ef6:	2201      	movs	r2, #1
   12ef8:	4611      	mov	r1, r2
   12efa:	5830      	ldr	r0, [r6, r0]
   12efc:	f7ff fed2 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   12f00:	e70f      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12f02:	4940      	ldr	r1, [pc, #256]	; (13004 <pinctrl_configure_pins+0x318>)
   12f04:	e7f4      	b.n	12ef0 <pinctrl_configure_pins+0x204>
    *p_pin = pin_number & 0x1F;
   12f06:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12f0a:	094a      	lsrs	r2, r1, #5
   12f0c:	d104      	bne.n	12f18 <pinctrl_configure_pins+0x22c>
        case 0: return NRF_P0;
   12f0e:	493c      	ldr	r1, [pc, #240]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12f10:	2201      	movs	r2, #1
   12f12:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   12f14:	608a      	str	r2, [r1, #8]
}
   12f16:	e7ee      	b.n	12ef6 <pinctrl_configure_pins+0x20a>
        case 1: return NRF_P1;
   12f18:	493a      	ldr	r1, [pc, #232]	; (13004 <pinctrl_configure_pins+0x318>)
   12f1a:	e7f9      	b.n	12f10 <pinctrl_configure_pins+0x224>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   12f1c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12f20:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12f24:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   12f28:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   12f2c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   12f30:	d10f      	bne.n	12f52 <pinctrl_configure_pins+0x266>
    *p_pin = pin_number & 0x1F;
   12f32:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12f36:	094a      	lsrs	r2, r1, #5
   12f38:	d109      	bne.n	12f4e <pinctrl_configure_pins+0x262>
        case 0: return NRF_P0;
   12f3a:	4931      	ldr	r1, [pc, #196]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12f3c:	2201      	movs	r2, #1
   12f3e:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   12f40:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12f42:	2201      	movs	r2, #1
   12f44:	4611      	mov	r1, r2
   12f46:	5830      	ldr	r0, [r6, r0]
   12f48:	f7ff feac 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   12f4c:	e6e9      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12f4e:	492d      	ldr	r1, [pc, #180]	; (13004 <pinctrl_configure_pins+0x318>)
   12f50:	e7f4      	b.n	12f3c <pinctrl_configure_pins+0x250>
    *p_pin = pin_number & 0x1F;
   12f52:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12f56:	094a      	lsrs	r2, r1, #5
   12f58:	d104      	bne.n	12f64 <pinctrl_configure_pins+0x278>
        case 0: return NRF_P0;
   12f5a:	4929      	ldr	r1, [pc, #164]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12f5c:	2201      	movs	r2, #1
   12f5e:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   12f60:	608a      	str	r2, [r1, #8]
}
   12f62:	e7ee      	b.n	12f42 <pinctrl_configure_pins+0x256>
        case 1: return NRF_P1;
   12f64:	4927      	ldr	r1, [pc, #156]	; (13004 <pinctrl_configure_pins+0x318>)
   12f66:	e7f9      	b.n	12f5c <pinctrl_configure_pins+0x270>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   12f68:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12f6c:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12f70:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   12f74:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   12f78:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   12f7c:	d10f      	bne.n	12f9e <pinctrl_configure_pins+0x2b2>
    *p_pin = pin_number & 0x1F;
   12f7e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12f82:	094a      	lsrs	r2, r1, #5
   12f84:	d109      	bne.n	12f9a <pinctrl_configure_pins+0x2ae>
        case 0: return NRF_P0;
   12f86:	491e      	ldr	r1, [pc, #120]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12f88:	2201      	movs	r2, #1
   12f8a:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   12f8c:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12f8e:	2201      	movs	r2, #1
   12f90:	4611      	mov	r1, r2
   12f92:	5830      	ldr	r0, [r6, r0]
   12f94:	f7ff fe86 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   12f98:	e6c3      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12f9a:	491a      	ldr	r1, [pc, #104]	; (13004 <pinctrl_configure_pins+0x318>)
   12f9c:	e7f4      	b.n	12f88 <pinctrl_configure_pins+0x29c>
    *p_pin = pin_number & 0x1F;
   12f9e:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12fa2:	094a      	lsrs	r2, r1, #5
   12fa4:	d104      	bne.n	12fb0 <pinctrl_configure_pins+0x2c4>
        case 0: return NRF_P0;
   12fa6:	4916      	ldr	r1, [pc, #88]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12fa8:	2201      	movs	r2, #1
   12faa:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   12fac:	608a      	str	r2, [r1, #8]
}
   12fae:	e7ee      	b.n	12f8e <pinctrl_configure_pins+0x2a2>
        case 1: return NRF_P1;
   12fb0:	4914      	ldr	r1, [pc, #80]	; (13004 <pinctrl_configure_pins+0x318>)
   12fb2:	e7f9      	b.n	12fa8 <pinctrl_configure_pins+0x2bc>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   12fb4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   12fb8:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   12fbc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   12fc0:	f002 013f 	and.w	r1, r2, #63	; 0x3f
    if (value == 0)
   12fc4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
   12fc8:	d10f      	bne.n	12fea <pinctrl_configure_pins+0x2fe>
    *p_pin = pin_number & 0x1F;
   12fca:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12fce:	094a      	lsrs	r2, r1, #5
   12fd0:	d109      	bne.n	12fe6 <pinctrl_configure_pins+0x2fa>
        case 0: return NRF_P0;
   12fd2:	490b      	ldr	r1, [pc, #44]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12fd4:	2201      	movs	r2, #1
   12fd6:	40aa      	lsls	r2, r5
    p_reg->OUTCLR = clr_mask;
   12fd8:	60ca      	str	r2, [r1, #12]
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   12fda:	2201      	movs	r2, #1
   12fdc:	4611      	mov	r1, r2
   12fde:	5830      	ldr	r0, [r6, r0]
   12fe0:	f7ff fe60 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   12fe4:	e69d      	b.n	12d22 <pinctrl_configure_pins+0x36>
        case 1: return NRF_P1;
   12fe6:	4907      	ldr	r1, [pc, #28]	; (13004 <pinctrl_configure_pins+0x318>)
   12fe8:	e7f4      	b.n	12fd4 <pinctrl_configure_pins+0x2e8>
    *p_pin = pin_number & 0x1F;
   12fea:	f001 051f 	and.w	r5, r1, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12fee:	094a      	lsrs	r2, r1, #5
   12ff0:	d104      	bne.n	12ffc <pinctrl_configure_pins+0x310>
        case 0: return NRF_P0;
   12ff2:	4903      	ldr	r1, [pc, #12]	; (13000 <pinctrl_configure_pins+0x314>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12ff4:	2201      	movs	r2, #1
   12ff6:	40aa      	lsls	r2, r5
    p_reg->OUTSET = set_mask;
   12ff8:	608a      	str	r2, [r1, #8]
}
   12ffa:	e7ee      	b.n	12fda <pinctrl_configure_pins+0x2ee>
        case 1: return NRF_P1;
   12ffc:	4901      	ldr	r1, [pc, #4]	; (13004 <pinctrl_configure_pins+0x318>)
   12ffe:	e7f9      	b.n	12ff4 <pinctrl_configure_pins+0x308>
   13000:	50842500 	.word	0x50842500
   13004:	50842800 	.word	0x50842800
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
   13008:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1300c:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13010:	2201      	movs	r2, #1
   13012:	2100      	movs	r1, #0
   13014:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13018:	f7ff fe44 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   1301c:	e681      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
   1301e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13022:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13026:	2201      	movs	r2, #1
   13028:	2100      	movs	r1, #0
   1302a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1302e:	f7ff fe39 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13032:	e676      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
   13034:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13038:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1303c:	2201      	movs	r2, #1
   1303e:	2100      	movs	r1, #0
   13040:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13044:	f7ff fe2e 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13048:	e66b      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
   1304a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1304e:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13052:	2201      	movs	r2, #1
   13054:	2100      	movs	r1, #0
   13056:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1305a:	f7ff fe23 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   1305e:	e660      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
   13060:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   13064:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   13068:	2201      	movs	r2, #1
   1306a:	2100      	movs	r1, #0
   1306c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13070:	f7ff fe18 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   13074:	e655      	b.n	12d22 <pinctrl_configure_pins+0x36>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
   13076:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1307a:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1307e:	2201      	movs	r2, #1
   13080:	2100      	movs	r1, #0
   13082:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   13086:	f7ff fe0d 	bl	12ca4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
   1308a:	e64a      	b.n	12d22 <pinctrl_configure_pins+0x36>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   1308c:	2000      	movs	r0, #0
   1308e:	e001      	b.n	13094 <pinctrl_configure_pins+0x3a8>
		switch (NRF_GET_FUN(pins[i])) {
   13090:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   13094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013098 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
   13098:	b570      	push	{r4, r5, r6, lr}
   1309a:	b088      	sub	sp, #32
   1309c:	460c      	mov	r4, r1
   1309e:	4615      	mov	r5, r2
	struct mbox_nrf_data *data = dev->data;
   130a0:	6906      	ldr	r6, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
   130a2:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   130a4:	290f      	cmp	r1, #15
   130a6:	d806      	bhi.n	130b6 <mbox_nrf_set_enabled+0x1e>
   130a8:	681b      	ldr	r3, [r3, #0]
   130aa:	40cb      	lsrs	r3, r1
   130ac:	f013 0f01 	tst.w	r3, #1
   130b0:	d12f      	bne.n	13112 <mbox_nrf_set_enabled+0x7a>
   130b2:	2300      	movs	r3, #0
   130b4:	e000      	b.n	130b8 <mbox_nrf_set_enabled+0x20>
   130b6:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
   130b8:	2b00      	cmp	r3, #0
   130ba:	d067      	beq.n	1318c <mbox_nrf_set_enabled+0xf4>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   130bc:	b92d      	cbnz	r5, 130ca <mbox_nrf_set_enabled+0x32>
   130be:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   130c2:	40e3      	lsrs	r3, r4
   130c4:	f013 0f01 	tst.w	r3, #1
   130c8:	d063      	beq.n	13192 <mbox_nrf_set_enabled+0xfa>
   130ca:	b12d      	cbz	r5, 130d8 <mbox_nrf_set_enabled+0x40>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   130cc:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   130d0:	40e3      	lsrs	r3, r4
   130d2:	f013 0f01 	tst.w	r3, #1
   130d6:	d15f      	bne.n	13198 <mbox_nrf_set_enabled+0x100>
		return -EALREADY;
	}

	if (enable && (data->cb[channel] == NULL)) {
   130d8:	b115      	cbz	r5, 130e0 <mbox_nrf_set_enabled+0x48>
   130da:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   130de:	b1d3      	cbz	r3, 13116 <mbox_nrf_set_enabled+0x7e>
		LOG_WRN("Enabling channel without a registered callback\n");
	}

	if (enable && data->enabled_mask == 0) {
   130e0:	b11d      	cbz	r5, 130ea <mbox_nrf_set_enabled+0x52>
   130e2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   130e6:	2b00      	cmp	r3, #0
   130e8:	d03a      	beq.n	13160 <mbox_nrf_set_enabled+0xc8>
		irq_enable(DT_INST_IRQN(0));
	}

	if (enable) {
   130ea:	2d00      	cmp	r5, #0
   130ec:	d03c      	beq.n	13168 <mbox_nrf_set_enabled+0xd0>
		data->enabled_mask |= BIT(channel);
   130ee:	2301      	movs	r3, #1
   130f0:	fa03 f204 	lsl.w	r2, r3, r4
   130f4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   130f8:	4313      	orrs	r3, r2
   130fa:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
   130fe:	b2e0      	uxtb	r0, r4
   13100:	f001 f94e 	bl	143a0 <nrfx_ipc_receive_event_enable>
		nrfx_ipc_receive_event_disable(channel);
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
	}

	if (data->enabled_mask == 0) {
   13104:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   13108:	2b00      	cmp	r3, #0
   1310a:	d03a      	beq.n	13182 <mbox_nrf_set_enabled+0xea>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
   1310c:	2000      	movs	r0, #0
}
   1310e:	b008      	add	sp, #32
   13110:	bd70      	pop	{r4, r5, r6, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   13112:	2301      	movs	r3, #1
   13114:	e7d0      	b.n	130b8 <mbox_nrf_set_enabled+0x20>
		LOG_WRN("Enabling channel without a registered callback\n");
   13116:	4b22      	ldr	r3, [pc, #136]	; (131a0 <mbox_nrf_set_enabled+0x108>)
   13118:	9307      	str	r3, [sp, #28]
   1311a:	2202      	movs	r2, #2
   1311c:	f88d 2004 	strb.w	r2, [sp, #4]
   13120:	2300      	movs	r3, #0
   13122:	f88d 3005 	strb.w	r3, [sp, #5]
   13126:	f88d 3006 	strb.w	r3, [sp, #6]
   1312a:	f88d 3007 	strb.w	r3, [sp, #7]
   1312e:	9901      	ldr	r1, [sp, #4]
   13130:	9106      	str	r1, [sp, #24]
   13132:	4619      	mov	r1, r3
   13134:	f363 0100 	bfi	r1, r3, #0, #1
   13138:	f363 0141 	bfi	r1, r3, #1, #1
   1313c:	f363 0182 	bfi	r1, r3, #2, #1
   13140:	f363 01c5 	bfi	r1, r3, #3, #3
   13144:	f362 1188 	bfi	r1, r2, #6, #3
   13148:	2208      	movs	r2, #8
   1314a:	f362 2152 	bfi	r1, r2, #9, #10
   1314e:	f363 41de 	bfi	r1, r3, #19, #12
   13152:	f363 71df 	bfi	r1, r3, #31, #1
   13156:	aa06      	add	r2, sp, #24
   13158:	4812      	ldr	r0, [pc, #72]	; (131a4 <mbox_nrf_set_enabled+0x10c>)
   1315a:	f7f0 fab7 	bl	36cc <z_impl_z_log_msg_static_create>
   1315e:	e7bf      	b.n	130e0 <mbox_nrf_set_enabled+0x48>
		irq_enable(DT_INST_IRQN(0));
   13160:	202a      	movs	r0, #42	; 0x2a
   13162:	f7f2 fa35 	bl	55d0 <arch_irq_enable>
   13166:	e7c0      	b.n	130ea <mbox_nrf_set_enabled+0x52>
		nrfx_ipc_receive_event_disable(channel);
   13168:	b2e0      	uxtb	r0, r4
   1316a:	f001 f921 	bl	143b0 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1316e:	2301      	movs	r3, #1
   13170:	fa03 f404 	lsl.w	r4, r3, r4
   13174:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   13178:	ea23 0304 	bic.w	r3, r3, r4
   1317c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
   13180:	e7c0      	b.n	13104 <mbox_nrf_set_enabled+0x6c>
		irq_disable(DT_INST_IRQN(0));
   13182:	202a      	movs	r0, #42	; 0x2a
   13184:	f7f2 fa32 	bl	55ec <arch_irq_disable>
	return 0;
   13188:	2000      	movs	r0, #0
   1318a:	e7c0      	b.n	1310e <mbox_nrf_set_enabled+0x76>
		return -EINVAL;
   1318c:	f06f 0015 	mvn.w	r0, #21
   13190:	e7bd      	b.n	1310e <mbox_nrf_set_enabled+0x76>
		return -EALREADY;
   13192:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13196:	e7ba      	b.n	1310e <mbox_nrf_set_enabled+0x76>
   13198:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1319c:	e7b7      	b.n	1310e <mbox_nrf_set_enabled+0x76>
   1319e:	bf00      	nop
   131a0:	00023704 	.word	0x00023704
   131a4:	000205a8 	.word	0x000205a8

000131a8 <mbox_nrf_send>:
{
   131a8:	b530      	push	{r4, r5, lr}
   131aa:	b089      	sub	sp, #36	; 0x24
   131ac:	4605      	mov	r5, r0
   131ae:	460c      	mov	r4, r1
	if (msg) {
   131b0:	b31a      	cbz	r2, 131fa <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
   131b2:	4b20      	ldr	r3, [pc, #128]	; (13234 <mbox_nrf_send+0x8c>)
   131b4:	9307      	str	r3, [sp, #28]
   131b6:	2202      	movs	r2, #2
   131b8:	f88d 2004 	strb.w	r2, [sp, #4]
   131bc:	2300      	movs	r3, #0
   131be:	f88d 3005 	strb.w	r3, [sp, #5]
   131c2:	f88d 3006 	strb.w	r3, [sp, #6]
   131c6:	f88d 3007 	strb.w	r3, [sp, #7]
   131ca:	9901      	ldr	r1, [sp, #4]
   131cc:	9106      	str	r1, [sp, #24]
   131ce:	4619      	mov	r1, r3
   131d0:	f363 0100 	bfi	r1, r3, #0, #1
   131d4:	f363 0141 	bfi	r1, r3, #1, #1
   131d8:	f363 0182 	bfi	r1, r3, #2, #1
   131dc:	f363 01c5 	bfi	r1, r3, #3, #3
   131e0:	f362 1188 	bfi	r1, r2, #6, #3
   131e4:	2208      	movs	r2, #8
   131e6:	f362 2152 	bfi	r1, r2, #9, #10
   131ea:	f363 41de 	bfi	r1, r3, #19, #12
   131ee:	f363 71df 	bfi	r1, r3, #31, #1
   131f2:	aa06      	add	r2, sp, #24
   131f4:	4810      	ldr	r0, [pc, #64]	; (13238 <mbox_nrf_send+0x90>)
   131f6:	f7f0 fa69 	bl	36cc <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
   131fa:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   131fc:	2c0f      	cmp	r4, #15
   131fe:	d806      	bhi.n	1320e <mbox_nrf_send+0x66>
   13200:	685b      	ldr	r3, [r3, #4]
   13202:	40e3      	lsrs	r3, r4
   13204:	f013 0f01 	tst.w	r3, #1
   13208:	d10f      	bne.n	1322a <mbox_nrf_send+0x82>
   1320a:	2300      	movs	r3, #0
   1320c:	e000      	b.n	13210 <mbox_nrf_send+0x68>
   1320e:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
   13210:	b16b      	cbz	r3, 1322e <mbox_nrf_send+0x86>
	nrfx_ipc_signal(channel);
   13212:	b2e3      	uxtb	r3, r4
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   13214:	009b      	lsls	r3, r3, #2
   13216:	b2db      	uxtb	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13218:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   1321c:	f503 3328 	add.w	r3, r3, #172032	; 0x2a000
   13220:	2201      	movs	r2, #1
   13222:	601a      	str	r2, [r3, #0]
	return 0;
   13224:	2000      	movs	r0, #0
}
   13226:	b009      	add	sp, #36	; 0x24
   13228:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1322a:	2301      	movs	r3, #1
   1322c:	e7f0      	b.n	13210 <mbox_nrf_send+0x68>
		return -EINVAL;
   1322e:	f06f 0015 	mvn.w	r0, #21
   13232:	e7f8      	b.n	13226 <mbox_nrf_send+0x7e>
   13234:	00023734 	.word	0x00023734
   13238:	000205a8 	.word	0x000205a8

0001323c <mbox_dispatcher>:
{
   1323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13240:	b08e      	sub	sp, #56	; 0x38
   13242:	4605      	mov	r5, r0
   13244:	460e      	mov	r6, r1
	const struct device *dev = data->dev;
   13246:	f8d1 9080 	ldr.w	r9, [r1, #128]	; 0x80
	while (event_mask) {
   1324a:	e01a      	b.n	13282 <mbox_dispatcher+0x46>
    return 32U;
   1324c:	2320      	movs	r3, #32
   1324e:	e020      	b.n	13292 <mbox_dispatcher+0x56>
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   13250:	2300      	movs	r3, #0
		if (!is_rx_channel_valid(dev, channel)) {
   13252:	b36b      	cbz	r3, 132b0 <mbox_dispatcher+0x74>
		if (!(data->enabled_mask & BIT(channel))) {
   13254:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   13258:	40e3      	lsrs	r3, r4
   1325a:	f013 0f01 	tst.w	r3, #1
   1325e:	d04c      	beq.n	132fa <mbox_dispatcher+0xbe>
		event_mask &= ~BIT(channel);
   13260:	2301      	movs	r3, #1
   13262:	40a3      	lsls	r3, r4
   13264:	ea25 0503 	bic.w	r5, r5, r3
		if (data->cb[channel] != NULL) {
   13268:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
   1326c:	f1ba 0f00 	cmp.w	sl, #0
   13270:	d007      	beq.n	13282 <mbox_dispatcher+0x46>
			data->cb[channel](dev, channel, data->user_data[channel], NULL);
   13272:	f104 0210 	add.w	r2, r4, #16
   13276:	2300      	movs	r3, #0
   13278:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   1327c:	4621      	mov	r1, r4
   1327e:	4648      	mov	r0, r9
   13280:	47d0      	blx	sl
	while (event_mask) {
   13282:	2d00      	cmp	r5, #0
   13284:	d05e      	beq.n	13344 <mbox_dispatcher+0x108>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   13286:	fa95 f3a5 	rbit	r3, r5
  if (value == 0U)
   1328a:	2b00      	cmp	r3, #0
   1328c:	d0de      	beq.n	1324c <mbox_dispatcher+0x10>
  return __builtin_clz(value);
   1328e:	fab3 f383 	clz	r3, r3
		uint32_t channel = __CLZ(__RBIT(event_mask));
   13292:	461c      	mov	r4, r3
	const struct mbox_nrf_conf *conf = dev->config;
   13294:	f8d9 2004 	ldr.w	r2, [r9, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   13298:	2b0f      	cmp	r3, #15
   1329a:	d8d9      	bhi.n	13250 <mbox_dispatcher+0x14>
   1329c:	6812      	ldr	r2, [r2, #0]
   1329e:	fa22 f303 	lsr.w	r3, r2, r3
   132a2:	f013 0f01 	tst.w	r3, #1
   132a6:	d101      	bne.n	132ac <mbox_dispatcher+0x70>
   132a8:	2300      	movs	r3, #0
   132aa:	e7d2      	b.n	13252 <mbox_dispatcher+0x16>
   132ac:	2301      	movs	r3, #1
   132ae:	e7d0      	b.n	13252 <mbox_dispatcher+0x16>
			LOG_WRN("RX event on illegal channel");
   132b0:	4b26      	ldr	r3, [pc, #152]	; (1334c <mbox_dispatcher+0x110>)
   132b2:	9307      	str	r3, [sp, #28]
   132b4:	2202      	movs	r2, #2
   132b6:	f88d 2004 	strb.w	r2, [sp, #4]
   132ba:	2300      	movs	r3, #0
   132bc:	f88d 3005 	strb.w	r3, [sp, #5]
   132c0:	f88d 3006 	strb.w	r3, [sp, #6]
   132c4:	f88d 3007 	strb.w	r3, [sp, #7]
   132c8:	9901      	ldr	r1, [sp, #4]
   132ca:	9106      	str	r1, [sp, #24]
   132cc:	f363 0700 	bfi	r7, r3, #0, #1
   132d0:	f363 0741 	bfi	r7, r3, #1, #1
   132d4:	f363 0782 	bfi	r7, r3, #2, #1
   132d8:	f363 07c5 	bfi	r7, r3, #3, #3
   132dc:	f362 1788 	bfi	r7, r2, #6, #3
   132e0:	2208      	movs	r2, #8
   132e2:	f362 2752 	bfi	r7, r2, #9, #10
   132e6:	f363 47de 	bfi	r7, r3, #19, #12
   132ea:	f363 77df 	bfi	r7, r3, #31, #1
   132ee:	aa06      	add	r2, sp, #24
   132f0:	4639      	mov	r1, r7
   132f2:	4817      	ldr	r0, [pc, #92]	; (13350 <mbox_dispatcher+0x114>)
   132f4:	f7f0 f9ea 	bl	36cc <z_impl_z_log_msg_static_create>
   132f8:	e7ac      	b.n	13254 <mbox_dispatcher+0x18>
			LOG_WRN("RX event on disabled channel");
   132fa:	4b16      	ldr	r3, [pc, #88]	; (13354 <mbox_dispatcher+0x118>)
   132fc:	930d      	str	r3, [sp, #52]	; 0x34
   132fe:	2202      	movs	r2, #2
   13300:	f88d 2004 	strb.w	r2, [sp, #4]
   13304:	2300      	movs	r3, #0
   13306:	f88d 3005 	strb.w	r3, [sp, #5]
   1330a:	f88d 3006 	strb.w	r3, [sp, #6]
   1330e:	f88d 3007 	strb.w	r3, [sp, #7]
   13312:	9901      	ldr	r1, [sp, #4]
   13314:	910c      	str	r1, [sp, #48]	; 0x30
   13316:	f363 0800 	bfi	r8, r3, #0, #1
   1331a:	f363 0841 	bfi	r8, r3, #1, #1
   1331e:	f363 0882 	bfi	r8, r3, #2, #1
   13322:	f363 08c5 	bfi	r8, r3, #3, #3
   13326:	f362 1888 	bfi	r8, r2, #6, #3
   1332a:	2208      	movs	r2, #8
   1332c:	f362 2852 	bfi	r8, r2, #9, #10
   13330:	f363 48de 	bfi	r8, r3, #19, #12
   13334:	f363 78df 	bfi	r8, r3, #31, #1
   13338:	aa0c      	add	r2, sp, #48	; 0x30
   1333a:	4641      	mov	r1, r8
   1333c:	4804      	ldr	r0, [pc, #16]	; (13350 <mbox_dispatcher+0x114>)
   1333e:	f7f0 f9c5 	bl	36cc <z_impl_z_log_msg_static_create>
   13342:	e78d      	b.n	13260 <mbox_dispatcher+0x24>
}
   13344:	b00e      	add	sp, #56	; 0x38
   13346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1334a:	bf00      	nop
   1334c:	00023750 	.word	0x00023750
   13350:	000205a8 	.word	0x000205a8
   13354:	0002376c 	.word	0x0002376c

00013358 <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
   13358:	b510      	push	{r4, lr}
   1335a:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
   1335c:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1335e:	2284      	movs	r2, #132	; 0x84
   13360:	2100      	movs	r1, #0
   13362:	a801      	add	r0, sp, #4
   13364:	f006 fea0 	bl	1a0a8 <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   13368:	6863      	ldr	r3, [r4, #4]
   1336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1336e:	d206      	bcs.n	1337e <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   13370:	6823      	ldr	r3, [r4, #0]
   13372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   13376:	d227      	bcs.n	133c8 <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
   13378:	2300      	movs	r3, #0
   1337a:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1337c:	e04a      	b.n	13414 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1337e:	4b36      	ldr	r3, [pc, #216]	; (13458 <enable_dt_channels+0x100>)
   13380:	9327      	str	r3, [sp, #156]	; 0x9c
   13382:	2202      	movs	r2, #2
   13384:	f88d 2000 	strb.w	r2, [sp]
   13388:	2300      	movs	r3, #0
   1338a:	f88d 3001 	strb.w	r3, [sp, #1]
   1338e:	f88d 3002 	strb.w	r3, [sp, #2]
   13392:	f88d 3003 	strb.w	r3, [sp, #3]
   13396:	9900      	ldr	r1, [sp, #0]
   13398:	9126      	str	r1, [sp, #152]	; 0x98
   1339a:	4619      	mov	r1, r3
   1339c:	f363 0100 	bfi	r1, r3, #0, #1
   133a0:	f363 0141 	bfi	r1, r3, #1, #1
   133a4:	f363 0182 	bfi	r1, r3, #2, #1
   133a8:	f363 01c5 	bfi	r1, r3, #3, #3
   133ac:	f362 1188 	bfi	r1, r2, #6, #3
   133b0:	2208      	movs	r2, #8
   133b2:	f362 2152 	bfi	r1, r2, #9, #10
   133b6:	f363 41de 	bfi	r1, r3, #19, #12
   133ba:	f363 71df 	bfi	r1, r3, #31, #1
   133be:	aa26      	add	r2, sp, #152	; 0x98
   133c0:	4826      	ldr	r0, [pc, #152]	; (1345c <enable_dt_channels+0x104>)
   133c2:	f7f0 f983 	bl	36cc <z_impl_z_log_msg_static_create>
   133c6:	e7d3      	b.n	13370 <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   133c8:	4b25      	ldr	r3, [pc, #148]	; (13460 <enable_dt_channels+0x108>)
   133ca:	932d      	str	r3, [sp, #180]	; 0xb4
   133cc:	2202      	movs	r2, #2
   133ce:	f88d 2000 	strb.w	r2, [sp]
   133d2:	2300      	movs	r3, #0
   133d4:	f88d 3001 	strb.w	r3, [sp, #1]
   133d8:	f88d 3002 	strb.w	r3, [sp, #2]
   133dc:	f88d 3003 	strb.w	r3, [sp, #3]
   133e0:	9900      	ldr	r1, [sp, #0]
   133e2:	912c      	str	r1, [sp, #176]	; 0xb0
   133e4:	4619      	mov	r1, r3
   133e6:	f363 0100 	bfi	r1, r3, #0, #1
   133ea:	f363 0141 	bfi	r1, r3, #1, #1
   133ee:	f363 0182 	bfi	r1, r3, #2, #1
   133f2:	f363 01c5 	bfi	r1, r3, #3, #3
   133f6:	f362 1188 	bfi	r1, r2, #6, #3
   133fa:	2208      	movs	r2, #8
   133fc:	f362 2152 	bfi	r1, r2, #9, #10
   13400:	f363 41de 	bfi	r1, r3, #19, #12
   13404:	f363 71df 	bfi	r1, r3, #31, #1
   13408:	aa2c      	add	r2, sp, #176	; 0xb0
   1340a:	4814      	ldr	r0, [pc, #80]	; (1345c <enable_dt_channels+0x104>)
   1340c:	f7f0 f95e 	bl	36cc <z_impl_z_log_msg_static_create>
   13410:	e7b2      	b.n	13378 <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   13412:	3301      	adds	r3, #1
   13414:	2b0f      	cmp	r3, #15
   13416:	d81a      	bhi.n	1344e <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
   13418:	6862      	ldr	r2, [r4, #4]
   1341a:	40da      	lsrs	r2, r3
   1341c:	f012 0f01 	tst.w	r2, #1
   13420:	d006      	beq.n	13430 <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
   13422:	2201      	movs	r2, #1
   13424:	409a      	lsls	r2, r3
   13426:	a92e      	add	r1, sp, #184	; 0xb8
   13428:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1342c:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
   13430:	6822      	ldr	r2, [r4, #0]
   13432:	40da      	lsrs	r2, r3
   13434:	f012 0f01 	tst.w	r2, #1
   13438:	d0eb      	beq.n	13412 <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
   1343a:	2101      	movs	r1, #1
   1343c:	4099      	lsls	r1, r3
   1343e:	f103 0210 	add.w	r2, r3, #16
   13442:	a82e      	add	r0, sp, #184	; 0xb8
   13444:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   13448:	f842 1cb4 	str.w	r1, [r2, #-180]
   1344c:	e7e1      	b.n	13412 <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
   1344e:	a801      	add	r0, sp, #4
   13450:	f000 ff80 	bl	14354 <nrfx_ipc_config_load>
}
   13454:	b02e      	add	sp, #184	; 0xb8
   13456:	bd10      	pop	{r4, pc}
   13458:	0002378c 	.word	0x0002378c
   1345c:	000205a8 	.word	0x000205a8
   13460:	000237b8 	.word	0x000237b8

00013464 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
   13464:	b510      	push	{r4, lr}
   13466:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   13468:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
   1346a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1346e:	4907      	ldr	r1, [pc, #28]	; (1348c <mbox_nrf_init+0x28>)
   13470:	2000      	movs	r0, #0
   13472:	f000 ff57 	bl	14324 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13476:	2200      	movs	r2, #0
   13478:	2101      	movs	r1, #1
   1347a:	202a      	movs	r0, #42	; 0x2a
   1347c:	f7f2 f8d8 	bl	5630 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   13480:	4620      	mov	r0, r4
   13482:	f7ff ff69 	bl	13358 <enable_dt_channels>

	return 0;
}
   13486:	2000      	movs	r0, #0
   13488:	bd10      	pop	{r4, pc}
   1348a:	bf00      	nop
   1348c:	0001323d 	.word	0x0001323d

00013490 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13490:	b510      	push	{r4, lr}
   13492:	b088      	sub	sp, #32
	z_impl_log_panic();
   13494:	f7f0 f840 	bl	3518 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   13498:	4b14      	ldr	r3, [pc, #80]	; (134ec <k_sys_fatal_error_handler+0x5c>)
   1349a:	9307      	str	r3, [sp, #28]
   1349c:	2302      	movs	r3, #2
   1349e:	f88d 3004 	strb.w	r3, [sp, #4]
   134a2:	2400      	movs	r4, #0
   134a4:	f88d 4005 	strb.w	r4, [sp, #5]
   134a8:	f88d 4006 	strb.w	r4, [sp, #6]
   134ac:	f88d 4007 	strb.w	r4, [sp, #7]
   134b0:	9b01      	ldr	r3, [sp, #4]
   134b2:	9306      	str	r3, [sp, #24]
   134b4:	4621      	mov	r1, r4
   134b6:	f364 0100 	bfi	r1, r4, #0, #1
   134ba:	f364 0141 	bfi	r1, r4, #1, #1
   134be:	f364 0182 	bfi	r1, r4, #2, #1
   134c2:	f364 01c5 	bfi	r1, r4, #3, #3
   134c6:	2301      	movs	r3, #1
   134c8:	f363 1188 	bfi	r1, r3, #6, #3
   134cc:	2308      	movs	r3, #8
   134ce:	f363 2152 	bfi	r1, r3, #9, #10
   134d2:	f364 41de 	bfi	r1, r4, #19, #12
   134d6:	f364 71df 	bfi	r1, r4, #31, #1
   134da:	4623      	mov	r3, r4
   134dc:	aa06      	add	r2, sp, #24
   134de:	4804      	ldr	r0, [pc, #16]	; (134f0 <k_sys_fatal_error_handler+0x60>)
   134e0:	f7f0 f8f4 	bl	36cc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   134e4:	4620      	mov	r0, r4
   134e6:	f7f3 f8a3 	bl	6630 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   134ea:	bf00      	nop
   134ec:	00023814 	.word	0x00023814
   134f0:	00020578 	.word	0x00020578

000134f4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   134f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   134f8:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   134fc:	f002 0203 	and.w	r2, r2, #3
   13500:	4b02      	ldr	r3, [pc, #8]	; (1350c <SystemCoreClockUpdate+0x18>)
   13502:	40d3      	lsrs	r3, r2
   13504:	4a02      	ldr	r2, [pc, #8]	; (13510 <SystemCoreClockUpdate+0x1c>)
   13506:	6013      	str	r3, [r2, #0]
#endif
}
   13508:	4770      	bx	lr
   1350a:	bf00      	nop
   1350c:	07a12000 	.word	0x07a12000
   13510:	200004d8 	.word	0x200004d8

00013514 <SystemInit>:

void SystemInit(void)
{
   13514:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
   13516:	f00a fe6a 	bl	1e1ee <nrf53_errata_97>
   1351a:	b168      	cbz	r0, 13538 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
   1351c:	4b4e      	ldr	r3, [pc, #312]	; (13658 <SystemInit+0x144>)
   1351e:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
   13522:	b94b      	cbnz	r3, 13538 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
   13524:	4b4c      	ldr	r3, [pc, #304]	; (13658 <SystemInit+0x144>)
   13526:	220d      	movs	r2, #13
   13528:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
   1352c:	2201      	movs	r2, #1
   1352e:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
   13532:	2200      	movs	r2, #0
   13534:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
   13538:	2200      	movs	r2, #0
   1353a:	e00b      	b.n	13554 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   1353c:	f102 0360 	add.w	r3, r2, #96	; 0x60
   13540:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   13544:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
   13548:	00db      	lsls	r3, r3, #3
   1354a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   1354e:	685b      	ldr	r3, [r3, #4]
   13550:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   13552:	3201      	adds	r2, #1
   13554:	2a1f      	cmp	r2, #31
   13556:	d808      	bhi.n	1356a <SystemInit+0x56>
   13558:	f102 0360 	add.w	r3, r2, #96	; 0x60
   1355c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   13560:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   13564:	f1b3 3fff 	cmp.w	r3, #4294967295
   13568:	d1e8      	bne.n	1353c <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
   1356a:	f00a fe18 	bl	1e19e <nrf53_errata_64>
   1356e:	b130      	cbz	r0, 1357e <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
   13570:	4b39      	ldr	r3, [pc, #228]	; (13658 <SystemInit+0x144>)
   13572:	2229      	movs	r2, #41	; 0x29
   13574:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
   13578:	2203      	movs	r2, #3
   1357a:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
   1357e:	f00a fdc2 	bl	1e106 <nrf53_errata_42>
   13582:	b140      	cbz	r0, 13596 <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
   13584:	4b35      	ldr	r3, [pc, #212]	; (1365c <SystemInit+0x148>)
   13586:	4a36      	ldr	r2, [pc, #216]	; (13660 <SystemInit+0x14c>)
   13588:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
   1358c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13590:	2201      	movs	r2, #1
   13592:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
   13596:	f00a fdca 	bl	1e12e <nrf53_errata_46>
   1359a:	b118      	cbz	r0, 135a4 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
   1359c:	4b31      	ldr	r3, [pc, #196]	; (13664 <SystemInit+0x150>)
   1359e:	2200      	movs	r2, #0
   135a0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
   135a4:	f00a fddb 	bl	1e15e <nrf53_errata_49>
   135a8:	b168      	cbz	r0, 135c6 <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
   135aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   135ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   135b2:	f013 0f01 	tst.w	r3, #1
   135b6:	d006      	beq.n	135c6 <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
   135b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   135bc:	2200      	movs	r2, #0
   135be:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
   135c2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
   135c6:	f00a fdde 	bl	1e186 <nrf53_errata_55>
   135ca:	b160      	cbz	r0, 135e6 <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
   135cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   135d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   135d4:	f013 0f01 	tst.w	r3, #1
   135d8:	d005      	beq.n	135e6 <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
   135da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   135de:	f06f 0201 	mvn.w	r2, #1
   135e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
   135e6:	f00a fdee 	bl	1e1c6 <nrf53_errata_69>
   135ea:	b118      	cbz	r0, 135f4 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
   135ec:	4b1a      	ldr	r3, [pc, #104]	; (13658 <SystemInit+0x144>)
   135ee:	2265      	movs	r2, #101	; 0x65
   135f0:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
   135f4:	f00a fe0f 	bl	1e216 <nrf53_errata_140>
   135f8:	b120      	cbz	r0, 13604 <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
   135fa:	4b1a      	ldr	r3, [pc, #104]	; (13664 <SystemInit+0x150>)
   135fc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
   13600:	2b00      	cmp	r3, #0
   13602:	db11      	blt.n	13628 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
   13604:	4a18      	ldr	r2, [pc, #96]	; (13668 <SystemInit+0x154>)
   13606:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1360a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1360e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
   13612:	4a16      	ldr	r2, [pc, #88]	; (1366c <SystemInit+0x158>)
   13614:	6811      	ldr	r1, [r2, #0]
   13616:	4b16      	ldr	r3, [pc, #88]	; (13670 <SystemInit+0x15c>)
   13618:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
   1361c:	69d2      	ldr	r2, [r2, #28]
   1361e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   13622:	f7ff ff67 	bl	134f4 <SystemCoreClockUpdate>
}
   13626:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
   13628:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1362c:	2203      	movs	r2, #3
   1362e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
   13632:	2201      	movs	r2, #1
   13634:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
   13636:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1363a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1363e:	2b00      	cmp	r3, #0
   13640:	d0f9      	beq.n	13636 <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
   13642:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13646:	2200      	movs	r2, #0
   13648:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
   1364c:	2201      	movs	r2, #1
   1364e:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
   13650:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   13654:	e7d6      	b.n	13604 <SystemInit+0xf0>
   13656:	bf00      	nop
   13658:	50004000 	.word	0x50004000
   1365c:	50039000 	.word	0x50039000
   13660:	beef0044 	.word	0xbeef0044
   13664:	50032000 	.word	0x50032000
   13668:	e000ed00 	.word	0xe000ed00
   1366c:	00ff8000 	.word	0x00ff8000
   13670:	50006000 	.word	0x50006000

00013674 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13674:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   13676:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   13678:	fab4 f384 	clz	r3, r4
   1367c:	f1c3 031f 	rsb	r3, r3, #31
   13680:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   13684:	2b00      	cmp	r3, #0
   13686:	db12      	blt.n	136ae <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   13688:	2201      	movs	r2, #1
   1368a:	fa02 f303 	lsl.w	r3, r2, r3
   1368e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13692:	e8d0 2fef 	ldaex	r2, [r0]
   13696:	42a2      	cmp	r2, r4
   13698:	d104      	bne.n	136a4 <nrfx_flag32_alloc+0x30>
   1369a:	e8c0 3fee 	stlex	lr, r3, [r0]
   1369e:	f1be 0f00 	cmp.w	lr, #0
   136a2:	d1f6      	bne.n	13692 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   136a4:	d1e7      	bne.n	13676 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   136a6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   136aa:	4802      	ldr	r0, [pc, #8]	; (136b4 <nrfx_flag32_alloc+0x40>)
}
   136ac:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   136ae:	4802      	ldr	r0, [pc, #8]	; (136b8 <nrfx_flag32_alloc+0x44>)
   136b0:	e7fc      	b.n	136ac <nrfx_flag32_alloc+0x38>
   136b2:	bf00      	nop
   136b4:	0bad0000 	.word	0x0bad0000
   136b8:	0bad0002 	.word	0x0bad0002

000136bc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   136bc:	6803      	ldr	r3, [r0, #0]
   136be:	40cb      	lsrs	r3, r1
   136c0:	f013 0f01 	tst.w	r3, #1
   136c4:	d111      	bne.n	136ea <nrfx_flag32_free+0x2e>
{
   136c6:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   136c8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   136ca:	2301      	movs	r3, #1
   136cc:	408b      	lsls	r3, r1
   136ce:	4313      	orrs	r3, r2
   136d0:	e8d0 cfef 	ldaex	ip, [r0]
   136d4:	4594      	cmp	ip, r2
   136d6:	d104      	bne.n	136e2 <nrfx_flag32_free+0x26>
   136d8:	e8c0 3fee 	stlex	lr, r3, [r0]
   136dc:	f1be 0f00 	cmp.w	lr, #0
   136e0:	d1f6      	bne.n	136d0 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   136e2:	d1f1      	bne.n	136c8 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   136e4:	4802      	ldr	r0, [pc, #8]	; (136f0 <nrfx_flag32_free+0x34>)
}
   136e6:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   136ea:	4802      	ldr	r0, [pc, #8]	; (136f4 <nrfx_flag32_free+0x38>)
}
   136ec:	4770      	bx	lr
   136ee:	bf00      	nop
   136f0:	0bad0000 	.word	0x0bad0000
   136f4:	0bad0004 	.word	0x0bad0004

000136f8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   136f8:	b570      	push	{r4, r5, r6, lr}
   136fa:	b082      	sub	sp, #8
   136fc:	4605      	mov	r5, r0
    switch (domain)
   136fe:	2803      	cmp	r0, #3
   13700:	f200 809e 	bhi.w	13840 <clock_stop+0x148>
   13704:	e8df f000 	tbb	[pc, r0]
   13708:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
   1370c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13710:	2202      	movs	r2, #2
   13712:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13716:	2200      	movs	r2, #0
   13718:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1371c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13720:	2201      	movs	r2, #1
   13722:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13724:	2301      	movs	r3, #1
   13726:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1372a:	429d      	cmp	r5, r3
   1372c:	d02b      	beq.n	13786 <clock_stop+0x8e>
   1372e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13730:	f242 7410 	movw	r4, #10000	; 0x2710
   13734:	e06e      	b.n	13814 <clock_stop+0x11c>
    p_reg->INTENCLR = mask;
   13736:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1373a:	2201      	movs	r2, #1
   1373c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13740:	2100      	movs	r1, #0
   13742:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   13746:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1374a:	605a      	str	r2, [r3, #4]
}
   1374c:	e7ea      	b.n	13724 <clock_stop+0x2c>
    p_reg->INTENCLR = mask;
   1374e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13752:	f44f 7200 	mov.w	r2, #512	; 0x200
   13756:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1375a:	2200      	movs	r2, #0
   1375c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13760:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13764:	2201      	movs	r2, #1
   13766:	625a      	str	r2, [r3, #36]	; 0x24
}
   13768:	e7dc      	b.n	13724 <clock_stop+0x2c>
    p_reg->INTENCLR = mask;
   1376a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1376e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13772:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13776:	2200      	movs	r2, #0
   13778:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1377c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13780:	2201      	movs	r2, #1
   13782:	61da      	str	r2, [r3, #28]
}
   13784:	e7ce      	b.n	13724 <clock_stop+0x2c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   13786:	f10d 0607 	add.w	r6, sp, #7
   1378a:	e7d1      	b.n	13730 <clock_stop+0x38>
            if (p_clk_src != NULL)
   1378c:	b136      	cbz	r6, 1379c <clock_stop+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1378e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13792:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   13796:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1379a:	7033      	strb	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1379c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   137a0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   137a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   137a8:	d144      	bne.n	13834 <clock_stop+0x13c>
    return false;
   137aa:	2300      	movs	r3, #0
   137ac:	e027      	b.n	137fe <clock_stop+0x106>
            if (p_clk_src != NULL)
   137ae:	b136      	cbz	r6, 137be <clock_stop+0xc6>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   137b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   137b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   137b8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   137bc:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   137be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   137c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   137c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   137ca:	d135      	bne.n	13838 <clock_stop+0x140>
    return false;
   137cc:	2300      	movs	r3, #0
   137ce:	e016      	b.n	137fe <clock_stop+0x106>
            if (p_clk_src != NULL)
   137d0:	b136      	cbz	r6, 137e0 <clock_stop+0xe8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   137d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   137d6:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
   137da:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   137de:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   137e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   137e4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
   137e8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   137ec:	d126      	bne.n	1383c <clock_stop+0x144>
    return false;
   137ee:	2300      	movs	r3, #0
   137f0:	e005      	b.n	137fe <clock_stop+0x106>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   137f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   137f6:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
   137fa:	f3c3 4300 	ubfx	r3, r3, #16, #1
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   137fe:	b1fb      	cbz	r3, 13840 <clock_stop+0x148>
   13800:	b11e      	cbz	r6, 1380a <clock_stop+0x112>
   13802:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13806:	2b01      	cmp	r3, #1
   13808:	d11a      	bne.n	13840 <clock_stop+0x148>
   1380a:	2001      	movs	r0, #1
   1380c:	f00a fd12 	bl	1e234 <nrfx_busy_wait>
   13810:	3c01      	subs	r4, #1
   13812:	d015      	beq.n	13840 <clock_stop+0x148>
    switch (domain)
   13814:	2d03      	cmp	r5, #3
   13816:	d80b      	bhi.n	13830 <clock_stop+0x138>
   13818:	a301      	add	r3, pc, #4	; (adr r3, 13820 <clock_stop+0x128>)
   1381a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1381e:	bf00      	nop
   13820:	0001378d 	.word	0x0001378d
   13824:	000137af 	.word	0x000137af
   13828:	000137d1 	.word	0x000137d1
   1382c:	000137f3 	.word	0x000137f3
   13830:	2300      	movs	r3, #0
   13832:	e7e4      	b.n	137fe <clock_stop+0x106>
                return true;
   13834:	2301      	movs	r3, #1
   13836:	e7e2      	b.n	137fe <clock_stop+0x106>
                return true;
   13838:	2301      	movs	r3, #1
   1383a:	e7e0      	b.n	137fe <clock_stop+0x106>
                return true;
   1383c:	2301      	movs	r3, #1
   1383e:	e7de      	b.n	137fe <clock_stop+0x106>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13840:	b002      	add	sp, #8
   13842:	bd70      	pop	{r4, r5, r6, pc}

00013844 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   13844:	4b05      	ldr	r3, [pc, #20]	; (1385c <nrfx_clock_init+0x18>)
   13846:	791b      	ldrb	r3, [r3, #4]
   13848:	b92b      	cbnz	r3, 13856 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   1384a:	4b04      	ldr	r3, [pc, #16]	; (1385c <nrfx_clock_init+0x18>)
   1384c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1384e:	2201      	movs	r2, #1
   13850:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   13852:	4803      	ldr	r0, [pc, #12]	; (13860 <nrfx_clock_init+0x1c>)
   13854:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13856:	4803      	ldr	r0, [pc, #12]	; (13864 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13858:	4770      	bx	lr
   1385a:	bf00      	nop
   1385c:	2000240c 	.word	0x2000240c
   13860:	0bad0000 	.word	0x0bad0000
   13864:	0bad000c 	.word	0x0bad000c

00013868 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   13868:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1386a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1386e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   13872:	b163      	cbz	r3, 1388e <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13874:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13878:	2000      	movs	r0, #0
   1387a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1387e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   13882:	2201      	movs	r2, #1
   13884:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   13888:	4b28      	ldr	r3, [pc, #160]	; (1392c <nrfx_power_clock_irq_handler+0xc4>)
   1388a:	681b      	ldr	r3, [r3, #0]
   1388c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1388e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13892:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   13896:	b1bb      	cbz	r3, 138c8 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13898:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1389c:	2200      	movs	r2, #0
   1389e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   138a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   138a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   138aa:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   138ae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   138b2:	2a01      	cmp	r2, #1
   138b4:	d031      	beq.n	1391a <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
   138b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138ba:	2202      	movs	r2, #2
   138bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   138c0:	4b1a      	ldr	r3, [pc, #104]	; (1392c <nrfx_power_clock_irq_handler+0xc4>)
   138c2:	681b      	ldr	r3, [r3, #0]
   138c4:	2001      	movs	r0, #1
   138c6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138cc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   138d0:	b173      	cbz	r3, 138f0 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138d6:	2200      	movs	r2, #0
   138d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   138dc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   138e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   138e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   138e8:	4b10      	ldr	r3, [pc, #64]	; (1392c <nrfx_power_clock_irq_handler+0xc4>)
   138ea:	681b      	ldr	r3, [r3, #0]
   138ec:	2004      	movs	r0, #4
   138ee:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   138f8:	b173      	cbz	r3, 13918 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138fe:	2200      	movs	r2, #0
   13900:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13904:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   13908:	f44f 7200 	mov.w	r2, #512	; 0x200
   1390c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   13910:	4b06      	ldr	r3, [pc, #24]	; (1392c <nrfx_power_clock_irq_handler+0xc4>)
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	2005      	movs	r0, #5
   13916:	4798      	blx	r3
    }
#endif
}
   13918:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   1391a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1391e:	2202      	movs	r2, #2
   13920:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13924:	2201      	movs	r2, #1
   13926:	609a      	str	r2, [r3, #8]
}
   13928:	e7ce      	b.n	138c8 <nrfx_power_clock_irq_handler+0x60>
   1392a:	bf00      	nop
   1392c:	2000240c 	.word	0x2000240c

00013930 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   13930:	b508      	push	{r3, lr}
   13932:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   13934:	4801      	ldr	r0, [pc, #4]	; (1393c <nrfx_dppi_channel_alloc+0xc>)
   13936:	f7ff fe9d 	bl	13674 <nrfx_flag32_alloc>
}
   1393a:	bd08      	pop	{r3, pc}
   1393c:	200004dc 	.word	0x200004dc

00013940 <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
   13940:	b508      	push	{r3, lr}
   13942:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   13944:	2301      	movs	r3, #1
   13946:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
   13948:	4a03      	ldr	r2, [pc, #12]	; (13958 <nrfx_dppi_channel_free+0x18>)
   1394a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1394e:	4803      	ldr	r0, [pc, #12]	; (1395c <nrfx_dppi_channel_free+0x1c>)
   13950:	f7ff feb4 	bl	136bc <nrfx_flag32_free>
}
   13954:	bd08      	pop	{r3, pc}
   13956:	bf00      	nop
   13958:	50017000 	.word	0x50017000
   1395c:	200004dc 	.word	0x200004dc

00013960 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   13960:	3008      	adds	r0, #8
   13962:	4b03      	ldr	r3, [pc, #12]	; (13970 <pin_in_use+0x10>)
   13964:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13968:	f000 0001 	and.w	r0, r0, #1
   1396c:	4770      	bx	lr
   1396e:	bf00      	nop
   13970:	200004e0 	.word	0x200004e0

00013974 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   13974:	3008      	adds	r0, #8
   13976:	4b03      	ldr	r3, [pc, #12]	; (13984 <pin_in_use_by_te+0x10>)
   13978:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1397c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   13980:	4770      	bx	lr
   13982:	bf00      	nop
   13984:	200004e0 	.word	0x200004e0

00013988 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   13988:	3008      	adds	r0, #8
   1398a:	4b04      	ldr	r3, [pc, #16]	; (1399c <pin_has_trigger+0x14>)
   1398c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13990:	f010 001c 	ands.w	r0, r0, #28
   13994:	bf18      	it	ne
   13996:	2001      	movne	r0, #1
   13998:	4770      	bx	lr
   1399a:	bf00      	nop
   1399c:	200004e0 	.word	0x200004e0

000139a0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   139a0:	3008      	adds	r0, #8
   139a2:	4b03      	ldr	r3, [pc, #12]	; (139b0 <pin_is_output+0x10>)
   139a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   139a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   139ac:	4770      	bx	lr
   139ae:	bf00      	nop
   139b0:	200004e0 	.word	0x200004e0

000139b4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   139b4:	3008      	adds	r0, #8
   139b6:	4b02      	ldr	r3, [pc, #8]	; (139c0 <pin_te_get+0xc>)
   139b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   139bc:	0b40      	lsrs	r0, r0, #13
   139be:	4770      	bx	lr
   139c0:	200004e0 	.word	0x200004e0

000139c4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   139c4:	2200      	movs	r2, #0
   139c6:	e004      	b.n	139d2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   139c8:	f04f 33ff 	mov.w	r3, #4294967295
   139cc:	4283      	cmp	r3, r0
   139ce:	d00f      	beq.n	139f0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   139d0:	3201      	adds	r2, #1
   139d2:	2a2f      	cmp	r2, #47	; 0x2f
   139d4:	d80a      	bhi.n	139ec <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   139d6:	f102 0308 	add.w	r3, r2, #8
   139da:	4906      	ldr	r1, [pc, #24]	; (139f4 <handler_in_use+0x30>)
   139dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   139e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   139e4:	d0f0      	beq.n	139c8 <handler_in_use+0x4>
   139e6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   139ea:	e7ef      	b.n	139cc <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   139ec:	2000      	movs	r0, #0
   139ee:	4770      	bx	lr
            return true;
   139f0:	2001      	movs	r0, #1
}
   139f2:	4770      	bx	lr
   139f4:	200004e0 	.word	0x200004e0

000139f8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   139f8:	2300      	movs	r3, #0
   139fa:	b113      	cbz	r3, 13a02 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   139fc:	f04f 30ff 	mov.w	r0, #4294967295
}
   13a00:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   13a02:	4a07      	ldr	r2, [pc, #28]	; (13a20 <find_handler+0x28>)
   13a04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   13a08:	4282      	cmp	r2, r0
   13a0a:	d001      	beq.n	13a10 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   13a0c:	3301      	adds	r3, #1
   13a0e:	e7f4      	b.n	139fa <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   13a10:	4a03      	ldr	r2, [pc, #12]	; (13a20 <find_handler+0x28>)
   13a12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   13a16:	6852      	ldr	r2, [r2, #4]
   13a18:	428a      	cmp	r2, r1
   13a1a:	d1f7      	bne.n	13a0c <find_handler+0x14>
            return i;
   13a1c:	4618      	mov	r0, r3
   13a1e:	4770      	bx	lr
   13a20:	200004e0 	.word	0x200004e0

00013a24 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13a24:	3008      	adds	r0, #8
   13a26:	4b06      	ldr	r3, [pc, #24]	; (13a40 <channel_handler_get+0x1c>)
   13a28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   13a2c:	f410 7f80 	tst.w	r0, #256	; 0x100
   13a30:	d004      	beq.n	13a3c <channel_handler_get+0x18>
   13a32:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   13a36:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   13a3a:	4770      	bx	lr
        return NULL;
   13a3c:	2000      	movs	r0, #0
}
   13a3e:	4770      	bx	lr
   13a40:	200004e0 	.word	0x200004e0

00013a44 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   13a44:	b570      	push	{r4, r5, r6, lr}
   13a46:	4604      	mov	r4, r0
   13a48:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   13a4a:	f7ff ffeb 	bl	13a24 <channel_handler_get>

    if (handler)
   13a4e:	b120      	cbz	r0, 13a5a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   13a50:	6806      	ldr	r6, [r0, #0]
   13a52:	6842      	ldr	r2, [r0, #4]
   13a54:	4629      	mov	r1, r5
   13a56:	4620      	mov	r0, r4
   13a58:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   13a5a:	4b04      	ldr	r3, [pc, #16]	; (13a6c <call_handler+0x28>)
   13a5c:	689b      	ldr	r3, [r3, #8]
   13a5e:	b123      	cbz	r3, 13a6a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   13a60:	4a02      	ldr	r2, [pc, #8]	; (13a6c <call_handler+0x28>)
   13a62:	68d2      	ldr	r2, [r2, #12]
   13a64:	4629      	mov	r1, r5
   13a66:	4620      	mov	r0, r4
   13a68:	4798      	blx	r3
    }
}
   13a6a:	bd70      	pop	{r4, r5, r6, pc}
   13a6c:	200004e0 	.word	0x200004e0

00013a70 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13a70:	f100 0208 	add.w	r2, r0, #8
   13a74:	4b0e      	ldr	r3, [pc, #56]	; (13ab0 <release_handler+0x40>)
   13a76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   13a7a:	f413 7f80 	tst.w	r3, #256	; 0x100
   13a7e:	d016      	beq.n	13aae <release_handler+0x3e>
{
   13a80:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13a82:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   13a86:	4610      	mov	r0, r2
   13a88:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   13a8c:	4a08      	ldr	r2, [pc, #32]	; (13ab0 <release_handler+0x40>)
   13a8e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   13a92:	4620      	mov	r0, r4
   13a94:	f7ff ff96 	bl	139c4 <handler_in_use>
   13a98:	b100      	cbz	r0, 13a9c <release_handler+0x2c>
}
   13a9a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   13a9c:	4804      	ldr	r0, [pc, #16]	; (13ab0 <release_handler+0x40>)
   13a9e:	2300      	movs	r3, #0
   13aa0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   13aa4:	4621      	mov	r1, r4
   13aa6:	3074      	adds	r0, #116	; 0x74
   13aa8:	f7ff fe08 	bl	136bc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   13aac:	e7f5      	b.n	13a9a <release_handler+0x2a>
   13aae:	4770      	bx	lr
   13ab0:	200004e0 	.word	0x200004e0

00013ab4 <pin_handler_trigger_uninit>:
{
   13ab4:	b510      	push	{r4, lr}
   13ab6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   13ab8:	f7ff ff5c 	bl	13974 <pin_in_use_by_te>
   13abc:	b150      	cbz	r0, 13ad4 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   13abe:	4620      	mov	r0, r4
   13ac0:	f7ff ff78 	bl	139b4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   13ac4:	4b08      	ldr	r3, [pc, #32]	; (13ae8 <pin_handler_trigger_uninit+0x34>)
   13ac6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   13aca:	2200      	movs	r2, #0
   13acc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   13ad0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   13ad4:	4620      	mov	r0, r4
   13ad6:	f7ff ffcb 	bl	13a70 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   13ada:	3408      	adds	r4, #8
   13adc:	4b03      	ldr	r3, [pc, #12]	; (13aec <pin_handler_trigger_uninit+0x38>)
   13ade:	2200      	movs	r2, #0
   13ae0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   13ae4:	bd10      	pop	{r4, pc}
   13ae6:	bf00      	nop
   13ae8:	5000d000 	.word	0x5000d000
   13aec:	200004e0 	.word	0x200004e0

00013af0 <pin_handler_set>:
{
   13af0:	b570      	push	{r4, r5, r6, lr}
   13af2:	b082      	sub	sp, #8
   13af4:	4606      	mov	r6, r0
   13af6:	460c      	mov	r4, r1
   13af8:	4615      	mov	r5, r2
    release_handler(pin);
   13afa:	f7ff ffb9 	bl	13a70 <release_handler>
    if (!handler)
   13afe:	b324      	cbz	r4, 13b4a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   13b00:	4629      	mov	r1, r5
   13b02:	4620      	mov	r0, r4
   13b04:	f7ff ff78 	bl	139f8 <find_handler>
    if (handler_id < 0)
   13b08:	1e03      	subs	r3, r0, #0
   13b0a:	db13      	blt.n	13b34 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   13b0c:	4a10      	ldr	r2, [pc, #64]	; (13b50 <pin_handler_set+0x60>)
   13b0e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   13b12:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   13b16:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13b18:	025b      	lsls	r3, r3, #9
   13b1a:	b29b      	uxth	r3, r3
   13b1c:	f106 0008 	add.w	r0, r6, #8
   13b20:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   13b24:	430b      	orrs	r3, r1
   13b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13b2a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   13b2e:	4809      	ldr	r0, [pc, #36]	; (13b54 <pin_handler_set+0x64>)
}
   13b30:	b002      	add	sp, #8
   13b32:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   13b34:	f10d 0107 	add.w	r1, sp, #7
   13b38:	4807      	ldr	r0, [pc, #28]	; (13b58 <pin_handler_set+0x68>)
   13b3a:	f7ff fd9b 	bl	13674 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   13b3e:	4b05      	ldr	r3, [pc, #20]	; (13b54 <pin_handler_set+0x64>)
   13b40:	4298      	cmp	r0, r3
   13b42:	d1f5      	bne.n	13b30 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   13b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13b48:	e7e0      	b.n	13b0c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   13b4a:	4802      	ldr	r0, [pc, #8]	; (13b54 <pin_handler_set+0x64>)
   13b4c:	e7f0      	b.n	13b30 <pin_handler_set+0x40>
   13b4e:	bf00      	nop
   13b50:	200004e0 	.word	0x200004e0
   13b54:	0bad0000 	.word	0x0bad0000
   13b58:	20000554 	.word	0x20000554

00013b5c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   13b5c:	b538      	push	{r3, r4, r5, lr}
   13b5e:	4604      	mov	r4, r0
    while (mask)
   13b60:	e018      	b.n	13b94 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   13b62:	fa94 f3a4 	rbit	r3, r4
   13b66:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   13b6a:	2201      	movs	r2, #1
   13b6c:	409a      	lsls	r2, r3
   13b6e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13b72:	4a0a      	ldr	r2, [pc, #40]	; (13b9c <gpiote_evt_handle+0x40>)
   13b74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   13b78:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   13b7c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   13b80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13b84:	f3c0 4001 	ubfx	r0, r0, #16, #2
   13b88:	f00a fc13 	bl	1e3b2 <gpiote_polarity_to_trigger>
   13b8c:	4601      	mov	r1, r0
   13b8e:	4628      	mov	r0, r5
   13b90:	f7ff ff58 	bl	13a44 <call_handler>
    while (mask)
   13b94:	2c00      	cmp	r4, #0
   13b96:	d1e4      	bne.n	13b62 <gpiote_evt_handle+0x6>
    }
}
   13b98:	bd38      	pop	{r3, r4, r5, pc}
   13b9a:	bf00      	nop
   13b9c:	5000d000 	.word	0x5000d000

00013ba0 <latch_pending_read_and_check>:
{
   13ba0:	b082      	sub	sp, #8
   13ba2:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   13ba4:	4b10      	ldr	r3, [pc, #64]	; (13be8 <latch_pending_read_and_check+0x48>)
   13ba6:	e893 0003 	ldmia.w	r3, {r0, r1}
   13baa:	ab02      	add	r3, sp, #8
   13bac:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   13bb0:	4660      	mov	r0, ip
   13bb2:	2300      	movs	r3, #0
   13bb4:	e009      	b.n	13bca <latch_pending_read_and_check+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
   13bb6:	aa02      	add	r2, sp, #8
   13bb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   13bbc:	f852 2c08 	ldr.w	r2, [r2, #-8]
   13bc0:	6a11      	ldr	r1, [r2, #32]
   13bc2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   13bc6:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   13bc8:	3301      	adds	r3, #1
   13bca:	2b01      	cmp	r3, #1
   13bcc:	d9f3      	bls.n	13bb6 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   13bce:	2300      	movs	r3, #0
   13bd0:	2b01      	cmp	r3, #1
   13bd2:	d804      	bhi.n	13bde <latch_pending_read_and_check+0x3e>
        if (latch[port_idx])
   13bd4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   13bd8:	b922      	cbnz	r2, 13be4 <latch_pending_read_and_check+0x44>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   13bda:	3301      	adds	r3, #1
   13bdc:	e7f8      	b.n	13bd0 <latch_pending_read_and_check+0x30>
    return false;
   13bde:	2000      	movs	r0, #0
}
   13be0:	b002      	add	sp, #8
   13be2:	4770      	bx	lr
            return true;
   13be4:	2001      	movs	r0, #1
   13be6:	e7fb      	b.n	13be0 <latch_pending_read_and_check+0x40>
   13be8:	00020738 	.word	0x00020738

00013bec <next_sense_cond_call_handler>:
{
   13bec:	b570      	push	{r4, r5, r6, lr}
   13bee:	4604      	mov	r4, r0
   13bf0:	460d      	mov	r5, r1
   13bf2:	4616      	mov	r6, r2
    if (is_level(trigger))
   13bf4:	4608      	mov	r0, r1
   13bf6:	f00a fbde 	bl	1e3b6 <is_level>
   13bfa:	b9c0      	cbnz	r0, 13c2e <next_sense_cond_call_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13bfc:	2e02      	cmp	r6, #2
   13bfe:	d04a      	beq.n	13c96 <next_sense_cond_call_handler+0xaa>
   13c00:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   13c02:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   13c06:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13c08:	2901      	cmp	r1, #1
   13c0a:	d046      	beq.n	13c9a <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
   13c0c:	4929      	ldr	r1, [pc, #164]	; (13cb4 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13c0e:	3280      	adds	r2, #128	; 0x80
   13c10:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   13c14:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13c18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   13c1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   13c20:	2d03      	cmp	r5, #3
   13c22:	d03e      	beq.n	13ca2 <next_sense_cond_call_handler+0xb6>
   13c24:	2e02      	cmp	r6, #2
   13c26:	d03a      	beq.n	13c9e <next_sense_cond_call_handler+0xb2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   13c28:	2e03      	cmp	r6, #3
   13c2a:	d03f      	beq.n	13cac <next_sense_cond_call_handler+0xc0>
}
   13c2c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   13c2e:	4629      	mov	r1, r5
   13c30:	4620      	mov	r0, r4
   13c32:	f7ff ff07 	bl	13a44 <call_handler>
    *p_pin = pin_number & 0x1F;
   13c36:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   13c3a:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13c3c:	2a01      	cmp	r2, #1
   13c3e:	d024      	beq.n	13c8a <next_sense_cond_call_handler+0x9e>
        case 0: return NRF_P0;
   13c40:	4a1c      	ldr	r2, [pc, #112]	; (13cb4 <next_sense_cond_call_handler+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13c42:	3380      	adds	r3, #128	; 0x80
   13c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c48:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   13c4c:	429e      	cmp	r6, r3
   13c4e:	d1ed      	bne.n	13c2c <next_sense_cond_call_handler+0x40>
    *p_pin = pin_number & 0x1F;
   13c50:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   13c54:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13c56:	2a01      	cmp	r2, #1
   13c58:	d019      	beq.n	13c8e <next_sense_cond_call_handler+0xa2>
        case 0: return NRF_P0;
   13c5a:	4916      	ldr	r1, [pc, #88]	; (13cb4 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13c5c:	3380      	adds	r3, #128	; 0x80
   13c5e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   13c62:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   13c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   13c6a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   13c6e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13c70:	2c01      	cmp	r4, #1
   13c72:	d00e      	beq.n	13c92 <next_sense_cond_call_handler+0xa6>
        case 0: return NRF_P0;
   13c74:	490f      	ldr	r1, [pc, #60]	; (13cb4 <next_sense_cond_call_handler+0xc8>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13c76:	3380      	adds	r3, #128	; 0x80
   13c78:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   13c7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13c80:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   13c84:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   13c88:	e7d0      	b.n	13c2c <next_sense_cond_call_handler+0x40>
        case 1: return NRF_P1;
   13c8a:	4a0b      	ldr	r2, [pc, #44]	; (13cb8 <next_sense_cond_call_handler+0xcc>)
   13c8c:	e7d9      	b.n	13c42 <next_sense_cond_call_handler+0x56>
   13c8e:	490a      	ldr	r1, [pc, #40]	; (13cb8 <next_sense_cond_call_handler+0xcc>)
   13c90:	e7e4      	b.n	13c5c <next_sense_cond_call_handler+0x70>
   13c92:	4909      	ldr	r1, [pc, #36]	; (13cb8 <next_sense_cond_call_handler+0xcc>)
   13c94:	e7ef      	b.n	13c76 <next_sense_cond_call_handler+0x8a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13c96:	2003      	movs	r0, #3
   13c98:	e7b3      	b.n	13c02 <next_sense_cond_call_handler+0x16>
   13c9a:	4907      	ldr	r1, [pc, #28]	; (13cb8 <next_sense_cond_call_handler+0xcc>)
   13c9c:	e7b7      	b.n	13c0e <next_sense_cond_call_handler+0x22>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   13c9e:	2d01      	cmp	r5, #1
   13ca0:	d1c2      	bne.n	13c28 <next_sense_cond_call_handler+0x3c>
            call_handler(pin, trigger);
   13ca2:	4629      	mov	r1, r5
   13ca4:	4620      	mov	r0, r4
   13ca6:	f7ff fecd 	bl	13a44 <call_handler>
}
   13caa:	e7bf      	b.n	13c2c <next_sense_cond_call_handler+0x40>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   13cac:	2d02      	cmp	r5, #2
   13cae:	d1bd      	bne.n	13c2c <next_sense_cond_call_handler+0x40>
   13cb0:	e7f7      	b.n	13ca2 <next_sense_cond_call_handler+0xb6>
   13cb2:	bf00      	nop
   13cb4:	50842500 	.word	0x50842500
   13cb8:	50842800 	.word	0x50842800

00013cbc <port_event_handle>:
{
   13cbc:	b570      	push	{r4, r5, r6, lr}
   13cbe:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   13cc0:	4a2d      	ldr	r2, [pc, #180]	; (13d78 <port_event_handle+0xbc>)
   13cc2:	466b      	mov	r3, sp
   13cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
   13cc8:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   13ccc:	2300      	movs	r3, #0
   13cce:	a802      	add	r0, sp, #8
   13cd0:	e009      	b.n	13ce6 <port_event_handle+0x2a>
        *p_masks = gpio_regs[i]->LATCH;
   13cd2:	aa04      	add	r2, sp, #16
   13cd4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   13cd8:	f852 2c10 	ldr.w	r2, [r2, #-16]
   13cdc:	6a11      	ldr	r1, [r2, #32]
   13cde:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   13ce2:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   13ce4:	3301      	adds	r3, #1
   13ce6:	2b01      	cmp	r3, #1
   13ce8:	d9f3      	bls.n	13cd2 <port_event_handle+0x16>
   13cea:	e040      	b.n	13d6e <port_event_handle+0xb2>
        case 1: return NRF_P1;
   13cec:	4e23      	ldr	r6, [pc, #140]	; (13d7c <port_event_handle+0xc0>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13cee:	f105 0380 	add.w	r3, r5, #128	; 0x80
   13cf2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   13cf6:	f3c2 4201 	ubfx	r2, r2, #16, #2
   13cfa:	f7ff ff77 	bl	13bec <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   13cfe:	2301      	movs	r3, #1
   13d00:	40ab      	lsls	r3, r5
   13d02:	6233      	str	r3, [r6, #32]
            while (latch[i])
   13d04:	ab04      	add	r3, sp, #16
   13d06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   13d0a:	f853 0c08 	ldr.w	r0, [r3, #-8]
   13d0e:	b308      	cbz	r0, 13d54 <port_event_handle+0x98>
                uint32_t pin = NRF_CTZ(latch[i]);
   13d10:	fa90 f0a0 	rbit	r0, r0
   13d14:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   13d18:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13d1c:	f100 0208 	add.w	r2, r0, #8
   13d20:	4b17      	ldr	r3, [pc, #92]	; (13d80 <port_event_handle+0xc4>)
   13d22:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   13d26:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   13d2a:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   13d2c:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   13d30:	f10d 0c08 	add.w	ip, sp, #8
   13d34:	2301      	movs	r3, #1
   13d36:	fa03 f202 	lsl.w	r2, r3, r2
   13d3a:	f81c 3005 	ldrb.w	r3, [ip, r5]
   13d3e:	ea23 0302 	bic.w	r3, r3, r2
   13d42:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
   13d46:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   13d4a:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13d4c:	2b01      	cmp	r3, #1
   13d4e:	d0cd      	beq.n	13cec <port_event_handle+0x30>
        case 0: return NRF_P0;
   13d50:	4e0c      	ldr	r6, [pc, #48]	; (13d84 <port_event_handle+0xc8>)
   13d52:	e7cc      	b.n	13cee <port_event_handle+0x32>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13d54:	3401      	adds	r4, #1
   13d56:	2c01      	cmp	r4, #1
   13d58:	d9d4      	bls.n	13d04 <port_event_handle+0x48>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13d5a:	4b0b      	ldr	r3, [pc, #44]	; (13d88 <port_event_handle+0xcc>)
   13d5c:	2200      	movs	r2, #0
   13d5e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   13d62:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
   13d66:	a802      	add	r0, sp, #8
   13d68:	f7ff ff1a 	bl	13ba0 <latch_pending_read_and_check>
   13d6c:	b108      	cbz	r0, 13d72 <port_event_handle+0xb6>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13d6e:	2400      	movs	r4, #0
   13d70:	e7f1      	b.n	13d56 <port_event_handle+0x9a>
}
   13d72:	b004      	add	sp, #16
   13d74:	bd70      	pop	{r4, r5, r6, pc}
   13d76:	bf00      	nop
   13d78:	00020738 	.word	0x00020738
   13d7c:	50842800 	.word	0x50842800
   13d80:	200004e0 	.word	0x200004e0
   13d84:	50842500 	.word	0x50842500
   13d88:	5000d000 	.word	0x5000d000

00013d8c <nrfx_gpiote_input_configure>:
{
   13d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d90:	4604      	mov	r4, r0
   13d92:	4615      	mov	r5, r2
   13d94:	461e      	mov	r6, r3
    if (p_input_config)
   13d96:	b361      	cbz	r1, 13df2 <nrfx_gpiote_input_configure+0x66>
   13d98:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   13d9a:	f00a faf4 	bl	1e386 <pin_is_task_output>
   13d9e:	2800      	cmp	r0, #0
   13da0:	f040 8099 	bne.w	13ed6 <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
   13da4:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   13da8:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13daa:	2b01      	cmp	r3, #1
   13dac:	d043      	beq.n	13e36 <nrfx_gpiote_input_configure+0xaa>
        case 0: return NRF_P0;
   13dae:	484e      	ldr	r0, [pc, #312]	; (13ee8 <nrfx_gpiote_input_configure+0x15c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13db0:	f102 0380 	add.w	r3, r2, #128	; 0x80
   13db4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13db8:	2f00      	cmp	r7, #0
   13dba:	d03e      	beq.n	13e3a <nrfx_gpiote_input_configure+0xae>
   13dbc:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13dbe:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   13dc2:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   13dc6:	2f00      	cmp	r7, #0
   13dc8:	d039      	beq.n	13e3e <nrfx_gpiote_input_configure+0xb2>
   13dca:	7839      	ldrb	r1, [r7, #0]
   13dcc:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13dce:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   13dd0:	3280      	adds	r2, #128	; 0x80
   13dd2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   13dd6:	4a45      	ldr	r2, [pc, #276]	; (13eec <nrfx_gpiote_input_configure+0x160>)
   13dd8:	f104 0108 	add.w	r1, r4, #8
   13ddc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13de0:	f023 0302 	bic.w	r3, r3, #2
   13de4:	b29b      	uxth	r3, r3
   13de6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   13dea:	f043 0301 	orr.w	r3, r3, #1
   13dee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   13df2:	b1bd      	cbz	r5, 13e24 <nrfx_gpiote_input_configure+0x98>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   13df4:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   13df6:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   13dfa:	4620      	mov	r0, r4
   13dfc:	f7ff fdd0 	bl	139a0 <pin_is_output>
   13e00:	b1f8      	cbz	r0, 13e42 <nrfx_gpiote_input_configure+0xb6>
            if (use_evt)
   13e02:	f1b8 0f00 	cmp.w	r8, #0
   13e06:	d168      	bne.n	13eda <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   13e08:	4a38      	ldr	r2, [pc, #224]	; (13eec <nrfx_gpiote_input_configure+0x160>)
   13e0a:	f104 0108 	add.w	r1, r4, #8
   13e0e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13e12:	f023 031c 	bic.w	r3, r3, #28
   13e16:	b29b      	uxth	r3, r3
   13e18:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   13e1c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   13e20:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   13e24:	2e00      	cmp	r6, #0
   13e26:	d05c      	beq.n	13ee2 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   13e28:	6872      	ldr	r2, [r6, #4]
   13e2a:	6831      	ldr	r1, [r6, #0]
   13e2c:	4620      	mov	r0, r4
   13e2e:	f7ff fe5f 	bl	13af0 <pin_handler_set>
}
   13e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   13e36:	482e      	ldr	r0, [pc, #184]	; (13ef0 <nrfx_gpiote_input_configure+0x164>)
   13e38:	e7ba      	b.n	13db0 <nrfx_gpiote_input_configure+0x24>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13e3a:	2100      	movs	r1, #0
   13e3c:	e7bf      	b.n	13dbe <nrfx_gpiote_input_configure+0x32>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   13e3e:	2100      	movs	r1, #0
   13e40:	e7c5      	b.n	13dce <nrfx_gpiote_input_configure+0x42>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   13e42:	4a2a      	ldr	r2, [pc, #168]	; (13eec <nrfx_gpiote_input_configure+0x160>)
   13e44:	f104 0108 	add.w	r1, r4, #8
   13e48:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13e4c:	f023 0320 	bic.w	r3, r3, #32
   13e50:	04db      	lsls	r3, r3, #19
   13e52:	0cdb      	lsrs	r3, r3, #19
   13e54:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   13e58:	f1b8 0f00 	cmp.w	r8, #0
   13e5c:	d0d4      	beq.n	13e08 <nrfx_gpiote_input_configure+0x7c>
                if (!edge)
   13e5e:	2f03      	cmp	r7, #3
   13e60:	d83d      	bhi.n	13ede <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
   13e62:	686b      	ldr	r3, [r5, #4]
   13e64:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   13e66:	b947      	cbnz	r7, 13e7a <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   13e68:	4b22      	ldr	r3, [pc, #136]	; (13ef4 <nrfx_gpiote_input_configure+0x168>)
   13e6a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   13e6e:	2200      	movs	r2, #0
   13e70:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   13e74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   13e78:	e7c6      	b.n	13e08 <nrfx_gpiote_input_configure+0x7c>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   13e7a:	4638      	mov	r0, r7
   13e7c:	f00a fa9a 	bl	1e3b4 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13e80:	4b1c      	ldr	r3, [pc, #112]	; (13ef4 <nrfx_gpiote_input_configure+0x168>)
   13e82:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   13e86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13e8a:	f021 0103 	bic.w	r1, r1, #3
   13e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   13e92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13e96:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   13e9a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   13e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13ea2:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   13ea6:	0221      	lsls	r1, r4, #8
   13ea8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   13eac:	0400      	lsls	r0, r0, #16
   13eae:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13eb2:	4301      	orrs	r1, r0
   13eb4:	ea4c 0101 	orr.w	r1, ip, r1
   13eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13ebc:	036b      	lsls	r3, r5, #13
   13ebe:	b29b      	uxth	r3, r3
   13ec0:	4a0a      	ldr	r2, [pc, #40]	; (13eec <nrfx_gpiote_input_configure+0x160>)
   13ec2:	f104 0108 	add.w	r1, r4, #8
   13ec6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
   13eca:	4303      	orrs	r3, r0
   13ecc:	f043 0320 	orr.w	r3, r3, #32
   13ed0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   13ed4:	e798      	b.n	13e08 <nrfx_gpiote_input_configure+0x7c>
            return NRFX_ERROR_INVALID_PARAM;
   13ed6:	4808      	ldr	r0, [pc, #32]	; (13ef8 <nrfx_gpiote_input_configure+0x16c>)
   13ed8:	e7ab      	b.n	13e32 <nrfx_gpiote_input_configure+0xa6>
                return NRFX_ERROR_INVALID_PARAM;
   13eda:	4807      	ldr	r0, [pc, #28]	; (13ef8 <nrfx_gpiote_input_configure+0x16c>)
   13edc:	e7a9      	b.n	13e32 <nrfx_gpiote_input_configure+0xa6>
                    return NRFX_ERROR_INVALID_PARAM;
   13ede:	4806      	ldr	r0, [pc, #24]	; (13ef8 <nrfx_gpiote_input_configure+0x16c>)
   13ee0:	e7a7      	b.n	13e32 <nrfx_gpiote_input_configure+0xa6>
        err = NRFX_SUCCESS;
   13ee2:	4806      	ldr	r0, [pc, #24]	; (13efc <nrfx_gpiote_input_configure+0x170>)
   13ee4:	e7a5      	b.n	13e32 <nrfx_gpiote_input_configure+0xa6>
   13ee6:	bf00      	nop
   13ee8:	50842500 	.word	0x50842500
   13eec:	200004e0 	.word	0x200004e0
   13ef0:	50842800 	.word	0x50842800
   13ef4:	5000d000 	.word	0x5000d000
   13ef8:	0bad0004 	.word	0x0bad0004
   13efc:	0bad0000 	.word	0x0bad0000

00013f00 <nrfx_gpiote_output_configure>:
{
   13f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f02:	4604      	mov	r4, r0
   13f04:	4615      	mov	r5, r2
    if (p_config)
   13f06:	2900      	cmp	r1, #0
   13f08:	d053      	beq.n	13fb2 <nrfx_gpiote_output_configure+0xb2>
   13f0a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   13f0c:	f00a fa4a 	bl	1e3a4 <pin_is_input>
   13f10:	b128      	cbz	r0, 13f1e <nrfx_gpiote_output_configure+0x1e>
   13f12:	4620      	mov	r0, r4
   13f14:	f7ff fd2e 	bl	13974 <pin_in_use_by_te>
   13f18:	2800      	cmp	r0, #0
   13f1a:	f040 80a2 	bne.w	14062 <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   13f1e:	4620      	mov	r0, r4
   13f20:	f7ff fd32 	bl	13988 <pin_has_trigger>
   13f24:	b118      	cbz	r0, 13f2e <nrfx_gpiote_output_configure+0x2e>
   13f26:	7873      	ldrb	r3, [r6, #1]
   13f28:	2b01      	cmp	r3, #1
   13f2a:	f000 809c 	beq.w	14066 <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   13f2e:	f106 0c01 	add.w	ip, r6, #1
   13f32:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   13f34:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   13f38:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13f3a:	2b01      	cmp	r3, #1
   13f3c:	d057      	beq.n	13fee <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
   13f3e:	494d      	ldr	r1, [pc, #308]	; (14074 <nrfx_gpiote_output_configure+0x174>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   13f40:	f102 0380 	add.w	r3, r2, #128	; 0x80
   13f44:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13f48:	f1bc 0f00 	cmp.w	ip, #0
   13f4c:	d051      	beq.n	13ff2 <nrfx_gpiote_output_configure+0xf2>
   13f4e:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13f50:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13f54:	2f00      	cmp	r7, #0
   13f56:	d04e      	beq.n	13ff6 <nrfx_gpiote_output_configure+0xf6>
   13f58:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13f5c:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13f60:	2e00      	cmp	r6, #0
   13f62:	d04b      	beq.n	13ffc <nrfx_gpiote_output_configure+0xfc>
   13f64:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13f68:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   13f6c:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   13f70:	f1bc 0f00 	cmp.w	ip, #0
   13f74:	d045      	beq.n	14002 <nrfx_gpiote_output_configure+0x102>
   13f76:	7873      	ldrb	r3, [r6, #1]
   13f78:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13f7a:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   13f7e:	2f00      	cmp	r7, #0
   13f80:	d041      	beq.n	14006 <nrfx_gpiote_output_configure+0x106>
   13f82:	f896 c002 	ldrb.w	ip, [r6, #2]
   13f86:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   13f8a:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   13f8e:	2e00      	cmp	r6, #0
   13f90:	d03c      	beq.n	1400c <nrfx_gpiote_output_configure+0x10c>
   13f92:	7836      	ldrb	r6, [r6, #0]
   13f94:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   13f96:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13f98:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   13f9a:	3280      	adds	r2, #128	; 0x80
   13f9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   13fa0:	4a35      	ldr	r2, [pc, #212]	; (14078 <nrfx_gpiote_output_configure+0x178>)
   13fa2:	f104 0108 	add.w	r1, r4, #8
   13fa6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   13faa:	f043 0303 	orr.w	r3, r3, #3
   13fae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   13fb2:	2d00      	cmp	r5, #0
   13fb4:	d059      	beq.n	1406a <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
   13fb6:	4620      	mov	r0, r4
   13fb8:	f00a f9f4 	bl	1e3a4 <pin_is_input>
   13fbc:	2800      	cmp	r0, #0
   13fbe:	d156      	bne.n	1406e <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
   13fc0:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   13fc2:	4a2e      	ldr	r2, [pc, #184]	; (1407c <nrfx_gpiote_output_configure+0x17c>)
   13fc4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   13fc8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
   13fcc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   13fd0:	4929      	ldr	r1, [pc, #164]	; (14078 <nrfx_gpiote_output_configure+0x178>)
   13fd2:	f104 0008 	add.w	r0, r4, #8
   13fd6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   13fda:	f022 0220 	bic.w	r2, r2, #32
   13fde:	04d2      	lsls	r2, r2, #19
   13fe0:	0cd2      	lsrs	r2, r2, #19
   13fe2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   13fe6:	786a      	ldrb	r2, [r5, #1]
   13fe8:	b992      	cbnz	r2, 14010 <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
   13fea:	4825      	ldr	r0, [pc, #148]	; (14080 <nrfx_gpiote_output_configure+0x180>)
}
   13fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   13fee:	4925      	ldr	r1, [pc, #148]	; (14084 <nrfx_gpiote_output_configure+0x184>)
   13ff0:	e7a6      	b.n	13f40 <nrfx_gpiote_output_configure+0x40>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13ff2:	2300      	movs	r3, #0
   13ff4:	e7ac      	b.n	13f50 <nrfx_gpiote_output_configure+0x50>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13ff6:	f04f 0e00 	mov.w	lr, #0
   13ffa:	e7af      	b.n	13f5c <nrfx_gpiote_output_configure+0x5c>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13ffc:	f04f 0e00 	mov.w	lr, #0
   14000:	e7b2      	b.n	13f68 <nrfx_gpiote_output_configure+0x68>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   14002:	2300      	movs	r3, #0
   14004:	e7b9      	b.n	13f7a <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14006:	f04f 0c00 	mov.w	ip, #0
   1400a:	e7be      	b.n	13f8a <nrfx_gpiote_output_configure+0x8a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1400c:	2600      	movs	r6, #0
   1400e:	e7c2      	b.n	13f96 <nrfx_gpiote_output_configure+0x96>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   14010:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14012:	481a      	ldr	r0, [pc, #104]	; (1407c <nrfx_gpiote_output_configure+0x17c>)
   14014:	f503 75a2 	add.w	r5, r3, #324	; 0x144
   14018:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   1401c:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
   14020:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
   14024:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14028:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   1402c:	0221      	lsls	r1, r4, #8
   1402e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14032:	0412      	lsls	r2, r2, #16
   14034:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14038:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1403a:	0539      	lsls	r1, r7, #20
   1403c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14040:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14042:	4332      	orrs	r2, r6
   14044:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14048:	035b      	lsls	r3, r3, #13
   1404a:	b29b      	uxth	r3, r3
   1404c:	4a0a      	ldr	r2, [pc, #40]	; (14078 <nrfx_gpiote_output_configure+0x178>)
   1404e:	3408      	adds	r4, #8
   14050:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
   14054:	430b      	orrs	r3, r1
   14056:	f043 0320 	orr.w	r3, r3, #32
   1405a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   1405e:	4808      	ldr	r0, [pc, #32]	; (14080 <nrfx_gpiote_output_configure+0x180>)
   14060:	e7c4      	b.n	13fec <nrfx_gpiote_output_configure+0xec>
   14062:	4809      	ldr	r0, [pc, #36]	; (14088 <nrfx_gpiote_output_configure+0x188>)
   14064:	e7c2      	b.n	13fec <nrfx_gpiote_output_configure+0xec>
   14066:	4808      	ldr	r0, [pc, #32]	; (14088 <nrfx_gpiote_output_configure+0x188>)
   14068:	e7c0      	b.n	13fec <nrfx_gpiote_output_configure+0xec>
   1406a:	4805      	ldr	r0, [pc, #20]	; (14080 <nrfx_gpiote_output_configure+0x180>)
   1406c:	e7be      	b.n	13fec <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
   1406e:	4806      	ldr	r0, [pc, #24]	; (14088 <nrfx_gpiote_output_configure+0x188>)
   14070:	e7bc      	b.n	13fec <nrfx_gpiote_output_configure+0xec>
   14072:	bf00      	nop
   14074:	50842500 	.word	0x50842500
   14078:	200004e0 	.word	0x200004e0
   1407c:	5000d000 	.word	0x5000d000
   14080:	0bad0000 	.word	0x0bad0000
   14084:	50842800 	.word	0x50842800
   14088:	0bad0004 	.word	0x0bad0004

0001408c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1408c:	4b01      	ldr	r3, [pc, #4]	; (14094 <nrfx_gpiote_global_callback_set+0x8>)
   1408e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   14090:	60d9      	str	r1, [r3, #12]
}
   14092:	4770      	bx	lr
   14094:	200004e0 	.word	0x200004e0

00014098 <nrfx_gpiote_channel_get>:
{
   14098:	b538      	push	{r3, r4, r5, lr}
   1409a:	4604      	mov	r4, r0
   1409c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1409e:	f7ff fc69 	bl	13974 <pin_in_use_by_te>
   140a2:	b140      	cbz	r0, 140b6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   140a4:	f104 0008 	add.w	r0, r4, #8
   140a8:	4b04      	ldr	r3, [pc, #16]	; (140bc <nrfx_gpiote_channel_get+0x24>)
   140aa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   140ae:	0b5b      	lsrs	r3, r3, #13
   140b0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   140b2:	4803      	ldr	r0, [pc, #12]	; (140c0 <nrfx_gpiote_channel_get+0x28>)
}
   140b4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   140b6:	4803      	ldr	r0, [pc, #12]	; (140c4 <nrfx_gpiote_channel_get+0x2c>)
   140b8:	e7fc      	b.n	140b4 <nrfx_gpiote_channel_get+0x1c>
   140ba:	bf00      	nop
   140bc:	200004e0 	.word	0x200004e0
   140c0:	0bad0000 	.word	0x0bad0000
   140c4:	0bad0004 	.word	0x0bad0004

000140c8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   140c8:	4b10      	ldr	r3, [pc, #64]	; (1410c <nrfx_gpiote_init+0x44>)
   140ca:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   140ce:	b10b      	cbz	r3, 140d4 <nrfx_gpiote_init+0xc>
        return err_code;
   140d0:	480f      	ldr	r0, [pc, #60]	; (14110 <nrfx_gpiote_init+0x48>)
}
   140d2:	4770      	bx	lr
{
   140d4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   140d6:	4c0d      	ldr	r4, [pc, #52]	; (1410c <nrfx_gpiote_init+0x44>)
   140d8:	2260      	movs	r2, #96	; 0x60
   140da:	2100      	movs	r1, #0
   140dc:	f104 0010 	add.w	r0, r4, #16
   140e0:	f005 ffe2 	bl	1a0a8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   140e4:	200d      	movs	r0, #13
   140e6:	f7f1 fa73 	bl	55d0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   140ea:	4b0a      	ldr	r3, [pc, #40]	; (14114 <nrfx_gpiote_init+0x4c>)
   140ec:	2200      	movs	r2, #0
   140ee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   140f2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   140f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   140fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   140fe:	2301      	movs	r3, #1
   14100:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14104:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   14106:	4804      	ldr	r0, [pc, #16]	; (14118 <nrfx_gpiote_init+0x50>)
}
   14108:	bd10      	pop	{r4, pc}
   1410a:	bf00      	nop
   1410c:	200004e0 	.word	0x200004e0
   14110:	0bad0005 	.word	0x0bad0005
   14114:	5000d000 	.word	0x5000d000
   14118:	0bad0000 	.word	0x0bad0000

0001411c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1411c:	4b03      	ldr	r3, [pc, #12]	; (1412c <nrfx_gpiote_is_init+0x10>)
   1411e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   14122:	3800      	subs	r0, #0
   14124:	bf18      	it	ne
   14126:	2001      	movne	r0, #1
   14128:	4770      	bx	lr
   1412a:	bf00      	nop
   1412c:	200004e0 	.word	0x200004e0

00014130 <nrfx_gpiote_channel_free>:
{
   14130:	b508      	push	{r3, lr}
   14132:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14134:	4801      	ldr	r0, [pc, #4]	; (1413c <nrfx_gpiote_channel_free+0xc>)
   14136:	f7ff fac1 	bl	136bc <nrfx_flag32_free>
}
   1413a:	bd08      	pop	{r3, pc}
   1413c:	20000550 	.word	0x20000550

00014140 <nrfx_gpiote_channel_alloc>:
{
   14140:	b508      	push	{r3, lr}
   14142:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14144:	4801      	ldr	r0, [pc, #4]	; (1414c <nrfx_gpiote_channel_alloc+0xc>)
   14146:	f7ff fa95 	bl	13674 <nrfx_flag32_alloc>
}
   1414a:	bd08      	pop	{r3, pc}
   1414c:	20000550 	.word	0x20000550

00014150 <nrfx_gpiote_trigger_enable>:
{
   14150:	b538      	push	{r3, r4, r5, lr}
   14152:	4604      	mov	r4, r0
   14154:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14156:	f7ff fc0d 	bl	13974 <pin_in_use_by_te>
   1415a:	b308      	cbz	r0, 141a0 <nrfx_gpiote_trigger_enable+0x50>
   1415c:	4620      	mov	r0, r4
   1415e:	f00a f921 	bl	1e3a4 <pin_is_input>
   14162:	b1e8      	cbz	r0, 141a0 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   14164:	4620      	mov	r0, r4
   14166:	f7ff fc25 	bl	139b4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1416a:	0083      	lsls	r3, r0, #2
   1416c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   14170:	b29b      	uxth	r3, r3
   14172:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   14176:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1417a:	2200      	movs	r2, #0
   1417c:	601a      	str	r2, [r3, #0]
   1417e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14180:	4a20      	ldr	r2, [pc, #128]	; (14204 <nrfx_gpiote_trigger_enable+0xb4>)
   14182:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14186:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1418a:	f043 0301 	orr.w	r3, r3, #1
   1418e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   14192:	b37d      	cbz	r5, 141f4 <nrfx_gpiote_trigger_enable+0xa4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   14194:	2301      	movs	r3, #1
   14196:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1419a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   1419e:	e029      	b.n	141f4 <nrfx_gpiote_trigger_enable+0xa4>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   141a0:	f104 0308 	add.w	r3, r4, #8
   141a4:	4a18      	ldr	r2, [pc, #96]	; (14208 <nrfx_gpiote_trigger_enable+0xb8>)
   141a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   141aa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   141ae:	2b04      	cmp	r3, #4
   141b0:	d010      	beq.n	141d4 <nrfx_gpiote_trigger_enable+0x84>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   141b2:	2b05      	cmp	r3, #5
   141b4:	d01f      	beq.n	141f6 <nrfx_gpiote_trigger_enable+0xa6>
    *p_pin = pin_number & 0x1F;
   141b6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   141ba:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   141bc:	2b01      	cmp	r3, #1
   141be:	d007      	beq.n	141d0 <nrfx_gpiote_trigger_enable+0x80>
        case 0: return NRF_P0;
   141c0:	4b12      	ldr	r3, [pc, #72]	; (1420c <nrfx_gpiote_trigger_enable+0xbc>)
    return p_reg->IN;
   141c2:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   141c4:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   141c6:	f013 0f01 	tst.w	r3, #1
   141ca:	d016      	beq.n	141fa <nrfx_gpiote_trigger_enable+0xaa>
   141cc:	2003      	movs	r0, #3
   141ce:	e002      	b.n	141d6 <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
   141d0:	4b0f      	ldr	r3, [pc, #60]	; (14210 <nrfx_gpiote_trigger_enable+0xc0>)
   141d2:	e7f6      	b.n	141c2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   141d4:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   141d6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   141da:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   141dc:	2c01      	cmp	r4, #1
   141de:	d00e      	beq.n	141fe <nrfx_gpiote_trigger_enable+0xae>
        case 0: return NRF_P0;
   141e0:	490a      	ldr	r1, [pc, #40]	; (1420c <nrfx_gpiote_trigger_enable+0xbc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   141e2:	3280      	adds	r2, #128	; 0x80
   141e4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   141e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   141ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   141f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   141f4:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   141f6:	2002      	movs	r0, #2
   141f8:	e7ed      	b.n	141d6 <nrfx_gpiote_trigger_enable+0x86>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   141fa:	2002      	movs	r0, #2
   141fc:	e7eb      	b.n	141d6 <nrfx_gpiote_trigger_enable+0x86>
        case 1: return NRF_P1;
   141fe:	4904      	ldr	r1, [pc, #16]	; (14210 <nrfx_gpiote_trigger_enable+0xc0>)
   14200:	e7ef      	b.n	141e2 <nrfx_gpiote_trigger_enable+0x92>
   14202:	bf00      	nop
   14204:	5000d000 	.word	0x5000d000
   14208:	200004e0 	.word	0x200004e0
   1420c:	50842500 	.word	0x50842500
   14210:	50842800 	.word	0x50842800

00014214 <nrfx_gpiote_trigger_disable>:
{
   14214:	b510      	push	{r4, lr}
   14216:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14218:	f7ff fbac 	bl	13974 <pin_in_use_by_te>
   1421c:	b1a0      	cbz	r0, 14248 <nrfx_gpiote_trigger_disable+0x34>
   1421e:	4620      	mov	r0, r4
   14220:	f00a f8c0 	bl	1e3a4 <pin_is_input>
   14224:	b180      	cbz	r0, 14248 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   14226:	4620      	mov	r0, r4
   14228:	f7ff fbc4 	bl	139b4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1422c:	2201      	movs	r2, #1
   1422e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   14230:	4b0d      	ldr	r3, [pc, #52]	; (14268 <nrfx_gpiote_trigger_disable+0x54>)
   14232:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14236:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1423a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   1423e:	f022 0203 	bic.w	r2, r2, #3
   14242:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   14246:	e00c      	b.n	14262 <nrfx_gpiote_trigger_disable+0x4e>
    *p_pin = pin_number & 0x1F;
   14248:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1424c:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1424e:	2c01      	cmp	r4, #1
   14250:	d008      	beq.n	14264 <nrfx_gpiote_trigger_disable+0x50>
        case 0: return NRF_P0;
   14252:	4906      	ldr	r1, [pc, #24]	; (1426c <nrfx_gpiote_trigger_disable+0x58>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14254:	3380      	adds	r3, #128	; 0x80
   14256:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1425a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1425e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14262:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   14264:	4902      	ldr	r1, [pc, #8]	; (14270 <nrfx_gpiote_trigger_disable+0x5c>)
   14266:	e7f5      	b.n	14254 <nrfx_gpiote_trigger_disable+0x40>
   14268:	5000d000 	.word	0x5000d000
   1426c:	50842500 	.word	0x50842500
   14270:	50842800 	.word	0x50842800

00014274 <nrfx_gpiote_pin_uninit>:
{
   14274:	b510      	push	{r4, lr}
   14276:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   14278:	f7ff fb72 	bl	13960 <pin_in_use>
   1427c:	b908      	cbnz	r0, 14282 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   1427e:	480d      	ldr	r0, [pc, #52]	; (142b4 <nrfx_gpiote_pin_uninit+0x40>)
}
   14280:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   14282:	4620      	mov	r0, r4
   14284:	f7ff ffc6 	bl	14214 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   14288:	4620      	mov	r0, r4
   1428a:	f7ff fc13 	bl	13ab4 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   1428e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   14292:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14294:	2c01      	cmp	r4, #1
   14296:	d00b      	beq.n	142b0 <nrfx_gpiote_pin_uninit+0x3c>
        case 0: return NRF_P0;
   14298:	4907      	ldr	r1, [pc, #28]	; (142b8 <nrfx_gpiote_pin_uninit+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1429a:	3280      	adds	r2, #128	; 0x80
   1429c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   142a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   142a4:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   142a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    return NRFX_SUCCESS;
   142ac:	4803      	ldr	r0, [pc, #12]	; (142bc <nrfx_gpiote_pin_uninit+0x48>)
}
   142ae:	e7e7      	b.n	14280 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   142b0:	4903      	ldr	r1, [pc, #12]	; (142c0 <nrfx_gpiote_pin_uninit+0x4c>)
   142b2:	e7f2      	b.n	1429a <nrfx_gpiote_pin_uninit+0x26>
   142b4:	0bad0004 	.word	0x0bad0004
   142b8:	50842500 	.word	0x50842500
   142bc:	0bad0000 	.word	0x0bad0000
   142c0:	50842800 	.word	0x50842800

000142c4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   142c4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   142c6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   142c8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   142cc:	2100      	movs	r1, #0
    uint32_t status = 0;
   142ce:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   142d0:	e003      	b.n	142da <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   142d2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   142d4:	3304      	adds	r3, #4
   142d6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   142d8:	3101      	adds	r1, #1
   142da:	2907      	cmp	r1, #7
   142dc:	d814      	bhi.n	14308 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   142de:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
   142e2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
   142e6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   142e8:	2a00      	cmp	r2, #0
   142ea:	d0f2      	beq.n	142d2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   142ec:	4a0c      	ldr	r2, [pc, #48]	; (14320 <nrfx_gpiote_irq_handler+0x5c>)
   142ee:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   142f2:	4210      	tst	r0, r2
   142f4:	d0ed      	beq.n	142d2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   142f6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
   142fa:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   142fe:	2500      	movs	r5, #0
   14300:	6015      	str	r5, [r2, #0]
   14302:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   14304:	4304      	orrs	r4, r0
   14306:	e7e4      	b.n	142d2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14308:	4b05      	ldr	r3, [pc, #20]	; (14320 <nrfx_gpiote_irq_handler+0x5c>)
   1430a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1430e:	b91b      	cbnz	r3, 14318 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   14310:	4620      	mov	r0, r4
   14312:	f7ff fc23 	bl	13b5c <gpiote_evt_handle>
}
   14316:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   14318:	f7ff fcd0 	bl	13cbc <port_event_handle>
   1431c:	e7f8      	b.n	14310 <nrfx_gpiote_irq_handler+0x4c>
   1431e:	bf00      	nop
   14320:	5000d000 	.word	0x5000d000

00014324 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   14324:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14326:	4b08      	ldr	r3, [pc, #32]	; (14348 <nrfx_ipc_init+0x24>)
   14328:	791b      	ldrb	r3, [r3, #4]
   1432a:	b10b      	cbz	r3, 14330 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1432c:	4807      	ldr	r0, [pc, #28]	; (1434c <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   1432e:	bd38      	pop	{r3, r4, r5, pc}
   14330:	460d      	mov	r5, r1
   14332:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   14334:	202a      	movs	r0, #42	; 0x2a
   14336:	f7f1 f94b 	bl	55d0 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1433a:	4b03      	ldr	r3, [pc, #12]	; (14348 <nrfx_ipc_init+0x24>)
   1433c:	2201      	movs	r2, #1
   1433e:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   14340:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   14342:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   14344:	4802      	ldr	r0, [pc, #8]	; (14350 <nrfx_ipc_init+0x2c>)
   14346:	e7f2      	b.n	1432e <nrfx_ipc_init+0xa>
   14348:	20002414 	.word	0x20002414
   1434c:	0bad000c 	.word	0x0bad000c
   14350:	0bad0000 	.word	0x0bad0000

00014354 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   14354:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14356:	2300      	movs	r3, #0
   14358:	e008      	b.n	1436c <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1435a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
   1435e:	b2da      	uxtb	r2, r3
   14360:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   14364:	490d      	ldr	r1, [pc, #52]	; (1439c <nrfx_ipc_config_load+0x48>)
   14366:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1436a:	3301      	adds	r3, #1
   1436c:	2b0f      	cmp	r3, #15
   1436e:	d9f4      	bls.n	1435a <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   14370:	2300      	movs	r3, #0
   14372:	e00a      	b.n	1438a <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   14374:	f103 0210 	add.w	r2, r3, #16
   14378:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1437c:	b2da      	uxtb	r2, r3
   1437e:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   14382:	4906      	ldr	r1, [pc, #24]	; (1439c <nrfx_ipc_config_load+0x48>)
   14384:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14388:	3301      	adds	r3, #1
   1438a:	2b0f      	cmp	r3, #15
   1438c:	d9f2      	bls.n	14374 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1438e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   14392:	4b02      	ldr	r3, [pc, #8]	; (1439c <nrfx_ipc_config_load+0x48>)
   14394:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14398:	bc10      	pop	{r4}
   1439a:	4770      	bx	lr
   1439c:	5002a000 	.word	0x5002a000

000143a0 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   143a0:	2301      	movs	r3, #1
   143a2:	4083      	lsls	r3, r0
   143a4:	4a01      	ldr	r2, [pc, #4]	; (143ac <nrfx_ipc_receive_event_enable+0xc>)
   143a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   143aa:	4770      	bx	lr
   143ac:	5002a000 	.word	0x5002a000

000143b0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   143b0:	2301      	movs	r3, #1
   143b2:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   143b4:	4a01      	ldr	r2, [pc, #4]	; (143bc <nrfx_ipc_receive_event_disable+0xc>)
   143b6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   143ba:	4770      	bx	lr
   143bc:	5002a000 	.word	0x5002a000

000143c0 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   143c0:	b508      	push	{r3, lr}
    return p_reg->INTPEND;
   143c2:	4b0c      	ldr	r3, [pc, #48]	; (143f4 <nrfx_ipc_irq_handler+0x34>)
   143c4:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   143c8:	4602      	mov	r2, r0
    while (bitmask)
   143ca:	e00c      	b.n	143e6 <nrfx_ipc_irq_handler+0x26>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   143cc:	fa92 f3a2 	rbit	r3, r2
   143d0:	fab3 f383 	clz	r3, r3
   143d4:	2101      	movs	r1, #1
   143d6:	4099      	lsls	r1, r3
   143d8:	ea22 0201 	bic.w	r2, r2, r1
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   143dc:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   143de:	4906      	ldr	r1, [pc, #24]	; (143f8 <nrfx_ipc_irq_handler+0x38>)
   143e0:	4419      	add	r1, r3
   143e2:	2300      	movs	r3, #0
   143e4:	600b      	str	r3, [r1, #0]
    while (bitmask)
   143e6:	2a00      	cmp	r2, #0
   143e8:	d1f0      	bne.n	143cc <nrfx_ipc_irq_handler+0xc>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   143ea:	4b04      	ldr	r3, [pc, #16]	; (143fc <nrfx_ipc_irq_handler+0x3c>)
   143ec:	681a      	ldr	r2, [r3, #0]
   143ee:	6899      	ldr	r1, [r3, #8]
   143f0:	4790      	blx	r2
}
   143f2:	bd08      	pop	{r3, pc}
   143f4:	5002a000 	.word	0x5002a000
   143f8:	5002a100 	.word	0x5002a100
   143fc:	20002414 	.word	0x20002414

00014400 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   14400:	f1b0 3fff 	cmp.w	r0, #4294967295
   14404:	d00e      	beq.n	14424 <spim_pin_uninit+0x24>
    *p_pin = pin_number & 0x1F;
   14406:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1440a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1440c:	2801      	cmp	r0, #1
   1440e:	d00a      	beq.n	14426 <spim_pin_uninit+0x26>
        case 0: return NRF_P0;
   14410:	4906      	ldr	r1, [pc, #24]	; (1442c <spim_pin_uninit+0x2c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   14412:	3280      	adds	r2, #128	; 0x80
   14414:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   14418:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1441c:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   14420:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   14424:	4770      	bx	lr
        case 1: return NRF_P1;
   14426:	4902      	ldr	r1, [pc, #8]	; (14430 <spim_pin_uninit+0x30>)
   14428:	e7f3      	b.n	14412 <spim_pin_uninit+0x12>
   1442a:	bf00      	nop
   1442c:	50842500 	.word	0x50842500
   14430:	50842800 	.word	0x50842800

00014434 <set_ss_pin_state>:
#endif

static void set_ss_pin_state(spim_control_block_t * p_cb, bool active)
{
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    if (p_cb->use_hw_ss)
   14434:	7f82      	ldrb	r2, [r0, #30]
   14436:	f012 0f04 	tst.w	r2, #4
   1443a:	d11d      	bne.n	14478 <set_ss_pin_state+0x44>
    {
        return;
    }
#endif

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1443c:	7fc3      	ldrb	r3, [r0, #31]
   1443e:	2bff      	cmp	r3, #255	; 0xff
   14440:	d01a      	beq.n	14478 <set_ss_pin_state+0x44>
    {
        nrf_gpio_pin_write(p_cb->ss_pin,
   14442:	f012 0f02 	tst.w	r2, #2
   14446:	d101      	bne.n	1444c <set_ss_pin_state+0x18>
                           p_cb->ss_active_high ? active : !active);
   14448:	f081 0101 	eor.w	r1, r1, #1
    if (value == 0)
   1444c:	b959      	cbnz	r1, 14466 <set_ss_pin_state+0x32>
    *p_pin = pin_number & 0x1F;
   1444e:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   14452:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14454:	2b01      	cmp	r3, #1
   14456:	d004      	beq.n	14462 <set_ss_pin_state+0x2e>
        case 0: return NRF_P0;
   14458:	4a09      	ldr	r2, [pc, #36]	; (14480 <set_ss_pin_state+0x4c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1445a:	2301      	movs	r3, #1
   1445c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1445e:	60d3      	str	r3, [r2, #12]
}
   14460:	4770      	bx	lr
        case 1: return NRF_P1;
   14462:	4a08      	ldr	r2, [pc, #32]	; (14484 <set_ss_pin_state+0x50>)
   14464:	e7f9      	b.n	1445a <set_ss_pin_state+0x26>
    *p_pin = pin_number & 0x1F;
   14466:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   1446a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1446c:	2b01      	cmp	r3, #1
   1446e:	d004      	beq.n	1447a <set_ss_pin_state+0x46>
        case 0: return NRF_P0;
   14470:	4a03      	ldr	r2, [pc, #12]	; (14480 <set_ss_pin_state+0x4c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14472:	2301      	movs	r3, #1
   14474:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   14476:	6093      	str	r3, [r2, #8]
    }
}
   14478:	4770      	bx	lr
        case 1: return NRF_P1;
   1447a:	4a02      	ldr	r2, [pc, #8]	; (14484 <set_ss_pin_state+0x50>)
   1447c:	e7f9      	b.n	14472 <set_ss_pin_state+0x3e>
   1447e:	bf00      	nop
   14480:	50842500 	.word	0x50842500
   14484:	50842800 	.word	0x50842800

00014488 <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   14488:	b570      	push	{r4, r5, r6, lr}
   1448a:	4604      	mov	r4, r0
   1448c:	460e      	mov	r6, r1
   1448e:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   14490:	6813      	ldr	r3, [r2, #0]
   14492:	b123      	cbz	r3, 1449e <spim_xfer+0x16>
   14494:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
   14498:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1449c:	d106      	bne.n	144ac <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1449e:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   144a0:	b141      	cbz	r1, 144b4 <spim_xfer+0x2c>
   144a2:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   144a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   144aa:	d003      	beq.n	144b4 <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
   144ac:	2300      	movs	r3, #0
   144ae:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   144b0:	4818      	ldr	r0, [pc, #96]	; (14514 <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   144b2:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   144b4:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   144b6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   144ba:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   144be:	6891      	ldr	r1, [r2, #8]
   144c0:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   144c2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   144c6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144ca:	2300      	movs	r3, #0
   144cc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   144d0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
   144d4:	4629      	mov	r1, r5
   144d6:	4620      	mov	r0, r4
   144d8:	f009 ff7b 	bl	1e3d2 <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   144dc:	f015 0208 	ands.w	r2, r5, #8
   144e0:	d101      	bne.n	144e6 <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   144e2:	2301      	movs	r3, #1
   144e4:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
   144e6:	6833      	ldr	r3, [r6, #0]
   144e8:	b14b      	cbz	r3, 144fe <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
   144ea:	f015 0f04 	tst.w	r5, #4
   144ee:	bf0c      	ite	eq
   144f0:	2101      	moveq	r1, #1
   144f2:	2100      	movne	r1, #0
   144f4:	4620      	mov	r0, r4
   144f6:	f009 ff63 	bl	1e3c0 <spim_int_enable>
    return err_code;
   144fa:	4807      	ldr	r0, [pc, #28]	; (14518 <spim_xfer+0x90>)
   144fc:	e7d9      	b.n	144b2 <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   144fe:	b91a      	cbnz	r2, 14508 <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14500:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   14504:	2b00      	cmp	r3, #0
   14506:	d0fb      	beq.n	14500 <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
   14508:	2100      	movs	r1, #0
   1450a:	4630      	mov	r0, r6
   1450c:	f7ff ff92 	bl	14434 <set_ss_pin_state>
    return err_code;
   14510:	4801      	ldr	r0, [pc, #4]	; (14518 <spim_xfer+0x90>)
   14512:	e7ce      	b.n	144b2 <spim_xfer+0x2a>
   14514:	0bad000a 	.word	0x0bad000a
   14518:	0bad0000 	.word	0x0bad0000

0001451c <configure_pins>:
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1451c:	6800      	ldr	r0, [r0, #0]
    if (!p_config->skip_gpio_cfg)
   1451e:	7ccb      	ldrb	r3, [r1, #19]
   14520:	2b00      	cmp	r3, #0
   14522:	f040 80e4 	bne.w	146ee <configure_pins+0x1d2>
{
   14526:	b530      	push	{r4, r5, lr}
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
   14528:	688b      	ldr	r3, [r1, #8]
                    : NRF_GPIO_PIN_S0S1;
   1452a:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   1452e:	d076      	beq.n	1461e <configure_pins+0x102>
   14530:	f04f 0e00 	mov.w	lr, #0
        nrf_gpio_pin_write(p_config->sck_pin,
   14534:	780b      	ldrb	r3, [r1, #0]
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
   14536:	7b0a      	ldrb	r2, [r1, #12]
    if (value == 0)
   14538:	2a01      	cmp	r2, #1
   1453a:	d875      	bhi.n	14628 <configure_pins+0x10c>
    *p_pin = pin_number & 0x1F;
   1453c:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   14540:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14542:	2b01      	cmp	r3, #1
   14544:	d06e      	beq.n	14624 <configure_pins+0x108>
        case 0: return NRF_P0;
   14546:	4a76      	ldr	r2, [pc, #472]	; (14720 <configure_pins+0x204>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14548:	2301      	movs	r3, #1
   1454a:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   1454c:	60d3      	str	r3, [r2, #12]
        nrf_gpio_cfg(p_config->sck_pin,
   1454e:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   14550:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   14554:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14556:	2b01      	cmp	r3, #1
   14558:	d072      	beq.n	14640 <configure_pins+0x124>
        case 0: return NRF_P0;
   1455a:	4c71      	ldr	r4, [pc, #452]	; (14720 <configure_pins+0x204>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1455c:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
   14560:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
   14564:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   14568:	ea4f 220e 	mov.w	r2, lr, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1456c:	f042 0501 	orr.w	r5, r2, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   14570:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   14572:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   14576:	784b      	ldrb	r3, [r1, #1]
   14578:	2bff      	cmp	r3, #255	; 0xff
   1457a:	d01a      	beq.n	145b2 <configure_pins+0x96>
    *p_pin = pin_number & 0x1F;
   1457c:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   14580:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14582:	2b01      	cmp	r3, #1
   14584:	d05e      	beq.n	14644 <configure_pins+0x128>
        case 0: return NRF_P0;
   14586:	4d66      	ldr	r5, [pc, #408]	; (14720 <configure_pins+0x204>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14588:	2301      	movs	r3, #1
   1458a:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   1458c:	60eb      	str	r3, [r5, #12]
            nrf_gpio_cfg(p_config->mosi_pin,
   1458e:	784b      	ldrb	r3, [r1, #1]
    *p_pin = pin_number & 0x1F;
   14590:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   14594:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14596:	2b01      	cmp	r3, #1
   14598:	d056      	beq.n	14648 <configure_pins+0x12c>
        case 0: return NRF_P0;
   1459a:	4c61      	ldr	r4, [pc, #388]	; (14720 <configure_pins+0x204>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1459c:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
   145a0:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
   145a4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   145a8:	f042 0503 	orr.w	r5, r2, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   145ac:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   145ae:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   145b2:	788b      	ldrb	r3, [r1, #2]
   145b4:	2bff      	cmp	r3, #255	; 0xff
   145b6:	d149      	bne.n	1464c <configure_pins+0x130>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   145b8:	78cb      	ldrb	r3, [r1, #3]
   145ba:	2bff      	cmp	r3, #255	; 0xff
   145bc:	d15e      	bne.n	1467c <configure_pins+0x160>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   145be:	7bcb      	ldrb	r3, [r1, #15]
   145c0:	2bff      	cmp	r3, #255	; 0xff
   145c2:	d01b      	beq.n	145fc <configure_pins+0xe0>
    *p_pin = pin_number & 0x1F;
   145c4:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   145c8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   145ca:	2b01      	cmp	r3, #1
   145cc:	f000 8085 	beq.w	146da <configure_pins+0x1be>
        case 0: return NRF_P0;
   145d0:	4d53      	ldr	r5, [pc, #332]	; (14720 <configure_pins+0x204>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   145d2:	2301      	movs	r3, #1
   145d4:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   145d6:	60ab      	str	r3, [r5, #8]
            nrf_gpio_cfg(p_config->dcx_pin,
   145d8:	7bcb      	ldrb	r3, [r1, #15]
    *p_pin = pin_number & 0x1F;
   145da:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   145de:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   145e0:	2b01      	cmp	r3, #1
   145e2:	d07c      	beq.n	146de <configure_pins+0x1c2>
        case 0: return NRF_P0;
   145e4:	4c4e      	ldr	r4, [pc, #312]	; (14720 <configure_pins+0x204>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   145e6:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
   145ea:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
   145ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   145f2:	f042 0203 	orr.w	r2, r2, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   145f6:	431a      	orrs	r2, r3
    reg->PIN_CNF[pin_number] = cnf;
   145f8:	f844 202c 	str.w	r2, [r4, ip, lsl #2]
    if (!p_config->skip_psel_cfg)
   145fc:	7d0b      	ldrb	r3, [r1, #20]
   145fe:	b96b      	cbnz	r3, 1461c <configure_pins+0x100>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   14600:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   14602:	2bff      	cmp	r3, #255	; 0xff
   14604:	d06d      	beq.n	146e2 <configure_pins+0x1c6>
   14606:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   14608:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   1460a:	2bff      	cmp	r3, #255	; 0xff
   1460c:	d06c      	beq.n	146e8 <configure_pins+0x1cc>
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1460e:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSEL.SCK  = sck_pin;
   14610:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   14614:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   14618:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
}
   1461c:	bd30      	pop	{r4, r5, pc}
                    : NRF_GPIO_PIN_S0S1;
   1461e:	f04f 0e03 	mov.w	lr, #3
   14622:	e787      	b.n	14534 <configure_pins+0x18>
        case 1: return NRF_P1;
   14624:	4a3f      	ldr	r2, [pc, #252]	; (14724 <configure_pins+0x208>)
   14626:	e78f      	b.n	14548 <configure_pins+0x2c>
    *p_pin = pin_number & 0x1F;
   14628:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   1462c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1462e:	2b01      	cmp	r3, #1
   14630:	d004      	beq.n	1463c <configure_pins+0x120>
        case 0: return NRF_P0;
   14632:	4a3b      	ldr	r2, [pc, #236]	; (14720 <configure_pins+0x204>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14634:	2301      	movs	r3, #1
   14636:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   14638:	6093      	str	r3, [r2, #8]
}
   1463a:	e788      	b.n	1454e <configure_pins+0x32>
        case 1: return NRF_P1;
   1463c:	4a39      	ldr	r2, [pc, #228]	; (14724 <configure_pins+0x208>)
   1463e:	e7f9      	b.n	14634 <configure_pins+0x118>
   14640:	4c38      	ldr	r4, [pc, #224]	; (14724 <configure_pins+0x208>)
   14642:	e78b      	b.n	1455c <configure_pins+0x40>
   14644:	4d37      	ldr	r5, [pc, #220]	; (14724 <configure_pins+0x208>)
   14646:	e79f      	b.n	14588 <configure_pins+0x6c>
   14648:	4c36      	ldr	r4, [pc, #216]	; (14724 <configure_pins+0x208>)
   1464a:	e7a7      	b.n	1459c <configure_pins+0x80>
            nrf_gpio_cfg(p_config->miso_pin,
   1464c:	f891 c00e 	ldrb.w	ip, [r1, #14]
    *p_pin = pin_number & 0x1F;
   14650:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   14654:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14656:	2b01      	cmp	r3, #1
   14658:	d00e      	beq.n	14678 <configure_pins+0x15c>
        case 0: return NRF_P0;
   1465a:	4d31      	ldr	r5, [pc, #196]	; (14720 <configure_pins+0x204>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1465c:	3480      	adds	r4, #128	; 0x80
   1465e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   14662:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   14666:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1466a:	ea4e 0e8c 	orr.w	lr, lr, ip, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1466e:	ea43 030e 	orr.w	r3, r3, lr
    reg->PIN_CNF[pin_number] = cnf;
   14672:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   14676:	e79f      	b.n	145b8 <configure_pins+0x9c>
        case 1: return NRF_P1;
   14678:	4d2a      	ldr	r5, [pc, #168]	; (14724 <configure_pins+0x208>)
   1467a:	e7ef      	b.n	1465c <configure_pins+0x140>
                               p_config->ss_active_high ? 0 : 1);
   1467c:	790c      	ldrb	r4, [r1, #4]
    if (value == 0)
   1467e:	2c01      	cmp	r4, #1
   14680:	d11d      	bne.n	146be <configure_pins+0x1a2>
    *p_pin = pin_number & 0x1F;
   14682:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   14686:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14688:	2b01      	cmp	r3, #1
   1468a:	d016      	beq.n	146ba <configure_pins+0x19e>
        case 0: return NRF_P0;
   1468c:	4d24      	ldr	r5, [pc, #144]	; (14720 <configure_pins+0x204>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1468e:	2301      	movs	r3, #1
   14690:	40a3      	lsls	r3, r4
    p_reg->OUTCLR = clr_mask;
   14692:	60eb      	str	r3, [r5, #12]
            nrf_gpio_cfg(p_config->ss_pin,
   14694:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
   14696:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   1469a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1469c:	2b01      	cmp	r3, #1
   1469e:	d01a      	beq.n	146d6 <configure_pins+0x1ba>
        case 0: return NRF_P0;
   146a0:	4d1f      	ldr	r5, [pc, #124]	; (14720 <configure_pins+0x204>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   146a2:	3480      	adds	r4, #128	; 0x80
   146a4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   146a8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   146ac:	f042 0c03 	orr.w	ip, r2, #3
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   146b0:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   146b4:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   146b8:	e781      	b.n	145be <configure_pins+0xa2>
        case 1: return NRF_P1;
   146ba:	4d1a      	ldr	r5, [pc, #104]	; (14724 <configure_pins+0x208>)
   146bc:	e7e7      	b.n	1468e <configure_pins+0x172>
    *p_pin = pin_number & 0x1F;
   146be:	f003 041f 	and.w	r4, r3, #31
    return pin_number >> 5;
   146c2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   146c4:	2b01      	cmp	r3, #1
   146c6:	d004      	beq.n	146d2 <configure_pins+0x1b6>
        case 0: return NRF_P0;
   146c8:	4d15      	ldr	r5, [pc, #84]	; (14720 <configure_pins+0x204>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   146ca:	2301      	movs	r3, #1
   146cc:	40a3      	lsls	r3, r4
    p_reg->OUTSET = set_mask;
   146ce:	60ab      	str	r3, [r5, #8]
}
   146d0:	e7e0      	b.n	14694 <configure_pins+0x178>
        case 1: return NRF_P1;
   146d2:	4d14      	ldr	r5, [pc, #80]	; (14724 <configure_pins+0x208>)
   146d4:	e7f9      	b.n	146ca <configure_pins+0x1ae>
   146d6:	4d13      	ldr	r5, [pc, #76]	; (14724 <configure_pins+0x208>)
   146d8:	e7e3      	b.n	146a2 <configure_pins+0x186>
   146da:	4d12      	ldr	r5, [pc, #72]	; (14724 <configure_pins+0x208>)
   146dc:	e779      	b.n	145d2 <configure_pins+0xb6>
   146de:	4c11      	ldr	r4, [pc, #68]	; (14724 <configure_pins+0x208>)
   146e0:	e781      	b.n	145e6 <configure_pins+0xca>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   146e2:	f04f 32ff 	mov.w	r2, #4294967295
   146e6:	e78f      	b.n	14608 <configure_pins+0xec>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   146e8:	f04f 33ff 	mov.w	r3, #4294967295
   146ec:	e78f      	b.n	1460e <configure_pins+0xf2>
    if (!p_config->skip_psel_cfg)
   146ee:	7d0b      	ldrb	r3, [r1, #20]
   146f0:	b9a3      	cbnz	r3, 1471c <configure_pins+0x200>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   146f2:	784b      	ldrb	r3, [r1, #1]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   146f4:	2bff      	cmp	r3, #255	; 0xff
   146f6:	d00b      	beq.n	14710 <configure_pins+0x1f4>
   146f8:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   146fa:	788b      	ldrb	r3, [r1, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   146fc:	2bff      	cmp	r3, #255	; 0xff
   146fe:	d00a      	beq.n	14716 <configure_pins+0x1fa>
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   14700:	7809      	ldrb	r1, [r1, #0]
    p_reg->PSEL.SCK  = sck_pin;
   14702:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   14706:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1470a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
   1470e:	4770      	bx	lr
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   14710:	f04f 32ff 	mov.w	r2, #4294967295
   14714:	e7f1      	b.n	146fa <configure_pins+0x1de>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   14716:	f04f 33ff 	mov.w	r3, #4294967295
   1471a:	e7f1      	b.n	14700 <configure_pins+0x1e4>
   1471c:	4770      	bx	lr
   1471e:	bf00      	nop
   14720:	50842500 	.word	0x50842500
   14724:	50842800 	.word	0x50842800

00014728 <nrfx_spim_init>:
{
   14728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1472a:	460d      	mov	r5, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1472c:	7906      	ldrb	r6, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1472e:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14730:	4939      	ldr	r1, [pc, #228]	; (14818 <nrfx_spim_init+0xf0>)
   14732:	eb01 1146 	add.w	r1, r1, r6, lsl #5
   14736:	7f09      	ldrb	r1, [r1, #28]
   14738:	2900      	cmp	r1, #0
   1473a:	d162      	bne.n	14802 <nrfx_spim_init+0xda>
   1473c:	4604      	mov	r4, r0
    if (
   1473e:	2e00      	cmp	r6, #0
   14740:	d161      	bne.n	14806 <nrfx_spim_init+0xde>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   14742:	68a9      	ldr	r1, [r5, #8]
   14744:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   14748:	d05f      	beq.n	1480a <nrfx_spim_init+0xe2>
   1474a:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   1474e:	d05e      	beq.n	1480e <nrfx_spim_init+0xe6>
        ((p_config->use_hw_ss) &&
   14750:	7c69      	ldrb	r1, [r5, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   14752:	2900      	cmp	r1, #0
   14754:	d15d      	bne.n	14812 <nrfx_spim_init+0xea>
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   14756:	7be9      	ldrb	r1, [r5, #15]
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
   14758:	29ff      	cmp	r1, #255	; 0xff
   1475a:	d001      	beq.n	14760 <nrfx_spim_init+0x38>
        return err_code;
   1475c:	482f      	ldr	r0, [pc, #188]	; (1481c <nrfx_spim_init+0xf4>)
   1475e:	e051      	b.n	14804 <nrfx_spim_init+0xdc>
    p_cb->handler = handler;
   14760:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 14818 <nrfx_spim_init+0xf0>
   14764:	0170      	lsls	r0, r6, #5
   14766:	eb0c 1146 	add.w	r1, ip, r6, lsl #5
   1476a:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context = p_context;
   1476e:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   14770:	7ce8      	ldrb	r0, [r5, #19]
   14772:	7f8a      	ldrb	r2, [r1, #30]
   14774:	f360 0200 	bfi	r2, r0, #0, #1
   14778:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   1477a:	7928      	ldrb	r0, [r5, #4]
   1477c:	b2d2      	uxtb	r2, r2
   1477e:	f360 0241 	bfi	r2, r0, #1, #1
   14782:	778a      	strb	r2, [r1, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
   14784:	7c68      	ldrb	r0, [r5, #17]
   14786:	b2d2      	uxtb	r2, r2
   14788:	f360 0282 	bfi	r2, r0, #2, #1
   1478c:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   1478e:	78eb      	ldrb	r3, [r5, #3]
   14790:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_instance, p_config);
   14792:	4629      	mov	r1, r5
   14794:	4620      	mov	r0, r4
   14796:	f7ff fec1 	bl	1451c <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   1479a:	7c2b      	ldrb	r3, [r5, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
   1479c:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
   147a0:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
   147a2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   147a6:	7b2a      	ldrb	r2, [r5, #12]
   147a8:	7b6b      	ldrb	r3, [r5, #13]
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   147aa:	3b00      	subs	r3, #0
   147ac:	bf18      	it	ne
   147ae:	2301      	movne	r3, #1
    switch (spi_mode)
   147b0:	2a02      	cmp	r2, #2
   147b2:	d020      	beq.n	147f6 <nrfx_spim_init+0xce>
   147b4:	2a03      	cmp	r2, #3
   147b6:	d021      	beq.n	147fc <nrfx_spim_init+0xd4>
   147b8:	2a01      	cmp	r2, #1
   147ba:	d019      	beq.n	147f0 <nrfx_spim_init+0xc8>
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   147bc:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    nrf_spim_orc_set(p_spim, p_config->orc);
   147c0:	79ab      	ldrb	r3, [r5, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   147c2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   147c6:	2307      	movs	r3, #7
   147c8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   147cc:	0173      	lsls	r3, r6, #5
   147ce:	4a12      	ldr	r2, [pc, #72]	; (14818 <nrfx_spim_init+0xf0>)
   147d0:	58d3      	ldr	r3, [r2, r3]
   147d2:	b123      	cbz	r3, 147de <nrfx_spim_init+0xb6>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   147d4:	6820      	ldr	r0, [r4, #0]
   147d6:	f340 3007 	sbfx	r0, r0, #12, #8
   147da:	f7f0 fef9 	bl	55d0 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   147de:	4b0e      	ldr	r3, [pc, #56]	; (14818 <nrfx_spim_init+0xf0>)
   147e0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   147e4:	2300      	movs	r3, #0
   147e6:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   147e8:	2301      	movs	r3, #1
   147ea:	7733      	strb	r3, [r6, #28]
    return err_code;
   147ec:	480c      	ldr	r0, [pc, #48]	; (14820 <nrfx_spim_init+0xf8>)
   147ee:	e009      	b.n	14804 <nrfx_spim_init+0xdc>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   147f0:	f043 0302 	orr.w	r3, r3, #2
        break;
   147f4:	e7e2      	b.n	147bc <nrfx_spim_init+0x94>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   147f6:	f043 0304 	orr.w	r3, r3, #4
        break;
   147fa:	e7df      	b.n	147bc <nrfx_spim_init+0x94>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   147fc:	f043 0306 	orr.w	r3, r3, #6
        break;
   14800:	e7dc      	b.n	147bc <nrfx_spim_init+0x94>
        return err_code;
   14802:	4808      	ldr	r0, [pc, #32]	; (14824 <nrfx_spim_init+0xfc>)
}
   14804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   14806:	4805      	ldr	r0, [pc, #20]	; (1481c <nrfx_spim_init+0xf4>)
   14808:	e7fc      	b.n	14804 <nrfx_spim_init+0xdc>
   1480a:	4804      	ldr	r0, [pc, #16]	; (1481c <nrfx_spim_init+0xf4>)
   1480c:	e7fa      	b.n	14804 <nrfx_spim_init+0xdc>
   1480e:	4803      	ldr	r0, [pc, #12]	; (1481c <nrfx_spim_init+0xf4>)
   14810:	e7f8      	b.n	14804 <nrfx_spim_init+0xdc>
   14812:	4802      	ldr	r0, [pc, #8]	; (1481c <nrfx_spim_init+0xf4>)
   14814:	e7f6      	b.n	14804 <nrfx_spim_init+0xdc>
   14816:	bf00      	nop
   14818:	20002420 	.word	0x20002420
   1481c:	0bad0003 	.word	0x0bad0003
   14820:	0bad0000 	.word	0x0bad0000
   14824:	0bad0005 	.word	0x0bad0005

00014828 <nrfx_spim_uninit>:
{
   14828:	b570      	push	{r4, r5, r6, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1482a:	7904      	ldrb	r4, [r0, #4]
   1482c:	4b24      	ldr	r3, [pc, #144]	; (148c0 <nrfx_spim_uninit+0x98>)
   1482e:	0162      	lsls	r2, r4, #5
   14830:	eb03 1644 	add.w	r6, r3, r4, lsl #5
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   14834:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   14836:	589b      	ldr	r3, [r3, r2]
   14838:	b143      	cbz	r3, 1484c <nrfx_spim_uninit+0x24>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1483a:	f345 3007 	sbfx	r0, r5, #12, #8
   1483e:	f7f0 fed5 	bl	55ec <arch_irq_disable>
    p_reg->INTENCLR = mask;
   14842:	4b20      	ldr	r3, [pc, #128]	; (148c4 <nrfx_spim_uninit+0x9c>)
   14844:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        if (p_cb->transfer_in_progress)
   14848:	7f73      	ldrb	r3, [r6, #29]
   1484a:	b97b      	cbnz	r3, 1486c <nrfx_spim_uninit+0x44>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1484c:	2300      	movs	r3, #0
   1484e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   14852:	4b1b      	ldr	r3, [pc, #108]	; (148c0 <nrfx_spim_uninit+0x98>)
   14854:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   14858:	7f9b      	ldrb	r3, [r3, #30]
   1485a:	f013 0f01 	tst.w	r3, #1
   1485e:	d00a      	beq.n	14876 <nrfx_spim_uninit+0x4e>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   14860:	4b17      	ldr	r3, [pc, #92]	; (148c0 <nrfx_spim_uninit+0x98>)
   14862:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   14866:	2300      	movs	r3, #0
   14868:	7723      	strb	r3, [r4, #28]
}
   1486a:	bd70      	pop	{r4, r5, r6, pc}
            spim_abort(p_spim, p_cb);
   1486c:	4631      	mov	r1, r6
   1486e:	4628      	mov	r0, r5
   14870:	f009 fdc4 	bl	1e3fc <spim_abort>
   14874:	e7ea      	b.n	1484c <nrfx_spim_uninit+0x24>
    return p_reg->PSEL.SCK;
   14876:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1487a:	f7ff fdc1 	bl	14400 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1487e:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   14882:	f7ff fdbd 	bl	14400 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   14886:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1488a:	f7ff fdb9 	bl	14400 <spim_pin_uninit>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1488e:	4b0c      	ldr	r3, [pc, #48]	; (148c0 <nrfx_spim_uninit+0x98>)
   14890:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   14894:	7fdb      	ldrb	r3, [r3, #31]
   14896:	2bff      	cmp	r3, #255	; 0xff
   14898:	d0e2      	beq.n	14860 <nrfx_spim_uninit+0x38>
    *p_pin = pin_number & 0x1F;
   1489a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1489e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   148a0:	2b01      	cmp	r3, #1
   148a2:	d00a      	beq.n	148ba <nrfx_spim_uninit+0x92>
        case 0: return NRF_P0;
   148a4:	4908      	ldr	r1, [pc, #32]	; (148c8 <nrfx_spim_uninit+0xa0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   148a6:	3280      	adds	r2, #128	; 0x80
   148a8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   148ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   148b0:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   148b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   148b8:	e7d2      	b.n	14860 <nrfx_spim_uninit+0x38>
        case 1: return NRF_P1;
   148ba:	4904      	ldr	r1, [pc, #16]	; (148cc <nrfx_spim_uninit+0xa4>)
   148bc:	e7f3      	b.n	148a6 <nrfx_spim_uninit+0x7e>
   148be:	bf00      	nop
   148c0:	20002420 	.word	0x20002420
   148c4:	00080152 	.word	0x00080152
   148c8:	50842500 	.word	0x50842500
   148cc:	50842800 	.word	0x50842800

000148d0 <nrfx_spim_xfer>:

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   148d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   148d4:	f890 c004 	ldrb.w	ip, [r0, #4]
   148d8:	4e14      	ldr	r6, [pc, #80]	; (1492c <nrfx_spim_xfer+0x5c>)
   148da:	eb06 164c 	add.w	r6, r6, ip, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   148de:	7f73      	ldrb	r3, [r6, #29]
   148e0:	bb0b      	cbnz	r3, 14926 <nrfx_spim_xfer+0x56>
   148e2:	4607      	mov	r7, r0
   148e4:	460d      	mov	r5, r1
   148e6:	4690      	mov	r8, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   148e8:	ea4f 134c 	mov.w	r3, ip, lsl #5
   148ec:	4a0f      	ldr	r2, [pc, #60]	; (1492c <nrfx_spim_xfer+0x5c>)
   148ee:	58d3      	ldr	r3, [r2, r3]
   148f0:	b123      	cbz	r3, 148fc <nrfx_spim_xfer+0x2c>
   148f2:	f018 0f14 	tst.w	r8, #20
   148f6:	d101      	bne.n	148fc <nrfx_spim_xfer+0x2c>
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   148f8:	2201      	movs	r2, #1
   148fa:	7772      	strb	r2, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   148fc:	4c0b      	ldr	r4, [pc, #44]	; (1492c <nrfx_spim_xfer+0x5c>)
   148fe:	eb04 1c4c 	add.w	ip, r4, ip, lsl #5
   14902:	f10c 0c0c 	add.w	ip, ip, #12
   14906:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1490a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   1490e:	2101      	movs	r1, #1
   14910:	4630      	mov	r0, r6
   14912:	f7ff fd8f 	bl	14434 <set_ss_pin_state>

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   14916:	4643      	mov	r3, r8
   14918:	462a      	mov	r2, r5
   1491a:	4631      	mov	r1, r6
   1491c:	6838      	ldr	r0, [r7, #0]
   1491e:	f7ff fdb3 	bl	14488 <spim_xfer>
}
   14922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   14926:	4802      	ldr	r0, [pc, #8]	; (14930 <nrfx_spim_xfer+0x60>)
   14928:	e7fb      	b.n	14922 <nrfx_spim_xfer+0x52>
   1492a:	bf00      	nop
   1492c:	20002420 	.word	0x20002420
   14930:	0bad000b 	.word	0x0bad000b

00014934 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   14934:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
   14936:	4902      	ldr	r1, [pc, #8]	; (14940 <nrfx_spim_3_irq_handler+0xc>)
   14938:	4802      	ldr	r0, [pc, #8]	; (14944 <nrfx_spim_3_irq_handler+0x10>)
   1493a:	f009 fd7e 	bl	1e43a <irq_handler>
}
   1493e:	bd08      	pop	{r3, pc}
   14940:	20002420 	.word	0x20002420
   14944:	5000c000 	.word	0x5000c000

00014948 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
   14948:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1494a:	f010 0f01 	tst.w	r0, #1
   1494e:	d108      	bne.n	14962 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   14950:	4806      	ldr	r0, [pc, #24]	; (1496c <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   14952:	f013 0f02 	tst.w	r3, #2
   14956:	d000      	beq.n	1495a <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   14958:	4805      	ldr	r0, [pc, #20]	; (14970 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1495a:	f013 0f04 	tst.w	r3, #4
   1495e:	d102      	bne.n	14966 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   14960:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   14962:	4804      	ldr	r0, [pc, #16]	; (14974 <twi_process_error+0x2c>)
   14964:	e7f5      	b.n	14952 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   14966:	4804      	ldr	r0, [pc, #16]	; (14978 <twi_process_error+0x30>)
    return ret;
   14968:	e7fa      	b.n	14960 <twi_process_error+0x18>
   1496a:	bf00      	nop
   1496c:	0bad0001 	.word	0x0bad0001
   14970:	0bae0001 	.word	0x0bae0001
   14974:	0bae0000 	.word	0x0bae0000
   14978:	0bae0002 	.word	0x0bae0002

0001497c <twim_pins_configure>:

    return transfer_complete;
}

static bool twim_pins_configure(NRF_TWIM_Type * p_twim, nrfx_twim_config_t const * p_config)
{
   1497c:	4684      	mov	ip, r0
    // If both GPIO configuration and pin selection are to be skipped,
    // the pin numbers may be not specified at all, so even validation
    // of those numbers cannot be performed.
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1497e:	7b8b      	ldrb	r3, [r1, #14]
   14980:	b113      	cbz	r3, 14988 <twim_pins_configure+0xc>
   14982:	7bc8      	ldrb	r0, [r1, #15]
   14984:	2800      	cmp	r0, #0
   14986:	d149      	bne.n	14a1c <twim_pins_configure+0xa0>
    }

    nrf_gpio_pin_drive_t drive;

#if NRF_TWIM_HAS_1000_KHZ_FREQ && defined(NRF5340_XXAA)
    if (p_config->frequency >= NRF_TWIM_FREQ_1000K)
   14988:	688a      	ldr	r2, [r1, #8]
   1498a:	f1b2 6f7f 	cmp.w	r2, #267386880	; 0xff00000
   1498e:	d30e      	bcc.n	149ae <twim_pins_configure+0x32>

        uint32_t e0e1_pin_1 = NRF_GPIO_PIN_MAP(1, 2);
        uint32_t e0e1_pin_2 = NRF_GPIO_PIN_MAP(1, 3);

        /* Check whether provided pins have the extra high drive capabilities. */
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
   14990:	680a      	ldr	r2, [r1, #0]
   14992:	2a22      	cmp	r2, #34	; 0x22
   14994:	d006      	beq.n	149a4 <twim_pins_configure+0x28>
   14996:	2a23      	cmp	r2, #35	; 0x23
   14998:	d13c      	bne.n	14a14 <twim_pins_configure+0x98>
            ((p_config->scl != e0e1_pin_2) || (p_config->sda != e0e1_pin_1)))
   1499a:	684a      	ldr	r2, [r1, #4]
   1499c:	2a22      	cmp	r2, #34	; 0x22
   1499e:	d13b      	bne.n	14a18 <twim_pins_configure+0x9c>
        drive = NRF_GPIO_PIN_E0E1;
   149a0:	220b      	movs	r2, #11
   149a2:	e005      	b.n	149b0 <twim_pins_configure+0x34>
        if (((p_config->scl != e0e1_pin_1) || (p_config->sda != e0e1_pin_2)) &&
   149a4:	6848      	ldr	r0, [r1, #4]
   149a6:	2823      	cmp	r0, #35	; 0x23
   149a8:	d1f5      	bne.n	14996 <twim_pins_configure+0x1a>
        drive = NRF_GPIO_PIN_E0E1;
   149aa:	220b      	movs	r2, #11
   149ac:	e000      	b.n	149b0 <twim_pins_configure+0x34>
        }
    }
    else
#endif
    {
        drive = NRF_GPIO_PIN_S0D1;
   149ae:	2206      	movs	r2, #6
{
   149b0:	b510      	push	{r4, lr}

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    if (!p_config->skip_gpio_cfg)
   149b2:	bb0b      	cbnz	r3, 149f8 <twim_pins_configure+0x7c>
    {
        TWIM_PIN_INIT(p_config->scl, drive);
   149b4:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   149b6:	f003 0e1f 	and.w	lr, r3, #31
    return pin_number >> 5;
   149ba:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   149bc:	2b01      	cmp	r3, #1
   149be:	d025      	beq.n	14a0c <twim_pins_configure+0x90>
        case 0: return NRF_P0;
   149c0:	4c17      	ldr	r4, [pc, #92]	; (14a20 <twim_pins_configure+0xa4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   149c2:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
   149c6:	f854 002e 	ldr.w	r0, [r4, lr, lsl #2]
   149ca:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   149ce:	0213      	lsls	r3, r2, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   149d0:	f043 030c 	orr.w	r3, r3, #12
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   149d4:	4318      	orrs	r0, r3
    reg->PIN_CNF[pin_number] = cnf;
   149d6:	f844 002e 	str.w	r0, [r4, lr, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   149da:	684a      	ldr	r2, [r1, #4]
    *p_pin = pin_number & 0x1F;
   149dc:	f002 001f 	and.w	r0, r2, #31
    return pin_number >> 5;
   149e0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   149e2:	2a01      	cmp	r2, #1
   149e4:	d014      	beq.n	14a10 <twim_pins_configure+0x94>
        case 0: return NRF_P0;
   149e6:	4c0e      	ldr	r4, [pc, #56]	; (14a20 <twim_pins_configure+0xa4>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   149e8:	3080      	adds	r0, #128	; 0x80
   149ea:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   149ee:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   149f2:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   149f4:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
    }

    if (!p_config->skip_psel_cfg)
   149f8:	7bc8      	ldrb	r0, [r1, #15]
   149fa:	b930      	cbnz	r0, 14a0a <twim_pins_configure+0x8e>
    {
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   149fc:	680a      	ldr	r2, [r1, #0]
   149fe:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
   14a00:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   14a04:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    }

    return true;
   14a08:	2001      	movs	r0, #1
}
   14a0a:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   14a0c:	4c05      	ldr	r4, [pc, #20]	; (14a24 <twim_pins_configure+0xa8>)
   14a0e:	e7d8      	b.n	149c2 <twim_pins_configure+0x46>
   14a10:	4c04      	ldr	r4, [pc, #16]	; (14a24 <twim_pins_configure+0xa8>)
   14a12:	e7e9      	b.n	149e8 <twim_pins_configure+0x6c>
            return false;
   14a14:	2000      	movs	r0, #0
   14a16:	4770      	bx	lr
   14a18:	2000      	movs	r0, #0
   14a1a:	4770      	bx	lr
}
   14a1c:	4770      	bx	lr
   14a1e:	bf00      	nop
   14a20:	50842500 	.word	0x50842500
   14a24:	50842800 	.word	0x50842800

00014a28 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   14a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a2c:	4605      	mov	r5, r0
   14a2e:	460c      	mov	r4, r1
   14a30:	4616      	mov	r6, r2
   14a32:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   14a34:	2300      	movs	r3, #0
   14a36:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   14a3a:	6853      	ldr	r3, [r2, #4]
   14a3c:	b133      	cbz	r3, 14a4c <twim_xfer+0x24>
   14a3e:	68d3      	ldr	r3, [r2, #12]
   14a40:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   14a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14a48:	f040 8131 	bne.w	14cae <twim_xfer+0x286>
    p_reg->INTENCLR = mask;
   14a4c:	4b9c      	ldr	r3, [pc, #624]	; (14cc0 <twim_xfer+0x298>)
   14a4e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
   14a52:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14a56:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   14a5a:	2b00      	cmp	r3, #0
   14a5c:	d136      	bne.n	14acc <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   14a5e:	f017 0f14 	tst.w	r7, #20
   14a62:	bf0c      	ite	eq
   14a64:	2301      	moveq	r3, #1
   14a66:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   14a68:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
   14a6c:	f105 0c0c 	add.w	ip, r5, #12
   14a70:	46b6      	mov	lr, r6
   14a72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14a76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14a7a:	f8de 3000 	ldr.w	r3, [lr]
   14a7e:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   14a82:	f3c7 1300 	ubfx	r3, r7, #4, #1
   14a86:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
   14a8a:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
   14a8c:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   14a8e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a92:	2300      	movs	r3, #0
   14a94:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   14a98:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   14a9c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14aa0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   14aa4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   14aa8:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
   14aac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   14ab0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
   14ab4:	4639      	mov	r1, r7
   14ab6:	4620      	mov	r0, r4
   14ab8:	f009 fd0f 	bl	1e4da <twim_list_enable_handle>
    switch (p_xfer_desc->type)
   14abc:	7833      	ldrb	r3, [r6, #0]
   14abe:	2b03      	cmp	r3, #3
   14ac0:	f200 80a8 	bhi.w	14c14 <twim_xfer+0x1ec>
   14ac4:	e8df f003 	tbb	[pc, r3]
   14ac8:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14acc:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   14ace:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   14ad2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 14cc4 <twim_xfer+0x29c>
   14ad6:	e081      	b.n	14bdc <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   14ad8:	6933      	ldr	r3, [r6, #16]
   14ada:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   14ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14ae2:	f040 80e7 	bne.w	14cb4 <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
   14ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
   14aea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14aee:	68f2      	ldr	r2, [r6, #12]
   14af0:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14af2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14af6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14afa:	2300      	movs	r3, #0
   14afc:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   14b00:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b04:	2301      	movs	r3, #1
   14b06:	6223      	str	r3, [r4, #32]
   14b08:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14b0a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   14b0e:	2b00      	cmp	r3, #0
   14b10:	d0fb      	beq.n	14b0a <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14b12:	2300      	movs	r3, #0
   14b14:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   14b18:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   14b1c:	6932      	ldr	r2, [r6, #16]
   14b1e:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14b20:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14b24:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   14b28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   14b2c:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   14b2e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   14b30:	f8df 9194 	ldr.w	r9, [pc, #404]	; 14cc8 <twim_xfer+0x2a0>
        break;
   14b34:	e032      	b.n	14b9c <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14b36:	68f2      	ldr	r2, [r6, #12]
   14b38:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14b3a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14b3e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   14b42:	6933      	ldr	r3, [r6, #16]
   14b44:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
   14b48:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   14b4c:	f040 80b5 	bne.w	14cba <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   14b50:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14b52:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14b56:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   14b5a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
   14b5e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14b62:	2302      	movs	r3, #2
   14b64:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b66:	2301      	movs	r3, #1
   14b68:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   14b6a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   14b6c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 14cc8 <twim_xfer+0x2a0>
}
   14b70:	e014      	b.n	14b9c <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14b72:	68f2      	ldr	r2, [r6, #12]
   14b74:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14b76:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14b7a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   14b7e:	f017 0f20 	tst.w	r7, #32
   14b82:	d02e      	beq.n	14be2 <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
   14b84:	f44f 7380 	mov.w	r3, #256	; 0x100
   14b88:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   14b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   14b90:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14b92:	2301      	movs	r3, #1
   14b94:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   14b96:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   14b98:	f8df 912c 	ldr.w	r9, [pc, #300]	; 14cc8 <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   14b9c:	f017 0f08 	tst.w	r7, #8
   14ba0:	d107      	bne.n	14bb2 <twim_xfer+0x18a>
   14ba2:	7832      	ldrb	r2, [r6, #0]
   14ba4:	2a03      	cmp	r2, #3
   14ba6:	d004      	beq.n	14bb2 <twim_xfer+0x18a>
   14ba8:	2201      	movs	r2, #1
   14baa:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
   14bac:	6873      	ldr	r3, [r6, #4]
   14bae:	b903      	cbnz	r3, 14bb2 <twim_xfer+0x18a>
   14bb0:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
   14bb2:	682b      	ldr	r3, [r5, #0]
   14bb4:	b393      	cbz	r3, 14c1c <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   14bb6:	f017 0f04 	tst.w	r7, #4
   14bba:	d001      	beq.n	14bc0 <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
   14bbc:	2300      	movs	r3, #0
   14bbe:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   14bc0:	f017 0f40 	tst.w	r7, #64	; 0x40
   14bc4:	d103      	bne.n	14bce <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   14bc6:	68ab      	ldr	r3, [r5, #8]
   14bc8:	f043 0302 	orr.w	r3, r3, #2
   14bcc:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   14bce:	68ab      	ldr	r3, [r5, #8]
   14bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14bd4:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14bd6:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   14bd8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
   14bdc:	4648      	mov	r0, r9
   14bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
   14be2:	f44f 7300 	mov.w	r3, #512	; 0x200
   14be6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14bea:	2302      	movs	r3, #2
   14bec:	60ab      	str	r3, [r5, #8]
   14bee:	e7d0      	b.n	14b92 <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   14bf0:	68f2      	ldr	r2, [r6, #12]
   14bf2:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14bf4:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14bf8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   14bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14c00:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14c04:	2302      	movs	r3, #2
   14c06:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c08:	2301      	movs	r3, #1
   14c0a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   14c0c:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
   14c0e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 14cc8 <twim_xfer+0x2a0>
}
   14c12:	e7c3      	b.n	14b9c <twim_xfer+0x174>
    switch (p_xfer_desc->type)
   14c14:	2308      	movs	r3, #8
   14c16:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 14ccc <twim_xfer+0x2a4>
   14c1a:	e7bf      	b.n	14b9c <twim_xfer+0x174>
        bool transmission_finished = false;
   14c1c:	4643      	mov	r3, r8
   14c1e:	e000      	b.n	14c22 <twim_xfer+0x1fa>
        } while (!transmission_finished);
   14c20:	bb6b      	cbnz	r3, 14c7e <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c22:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   14c26:	b102      	cbz	r2, 14c2a <twim_xfer+0x202>
                transmission_finished = true;
   14c28:	2301      	movs	r3, #1
   14c2a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   14c2e:	b12a      	cbz	r2, 14c3c <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c30:	2300      	movs	r3, #0
   14c32:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   14c36:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   14c3a:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c3c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   14c40:	2a00      	cmp	r2, #0
   14c42:	d0ed      	beq.n	14c20 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c44:	2200      	movs	r2, #0
   14c46:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   14c4a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c4e:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   14c52:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   14c56:	b112      	cbz	r2, 14c5e <twim_xfer+0x236>
   14c58:	f411 7f00 	tst.w	r1, #512	; 0x200
   14c5c:	d103      	bne.n	14c66 <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c5e:	2301      	movs	r3, #1
   14c60:	6223      	str	r3, [r4, #32]
   14c62:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
   14c64:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   14c66:	2a00      	cmp	r2, #0
   14c68:	d0da      	beq.n	14c20 <twim_xfer+0x1f8>
   14c6a:	f411 7f80 	tst.w	r1, #256	; 0x100
   14c6e:	d0d7      	beq.n	14c20 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c70:	2300      	movs	r3, #0
   14c72:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   14c76:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   14c7a:	4643      	mov	r3, r8
   14c7c:	e7d1      	b.n	14c22 <twim_xfer+0x1fa>
    uint32_t error_source = p_reg->ERRORSRC;
   14c7e:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   14c82:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
   14c86:	2300      	movs	r3, #0
   14c88:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
   14c8c:	b118      	cbz	r0, 14c96 <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
   14c8e:	f7ff fe5b 	bl	14948 <twi_process_error>
   14c92:	4681      	mov	r9, r0
   14c94:	e7a2      	b.n	14bdc <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   14c96:	f017 0f40 	tst.w	r7, #64	; 0x40
   14c9a:	d19f      	bne.n	14bdc <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
   14c9c:	4629      	mov	r1, r5
   14c9e:	4620      	mov	r0, r4
   14ca0:	f009 fbda 	bl	1e458 <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   14ca4:	2800      	cmp	r0, #0
   14ca6:	d199      	bne.n	14bdc <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
   14ca8:	f8df 9024 	ldr.w	r9, [pc, #36]	; 14cd0 <twim_xfer+0x2a8>
   14cac:	e796      	b.n	14bdc <twim_xfer+0x1b4>
        return err_code;
   14cae:	f8df 9024 	ldr.w	r9, [pc, #36]	; 14cd4 <twim_xfer+0x2ac>
   14cb2:	e793      	b.n	14bdc <twim_xfer+0x1b4>
            return err_code;
   14cb4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 14cd4 <twim_xfer+0x2ac>
   14cb8:	e790      	b.n	14bdc <twim_xfer+0x1b4>
            return err_code;
   14cba:	f8df 9018 	ldr.w	r9, [pc, #24]	; 14cd4 <twim_xfer+0x2ac>
   14cbe:	e78d      	b.n	14bdc <twim_xfer+0x1b4>
   14cc0:	019c0202 	.word	0x019c0202
   14cc4:	0bad000b 	.word	0x0bad000b
   14cc8:	0bad0000 	.word	0x0bad0000
   14ccc:	0bad0004 	.word	0x0bad0004
   14cd0:	0bad0001 	.word	0x0bad0001
   14cd4:	0bad000a 	.word	0x0bad000a

00014cd8 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   14cd8:	b530      	push	{r4, r5, lr}
   14cda:	b087      	sub	sp, #28
   14cdc:	4604      	mov	r4, r0
   14cde:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ce0:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   14ce4:	b143      	cbz	r3, 14cf8 <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ce6:	2300      	movs	r3, #0
   14ce8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   14cec:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cf0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   14cf4:	2b00      	cmp	r3, #0
   14cf6:	d061      	beq.n	14dbc <twim_irq_handler+0xe4>
   14cf8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	d07d      	beq.n	14dfc <twim_irq_handler+0x124>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d00:	2300      	movs	r3, #0
   14d02:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   14d06:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   14d0a:	6a2b      	ldr	r3, [r5, #32]
   14d0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   14d10:	d103      	bne.n	14d1a <twim_irq_handler+0x42>
   14d12:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14d16:	2b00      	cmp	r3, #0
   14d18:	d067      	beq.n	14dea <twim_irq_handler+0x112>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   14d1a:	6a2b      	ldr	r3, [r5, #32]
   14d1c:	f013 0f04 	tst.w	r3, #4
   14d20:	d130      	bne.n	14d84 <twim_irq_handler+0xac>
        {
            event.xfer_desc = p_cb->xfer_desc;
   14d22:	f10d 0c04 	add.w	ip, sp, #4
   14d26:	f105 0e0c 	add.w	lr, r5, #12
   14d2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14d2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14d32:	f8de 3000 	ldr.w	r3, [lr]
   14d36:	f8cc 3000 	str.w	r3, [ip]
   14d3a:	2300      	movs	r3, #0
   14d3c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   14d40:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
   14d44:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   14d48:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
   14d4c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14d50:	b113      	cbz	r3, 14d58 <twim_irq_handler+0x80>
   14d52:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14d56:	b1ab      	cbz	r3, 14d84 <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
   14d58:	2300      	movs	r3, #0
   14d5a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
   14d5e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   14d60:	4b52      	ldr	r3, [pc, #328]	; (14eac <twim_irq_handler+0x1d4>)
   14d62:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   14d66:	0b22      	lsrs	r2, r4, #12
   14d68:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   14d6c:	2b00      	cmp	r3, #0
   14d6e:	db09      	blt.n	14d84 <twim_irq_handler+0xac>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14d70:	f002 021f 	and.w	r2, r2, #31
   14d74:	095b      	lsrs	r3, r3, #5
   14d76:	2101      	movs	r1, #1
   14d78:	fa01 f202 	lsl.w	r2, r1, r2
   14d7c:	3360      	adds	r3, #96	; 0x60
   14d7e:	494c      	ldr	r1, [pc, #304]	; (14eb0 <twim_irq_handler+0x1d8>)
   14d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
   14d84:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   14d88:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   14d8c:	f013 0f02 	tst.w	r3, #2
   14d90:	d073      	beq.n	14e7a <twim_irq_handler+0x1a2>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   14d92:	2301      	movs	r3, #1
   14d94:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
   14d98:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14d9c:	b90b      	cbnz	r3, 14da2 <twim_irq_handler+0xca>
    {
        p_cb->busy = false;
   14d9e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   14da2:	6a2b      	ldr	r3, [r5, #32]
   14da4:	f013 0f04 	tst.w	r3, #4
   14da8:	d002      	beq.n	14db0 <twim_irq_handler+0xd8>
   14daa:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14dae:	b11b      	cbz	r3, 14db8 <twim_irq_handler+0xe0>
    {
        p_cb->handler(&event, p_cb->p_context);
   14db0:	682b      	ldr	r3, [r5, #0]
   14db2:	6869      	ldr	r1, [r5, #4]
   14db4:	4668      	mov	r0, sp
   14db6:	4798      	blx	r3
    }
}
   14db8:	b007      	add	sp, #28
   14dba:	bd30      	pop	{r4, r5, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   14dbc:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   14dbe:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   14dc2:	2302      	movs	r3, #2
   14dc4:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14dc6:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   14dc8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14dcc:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   14dd0:	b123      	cbz	r3, 14ddc <twim_irq_handler+0x104>
    return p_reg->SHORTS;
   14dd2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   14dd6:	f413 7f00 	tst.w	r3, #512	; 0x200
   14dda:	d102      	bne.n	14de2 <twim_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ddc:	2301      	movs	r3, #1
   14dde:	6223      	str	r3, [r4, #32]
   14de0:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
   14de2:	2301      	movs	r3, #1
   14de4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
   14de8:	e7e6      	b.n	14db8 <twim_irq_handler+0xe0>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   14dea:	4629      	mov	r1, r5
   14dec:	4620      	mov	r0, r4
   14dee:	f009 fb33 	bl	1e458 <xfer_completeness_check>
   14df2:	f080 0001 	eor.w	r0, r0, #1
   14df6:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   14dfa:	e78e      	b.n	14d1a <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14dfc:	2300      	movs	r3, #0
   14dfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   14e02:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   14e06:	7b2b      	ldrb	r3, [r5, #12]
   14e08:	bb2b      	cbnz	r3, 14e56 <twim_irq_handler+0x17e>
            event.xfer_desc = p_cb->xfer_desc;
   14e0a:	f10d 0c04 	add.w	ip, sp, #4
   14e0e:	f105 0e0c 	add.w	lr, r5, #12
   14e12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14e1a:	f8de 3000 	ldr.w	r3, [lr]
   14e1e:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
   14e22:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   14e26:	2b00      	cmp	r3, #0
   14e28:	d1ac      	bne.n	14d84 <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
   14e2a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   14e2e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   14e30:	4b1e      	ldr	r3, [pc, #120]	; (14eac <twim_irq_handler+0x1d4>)
   14e32:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   14e36:	0b22      	lsrs	r2, r4, #12
   14e38:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   14e3c:	2b00      	cmp	r3, #0
   14e3e:	dba1      	blt.n	14d84 <twim_irq_handler+0xac>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e40:	f002 021f 	and.w	r2, r2, #31
   14e44:	095b      	lsrs	r3, r3, #5
   14e46:	2101      	movs	r1, #1
   14e48:	fa01 f202 	lsl.w	r2, r1, r2
   14e4c:	3360      	adds	r3, #96	; 0x60
   14e4e:	4918      	ldr	r1, [pc, #96]	; (14eb0 <twim_irq_handler+0x1d8>)
   14e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   14e54:	e796      	b.n	14d84 <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
   14e56:	f44f 7300 	mov.w	r3, #512	; 0x200
   14e5a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   14e5e:	f240 2302 	movw	r3, #514	; 0x202
   14e62:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   14e64:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   14e68:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   14e6c:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   14e6e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e72:	2301      	movs	r3, #1
   14e74:	60a3      	str	r3, [r4, #8]
   14e76:	6223      	str	r3, [r4, #32]
            return;
   14e78:	e79e      	b.n	14db8 <twim_irq_handler+0xe0>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   14e7a:	f013 0f04 	tst.w	r3, #4
   14e7e:	d003      	beq.n	14e88 <twim_irq_handler+0x1b0>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   14e80:	2302      	movs	r3, #2
   14e82:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
   14e86:	e787      	b.n	14d98 <twim_irq_handler+0xc0>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   14e88:	f013 0f01 	tst.w	r3, #1
   14e8c:	d003      	beq.n	14e96 <twim_irq_handler+0x1be>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   14e8e:	2303      	movs	r3, #3
   14e90:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
   14e94:	e780      	b.n	14d98 <twim_irq_handler+0xc0>
    else if (p_cb->error)
   14e96:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   14e9a:	b11b      	cbz	r3, 14ea4 <twim_irq_handler+0x1cc>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   14e9c:	2304      	movs	r3, #4
   14e9e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
   14ea2:	e779      	b.n	14d98 <twim_irq_handler+0xc0>
        event.type = NRFX_TWIM_EVT_DONE;
   14ea4:	2300      	movs	r3, #0
   14ea6:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
   14eaa:	e775      	b.n	14d98 <twim_irq_handler+0xc0>
   14eac:	019c0202 	.word	0x019c0202
   14eb0:	e000e100 	.word	0xe000e100

00014eb4 <nrfx_twim_init>:
{
   14eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14eb6:	4604      	mov	r4, r0
   14eb8:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14eba:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   14ebc:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14ebe:	491e      	ldr	r1, [pc, #120]	; (14f38 <nrfx_twim_init+0x84>)
   14ec0:	2034      	movs	r0, #52	; 0x34
   14ec2:	fb00 1106 	mla	r1, r0, r6, r1
   14ec6:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
   14eca:	b109      	cbz	r1, 14ed0 <nrfx_twim_init+0x1c>
        return err_code;
   14ecc:	481b      	ldr	r0, [pc, #108]	; (14f3c <nrfx_twim_init+0x88>)
}
   14ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
   14ed0:	f8df c064 	ldr.w	ip, [pc, #100]	; 14f38 <nrfx_twim_init+0x84>
   14ed4:	fb06 f000 	mul.w	r0, r6, r0
   14ed8:	eb0c 0100 	add.w	r1, ip, r0
   14edc:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context       = p_context;
   14ee0:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
   14ee2:	2300      	movs	r3, #0
   14ee4:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   14ee6:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   14eea:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   14eee:	7b6b      	ldrb	r3, [r5, #13]
   14ef0:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   14ef4:	7bab      	ldrb	r3, [r5, #14]
   14ef6:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
   14efa:	4629      	mov	r1, r5
   14efc:	4638      	mov	r0, r7
   14efe:	f7ff fd3d 	bl	1497c <twim_pins_configure>
   14f02:	b1b0      	cbz	r0, 14f32 <nrfx_twim_init+0x7e>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   14f04:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
   14f06:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
   14f0a:	2334      	movs	r3, #52	; 0x34
   14f0c:	fb06 f303 	mul.w	r3, r6, r3
   14f10:	4a09      	ldr	r2, [pc, #36]	; (14f38 <nrfx_twim_init+0x84>)
   14f12:	58d3      	ldr	r3, [r2, r3]
   14f14:	b123      	cbz	r3, 14f20 <nrfx_twim_init+0x6c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   14f16:	6820      	ldr	r0, [r4, #0]
   14f18:	f340 3007 	sbfx	r0, r0, #12, #8
   14f1c:	f7f0 fb58 	bl	55d0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14f20:	4b05      	ldr	r3, [pc, #20]	; (14f38 <nrfx_twim_init+0x84>)
   14f22:	2234      	movs	r2, #52	; 0x34
   14f24:	fb02 3606 	mla	r6, r2, r6, r3
   14f28:	2301      	movs	r3, #1
   14f2a:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    return err_code;
   14f2e:	4804      	ldr	r0, [pc, #16]	; (14f40 <nrfx_twim_init+0x8c>)
   14f30:	e7cd      	b.n	14ece <nrfx_twim_init+0x1a>
        return NRFX_ERROR_INVALID_PARAM;
   14f32:	4804      	ldr	r0, [pc, #16]	; (14f44 <nrfx_twim_init+0x90>)
   14f34:	e7cb      	b.n	14ece <nrfx_twim_init+0x1a>
   14f36:	bf00      	nop
   14f38:	20002440 	.word	0x20002440
   14f3c:	0bad0005 	.word	0x0bad0005
   14f40:	0bad0000 	.word	0x0bad0000
   14f44:	0bad0004 	.word	0x0bad0004

00014f48 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14f48:	7902      	ldrb	r2, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
   14f4a:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   14f4c:	2106      	movs	r1, #6
   14f4e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   14f52:	4b04      	ldr	r3, [pc, #16]	; (14f64 <nrfx_twim_enable+0x1c>)
   14f54:	2134      	movs	r1, #52	; 0x34
   14f56:	fb01 3302 	mla	r3, r1, r2, r3
   14f5a:	2202      	movs	r2, #2
   14f5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   14f60:	4770      	bx	lr
   14f62:	bf00      	nop
   14f64:	20002440 	.word	0x20002440

00014f68 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14f68:	7901      	ldrb	r1, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   14f6a:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   14f6c:	4b0b      	ldr	r3, [pc, #44]	; (14f9c <nrfx_twim_disable+0x34>)
   14f6e:	2034      	movs	r0, #52	; 0x34
   14f70:	fb00 3301 	mla	r3, r0, r1, r3
   14f74:	2100      	movs	r1, #0
   14f76:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
   14f78:	4809      	ldr	r0, [pc, #36]	; (14fa0 <nrfx_twim_disable+0x38>)
   14f7a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   14f7e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   14f82:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   14f86:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   14f8a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14f8e:	2201      	movs	r2, #1
   14f90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   14f94:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   14f98:	4770      	bx	lr
   14f9a:	bf00      	nop
   14f9c:	20002440 	.word	0x20002440
   14fa0:	019c0202 	.word	0x019c0202

00014fa4 <nrfx_twim_xfer>:
{
   14fa4:	b510      	push	{r4, lr}
   14fa6:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   14fa8:	f890 c004 	ldrb.w	ip, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   14fac:	460a      	mov	r2, r1
   14fae:	6801      	ldr	r1, [r0, #0]
   14fb0:	4c03      	ldr	r4, [pc, #12]	; (14fc0 <nrfx_twim_xfer+0x1c>)
   14fb2:	2034      	movs	r0, #52	; 0x34
   14fb4:	fb00 400c 	mla	r0, r0, ip, r4
   14fb8:	f7ff fd36 	bl	14a28 <twim_xfer>
}
   14fbc:	bd10      	pop	{r4, pc}
   14fbe:	bf00      	nop
   14fc0:	20002440 	.word	0x20002440

00014fc4 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
   14fc4:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   14fc6:	4902      	ldr	r1, [pc, #8]	; (14fd0 <nrfx_twim_1_irq_handler+0xc>)
   14fc8:	4802      	ldr	r0, [pc, #8]	; (14fd4 <nrfx_twim_1_irq_handler+0x10>)
   14fca:	f7ff fe85 	bl	14cd8 <twim_irq_handler>
}
   14fce:	bd08      	pop	{r3, pc}
   14fd0:	20002440 	.word	0x20002440
   14fd4:	50009000 	.word	0x50009000

00014fd8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   14fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
   14fdc:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   14fe0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14fe2:	2801      	cmp	r0, #1
   14fe4:	d039      	beq.n	1505a <nrfx_twi_twim_bus_recover+0x82>
        case 0: return NRF_P0;
   14fe6:	4e29      	ldr	r6, [pc, #164]	; (1508c <nrfx_twi_twim_bus_recover+0xb4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14fe8:	2501      	movs	r5, #1
   14fea:	4095      	lsls	r5, r2
    p_reg->OUTSET = set_mask;
   14fec:	60b5      	str	r5, [r6, #8]
    *p_pin = pin_number & 0x1F;
   14fee:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
   14ff2:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14ff4:	2901      	cmp	r1, #1
   14ff6:	d032      	beq.n	1505e <nrfx_twi_twim_bus_recover+0x86>
        case 0: return NRF_P0;
   14ff8:	4f24      	ldr	r7, [pc, #144]	; (1508c <nrfx_twi_twim_bus_recover+0xb4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14ffa:	f04f 0901 	mov.w	r9, #1
   14ffe:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
   15002:	f8c7 9008 	str.w	r9, [r7, #8]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15006:	3280      	adds	r2, #128	; 0x80
   15008:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   1500c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15010:	f240 600d 	movw	r0, #1549	; 0x60d
   15014:	4301      	orrs	r1, r0
    reg->PIN_CNF[pin_number] = cnf;
   15016:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1501a:	f108 0280 	add.w	r2, r8, #128	; 0x80
   1501e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   15022:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15026:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   15028:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1502c:	2004      	movs	r0, #4
   1502e:	f009 f901 	bl	1e234 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   15032:	2400      	movs	r4, #0
   15034:	2c08      	cmp	r4, #8
   15036:	d814      	bhi.n	15062 <nrfx_twi_twim_bus_recover+0x8a>
    return p_reg->IN;
   15038:	693b      	ldr	r3, [r7, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1503a:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
   1503e:	f013 0f01 	tst.w	r3, #1
   15042:	d10e      	bne.n	15062 <nrfx_twi_twim_bus_recover+0x8a>
    p_reg->OUTCLR = clr_mask;
   15044:	60f5      	str	r5, [r6, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   15046:	2004      	movs	r0, #4
   15048:	f009 f8f4 	bl	1e234 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   1504c:	60b5      	str	r5, [r6, #8]
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   1504e:	2004      	movs	r0, #4
   15050:	f009 f8f0 	bl	1e234 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   15054:	3401      	adds	r4, #1
   15056:	b2e4      	uxtb	r4, r4
   15058:	e7ec      	b.n	15034 <nrfx_twi_twim_bus_recover+0x5c>
        case 1: return NRF_P1;
   1505a:	4e0d      	ldr	r6, [pc, #52]	; (15090 <nrfx_twi_twim_bus_recover+0xb8>)
   1505c:	e7c4      	b.n	14fe8 <nrfx_twi_twim_bus_recover+0x10>
   1505e:	4f0c      	ldr	r7, [pc, #48]	; (15090 <nrfx_twi_twim_bus_recover+0xb8>)
   15060:	e7cb      	b.n	14ffa <nrfx_twi_twim_bus_recover+0x22>
    p_reg->OUTCLR = clr_mask;
   15062:	f8c7 900c 	str.w	r9, [r7, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   15066:	2004      	movs	r0, #4
   15068:	f009 f8e4 	bl	1e234 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   1506c:	f8c7 9008 	str.w	r9, [r7, #8]
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   15070:	2004      	movs	r0, #4
   15072:	f009 f8df 	bl	1e234 <nrfx_busy_wait>
    return p_reg->IN;
   15076:	693b      	ldr	r3, [r7, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15078:	fa23 f808 	lsr.w	r8, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
   1507c:	f018 0f01 	tst.w	r8, #1
   15080:	d002      	beq.n	15088 <nrfx_twi_twim_bus_recover+0xb0>
    {
        return NRFX_SUCCESS;
   15082:	4804      	ldr	r0, [pc, #16]	; (15094 <nrfx_twi_twim_bus_recover+0xbc>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   15084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
   15088:	4803      	ldr	r0, [pc, #12]	; (15098 <nrfx_twi_twim_bus_recover+0xc0>)
   1508a:	e7fb      	b.n	15084 <nrfx_twi_twim_bus_recover+0xac>
   1508c:	50842500 	.word	0x50842500
   15090:	50842800 	.word	0x50842800
   15094:	0bad0000 	.word	0x0bad0000
   15098:	0bad0001 	.word	0x0bad0001

0001509c <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   1509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1509e:	460d      	mov	r5, r1
   150a0:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   150a2:	4b0c      	ldr	r3, [pc, #48]	; (150d4 <metal_generic_dev_open+0x38>)
   150a4:	699c      	ldr	r4, [r3, #24]
   150a6:	e000      	b.n	150aa <metal_generic_dev_open+0xe>
   150a8:	6824      	ldr	r4, [r4, #0]
   150aa:	4b0b      	ldr	r3, [pc, #44]	; (150d8 <metal_generic_dev_open+0x3c>)
   150ac:	429c      	cmp	r4, r3
   150ae:	d00d      	beq.n	150cc <metal_generic_dev_open+0x30>
		dev = metal_container_of(node, struct metal_device, node);
   150b0:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   150b4:	4629      	mov	r1, r5
   150b6:	f854 0c44 	ldr.w	r0, [r4, #-68]
   150ba:	f004 ff96 	bl	19fea <strcmp>
   150be:	2800      	cmp	r0, #0
   150c0:	d1f2      	bne.n	150a8 <metal_generic_dev_open+0xc>
			*device = dev;
   150c2:	603e      	str	r6, [r7, #0]
			return metal_generic_dev_sys_open(dev);
   150c4:	4630      	mov	r0, r6
   150c6:	f009 fb40 	bl	1e74a <metal_generic_dev_sys_open>
   150ca:	e001      	b.n	150d0 <metal_generic_dev_open+0x34>
		}
	}

	return -ENODEV;
   150cc:	f06f 0012 	mvn.w	r0, #18
}
   150d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   150d2:	bf00      	nop
   150d4:	20002474 	.word	0x20002474
   150d8:	2000248c 	.word	0x2000248c

000150dc <metal_bus_find>:
{
   150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150de:	4605      	mov	r5, r0
   150e0:	460f      	mov	r7, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   150e2:	4b0c      	ldr	r3, [pc, #48]	; (15114 <metal_bus_find+0x38>)
   150e4:	689c      	ldr	r4, [r3, #8]
   150e6:	e000      	b.n	150ea <metal_bus_find+0xe>
   150e8:	6824      	ldr	r4, [r4, #0]
   150ea:	4b0b      	ldr	r3, [pc, #44]	; (15118 <metal_bus_find+0x3c>)
   150ec:	429c      	cmp	r4, r3
   150ee:	d00d      	beq.n	1510c <metal_bus_find+0x30>
		bus = metal_container_of(node, struct metal_bus, node);
   150f0:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   150f4:	4629      	mov	r1, r5
   150f6:	f854 0c24 	ldr.w	r0, [r4, #-36]
   150fa:	f004 ff76 	bl	19fea <strcmp>
   150fe:	4603      	mov	r3, r0
   15100:	2800      	cmp	r0, #0
   15102:	d1f1      	bne.n	150e8 <metal_bus_find+0xc>
   15104:	2f00      	cmp	r7, #0
   15106:	d0ef      	beq.n	150e8 <metal_bus_find+0xc>
			*result = bus;
   15108:	603e      	str	r6, [r7, #0]
			return 0;
   1510a:	e001      	b.n	15110 <metal_bus_find+0x34>
	return -ENOENT;
   1510c:	f06f 0301 	mvn.w	r3, #1
}
   15110:	4618      	mov	r0, r3
   15112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15114:	20002474 	.word	0x20002474
   15118:	2000247c 	.word	0x2000247c

0001511c <metal_bus_register>:
	if (!bus || !bus->name || !strlen(bus->name))
   1511c:	b380      	cbz	r0, 15180 <metal_bus_register+0x64>
{
   1511e:	b510      	push	{r4, lr}
   15120:	4604      	mov	r4, r0
	if (!bus || !bus->name || !strlen(bus->name))
   15122:	6800      	ldr	r0, [r0, #0]
   15124:	b310      	cbz	r0, 1516c <metal_bus_register+0x50>
   15126:	f004 ff4d 	bl	19fc4 <strlen>
   1512a:	b1f8      	cbz	r0, 1516c <metal_bus_register+0x50>
	if (metal_bus_find(bus->name, NULL) == 0)
   1512c:	2100      	movs	r1, #0
   1512e:	6820      	ldr	r0, [r4, #0]
   15130:	f7ff ffd4 	bl	150dc <metal_bus_find>
   15134:	b1e8      	cbz	r0, 15172 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   15136:	f104 031c 	add.w	r3, r4, #28
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
   1513a:	6223      	str	r3, [r4, #32]
	list->next = list;
   1513c:	61e3      	str	r3, [r4, #28]
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1513e:	f104 0224 	add.w	r2, r4, #36	; 0x24
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   15142:	4b11      	ldr	r3, [pc, #68]	; (15188 <metal_bus_register+0x6c>)
   15144:	68d9      	ldr	r1, [r3, #12]
   15146:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   15148:	f103 0008 	add.w	r0, r3, #8
   1514c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->next->prev = new_node;
   1514e:	60da      	str	r2, [r3, #12]
	new_node->prev->next = new_node;
   15150:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   15152:	781b      	ldrb	r3, [r3, #0]
   15154:	2b06      	cmp	r3, #6
   15156:	d90f      	bls.n	15178 <metal_bus_register+0x5c>
   15158:	f1a0 0308 	sub.w	r3, r0, #8
   1515c:	685b      	ldr	r3, [r3, #4]
   1515e:	b16b      	cbz	r3, 1517c <metal_bus_register+0x60>
   15160:	6822      	ldr	r2, [r4, #0]
   15162:	490a      	ldr	r1, [pc, #40]	; (1518c <metal_bus_register+0x70>)
   15164:	2007      	movs	r0, #7
   15166:	4798      	blx	r3
	return 0;
   15168:	2000      	movs	r0, #0
   1516a:	e006      	b.n	1517a <metal_bus_register+0x5e>
		return -EINVAL;
   1516c:	f06f 0015 	mvn.w	r0, #21
   15170:	e003      	b.n	1517a <metal_bus_register+0x5e>
		return -EEXIST;
   15172:	f06f 0010 	mvn.w	r0, #16
   15176:	e000      	b.n	1517a <metal_bus_register+0x5e>
	return 0;
   15178:	2000      	movs	r0, #0
}
   1517a:	bd10      	pop	{r4, pc}
	return 0;
   1517c:	2000      	movs	r0, #0
   1517e:	e7fc      	b.n	1517a <metal_bus_register+0x5e>
		return -EINVAL;
   15180:	f06f 0015 	mvn.w	r0, #21
}
   15184:	4770      	bx	lr
   15186:	bf00      	nop
   15188:	20002474 	.word	0x20002474
   1518c:	00023834 	.word	0x00023834

00015190 <metal_register_generic_device>:
{
   15190:	b510      	push	{r4, lr}
   15192:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   15194:	6800      	ldr	r0, [r0, #0]
   15196:	b198      	cbz	r0, 151c0 <metal_register_generic_device+0x30>
   15198:	f004 ff14 	bl	19fc4 <strlen>
   1519c:	b180      	cbz	r0, 151c0 <metal_register_generic_device+0x30>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
   1519e:	68a3      	ldr	r3, [r4, #8]
	if (!device->name || !strlen(device->name) ||
   151a0:	2b01      	cmp	r3, #1
   151a2:	d80d      	bhi.n	151c0 <metal_register_generic_device+0x30>
	device->bus = &metal_generic_bus;
   151a4:	4b08      	ldr	r3, [pc, #32]	; (151c8 <metal_register_generic_device+0x38>)
   151a6:	6063      	str	r3, [r4, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
   151a8:	f104 0144 	add.w	r1, r4, #68	; 0x44
	new_node->prev = node->prev;
   151ac:	4b07      	ldr	r3, [pc, #28]	; (151cc <metal_register_generic_device+0x3c>)
   151ae:	69da      	ldr	r2, [r3, #28]
   151b0:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next = node;
   151b2:	f103 0018 	add.w	r0, r3, #24
   151b6:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->next->prev = new_node;
   151b8:	61d9      	str	r1, [r3, #28]
	new_node->prev->next = new_node;
   151ba:	6011      	str	r1, [r2, #0]
	return 0;
   151bc:	2000      	movs	r0, #0
}
   151be:	bd10      	pop	{r4, pc}
		return -EINVAL;
   151c0:	f06f 0015 	mvn.w	r0, #21
   151c4:	e7fb      	b.n	151be <metal_register_generic_device+0x2e>
   151c6:	bf00      	nop
   151c8:	2000055c 	.word	0x2000055c
   151cc:	20002474 	.word	0x20002474

000151d0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   151d0:	b538      	push	{r3, r4, r5, lr}
   151d2:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   151d4:	4c0c      	ldr	r4, [pc, #48]	; (15208 <metal_init+0x38>)
   151d6:	2220      	movs	r2, #32
   151d8:	2100      	movs	r1, #0
   151da:	4620      	mov	r0, r4
   151dc:	f004 ff64 	bl	1a0a8 <memset>

	_metal.common.log_handler   = params->log_handler;
   151e0:	682b      	ldr	r3, [r5, #0]
   151e2:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   151e4:	792a      	ldrb	r2, [r5, #4]
   151e6:	4623      	mov	r3, r4
   151e8:	f803 2b08 	strb.w	r2, [r3], #8
	list->prev = list;
   151ec:	60e3      	str	r3, [r4, #12]
	list->next = list;
   151ee:	60a3      	str	r3, [r4, #8]
	list->prev = list;
   151f0:	f104 0310 	add.w	r3, r4, #16
   151f4:	6163      	str	r3, [r4, #20]
	list->next = list;
   151f6:	6123      	str	r3, [r4, #16]
	list->prev = list;
   151f8:	f104 0318 	add.w	r3, r4, #24
   151fc:	61e3      	str	r3, [r4, #28]
	list->next = list;
   151fe:	61a3      	str	r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   15200:	4628      	mov	r0, r5
   15202:	f000 f803 	bl	1520c <metal_sys_init>
	if (error)
		return error;

	return error;
}
   15206:	bd38      	pop	{r3, r4, r5, pc}
   15208:	20002474 	.word	0x20002474

0001520c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   1520c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1520e:	4802      	ldr	r0, [pc, #8]	; (15218 <metal_sys_init+0xc>)
   15210:	f7ff ff84 	bl	1511c <metal_bus_register>
	return 0;
}
   15214:	2000      	movs	r0, #0
   15216:	bd08      	pop	{r3, pc}
   15218:	2000055c 	.word	0x2000055c

0001521c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   1521c:	b40e      	push	{r1, r2, r3}
   1521e:	b500      	push	{lr}
   15220:	b082      	sub	sp, #8
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   15222:	1e43      	subs	r3, r0, #1
   15224:	b2db      	uxtb	r3, r3
   15226:	2b06      	cmp	r3, #6
   15228:	d900      	bls.n	1522c <metal_zephyr_log_handler+0x10>
		level = METAL_LOG_EMERGENCY;
   1522a:	2000      	movs	r0, #0
	printk("%s", level_strs[level]);
   1522c:	4b07      	ldr	r3, [pc, #28]	; (1524c <metal_zephyr_log_handler+0x30>)
   1522e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   15232:	4807      	ldr	r0, [pc, #28]	; (15250 <metal_zephyr_log_handler+0x34>)
   15234:	f002 fe9c 	bl	17f70 <printk>

	va_start(args, format);
   15238:	a904      	add	r1, sp, #16
   1523a:	9101      	str	r1, [sp, #4]
	vprintk(format, args);
   1523c:	9803      	ldr	r0, [sp, #12]
   1523e:	f002 fe93 	bl	17f68 <vprintk>
	va_end(args);
}
   15242:	b002      	add	sp, #8
   15244:	f85d eb04 	ldr.w	lr, [sp], #4
   15248:	b003      	add	sp, #12
   1524a:	4770      	bx	lr
   1524c:	000238e8 	.word	0x000238e8
   15250:	0002171c 	.word	0x0002171c

00015254 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   15254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15258:	b085      	sub	sp, #20
   1525a:	469a      	mov	sl, r3
   1525c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
   15260:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (nvqs > num_vrings)
   15262:	4293      	cmp	r3, r2
   15264:	d344      	bcc.n	152f0 <virtio_create_virtqueues+0x9c>
   15266:	4605      	mov	r5, r0
   15268:	4691      	mov	r9, r2
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1526a:	2400      	movs	r4, #0
   1526c:	e024      	b.n	152b8 <virtio_create_virtqueues+0x64>
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
   1526e:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
						      vring_alloc->align));
   15272:	6892      	ldr	r2, [r2, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   15274:	f10c 0303 	add.w	r3, ip, #3
   15278:	005b      	lsls	r3, r3, #1
   1527a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   1527e:	4413      	add	r3, r2
   15280:	3b01      	subs	r3, #1
   15282:	4252      	negs	r2, r2
   15284:	4013      	ands	r3, r2
	size += sizeof(struct vring_used) +
   15286:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   1528a:	3306      	adds	r3, #6
   1528c:	2200      	movs	r2, #0
   1528e:	f009 fa18 	bl	1e6c2 <metal_io_block_set>
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
				       callbacks[i], vdev->func->notify,
   15292:	6a2b      	ldr	r3, [r5, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   15294:	f856 2008 	ldr.w	r2, [r6, r8]
   15298:	9202      	str	r2, [sp, #8]
   1529a:	6a1b      	ldr	r3, [r3, #32]
   1529c:	9301      	str	r3, [sp, #4]
   1529e:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
   152a2:	9300      	str	r3, [sp, #0]
   152a4:	463b      	mov	r3, r7
   152a6:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
   152aa:	b2a1      	uxth	r1, r4
   152ac:	4628      	mov	r0, r5
   152ae:	f009 fb56 	bl	1e95e <virtqueue_create>
				       vring_info->vq);
		if (ret)
   152b2:	4603      	mov	r3, r0
   152b4:	b9c0      	cbnz	r0, 152e8 <virtio_create_virtqueues+0x94>
	for (i = 0; i < nvqs; i++) {
   152b6:	3401      	adds	r4, #1
   152b8:	454c      	cmp	r4, r9
   152ba:	d214      	bcs.n	152e6 <virtio_create_virtqueues+0x92>
		vring_info = &vdev->vrings_info[i];
   152bc:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   152be:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   152c2:	ea4f 08c2 	mov.w	r8, r2, lsl #3
   152c6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		vring_alloc = &vring_info->info;
   152ca:	1d17      	adds	r7, r2, #4
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   152cc:	69ab      	ldr	r3, [r5, #24]
   152ce:	2b00      	cmp	r3, #0
   152d0:	d1df      	bne.n	15292 <virtio_create_virtqueues+0x3e>
			struct metal_io_region *io = vring_info->io;
   152d2:	6950      	ldr	r0, [r2, #20]
			offset = metal_io_virt_to_offset(io,
   152d4:	6853      	ldr	r3, [r2, #4]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   152d6:	6801      	ldr	r1, [r0, #0]
   152d8:	1a59      	subs	r1, r3, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   152da:	6883      	ldr	r3, [r0, #8]
   152dc:	4299      	cmp	r1, r3
   152de:	d3c6      	bcc.n	1526e <virtio_create_virtqueues+0x1a>
   152e0:	f04f 31ff 	mov.w	r1, #4294967295
   152e4:	e7c3      	b.n	1526e <virtio_create_virtqueues+0x1a>
			return ret;
	}
	return 0;
   152e6:	2300      	movs	r3, #0
}
   152e8:	4618      	mov	r0, r3
   152ea:	b005      	add	sp, #20
   152ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR_VQUEUE_INVLD_PARAM;
   152f0:	4b00      	ldr	r3, [pc, #0]	; (152f4 <virtio_create_virtqueues+0xa0>)
   152f2:	e7f9      	b.n	152e8 <virtio_create_virtqueues+0x94>
   152f4:	fffff440 	.word	0xfffff440

000152f8 <virtqueue_add_consumed_buffer>:
				  uint32_t len)
{
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   152f8:	8943      	ldrh	r3, [r0, #10]
   152fa:	428b      	cmp	r3, r1
   152fc:	d318      	bcc.n	15330 <virtqueue_add_consumed_buffer+0x38>
{
   152fe:	b410      	push	{r4}
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   15300:	6a04      	ldr	r4, [r0, #32]
   15302:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
   15306:	3b01      	subs	r3, #1
   15308:	b21b      	sxth	r3, r3
   1530a:	ea0c 0303 	and.w	r3, ip, r3
   1530e:	b29b      	uxth	r3, r3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   15310:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   15314:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   15316:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   15318:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1531c:	6a02      	ldr	r2, [r0, #32]
   1531e:	8853      	ldrh	r3, [r2, #2]
   15320:	3301      	adds	r3, #1
   15322:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   15324:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   15326:	3301      	adds	r3, #1
   15328:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1532a:	2000      	movs	r0, #0
}
   1532c:	bc10      	pop	{r4}
   1532e:	4770      	bx	lr
		return ERROR_VRING_NO_BUFF;
   15330:	4800      	ldr	r0, [pc, #0]	; (15334 <virtqueue_add_consumed_buffer+0x3c>)
}
   15332:	4770      	bx	lr
   15334:	fffff441 	.word	0xfffff441

00015338 <rpmsg_is_address_set>:
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
   15338:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   1533c:	d40b      	bmi.n	15356 <rpmsg_is_address_set+0x1e>
   1533e:	428a      	cmp	r2, r1
   15340:	da0b      	bge.n	1535a <rpmsg_is_address_set+0x22>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   15342:	0953      	lsrs	r3, r2, #5
   15344:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   15348:	f002 021f 	and.w	r2, r2, #31
   1534c:	fa20 f202 	lsr.w	r2, r0, r2
   15350:	f002 0001 	and.w	r0, r2, #1
		return metal_bitmap_is_bit_set(bitmap, addr);
   15354:	4770      	bx	lr
	else
		return RPMSG_ERR_PARAM;
   15356:	4802      	ldr	r0, [pc, #8]	; (15360 <rpmsg_is_address_set+0x28>)
   15358:	4770      	bx	lr
   1535a:	4801      	ldr	r0, [pc, #4]	; (15360 <rpmsg_is_address_set+0x28>)
}
   1535c:	4770      	bx	lr
   1535e:	bf00      	nop
   15360:	fffff82d 	.word	0xfffff82d

00015364 <rpmsg_set_address>:
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size) {
   15364:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   15368:	d40e      	bmi.n	15388 <rpmsg_set_address+0x24>
   1536a:	428a      	cmp	r2, r1
   1536c:	da0e      	bge.n	1538c <rpmsg_set_address+0x28>
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1536e:	0951      	lsrs	r1, r2, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   15370:	f002 021f 	and.w	r2, r2, #31
   15374:	2301      	movs	r3, #1
   15376:	fa03 f202 	lsl.w	r2, r3, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1537a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   1537e:	4313      	orrs	r3, r2
   15380:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		metal_bitmap_set_bit(bitmap, addr);
		return RPMSG_SUCCESS;
   15384:	2000      	movs	r0, #0
   15386:	4770      	bx	lr
	} else {
		return RPMSG_ERR_PARAM;
   15388:	4801      	ldr	r0, [pc, #4]	; (15390 <rpmsg_set_address+0x2c>)
   1538a:	4770      	bx	lr
   1538c:	4800      	ldr	r0, [pc, #0]	; (15390 <rpmsg_set_address+0x2c>)
	}
}
   1538e:	4770      	bx	lr
   15390:	fffff82d 	.word	0xfffff82d

00015394 <rpmsg_send_offchannel_raw>:
			      uint32_t dst, const void *data, int len,
			      int wait)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   15394:	b1a0      	cbz	r0, 153c0 <rpmsg_send_offchannel_raw+0x2c>
{
   15396:	b510      	push	{r4, lr}
   15398:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   1539a:	6a00      	ldr	r0, [r0, #32]
   1539c:	b190      	cbz	r0, 153c4 <rpmsg_send_offchannel_raw+0x30>
   1539e:	b19b      	cbz	r3, 153c8 <rpmsg_send_offchannel_raw+0x34>
   153a0:	f1b2 3fff 	cmp.w	r2, #4294967295
   153a4:	d012      	beq.n	153cc <rpmsg_send_offchannel_raw+0x38>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   153a6:	6f44      	ldr	r4, [r0, #116]	; 0x74
   153a8:	b194      	cbz	r4, 153d0 <rpmsg_send_offchannel_raw+0x3c>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   153aa:	f8dd c014 	ldr.w	ip, [sp, #20]
   153ae:	f8cd c004 	str.w	ip, [sp, #4]
   153b2:	f8dd c010 	ldr.w	ip, [sp, #16]
   153b6:	f8cd c000 	str.w	ip, [sp]
   153ba:	47a0      	blx	r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   153bc:	b002      	add	sp, #8
   153be:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
   153c0:	4804      	ldr	r0, [pc, #16]	; (153d4 <rpmsg_send_offchannel_raw+0x40>)
}
   153c2:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
   153c4:	4803      	ldr	r0, [pc, #12]	; (153d4 <rpmsg_send_offchannel_raw+0x40>)
   153c6:	e7f9      	b.n	153bc <rpmsg_send_offchannel_raw+0x28>
   153c8:	4802      	ldr	r0, [pc, #8]	; (153d4 <rpmsg_send_offchannel_raw+0x40>)
   153ca:	e7f7      	b.n	153bc <rpmsg_send_offchannel_raw+0x28>
   153cc:	4801      	ldr	r0, [pc, #4]	; (153d4 <rpmsg_send_offchannel_raw+0x40>)
   153ce:	e7f5      	b.n	153bc <rpmsg_send_offchannel_raw+0x28>
	return RPMSG_ERR_PARAM;
   153d0:	4800      	ldr	r0, [pc, #0]	; (153d4 <rpmsg_send_offchannel_raw+0x40>)
   153d2:	e7f3      	b.n	153bc <rpmsg_send_offchannel_raw+0x28>
   153d4:	fffff82d 	.word	0xfffff82d

000153d8 <rpmsg_send_offchannel_nocopy>:
int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   153d8:	b188      	cbz	r0, 153fe <rpmsg_send_offchannel_nocopy+0x26>
{
   153da:	b510      	push	{r4, lr}
   153dc:	b082      	sub	sp, #8
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   153de:	6a00      	ldr	r0, [r0, #32]
   153e0:	b178      	cbz	r0, 15402 <rpmsg_send_offchannel_nocopy+0x2a>
   153e2:	b183      	cbz	r3, 15406 <rpmsg_send_offchannel_nocopy+0x2e>
   153e4:	f1b2 3fff 	cmp.w	r2, #4294967295
   153e8:	d00f      	beq.n	1540a <rpmsg_send_offchannel_nocopy+0x32>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   153ea:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
   153ee:	b174      	cbz	r4, 1540e <rpmsg_send_offchannel_nocopy+0x36>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   153f0:	f8dd c010 	ldr.w	ip, [sp, #16]
   153f4:	f8cd c000 	str.w	ip, [sp]
   153f8:	47a0      	blx	r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   153fa:	b002      	add	sp, #8
   153fc:	bd10      	pop	{r4, pc}
		return RPMSG_ERR_PARAM;
   153fe:	4805      	ldr	r0, [pc, #20]	; (15414 <rpmsg_send_offchannel_nocopy+0x3c>)
}
   15400:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
   15402:	4804      	ldr	r0, [pc, #16]	; (15414 <rpmsg_send_offchannel_nocopy+0x3c>)
   15404:	e7f9      	b.n	153fa <rpmsg_send_offchannel_nocopy+0x22>
   15406:	4803      	ldr	r0, [pc, #12]	; (15414 <rpmsg_send_offchannel_nocopy+0x3c>)
   15408:	e7f7      	b.n	153fa <rpmsg_send_offchannel_nocopy+0x22>
   1540a:	4802      	ldr	r0, [pc, #8]	; (15414 <rpmsg_send_offchannel_nocopy+0x3c>)
   1540c:	e7f5      	b.n	153fa <rpmsg_send_offchannel_nocopy+0x22>
	return RPMSG_ERR_PARAM;
   1540e:	4801      	ldr	r0, [pc, #4]	; (15414 <rpmsg_send_offchannel_nocopy+0x3c>)
   15410:	e7f3      	b.n	153fa <rpmsg_send_offchannel_nocopy+0x22>
   15412:	bf00      	nop
   15414:	fffff82d 	.word	0xfffff82d

00015418 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   15418:	b570      	push	{r4, r5, r6, lr}
   1541a:	4605      	mov	r5, r0
   1541c:	460c      	mov	r4, r1
   1541e:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   15420:	4611      	mov	r1, r2
   15422:	b1a2      	cbz	r2, 1544e <rpmsg_register_endpoint+0x36>
   15424:	2220      	movs	r2, #32
   15426:	4620      	mov	r0, r4
   15428:	f004 fdb2 	bl	19f90 <strncpy>
	ept->addr = src;
   1542c:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   1542e:	9b04      	ldr	r3, [sp, #16]
   15430:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   15432:	9b05      	ldr	r3, [sp, #20]
   15434:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   15436:	9b06      	ldr	r3, [sp, #24]
   15438:	6323      	str	r3, [r4, #48]	; 0x30
	ept->rdev = rdev;
   1543a:	6225      	str	r5, [r4, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1543c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->prev = node->prev;
   15440:	686a      	ldr	r2, [r5, #4]
   15442:	63a2      	str	r2, [r4, #56]	; 0x38
	new_node->next = node;
   15444:	6365      	str	r5, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   15446:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   15448:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1544a:	6013      	str	r3, [r2, #0]
}
   1544c:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1544e:	4901      	ldr	r1, [pc, #4]	; (15454 <rpmsg_register_endpoint+0x3c>)
   15450:	e7e8      	b.n	15424 <rpmsg_register_endpoint+0xc>
   15452:	bf00      	nop
   15454:	00020a70 	.word	0x00020a70

00015458 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   15458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1545c:	b084      	sub	sp, #16
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   1545e:	2800      	cmp	r0, #0
   15460:	d05f      	beq.n	15522 <rpmsg_create_ept+0xca>
   15462:	460f      	mov	r7, r1
   15464:	4691      	mov	r9, r2
   15466:	461c      	mov	r4, r3
   15468:	4680      	mov	r8, r0
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1546a:	f101 0658 	add.w	r6, r1, #88	; 0x58
   1546e:	f04f 32ff 	mov.w	r2, #4294967295
   15472:	f04f 33ff 	mov.w	r3, #4294967295
   15476:	4630      	mov	r0, r6
   15478:	f000 ffc0 	bl	163fc <z_impl_k_sem_take>
	if (src == RPMSG_ADDR_ANY) {
   1547c:	f1b4 3fff 	cmp.w	r4, #4294967295
   15480:	d012      	beq.n	154a8 <rpmsg_create_ept+0x50>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
		if (addr == RPMSG_ADDR_ANY) {
			status = RPMSG_ERR_ADDR;
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   15482:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   15486:	d320      	bcc.n	154ca <rpmsg_create_ept+0x72>
		status = rpmsg_is_address_set(rdev->bitmap,
   15488:	f107 0a48 	add.w	sl, r7, #72	; 0x48
   1548c:	4622      	mov	r2, r4
   1548e:	2180      	movs	r1, #128	; 0x80
   15490:	4650      	mov	r0, sl
   15492:	f7ff ff51 	bl	15338 <rpmsg_is_address_set>
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   15496:	4605      	mov	r5, r0
   15498:	b188      	cbz	r0, 154be <rpmsg_create_ept+0x66>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
   1549a:	2800      	cmp	r0, #0
   1549c:	dd00      	ble.n	154a0 <rpmsg_create_ept+0x48>
			status = RPMSG_ERR_ADDR;
   1549e:	4d22      	ldr	r5, [pc, #136]	; (15528 <rpmsg_create_ept+0xd0>)
	z_impl_k_sem_give(sem);
   154a0:	4630      	mov	r0, r6
   154a2:	f000 ff83 	bl	163ac <z_impl_k_sem_give>
		rpmsg_unregister_endpoint(ept);
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
   154a6:	e02c      	b.n	15502 <rpmsg_create_ept+0xaa>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   154a8:	2180      	movs	r1, #128	; 0x80
   154aa:	f107 0048 	add.w	r0, r7, #72	; 0x48
   154ae:	f009 fb8a 	bl	1ebc6 <rpmsg_get_address>
   154b2:	4604      	mov	r4, r0
		if (addr == RPMSG_ADDR_ANY) {
   154b4:	f1b0 3fff 	cmp.w	r0, #4294967295
   154b8:	d031      	beq.n	1551e <rpmsg_create_ept+0xc6>
	int status = RPMSG_SUCCESS;
   154ba:	2500      	movs	r5, #0
   154bc:	e006      	b.n	154cc <rpmsg_create_ept+0x74>
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   154be:	4622      	mov	r2, r4
   154c0:	2180      	movs	r1, #128	; 0x80
   154c2:	4650      	mov	r0, sl
   154c4:	f7ff ff4e 	bl	15364 <rpmsg_set_address>
   154c8:	e000      	b.n	154cc <rpmsg_create_ept+0x74>
	int status = RPMSG_SUCCESS;
   154ca:	2500      	movs	r5, #0
	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   154cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   154ce:	9302      	str	r3, [sp, #8]
   154d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154d2:	9301      	str	r3, [sp, #4]
   154d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   154d6:	9300      	str	r3, [sp, #0]
   154d8:	4623      	mov	r3, r4
   154da:	464a      	mov	r2, r9
   154dc:	4641      	mov	r1, r8
   154de:	4638      	mov	r0, r7
   154e0:	f7ff ff9a 	bl	15418 <rpmsg_register_endpoint>
   154e4:	4630      	mov	r0, r6
   154e6:	f000 ff61 	bl	163ac <z_impl_k_sem_give>
	if (ept->name[0] && rdev->support_ns &&
   154ea:	f898 3000 	ldrb.w	r3, [r8]
   154ee:	b13b      	cbz	r3, 15500 <rpmsg_create_ept+0xa8>
   154f0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   154f4:	b123      	cbz	r3, 15500 <rpmsg_create_ept+0xa8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
   154f6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
   154fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   154fe:	d004      	beq.n	1550a <rpmsg_create_ept+0xb2>
	if (status)
   15500:	b94d      	cbnz	r5, 15516 <rpmsg_create_ept+0xbe>
}
   15502:	4628      	mov	r0, r5
   15504:	b004      	add	sp, #16
   15506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1550a:	2100      	movs	r1, #0
   1550c:	4640      	mov	r0, r8
   1550e:	f009 fbb6 	bl	1ec7e <rpmsg_send_ns_message>
   15512:	4605      	mov	r5, r0
   15514:	e7f4      	b.n	15500 <rpmsg_create_ept+0xa8>
		rpmsg_unregister_endpoint(ept);
   15516:	4640      	mov	r0, r8
   15518:	f009 fb8c 	bl	1ec34 <rpmsg_unregister_endpoint>
   1551c:	e7f1      	b.n	15502 <rpmsg_create_ept+0xaa>
			status = RPMSG_ERR_ADDR;
   1551e:	4d02      	ldr	r5, [pc, #8]	; (15528 <rpmsg_create_ept+0xd0>)
   15520:	e7be      	b.n	154a0 <rpmsg_create_ept+0x48>
		return RPMSG_ERR_PARAM;
   15522:	4d02      	ldr	r5, [pc, #8]	; (1552c <rpmsg_create_ept+0xd4>)
   15524:	e7ed      	b.n	15502 <rpmsg_create_ept+0xaa>
   15526:	bf00      	nop
   15528:	fffff829 	.word	0xfffff829
   1552c:	fffff82d 	.word	0xfffff82d

00015530 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
   15530:	b508      	push	{r3, lr}
   15532:	4603      	mov	r3, r0
	return rvdev->vdev->role;
   15534:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   15538:	6992      	ldr	r2, [r2, #24]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
	int length = 0;

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   1553a:	b93a      	cbnz	r2, 1554c <_rpmsg_virtio_get_buffer_size+0x1c>
		/*
		 * If device role is Master then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   1553c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   15540:	3810      	subs	r0, #16
	}
#endif /*!VIRTIO_DEVICE_ONLY*/

#ifndef VIRTIO_DRIVER_ONLY
	if (role == RPMSG_REMOTE) {
   15542:	2a01      	cmp	r2, #1
   15544:	d004      	beq.n	15550 <_rpmsg_virtio_get_buffer_size+0x20>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/

	if (length <= 0) {
   15546:	2800      	cmp	r0, #0
   15548:	dd08      	ble.n	1555c <_rpmsg_virtio_get_buffer_size+0x2c>
		length = RPMSG_ERR_NO_BUFF;
	}

	return length;
}
   1554a:	bd08      	pop	{r3, pc}
	int length = 0;
   1554c:	2000      	movs	r0, #0
   1554e:	e7f8      	b.n	15542 <_rpmsg_virtio_get_buffer_size+0x12>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   15550:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   15554:	f009 fb1b 	bl	1eb8e <virtqueue_get_desc_size>
   15558:	3810      	subs	r0, #16
   1555a:	e7f4      	b.n	15546 <_rpmsg_virtio_get_buffer_size+0x16>
		length = RPMSG_ERR_NO_BUFF;
   1555c:	4800      	ldr	r0, [pc, #0]	; (15560 <_rpmsg_virtio_get_buffer_size+0x30>)
	return length;
   1555e:	e7f4      	b.n	1554a <_rpmsg_virtio_get_buffer_size+0x1a>
   15560:	fffff82e 	.word	0xfffff82e

00015564 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   15564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15568:	b084      	sub	sp, #16
   1556a:	4604      	mov	r4, r0
   1556c:	460e      	mov	r6, r1
   1556e:	4690      	mov	r8, r2
   15570:	4699      	mov	r9, r3
   15572:	9f0c      	ldr	r7, [sp, #48]	; 0x30

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   15574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15576:	a903      	add	r1, sp, #12
   15578:	f009 fdce 	bl	1f118 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1557c:	b1e8      	cbz	r0, 155ba <rpmsg_virtio_send_offchannel_raw+0x56>
   1557e:	4682      	mov	sl, r0
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   15580:	9d03      	ldr	r5, [sp, #12]
   15582:	42bd      	cmp	r5, r7
   15584:	db00      	blt.n	15588 <rpmsg_virtio_send_offchannel_raw+0x24>
   15586:	463d      	mov	r5, r7
		len = buff_len;
	io = rvdev->shbuf_io;
   15588:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1558c:	6801      	ldr	r1, [r0, #0]
   1558e:	ebaa 0101 	sub.w	r1, sl, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   15592:	6883      	ldr	r3, [r0, #8]
   15594:	4299      	cmp	r1, r3
   15596:	d20d      	bcs.n	155b4 <rpmsg_virtio_send_offchannel_raw+0x50>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   15598:	462b      	mov	r3, r5
   1559a:	464a      	mov	r2, r9
   1559c:	f009 f850 	bl	1e640 <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   155a0:	9500      	str	r5, [sp, #0]
   155a2:	4653      	mov	r3, sl
   155a4:	4642      	mov	r2, r8
   155a6:	4631      	mov	r1, r6
   155a8:	4620      	mov	r0, r4
   155aa:	f009 fccf 	bl	1ef4c <rpmsg_virtio_send_offchannel_nocopy>
}
   155ae:	b004      	add	sp, #16
   155b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   155b4:	f04f 31ff 	mov.w	r1, #4294967295
   155b8:	e7ee      	b.n	15598 <rpmsg_virtio_send_offchannel_raw+0x34>
		return RPMSG_ERR_NO_BUFF;
   155ba:	4801      	ldr	r0, [pc, #4]	; (155c0 <rpmsg_virtio_send_offchannel_raw+0x5c>)
   155bc:	e7f7      	b.n	155ae <rpmsg_virtio_send_offchannel_raw+0x4a>
   155be:	bf00      	nop
   155c0:	fffff82e 	.word	0xfffff82e

000155c4 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   155c4:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   155c6:	b190      	cbz	r0, 155ee <rpmsg_virtio_get_buffer_size+0x2a>
   155c8:	4604      	mov	r4, r0
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   155ca:	f100 0558 	add.w	r5, r0, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   155ce:	f04f 32ff 	mov.w	r2, #4294967295
   155d2:	f04f 33ff 	mov.w	r3, #4294967295
   155d6:	4628      	mov	r0, r5
   155d8:	f000 ff10 	bl	163fc <z_impl_k_sem_take>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
   155dc:	4620      	mov	r0, r4
   155de:	f7ff ffa7 	bl	15530 <_rpmsg_virtio_get_buffer_size>
   155e2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   155e4:	4628      	mov	r0, r5
   155e6:	f000 fee1 	bl	163ac <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);
	return size;
}
   155ea:	4620      	mov	r0, r4
   155ec:	bd38      	pop	{r3, r4, r5, pc}
		return RPMSG_ERR_PARAM;
   155ee:	4c01      	ldr	r4, [pc, #4]	; (155f4 <rpmsg_virtio_get_buffer_size+0x30>)
   155f0:	e7fb      	b.n	155ea <rpmsg_virtio_get_buffer_size+0x26>
   155f2:	bf00      	nop
   155f4:	fffff82d 	.word	0xfffff82d

000155f8 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   155f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155fc:	b08a      	sub	sp, #40	; 0x28
   155fe:	4604      	mov	r4, r0
   15600:	460e      	mov	r6, r1
   15602:	4617      	mov	r7, r2
   15604:	461d      	mov	r5, r3
   15606:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   1560a:	228c      	movs	r2, #140	; 0x8c
   1560c:	2100      	movs	r1, #0
   1560e:	f004 fd4b 	bl	1a0a8 <memset>
	metal_mutex_init(&rdev->lock);
   15612:	f104 0058 	add.w	r0, r4, #88	; 0x58
	return z_impl_k_sem_init(sem, initial_count, limit);
   15616:	2201      	movs	r2, #1
   15618:	4611      	mov	r1, r2
   1561a:	f00a f847 	bl	1f6ac <z_impl_k_sem_init>
	rvdev->vdev = vdev;
   1561e:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	rdev->ns_bind_cb = ns_bind_cb;
   15622:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   15624:	6274      	str	r4, [r6, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   15626:	4b68      	ldr	r3, [pc, #416]	; (157c8 <rpmsg_init_vdev_with_config+0x1d0>)
   15628:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   1562a:	4b68      	ldr	r3, [pc, #416]	; (157cc <rpmsg_init_vdev_with_config+0x1d4>)
   1562c:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   1562e:	4b68      	ldr	r3, [pc, #416]	; (157d0 <rpmsg_init_vdev_with_config+0x1d8>)
   15630:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   15632:	4b68      	ldr	r3, [pc, #416]	; (157d4 <rpmsg_init_vdev_with_config+0x1dc>)
   15634:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   15638:	4b67      	ldr	r3, [pc, #412]	; (157d8 <rpmsg_init_vdev_with_config+0x1e0>)
   1563a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   1563e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   15642:	699f      	ldr	r7, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   15644:	b957      	cbnz	r7, 1565c <rpmsg_init_vdev_with_config+0x64>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   15646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15648:	2b00      	cmp	r3, #0
   1564a:	f000 80b4 	beq.w	157b6 <rpmsg_init_vdev_with_config+0x1be>
			return RPMSG_ERR_PARAM;
		}
		rvdev->config = *config;
   1564e:	f104 038c 	add.w	r3, r4, #140	; 0x8c
   15652:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15654:	e892 0003 	ldmia.w	r2, {r0, r1}
   15658:	e883 0003 	stmia.w	r3, {r0, r1}
	(void)config;
#endif /*!VIRTIO_DEVICE_ONLY*/


#ifndef VIRTIO_DRIVER_ONLY
	if (role == RPMSG_REMOTE) {
   1565c:	2f01      	cmp	r7, #1
   1565e:	d03a      	beq.n	156d6 <rpmsg_init_vdev_with_config+0xde>
	return rvdev->vdev->func->get_features(rvdev->vdev);
   15660:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   15664:	6a03      	ldr	r3, [r0, #32]
   15666:	689b      	ldr	r3, [r3, #8]
   15668:	4798      	blx	r3
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1566a:	6130      	str	r0, [r6, #16]
   1566c:	2300      	movs	r3, #0
   1566e:	6173      	str	r3, [r6, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   15670:	f000 0001 	and.w	r0, r0, #1
   15674:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   15678:	b9d7      	cbnz	r7, 156b0 <rpmsg_init_vdev_with_config+0xb8>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
   1567a:	f1b8 0f00 	cmp.w	r8, #0
   1567e:	f000 809d 	beq.w	157bc <rpmsg_init_vdev_with_config+0x1c4>
			return RPMSG_ERR_PARAM;
		if (!shpool->size)
   15682:	f8d8 3008 	ldr.w	r3, [r8, #8]
   15686:	2b00      	cmp	r3, #0
   15688:	f000 809b 	beq.w	157c2 <rpmsg_init_vdev_with_config+0x1ca>
			return RPMSG_ERR_NO_BUFF;
		rvdev->shpool = shpool;
   1568c:	f8c4 80a4 	str.w	r8, [r4, #164]	; 0xa4

		vq_names[0] = "rx_vq";
   15690:	4b52      	ldr	r3, [pc, #328]	; (157dc <rpmsg_init_vdev_with_config+0x1e4>)
   15692:	9308      	str	r3, [sp, #32]
		vq_names[1] = "tx_vq";
   15694:	4b52      	ldr	r3, [pc, #328]	; (157e0 <rpmsg_init_vdev_with_config+0x1e8>)
   15696:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
   15698:	4b52      	ldr	r3, [pc, #328]	; (157e4 <rpmsg_init_vdev_with_config+0x1ec>)
   1569a:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   1569c:	4b52      	ldr	r3, [pc, #328]	; (157e8 <rpmsg_init_vdev_with_config+0x1f0>)
   1569e:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   156a0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   156a2:	681b      	ldr	r3, [r3, #0]
   156a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[1].vq;
   156a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   156aa:	699b      	ldr	r3, [r3, #24]
   156ac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	}
#endif /*!VIRTIO_DEVICE_ONLY*/

#ifndef VIRTIO_DRIVER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   156b0:	2f01      	cmp	r7, #1
   156b2:	d014      	beq.n	156de <rpmsg_init_vdev_with_config+0xe6>
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	rvdev->shbuf_io = shm_io;
   156b4:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   156b8:	ab06      	add	r3, sp, #24
   156ba:	9300      	str	r3, [sp, #0]
   156bc:	ab08      	add	r3, sp, #32
   156be:	2202      	movs	r2, #2
   156c0:	2100      	movs	r1, #0
   156c2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   156c6:	f7ff fdc5 	bl	15254 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   156ca:	4682      	mov	sl, r0
   156cc:	b1c0      	cbz	r0, 15700 <rpmsg_init_vdev_with_config+0x108>
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   156ce:	4650      	mov	r0, sl
   156d0:	b00a      	add	sp, #40	; 0x28
   156d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rpmsg_virtio_wait_remote_ready(rvdev);
   156d6:	4620      	mov	r0, r4
   156d8:	f009 fb5a 	bl	1ed90 <rpmsg_virtio_wait_remote_ready>
   156dc:	e7c0      	b.n	15660 <rpmsg_init_vdev_with_config+0x68>
		vq_names[0] = "tx_vq";
   156de:	4b40      	ldr	r3, [pc, #256]	; (157e0 <rpmsg_init_vdev_with_config+0x1e8>)
   156e0:	9308      	str	r3, [sp, #32]
		vq_names[1] = "rx_vq";
   156e2:	4b3e      	ldr	r3, [pc, #248]	; (157dc <rpmsg_init_vdev_with_config+0x1e4>)
   156e4:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_tx_callback;
   156e6:	4b40      	ldr	r3, [pc, #256]	; (157e8 <rpmsg_init_vdev_with_config+0x1f0>)
   156e8:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   156ea:	4b3e      	ldr	r3, [pc, #248]	; (157e4 <rpmsg_init_vdev_with_config+0x1ec>)
   156ec:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   156ee:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   156f0:	699b      	ldr	r3, [r3, #24]
   156f2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		rvdev->svq  = vdev->vrings_info[0].vq;
   156f6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   156f8:	681b      	ldr	r3, [r3, #0]
   156fa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
   156fe:	e7d9      	b.n	156b4 <rpmsg_init_vdev_with_config+0xbc>
	virtqueue_disable_cb(rvdev->svq);
   15700:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   15704:	f009 fa03 	bl	1eb0e <virtqueue_disable_cb>
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
   15708:	2300      	movs	r3, #0
   1570a:	e006      	b.n	1571a <rpmsg_init_vdev_with_config+0x122>
		vq = vdev->vrings_info[i].vq;
   1570c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   1570e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15712:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
		vq->shm_io = shm_io;
   15716:	6295      	str	r5, [r2, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
   15718:	3301      	adds	r3, #1
   1571a:	2b01      	cmp	r3, #1
   1571c:	d9f6      	bls.n	1570c <rpmsg_init_vdev_with_config+0x114>
	if (role == RPMSG_HOST) {
   1571e:	bb7f      	cbnz	r7, 15780 <rpmsg_init_vdev_with_config+0x188>
		vqbuf.len = rvdev->config.r2h_buf_size;
   15720:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   15724:	9305      	str	r3, [sp, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   15726:	46b9      	mov	r9, r7
   15728:	e012      	b.n	15750 <rpmsg_init_vdev_with_config+0x158>
			metal_io_block_set(shm_io,
   1572a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1572e:	2200      	movs	r2, #0
   15730:	4628      	mov	r0, r5
   15732:	f008 ffc6 	bl	1e6c2 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   15736:	9600      	str	r6, [sp, #0]
   15738:	2301      	movs	r3, #1
   1573a:	2200      	movs	r2, #0
   1573c:	a904      	add	r1, sp, #16
   1573e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   15742:	f009 f91f 	bl	1e984 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   15746:	4682      	mov	sl, r0
   15748:	2800      	cmp	r0, #0
   1574a:	d1c0      	bne.n	156ce <rpmsg_init_vdev_with_config+0xd6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   1574c:	f109 0901 	add.w	r9, r9, #1
   15750:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   15754:	895b      	ldrh	r3, [r3, #10]
   15756:	454b      	cmp	r3, r9
   15758:	d912      	bls.n	15780 <rpmsg_init_vdev_with_config+0x188>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1575a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   1575e:	4640      	mov	r0, r8
   15760:	f009 fca1 	bl	1f0a6 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   15764:	4606      	mov	r6, r0
   15766:	b140      	cbz	r0, 1577a <rpmsg_init_vdev_with_config+0x182>
			vqbuf.buf = buffer;
   15768:	9004      	str	r0, [sp, #16]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1576a:	6829      	ldr	r1, [r5, #0]
   1576c:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1576e:	68ab      	ldr	r3, [r5, #8]
   15770:	4299      	cmp	r1, r3
   15772:	d3da      	bcc.n	1572a <rpmsg_init_vdev_with_config+0x132>
   15774:	f04f 31ff 	mov.w	r1, #4294967295
   15778:	e7d7      	b.n	1572a <rpmsg_init_vdev_with_config+0x132>
				return RPMSG_ERR_NO_BUFF;
   1577a:	f8df a070 	ldr.w	sl, [pc, #112]	; 157ec <rpmsg_init_vdev_with_config+0x1f4>
   1577e:	e7a6      	b.n	156ce <rpmsg_init_vdev_with_config+0xd6>
	list->prev = list;
   15780:	6064      	str	r4, [r4, #4]
	list->next = list;
   15782:	6024      	str	r4, [r4, #0]
	if (rdev->support_ns) {
   15784:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   15788:	b943      	cbnz	r3, 1579c <rpmsg_init_vdev_with_config+0x1a4>
	if (role == RPMSG_HOST)
   1578a:	2f00      	cmp	r7, #0
   1578c:	d19f      	bne.n	156ce <rpmsg_init_vdev_with_config+0xd6>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1578e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   15792:	6a03      	ldr	r3, [r0, #32]
   15794:	685b      	ldr	r3, [r3, #4]
   15796:	2104      	movs	r1, #4
   15798:	4798      	blx	r3
}
   1579a:	e798      	b.n	156ce <rpmsg_init_vdev_with_config+0xd6>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   1579c:	2300      	movs	r3, #0
   1579e:	9302      	str	r3, [sp, #8]
   157a0:	4b13      	ldr	r3, [pc, #76]	; (157f0 <rpmsg_init_vdev_with_config+0x1f8>)
   157a2:	9301      	str	r3, [sp, #4]
   157a4:	2335      	movs	r3, #53	; 0x35
   157a6:	9300      	str	r3, [sp, #0]
   157a8:	4a12      	ldr	r2, [pc, #72]	; (157f4 <rpmsg_init_vdev_with_config+0x1fc>)
   157aa:	f104 0108 	add.w	r1, r4, #8
   157ae:	4620      	mov	r0, r4
   157b0:	f7ff fe32 	bl	15418 <rpmsg_register_endpoint>
   157b4:	e7e9      	b.n	1578a <rpmsg_init_vdev_with_config+0x192>
			return RPMSG_ERR_PARAM;
   157b6:	f8df a040 	ldr.w	sl, [pc, #64]	; 157f8 <rpmsg_init_vdev_with_config+0x200>
   157ba:	e788      	b.n	156ce <rpmsg_init_vdev_with_config+0xd6>
			return RPMSG_ERR_PARAM;
   157bc:	f8df a038 	ldr.w	sl, [pc, #56]	; 157f8 <rpmsg_init_vdev_with_config+0x200>
   157c0:	e785      	b.n	156ce <rpmsg_init_vdev_with_config+0xd6>
			return RPMSG_ERR_NO_BUFF;
   157c2:	f8df a028 	ldr.w	sl, [pc, #40]	; 157ec <rpmsg_init_vdev_with_config+0x1f4>
   157c6:	e782      	b.n	156ce <rpmsg_init_vdev_with_config+0xd6>
   157c8:	00015565 	.word	0x00015565
   157cc:	0001edbd 	.word	0x0001edbd
   157d0:	0001ef0f 	.word	0x0001ef0f
   157d4:	0001f119 	.word	0x0001f119
   157d8:	0001ef4d 	.word	0x0001ef4d
   157dc:	00023908 	.word	0x00023908
   157e0:	00023910 	.word	0x00023910
   157e4:	0001efd9 	.word	0x0001efd9
   157e8:	0001edcb 	.word	0x0001edcb
   157ec:	fffff82e 	.word	0xfffff82e
   157f0:	0001edcd 	.word	0x0001edcd
   157f4:	00023918 	.word	0x00023918
   157f8:	fffff82d 	.word	0xfffff82d

000157fc <rpmsg_init_vdev>:
{
   157fc:	b510      	push	{r4, lr}
   157fe:	b084      	sub	sp, #16
   15800:	4684      	mov	ip, r0
   15802:	468e      	mov	lr, r1
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   15804:	4906      	ldr	r1, [pc, #24]	; (15820 <rpmsg_init_vdev+0x24>)
   15806:	ac02      	add	r4, sp, #8
   15808:	c903      	ldmia	r1, {r0, r1}
   1580a:	e884 0003 	stmia.w	r4, {r0, r1}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   1580e:	9401      	str	r4, [sp, #4]
   15810:	9906      	ldr	r1, [sp, #24]
   15812:	9100      	str	r1, [sp, #0]
   15814:	4671      	mov	r1, lr
   15816:	4660      	mov	r0, ip
   15818:	f7ff feee 	bl	155f8 <rpmsg_init_vdev_with_config>
}
   1581c:	b004      	add	sp, #16
   1581e:	bd10      	pop	{r4, pc}
   15820:	00020740 	.word	0x00020740

00015824 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   15824:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   15826:	4c11      	ldr	r4, [pc, #68]	; (1586c <_DoInit+0x48>)
   15828:	2303      	movs	r3, #3
   1582a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1582c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1582e:	4a10      	ldr	r2, [pc, #64]	; (15870 <_DoInit+0x4c>)
   15830:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   15832:	4b10      	ldr	r3, [pc, #64]	; (15874 <_DoInit+0x50>)
   15834:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   15836:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1583a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1583c:	2300      	movs	r3, #0
   1583e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   15840:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15842:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   15844:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   15846:	4a0c      	ldr	r2, [pc, #48]	; (15878 <_DoInit+0x54>)
   15848:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1584a:	2210      	movs	r2, #16
   1584c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1584e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   15850:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15852:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   15854:	4909      	ldr	r1, [pc, #36]	; (1587c <_DoInit+0x58>)
   15856:	1de0      	adds	r0, r4, #7
   15858:	f004 fb90 	bl	19f7c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1585c:	4908      	ldr	r1, [pc, #32]	; (15880 <_DoInit+0x5c>)
   1585e:	4620      	mov	r0, r4
   15860:	f004 fb8c 	bl	19f7c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   15864:	2320      	movs	r3, #32
   15866:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   15868:	bd10      	pop	{r4, pc}
   1586a:	bf00      	nop
   1586c:	20002494 	.word	0x20002494
   15870:	0002391c 	.word	0x0002391c
   15874:	2000254c 	.word	0x2000254c
   15878:	2000253c 	.word	0x2000253c
   1587c:	00023928 	.word	0x00023928
   15880:	0002392c 	.word	0x0002392c

00015884 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15888:	4604      	mov	r4, r0
   1588a:	460e      	mov	r6, r1
   1588c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1588e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   15892:	4a2d      	ldr	r2, [pc, #180]	; (15948 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   15894:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   15898:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1589a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1589c:	42bb      	cmp	r3, r7
   1589e:	d84b      	bhi.n	15938 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   158a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   158a4:	4928      	ldr	r1, [pc, #160]	; (15948 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   158a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   158aa:	f8d2 8020 	ldr.w	r8, [r2, #32]
   158ae:	eba8 0907 	sub.w	r9, r8, r7
   158b2:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   158b6:	4295      	cmp	r5, r2
   158b8:	d904      	bls.n	158c4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   158ba:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   158bc:	429d      	cmp	r5, r3
   158be:	d916      	bls.n	158ee <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   158c0:	2000      	movs	r0, #0
   158c2:	e03e      	b.n	15942 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   158c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 15948 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   158c8:	1c63      	adds	r3, r4, #1
   158ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   158ce:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   158d2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   158d4:	462a      	mov	r2, r5
   158d6:	4631      	mov	r1, r6
   158d8:	4438      	add	r0, r7
   158da:	f004 fbb6 	bl	1a04a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   158de:	443d      	add	r5, r7
   158e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   158e4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   158e8:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
   158ea:	2001      	movs	r0, #1
   158ec:	e029      	b.n	15942 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   158ee:	1c43      	adds	r3, r0, #1
   158f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   158f4:	4a14      	ldr	r2, [pc, #80]	; (15948 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   158f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   158fa:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   158fc:	464a      	mov	r2, r9
   158fe:	4631      	mov	r1, r6
   15900:	4438      	add	r0, r7
   15902:	f004 fba2 	bl	1a04a <memcpy>
      NumBytes -= Rem;
   15906:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
   1590a:	197f      	adds	r7, r7, r5
   1590c:	d107      	bne.n	1591e <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
   1590e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   15912:	4b0d      	ldr	r3, [pc, #52]	; (15948 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   15914:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   15918:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   1591a:	2001      	movs	r0, #1
   1591c:	e011      	b.n	15942 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   1591e:	1c63      	adds	r3, r4, #1
   15920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15924:	4a08      	ldr	r2, [pc, #32]	; (15948 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   15926:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1592a:	463a      	mov	r2, r7
   1592c:	eb06 0109 	add.w	r1, r6, r9
   15930:	6858      	ldr	r0, [r3, #4]
   15932:	f004 fb8a 	bl	1a04a <memcpy>
   15936:	e7ea      	b.n	1590e <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
   15938:	1bdb      	subs	r3, r3, r7
   1593a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1593c:	42ab      	cmp	r3, r5
   1593e:	d2c1      	bcs.n	158c4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   15940:	2000      	movs	r0, #0
}
   15942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15946:	bf00      	nop
   15948:	20002494 	.word	0x20002494

0001594c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1594e:	460f      	mov	r7, r1
   15950:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   15952:	4b18      	ldr	r3, [pc, #96]	; (159b4 <SEGGER_RTT_WriteNoLock+0x68>)
   15954:	1c45      	adds	r5, r0, #1
   15956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1595a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1595e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15962:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15966:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   15968:	2c01      	cmp	r4, #1
   1596a:	d011      	beq.n	15990 <SEGGER_RTT_WriteNoLock+0x44>
   1596c:	2c02      	cmp	r4, #2
   1596e:	d01c      	beq.n	159aa <SEGGER_RTT_WriteNoLock+0x5e>
   15970:	b114      	cbz	r4, 15978 <SEGGER_RTT_WriteNoLock+0x2c>
   15972:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   15974:	4620      	mov	r0, r4
   15976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   15978:	4628      	mov	r0, r5
   1597a:	f009 fc0e 	bl	1f19a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1597e:	4286      	cmp	r6, r0
   15980:	d8f8      	bhi.n	15974 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   15982:	4632      	mov	r2, r6
   15984:	4639      	mov	r1, r7
   15986:	4628      	mov	r0, r5
   15988:	f009 fc13 	bl	1f1b2 <_WriteNoCheck>
      Status = NumBytes;
   1598c:	4634      	mov	r4, r6
   1598e:	e7f1      	b.n	15974 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   15990:	4628      	mov	r0, r5
   15992:	f009 fc02 	bl	1f19a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   15996:	4634      	mov	r4, r6
   15998:	4286      	cmp	r6, r0
   1599a:	bf28      	it	cs
   1599c:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1599e:	4622      	mov	r2, r4
   159a0:	4639      	mov	r1, r7
   159a2:	4628      	mov	r0, r5
   159a4:	f009 fc05 	bl	1f1b2 <_WriteNoCheck>
    break;
   159a8:	e7e4      	b.n	15974 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   159aa:	4628      	mov	r0, r5
   159ac:	f009 fc23 	bl	1f1f6 <_WriteBlocking>
   159b0:	4604      	mov	r4, r0
    break;
   159b2:	e7df      	b.n	15974 <SEGGER_RTT_WriteNoLock+0x28>
   159b4:	20002494 	.word	0x20002494

000159b8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   159b8:	4b06      	ldr	r3, [pc, #24]	; (159d4 <SEGGER_RTT_HasDataUp+0x1c>)
   159ba:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   159be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   159c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   159c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   159c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   159cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   159ce:	1a80      	subs	r0, r0, r2
   159d0:	4770      	bx	lr
   159d2:	bf00      	nop
   159d4:	20002494 	.word	0x20002494

000159d8 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   159d8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   159da:	f04f 32ff 	mov.w	r2, #4294967295
   159de:	f04f 33ff 	mov.w	r3, #4294967295
   159e2:	4802      	ldr	r0, [pc, #8]	; (159ec <zephyr_rtt_mutex_lock+0x14>)
   159e4:	f000 fbe0 	bl	161a8 <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   159e8:	bd08      	pop	{r3, pc}
   159ea:	bf00      	nop
   159ec:	200006d0 	.word	0x200006d0

000159f0 <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   159f0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   159f2:	4802      	ldr	r0, [pc, #8]	; (159fc <zephyr_rtt_mutex_unlock+0xc>)
   159f4:	f000 fc62 	bl	162bc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   159f8:	bd08      	pop	{r3, pc}
   159fa:	bf00      	nop
   159fc:	200006d0 	.word	0x200006d0

00015a00 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   15a00:	4b03      	ldr	r3, [pc, #12]	; (15a10 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   15a02:	e000      	b.n	15a06 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   15a04:	3318      	adds	r3, #24
	while (dev < __device_end) {
   15a06:	4a03      	ldr	r2, [pc, #12]	; (15a14 <z_device_state_init+0x14>)
   15a08:	4293      	cmp	r3, r2
   15a0a:	d3fb      	bcc.n	15a04 <z_device_state_init+0x4>
	}
}
   15a0c:	4770      	bx	lr
   15a0e:	bf00      	nop
   15a10:	000200d4 	.word	0x000200d4
   15a14:	0002020c 	.word	0x0002020c

00015a18 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   15a18:	b570      	push	{r4, r5, r6, lr}
   15a1a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a1c:	4b11      	ldr	r3, [pc, #68]	; (15a64 <z_sys_init_run_level+0x4c>)
   15a1e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   15a22:	e009      	b.n	15a38 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   15a24:	4240      	negs	r0, r0
   15a26:	e017      	b.n	15a58 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   15a28:	68eb      	ldr	r3, [r5, #12]
   15a2a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   15a2c:	68ea      	ldr	r2, [r5, #12]
   15a2e:	7853      	ldrb	r3, [r2, #1]
   15a30:	f043 0301 	orr.w	r3, r3, #1
   15a34:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15a36:	3408      	adds	r4, #8
   15a38:	1c73      	adds	r3, r6, #1
   15a3a:	4a0a      	ldr	r2, [pc, #40]	; (15a64 <z_sys_init_run_level+0x4c>)
   15a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a40:	42a3      	cmp	r3, r4
   15a42:	d90d      	bls.n	15a60 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   15a44:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   15a46:	6823      	ldr	r3, [r4, #0]
   15a48:	4628      	mov	r0, r5
   15a4a:	4798      	blx	r3
		if (dev != NULL) {
   15a4c:	2d00      	cmp	r5, #0
   15a4e:	d0f2      	beq.n	15a36 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   15a50:	2800      	cmp	r0, #0
   15a52:	d0eb      	beq.n	15a2c <z_sys_init_run_level+0x14>
				if (rc < 0) {
   15a54:	2800      	cmp	r0, #0
   15a56:	dbe5      	blt.n	15a24 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   15a58:	28ff      	cmp	r0, #255	; 0xff
   15a5a:	dde5      	ble.n	15a28 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   15a5c:	20ff      	movs	r0, #255	; 0xff
   15a5e:	e7e3      	b.n	15a28 <z_sys_init_run_level+0x10>
		}
	}
}
   15a60:	bd70      	pop	{r4, r5, r6, pc}
   15a62:	bf00      	nop
   15a64:	00023934 	.word	0x00023934

00015a68 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   15a68:	2804      	cmp	r0, #4
   15a6a:	d80c      	bhi.n	15a86 <reason_to_str+0x1e>
   15a6c:	e8df f000 	tbb	[pc, r0]
   15a70:	07050d03 	.word	0x07050d03
   15a74:	09          	.byte	0x09
   15a75:	00          	.byte	0x00
   15a76:	4806      	ldr	r0, [pc, #24]	; (15a90 <reason_to_str+0x28>)
   15a78:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   15a7a:	4806      	ldr	r0, [pc, #24]	; (15a94 <reason_to_str+0x2c>)
   15a7c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   15a7e:	4806      	ldr	r0, [pc, #24]	; (15a98 <reason_to_str+0x30>)
   15a80:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   15a82:	4806      	ldr	r0, [pc, #24]	; (15a9c <reason_to_str+0x34>)
   15a84:	4770      	bx	lr
	default:
		return "Unknown error";
   15a86:	4806      	ldr	r0, [pc, #24]	; (15aa0 <reason_to_str+0x38>)
   15a88:	4770      	bx	lr
		return "Unhandled interrupt";
   15a8a:	4806      	ldr	r0, [pc, #24]	; (15aa4 <reason_to_str+0x3c>)
	}
}
   15a8c:	4770      	bx	lr
   15a8e:	bf00      	nop
   15a90:	0002399c 	.word	0x0002399c
   15a94:	00023970 	.word	0x00023970
   15a98:	00023980 	.word	0x00023980
   15a9c:	0002398c 	.word	0x0002398c
   15aa0:	0002394c 	.word	0x0002394c
   15aa4:	0002395c 	.word	0x0002395c

00015aa8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15aa8:	b130      	cbz	r0, 15ab8 <thread_name_get+0x10>
{
   15aaa:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   15aac:	f009 fcc1 	bl	1f432 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   15ab0:	b120      	cbz	r0, 15abc <thread_name_get+0x14>
   15ab2:	7803      	ldrb	r3, [r0, #0]
   15ab4:	b123      	cbz	r3, 15ac0 <thread_name_get+0x18>
}
   15ab6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   15ab8:	4802      	ldr	r0, [pc, #8]	; (15ac4 <thread_name_get+0x1c>)
}
   15aba:	4770      	bx	lr
		thread_name = "unknown";
   15abc:	4801      	ldr	r0, [pc, #4]	; (15ac4 <thread_name_get+0x1c>)
   15abe:	e7fa      	b.n	15ab6 <thread_name_get+0xe>
   15ac0:	4800      	ldr	r0, [pc, #0]	; (15ac4 <thread_name_get+0x1c>)
	return thread_name;
   15ac2:	e7f8      	b.n	15ab6 <thread_name_get+0xe>
   15ac4:	000216b8 	.word	0x000216b8

00015ac8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15acc:	b089      	sub	sp, #36	; 0x24
   15ace:	af00      	add	r7, sp, #0
   15ad0:	4606      	mov	r6, r0
   15ad2:	460c      	mov	r4, r1
	__asm__ volatile(
   15ad4:	f04f 0320 	mov.w	r3, #32
   15ad8:	f3ef 8811 	mrs	r8, BASEPRI
   15adc:	f383 8812 	msr	BASEPRI_MAX, r3
   15ae0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15ae4:	f001 fa5a 	bl	16f9c <z_impl_z_current_get>
   15ae8:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15aea:	4630      	mov	r0, r6
   15aec:	f7ff ffbc 	bl	15a68 <reason_to_str>
   15af0:	2303      	movs	r3, #3
   15af2:	713b      	strb	r3, [r7, #4]
   15af4:	46e9      	mov	r9, sp
   15af6:	b08a      	sub	sp, #40	; 0x28
   15af8:	466b      	mov	r3, sp
   15afa:	f113 0210 	adds.w	r2, r3, #16
   15afe:	f000 80ad 	beq.w	15c5c <z_fatal_error+0x194>
   15b02:	f04f 0c15 	mov.w	ip, #21
   15b06:	b122      	cbz	r2, 15b12 <z_fatal_error+0x4a>
   15b08:	f1bc 0f04 	cmp.w	ip, #4
   15b0c:	dd01      	ble.n	15b12 <z_fatal_error+0x4a>
   15b0e:	4974      	ldr	r1, [pc, #464]	; (15ce0 <z_fatal_error+0x218>)
   15b10:	6159      	str	r1, [r3, #20]
   15b12:	b11a      	cbz	r2, 15b1c <z_fatal_error+0x54>
   15b14:	f1bc 0f08 	cmp.w	ip, #8
   15b18:	dd00      	ble.n	15b1c <z_fatal_error+0x54>
   15b1a:	619e      	str	r6, [r3, #24]
   15b1c:	2103      	movs	r1, #3
   15b1e:	7039      	strb	r1, [r7, #0]
   15b20:	b11a      	cbz	r2, 15b2a <z_fatal_error+0x62>
   15b22:	f1bc 0f0c 	cmp.w	ip, #12
   15b26:	dd00      	ble.n	15b2a <z_fatal_error+0x62>
   15b28:	61d8      	str	r0, [r3, #28]
   15b2a:	b122      	cbz	r2, 15b36 <z_fatal_error+0x6e>
   15b2c:	f1bc 0f10 	cmp.w	ip, #16
   15b30:	dd01      	ble.n	15b36 <z_fatal_error+0x6e>
   15b32:	2100      	movs	r1, #0
   15b34:	6219      	str	r1, [r3, #32]
   15b36:	b12a      	cbz	r2, 15b44 <z_fatal_error+0x7c>
   15b38:	f103 0124 	add.w	r1, r3, #36	; 0x24
   15b3c:	2000      	movs	r0, #0
   15b3e:	2800      	cmp	r0, #0
   15b40:	f000 808f 	beq.w	15c62 <z_fatal_error+0x19a>
   15b44:	f1bc 0f14 	cmp.w	ip, #20
   15b48:	f340 8094 	ble.w	15c74 <z_fatal_error+0x1ac>
   15b4c:	f04f 0c15 	mov.w	ip, #21
   15b50:	b142      	cbz	r2, 15b64 <z_fatal_error+0x9c>
   15b52:	2105      	movs	r1, #5
   15b54:	7139      	strb	r1, [r7, #4]
   15b56:	2100      	movs	r1, #0
   15b58:	7179      	strb	r1, [r7, #5]
   15b5a:	71b9      	strb	r1, [r7, #6]
   15b5c:	2101      	movs	r1, #1
   15b5e:	71f9      	strb	r1, [r7, #7]
   15b60:	6878      	ldr	r0, [r7, #4]
   15b62:	6118      	str	r0, [r3, #16]
   15b64:	2100      	movs	r1, #0
   15b66:	f36f 0100 	bfc	r1, #0, #1
   15b6a:	f36f 0141 	bfc	r1, #1, #1
   15b6e:	f36f 0182 	bfc	r1, #2, #1
   15b72:	f36f 01c5 	bfc	r1, #3, #3
   15b76:	2301      	movs	r3, #1
   15b78:	f363 1188 	bfi	r1, r3, #6, #3
   15b7c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
   15b80:	f36c 2152 	bfi	r1, ip, #9, #10
   15b84:	f36f 41de 	bfc	r1, #19, #12
   15b88:	f36f 71df 	bfc	r1, #31, #1
   15b8c:	2300      	movs	r3, #0
   15b8e:	4855      	ldr	r0, [pc, #340]	; (15ce4 <z_fatal_error+0x21c>)
   15b90:	f7ed fd9c 	bl	36cc <z_impl_z_log_msg_static_create>
   15b94:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   15b96:	b124      	cbz	r4, 15ba2 <z_fatal_error+0xda>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   15b98:	69e3      	ldr	r3, [r4, #28]
   15b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15b9e:	2b00      	cmp	r3, #0
   15ba0:	d16b      	bne.n	15c7a <z_fatal_error+0x1b2>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   15ba2:	4628      	mov	r0, r5
   15ba4:	f7ff ff80 	bl	15aa8 <thread_name_get>
   15ba8:	2303      	movs	r3, #3
   15baa:	713b      	strb	r3, [r7, #4]
   15bac:	46e9      	mov	r9, sp
   15bae:	b08a      	sub	sp, #40	; 0x28
   15bb0:	466b      	mov	r3, sp
   15bb2:	f113 0210 	adds.w	r2, r3, #16
   15bb6:	f000 8083 	beq.w	15cc0 <z_fatal_error+0x1f8>
   15bba:	f04f 0c11 	mov.w	ip, #17
   15bbe:	b122      	cbz	r2, 15bca <z_fatal_error+0x102>
   15bc0:	f1bc 0f04 	cmp.w	ip, #4
   15bc4:	dd01      	ble.n	15bca <z_fatal_error+0x102>
   15bc6:	4948      	ldr	r1, [pc, #288]	; (15ce8 <z_fatal_error+0x220>)
   15bc8:	6159      	str	r1, [r3, #20]
   15bca:	b11a      	cbz	r2, 15bd4 <z_fatal_error+0x10c>
   15bcc:	f1bc 0f08 	cmp.w	ip, #8
   15bd0:	dd00      	ble.n	15bd4 <z_fatal_error+0x10c>
   15bd2:	619d      	str	r5, [r3, #24]
   15bd4:	2103      	movs	r1, #3
   15bd6:	7039      	strb	r1, [r7, #0]
   15bd8:	b11a      	cbz	r2, 15be2 <z_fatal_error+0x11a>
   15bda:	f1bc 0f0c 	cmp.w	ip, #12
   15bde:	dd00      	ble.n	15be2 <z_fatal_error+0x11a>
   15be0:	61d8      	str	r0, [r3, #28]
   15be2:	b122      	cbz	r2, 15bee <z_fatal_error+0x126>
   15be4:	f103 0120 	add.w	r1, r3, #32
   15be8:	2000      	movs	r0, #0
   15bea:	2800      	cmp	r0, #0
   15bec:	d06b      	beq.n	15cc6 <z_fatal_error+0x1fe>
   15bee:	f1bc 0f10 	cmp.w	ip, #16
   15bf2:	dd71      	ble.n	15cd8 <z_fatal_error+0x210>
   15bf4:	f04f 0c11 	mov.w	ip, #17
   15bf8:	b142      	cbz	r2, 15c0c <z_fatal_error+0x144>
   15bfa:	2104      	movs	r1, #4
   15bfc:	7139      	strb	r1, [r7, #4]
   15bfe:	2100      	movs	r1, #0
   15c00:	7179      	strb	r1, [r7, #5]
   15c02:	71b9      	strb	r1, [r7, #6]
   15c04:	2101      	movs	r1, #1
   15c06:	71f9      	strb	r1, [r7, #7]
   15c08:	6878      	ldr	r0, [r7, #4]
   15c0a:	6118      	str	r0, [r3, #16]
   15c0c:	2100      	movs	r1, #0
   15c0e:	f36f 0100 	bfc	r1, #0, #1
   15c12:	f36f 0141 	bfc	r1, #1, #1
   15c16:	f36f 0182 	bfc	r1, #2, #1
   15c1a:	f36f 01c5 	bfc	r1, #3, #3
   15c1e:	2301      	movs	r3, #1
   15c20:	f363 1188 	bfi	r1, r3, #6, #3
   15c24:	f3cc 0c09 	ubfx	ip, ip, #0, #10
   15c28:	f36c 2152 	bfi	r1, ip, #9, #10
   15c2c:	f36f 41de 	bfc	r1, #19, #12
   15c30:	f36f 71df 	bfc	r1, #31, #1
   15c34:	2300      	movs	r3, #0
   15c36:	482b      	ldr	r0, [pc, #172]	; (15ce4 <z_fatal_error+0x21c>)
   15c38:	f7ed fd48 	bl	36cc <z_impl_z_log_msg_static_create>
   15c3c:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   15c3e:	4621      	mov	r1, r4
   15c40:	4630      	mov	r0, r6
   15c42:	f7fd fc25 	bl	13490 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15c46:	f388 8811 	msr	BASEPRI, r8
   15c4a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15c4e:	4628      	mov	r0, r5
   15c50:	f7f0 fd3e 	bl	66d0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15c54:	3724      	adds	r7, #36	; 0x24
   15c56:	46bd      	mov	sp, r7
   15c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   15c5c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   15c60:	e751      	b.n	15b06 <z_fatal_error+0x3e>
   15c62:	f107 0e20 	add.w	lr, r7, #32
   15c66:	4486      	add	lr, r0
   15c68:	f81e ec20 	ldrb.w	lr, [lr, #-32]
   15c6c:	f801 eb01 	strb.w	lr, [r1], #1
   15c70:	3001      	adds	r0, #1
   15c72:	e764      	b.n	15b3e <z_fatal_error+0x76>
   15c74:	f06f 0c1b 	mvn.w	ip, #27
   15c78:	e76a      	b.n	15b50 <z_fatal_error+0x88>
		LOG_ERR("Fault during interrupt handling\n");
   15c7a:	4b1c      	ldr	r3, [pc, #112]	; (15cec <z_fatal_error+0x224>)
   15c7c:	61fb      	str	r3, [r7, #28]
   15c7e:	2302      	movs	r3, #2
   15c80:	713b      	strb	r3, [r7, #4]
   15c82:	2300      	movs	r3, #0
   15c84:	717b      	strb	r3, [r7, #5]
   15c86:	71bb      	strb	r3, [r7, #6]
   15c88:	71fb      	strb	r3, [r7, #7]
   15c8a:	687a      	ldr	r2, [r7, #4]
   15c8c:	61ba      	str	r2, [r7, #24]
   15c8e:	4619      	mov	r1, r3
   15c90:	f363 0100 	bfi	r1, r3, #0, #1
   15c94:	f363 0141 	bfi	r1, r3, #1, #1
   15c98:	f363 0182 	bfi	r1, r3, #2, #1
   15c9c:	f363 01c5 	bfi	r1, r3, #3, #3
   15ca0:	2201      	movs	r2, #1
   15ca2:	f362 1188 	bfi	r1, r2, #6, #3
   15ca6:	2208      	movs	r2, #8
   15ca8:	f362 2152 	bfi	r1, r2, #9, #10
   15cac:	f363 41de 	bfi	r1, r3, #19, #12
   15cb0:	f363 71df 	bfi	r1, r3, #31, #1
   15cb4:	f107 0218 	add.w	r2, r7, #24
   15cb8:	480a      	ldr	r0, [pc, #40]	; (15ce4 <z_fatal_error+0x21c>)
   15cba:	f7ed fd07 	bl	36cc <z_impl_z_log_msg_static_create>
   15cbe:	e770      	b.n	15ba2 <z_fatal_error+0xda>
	LOG_ERR("Current thread: %p (%s)", thread,
   15cc0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   15cc4:	e77b      	b.n	15bbe <z_fatal_error+0xf6>
   15cc6:	f107 0e20 	add.w	lr, r7, #32
   15cca:	4486      	add	lr, r0
   15ccc:	f81e ec20 	ldrb.w	lr, [lr, #-32]
   15cd0:	f801 eb01 	strb.w	lr, [r1], #1
   15cd4:	3001      	adds	r0, #1
   15cd6:	e788      	b.n	15bea <z_fatal_error+0x122>
   15cd8:	f06f 0c1b 	mvn.w	ip, #27
   15cdc:	e78c      	b.n	15bf8 <z_fatal_error+0x130>
   15cde:	bf00      	nop
   15ce0:	000239ac 	.word	0x000239ac
   15ce4:	000205c0 	.word	0x000205c0
   15ce8:	000239f8 	.word	0x000239f8
   15cec:	000239d4 	.word	0x000239d4

00015cf0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   15cf0:	b510      	push	{r4, lr}
   15cf2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   15cf4:	4c11      	ldr	r4, [pc, #68]	; (15d3c <init_idle_thread+0x4c>)
   15cf6:	23b8      	movs	r3, #184	; 0xb8
   15cf8:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   15cfc:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15d00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15d04:	4b0e      	ldr	r3, [pc, #56]	; (15d40 <init_idle_thread+0x50>)
   15d06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   15d0a:	4b0e      	ldr	r3, [pc, #56]	; (15d44 <init_idle_thread+0x54>)
   15d0c:	9305      	str	r3, [sp, #20]
   15d0e:	2301      	movs	r3, #1
   15d10:	9304      	str	r3, [sp, #16]
   15d12:	230f      	movs	r3, #15
   15d14:	9303      	str	r3, [sp, #12]
   15d16:	2300      	movs	r3, #0
   15d18:	9302      	str	r3, [sp, #8]
   15d1a:	9301      	str	r3, [sp, #4]
   15d1c:	9000      	str	r0, [sp, #0]
   15d1e:	4b0a      	ldr	r3, [pc, #40]	; (15d48 <init_idle_thread+0x58>)
   15d20:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15d24:	4909      	ldr	r1, [pc, #36]	; (15d4c <init_idle_thread+0x5c>)
   15d26:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   15d2a:	4620      	mov	r0, r4
   15d2c:	f000 f970 	bl	16010 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15d30:	7b63      	ldrb	r3, [r4, #13]
   15d32:	f023 0304 	bic.w	r3, r3, #4
   15d36:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   15d38:	b006      	add	sp, #24
   15d3a:	bd10      	pop	{r4, pc}
   15d3c:	20001660 	.word	0x20001660
   15d40:	2000294c 	.word	0x2000294c
   15d44:	00023a10 	.word	0x00023a10
   15d48:	0001616d 	.word	0x0001616d
   15d4c:	20004530 	.word	0x20004530

00015d50 <bg_thread_main>:
{
   15d50:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15d52:	4b0a      	ldr	r3, [pc, #40]	; (15d7c <bg_thread_main+0x2c>)
   15d54:	2201      	movs	r2, #1
   15d56:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15d58:	2002      	movs	r0, #2
   15d5a:	f7ff fe5d 	bl	15a18 <z_sys_init_run_level>
	boot_banner();
   15d5e:	f001 fe9b 	bl	17a98 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   15d62:	2003      	movs	r0, #3
   15d64:	f7ff fe58 	bl	15a18 <z_sys_init_run_level>
	z_init_static_threads();
   15d68:	f000 f9b6 	bl	160d8 <z_init_static_threads>
	main();
   15d6c:	f7eb f99a 	bl	10a4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15d70:	4a03      	ldr	r2, [pc, #12]	; (15d80 <bg_thread_main+0x30>)
   15d72:	7b13      	ldrb	r3, [r2, #12]
   15d74:	f023 0301 	bic.w	r3, r3, #1
   15d78:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15d7a:	bd08      	pop	{r3, pc}
   15d7c:	20002b7d 	.word	0x20002b7d
   15d80:	20001718 	.word	0x20001718

00015d84 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   15d84:	b508      	push	{r3, lr}
   15d86:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d88:	4a01      	ldr	r2, [pc, #4]	; (15d90 <switch_to_main_thread+0xc>)
   15d8a:	4802      	ldr	r0, [pc, #8]	; (15d94 <switch_to_main_thread+0x10>)
   15d8c:	f7ef fd02 	bl	5794 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15d90:	00015d51 	.word	0x00015d51
   15d94:	20001718 	.word	0x20001718

00015d98 <z_bss_zero>:
{
   15d98:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   15d9a:	4803      	ldr	r0, [pc, #12]	; (15da8 <z_bss_zero+0x10>)
   15d9c:	4a03      	ldr	r2, [pc, #12]	; (15dac <z_bss_zero+0x14>)
   15d9e:	1a12      	subs	r2, r2, r0
   15da0:	2100      	movs	r1, #0
   15da2:	f009 fa6d 	bl	1f280 <z_early_memset>
}
   15da6:	bd08      	pop	{r3, pc}
   15da8:	20000890 	.word	0x20000890
   15dac:	20002b80 	.word	0x20002b80

00015db0 <z_init_cpu>:
{
   15db0:	b510      	push	{r4, lr}
   15db2:	4604      	mov	r4, r0
	init_idle_thread(id);
   15db4:	f7ff ff9c 	bl	15cf0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   15db8:	490a      	ldr	r1, [pc, #40]	; (15de4 <z_init_cpu+0x34>)
   15dba:	23b8      	movs	r3, #184	; 0xb8
   15dbc:	fb03 1104 	mla	r1, r3, r4, r1
   15dc0:	4a09      	ldr	r2, [pc, #36]	; (15de8 <z_init_cpu+0x38>)
   15dc2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15dc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15dca:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   15dcc:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   15dce:	4b07      	ldr	r3, [pc, #28]	; (15dec <z_init_cpu+0x3c>)
   15dd0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   15dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   15dd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   15ddc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   15de0:	6063      	str	r3, [r4, #4]
}
   15de2:	bd10      	pop	{r4, pc}
   15de4:	20001660 	.word	0x20001660
   15de8:	2000294c 	.word	0x2000294c
   15dec:	20004670 	.word	0x20004670

00015df0 <prepare_multithreading>:
{
   15df0:	b570      	push	{r4, r5, r6, lr}
   15df2:	b086      	sub	sp, #24
	z_sched_init();
   15df4:	f001 f80a 	bl	16e0c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   15df8:	4d10      	ldr	r5, [pc, #64]	; (15e3c <prepare_multithreading+0x4c>)
   15dfa:	4b11      	ldr	r3, [pc, #68]	; (15e40 <prepare_multithreading+0x50>)
   15dfc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15dfe:	4b11      	ldr	r3, [pc, #68]	; (15e44 <prepare_multithreading+0x54>)
   15e00:	9305      	str	r3, [sp, #20]
   15e02:	2301      	movs	r3, #1
   15e04:	9304      	str	r3, [sp, #16]
   15e06:	2400      	movs	r4, #0
   15e08:	9403      	str	r4, [sp, #12]
   15e0a:	9402      	str	r4, [sp, #8]
   15e0c:	9401      	str	r4, [sp, #4]
   15e0e:	9400      	str	r4, [sp, #0]
   15e10:	4b0d      	ldr	r3, [pc, #52]	; (15e48 <prepare_multithreading+0x58>)
   15e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15e16:	490d      	ldr	r1, [pc, #52]	; (15e4c <prepare_multithreading+0x5c>)
   15e18:	4628      	mov	r0, r5
   15e1a:	f000 f8f9 	bl	16010 <z_setup_new_thread>
   15e1e:	4606      	mov	r6, r0
   15e20:	7b6b      	ldrb	r3, [r5, #13]
   15e22:	f023 0304 	bic.w	r3, r3, #4
   15e26:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   15e28:	4628      	mov	r0, r5
   15e2a:	f009 fe00 	bl	1fa2e <z_ready_thread>
	z_init_cpu(0);
   15e2e:	4620      	mov	r0, r4
   15e30:	f7ff ffbe 	bl	15db0 <z_init_cpu>
}
   15e34:	4630      	mov	r0, r6
   15e36:	b006      	add	sp, #24
   15e38:	bd70      	pop	{r4, r5, r6, pc}
   15e3a:	bf00      	nop
   15e3c:	20001718 	.word	0x20001718
   15e40:	2000294c 	.word	0x2000294c
   15e44:	00023a18 	.word	0x00023a18
   15e48:	00015d51 	.word	0x00015d51
   15e4c:	20004130 	.word	0x20004130

00015e50 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   15e50:	b500      	push	{lr}
   15e52:	b0af      	sub	sp, #188	; 0xbc
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   15e54:	4b1f      	ldr	r3, [pc, #124]	; (15ed4 <z_cstart+0x84>)
	uint32_t msp =
   15e56:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15e5a:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   15e5e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15e62:	4c1d      	ldr	r4, [pc, #116]	; (15ed8 <z_cstart+0x88>)
   15e64:	23e0      	movs	r3, #224	; 0xe0
   15e66:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   15e6a:	2500      	movs	r5, #0
   15e6c:	77e5      	strb	r5, [r4, #31]
   15e6e:	7625      	strb	r5, [r4, #24]
   15e70:	7665      	strb	r5, [r4, #25]
   15e72:	76a5      	strb	r5, [r4, #26]
   15e74:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15e7a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15e7e:	6263      	str	r3, [r4, #36]	; 0x24
   15e80:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15e84:	f7f0 fb70 	bl	6568 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15e88:	f7ef fa62 	bl	5350 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15e8c:	f04f 33ff 	mov.w	r3, #4294967295
   15e90:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15e92:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   15e94:	f7f0 fe8e 	bl	6bb4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15e98:	f7f0 fc34 	bl	6704 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   15e9c:	f7ed fae2 	bl	3464 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   15ea0:	2401      	movs	r4, #1
   15ea2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   15ea6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   15eaa:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   15eac:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   15eae:	4668      	mov	r0, sp
   15eb0:	f001 fdd6 	bl	17a60 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   15eb4:	4b09      	ldr	r3, [pc, #36]	; (15edc <z_cstart+0x8c>)
   15eb6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15eba:	f7ff fda1 	bl	15a00 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15ebe:	4628      	mov	r0, r5
   15ec0:	f7ff fdaa 	bl	15a18 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15ec4:	4620      	mov	r0, r4
   15ec6:	f7ff fda7 	bl	15a18 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   15eca:	f7ff ff91 	bl	15df0 <prepare_multithreading>
   15ece:	f7ff ff59 	bl	15d84 <switch_to_main_thread>
   15ed2:	bf00      	nop
   15ed4:	20004670 	.word	0x20004670
   15ed8:	e000ed00 	.word	0xe000ed00
   15edc:	2000294c 	.word	0x2000294c

00015ee0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   15ee0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15ee2:	4c06      	ldr	r4, [pc, #24]	; (15efc <statics_init+0x1c>)
   15ee4:	e005      	b.n	15ef2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15ee6:	68a2      	ldr	r2, [r4, #8]
   15ee8:	6861      	ldr	r1, [r4, #4]
   15eea:	4620      	mov	r0, r4
   15eec:	f009 f9d0 	bl	1f290 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15ef0:	3414      	adds	r4, #20
   15ef2:	4b03      	ldr	r3, [pc, #12]	; (15f00 <statics_init+0x20>)
   15ef4:	429c      	cmp	r4, r3
   15ef6:	d3f6      	bcc.n	15ee6 <statics_init+0x6>
		}
	}
	return 0;
}
   15ef8:	2000      	movs	r0, #0
   15efa:	bd10      	pop	{r4, pc}
   15efc:	20000680 	.word	0x20000680
   15f00:	20000694 	.word	0x20000694

00015f04 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   15f04:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15f06:	4c06      	ldr	r4, [pc, #24]	; (15f20 <init_mem_slab_module+0x1c>)
	int rc = 0;
   15f08:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15f0a:	e000      	b.n	15f0e <init_mem_slab_module+0xa>
   15f0c:	341c      	adds	r4, #28
   15f0e:	4b05      	ldr	r3, [pc, #20]	; (15f24 <init_mem_slab_module+0x20>)
   15f10:	429c      	cmp	r4, r3
   15f12:	d204      	bcs.n	15f1e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   15f14:	4620      	mov	r0, r4
   15f16:	f009 fa29 	bl	1f36c <create_free_list>
		if (rc < 0) {
   15f1a:	2800      	cmp	r0, #0
   15f1c:	daf6      	bge.n	15f0c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   15f1e:	bd10      	pop	{r4, pc}
   15f20:	2000062c 	.word	0x2000062c
   15f24:	20000680 	.word	0x20000680

00015f28 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15f28:	b530      	push	{r4, r5, lr}
   15f2a:	b083      	sub	sp, #12
   15f2c:	460d      	mov	r5, r1
	__asm__ volatile(
   15f2e:	f04f 0420 	mov.w	r4, #32
   15f32:	f3ef 8111 	mrs	r1, BASEPRI
   15f36:	f384 8812 	msr	BASEPRI_MAX, r4
   15f3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15f3e:	6944      	ldr	r4, [r0, #20]
   15f40:	b16c      	cbz	r4, 15f5e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
   15f42:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   15f44:	6943      	ldr	r3, [r0, #20]
   15f46:	681b      	ldr	r3, [r3, #0]
   15f48:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15f4a:	6983      	ldr	r3, [r0, #24]
   15f4c:	3301      	adds	r3, #1
   15f4e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15f50:	2000      	movs	r0, #0
	__asm__ volatile(
   15f52:	f381 8811 	msr	BASEPRI, r1
   15f56:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   15f5a:	b003      	add	sp, #12
   15f5c:	bd30      	pop	{r4, r5, pc}
   15f5e:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15f62:	ea53 0402 	orrs.w	r4, r3, r2
   15f66:	d104      	bne.n	15f72 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   15f68:	2300      	movs	r3, #0
   15f6a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   15f6c:	f06f 000b 	mvn.w	r0, #11
   15f70:	e7ef      	b.n	15f52 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15f72:	9200      	str	r2, [sp, #0]
   15f74:	9301      	str	r3, [sp, #4]
   15f76:	4602      	mov	r2, r0
   15f78:	4660      	mov	r0, ip
   15f7a:	f000 fe1b 	bl	16bb4 <z_pend_curr>
		if (result == 0) {
   15f7e:	2800      	cmp	r0, #0
   15f80:	d1eb      	bne.n	15f5a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
   15f82:	4b02      	ldr	r3, [pc, #8]	; (15f8c <k_mem_slab_alloc+0x64>)
   15f84:	689b      	ldr	r3, [r3, #8]
   15f86:	695b      	ldr	r3, [r3, #20]
   15f88:	602b      	str	r3, [r5, #0]
		return result;
   15f8a:	e7e6      	b.n	15f5a <k_mem_slab_alloc+0x32>
   15f8c:	2000294c 	.word	0x2000294c

00015f90 <z_thread_monitor_exit>:
	__asm__ volatile(
   15f90:	f04f 0320 	mov.w	r3, #32
   15f94:	f3ef 8111 	mrs	r1, BASEPRI
   15f98:	f383 8812 	msr	BASEPRI_MAX, r3
   15f9c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   15fa0:	4b0a      	ldr	r3, [pc, #40]	; (15fcc <z_thread_monitor_exit+0x3c>)
   15fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fa4:	4283      	cmp	r3, r0
   15fa6:	d104      	bne.n	15fb2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   15fa8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   15faa:	4b08      	ldr	r3, [pc, #32]	; (15fcc <z_thread_monitor_exit+0x3c>)
   15fac:	629a      	str	r2, [r3, #40]	; 0x28
   15fae:	e007      	b.n	15fc0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   15fb0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   15fb2:	b113      	cbz	r3, 15fba <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   15fb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   15fb6:	4282      	cmp	r2, r0
   15fb8:	d1fa      	bne.n	15fb0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   15fba:	b10b      	cbz	r3, 15fc0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   15fbc:	6f42      	ldr	r2, [r0, #116]	; 0x74
   15fbe:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   15fc0:	f381 8811 	msr	BASEPRI, r1
   15fc4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   15fc8:	4770      	bx	lr
   15fca:	bf00      	nop
   15fcc:	2000294c 	.word	0x2000294c

00015fd0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   15fd0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   15fd2:	4604      	mov	r4, r0
   15fd4:	b140      	cbz	r0, 15fe8 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   15fd6:	221f      	movs	r2, #31
   15fd8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   15fdc:	f003 ffd8 	bl	19f90 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   15fe0:	2000      	movs	r0, #0
   15fe2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   15fe6:	bd10      	pop	{r4, pc}
		thread = _current;
   15fe8:	4b01      	ldr	r3, [pc, #4]	; (15ff0 <z_impl_k_thread_name_set+0x20>)
   15fea:	689c      	ldr	r4, [r3, #8]
   15fec:	e7f3      	b.n	15fd6 <z_impl_k_thread_name_set+0x6>
   15fee:	bf00      	nop
   15ff0:	2000294c 	.word	0x2000294c

00015ff4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   15ff4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15ff6:	ea53 0102 	orrs.w	r1, r3, r2
   15ffa:	d102      	bne.n	16002 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   15ffc:	f009 fa1b 	bl	1f436 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   16000:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16002:	4902      	ldr	r1, [pc, #8]	; (1600c <schedule_new_thread+0x18>)
   16004:	3018      	adds	r0, #24
   16006:	f001 f87d 	bl	17104 <z_add_timeout>
   1600a:	e7f9      	b.n	16000 <schedule_new_thread+0xc>
   1600c:	0001fa67 	.word	0x0001fa67

00016010 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   16010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16014:	b085      	sub	sp, #20
   16016:	4604      	mov	r4, r0
   16018:	460f      	mov	r7, r1
   1601a:	4615      	mov	r5, r2
   1601c:	461e      	mov	r6, r3
   1601e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   16022:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   16026:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1602a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1602e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16032:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   16034:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   16036:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16038:	2204      	movs	r2, #4
   1603a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1603c:	f009 f9ff 	bl	1f43e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   16040:	462a      	mov	r2, r5
   16042:	4639      	mov	r1, r7
   16044:	4620      	mov	r0, r4
   16046:	f009 f9e2 	bl	1f40e <setup_thread_stack>
   1604a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1604c:	f8cd 8008 	str.w	r8, [sp, #8]
   16050:	f8cd 9004 	str.w	r9, [sp, #4]
   16054:	f8cd a000 	str.w	sl, [sp]
   16058:	4633      	mov	r3, r6
   1605a:	4602      	mov	r2, r0
   1605c:	4639      	mov	r1, r7
   1605e:	4620      	mov	r0, r4
   16060:	f7ef fb76 	bl	5750 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   16064:	2300      	movs	r3, #0
   16066:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   16068:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1606a:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1606e:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   16072:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   16076:	f04f 0320 	mov.w	r3, #32
   1607a:	f3ef 8211 	mrs	r2, BASEPRI
   1607e:	f383 8812 	msr	BASEPRI_MAX, r3
   16082:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   16086:	4b13      	ldr	r3, [pc, #76]	; (160d4 <z_setup_new_thread+0xc4>)
   16088:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1608a:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1608c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1608e:	f382 8811 	msr	BASEPRI, r2
   16092:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   16096:	f1bb 0f00 	cmp.w	fp, #0
   1609a:	d013      	beq.n	160c4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   1609c:	221f      	movs	r2, #31
   1609e:	4659      	mov	r1, fp
   160a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   160a4:	f003 ff74 	bl	19f90 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   160a8:	2300      	movs	r3, #0
   160aa:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   160ae:	4b09      	ldr	r3, [pc, #36]	; (160d4 <z_setup_new_thread+0xc4>)
   160b0:	689b      	ldr	r3, [r3, #8]
   160b2:	b15b      	cbz	r3, 160cc <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   160b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   160b8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   160bc:	4628      	mov	r0, r5
   160be:	b005      	add	sp, #20
   160c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   160c4:	2300      	movs	r3, #0
   160c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   160ca:	e7f0      	b.n	160ae <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   160cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   160d0:	e7f4      	b.n	160bc <z_setup_new_thread+0xac>
   160d2:	bf00      	nop
   160d4:	2000294c 	.word	0x2000294c

000160d8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   160d8:	b530      	push	{r4, r5, lr}
   160da:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   160dc:	4c21      	ldr	r4, [pc, #132]	; (16164 <z_init_static_threads+0x8c>)
   160de:	e014      	b.n	1610a <z_init_static_threads+0x32>
		z_setup_new_thread(
   160e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   160e2:	9305      	str	r3, [sp, #20]
   160e4:	6a23      	ldr	r3, [r4, #32]
   160e6:	9304      	str	r3, [sp, #16]
   160e8:	69e3      	ldr	r3, [r4, #28]
   160ea:	9303      	str	r3, [sp, #12]
   160ec:	69a3      	ldr	r3, [r4, #24]
   160ee:	9302      	str	r3, [sp, #8]
   160f0:	6963      	ldr	r3, [r4, #20]
   160f2:	9301      	str	r3, [sp, #4]
   160f4:	6923      	ldr	r3, [r4, #16]
   160f6:	9300      	str	r3, [sp, #0]
   160f8:	68e3      	ldr	r3, [r4, #12]
   160fa:	68a2      	ldr	r2, [r4, #8]
   160fc:	6861      	ldr	r1, [r4, #4]
   160fe:	6820      	ldr	r0, [r4, #0]
   16100:	f7ff ff86 	bl	16010 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   16104:	6823      	ldr	r3, [r4, #0]
   16106:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   16108:	3430      	adds	r4, #48	; 0x30
   1610a:	4b17      	ldr	r3, [pc, #92]	; (16168 <z_init_static_threads+0x90>)
   1610c:	429c      	cmp	r4, r3
   1610e:	d3e7      	bcc.n	160e0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   16110:	f000 fbe4 	bl	168dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   16114:	4c13      	ldr	r4, [pc, #76]	; (16164 <z_init_static_threads+0x8c>)
   16116:	e000      	b.n	1611a <z_init_static_threads+0x42>
   16118:	3430      	adds	r4, #48	; 0x30
   1611a:	4b13      	ldr	r3, [pc, #76]	; (16168 <z_init_static_threads+0x90>)
   1611c:	429c      	cmp	r4, r3
   1611e:	d21c      	bcs.n	1615a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   16120:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16122:	f1b0 3fff 	cmp.w	r0, #4294967295
   16126:	d0f7      	beq.n	16118 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   16128:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1612a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1612e:	17c1      	asrs	r1, r0, #31
   16130:	03c9      	lsls	r1, r1, #15
   16132:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   16136:	03c0      	lsls	r0, r0, #15
   16138:	f240 33e7 	movw	r3, #999	; 0x3e7
   1613c:	18c0      	adds	r0, r0, r3
   1613e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16142:	f04f 0300 	mov.w	r3, #0
   16146:	f141 0100 	adc.w	r1, r1, #0
   1614a:	f7ea fad3 	bl	6f4 <__aeabi_uldivmod>
   1614e:	4602      	mov	r2, r0
   16150:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   16152:	4628      	mov	r0, r5
   16154:	f7ff ff4e 	bl	15ff4 <schedule_new_thread>
   16158:	e7de      	b.n	16118 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   1615a:	f000 fde1 	bl	16d20 <k_sched_unlock>
}
   1615e:	b007      	add	sp, #28
   16160:	bd30      	pop	{r4, r5, pc}
   16162:	bf00      	nop
   16164:	2000062c 	.word	0x2000062c
   16168:	2000062c 	.word	0x2000062c

0001616c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1616c:	b508      	push	{r3, lr}
   1616e:	e001      	b.n	16174 <idle+0x8>
	arch_cpu_idle();
   16170:	f7ef f8f4 	bl	535c <arch_cpu_idle>
	__asm__ volatile(
   16174:	f04f 0220 	mov.w	r2, #32
   16178:	f3ef 8311 	mrs	r3, BASEPRI
   1617c:	f382 8812 	msr	BASEPRI_MAX, r2
   16180:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   16184:	f009 fdc5 	bl	1fd12 <z_get_next_timeout_expiry>
   16188:	4b05      	ldr	r3, [pc, #20]	; (161a0 <idle+0x34>)
   1618a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   1618c:	4b05      	ldr	r3, [pc, #20]	; (161a4 <idle+0x38>)
   1618e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   16190:	2b00      	cmp	r3, #0
   16192:	d0ed      	beq.n	16170 <idle+0x4>
   16194:	f7ee fa16 	bl	45c4 <pm_system_suspend>
   16198:	2800      	cmp	r0, #0
   1619a:	d1eb      	bne.n	16174 <idle+0x8>
   1619c:	e7e8      	b.n	16170 <idle+0x4>
   1619e:	bf00      	nop
   161a0:	2000294c 	.word	0x2000294c
   161a4:	20002b7d 	.word	0x20002b7d

000161a8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   161a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   161ac:	b083      	sub	sp, #12
   161ae:	4604      	mov	r4, r0
   161b0:	461d      	mov	r5, r3
   161b2:	f04f 0320 	mov.w	r3, #32
   161b6:	f3ef 8711 	mrs	r7, BASEPRI
   161ba:	f383 8812 	msr	BASEPRI_MAX, r3
   161be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   161c2:	68c1      	ldr	r1, [r0, #12]
   161c4:	b999      	cbnz	r1, 161ee <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   161c6:	2900      	cmp	r1, #0
   161c8:	d14f      	bne.n	1626a <z_impl_k_mutex_lock+0xc2>
   161ca:	4b3a      	ldr	r3, [pc, #232]	; (162b4 <z_impl_k_mutex_lock+0x10c>)
   161cc:	689b      	ldr	r3, [r3, #8]
   161ce:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   161d2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   161d4:	3101      	adds	r1, #1
   161d6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   161d8:	4b36      	ldr	r3, [pc, #216]	; (162b4 <z_impl_k_mutex_lock+0x10c>)
   161da:	689b      	ldr	r3, [r3, #8]
   161dc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   161de:	f387 8811 	msr	BASEPRI, r7
   161e2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   161e6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   161e8:	b003      	add	sp, #12
   161ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   161ee:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   161f0:	6882      	ldr	r2, [r0, #8]
   161f2:	4b30      	ldr	r3, [pc, #192]	; (162b4 <z_impl_k_mutex_lock+0x10c>)
   161f4:	689b      	ldr	r3, [r3, #8]
   161f6:	429a      	cmp	r2, r3
   161f8:	d0e5      	beq.n	161c6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   161fa:	ea55 0106 	orrs.w	r1, r5, r6
   161fe:	bf0c      	ite	eq
   16200:	f04f 0801 	moveq.w	r8, #1
   16204:	f04f 0800 	movne.w	r8, #0
   16208:	d031      	beq.n	1626e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1620a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1620e:	4649      	mov	r1, r9
   16210:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16214:	f009 f946 	bl	1f4a4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   16218:	4581      	cmp	r9, r0
   1621a:	dc2f      	bgt.n	1627c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1621c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   16220:	9600      	str	r6, [sp, #0]
   16222:	9501      	str	r5, [sp, #4]
   16224:	4622      	mov	r2, r4
   16226:	4639      	mov	r1, r7
   16228:	4823      	ldr	r0, [pc, #140]	; (162b8 <z_impl_k_mutex_lock+0x110>)
   1622a:	f000 fcc3 	bl	16bb4 <z_pend_curr>
	if (got_mutex == 0) {
   1622e:	2800      	cmp	r0, #0
   16230:	d0da      	beq.n	161e8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   16232:	f04f 0320 	mov.w	r3, #32
   16236:	f3ef 8511 	mrs	r5, BASEPRI
   1623a:	f383 8812 	msr	BASEPRI_MAX, r3
   1623e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16242:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16244:	429c      	cmp	r4, r3
   16246:	d01f      	beq.n	16288 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16248:	b1f3      	cbz	r3, 16288 <z_impl_k_mutex_lock+0xe0>
   1624a:	6921      	ldr	r1, [r4, #16]
   1624c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   16250:	f009 f928 	bl	1f4a4 <new_prio_for_inheritance>
   16254:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   16256:	4620      	mov	r0, r4
   16258:	f009 f92f 	bl	1f4ba <adjust_owner_prio>
   1625c:	b9b0      	cbnz	r0, 1628c <z_impl_k_mutex_lock+0xe4>
   1625e:	f1b9 0f00 	cmp.w	r9, #0
   16262:	d015      	beq.n	16290 <z_impl_k_mutex_lock+0xe8>
   16264:	f04f 0801 	mov.w	r8, #1
   16268:	e012      	b.n	16290 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1626a:	6923      	ldr	r3, [r4, #16]
   1626c:	e7b1      	b.n	161d2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1626e:	f387 8811 	msr	BASEPRI, r7
   16272:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   16276:	f06f 000f 	mvn.w	r0, #15
   1627a:	e7b5      	b.n	161e8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1627c:	4601      	mov	r1, r0
   1627e:	4620      	mov	r0, r4
   16280:	f009 f91b 	bl	1f4ba <adjust_owner_prio>
   16284:	4681      	mov	r9, r0
   16286:	e7cb      	b.n	16220 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   16288:	6921      	ldr	r1, [r4, #16]
   1628a:	e7e4      	b.n	16256 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1628c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   16290:	f1b8 0f00 	cmp.w	r8, #0
   16294:	d106      	bne.n	162a4 <z_impl_k_mutex_lock+0xfc>
   16296:	f385 8811 	msr	BASEPRI, r5
   1629a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1629e:	f06f 000a 	mvn.w	r0, #10
   162a2:	e7a1      	b.n	161e8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   162a4:	4629      	mov	r1, r5
   162a6:	4804      	ldr	r0, [pc, #16]	; (162b8 <z_impl_k_mutex_lock+0x110>)
   162a8:	f000 fafc 	bl	168a4 <z_reschedule>
	return -EAGAIN;
   162ac:	f06f 000a 	mvn.w	r0, #10
   162b0:	e79a      	b.n	161e8 <z_impl_k_mutex_lock+0x40>
   162b2:	bf00      	nop
   162b4:	2000294c 	.word	0x2000294c
   162b8:	20002978 	.word	0x20002978

000162bc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   162bc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   162be:	6883      	ldr	r3, [r0, #8]
   162c0:	b383      	cbz	r3, 16324 <z_impl_k_mutex_unlock+0x68>
   162c2:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   162c4:	4a1a      	ldr	r2, [pc, #104]	; (16330 <z_impl_k_mutex_unlock+0x74>)
   162c6:	6892      	ldr	r2, [r2, #8]
   162c8:	4293      	cmp	r3, r2
   162ca:	d12e      	bne.n	1632a <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   162cc:	68c3      	ldr	r3, [r0, #12]
   162ce:	2b01      	cmp	r3, #1
   162d0:	d903      	bls.n	162da <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   162d2:	3b01      	subs	r3, #1
   162d4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   162d6:	2000      	movs	r0, #0
}
   162d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   162da:	f04f 0320 	mov.w	r3, #32
   162de:	f3ef 8511 	mrs	r5, BASEPRI
   162e2:	f383 8812 	msr	BASEPRI_MAX, r3
   162e6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   162ea:	6901      	ldr	r1, [r0, #16]
   162ec:	f009 f8e5 	bl	1f4ba <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   162f0:	4620      	mov	r0, r4
   162f2:	f009 fc63 	bl	1fbbc <z_unpend_first_thread>
	mutex->owner = new_owner;
   162f6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   162f8:	b168      	cbz	r0, 16316 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   162fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
   162fe:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   16300:	2400      	movs	r4, #0
   16302:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   16306:	f009 fb92 	bl	1fa2e <z_ready_thread>
		z_reschedule(&lock, key);
   1630a:	4629      	mov	r1, r5
   1630c:	4809      	ldr	r0, [pc, #36]	; (16334 <z_impl_k_mutex_unlock+0x78>)
   1630e:	f000 fac9 	bl	168a4 <z_reschedule>
	return 0;
   16312:	4620      	mov	r0, r4
   16314:	e7e0      	b.n	162d8 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
   16316:	2000      	movs	r0, #0
   16318:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1631a:	f385 8811 	msr	BASEPRI, r5
   1631e:	f3bf 8f6f 	isb	sy
   16322:	e7d9      	b.n	162d8 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
   16324:	f06f 0015 	mvn.w	r0, #21
   16328:	e7d6      	b.n	162d8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1632a:	f04f 30ff 	mov.w	r0, #4294967295
   1632e:	e7d3      	b.n	162d8 <z_impl_k_mutex_unlock+0x1c>
   16330:	2000294c 	.word	0x2000294c
   16334:	20002978 	.word	0x20002978

00016338 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16338:	b510      	push	{r4, lr}
   1633a:	b082      	sub	sp, #8
   1633c:	4601      	mov	r1, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1633e:	4684      	mov	ip, r0
	__asm__ volatile(
   16340:	f04f 0020 	mov.w	r0, #32
   16344:	f3ef 8411 	mrs	r4, BASEPRI
   16348:	f380 8812 	msr	BASEPRI_MAX, r0
   1634c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   16350:	f85c 0b08 	ldr.w	r0, [ip], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   16354:	b188      	cbz	r0, 1637a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16356:	6803      	ldr	r3, [r0, #0]
   16358:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1635c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1635e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16360:	4290      	cmp	r0, r2
   16362:	d008      	beq.n	16376 <z_impl_k_queue_get+0x3e>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   16364:	2101      	movs	r1, #1
   16366:	f009 f930 	bl	1f5ca <z_queue_node_peek>
	__asm__ volatile(
   1636a:	f384 8811 	msr	BASEPRI, r4
   1636e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   16372:	b002      	add	sp, #8
   16374:	bd10      	pop	{r4, pc}
	list->tail = node;
   16376:	604b      	str	r3, [r1, #4]
}
   16378:	e7f4      	b.n	16364 <z_impl_k_queue_get+0x2c>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1637a:	ea53 0102 	orrs.w	r1, r3, r2
   1637e:	d00b      	beq.n	16398 <z_impl_k_queue_get+0x60>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   16380:	9200      	str	r2, [sp, #0]
   16382:	9301      	str	r3, [sp, #4]
   16384:	4662      	mov	r2, ip
   16386:	4621      	mov	r1, r4
   16388:	4660      	mov	r0, ip
   1638a:	f000 fc13 	bl	16bb4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1638e:	b948      	cbnz	r0, 163a4 <z_impl_k_queue_get+0x6c>
   16390:	4b05      	ldr	r3, [pc, #20]	; (163a8 <z_impl_k_queue_get+0x70>)
   16392:	689b      	ldr	r3, [r3, #8]
   16394:	6958      	ldr	r0, [r3, #20]
   16396:	e7ec      	b.n	16372 <z_impl_k_queue_get+0x3a>
   16398:	f384 8811 	msr	BASEPRI, r4
   1639c:	f3bf 8f6f 	isb	sy
		return NULL;
   163a0:	2000      	movs	r0, #0
   163a2:	e7e6      	b.n	16372 <z_impl_k_queue_get+0x3a>
	return (ret != 0) ? NULL : _current->base.swap_data;
   163a4:	2000      	movs	r0, #0
   163a6:	e7e4      	b.n	16372 <z_impl_k_queue_get+0x3a>
   163a8:	2000294c 	.word	0x2000294c

000163ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   163ac:	b538      	push	{r3, r4, r5, lr}
   163ae:	4604      	mov	r4, r0
	__asm__ volatile(
   163b0:	f04f 0320 	mov.w	r3, #32
   163b4:	f3ef 8511 	mrs	r5, BASEPRI
   163b8:	f383 8812 	msr	BASEPRI_MAX, r3
   163bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   163c0:	f009 fbfc 	bl	1fbbc <z_unpend_first_thread>

	if (thread != NULL) {
   163c4:	b148      	cbz	r0, 163da <z_impl_k_sem_give+0x2e>
   163c6:	2200      	movs	r2, #0
   163c8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   163cc:	f009 fb2f 	bl	1fa2e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   163d0:	4629      	mov	r1, r5
   163d2:	4809      	ldr	r0, [pc, #36]	; (163f8 <z_impl_k_sem_give+0x4c>)
   163d4:	f000 fa66 	bl	168a4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   163d8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   163da:	68a3      	ldr	r3, [r4, #8]
   163dc:	68e2      	ldr	r2, [r4, #12]
   163de:	4293      	cmp	r3, r2
   163e0:	d008      	beq.n	163f4 <z_impl_k_sem_give+0x48>
   163e2:	2201      	movs	r2, #1
   163e4:	4413      	add	r3, r2
   163e6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   163e8:	2102      	movs	r1, #2
   163ea:	f104 0010 	add.w	r0, r4, #16
   163ee:	f009 fdba 	bl	1ff66 <z_handle_obj_poll_events>
}
   163f2:	e7ed      	b.n	163d0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   163f4:	2200      	movs	r2, #0
   163f6:	e7f5      	b.n	163e4 <z_impl_k_sem_give+0x38>
   163f8:	20002978 	.word	0x20002978

000163fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   163fc:	b510      	push	{r4, lr}
   163fe:	b082      	sub	sp, #8
   16400:	f04f 0420 	mov.w	r4, #32
   16404:	f3ef 8111 	mrs	r1, BASEPRI
   16408:	f384 8812 	msr	BASEPRI_MAX, r4
   1640c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   16410:	6884      	ldr	r4, [r0, #8]
   16412:	b144      	cbz	r4, 16426 <z_impl_k_sem_take+0x2a>
		sem->count--;
   16414:	3c01      	subs	r4, #1
   16416:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   16418:	f381 8811 	msr	BASEPRI, r1
   1641c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   16420:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   16422:	b002      	add	sp, #8
   16424:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16426:	ea53 0402 	orrs.w	r4, r3, r2
   1642a:	d006      	beq.n	1643a <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1642c:	9200      	str	r2, [sp, #0]
   1642e:	9301      	str	r3, [sp, #4]
   16430:	4602      	mov	r2, r0
   16432:	4805      	ldr	r0, [pc, #20]	; (16448 <z_impl_k_sem_take+0x4c>)
   16434:	f000 fbbe 	bl	16bb4 <z_pend_curr>
	return ret;
   16438:	e7f3      	b.n	16422 <z_impl_k_sem_take+0x26>
   1643a:	f381 8811 	msr	BASEPRI, r1
   1643e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16442:	f06f 000f 	mvn.w	r0, #15
   16446:	e7ec      	b.n	16422 <z_impl_k_sem_take+0x26>
   16448:	20002978 	.word	0x20002978

0001644c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1644c:	b510      	push	{r4, lr}
   1644e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   16450:	4b08      	ldr	r3, [pc, #32]	; (16474 <k_sys_work_q_init+0x28>)
   16452:	9302      	str	r3, [sp, #8]
   16454:	2400      	movs	r4, #0
   16456:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1645a:	ab02      	add	r3, sp, #8
   1645c:	9300      	str	r3, [sp, #0]
   1645e:	f04f 33ff 	mov.w	r3, #4294967295
   16462:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16466:	4904      	ldr	r1, [pc, #16]	; (16478 <k_sys_work_q_init+0x2c>)
   16468:	4804      	ldr	r0, [pc, #16]	; (1647c <k_sys_work_q_init+0x30>)
   1646a:	f000 f96f 	bl	1674c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1646e:	4620      	mov	r0, r4
   16470:	b004      	add	sp, #16
   16472:	bd10      	pop	{r4, pc}
   16474:	00023a24 	.word	0x00023a24
   16478:	20004e70 	.word	0x20004e70
   1647c:	200017d0 	.word	0x200017d0

00016480 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   16480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16482:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   16484:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   16486:	f013 0f02 	tst.w	r3, #2
   1648a:	d15c      	bne.n	16546 <submit_to_queue_locked+0xc6>
   1648c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1648e:	f013 0f04 	tst.w	r3, #4
   16492:	d15d      	bne.n	16550 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   16494:	680b      	ldr	r3, [r1, #0]
   16496:	2b00      	cmp	r3, #0
   16498:	d038      	beq.n	1650c <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
   1649a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1649c:	f013 0f01 	tst.w	r3, #1
   164a0:	d037      	beq.n	16512 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   164a2:	68a3      	ldr	r3, [r4, #8]
   164a4:	602b      	str	r3, [r5, #0]
			ret = 2;
   164a6:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   164a8:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   164aa:	2e00      	cmp	r6, #0
   164ac:	d03f      	beq.n	1652e <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   164ae:	4b29      	ldr	r3, [pc, #164]	; (16554 <submit_to_queue_locked+0xd4>)
   164b0:	689b      	ldr	r3, [r3, #8]
   164b2:	42b3      	cmp	r3, r6
   164b4:	d02f      	beq.n	16516 <submit_to_queue_locked+0x96>
   164b6:	2300      	movs	r3, #0
   164b8:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   164ba:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   164be:	f3c3 0180 	ubfx	r1, r3, #2, #1
   164c2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   164c6:	f013 0f01 	tst.w	r3, #1
   164ca:	d033      	beq.n	16534 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
   164cc:	b101      	cbz	r1, 164d0 <submit_to_queue_locked+0x50>
   164ce:	b3a2      	cbz	r2, 1653a <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
   164d0:	b100      	cbz	r0, 164d4 <submit_to_queue_locked+0x54>
   164d2:	b3a9      	cbz	r1, 16540 <submit_to_queue_locked+0xc0>
	parent->next = child;
   164d4:	2300      	movs	r3, #0
   164d6:	6023      	str	r3, [r4, #0]
	return list->tail;
   164d8:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   164dc:	b313      	cbz	r3, 16524 <submit_to_queue_locked+0xa4>
	parent->next = child;
   164de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   164e0:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	if (queue != NULL) {
   164e4:	b12e      	cbz	r6, 164f2 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   164e6:	2200      	movs	r2, #0
   164e8:	4611      	mov	r1, r2
   164ea:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   164ee:	f009 fba4 	bl	1fc3a <z_sched_wake>
		ret = 1;
   164f2:	2001      	movs	r0, #1

		if (rc < 0) {
   164f4:	2800      	cmp	r0, #0
   164f6:	db06      	blt.n	16506 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
   164f8:	68e3      	ldr	r3, [r4, #12]
   164fa:	f043 0304 	orr.w	r3, r3, #4
   164fe:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   16500:	682b      	ldr	r3, [r5, #0]
   16502:	60a3      	str	r3, [r4, #8]
   16504:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   16506:	2800      	cmp	r0, #0
   16508:	dc21      	bgt.n	1654e <submit_to_queue_locked+0xce>
   1650a:	e01e      	b.n	1654a <submit_to_queue_locked+0xca>
			*queuep = work->queue;
   1650c:	6883      	ldr	r3, [r0, #8]
   1650e:	600b      	str	r3, [r1, #0]
   16510:	e7c3      	b.n	1649a <submit_to_queue_locked+0x1a>
		ret = 1;
   16512:	2701      	movs	r7, #1
   16514:	e7c8      	b.n	164a8 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16516:	f008 ff86 	bl	1f426 <k_is_in_isr>
   1651a:	b908      	cbnz	r0, 16520 <submit_to_queue_locked+0xa0>
   1651c:	2301      	movs	r3, #1
   1651e:	e7cb      	b.n	164b8 <submit_to_queue_locked+0x38>
   16520:	2300      	movs	r3, #0
   16522:	e7c9      	b.n	164b8 <submit_to_queue_locked+0x38>
   16524:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   16528:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1652c:	e7da      	b.n	164e4 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1652e:	f06f 0015 	mvn.w	r0, #21
   16532:	e7df      	b.n	164f4 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
   16534:	f06f 0012 	mvn.w	r0, #18
   16538:	e7dc      	b.n	164f4 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   1653a:	f06f 000f 	mvn.w	r0, #15
   1653e:	e7d9      	b.n	164f4 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   16540:	f06f 000f 	mvn.w	r0, #15
   16544:	e7d6      	b.n	164f4 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   16546:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1654a:	2300      	movs	r3, #0
   1654c:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   16550:	2000      	movs	r0, #0
   16552:	e7fa      	b.n	1654a <submit_to_queue_locked+0xca>
   16554:	2000294c 	.word	0x2000294c

00016558 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   16558:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1655a:	68c5      	ldr	r5, [r0, #12]
   1655c:	f015 0f02 	tst.w	r5, #2
   16560:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   16564:	d101      	bne.n	1656a <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   16566:	4628      	mov	r0, r5
   16568:	bd70      	pop	{r4, r5, r6, pc}
   1656a:	4604      	mov	r4, r0
   1656c:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1656e:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   16572:	2201      	movs	r2, #1
   16574:	2100      	movs	r1, #0
   16576:	f009 f899 	bl	1f6ac <z_impl_k_sem_init>
	canceler->work = work;
   1657a:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1657c:	2300      	movs	r3, #0
   1657e:	6033      	str	r3, [r6, #0]
	return list->tail;
   16580:	4b05      	ldr	r3, [pc, #20]	; (16598 <cancel_sync_locked+0x40>)
   16582:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   16584:	b11b      	cbz	r3, 1658e <cancel_sync_locked+0x36>
	parent->next = child;
   16586:	601e      	str	r6, [r3, #0]
	list->tail = node;
   16588:	4b03      	ldr	r3, [pc, #12]	; (16598 <cancel_sync_locked+0x40>)
   1658a:	605e      	str	r6, [r3, #4]
}
   1658c:	e7eb      	b.n	16566 <cancel_sync_locked+0xe>
   1658e:	4b02      	ldr	r3, [pc, #8]	; (16598 <cancel_sync_locked+0x40>)
   16590:	605e      	str	r6, [r3, #4]
	list->head = node;
   16592:	601e      	str	r6, [r3, #0]
}
   16594:	e7e7      	b.n	16566 <cancel_sync_locked+0xe>
   16596:	bf00      	nop
   16598:	20002978 	.word	0x20002978

0001659c <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1659c:	b508      	push	{r3, lr}
   1659e:	4684      	mov	ip, r0
   165a0:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   165a2:	ea53 0102 	orrs.w	r1, r3, r2
   165a6:	d00c      	beq.n	165c2 <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   165a8:	68c1      	ldr	r1, [r0, #12]
   165aa:	f041 0108 	orr.w	r1, r1, #8
   165ae:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   165b0:	f8dc 1000 	ldr.w	r1, [ip]
   165b4:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   165b6:	4905      	ldr	r1, [pc, #20]	; (165cc <schedule_for_queue_locked+0x30>)
   165b8:	3010      	adds	r0, #16
   165ba:	f000 fda3 	bl	17104 <z_add_timeout>

	return ret;
   165be:	2001      	movs	r0, #1
}
   165c0:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   165c2:	4661      	mov	r1, ip
   165c4:	f7ff ff5c 	bl	16480 <submit_to_queue_locked>
   165c8:	e7fa      	b.n	165c0 <schedule_for_queue_locked+0x24>
   165ca:	bf00      	nop
   165cc:	0001f745 	.word	0x0001f745

000165d0 <finalize_cancel_locked>:
{
   165d0:	b570      	push	{r4, r5, r6, lr}
   165d2:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   165d4:	68c3      	ldr	r3, [r0, #12]
   165d6:	f023 0302 	bic.w	r3, r3, #2
   165da:	60c3      	str	r3, [r0, #12]
	return list->head;
   165dc:	4b1a      	ldr	r3, [pc, #104]	; (16648 <finalize_cancel_locked+0x78>)
   165de:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   165e0:	b1fb      	cbz	r3, 16622 <finalize_cancel_locked+0x52>
   165e2:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   165e4:	b103      	cbz	r3, 165e8 <finalize_cancel_locked+0x18>
	return node->next;
   165e6:	681c      	ldr	r4, [r3, #0]
   165e8:	2600      	movs	r6, #0
   165ea:	e01f      	b.n	1662c <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   165ec:	461a      	mov	r2, r3
Z_GENLIST_REMOVE(slist, snode)
   165ee:	b166      	cbz	r6, 1660a <finalize_cancel_locked+0x3a>
	return node->next;
   165f0:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
   165f2:	6031      	str	r1, [r6, #0]
	return list->tail;
   165f4:	4914      	ldr	r1, [pc, #80]	; (16648 <finalize_cancel_locked+0x78>)
   165f6:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   165f8:	428b      	cmp	r3, r1
   165fa:	d00f      	beq.n	1661c <finalize_cancel_locked+0x4c>
	parent->next = child;
   165fc:	2100      	movs	r1, #0
   165fe:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
   16600:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
   16604:	f7ff fed2 	bl	163ac <z_impl_k_sem_give>
}
   16608:	e015      	b.n	16636 <finalize_cancel_locked+0x66>
	return node->next;
   1660a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1660c:	490e      	ldr	r1, [pc, #56]	; (16648 <finalize_cancel_locked+0x78>)
   1660e:	6008      	str	r0, [r1, #0]
	return list->tail;
   16610:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   16612:	428b      	cmp	r3, r1
   16614:	d1f2      	bne.n	165fc <finalize_cancel_locked+0x2c>
	list->tail = node;
   16616:	490c      	ldr	r1, [pc, #48]	; (16648 <finalize_cancel_locked+0x78>)
   16618:	6048      	str	r0, [r1, #4]
}
   1661a:	e7ef      	b.n	165fc <finalize_cancel_locked+0x2c>
	list->tail = node;
   1661c:	490a      	ldr	r1, [pc, #40]	; (16648 <finalize_cancel_locked+0x78>)
   1661e:	604e      	str	r6, [r1, #4]
}
   16620:	e7ec      	b.n	165fc <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16622:	461c      	mov	r4, r3
   16624:	e7e0      	b.n	165e8 <finalize_cancel_locked+0x18>
   16626:	4622      	mov	r2, r4
   16628:	4623      	mov	r3, r4
   1662a:	4614      	mov	r4, r2
   1662c:	b153      	cbz	r3, 16644 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
   1662e:	685a      	ldr	r2, [r3, #4]
   16630:	42aa      	cmp	r2, r5
   16632:	d0db      	beq.n	165ec <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   16634:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16636:	2c00      	cmp	r4, #0
   16638:	d0f5      	beq.n	16626 <finalize_cancel_locked+0x56>
   1663a:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1663c:	2c00      	cmp	r4, #0
   1663e:	d0f3      	beq.n	16628 <finalize_cancel_locked+0x58>
	return node->next;
   16640:	6822      	ldr	r2, [r4, #0]
   16642:	e7f1      	b.n	16628 <finalize_cancel_locked+0x58>
}
   16644:	bd70      	pop	{r4, r5, r6, pc}
   16646:	bf00      	nop
   16648:	20002978 	.word	0x20002978

0001664c <work_queue_main>:
{
   1664c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1664e:	b085      	sub	sp, #20
   16650:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   16652:	e016      	b.n	16682 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   16654:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   16658:	f023 0204 	bic.w	r2, r3, #4
   1665c:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   16660:	f013 0f04 	tst.w	r3, #4
   16664:	d159      	bne.n	1671a <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   16666:	2300      	movs	r3, #0
   16668:	9302      	str	r3, [sp, #8]
   1666a:	f04f 32ff 	mov.w	r2, #4294967295
   1666e:	f04f 33ff 	mov.w	r3, #4294967295
   16672:	e9cd 2300 	strd	r2, r3, [sp]
   16676:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1667a:	4631      	mov	r1, r6
   1667c:	482e      	ldr	r0, [pc, #184]	; (16738 <work_queue_main+0xec>)
   1667e:	f000 fccb 	bl	17018 <z_sched_wait>
	__asm__ volatile(
   16682:	f04f 0320 	mov.w	r3, #32
   16686:	f3ef 8611 	mrs	r6, BASEPRI
   1668a:	f383 8812 	msr	BASEPRI_MAX, r3
   1668e:	f3bf 8f6f 	isb	sy
	return list->head;
   16692:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   16696:	2c00      	cmp	r4, #0
   16698:	d0dc      	beq.n	16654 <work_queue_main+0x8>
	return node->next;
   1669a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1669c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   166a0:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   166a4:	4294      	cmp	r4, r2
   166a6:	d035      	beq.n	16714 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
   166a8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   166ac:	f043 0302 	orr.w	r3, r3, #2
   166b0:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   166b4:	68e3      	ldr	r3, [r4, #12]
   166b6:	f043 0301 	orr.w	r3, r3, #1
   166ba:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   166bc:	f023 0304 	bic.w	r3, r3, #4
   166c0:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   166c2:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   166c4:	2c00      	cmp	r4, #0
   166c6:	d0ce      	beq.n	16666 <work_queue_main+0x1a>
	__asm__ volatile(
   166c8:	f386 8811 	msr	BASEPRI, r6
   166cc:	f3bf 8f6f 	isb	sy
		handler(work);
   166d0:	4620      	mov	r0, r4
   166d2:	4798      	blx	r3
	__asm__ volatile(
   166d4:	f04f 0320 	mov.w	r3, #32
   166d8:	f3ef 8611 	mrs	r6, BASEPRI
   166dc:	f383 8812 	msr	BASEPRI_MAX, r3
   166e0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   166e4:	68e3      	ldr	r3, [r4, #12]
   166e6:	f023 0301 	bic.w	r3, r3, #1
   166ea:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   166ec:	f013 0f02 	tst.w	r3, #2
   166f0:	d11e      	bne.n	16730 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   166f2:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   166f6:	f023 0302 	bic.w	r3, r3, #2
   166fa:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   166fe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   16702:	f386 8811 	msr	BASEPRI, r6
   16706:	f3bf 8f6f 	isb	sy
		if (yield) {
   1670a:	2b00      	cmp	r3, #0
   1670c:	d1b9      	bne.n	16682 <work_queue_main+0x36>
	z_impl_k_yield();
   1670e:	f000 fb89 	bl	16e24 <z_impl_k_yield>
}
   16712:	e7b6      	b.n	16682 <work_queue_main+0x36>
	list->tail = node;
   16714:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   16718:	e7c6      	b.n	166a8 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1671a:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1671e:	2200      	movs	r2, #0
   16720:	2101      	movs	r1, #1
   16722:	4638      	mov	r0, r7
   16724:	f009 fa89 	bl	1fc3a <z_sched_wake>
   16728:	2800      	cmp	r0, #0
   1672a:	d1f8      	bne.n	1671e <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
   1672c:	2300      	movs	r3, #0
   1672e:	e7c9      	b.n	166c4 <work_queue_main+0x78>
			finalize_cancel_locked(work);
   16730:	4620      	mov	r0, r4
   16732:	f7ff ff4d 	bl	165d0 <finalize_cancel_locked>
   16736:	e7dc      	b.n	166f2 <work_queue_main+0xa6>
   16738:	20002978 	.word	0x20002978

0001673c <k_work_submit>:
{
   1673c:	b508      	push	{r3, lr}
   1673e:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   16740:	4801      	ldr	r0, [pc, #4]	; (16748 <k_work_submit+0xc>)
   16742:	f009 f84f 	bl	1f7e4 <k_work_submit_to_queue>
}
   16746:	bd08      	pop	{r3, pc}
   16748:	200017d0 	.word	0x200017d0

0001674c <k_work_queue_start>:
{
   1674c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1674e:	b089      	sub	sp, #36	; 0x24
   16750:	4604      	mov	r4, r0
   16752:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   16754:	2000      	movs	r0, #0
   16756:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1675a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1675e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   16762:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   16766:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1676a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1676e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   16772:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   16776:	b1fd      	cbz	r5, 167b8 <k_work_queue_start+0x6c>
   16778:	7928      	ldrb	r0, [r5, #4]
   1677a:	b9f8      	cbnz	r0, 167bc <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1677c:	2001      	movs	r0, #1
	*flagp = flags;
   1677e:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16782:	f04f 36ff 	mov.w	r6, #4294967295
   16786:	f04f 37ff 	mov.w	r7, #4294967295
   1678a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1678e:	2000      	movs	r0, #0
   16790:	9004      	str	r0, [sp, #16]
   16792:	9303      	str	r3, [sp, #12]
   16794:	9002      	str	r0, [sp, #8]
   16796:	9001      	str	r0, [sp, #4]
   16798:	9400      	str	r4, [sp, #0]
   1679a:	4b0a      	ldr	r3, [pc, #40]	; (167c4 <k_work_queue_start+0x78>)
   1679c:	4620      	mov	r0, r4
   1679e:	f008 fe59 	bl	1f454 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   167a2:	b125      	cbz	r5, 167ae <k_work_queue_start+0x62>
   167a4:	6829      	ldr	r1, [r5, #0]
   167a6:	b111      	cbz	r1, 167ae <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   167a8:	4620      	mov	r0, r4
   167aa:	f7ff fc11 	bl	15fd0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   167ae:	4620      	mov	r0, r4
   167b0:	f008 fe41 	bl	1f436 <z_impl_k_thread_start>
}
   167b4:	b009      	add	sp, #36	; 0x24
   167b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   167b8:	2001      	movs	r0, #1
   167ba:	e7e0      	b.n	1677e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   167bc:	f240 1001 	movw	r0, #257	; 0x101
   167c0:	e7dd      	b.n	1677e <k_work_queue_start+0x32>
   167c2:	bf00      	nop
   167c4:	0001664d 	.word	0x0001664d

000167c8 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   167c8:	b508      	push	{r3, lr}
   167ca:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   167cc:	4801      	ldr	r0, [pc, #4]	; (167d4 <k_work_schedule+0xc>)
   167ce:	f009 f83d 	bl	1f84c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   167d2:	bd08      	pop	{r3, pc}
   167d4:	200017d0 	.word	0x200017d0

000167d8 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   167d8:	b508      	push	{r3, lr}
   167da:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   167dc:	4801      	ldr	r0, [pc, #4]	; (167e4 <k_work_reschedule+0xc>)
   167de:	f009 f84f 	bl	1f880 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   167e2:	bd08      	pop	{r3, pc}
   167e4:	200017d0 	.word	0x200017d0

000167e8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   167e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   167ec:	bf08      	it	eq
   167ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   167f2:	d100      	bne.n	167f6 <add_thread_timeout+0xe>
   167f4:	4770      	bx	lr
{
   167f6:	b508      	push	{r3, lr}
   167f8:	4902      	ldr	r1, [pc, #8]	; (16804 <add_thread_timeout+0x1c>)
   167fa:	3018      	adds	r0, #24
   167fc:	f000 fc82 	bl	17104 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   16800:	bd08      	pop	{r3, pc}
   16802:	bf00      	nop
   16804:	0001fa67 	.word	0x0001fa67

00016808 <z_reset_time_slice>:
{
   16808:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   1680a:	4b07      	ldr	r3, [pc, #28]	; (16828 <z_reset_time_slice+0x20>)
   1680c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   1680e:	b904      	cbnz	r4, 16812 <z_reset_time_slice+0xa>
}
   16810:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   16812:	f7fc fa3d 	bl	12c90 <sys_clock_elapsed>
   16816:	4404      	add	r4, r0
   16818:	4b04      	ldr	r3, [pc, #16]	; (1682c <z_reset_time_slice+0x24>)
   1681a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1681c:	2100      	movs	r1, #0
   1681e:	4b02      	ldr	r3, [pc, #8]	; (16828 <z_reset_time_slice+0x20>)
   16820:	6818      	ldr	r0, [r3, #0]
   16822:	f009 fa8d 	bl	1fd40 <z_set_timeout_expiry>
}
   16826:	e7f3      	b.n	16810 <z_reset_time_slice+0x8>
   16828:	20002988 	.word	0x20002988
   1682c:	2000294c 	.word	0x2000294c

00016830 <k_sched_time_slice_set>:
{
   16830:	b570      	push	{r4, r5, r6, lr}
   16832:	4604      	mov	r4, r0
   16834:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
   16836:	2300      	movs	r3, #0
	__asm__ volatile(
   16838:	f04f 0220 	mov.w	r2, #32
   1683c:	f3ef 8611 	mrs	r6, BASEPRI
   16840:	f382 8812 	msr	BASEPRI_MAX, r2
   16844:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   16848:	e00e      	b.n	16868 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   1684a:	2802      	cmp	r0, #2
   1684c:	bfb8      	it	lt
   1684e:	2002      	movlt	r0, #2
   16850:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   16852:	4b11      	ldr	r3, [pc, #68]	; (16898 <k_sched_time_slice_set+0x68>)
   16854:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   16856:	4b11      	ldr	r3, [pc, #68]	; (1689c <k_sched_time_slice_set+0x6c>)
   16858:	6898      	ldr	r0, [r3, #8]
   1685a:	f7ff ffd5 	bl	16808 <z_reset_time_slice>
	__asm__ volatile(
   1685e:	f386 8811 	msr	BASEPRI, r6
   16862:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16866:	2301      	movs	r3, #1
   16868:	b9a3      	cbnz	r3, 16894 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   1686a:	4b0c      	ldr	r3, [pc, #48]	; (1689c <k_sched_time_slice_set+0x6c>)
   1686c:	2200      	movs	r2, #0
   1686e:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   16870:	0c61      	lsrs	r1, r4, #17
   16872:	03e3      	lsls	r3, r4, #15
   16874:	f240 30e7 	movw	r0, #999	; 0x3e7
   16878:	1818      	adds	r0, r3, r0
   1687a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1687e:	f04f 0300 	mov.w	r3, #0
   16882:	f141 0100 	adc.w	r1, r1, #0
   16886:	f7e9 ff35 	bl	6f4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1688a:	4b05      	ldr	r3, [pc, #20]	; (168a0 <k_sched_time_slice_set+0x70>)
   1688c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1688e:	2c00      	cmp	r4, #0
   16890:	dcdb      	bgt.n	1684a <k_sched_time_slice_set+0x1a>
   16892:	e7de      	b.n	16852 <k_sched_time_slice_set+0x22>
}
   16894:	bd70      	pop	{r4, r5, r6, pc}
   16896:	bf00      	nop
   16898:	20002984 	.word	0x20002984
   1689c:	2000294c 	.word	0x2000294c
   168a0:	20002988 	.word	0x20002988

000168a4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   168a4:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   168a6:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   168a8:	b921      	cbnz	r1, 168b4 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   168aa:	f3ef 8305 	mrs	r3, IPSR
   168ae:	b913      	cbnz	r3, 168b6 <z_reschedule+0x12>
   168b0:	2101      	movs	r1, #1
   168b2:	e000      	b.n	168b6 <z_reschedule+0x12>
   168b4:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   168b6:	f011 0f01 	tst.w	r1, #1
   168ba:	d007      	beq.n	168cc <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   168bc:	4b06      	ldr	r3, [pc, #24]	; (168d8 <z_reschedule+0x34>)
   168be:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   168c0:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   168c2:	429a      	cmp	r2, r3
   168c4:	d002      	beq.n	168cc <z_reschedule+0x28>
	ret = arch_swap(key);
   168c6:	f7ee fee9 	bl	569c <arch_swap>
		z_swap(lock, key);
   168ca:	e003      	b.n	168d4 <z_reschedule+0x30>
   168cc:	f380 8811 	msr	BASEPRI, r0
   168d0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   168d4:	bd08      	pop	{r3, pc}
   168d6:	bf00      	nop
   168d8:	2000294c 	.word	0x2000294c

000168dc <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   168dc:	2300      	movs	r3, #0
	__asm__ volatile(
   168de:	f04f 0220 	mov.w	r2, #32
   168e2:	f3ef 8111 	mrs	r1, BASEPRI
   168e6:	f382 8812 	msr	BASEPRI_MAX, r2
   168ea:	f3bf 8f6f 	isb	sy
   168ee:	e009      	b.n	16904 <k_sched_lock+0x28>
	--_current->base.sched_locked;
   168f0:	4b06      	ldr	r3, [pc, #24]	; (1690c <k_sched_lock+0x30>)
   168f2:	689a      	ldr	r2, [r3, #8]
   168f4:	7bd3      	ldrb	r3, [r2, #15]
   168f6:	3b01      	subs	r3, #1
   168f8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   168fa:	f381 8811 	msr	BASEPRI, r1
   168fe:	f3bf 8f6f 	isb	sy
   16902:	2301      	movs	r3, #1
   16904:	2b00      	cmp	r3, #0
   16906:	d0f3      	beq.n	168f0 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   16908:	4770      	bx	lr
   1690a:	bf00      	nop
   1690c:	2000294c 	.word	0x2000294c

00016910 <update_cache>:
{
   16910:	b538      	push	{r3, r4, r5, lr}
   16912:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   16914:	4810      	ldr	r0, [pc, #64]	; (16958 <update_cache+0x48>)
   16916:	f009 f883 	bl	1fa20 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1691a:	4605      	mov	r5, r0
   1691c:	b170      	cbz	r0, 1693c <update_cache+0x2c>
	if (preempt_ok != 0) {
   1691e:	b984      	cbnz	r4, 16942 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   16920:	4b0e      	ldr	r3, [pc, #56]	; (1695c <update_cache+0x4c>)
   16922:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   16924:	7b5a      	ldrb	r2, [r3, #13]
   16926:	f012 0f1f 	tst.w	r2, #31
   1692a:	d10a      	bne.n	16942 <update_cache+0x32>
	return node->next != NULL;
   1692c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1692e:	b942      	cbnz	r2, 16942 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16930:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   16932:	2a7f      	cmp	r2, #127	; 0x7f
   16934:	d905      	bls.n	16942 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   16936:	4a09      	ldr	r2, [pc, #36]	; (1695c <update_cache+0x4c>)
   16938:	61d3      	str	r3, [r2, #28]
   1693a:	e00b      	b.n	16954 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1693c:	4b07      	ldr	r3, [pc, #28]	; (1695c <update_cache+0x4c>)
   1693e:	68dd      	ldr	r5, [r3, #12]
   16940:	e7ed      	b.n	1691e <update_cache+0xe>
		if (thread != _current) {
   16942:	4b06      	ldr	r3, [pc, #24]	; (1695c <update_cache+0x4c>)
   16944:	689b      	ldr	r3, [r3, #8]
   16946:	42ab      	cmp	r3, r5
   16948:	d002      	beq.n	16950 <update_cache+0x40>
			z_reset_time_slice(thread);
   1694a:	4628      	mov	r0, r5
   1694c:	f7ff ff5c 	bl	16808 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   16950:	4b02      	ldr	r3, [pc, #8]	; (1695c <update_cache+0x4c>)
   16952:	61dd      	str	r5, [r3, #28]
}
   16954:	bd38      	pop	{r3, r4, r5, pc}
   16956:	bf00      	nop
   16958:	2000296c 	.word	0x2000296c
   1695c:	2000294c 	.word	0x2000294c

00016960 <move_thread_to_end_of_prio_q>:
{
   16960:	b538      	push	{r3, r4, r5, lr}
   16962:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   16964:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16966:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1696a:	2b00      	cmp	r3, #0
   1696c:	db28      	blt.n	169c0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1696e:	7b6b      	ldrb	r3, [r5, #13]
   16970:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16974:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   16976:	4b1a      	ldr	r3, [pc, #104]	; (169e0 <move_thread_to_end_of_prio_q+0x80>)
   16978:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1697c:	429c      	cmp	r4, r3
   1697e:	d02d      	beq.n	169dc <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16980:	b16c      	cbz	r4, 1699e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16982:	4621      	mov	r1, r4
   16984:	4628      	mov	r0, r5
   16986:	f008 ffe0 	bl	1f94a <z_sched_prio_cmp>
   1698a:	2800      	cmp	r0, #0
   1698c:	dc20      	bgt.n	169d0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1698e:	b134      	cbz	r4, 1699e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   16990:	4b13      	ldr	r3, [pc, #76]	; (169e0 <move_thread_to_end_of_prio_q+0x80>)
   16992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16994:	429c      	cmp	r4, r3
   16996:	d002      	beq.n	1699e <move_thread_to_end_of_prio_q+0x3e>
   16998:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1699a:	2c00      	cmp	r4, #0
   1699c:	d1f0      	bne.n	16980 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1699e:	4b10      	ldr	r3, [pc, #64]	; (169e0 <move_thread_to_end_of_prio_q+0x80>)
   169a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   169a2:	f103 0120 	add.w	r1, r3, #32
   169a6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   169a8:	606a      	str	r2, [r5, #4]

	tail->next = node;
   169aa:	6015      	str	r5, [r2, #0]
	list->tail = node;
   169ac:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   169ae:	4b0c      	ldr	r3, [pc, #48]	; (169e0 <move_thread_to_end_of_prio_q+0x80>)
   169b0:	6898      	ldr	r0, [r3, #8]
   169b2:	42a8      	cmp	r0, r5
   169b4:	bf14      	ite	ne
   169b6:	2000      	movne	r0, #0
   169b8:	2001      	moveq	r0, #1
   169ba:	f7ff ffa9 	bl	16910 <update_cache>
}
   169be:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   169c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   169c4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   169c6:	4601      	mov	r1, r0
   169c8:	4806      	ldr	r0, [pc, #24]	; (169e4 <move_thread_to_end_of_prio_q+0x84>)
   169ca:	f008 fffd 	bl	1f9c8 <z_priq_dumb_remove>
}
   169ce:	e7ce      	b.n	1696e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   169d0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   169d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   169d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   169d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   169d8:	6065      	str	r5, [r4, #4]
}
   169da:	e7e8      	b.n	169ae <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   169dc:	2400      	movs	r4, #0
   169de:	e7cf      	b.n	16980 <move_thread_to_end_of_prio_q+0x20>
   169e0:	2000294c 	.word	0x2000294c
   169e4:	2000296c 	.word	0x2000296c

000169e8 <slice_expired_locked>:
{
   169e8:	b538      	push	{r3, r4, r5, lr}
   169ea:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   169ec:	4b07      	ldr	r3, [pc, #28]	; (16a0c <slice_expired_locked+0x24>)
   169ee:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   169f0:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   169f2:	f013 0f1f 	tst.w	r3, #31
   169f6:	d004      	beq.n	16a02 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   169f8:	4628      	mov	r0, r5
   169fa:	f7ff ff05 	bl	16808 <z_reset_time_slice>
}
   169fe:	4620      	mov	r0, r4
   16a00:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   16a02:	4628      	mov	r0, r5
   16a04:	f7ff ffac 	bl	16960 <move_thread_to_end_of_prio_q>
   16a08:	e7f6      	b.n	169f8 <slice_expired_locked+0x10>
   16a0a:	bf00      	nop
   16a0c:	2000294c 	.word	0x2000294c

00016a10 <z_time_slice>:
{
   16a10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16a12:	f04f 0320 	mov.w	r3, #32
   16a16:	f3ef 8411 	mrs	r4, BASEPRI
   16a1a:	f383 8812 	msr	BASEPRI_MAX, r3
   16a1e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   16a22:	4b22      	ldr	r3, [pc, #136]	; (16aac <z_time_slice+0x9c>)
   16a24:	689b      	ldr	r3, [r3, #8]
   16a26:	4a22      	ldr	r2, [pc, #136]	; (16ab0 <z_time_slice+0xa0>)
   16a28:	6812      	ldr	r2, [r2, #0]
   16a2a:	4293      	cmp	r3, r2
   16a2c:	d018      	beq.n	16a60 <z_time_slice+0x50>
   16a2e:	4621      	mov	r1, r4
	pending_current = NULL;
   16a30:	4a1f      	ldr	r2, [pc, #124]	; (16ab0 <z_time_slice+0xa0>)
   16a32:	2500      	movs	r5, #0
   16a34:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
   16a36:	4a1f      	ldr	r2, [pc, #124]	; (16ab4 <z_time_slice+0xa4>)
   16a38:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
   16a3a:	b372      	cbz	r2, 16a9a <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16a3c:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   16a3e:	2a7f      	cmp	r2, #127	; 0x7f
   16a40:	d816      	bhi.n	16a70 <z_time_slice+0x60>
   16a42:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   16a44:	f012 0f1f 	tst.w	r2, #31
   16a48:	d11c      	bne.n	16a84 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   16a4a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   16a4e:	4a1a      	ldr	r2, [pc, #104]	; (16ab8 <z_time_slice+0xa8>)
   16a50:	6812      	ldr	r2, [r2, #0]
   16a52:	4295      	cmp	r5, r2
   16a54:	db18      	blt.n	16a88 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
   16a56:	4a19      	ldr	r2, [pc, #100]	; (16abc <z_time_slice+0xac>)
   16a58:	4293      	cmp	r3, r2
   16a5a:	d017      	beq.n	16a8c <z_time_slice+0x7c>
   16a5c:	2301      	movs	r3, #1
   16a5e:	e008      	b.n	16a72 <z_time_slice+0x62>
		z_reset_time_slice(_current);
   16a60:	4618      	mov	r0, r3
   16a62:	f7ff fed1 	bl	16808 <z_reset_time_slice>
	__asm__ volatile(
   16a66:	f384 8811 	msr	BASEPRI, r4
   16a6a:	f3bf 8f6f 	isb	sy
		return;
   16a6e:	e01b      	b.n	16aa8 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   16a70:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
   16a72:	b193      	cbz	r3, 16a9a <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
   16a74:	4b0d      	ldr	r3, [pc, #52]	; (16aac <z_time_slice+0x9c>)
   16a76:	691b      	ldr	r3, [r3, #16]
   16a78:	4283      	cmp	r3, r0
   16a7a:	dd09      	ble.n	16a90 <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
   16a7c:	1a18      	subs	r0, r3, r0
   16a7e:	4b0b      	ldr	r3, [pc, #44]	; (16aac <z_time_slice+0x9c>)
   16a80:	6118      	str	r0, [r3, #16]
   16a82:	e00d      	b.n	16aa0 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
   16a84:	2300      	movs	r3, #0
   16a86:	e7f4      	b.n	16a72 <z_time_slice+0x62>
   16a88:	2300      	movs	r3, #0
   16a8a:	e7f2      	b.n	16a72 <z_time_slice+0x62>
   16a8c:	2300      	movs	r3, #0
   16a8e:	e7f0      	b.n	16a72 <z_time_slice+0x62>
			key = slice_expired_locked(key);
   16a90:	4620      	mov	r0, r4
   16a92:	f7ff ffa9 	bl	169e8 <slice_expired_locked>
   16a96:	4601      	mov	r1, r0
   16a98:	e002      	b.n	16aa0 <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
   16a9a:	4b04      	ldr	r3, [pc, #16]	; (16aac <z_time_slice+0x9c>)
   16a9c:	2200      	movs	r2, #0
   16a9e:	611a      	str	r2, [r3, #16]
   16aa0:	f381 8811 	msr	BASEPRI, r1
   16aa4:	f3bf 8f6f 	isb	sy
}
   16aa8:	bd38      	pop	{r3, r4, r5, pc}
   16aaa:	bf00      	nop
   16aac:	2000294c 	.word	0x2000294c
   16ab0:	20002980 	.word	0x20002980
   16ab4:	20002988 	.word	0x20002988
   16ab8:	20002984 	.word	0x20002984
   16abc:	20001660 	.word	0x20001660

00016ac0 <ready_thread>:
{
   16ac0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   16ac2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   16ac4:	f990 200d 	ldrsb.w	r2, [r0, #13]
   16ac8:	2a00      	cmp	r2, #0
   16aca:	db2d      	blt.n	16b28 <ready_thread+0x68>
   16acc:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16ace:	f013 0f1f 	tst.w	r3, #31
   16ad2:	d105      	bne.n	16ae0 <ready_thread+0x20>
	return node->next != NULL;
   16ad4:	6982      	ldr	r2, [r0, #24]
   16ad6:	b10a      	cbz	r2, 16adc <ready_thread+0x1c>
   16ad8:	2200      	movs	r2, #0
   16ada:	e002      	b.n	16ae2 <ready_thread+0x22>
   16adc:	2201      	movs	r2, #1
   16ade:	e000      	b.n	16ae2 <ready_thread+0x22>
   16ae0:	2200      	movs	r2, #0
   16ae2:	b30a      	cbz	r2, 16b28 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   16ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16ae8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   16aea:	4b14      	ldr	r3, [pc, #80]	; (16b3c <ready_thread+0x7c>)
   16aec:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16af0:	429d      	cmp	r5, r3
   16af2:	d020      	beq.n	16b36 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16af4:	b16d      	cbz	r5, 16b12 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16af6:	4629      	mov	r1, r5
   16af8:	4620      	mov	r0, r4
   16afa:	f008 ff26 	bl	1f94a <z_sched_prio_cmp>
   16afe:	2800      	cmp	r0, #0
   16b00:	dc13      	bgt.n	16b2a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16b02:	b135      	cbz	r5, 16b12 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   16b04:	4b0d      	ldr	r3, [pc, #52]	; (16b3c <ready_thread+0x7c>)
   16b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16b08:	429d      	cmp	r5, r3
   16b0a:	d002      	beq.n	16b12 <ready_thread+0x52>
   16b0c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16b0e:	2d00      	cmp	r5, #0
   16b10:	d1f0      	bne.n	16af4 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   16b12:	4b0a      	ldr	r3, [pc, #40]	; (16b3c <ready_thread+0x7c>)
   16b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16b16:	f103 0120 	add.w	r1, r3, #32
   16b1a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16b1c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16b1e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16b20:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   16b22:	2000      	movs	r0, #0
   16b24:	f7ff fef4 	bl	16910 <update_cache>
}
   16b28:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   16b2a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16b2c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16b2e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16b30:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16b32:	606c      	str	r4, [r5, #4]
}
   16b34:	e7f5      	b.n	16b22 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16b36:	2500      	movs	r5, #0
   16b38:	e7dc      	b.n	16af4 <ready_thread+0x34>
   16b3a:	bf00      	nop
   16b3c:	2000294c 	.word	0x2000294c

00016b40 <z_sched_start>:
{
   16b40:	b510      	push	{r4, lr}
	__asm__ volatile(
   16b42:	f04f 0320 	mov.w	r3, #32
   16b46:	f3ef 8411 	mrs	r4, BASEPRI
   16b4a:	f383 8812 	msr	BASEPRI_MAX, r3
   16b4e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   16b52:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   16b54:	f013 0f04 	tst.w	r3, #4
   16b58:	d104      	bne.n	16b64 <z_sched_start+0x24>
	__asm__ volatile(
   16b5a:	f384 8811 	msr	BASEPRI, r4
   16b5e:	f3bf 8f6f 	isb	sy
}
   16b62:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16b64:	f023 0304 	bic.w	r3, r3, #4
   16b68:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   16b6a:	f7ff ffa9 	bl	16ac0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16b6e:	4621      	mov	r1, r4
   16b70:	4801      	ldr	r0, [pc, #4]	; (16b78 <z_sched_start+0x38>)
   16b72:	f7ff fe97 	bl	168a4 <z_reschedule>
   16b76:	e7f4      	b.n	16b62 <z_sched_start+0x22>
   16b78:	20002984 	.word	0x20002984

00016b7c <unready_thread>:
{
   16b7c:	b510      	push	{r4, lr}
   16b7e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   16b80:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   16b82:	f990 300d 	ldrsb.w	r3, [r0, #13]
   16b86:	2b00      	cmp	r3, #0
   16b88:	db08      	blt.n	16b9c <unready_thread+0x20>
	update_cache(thread == _current);
   16b8a:	4b08      	ldr	r3, [pc, #32]	; (16bac <unready_thread+0x30>)
   16b8c:	6898      	ldr	r0, [r3, #8]
   16b8e:	42a0      	cmp	r0, r4
   16b90:	bf14      	ite	ne
   16b92:	2000      	movne	r0, #0
   16b94:	2001      	moveq	r0, #1
   16b96:	f7ff febb 	bl	16910 <update_cache>
}
   16b9a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16ba0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16ba2:	4601      	mov	r1, r0
   16ba4:	4802      	ldr	r0, [pc, #8]	; (16bb0 <unready_thread+0x34>)
   16ba6:	f008 ff0f 	bl	1f9c8 <z_priq_dumb_remove>
}
   16baa:	e7ee      	b.n	16b8a <unready_thread+0xe>
   16bac:	2000294c 	.word	0x2000294c
   16bb0:	2000296c 	.word	0x2000296c

00016bb4 <z_pend_curr>:
{
   16bb4:	b510      	push	{r4, lr}
   16bb6:	460c      	mov	r4, r1
   16bb8:	4611      	mov	r1, r2
	pending_current = _current;
   16bba:	4b06      	ldr	r3, [pc, #24]	; (16bd4 <z_pend_curr+0x20>)
   16bbc:	6898      	ldr	r0, [r3, #8]
   16bbe:	4b06      	ldr	r3, [pc, #24]	; (16bd8 <z_pend_curr+0x24>)
   16bc0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   16bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16bc6:	f008 ffb0 	bl	1fb2a <pend>
   16bca:	4620      	mov	r0, r4
   16bcc:	f7ee fd66 	bl	569c <arch_swap>
}
   16bd0:	bd10      	pop	{r4, pc}
   16bd2:	bf00      	nop
   16bd4:	2000294c 	.word	0x2000294c
   16bd8:	20002980 	.word	0x20002980

00016bdc <z_set_prio>:
{
   16bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16be0:	4604      	mov	r4, r0
   16be2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   16be4:	2300      	movs	r3, #0
	__asm__ volatile(
   16be6:	f04f 0220 	mov.w	r2, #32
   16bea:	f3ef 8811 	mrs	r8, BASEPRI
   16bee:	f382 8812 	msr	BASEPRI_MAX, r2
   16bf2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   16bf6:	461f      	mov	r7, r3
   16bf8:	e008      	b.n	16c0c <z_set_prio+0x30>
		if (need_sched) {
   16bfa:	f012 0701 	ands.w	r7, r2, #1
   16bfe:	d111      	bne.n	16c24 <z_set_prio+0x48>
			thread->base.prio = prio;
   16c00:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
   16c02:	f388 8811 	msr	BASEPRI, r8
   16c06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16c0a:	2301      	movs	r3, #1
   16c0c:	461a      	mov	r2, r3
   16c0e:	2b00      	cmp	r3, #0
   16c10:	d13d      	bne.n	16c8e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   16c12:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16c14:	f013 0f1f 	tst.w	r3, #31
   16c18:	d1ef      	bne.n	16bfa <z_set_prio+0x1e>
	return node->next != NULL;
   16c1a:	69a1      	ldr	r1, [r4, #24]
   16c1c:	2900      	cmp	r1, #0
   16c1e:	d1ec      	bne.n	16bfa <z_set_prio+0x1e>
   16c20:	2201      	movs	r2, #1
   16c22:	e7ea      	b.n	16bfa <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16c28:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16c2a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 16c94 <z_set_prio+0xb8>
   16c2e:	4621      	mov	r1, r4
   16c30:	4648      	mov	r0, r9
   16c32:	f008 fec9 	bl	1f9c8 <z_priq_dumb_remove>
				thread->base.prio = prio;
   16c36:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   16c38:	7b63      	ldrb	r3, [r4, #13]
   16c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16c3e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   16c40:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c44:	454d      	cmp	r5, r9
   16c46:	d020      	beq.n	16c8a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16c48:	b16d      	cbz	r5, 16c66 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16c4a:	4629      	mov	r1, r5
   16c4c:	4620      	mov	r0, r4
   16c4e:	f008 fe7c 	bl	1f94a <z_sched_prio_cmp>
   16c52:	2800      	cmp	r0, #0
   16c54:	dc13      	bgt.n	16c7e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16c56:	b135      	cbz	r5, 16c66 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   16c58:	4b0f      	ldr	r3, [pc, #60]	; (16c98 <z_set_prio+0xbc>)
   16c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16c5c:	429d      	cmp	r5, r3
   16c5e:	d002      	beq.n	16c66 <z_set_prio+0x8a>
   16c60:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16c62:	2d00      	cmp	r5, #0
   16c64:	d1f0      	bne.n	16c48 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   16c66:	4b0c      	ldr	r3, [pc, #48]	; (16c98 <z_set_prio+0xbc>)
   16c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16c6a:	f103 0120 	add.w	r1, r3, #32
   16c6e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   16c70:	6062      	str	r2, [r4, #4]
	tail->next = node;
   16c72:	6014      	str	r4, [r2, #0]
	list->tail = node;
   16c74:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   16c76:	2001      	movs	r0, #1
   16c78:	f7ff fe4a 	bl	16910 <update_cache>
   16c7c:	e7c1      	b.n	16c02 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   16c7e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   16c80:	6063      	str	r3, [r4, #4]
	node->next = successor;
   16c82:	6025      	str	r5, [r4, #0]
	prev->next = node;
   16c84:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   16c86:	606c      	str	r4, [r5, #4]
}
   16c88:	e7f5      	b.n	16c76 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16c8a:	2500      	movs	r5, #0
   16c8c:	e7dc      	b.n	16c48 <z_set_prio+0x6c>
}
   16c8e:	4638      	mov	r0, r7
   16c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16c94:	2000296c 	.word	0x2000296c
   16c98:	2000294c 	.word	0x2000294c

00016c9c <z_impl_k_thread_suspend>:
{
   16c9c:	b538      	push	{r3, r4, r5, lr}
   16c9e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   16ca0:	3018      	adds	r0, #24
   16ca2:	f009 f818 	bl	1fcd6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   16ca6:	2300      	movs	r3, #0
	__asm__ volatile(
   16ca8:	f04f 0220 	mov.w	r2, #32
   16cac:	f3ef 8511 	mrs	r5, BASEPRI
   16cb0:	f382 8812 	msr	BASEPRI_MAX, r2
   16cb4:	f3bf 8f6f 	isb	sy
   16cb8:	e010      	b.n	16cdc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16cba:	7b63      	ldrb	r3, [r4, #13]
   16cbc:	f043 0310 	orr.w	r3, r3, #16
   16cc0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   16cc2:	4b15      	ldr	r3, [pc, #84]	; (16d18 <z_impl_k_thread_suspend+0x7c>)
   16cc4:	6898      	ldr	r0, [r3, #8]
   16cc6:	42a0      	cmp	r0, r4
   16cc8:	bf14      	ite	ne
   16cca:	2000      	movne	r0, #0
   16ccc:	2001      	moveq	r0, #1
   16cce:	f7ff fe1f 	bl	16910 <update_cache>
	__asm__ volatile(
   16cd2:	f385 8811 	msr	BASEPRI, r5
   16cd6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16cda:	2301      	movs	r3, #1
   16cdc:	b963      	cbnz	r3, 16cf8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   16cde:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   16ce0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   16ce4:	2b00      	cmp	r3, #0
   16ce6:	dae8      	bge.n	16cba <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16cec:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16cee:	4621      	mov	r1, r4
   16cf0:	480a      	ldr	r0, [pc, #40]	; (16d1c <z_impl_k_thread_suspend+0x80>)
   16cf2:	f008 fe69 	bl	1f9c8 <z_priq_dumb_remove>
}
   16cf6:	e7e0      	b.n	16cba <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   16cf8:	4b07      	ldr	r3, [pc, #28]	; (16d18 <z_impl_k_thread_suspend+0x7c>)
   16cfa:	689b      	ldr	r3, [r3, #8]
   16cfc:	42a3      	cmp	r3, r4
   16cfe:	d000      	beq.n	16d02 <z_impl_k_thread_suspend+0x66>
}
   16d00:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   16d02:	f04f 0320 	mov.w	r3, #32
   16d06:	f3ef 8011 	mrs	r0, BASEPRI
   16d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   16d0e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   16d12:	f008 fe44 	bl	1f99e <z_reschedule_irqlock>
   16d16:	e7f3      	b.n	16d00 <z_impl_k_thread_suspend+0x64>
   16d18:	2000294c 	.word	0x2000294c
   16d1c:	2000296c 	.word	0x2000296c

00016d20 <k_sched_unlock>:

void k_sched_unlock(void)
{
   16d20:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   16d22:	2300      	movs	r3, #0
   16d24:	f04f 0220 	mov.w	r2, #32
   16d28:	f3ef 8411 	mrs	r4, BASEPRI
   16d2c:	f382 8812 	msr	BASEPRI_MAX, r2
   16d30:	f3bf 8f6f 	isb	sy
   16d34:	e00c      	b.n	16d50 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   16d36:	4b0d      	ldr	r3, [pc, #52]	; (16d6c <k_sched_unlock+0x4c>)
   16d38:	689a      	ldr	r2, [r3, #8]
   16d3a:	7bd3      	ldrb	r3, [r2, #15]
   16d3c:	3301      	adds	r3, #1
   16d3e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16d40:	2000      	movs	r0, #0
   16d42:	f7ff fde5 	bl	16910 <update_cache>
	__asm__ volatile(
   16d46:	f384 8811 	msr	BASEPRI, r4
   16d4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   16d4e:	2301      	movs	r3, #1
   16d50:	2b00      	cmp	r3, #0
   16d52:	d0f0      	beq.n	16d36 <k_sched_unlock+0x16>
	__asm__ volatile(
   16d54:	f04f 0320 	mov.w	r3, #32
   16d58:	f3ef 8011 	mrs	r0, BASEPRI
   16d5c:	f383 8812 	msr	BASEPRI_MAX, r3
   16d60:	f3bf 8f6f 	isb	sy
   16d64:	f008 fe1b 	bl	1f99e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   16d68:	bd10      	pop	{r4, pc}
   16d6a:	bf00      	nop
   16d6c:	2000294c 	.word	0x2000294c

00016d70 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   16d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   16d72:	7b43      	ldrb	r3, [r0, #13]
   16d74:	f013 0f08 	tst.w	r3, #8
   16d78:	d145      	bne.n	16e06 <end_thread+0x96>
   16d7a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   16d7c:	f043 0308 	orr.w	r3, r3, #8
   16d80:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16d82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   16d86:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   16d88:	f013 0f80 	tst.w	r3, #128	; 0x80
   16d8c:	d12d      	bne.n	16dea <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   16d8e:	68ab      	ldr	r3, [r5, #8]
   16d90:	b15b      	cbz	r3, 16daa <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16d92:	4628      	mov	r0, r5
   16d94:	f008 fdd7 	bl	1f946 <pended_on_thread>
   16d98:	4629      	mov	r1, r5
   16d9a:	f008 fe15 	bl	1f9c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16d9e:	7b6b      	ldrb	r3, [r5, #13]
   16da0:	f023 0302 	bic.w	r3, r3, #2
   16da4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   16da6:	2300      	movs	r3, #0
   16da8:	60ab      	str	r3, [r5, #8]
   16daa:	f105 0018 	add.w	r0, r5, #24
   16dae:	f008 ff92 	bl	1fcd6 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   16db2:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
   16db6:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16db8:	42bc      	cmp	r4, r7
   16dba:	d01e      	beq.n	16dfa <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16dbc:	b1ec      	cbz	r4, 16dfa <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16dbe:	4620      	mov	r0, r4
   16dc0:	f008 fdc1 	bl	1f946 <pended_on_thread>
   16dc4:	4621      	mov	r1, r4
   16dc6:	f008 fdff 	bl	1f9c8 <z_priq_dumb_remove>
   16dca:	7b63      	ldrb	r3, [r4, #13]
   16dcc:	f023 0302 	bic.w	r3, r3, #2
   16dd0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   16dd2:	2600      	movs	r6, #0
   16dd4:	60a6      	str	r6, [r4, #8]
   16dd6:	f104 0018 	add.w	r0, r4, #24
   16dda:	f008 ff7c 	bl	1fcd6 <z_abort_timeout>
   16dde:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   16de2:	4620      	mov	r0, r4
   16de4:	f7ff fe6c 	bl	16ac0 <ready_thread>
   16de8:	e7e5      	b.n	16db6 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16dee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16df0:	4601      	mov	r1, r0
   16df2:	4805      	ldr	r0, [pc, #20]	; (16e08 <end_thread+0x98>)
   16df4:	f008 fde8 	bl	1f9c8 <z_priq_dumb_remove>
}
   16df8:	e7c9      	b.n	16d8e <end_thread+0x1e>
		update_cache(1);
   16dfa:	2001      	movs	r0, #1
   16dfc:	f7ff fd88 	bl	16910 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   16e00:	4628      	mov	r0, r5
   16e02:	f7ff f8c5 	bl	15f90 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   16e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e08:	2000296c 	.word	0x2000296c

00016e0c <z_sched_init>:
{
   16e0c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   16e0e:	4804      	ldr	r0, [pc, #16]	; (16e20 <z_sched_init+0x14>)
   16e10:	f008 ff0f 	bl	1fc32 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   16e14:	2100      	movs	r1, #0
   16e16:	4608      	mov	r0, r1
   16e18:	f7ff fd0a 	bl	16830 <k_sched_time_slice_set>
}
   16e1c:	bd08      	pop	{r3, pc}
   16e1e:	bf00      	nop
   16e20:	20002968 	.word	0x20002968

00016e24 <z_impl_k_yield>:
{
   16e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e26:	f04f 0320 	mov.w	r3, #32
   16e2a:	f3ef 8611 	mrs	r6, BASEPRI
   16e2e:	f383 8812 	msr	BASEPRI_MAX, r3
   16e32:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   16e36:	4c1c      	ldr	r4, [pc, #112]	; (16ea8 <z_impl_k_yield+0x84>)
   16e38:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16e3a:	7b4b      	ldrb	r3, [r1, #13]
   16e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16e40:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   16e42:	f104 0720 	add.w	r7, r4, #32
   16e46:	4638      	mov	r0, r7
   16e48:	f008 fdbe 	bl	1f9c8 <z_priq_dumb_remove>
	queue_thread(_current);
   16e4c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   16e4e:	7b6b      	ldrb	r3, [r5, #13]
   16e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16e54:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   16e56:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16e58:	42bc      	cmp	r4, r7
   16e5a:	d023      	beq.n	16ea4 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e5c:	b16c      	cbz	r4, 16e7a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16e5e:	4621      	mov	r1, r4
   16e60:	4628      	mov	r0, r5
   16e62:	f008 fd72 	bl	1f94a <z_sched_prio_cmp>
   16e66:	2800      	cmp	r0, #0
   16e68:	dc16      	bgt.n	16e98 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16e6a:	b134      	cbz	r4, 16e7a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   16e6c:	4b0e      	ldr	r3, [pc, #56]	; (16ea8 <z_impl_k_yield+0x84>)
   16e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16e70:	429c      	cmp	r4, r3
   16e72:	d002      	beq.n	16e7a <z_impl_k_yield+0x56>
   16e74:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16e76:	2c00      	cmp	r4, #0
   16e78:	d1f0      	bne.n	16e5c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   16e7a:	4b0b      	ldr	r3, [pc, #44]	; (16ea8 <z_impl_k_yield+0x84>)
   16e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   16e7e:	f103 0120 	add.w	r1, r3, #32
   16e82:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   16e84:	606a      	str	r2, [r5, #4]
	tail->next = node;
   16e86:	6015      	str	r5, [r2, #0]
	list->tail = node;
   16e88:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   16e8a:	2001      	movs	r0, #1
   16e8c:	f7ff fd40 	bl	16910 <update_cache>
   16e90:	4630      	mov	r0, r6
   16e92:	f7ee fc03 	bl	569c <arch_swap>
}
   16e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   16e98:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   16e9a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   16e9c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   16e9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   16ea0:	6065      	str	r5, [r4, #4]
}
   16ea2:	e7f2      	b.n	16e8a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16ea4:	2400      	movs	r4, #0
   16ea6:	e7d9      	b.n	16e5c <z_impl_k_yield+0x38>
   16ea8:	2000294c 	.word	0x2000294c

00016eac <z_tick_sleep>:
{
   16eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   16eb0:	ea50 0301 	orrs.w	r3, r0, r1
   16eb4:	d038      	beq.n	16f28 <z_tick_sleep+0x7c>
   16eb6:	4604      	mov	r4, r0
   16eb8:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   16eba:	f06f 0301 	mvn.w	r3, #1
   16ebe:	1a1b      	subs	r3, r3, r0
   16ec0:	f04f 32ff 	mov.w	r2, #4294967295
   16ec4:	eb62 0201 	sbc.w	r2, r2, r1
   16ec8:	2b01      	cmp	r3, #1
   16eca:	f172 0300 	sbcs.w	r3, r2, #0
   16ece:	db2f      	blt.n	16f30 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   16ed0:	f06f 0501 	mvn.w	r5, #1
   16ed4:	1a2d      	subs	r5, r5, r0
   16ed6:	f04f 0320 	mov.w	r3, #32
   16eda:	f3ef 8811 	mrs	r8, BASEPRI
   16ede:	f383 8812 	msr	BASEPRI_MAX, r3
   16ee2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   16ee6:	4f14      	ldr	r7, [pc, #80]	; (16f38 <z_tick_sleep+0x8c>)
   16ee8:	68b8      	ldr	r0, [r7, #8]
   16eea:	4b14      	ldr	r3, [pc, #80]	; (16f3c <z_tick_sleep+0x90>)
   16eec:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   16eee:	f7ff fe45 	bl	16b7c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16ef2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16ef4:	4622      	mov	r2, r4
   16ef6:	4633      	mov	r3, r6
   16ef8:	4911      	ldr	r1, [pc, #68]	; (16f40 <z_tick_sleep+0x94>)
   16efa:	3018      	adds	r0, #24
   16efc:	f000 f902 	bl	17104 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   16f00:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16f02:	7b53      	ldrb	r3, [r2, #13]
   16f04:	f043 0310 	orr.w	r3, r3, #16
   16f08:	7353      	strb	r3, [r2, #13]
   16f0a:	4640      	mov	r0, r8
   16f0c:	f7ee fbc6 	bl	569c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   16f10:	f008 ff41 	bl	1fd96 <sys_clock_tick_get_32>
   16f14:	1a28      	subs	r0, r5, r0
   16f16:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   16f1a:	2801      	cmp	r0, #1
   16f1c:	f173 0300 	sbcs.w	r3, r3, #0
   16f20:	da00      	bge.n	16f24 <z_tick_sleep+0x78>
	return 0;
   16f22:	2000      	movs	r0, #0
}
   16f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   16f28:	f7ff ff7c 	bl	16e24 <z_impl_k_yield>
		return 0;
   16f2c:	2000      	movs	r0, #0
   16f2e:	e7f9      	b.n	16f24 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   16f30:	f008 ff31 	bl	1fd96 <sys_clock_tick_get_32>
   16f34:	1905      	adds	r5, r0, r4
   16f36:	e7ce      	b.n	16ed6 <z_tick_sleep+0x2a>
   16f38:	2000294c 	.word	0x2000294c
   16f3c:	20002980 	.word	0x20002980
   16f40:	0001fa67 	.word	0x0001fa67

00016f44 <z_impl_k_sleep>:
{
   16f44:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16f46:	f1b1 3fff 	cmp.w	r1, #4294967295
   16f4a:	bf08      	it	eq
   16f4c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   16f50:	d01a      	beq.n	16f88 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   16f52:	f7ff ffab 	bl	16eac <z_tick_sleep>
   16f56:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   16f58:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   16f5a:	0151      	lsls	r1, r2, #5
   16f5c:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   16f60:	0143      	lsls	r3, r0, #5
   16f62:	1a1b      	subs	r3, r3, r0
   16f64:	eb61 0102 	sbc.w	r1, r1, r2
   16f68:	0088      	lsls	r0, r1, #2
   16f6a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   16f6e:	009b      	lsls	r3, r3, #2
   16f70:	eb13 030c 	adds.w	r3, r3, ip
   16f74:	eb42 0000 	adc.w	r0, r2, r0
   16f78:	00c0      	lsls	r0, r0, #3
   16f7a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
   16f7e:	f3c3 3310 	ubfx	r3, r3, #12, #17
   16f82:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
   16f86:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   16f88:	4b03      	ldr	r3, [pc, #12]	; (16f98 <z_impl_k_sleep+0x54>)
   16f8a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   16f8c:	f7ff fe86 	bl	16c9c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   16f90:	f04f 30ff 	mov.w	r0, #4294967295
   16f94:	e7f7      	b.n	16f86 <z_impl_k_sleep+0x42>
   16f96:	bf00      	nop
   16f98:	2000294c 	.word	0x2000294c

00016f9c <z_impl_z_current_get>:
}
   16f9c:	4b01      	ldr	r3, [pc, #4]	; (16fa4 <z_impl_z_current_get+0x8>)
   16f9e:	6898      	ldr	r0, [r3, #8]
   16fa0:	4770      	bx	lr
   16fa2:	bf00      	nop
   16fa4:	2000294c 	.word	0x2000294c

00016fa8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   16fa8:	b538      	push	{r3, r4, r5, lr}
   16faa:	f04f 0320 	mov.w	r3, #32
   16fae:	f3ef 8511 	mrs	r5, BASEPRI
   16fb2:	f383 8812 	msr	BASEPRI_MAX, r3
   16fb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   16fba:	7b03      	ldrb	r3, [r0, #12]
   16fbc:	f013 0f01 	tst.w	r3, #1
   16fc0:	d109      	bne.n	16fd6 <z_thread_abort+0x2e>
   16fc2:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   16fc4:	7b43      	ldrb	r3, [r0, #13]
   16fc6:	f013 0f08 	tst.w	r3, #8
   16fca:	d00f      	beq.n	16fec <z_thread_abort+0x44>
	__asm__ volatile(
   16fcc:	f385 8811 	msr	BASEPRI, r5
   16fd0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
   16fd4:	e009      	b.n	16fea <z_thread_abort+0x42>
   16fd6:	f385 8811 	msr	BASEPRI, r5
   16fda:	f3bf 8f6f 	isb	sy
		k_panic();
   16fde:	4040      	eors	r0, r0
   16fe0:	f380 8811 	msr	BASEPRI, r0
   16fe4:	f04f 0004 	mov.w	r0, #4
   16fe8:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   16fea:	bd38      	pop	{r3, r4, r5, pc}
	end_thread(thread);
   16fec:	f7ff fec0 	bl	16d70 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   16ff0:	4b08      	ldr	r3, [pc, #32]	; (17014 <z_thread_abort+0x6c>)
   16ff2:	689b      	ldr	r3, [r3, #8]
   16ff4:	42a3      	cmp	r3, r4
   16ff6:	d004      	beq.n	17002 <z_thread_abort+0x5a>
   16ff8:	f385 8811 	msr	BASEPRI, r5
   16ffc:	f3bf 8f6f 	isb	sy
   17000:	e7f3      	b.n	16fea <z_thread_abort+0x42>
   17002:	f3ef 8305 	mrs	r3, IPSR
   17006:	2b00      	cmp	r3, #0
   17008:	d1f6      	bne.n	16ff8 <z_thread_abort+0x50>
   1700a:	4628      	mov	r0, r5
   1700c:	f7ee fb46 	bl	569c <arch_swap>
	return ret;
   17010:	e7f2      	b.n	16ff8 <z_thread_abort+0x50>
   17012:	bf00      	nop
   17014:	2000294c 	.word	0x2000294c

00017018 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   17018:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   1701c:	b083      	sub	sp, #12
   1701e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   17020:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   17024:	e9cd bc00 	strd	fp, ip, [sp]
   17028:	f7ff fdc4 	bl	16bb4 <z_pend_curr>

	if (data != NULL) {
   1702c:	b11c      	cbz	r4, 17036 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   1702e:	4b03      	ldr	r3, [pc, #12]	; (1703c <z_sched_wait+0x24>)
   17030:	689b      	ldr	r3, [r3, #8]
   17032:	695b      	ldr	r3, [r3, #20]
   17034:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   17036:	b003      	add	sp, #12
   17038:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   1703c:	2000294c 	.word	0x2000294c

00017040 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   17040:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   17042:	4806      	ldr	r0, [pc, #24]	; (1705c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   17044:	4a06      	ldr	r2, [pc, #24]	; (17060 <z_data_copy+0x20>)
   17046:	1a12      	subs	r2, r2, r0
   17048:	4906      	ldr	r1, [pc, #24]	; (17064 <z_data_copy+0x24>)
   1704a:	f008 f91d 	bl	1f288 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1704e:	4a06      	ldr	r2, [pc, #24]	; (17068 <z_data_copy+0x28>)
   17050:	4906      	ldr	r1, [pc, #24]	; (1706c <z_data_copy+0x2c>)
   17052:	4807      	ldr	r0, [pc, #28]	; (17070 <z_data_copy+0x30>)
   17054:	f008 f918 	bl	1f288 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17058:	bd08      	pop	{r3, pc}
   1705a:	bf00      	nop
   1705c:	20000000 	.word	0x20000000
   17060:	2000088c 	.word	0x2000088c
   17064:	00023af4 	.word	0x00023af4
   17068:	00000000 	.word	0x00000000
   1706c:	00023af4 	.word	0x00023af4
   17070:	20000000 	.word	0x20000000

00017074 <first>:
	return list->head == list;
   17074:	4b03      	ldr	r3, [pc, #12]	; (17084 <first+0x10>)
   17076:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17078:	4298      	cmp	r0, r3
   1707a:	d000      	beq.n	1707e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1707c:	4770      	bx	lr
   1707e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   17080:	e7fc      	b.n	1707c <first+0x8>
   17082:	bf00      	nop
   17084:	20000588 	.word	0x20000588

00017088 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17088:	b130      	cbz	r0, 17098 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1708a:	4a04      	ldr	r2, [pc, #16]	; (1709c <next+0x14>)
   1708c:	6852      	ldr	r2, [r2, #4]
   1708e:	4290      	cmp	r0, r2
   17090:	d001      	beq.n	17096 <next+0xe>
   17092:	6800      	ldr	r0, [r0, #0]
   17094:	4770      	bx	lr
   17096:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   17098:	4770      	bx	lr
   1709a:	bf00      	nop
   1709c:	20000588 	.word	0x20000588

000170a0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   170a0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   170a2:	4b04      	ldr	r3, [pc, #16]	; (170b4 <elapsed+0x14>)
   170a4:	681b      	ldr	r3, [r3, #0]
   170a6:	b10b      	cbz	r3, 170ac <elapsed+0xc>
   170a8:	2000      	movs	r0, #0
}
   170aa:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   170ac:	f7fb fdf0 	bl	12c90 <sys_clock_elapsed>
   170b0:	e7fb      	b.n	170aa <elapsed+0xa>
   170b2:	bf00      	nop
   170b4:	2000298c 	.word	0x2000298c

000170b8 <next_timeout>:

static int32_t next_timeout(void)
{
   170b8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   170ba:	f7ff ffdb 	bl	17074 <first>
   170be:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   170c0:	f7ff ffee 	bl	170a0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   170c4:	b17c      	cbz	r4, 170e6 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   170c6:	6923      	ldr	r3, [r4, #16]
   170c8:	6962      	ldr	r2, [r4, #20]
   170ca:	1a1b      	subs	r3, r3, r0
   170cc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   170d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   170d4:	f170 0200 	sbcs.w	r2, r0, #0
   170d8:	da08      	bge.n	170ec <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   170da:	2800      	cmp	r0, #0
   170dc:	db01      	blt.n	170e2 <next_timeout+0x2a>
   170de:	4618      	mov	r0, r3
   170e0:	e006      	b.n	170f0 <next_timeout+0x38>
   170e2:	2300      	movs	r3, #0
   170e4:	e7fb      	b.n	170de <next_timeout+0x26>
		ret = MAX_WAIT;
   170e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   170ea:	e001      	b.n	170f0 <next_timeout+0x38>
   170ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   170f0:	4b03      	ldr	r3, [pc, #12]	; (17100 <next_timeout+0x48>)
   170f2:	691b      	ldr	r3, [r3, #16]
   170f4:	b113      	cbz	r3, 170fc <next_timeout+0x44>
   170f6:	4283      	cmp	r3, r0
   170f8:	da00      	bge.n	170fc <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   170fa:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   170fc:	bd10      	pop	{r4, pc}
   170fe:	bf00      	nop
   17100:	2000294c 	.word	0x2000294c

00017104 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17104:	f1b3 3fff 	cmp.w	r3, #4294967295
   17108:	bf08      	it	eq
   1710a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1710e:	d07d      	beq.n	1720c <z_add_timeout+0x108>
{
   17110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17114:	4604      	mov	r4, r0
   17116:	4692      	mov	sl, r2
   17118:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1711a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1711c:	2300      	movs	r3, #0
	__asm__ volatile(
   1711e:	f04f 0220 	mov.w	r2, #32
   17122:	f3ef 8711 	mrs	r7, BASEPRI
   17126:	f382 8812 	msr	BASEPRI_MAX, r2
   1712a:	f3bf 8f6f 	isb	sy
   1712e:	e021      	b.n	17174 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   17130:	f11a 0801 	adds.w	r8, sl, #1
   17134:	f145 0900 	adc.w	r9, r5, #0
   17138:	f7ff ffb2 	bl	170a0 <elapsed>
   1713c:	eb18 0300 	adds.w	r3, r8, r0
   17140:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   17144:	6123      	str	r3, [r4, #16]
   17146:	6160      	str	r0, [r4, #20]
   17148:	e036      	b.n	171b8 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1714a:	1a51      	subs	r1, r2, r1
   1714c:	eb66 0303 	sbc.w	r3, r6, r3
   17150:	6101      	str	r1, [r0, #16]
   17152:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   17154:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   17156:	6063      	str	r3, [r4, #4]
	node->next = successor;
   17158:	6020      	str	r0, [r4, #0]
	prev->next = node;
   1715a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1715c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1715e:	2800      	cmp	r0, #0
   17160:	d03e      	beq.n	171e0 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   17162:	f7ff ff87 	bl	17074 <first>
   17166:	4284      	cmp	r4, r0
   17168:	d041      	beq.n	171ee <z_add_timeout+0xea>
	__asm__ volatile(
   1716a:	f387 8811 	msr	BASEPRI, r7
   1716e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   17172:	2301      	movs	r3, #1
   17174:	2b00      	cmp	r3, #0
   17176:	d147      	bne.n	17208 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   17178:	4653      	mov	r3, sl
   1717a:	f06f 0101 	mvn.w	r1, #1
   1717e:	ebb1 010a 	subs.w	r1, r1, sl
   17182:	f04f 30ff 	mov.w	r0, #4294967295
   17186:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1718a:	2a00      	cmp	r2, #0
   1718c:	dbd0      	blt.n	17130 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1718e:	4a20      	ldr	r2, [pc, #128]	; (17210 <z_add_timeout+0x10c>)
   17190:	6811      	ldr	r1, [r2, #0]
   17192:	6852      	ldr	r2, [r2, #4]
   17194:	185b      	adds	r3, r3, r1
   17196:	eb42 0205 	adc.w	r2, r2, r5
   1719a:	f06f 0101 	mvn.w	r1, #1
   1719e:	1acb      	subs	r3, r1, r3
   171a0:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
   171a4:	4618      	mov	r0, r3
   171a6:	4611      	mov	r1, r2
   171a8:	2b01      	cmp	r3, #1
   171aa:	f172 0300 	sbcs.w	r3, r2, #0
   171ae:	da01      	bge.n	171b4 <z_add_timeout+0xb0>
   171b0:	2001      	movs	r0, #1
   171b2:	2100      	movs	r1, #0
   171b4:	6120      	str	r0, [r4, #16]
   171b6:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   171b8:	f7ff ff5c 	bl	17074 <first>
   171bc:	2800      	cmp	r0, #0
   171be:	d0ce      	beq.n	1715e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
   171c0:	6902      	ldr	r2, [r0, #16]
   171c2:	6946      	ldr	r6, [r0, #20]
   171c4:	6921      	ldr	r1, [r4, #16]
   171c6:	6963      	ldr	r3, [r4, #20]
   171c8:	4291      	cmp	r1, r2
   171ca:	eb73 0c06 	sbcs.w	ip, r3, r6
   171ce:	dbbc      	blt.n	1714a <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   171d0:	1a89      	subs	r1, r1, r2
   171d2:	eb63 0306 	sbc.w	r3, r3, r6
   171d6:	6121      	str	r1, [r4, #16]
   171d8:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   171da:	f7ff ff55 	bl	17088 <next>
   171de:	e7ed      	b.n	171bc <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
   171e0:	4b0c      	ldr	r3, [pc, #48]	; (17214 <z_add_timeout+0x110>)
   171e2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   171e4:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   171e6:	6062      	str	r2, [r4, #4]
	tail->next = node;
   171e8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   171ea:	605c      	str	r4, [r3, #4]
}
   171ec:	e7b9      	b.n	17162 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   171ee:	f7ff ff63 	bl	170b8 <next_timeout>

			if (next_time == 0 ||
   171f2:	4603      	mov	r3, r0
   171f4:	b118      	cbz	r0, 171fe <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
   171f6:	4a08      	ldr	r2, [pc, #32]	; (17218 <z_add_timeout+0x114>)
   171f8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   171fa:	4282      	cmp	r2, r0
   171fc:	d0b5      	beq.n	1716a <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
   171fe:	2100      	movs	r1, #0
   17200:	4618      	mov	r0, r3
   17202:	f7fb fd13 	bl	12c2c <sys_clock_set_timeout>
   17206:	e7b0      	b.n	1716a <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   17208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1720c:	4770      	bx	lr
   1720e:	bf00      	nop
   17210:	200018a8 	.word	0x200018a8
   17214:	20000588 	.word	0x20000588
   17218:	2000294c 	.word	0x2000294c

0001721c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1721c:	b570      	push	{r4, r5, r6, lr}
   1721e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   17220:	f7ff fbf6 	bl	16a10 <z_time_slice>
	__asm__ volatile(
   17224:	f04f 0320 	mov.w	r3, #32
   17228:	f3ef 8611 	mrs	r6, BASEPRI
   1722c:	f383 8812 	msr	BASEPRI_MAX, r3
   17230:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   17234:	4b28      	ldr	r3, [pc, #160]	; (172d8 <sys_clock_announce+0xbc>)
   17236:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   17238:	e021      	b.n	1727e <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1723a:	4a28      	ldr	r2, [pc, #160]	; (172dc <sys_clock_announce+0xc0>)
   1723c:	6813      	ldr	r3, [r2, #0]
   1723e:	6851      	ldr	r1, [r2, #4]
   17240:	195b      	adds	r3, r3, r5
   17242:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
   17246:	6013      	str	r3, [r2, #0]
   17248:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   1724a:	2200      	movs	r2, #0
   1724c:	2300      	movs	r3, #0
   1724e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   17252:	4620      	mov	r0, r4
   17254:	f008 fd28 	bl	1fca8 <remove_timeout>
	__asm__ volatile(
   17258:	f386 8811 	msr	BASEPRI, r6
   1725c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   17260:	68a3      	ldr	r3, [r4, #8]
   17262:	4620      	mov	r0, r4
   17264:	4798      	blx	r3
	__asm__ volatile(
   17266:	f04f 0320 	mov.w	r3, #32
   1726a:	f3ef 8611 	mrs	r6, BASEPRI
   1726e:	f383 8812 	msr	BASEPRI_MAX, r3
   17272:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   17276:	4a18      	ldr	r2, [pc, #96]	; (172d8 <sys_clock_announce+0xbc>)
   17278:	6813      	ldr	r3, [r2, #0]
   1727a:	1b5b      	subs	r3, r3, r5
   1727c:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1727e:	f7ff fef9 	bl	17074 <first>
   17282:	4604      	mov	r4, r0
   17284:	b140      	cbz	r0, 17298 <sys_clock_announce+0x7c>
   17286:	6905      	ldr	r5, [r0, #16]
   17288:	6942      	ldr	r2, [r0, #20]
   1728a:	4b13      	ldr	r3, [pc, #76]	; (172d8 <sys_clock_announce+0xbc>)
   1728c:	681b      	ldr	r3, [r3, #0]
   1728e:	17d9      	asrs	r1, r3, #31
   17290:	42ab      	cmp	r3, r5
   17292:	eb71 0302 	sbcs.w	r3, r1, r2
   17296:	dad0      	bge.n	1723a <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
   17298:	b144      	cbz	r4, 172ac <sys_clock_announce+0x90>
		first()->dticks -= announce_remaining;
   1729a:	4b0f      	ldr	r3, [pc, #60]	; (172d8 <sys_clock_announce+0xbc>)
   1729c:	6819      	ldr	r1, [r3, #0]
   1729e:	6923      	ldr	r3, [r4, #16]
   172a0:	6962      	ldr	r2, [r4, #20]
   172a2:	1a5b      	subs	r3, r3, r1
   172a4:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   172a8:	6123      	str	r3, [r4, #16]
   172aa:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   172ac:	4a0b      	ldr	r2, [pc, #44]	; (172dc <sys_clock_announce+0xc0>)
   172ae:	4d0a      	ldr	r5, [pc, #40]	; (172d8 <sys_clock_announce+0xbc>)
   172b0:	6828      	ldr	r0, [r5, #0]
   172b2:	6813      	ldr	r3, [r2, #0]
   172b4:	6851      	ldr	r1, [r2, #4]
   172b6:	181b      	adds	r3, r3, r0
   172b8:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   172bc:	6013      	str	r3, [r2, #0]
   172be:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   172c0:	2400      	movs	r4, #0
   172c2:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   172c4:	f7ff fef8 	bl	170b8 <next_timeout>
   172c8:	4621      	mov	r1, r4
   172ca:	f7fb fcaf 	bl	12c2c <sys_clock_set_timeout>
	__asm__ volatile(
   172ce:	f386 8811 	msr	BASEPRI, r6
   172d2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   172d6:	bd70      	pop	{r4, r5, r6, pc}
   172d8:	2000298c 	.word	0x2000298c
   172dc:	200018a8 	.word	0x200018a8

000172e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   172e0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   172e2:	2200      	movs	r2, #0
	__asm__ volatile(
   172e4:	f04f 0320 	mov.w	r3, #32
   172e8:	f3ef 8411 	mrs	r4, BASEPRI
   172ec:	f383 8812 	msr	BASEPRI_MAX, r3
   172f0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   172f4:	4613      	mov	r3, r2
   172f6:	4611      	mov	r1, r2
   172f8:	e00c      	b.n	17314 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
   172fa:	f7ff fed1 	bl	170a0 <elapsed>
   172fe:	4a07      	ldr	r2, [pc, #28]	; (1731c <sys_clock_tick_get+0x3c>)
   17300:	6813      	ldr	r3, [r2, #0]
   17302:	6851      	ldr	r1, [r2, #4]
   17304:	18c3      	adds	r3, r0, r3
   17306:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
   1730a:	f384 8811 	msr	BASEPRI, r4
   1730e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   17312:	2201      	movs	r2, #1
   17314:	2a00      	cmp	r2, #0
   17316:	d0f0      	beq.n	172fa <sys_clock_tick_get+0x1a>
	}
	return t;
}
   17318:	4618      	mov	r0, r3
   1731a:	bd10      	pop	{r4, pc}
   1731c:	200018a8 	.word	0x200018a8

00017320 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   17320:	b570      	push	{r4, r5, r6, lr}
   17322:	4604      	mov	r4, r0
	__asm__ volatile(
   17324:	f04f 0320 	mov.w	r3, #32
   17328:	f3ef 8611 	mrs	r6, BASEPRI
   1732c:	f383 8812 	msr	BASEPRI_MAX, r3
   17330:	f3bf 8f6f 	isb	sy
   17334:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   17336:	6a82      	ldr	r2, [r0, #40]	; 0x28
   17338:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1733a:	ea52 0103 	orrs.w	r1, r2, r3
   1733e:	d005      	beq.n	1734c <z_timer_expiration_handler+0x2c>
   17340:	f1b3 3fff 	cmp.w	r3, #4294967295
   17344:	bf08      	it	eq
   17346:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1734a:	d128      	bne.n	1739e <z_timer_expiration_handler+0x7e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1734c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1734e:	3301      	adds	r3, #1
   17350:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   17352:	6a23      	ldr	r3, [r4, #32]
   17354:	b173      	cbz	r3, 17374 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   17356:	f386 8811 	msr	BASEPRI, r6
   1735a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1735e:	6a23      	ldr	r3, [r4, #32]
   17360:	4620      	mov	r0, r4
   17362:	4798      	blx	r3
	__asm__ volatile(
   17364:	f04f 0320 	mov.w	r3, #32
   17368:	f3ef 8511 	mrs	r5, BASEPRI
   1736c:	f383 8812 	msr	BASEPRI_MAX, r3
   17370:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   17374:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   17378:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1737a:	42a3      	cmp	r3, r4
   1737c:	d038      	beq.n	173f0 <z_timer_expiration_handler+0xd0>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1737e:	2c00      	cmp	r4, #0
   17380:	d036      	beq.n	173f0 <z_timer_expiration_handler+0xd0>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   17382:	4620      	mov	r0, r4
   17384:	f008 faeb 	bl	1f95e <z_unpend_thread_no_timeout>
   17388:	2300      	movs	r3, #0
   1738a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1738e:	f385 8811 	msr	BASEPRI, r5
   17392:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   17396:	4620      	mov	r0, r4
   17398:	f008 fb49 	bl	1fa2e <z_ready_thread>
}
   1739c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_uptime_ticks();
   1739e:	f008 fcfe 	bl	1fd9e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   173a2:	3001      	adds	r0, #1
   173a4:	f141 0100 	adc.w	r1, r1, #0
   173a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   173aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   173ac:	18c0      	adds	r0, r0, r3
   173ae:	eb41 0102 	adc.w	r1, r1, r2
   173b2:	2801      	cmp	r0, #1
   173b4:	f171 0300 	sbcs.w	r3, r1, #0
   173b8:	da08      	bge.n	173cc <z_timer_expiration_handler+0xac>
   173ba:	f06f 0201 	mvn.w	r2, #1
   173be:	f04f 33ff 	mov.w	r3, #4294967295
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   173c2:	490e      	ldr	r1, [pc, #56]	; (173fc <z_timer_expiration_handler+0xdc>)
   173c4:	4620      	mov	r0, r4
   173c6:	f7ff fe9d 	bl	17104 <z_add_timeout>
   173ca:	e7bf      	b.n	1734c <z_timer_expiration_handler+0x2c>
   173cc:	f008 fce7 	bl	1fd9e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   173d0:	3001      	adds	r0, #1
   173d2:	f141 0300 	adc.w	r3, r1, #0
   173d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   173d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   173da:	1880      	adds	r0, r0, r2
   173dc:	eb43 0301 	adc.w	r3, r3, r1
   173e0:	f06f 0201 	mvn.w	r2, #1
   173e4:	1a12      	subs	r2, r2, r0
   173e6:	f04f 31ff 	mov.w	r1, #4294967295
   173ea:	eb61 0303 	sbc.w	r3, r1, r3
   173ee:	e7e8      	b.n	173c2 <z_timer_expiration_handler+0xa2>
   173f0:	f385 8811 	msr	BASEPRI, r5
   173f4:	f3bf 8f6f 	isb	sy
		return;
   173f8:	e7d0      	b.n	1739c <z_timer_expiration_handler+0x7c>
   173fa:	bf00      	nop
   173fc:	00017321 	.word	0x00017321

00017400 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   17400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17404:	9f06      	ldr	r7, [sp, #24]
   17406:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1740a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1740e:	bf08      	it	eq
   17410:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   17414:	d02f      	beq.n	17476 <z_impl_k_timer_start+0x76>
   17416:	4605      	mov	r5, r0
   17418:	4614      	mov	r4, r2
   1741a:	461e      	mov	r6, r3
   1741c:	4611      	mov	r1, r2
   1741e:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   17420:	f1b8 3fff 	cmp.w	r8, #4294967295
   17424:	bf08      	it	eq
   17426:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1742a:	d00d      	beq.n	17448 <z_impl_k_timer_start+0x48>
   1742c:	ea57 0c08 	orrs.w	ip, r7, r8
   17430:	d00a      	beq.n	17448 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
   17432:	f06f 0c01 	mvn.w	ip, #1
   17436:	ebbc 0c07 	subs.w	ip, ip, r7
   1743a:	f04f 3cff 	mov.w	ip, #4294967295
   1743e:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   17442:	f1bc 0f00 	cmp.w	ip, #0
   17446:	db18      	blt.n	1747a <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   17448:	f06f 0301 	mvn.w	r3, #1
   1744c:	1a5b      	subs	r3, r3, r1
   1744e:	f04f 33ff 	mov.w	r3, #4294967295
   17452:	eb63 0300 	sbc.w	r3, r3, r0
   17456:	2b00      	cmp	r3, #0
   17458:	db1a      	blt.n	17490 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1745a:	4628      	mov	r0, r5
   1745c:	f008 fc3b 	bl	1fcd6 <z_abort_timeout>
	timer->period = period;
   17460:	62af      	str	r7, [r5, #40]	; 0x28
   17462:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   17466:	2300      	movs	r3, #0
   17468:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1746a:	4622      	mov	r2, r4
   1746c:	4633      	mov	r3, r6
   1746e:	490e      	ldr	r1, [pc, #56]	; (174a8 <z_impl_k_timer_start+0xa8>)
   17470:	4628      	mov	r0, r5
   17472:	f7ff fe47 	bl	17104 <z_add_timeout>
		     duration);
}
   17476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1747a:	2f02      	cmp	r7, #2
   1747c:	f178 0300 	sbcs.w	r3, r8, #0
   17480:	da02      	bge.n	17488 <z_impl_k_timer_start+0x88>
   17482:	2702      	movs	r7, #2
   17484:	f04f 0800 	mov.w	r8, #0
   17488:	3f01      	subs	r7, #1
   1748a:	f148 38ff 	adc.w	r8, r8, #4294967295
   1748e:	e7db      	b.n	17448 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
   17490:	460c      	mov	r4, r1
   17492:	4606      	mov	r6, r0
   17494:	2901      	cmp	r1, #1
   17496:	f170 0300 	sbcs.w	r3, r0, #0
   1749a:	da01      	bge.n	174a0 <z_impl_k_timer_start+0xa0>
   1749c:	2401      	movs	r4, #1
   1749e:	2600      	movs	r6, #0
   174a0:	3c01      	subs	r4, #1
   174a2:	f146 36ff 	adc.w	r6, r6, #4294967295
   174a6:	e7d8      	b.n	1745a <z_impl_k_timer_start+0x5a>
   174a8:	00017321 	.word	0x00017321

000174ac <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   174ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b0:	b087      	sub	sp, #28
   174b2:	4682      	mov	sl, r0
   174b4:	460f      	mov	r7, r1
   174b6:	4693      	mov	fp, r2
   174b8:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   174ba:	2500      	movs	r5, #0
	int events_registered = 0;
   174bc:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   174be:	e02f      	b.n	17520 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
   174c0:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   174c2:	689b      	ldr	r3, [r3, #8]
   174c4:	b1cb      	cbz	r3, 174fa <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   174c6:	f04f 0902 	mov.w	r9, #2
			return true;
   174ca:	2301      	movs	r3, #1
   174cc:	e015      	b.n	174fa <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   174ce:	6923      	ldr	r3, [r4, #16]
	return list->head;
   174d0:	681b      	ldr	r3, [r3, #0]
   174d2:	b193      	cbz	r3, 174fa <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   174d4:	f04f 0904 	mov.w	r9, #4
			return true;
   174d8:	2301      	movs	r3, #1
   174da:	e00e      	b.n	174fa <register_events+0x4e>
		if (event->signal->signaled != 0U) {
   174dc:	6923      	ldr	r3, [r4, #16]
   174de:	689b      	ldr	r3, [r3, #8]
   174e0:	b15b      	cbz	r3, 174fa <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
   174e2:	f04f 0901 	mov.w	r9, #1
			return true;
   174e6:	464b      	mov	r3, r9
   174e8:	e007      	b.n	174fa <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
   174ea:	6923      	ldr	r3, [r4, #16]
   174ec:	6a1b      	ldr	r3, [r3, #32]
   174ee:	b123      	cbz	r3, 174fa <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   174f0:	f04f 0910 	mov.w	r9, #16
			return true;
   174f4:	2301      	movs	r3, #1
   174f6:	e000      	b.n	174fa <register_events+0x4e>
	switch (event->type) {
   174f8:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
   174fa:	2b00      	cmp	r3, #0
   174fc:	d03a      	beq.n	17574 <register_events+0xc8>
	event->poller = NULL;
   174fe:	2100      	movs	r1, #0
   17500:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   17502:	68e3      	ldr	r3, [r4, #12]
   17504:	f3c3 3245 	ubfx	r2, r3, #13, #6
   17508:	ea49 0202 	orr.w	r2, r9, r2
   1750c:	f362 3352 	bfi	r3, r2, #13, #6
   17510:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
   17512:	f88b 1000 	strb.w	r1, [fp]
   17516:	f386 8811 	msr	BASEPRI, r6
   1751a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1751e:	3501      	adds	r5, #1
   17520:	42bd      	cmp	r5, r7
   17522:	f280 81b9 	bge.w	17898 <register_events+0x3ec>
	__asm__ volatile(
   17526:	f04f 0320 	mov.w	r3, #32
   1752a:	f3ef 8611 	mrs	r6, BASEPRI
   1752e:	f383 8812 	msr	BASEPRI_MAX, r3
   17532:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   17536:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1753a:	ea4f 0884 	mov.w	r8, r4, lsl #2
   1753e:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
   17542:	7b63      	ldrb	r3, [r4, #13]
   17544:	f003 031f 	and.w	r3, r3, #31
   17548:	3b01      	subs	r3, #1
   1754a:	2b07      	cmp	r3, #7
   1754c:	d8d4      	bhi.n	174f8 <register_events+0x4c>
   1754e:	a201      	add	r2, pc, #4	; (adr r2, 17554 <register_events+0xa8>)
   17550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17554:	000174dd 	.word	0x000174dd
   17558:	000174c1 	.word	0x000174c1
   1755c:	000174f9 	.word	0x000174f9
   17560:	000174cf 	.word	0x000174cf
   17564:	000174f9 	.word	0x000174f9
   17568:	000174f9 	.word	0x000174f9
   1756c:	000174f9 	.word	0x000174f9
   17570:	000174eb 	.word	0x000174eb
		} else if (!just_check && poller->is_polling) {
   17574:	9b00      	ldr	r3, [sp, #0]
   17576:	2b00      	cmp	r3, #0
   17578:	d1cd      	bne.n	17516 <register_events+0x6a>
   1757a:	f89b 3000 	ldrb.w	r3, [fp]
   1757e:	2b00      	cmp	r3, #0
   17580:	d0c9      	beq.n	17516 <register_events+0x6a>
	switch (event->type) {
   17582:	7b63      	ldrb	r3, [r4, #13]
   17584:	f003 031f 	and.w	r3, r3, #31
   17588:	3b01      	subs	r3, #1
   1758a:	2b07      	cmp	r3, #7
   1758c:	d848      	bhi.n	17620 <register_events+0x174>
   1758e:	e8df f013 	tbh	[pc, r3, lsl #1]
   17592:	00cb      	.short	0x00cb
   17594:	00470008 	.word	0x00470008
   17598:	0047006d 	.word	0x0047006d
   1759c:	00470047 	.word	0x00470047
   175a0:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
   175a2:	6923      	ldr	r3, [r4, #16]
   175a4:	9304      	str	r3, [sp, #16]
   175a6:	f103 0210 	add.w	r2, r3, #16
   175aa:	9202      	str	r2, [sp, #8]
	return list->head == list;
   175ac:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   175ae:	429a      	cmp	r2, r3
   175b0:	d02f      	beq.n	17612 <register_events+0x166>
   175b2:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   175b4:	2b00      	cmp	r3, #0
   175b6:	d02c      	beq.n	17612 <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   175b8:	6898      	ldr	r0, [r3, #8]
   175ba:	f008 fc4d 	bl	1fe58 <poller_thread>
   175be:	9005      	str	r0, [sp, #20]
   175c0:	4658      	mov	r0, fp
   175c2:	f008 fc49 	bl	1fe58 <poller_thread>
   175c6:	4601      	mov	r1, r0
   175c8:	9003      	str	r0, [sp, #12]
   175ca:	9805      	ldr	r0, [sp, #20]
   175cc:	f008 f9bd 	bl	1f94a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   175d0:	2800      	cmp	r0, #0
   175d2:	dc1e      	bgt.n	17612 <register_events+0x166>
	return list->head == list;
   175d4:	9b04      	ldr	r3, [sp, #16]
   175d6:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   175d8:	9a02      	ldr	r2, [sp, #8]
   175da:	429a      	cmp	r2, r3
   175dc:	d030      	beq.n	17640 <register_events+0x194>
   175de:	9404      	str	r4, [sp, #16]
   175e0:	9505      	str	r5, [sp, #20]
   175e2:	9d02      	ldr	r5, [sp, #8]
   175e4:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   175e6:	2c00      	cmp	r4, #0
   175e8:	d030      	beq.n	1764c <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
   175ea:	68a0      	ldr	r0, [r4, #8]
   175ec:	f008 fc34 	bl	1fe58 <poller_thread>
   175f0:	4601      	mov	r1, r0
   175f2:	9803      	ldr	r0, [sp, #12]
   175f4:	f008 f9a9 	bl	1f94a <z_sched_prio_cmp>
   175f8:	2800      	cmp	r0, #0
   175fa:	dc17      	bgt.n	1762c <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   175fc:	2c00      	cmp	r4, #0
   175fe:	d028      	beq.n	17652 <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
   17600:	686b      	ldr	r3, [r5, #4]
   17602:	429c      	cmp	r4, r3
   17604:	d02f      	beq.n	17666 <register_events+0x1ba>
   17606:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17608:	2c00      	cmp	r4, #0
   1760a:	d1ec      	bne.n	175e6 <register_events+0x13a>
   1760c:	9c04      	ldr	r4, [sp, #16]
   1760e:	9d05      	ldr	r5, [sp, #20]
   17610:	e021      	b.n	17656 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
   17612:	9a02      	ldr	r2, [sp, #8]
   17614:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17616:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1761a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1761c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1761e:	6054      	str	r4, [r2, #4]
	event->poller = poller;
   17620:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
   17624:	9b01      	ldr	r3, [sp, #4]
   17626:	3301      	adds	r3, #1
   17628:	9301      	str	r3, [sp, #4]
   1762a:	e774      	b.n	17516 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
   1762c:	9d05      	ldr	r5, [sp, #20]
   1762e:	4622      	mov	r2, r4
   17630:	9c04      	ldr	r4, [sp, #16]
   17632:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   17634:	6063      	str	r3, [r4, #4]
	node->next = successor;
   17636:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   1763a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1763c:	6054      	str	r4, [r2, #4]
			return;
   1763e:	e7ef      	b.n	17620 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17640:	2300      	movs	r3, #0
   17642:	9404      	str	r4, [sp, #16]
   17644:	9505      	str	r5, [sp, #20]
   17646:	9d02      	ldr	r5, [sp, #8]
   17648:	461c      	mov	r4, r3
   1764a:	e7cc      	b.n	175e6 <register_events+0x13a>
   1764c:	9c04      	ldr	r4, [sp, #16]
   1764e:	9d05      	ldr	r5, [sp, #20]
   17650:	e001      	b.n	17656 <register_events+0x1aa>
   17652:	9c04      	ldr	r4, [sp, #16]
   17654:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   17656:	9a02      	ldr	r2, [sp, #8]
   17658:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1765a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1765e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17660:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17662:	6054      	str	r4, [r2, #4]
}
   17664:	e7dc      	b.n	17620 <register_events+0x174>
   17666:	9c04      	ldr	r4, [sp, #16]
   17668:	9d05      	ldr	r5, [sp, #20]
   1766a:	e7f4      	b.n	17656 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
   1766c:	6923      	ldr	r3, [r4, #16]
   1766e:	9304      	str	r3, [sp, #16]
   17670:	f103 0210 	add.w	r2, r3, #16
   17674:	9202      	str	r2, [sp, #8]
	return list->head == list;
   17676:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   17678:	429a      	cmp	r2, r3
   1767a:	d02d      	beq.n	176d8 <register_events+0x22c>
   1767c:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1767e:	b35b      	cbz	r3, 176d8 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   17680:	6898      	ldr	r0, [r3, #8]
   17682:	f008 fbe9 	bl	1fe58 <poller_thread>
   17686:	9005      	str	r0, [sp, #20]
   17688:	4658      	mov	r0, fp
   1768a:	f008 fbe5 	bl	1fe58 <poller_thread>
   1768e:	4601      	mov	r1, r0
   17690:	9003      	str	r0, [sp, #12]
   17692:	9805      	ldr	r0, [sp, #20]
   17694:	f008 f959 	bl	1f94a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   17698:	2800      	cmp	r0, #0
   1769a:	dc1d      	bgt.n	176d8 <register_events+0x22c>
	return list->head == list;
   1769c:	9b04      	ldr	r3, [sp, #16]
   1769e:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   176a0:	9a02      	ldr	r2, [sp, #8]
   176a2:	429a      	cmp	r2, r3
   176a4:	d02a      	beq.n	176fc <register_events+0x250>
   176a6:	9404      	str	r4, [sp, #16]
   176a8:	9505      	str	r5, [sp, #20]
   176aa:	9d02      	ldr	r5, [sp, #8]
   176ac:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   176ae:	2c00      	cmp	r4, #0
   176b0:	d02a      	beq.n	17708 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
   176b2:	68a0      	ldr	r0, [r4, #8]
   176b4:	f008 fbd0 	bl	1fe58 <poller_thread>
   176b8:	4601      	mov	r1, r0
   176ba:	9803      	ldr	r0, [sp, #12]
   176bc:	f008 f945 	bl	1f94a <z_sched_prio_cmp>
   176c0:	2800      	cmp	r0, #0
   176c2:	dc11      	bgt.n	176e8 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   176c4:	b31c      	cbz	r4, 1770e <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
   176c6:	686b      	ldr	r3, [r5, #4]
   176c8:	429c      	cmp	r4, r3
   176ca:	d02a      	beq.n	17722 <register_events+0x276>
   176cc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   176ce:	2c00      	cmp	r4, #0
   176d0:	d1ed      	bne.n	176ae <register_events+0x202>
   176d2:	9c04      	ldr	r4, [sp, #16]
   176d4:	9d05      	ldr	r5, [sp, #20]
   176d6:	e01c      	b.n	17712 <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
   176d8:	9a02      	ldr	r2, [sp, #8]
   176da:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   176dc:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   176e0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   176e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   176e4:	6054      	str	r4, [r2, #4]
		return;
   176e6:	e79b      	b.n	17620 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   176e8:	9d05      	ldr	r5, [sp, #20]
   176ea:	4622      	mov	r2, r4
   176ec:	9c04      	ldr	r4, [sp, #16]
   176ee:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   176f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   176f2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   176f6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   176f8:	6054      	str	r4, [r2, #4]
			return;
   176fa:	e791      	b.n	17620 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   176fc:	2300      	movs	r3, #0
   176fe:	9404      	str	r4, [sp, #16]
   17700:	9505      	str	r5, [sp, #20]
   17702:	9d02      	ldr	r5, [sp, #8]
   17704:	461c      	mov	r4, r3
   17706:	e7d2      	b.n	176ae <register_events+0x202>
   17708:	9c04      	ldr	r4, [sp, #16]
   1770a:	9d05      	ldr	r5, [sp, #20]
   1770c:	e001      	b.n	17712 <register_events+0x266>
   1770e:	9c04      	ldr	r4, [sp, #16]
   17710:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   17712:	9a02      	ldr	r2, [sp, #8]
   17714:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17716:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1771a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1771c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1771e:	6054      	str	r4, [r2, #4]
}
   17720:	e77e      	b.n	17620 <register_events+0x174>
   17722:	9c04      	ldr	r4, [sp, #16]
   17724:	9d05      	ldr	r5, [sp, #20]
   17726:	e7f4      	b.n	17712 <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
   17728:	6922      	ldr	r2, [r4, #16]
   1772a:	9202      	str	r2, [sp, #8]
	return list->head == list;
   1772c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1772e:	429a      	cmp	r2, r3
   17730:	d02c      	beq.n	1778c <register_events+0x2e0>
   17732:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   17734:	b353      	cbz	r3, 1778c <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   17736:	6898      	ldr	r0, [r3, #8]
   17738:	f008 fb8e 	bl	1fe58 <poller_thread>
   1773c:	9004      	str	r0, [sp, #16]
   1773e:	4658      	mov	r0, fp
   17740:	f008 fb8a 	bl	1fe58 <poller_thread>
   17744:	4601      	mov	r1, r0
   17746:	9003      	str	r0, [sp, #12]
   17748:	9804      	ldr	r0, [sp, #16]
   1774a:	f008 f8fe 	bl	1f94a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1774e:	2800      	cmp	r0, #0
   17750:	dc1c      	bgt.n	1778c <register_events+0x2e0>
	return list->head == list;
   17752:	9b02      	ldr	r3, [sp, #8]
   17754:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17756:	4293      	cmp	r3, r2
   17758:	d02a      	beq.n	177b0 <register_events+0x304>
   1775a:	9404      	str	r4, [sp, #16]
   1775c:	9505      	str	r5, [sp, #20]
   1775e:	9d02      	ldr	r5, [sp, #8]
   17760:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17762:	2c00      	cmp	r4, #0
   17764:	d02a      	beq.n	177bc <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
   17766:	68a0      	ldr	r0, [r4, #8]
   17768:	f008 fb76 	bl	1fe58 <poller_thread>
   1776c:	4601      	mov	r1, r0
   1776e:	9803      	ldr	r0, [sp, #12]
   17770:	f008 f8eb 	bl	1f94a <z_sched_prio_cmp>
   17774:	2800      	cmp	r0, #0
   17776:	dc11      	bgt.n	1779c <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17778:	b31c      	cbz	r4, 177c2 <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
   1777a:	686b      	ldr	r3, [r5, #4]
   1777c:	429c      	cmp	r4, r3
   1777e:	d02a      	beq.n	177d6 <register_events+0x32a>
   17780:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   17782:	2c00      	cmp	r4, #0
   17784:	d1ed      	bne.n	17762 <register_events+0x2b6>
   17786:	9c04      	ldr	r4, [sp, #16]
   17788:	9d05      	ldr	r5, [sp, #20]
   1778a:	e01c      	b.n	177c6 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
   1778c:	9a02      	ldr	r2, [sp, #8]
   1778e:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17790:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   17794:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17796:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17798:	6054      	str	r4, [r2, #4]
		return;
   1779a:	e741      	b.n	17620 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   1779c:	9d05      	ldr	r5, [sp, #20]
   1779e:	4622      	mov	r2, r4
   177a0:	9c04      	ldr	r4, [sp, #16]
   177a2:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   177a4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   177a6:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   177aa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   177ac:	6054      	str	r4, [r2, #4]
			return;
   177ae:	e737      	b.n	17620 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   177b0:	2300      	movs	r3, #0
   177b2:	9404      	str	r4, [sp, #16]
   177b4:	9505      	str	r5, [sp, #20]
   177b6:	9d02      	ldr	r5, [sp, #8]
   177b8:	461c      	mov	r4, r3
   177ba:	e7d2      	b.n	17762 <register_events+0x2b6>
   177bc:	9c04      	ldr	r4, [sp, #16]
   177be:	9d05      	ldr	r5, [sp, #20]
   177c0:	e001      	b.n	177c6 <register_events+0x31a>
   177c2:	9c04      	ldr	r4, [sp, #16]
   177c4:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   177c6:	9a02      	ldr	r2, [sp, #8]
   177c8:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   177ca:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   177ce:	6063      	str	r3, [r4, #4]
	tail->next = node;
   177d0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   177d2:	6054      	str	r4, [r2, #4]
}
   177d4:	e724      	b.n	17620 <register_events+0x174>
   177d6:	9c04      	ldr	r4, [sp, #16]
   177d8:	9d05      	ldr	r5, [sp, #20]
   177da:	e7f4      	b.n	177c6 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
   177dc:	6923      	ldr	r3, [r4, #16]
   177de:	9304      	str	r3, [sp, #16]
   177e0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   177e4:	9202      	str	r2, [sp, #8]
	return list->head == list;
   177e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   177e8:	429a      	cmp	r2, r3
   177ea:	d02d      	beq.n	17848 <register_events+0x39c>
   177ec:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   177ee:	b35b      	cbz	r3, 17848 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   177f0:	6898      	ldr	r0, [r3, #8]
   177f2:	f008 fb31 	bl	1fe58 <poller_thread>
   177f6:	9005      	str	r0, [sp, #20]
   177f8:	4658      	mov	r0, fp
   177fa:	f008 fb2d 	bl	1fe58 <poller_thread>
   177fe:	4601      	mov	r1, r0
   17800:	9003      	str	r0, [sp, #12]
   17802:	9805      	ldr	r0, [sp, #20]
   17804:	f008 f8a1 	bl	1f94a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   17808:	2800      	cmp	r0, #0
   1780a:	dc1d      	bgt.n	17848 <register_events+0x39c>
	return list->head == list;
   1780c:	9b04      	ldr	r3, [sp, #16]
   1780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17810:	9a02      	ldr	r2, [sp, #8]
   17812:	429a      	cmp	r2, r3
   17814:	d02a      	beq.n	1786c <register_events+0x3c0>
   17816:	9404      	str	r4, [sp, #16]
   17818:	9505      	str	r5, [sp, #20]
   1781a:	9d02      	ldr	r5, [sp, #8]
   1781c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1781e:	2c00      	cmp	r4, #0
   17820:	d02a      	beq.n	17878 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
   17822:	68a0      	ldr	r0, [r4, #8]
   17824:	f008 fb18 	bl	1fe58 <poller_thread>
   17828:	4601      	mov	r1, r0
   1782a:	9803      	ldr	r0, [sp, #12]
   1782c:	f008 f88d 	bl	1f94a <z_sched_prio_cmp>
   17830:	2800      	cmp	r0, #0
   17832:	dc11      	bgt.n	17858 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17834:	b31c      	cbz	r4, 1787e <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
   17836:	686b      	ldr	r3, [r5, #4]
   17838:	429c      	cmp	r4, r3
   1783a:	d02a      	beq.n	17892 <register_events+0x3e6>
   1783c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1783e:	2c00      	cmp	r4, #0
   17840:	d1ed      	bne.n	1781e <register_events+0x372>
   17842:	9c04      	ldr	r4, [sp, #16]
   17844:	9d05      	ldr	r5, [sp, #20]
   17846:	e01c      	b.n	17882 <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
   17848:	9a02      	ldr	r2, [sp, #8]
   1784a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   1784c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   17850:	6063      	str	r3, [r4, #4]
	tail->next = node;
   17852:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17854:	6054      	str	r4, [r2, #4]
		return;
   17856:	e6e3      	b.n	17620 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   17858:	9d05      	ldr	r5, [sp, #20]
   1785a:	4622      	mov	r2, r4
   1785c:	9c04      	ldr	r4, [sp, #16]
   1785e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   17860:	6063      	str	r3, [r4, #4]
	node->next = successor;
   17862:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   17866:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   17868:	6054      	str	r4, [r2, #4]
			return;
   1786a:	e6d9      	b.n	17620 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1786c:	2300      	movs	r3, #0
   1786e:	9404      	str	r4, [sp, #16]
   17870:	9505      	str	r5, [sp, #20]
   17872:	9d02      	ldr	r5, [sp, #8]
   17874:	461c      	mov	r4, r3
   17876:	e7d2      	b.n	1781e <register_events+0x372>
   17878:	9c04      	ldr	r4, [sp, #16]
   1787a:	9d05      	ldr	r5, [sp, #20]
   1787c:	e001      	b.n	17882 <register_events+0x3d6>
   1787e:	9c04      	ldr	r4, [sp, #16]
   17880:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   17882:	9a02      	ldr	r2, [sp, #8]
   17884:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   17886:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1788a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1788c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1788e:	6054      	str	r4, [r2, #4]
}
   17890:	e6c6      	b.n	17620 <register_events+0x174>
   17892:	9c04      	ldr	r4, [sp, #16]
   17894:	9d05      	ldr	r5, [sp, #20]
   17896:	e7f4      	b.n	17882 <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   17898:	9801      	ldr	r0, [sp, #4]
   1789a:	b007      	add	sp, #28
   1789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000178a0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   178a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178a4:	b082      	sub	sp, #8
   178a6:	4605      	mov	r5, r0
   178a8:	4690      	mov	r8, r2
   178aa:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   178ac:	4b4f      	ldr	r3, [pc, #316]	; (179ec <z_impl_k_poll+0x14c>)
   178ae:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
   178b0:	2301      	movs	r3, #1
   178b2:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
   178b6:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   178ba:	ea57 0302 	orrs.w	r3, r7, r2
   178be:	bf0c      	ite	eq
   178c0:	2301      	moveq	r3, #1
   178c2:	2300      	movne	r3, #0
   178c4:	f106 0260 	add.w	r2, r6, #96	; 0x60
   178c8:	f7ff fdf0 	bl	174ac <register_events>
   178cc:	4604      	mov	r4, r0
   178ce:	f04f 0320 	mov.w	r3, #32
   178d2:	f3ef 8111 	mrs	r1, BASEPRI
   178d6:	f383 8812 	msr	BASEPRI_MAX, r3
   178da:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   178de:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
   178e2:	b1b3      	cbz	r3, 17912 <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   178e4:	2300      	movs	r3, #0
   178e6:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   178ea:	ea57 0308 	orrs.w	r3, r7, r8
   178ee:	d043      	beq.n	17978 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   178f0:	f8cd 8000 	str.w	r8, [sp]
   178f4:	9701      	str	r7, [sp, #4]
   178f6:	4a3e      	ldr	r2, [pc, #248]	; (179f0 <z_impl_k_poll+0x150>)
   178f8:	483e      	ldr	r0, [pc, #248]	; (179f4 <z_impl_k_poll+0x154>)
   178fa:	f7ff f95b 	bl	16bb4 <z_pend_curr>
   178fe:	f04f 0320 	mov.w	r3, #32
   17902:	f3ef 8611 	mrs	r6, BASEPRI
   17906:	f383 8812 	msr	BASEPRI_MAX, r3
   1790a:	f3bf 8f6f 	isb	sy
   1790e:	46b4      	mov	ip, r6
	while (num_events--) {
   17910:	e04c      	b.n	179ac <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   17912:	460e      	mov	r6, r1
	while (num_events--) {
   17914:	e00c      	b.n	17930 <z_impl_k_poll+0x90>
	__asm__ volatile(
   17916:	f386 8811 	msr	BASEPRI, r6
   1791a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1791e:	f04f 0320 	mov.w	r3, #32
   17922:	f3ef 8611 	mrs	r6, BASEPRI
   17926:	f383 8812 	msr	BASEPRI_MAX, r3
   1792a:	f3bf 8f6f 	isb	sy
   1792e:	4604      	mov	r4, r0
   17930:	1e60      	subs	r0, r4, #1
   17932:	b1dc      	cbz	r4, 1796c <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
   17934:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17938:	009f      	lsls	r7, r3, #2
   1793a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1793e:	2200      	movs	r2, #0
   17940:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   17942:	7b5a      	ldrb	r2, [r3, #13]
   17944:	f002 021f 	and.w	r2, r2, #31
   17948:	2a08      	cmp	r2, #8
   1794a:	d8e4      	bhi.n	17916 <z_impl_k_poll+0x76>
   1794c:	2401      	movs	r4, #1
   1794e:	fa04 f202 	lsl.w	r2, r4, r2
   17952:	f412 7f8b 	tst.w	r2, #278	; 0x116
   17956:	d0de      	beq.n	17916 <z_impl_k_poll+0x76>
	return node->next != NULL;
   17958:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1795a:	2a00      	cmp	r2, #0
   1795c:	d0db      	beq.n	17916 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1795e:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   17960:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   17962:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   17964:	2200      	movs	r2, #0
   17966:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   17968:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
   1796a:	e7d4      	b.n	17916 <z_impl_k_poll+0x76>
	__asm__ volatile(
   1796c:	f381 8811 	msr	BASEPRI, r1
   17970:	f3bf 8f6f 	isb	sy
		return 0;
   17974:	4620      	mov	r0, r4
   17976:	e036      	b.n	179e6 <z_impl_k_poll+0x146>
   17978:	f381 8811 	msr	BASEPRI, r1
   1797c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   17980:	f06f 000a 	mvn.w	r0, #10
   17984:	e02f      	b.n	179e6 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
   17986:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
   17988:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   1798a:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   1798c:	2200      	movs	r2, #0
   1798e:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
   17990:	605a      	str	r2, [r3, #4]
   17992:	f38c 8811 	msr	BASEPRI, ip
   17996:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1799a:	f04f 0320 	mov.w	r3, #32
   1799e:	f3ef 8c11 	mrs	ip, BASEPRI
   179a2:	f383 8812 	msr	BASEPRI_MAX, r3
   179a6:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   179aa:	4674      	mov	r4, lr
   179ac:	f104 3eff 	add.w	lr, r4, #4294967295
   179b0:	b1ac      	cbz	r4, 179de <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
   179b2:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
   179b6:	009c      	lsls	r4, r3, #2
   179b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   179bc:	2200      	movs	r2, #0
   179be:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   179c0:	7b5a      	ldrb	r2, [r3, #13]
   179c2:	f002 021f 	and.w	r2, r2, #31
   179c6:	2a08      	cmp	r2, #8
   179c8:	d8e3      	bhi.n	17992 <z_impl_k_poll+0xf2>
   179ca:	2101      	movs	r1, #1
   179cc:	fa01 f202 	lsl.w	r2, r1, r2
   179d0:	f412 7f8b 	tst.w	r2, #278	; 0x116
   179d4:	d0dd      	beq.n	17992 <z_impl_k_poll+0xf2>
	return node->next != NULL;
   179d6:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   179d8:	2a00      	cmp	r2, #0
   179da:	d1d4      	bne.n	17986 <z_impl_k_poll+0xe6>
   179dc:	e7d9      	b.n	17992 <z_impl_k_poll+0xf2>
	__asm__ volatile(
   179de:	f386 8811 	msr	BASEPRI, r6
   179e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   179e6:	b002      	add	sp, #8
   179e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179ec:	2000294c 	.word	0x2000294c
   179f0:	20000590 	.word	0x20000590
   179f4:	20002990 	.word	0x20002990

000179f8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   179f8:	b538      	push	{r3, r4, r5, lr}
   179fa:	4603      	mov	r3, r0
	__asm__ volatile(
   179fc:	f04f 0220 	mov.w	r2, #32
   17a00:	f3ef 8511 	mrs	r5, BASEPRI
   17a04:	f382 8812 	msr	BASEPRI_MAX, r2
   17a08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   17a0c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   17a0e:	2201      	movs	r2, #1
   17a10:	6082      	str	r2, [r0, #8]
	return list->head == list;
   17a12:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   17a14:	4283      	cmp	r3, r0
   17a16:	d011      	beq.n	17a3c <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   17a18:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   17a1a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   17a1c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   17a1e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17a20:	2300      	movs	r3, #0
   17a22:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   17a24:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   17a26:	b148      	cbz	r0, 17a3c <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   17a28:	2101      	movs	r1, #1
   17a2a:	f008 fa62 	bl	1fef2 <signal_poll_event>
   17a2e:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   17a30:	4629      	mov	r1, r5
   17a32:	4805      	ldr	r0, [pc, #20]	; (17a48 <z_impl_k_poll_signal_raise+0x50>)
   17a34:	f7fe ff36 	bl	168a4 <z_reschedule>
	return rc;
}
   17a38:	4620      	mov	r0, r4
   17a3a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17a3c:	f385 8811 	msr	BASEPRI, r5
   17a40:	f3bf 8f6f 	isb	sy
		return 0;
   17a44:	2400      	movs	r4, #0
   17a46:	e7f7      	b.n	17a38 <z_impl_k_poll_signal_raise+0x40>
   17a48:	20002990 	.word	0x20002990

00017a4c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   17a4c:	b508      	push	{r3, lr}
   17a4e:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   17a50:	4601      	mov	r1, r0
   17a52:	4802      	ldr	r0, [pc, #8]	; (17a5c <k_aligned_alloc+0x10>)
   17a54:	f008 fa9c 	bl	1ff90 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   17a58:	bd08      	pop	{r3, pc}
   17a5a:	bf00      	nop
   17a5c:	20000680 	.word	0x20000680

00017a60 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   17a60:	4b01      	ldr	r3, [pc, #4]	; (17a68 <k_thread_system_pool_assign+0x8>)
   17a62:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
}
   17a66:	4770      	bx	lr
   17a68:	20000680 	.word	0x20000680

00017a6c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   17a6c:	b538      	push	{r3, r4, r5, lr}
   17a6e:	4604      	mov	r4, r0
   17a70:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   17a72:	f007 fcd8 	bl	1f426 <k_is_in_isr>
   17a76:	b948      	cbnz	r0, 17a8c <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   17a78:	4b05      	ldr	r3, [pc, #20]	; (17a90 <z_thread_aligned_alloc+0x24>)
   17a7a:	689b      	ldr	r3, [r3, #8]
   17a7c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   17a80:	b118      	cbz	r0, 17a8a <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   17a82:	462a      	mov	r2, r5
   17a84:	4621      	mov	r1, r4
   17a86:	f008 fa83 	bl	1ff90 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   17a8a:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   17a8c:	4801      	ldr	r0, [pc, #4]	; (17a94 <z_thread_aligned_alloc+0x28>)
   17a8e:	e7f7      	b.n	17a80 <z_thread_aligned_alloc+0x14>
   17a90:	2000294c 	.word	0x2000294c
   17a94:	20000680 	.word	0x20000680

00017a98 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   17a98:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   17a9a:	4a03      	ldr	r2, [pc, #12]	; (17aa8 <boot_banner+0x10>)
   17a9c:	4903      	ldr	r1, [pc, #12]	; (17aac <boot_banner+0x14>)
   17a9e:	4804      	ldr	r0, [pc, #16]	; (17ab0 <boot_banner+0x18>)
   17aa0:	f000 fa66 	bl	17f70 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   17aa4:	bd08      	pop	{r3, pc}
   17aa6:	bf00      	nop
   17aa8:	00020a70 	.word	0x00020a70
   17aac:	00023a30 	.word	0x00023a30
   17ab0:	00023a40 	.word	0x00023a40

00017ab4 <nrf_cc3xx_platform_init_no_rng>:
   17ab4:	b510      	push	{r4, lr}
   17ab6:	4c0a      	ldr	r4, [pc, #40]	; (17ae0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   17ab8:	6823      	ldr	r3, [r4, #0]
   17aba:	b11b      	cbz	r3, 17ac4 <nrf_cc3xx_platform_init_no_rng+0x10>
   17abc:	2301      	movs	r3, #1
   17abe:	2000      	movs	r0, #0
   17ac0:	6023      	str	r3, [r4, #0]
   17ac2:	bd10      	pop	{r4, pc}
   17ac4:	f000 f8dc 	bl	17c80 <CC_LibInitNoRng>
   17ac8:	2800      	cmp	r0, #0
   17aca:	d0f7      	beq.n	17abc <nrf_cc3xx_platform_init_no_rng+0x8>
   17acc:	3801      	subs	r0, #1
   17ace:	2807      	cmp	r0, #7
   17ad0:	d803      	bhi.n	17ada <nrf_cc3xx_platform_init_no_rng+0x26>
   17ad2:	4b04      	ldr	r3, [pc, #16]	; (17ae4 <nrf_cc3xx_platform_init_no_rng+0x30>)
   17ad4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17ad8:	bd10      	pop	{r4, pc}
   17ada:	4803      	ldr	r0, [pc, #12]	; (17ae8 <nrf_cc3xx_platform_init_no_rng+0x34>)
   17adc:	bd10      	pop	{r4, pc}
   17ade:	bf00      	nop
   17ae0:	20002990 	.word	0x20002990
   17ae4:	00023a68 	.word	0x00023a68
   17ae8:	ffff8ffe 	.word	0xffff8ffe

00017aec <nrf_cc3xx_platform_abort>:
   17aec:	f3bf 8f4f 	dsb	sy
   17af0:	4905      	ldr	r1, [pc, #20]	; (17b08 <nrf_cc3xx_platform_abort+0x1c>)
   17af2:	4b06      	ldr	r3, [pc, #24]	; (17b0c <nrf_cc3xx_platform_abort+0x20>)
   17af4:	68ca      	ldr	r2, [r1, #12]
   17af6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17afa:	4313      	orrs	r3, r2
   17afc:	60cb      	str	r3, [r1, #12]
   17afe:	f3bf 8f4f 	dsb	sy
   17b02:	bf00      	nop
   17b04:	e7fd      	b.n	17b02 <nrf_cc3xx_platform_abort+0x16>
   17b06:	bf00      	nop
   17b08:	e000ed00 	.word	0xe000ed00
   17b0c:	05fa0004 	.word	0x05fa0004

00017b10 <CC_PalAbort>:
   17b10:	b430      	push	{r4, r5}
   17b12:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   17b16:	2500      	movs	r5, #0
   17b18:	4b0b      	ldr	r3, [pc, #44]	; (17b48 <CC_PalAbort+0x38>)
   17b1a:	4c0c      	ldr	r4, [pc, #48]	; (17b4c <CC_PalAbort+0x3c>)
   17b1c:	490c      	ldr	r1, [pc, #48]	; (17b50 <CC_PalAbort+0x40>)
   17b1e:	6849      	ldr	r1, [r1, #4]
   17b20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   17b24:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   17b28:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   17b2c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   17b30:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   17b34:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
   17b38:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
   17b3c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
   17b40:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
   17b44:	bc30      	pop	{r4, r5}
   17b46:	4708      	bx	r1
   17b48:	50845000 	.word	0x50845000
   17b4c:	50844000 	.word	0x50844000
   17b50:	20000598 	.word	0x20000598

00017b54 <nrf_cc3xx_platform_set_abort>:
   17b54:	4b02      	ldr	r3, [pc, #8]	; (17b60 <nrf_cc3xx_platform_set_abort+0xc>)
   17b56:	e9d0 1200 	ldrd	r1, r2, [r0]
   17b5a:	e9c3 1200 	strd	r1, r2, [r3]
   17b5e:	4770      	bx	lr
   17b60:	20000598 	.word	0x20000598

00017b64 <mutex_free>:
   17b64:	b510      	push	{r4, lr}
   17b66:	4604      	mov	r4, r0
   17b68:	b130      	cbz	r0, 17b78 <mutex_free+0x14>
   17b6a:	6863      	ldr	r3, [r4, #4]
   17b6c:	06db      	lsls	r3, r3, #27
   17b6e:	d502      	bpl.n	17b76 <mutex_free+0x12>
   17b70:	2300      	movs	r3, #0
   17b72:	6023      	str	r3, [r4, #0]
   17b74:	6063      	str	r3, [r4, #4]
   17b76:	bd10      	pop	{r4, pc}
   17b78:	4b02      	ldr	r3, [pc, #8]	; (17b84 <mutex_free+0x20>)
   17b7a:	4803      	ldr	r0, [pc, #12]	; (17b88 <mutex_free+0x24>)
   17b7c:	685b      	ldr	r3, [r3, #4]
   17b7e:	4798      	blx	r3
   17b80:	e7f3      	b.n	17b6a <mutex_free+0x6>
   17b82:	bf00      	nop
   17b84:	20000598 	.word	0x20000598
   17b88:	00023a88 	.word	0x00023a88

00017b8c <mutex_lock>:
   17b8c:	b1b0      	cbz	r0, 17bbc <mutex_lock+0x30>
   17b8e:	6843      	ldr	r3, [r0, #4]
   17b90:	b193      	cbz	r3, 17bb8 <mutex_lock+0x2c>
   17b92:	06db      	lsls	r3, r3, #27
   17b94:	d50e      	bpl.n	17bb4 <mutex_lock+0x28>
   17b96:	2301      	movs	r3, #1
   17b98:	e850 2f00 	ldrex	r2, [r0]
   17b9c:	4619      	mov	r1, r3
   17b9e:	e840 1c00 	strex	ip, r1, [r0]
   17ba2:	f09c 0f00 	teq	ip, #0
   17ba6:	d1f7      	bne.n	17b98 <mutex_lock+0xc>
   17ba8:	2a01      	cmp	r2, #1
   17baa:	d0f5      	beq.n	17b98 <mutex_lock+0xc>
   17bac:	f3bf 8f5f 	dmb	sy
   17bb0:	2000      	movs	r0, #0
   17bb2:	4770      	bx	lr
   17bb4:	4803      	ldr	r0, [pc, #12]	; (17bc4 <mutex_lock+0x38>)
   17bb6:	4770      	bx	lr
   17bb8:	4803      	ldr	r0, [pc, #12]	; (17bc8 <mutex_lock+0x3c>)
   17bba:	4770      	bx	lr
   17bbc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   17bc0:	4770      	bx	lr
   17bc2:	bf00      	nop
   17bc4:	ffff8fe9 	.word	0xffff8fe9
   17bc8:	ffff8fea 	.word	0xffff8fea

00017bcc <mutex_unlock>:
   17bcc:	4603      	mov	r3, r0
   17bce:	b168      	cbz	r0, 17bec <mutex_unlock+0x20>
   17bd0:	6842      	ldr	r2, [r0, #4]
   17bd2:	b13a      	cbz	r2, 17be4 <mutex_unlock+0x18>
   17bd4:	06d2      	lsls	r2, r2, #27
   17bd6:	d507      	bpl.n	17be8 <mutex_unlock+0x1c>
   17bd8:	f3bf 8f5f 	dmb	sy
   17bdc:	2200      	movs	r2, #0
   17bde:	4610      	mov	r0, r2
   17be0:	601a      	str	r2, [r3, #0]
   17be2:	4770      	bx	lr
   17be4:	4803      	ldr	r0, [pc, #12]	; (17bf4 <mutex_unlock+0x28>)
   17be6:	4770      	bx	lr
   17be8:	4803      	ldr	r0, [pc, #12]	; (17bf8 <mutex_unlock+0x2c>)
   17bea:	4770      	bx	lr
   17bec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   17bf0:	4770      	bx	lr
   17bf2:	bf00      	nop
   17bf4:	ffff8fea 	.word	0xffff8fea
   17bf8:	ffff8fe9 	.word	0xffff8fe9

00017bfc <mutex_init>:
   17bfc:	b510      	push	{r4, lr}
   17bfe:	4604      	mov	r4, r0
   17c00:	b120      	cbz	r0, 17c0c <mutex_init+0x10>
   17c02:	2200      	movs	r2, #0
   17c04:	2311      	movs	r3, #17
   17c06:	6022      	str	r2, [r4, #0]
   17c08:	6063      	str	r3, [r4, #4]
   17c0a:	bd10      	pop	{r4, pc}
   17c0c:	4801      	ldr	r0, [pc, #4]	; (17c14 <mutex_init+0x18>)
   17c0e:	f7ff ff7f 	bl	17b10 <CC_PalAbort>
   17c12:	e7f6      	b.n	17c02 <mutex_init+0x6>
   17c14:	00023ab0 	.word	0x00023ab0

00017c18 <nrf_cc3xx_platform_set_mutexes>:
   17c18:	b570      	push	{r4, r5, r6, lr}
   17c1a:	4c16      	ldr	r4, [pc, #88]	; (17c74 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   17c1c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   17c20:	6806      	ldr	r6, [r0, #0]
   17c22:	f8c4 c004 	str.w	ip, [r4, #4]
   17c26:	f8d0 c008 	ldr.w	ip, [r0, #8]
   17c2a:	68c0      	ldr	r0, [r0, #12]
   17c2c:	f8c4 c008 	str.w	ip, [r4, #8]
   17c30:	60e0      	str	r0, [r4, #12]
   17c32:	6026      	str	r6, [r4, #0]
   17c34:	6808      	ldr	r0, [r1, #0]
   17c36:	4b10      	ldr	r3, [pc, #64]	; (17c78 <nrf_cc3xx_platform_set_mutexes+0x60>)
   17c38:	4d10      	ldr	r5, [pc, #64]	; (17c7c <nrf_cc3xx_platform_set_mutexes+0x64>)
   17c3a:	6018      	str	r0, [r3, #0]
   17c3c:	6848      	ldr	r0, [r1, #4]
   17c3e:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   17c42:	6058      	str	r0, [r3, #4]
   17c44:	6888      	ldr	r0, [r1, #8]
   17c46:	6098      	str	r0, [r3, #8]
   17c48:	68c8      	ldr	r0, [r1, #12]
   17c4a:	6909      	ldr	r1, [r1, #16]
   17c4c:	60d8      	str	r0, [r3, #12]
   17c4e:	6119      	str	r1, [r3, #16]
   17c50:	06d3      	lsls	r3, r2, #27
   17c52:	d50d      	bpl.n	17c70 <nrf_cc3xx_platform_set_mutexes+0x58>
   17c54:	2300      	movs	r3, #0
   17c56:	f505 708a 	add.w	r0, r5, #276	; 0x114
   17c5a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   17c5e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   17c62:	47b0      	blx	r6
   17c64:	6823      	ldr	r3, [r4, #0]
   17c66:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   17c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17c6e:	4718      	bx	r3
   17c70:	bd70      	pop	{r4, r5, r6, pc}
   17c72:	bf00      	nop
   17c74:	200005a8 	.word	0x200005a8
   17c78:	200005b8 	.word	0x200005b8
   17c7c:	200029a8 	.word	0x200029a8

00017c80 <CC_LibInitNoRng>:
   17c80:	b508      	push	{r3, lr}
   17c82:	f000 f811 	bl	17ca8 <CC_HalInit>
   17c86:	b930      	cbnz	r0, 17c96 <CC_LibInitNoRng+0x16>
   17c88:	f000 f810 	bl	17cac <CC_PalInit>
   17c8c:	b938      	cbnz	r0, 17c9e <CC_LibInitNoRng+0x1e>
   17c8e:	4a05      	ldr	r2, [pc, #20]	; (17ca4 <CC_LibInitNoRng+0x24>)
   17c90:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
   17c94:	bd08      	pop	{r3, pc}
   17c96:	f000 f837 	bl	17d08 <CC_PalTerminate>
   17c9a:	2003      	movs	r0, #3
   17c9c:	bd08      	pop	{r3, pc}
   17c9e:	2004      	movs	r0, #4
   17ca0:	bd08      	pop	{r3, pc}
   17ca2:	bf00      	nop
   17ca4:	50845000 	.word	0x50845000

00017ca8 <CC_HalInit>:
   17ca8:	2000      	movs	r0, #0
   17caa:	4770      	bx	lr

00017cac <CC_PalInit>:
   17cac:	b510      	push	{r4, lr}
   17cae:	4811      	ldr	r0, [pc, #68]	; (17cf4 <CC_PalInit+0x48>)
   17cb0:	f000 f848 	bl	17d44 <CC_PalMutexCreate>
   17cb4:	b100      	cbz	r0, 17cb8 <CC_PalInit+0xc>
   17cb6:	bd10      	pop	{r4, pc}
   17cb8:	480f      	ldr	r0, [pc, #60]	; (17cf8 <CC_PalInit+0x4c>)
   17cba:	f000 f843 	bl	17d44 <CC_PalMutexCreate>
   17cbe:	2800      	cmp	r0, #0
   17cc0:	d1f9      	bne.n	17cb6 <CC_PalInit+0xa>
   17cc2:	4c0e      	ldr	r4, [pc, #56]	; (17cfc <CC_PalInit+0x50>)
   17cc4:	4620      	mov	r0, r4
   17cc6:	f000 f83d 	bl	17d44 <CC_PalMutexCreate>
   17cca:	2800      	cmp	r0, #0
   17ccc:	d1f3      	bne.n	17cb6 <CC_PalInit+0xa>
   17cce:	4b0c      	ldr	r3, [pc, #48]	; (17d00 <CC_PalInit+0x54>)
   17cd0:	480c      	ldr	r0, [pc, #48]	; (17d04 <CC_PalInit+0x58>)
   17cd2:	601c      	str	r4, [r3, #0]
   17cd4:	f000 f836 	bl	17d44 <CC_PalMutexCreate>
   17cd8:	4601      	mov	r1, r0
   17cda:	2800      	cmp	r0, #0
   17cdc:	d1eb      	bne.n	17cb6 <CC_PalInit+0xa>
   17cde:	f000 f82d 	bl	17d3c <CC_PalDmaInit>
   17ce2:	4604      	mov	r4, r0
   17ce4:	b108      	cbz	r0, 17cea <CC_PalInit+0x3e>
   17ce6:	4620      	mov	r0, r4
   17ce8:	bd10      	pop	{r4, pc}
   17cea:	f000 f83f 	bl	17d6c <CC_PalPowerSaveModeInit>
   17cee:	4620      	mov	r0, r4
   17cf0:	e7fa      	b.n	17ce8 <CC_PalInit+0x3c>
   17cf2:	bf00      	nop
   17cf4:	200005f0 	.word	0x200005f0
   17cf8:	200005e4 	.word	0x200005e4
   17cfc:	200005ec 	.word	0x200005ec
   17d00:	200005f4 	.word	0x200005f4
   17d04:	200005e8 	.word	0x200005e8

00017d08 <CC_PalTerminate>:
   17d08:	b508      	push	{r3, lr}
   17d0a:	4808      	ldr	r0, [pc, #32]	; (17d2c <CC_PalTerminate+0x24>)
   17d0c:	f000 f824 	bl	17d58 <CC_PalMutexDestroy>
   17d10:	4807      	ldr	r0, [pc, #28]	; (17d30 <CC_PalTerminate+0x28>)
   17d12:	f000 f821 	bl	17d58 <CC_PalMutexDestroy>
   17d16:	4807      	ldr	r0, [pc, #28]	; (17d34 <CC_PalTerminate+0x2c>)
   17d18:	f000 f81e 	bl	17d58 <CC_PalMutexDestroy>
   17d1c:	4806      	ldr	r0, [pc, #24]	; (17d38 <CC_PalTerminate+0x30>)
   17d1e:	f000 f81b 	bl	17d58 <CC_PalMutexDestroy>
   17d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17d26:	f000 b80b 	b.w	17d40 <CC_PalDmaTerminate>
   17d2a:	bf00      	nop
   17d2c:	200005f0 	.word	0x200005f0
   17d30:	200005e4 	.word	0x200005e4
   17d34:	200005ec 	.word	0x200005ec
   17d38:	200005e8 	.word	0x200005e8

00017d3c <CC_PalDmaInit>:
   17d3c:	2000      	movs	r0, #0
   17d3e:	4770      	bx	lr

00017d40 <CC_PalDmaTerminate>:
   17d40:	4770      	bx	lr
   17d42:	bf00      	nop

00017d44 <CC_PalMutexCreate>:
   17d44:	b508      	push	{r3, lr}
   17d46:	4b03      	ldr	r3, [pc, #12]	; (17d54 <CC_PalMutexCreate+0x10>)
   17d48:	6802      	ldr	r2, [r0, #0]
   17d4a:	681b      	ldr	r3, [r3, #0]
   17d4c:	6810      	ldr	r0, [r2, #0]
   17d4e:	4798      	blx	r3
   17d50:	2000      	movs	r0, #0
   17d52:	bd08      	pop	{r3, pc}
   17d54:	200005a8 	.word	0x200005a8

00017d58 <CC_PalMutexDestroy>:
   17d58:	b508      	push	{r3, lr}
   17d5a:	4b03      	ldr	r3, [pc, #12]	; (17d68 <CC_PalMutexDestroy+0x10>)
   17d5c:	6802      	ldr	r2, [r0, #0]
   17d5e:	685b      	ldr	r3, [r3, #4]
   17d60:	6810      	ldr	r0, [r2, #0]
   17d62:	4798      	blx	r3
   17d64:	2000      	movs	r0, #0
   17d66:	bd08      	pop	{r3, pc}
   17d68:	200005a8 	.word	0x200005a8

00017d6c <CC_PalPowerSaveModeInit>:
   17d6c:	b570      	push	{r4, r5, r6, lr}
   17d6e:	4c09      	ldr	r4, [pc, #36]	; (17d94 <CC_PalPowerSaveModeInit+0x28>)
   17d70:	4d09      	ldr	r5, [pc, #36]	; (17d98 <CC_PalPowerSaveModeInit+0x2c>)
   17d72:	6920      	ldr	r0, [r4, #16]
   17d74:	68ab      	ldr	r3, [r5, #8]
   17d76:	4798      	blx	r3
   17d78:	b118      	cbz	r0, 17d82 <CC_PalPowerSaveModeInit+0x16>
   17d7a:	4b08      	ldr	r3, [pc, #32]	; (17d9c <CC_PalPowerSaveModeInit+0x30>)
   17d7c:	4808      	ldr	r0, [pc, #32]	; (17da0 <CC_PalPowerSaveModeInit+0x34>)
   17d7e:	685b      	ldr	r3, [r3, #4]
   17d80:	4798      	blx	r3
   17d82:	2100      	movs	r1, #0
   17d84:	4a07      	ldr	r2, [pc, #28]	; (17da4 <CC_PalPowerSaveModeInit+0x38>)
   17d86:	68eb      	ldr	r3, [r5, #12]
   17d88:	6011      	str	r1, [r2, #0]
   17d8a:	6920      	ldr	r0, [r4, #16]
   17d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17d90:	4718      	bx	r3
   17d92:	bf00      	nop
   17d94:	200005b8 	.word	0x200005b8
   17d98:	200005a8 	.word	0x200005a8
   17d9c:	20000598 	.word	0x20000598
   17da0:	00023ad4 	.word	0x00023ad4
   17da4:	200029a4 	.word	0x200029a4

00017da8 <gpio_pin_configure_dt>:
{
   17da8:	b510      	push	{r4, lr}
   17daa:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
   17dac:	6800      	ldr	r0, [r0, #0]
   17dae:	f892 c004 	ldrb.w	ip, [r2, #4]
				  spec->dt_flags | extra_flags);
   17db2:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
   17db4:	430b      	orrs	r3, r1
	const struct gpio_driver_api *api =
   17db6:	6884      	ldr	r4, [r0, #8]
	struct gpio_driver_data *data =
   17db8:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   17dba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17dbe:	d007      	beq.n	17dd0 <gpio_pin_configure_dt+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   17dc0:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   17dc4:	d004      	beq.n	17dd0 <gpio_pin_configure_dt+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   17dc6:	f013 0f01 	tst.w	r3, #1
   17dca:	d001      	beq.n	17dd0 <gpio_pin_configure_dt+0x28>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   17dcc:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   17dd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   17dd4:	f013 0f01 	tst.w	r3, #1
   17dd8:	d00a      	beq.n	17df0 <gpio_pin_configure_dt+0x48>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17dda:	2301      	movs	r3, #1
   17ddc:	fa03 fe0c 	lsl.w	lr, r3, ip
   17de0:	680b      	ldr	r3, [r1, #0]
   17de2:	ea43 030e 	orr.w	r3, r3, lr
   17de6:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
   17de8:	6823      	ldr	r3, [r4, #0]
   17dea:	4661      	mov	r1, ip
   17dec:	4798      	blx	r3
}
   17dee:	bd10      	pop	{r4, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17df0:	2301      	movs	r3, #1
   17df2:	fa03 fe0c 	lsl.w	lr, r3, ip
   17df6:	680b      	ldr	r3, [r1, #0]
   17df8:	ea23 030e 	bic.w	r3, r3, lr
   17dfc:	600b      	str	r3, [r1, #0]
   17dfe:	e7f3      	b.n	17de8 <gpio_pin_configure_dt+0x40>

00017e00 <cbprintf_via_va_list>:
{
   17e00:	b510      	push	{r4, lr}
   17e02:	460c      	mov	r4, r1
   17e04:	4611      	mov	r1, r2
   17e06:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   17e08:	9b02      	ldr	r3, [sp, #8]
   17e0a:	47a0      	blx	r4
}
   17e0c:	bd10      	pop	{r4, pc}

00017e0e <get_package_len>:
{
   17e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e10:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
   17e12:	7800      	ldrb	r0, [r0, #0]
	s_nbr     = buf[1];
   17e14:	7875      	ldrb	r5, [r6, #1]
	ros_nbr   = buf[2];
   17e16:	78b4      	ldrb	r4, [r6, #2]
	buf += ros_nbr;
   17e18:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   17e1c:	4434      	add	r4, r6
	for (int i = 0; i < s_nbr; i++) {
   17e1e:	2700      	movs	r7, #0
   17e20:	e006      	b.n	17e30 <get_package_len+0x22>
		buf++;
   17e22:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   17e24:	4620      	mov	r0, r4
   17e26:	f002 f8cd 	bl	19fc4 <strlen>
   17e2a:	3001      	adds	r0, #1
   17e2c:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   17e2e:	3701      	adds	r7, #1
   17e30:	42af      	cmp	r7, r5
   17e32:	d3f6      	bcc.n	17e22 <get_package_len+0x14>
}
   17e34:	1ba0      	subs	r0, r4, r6
   17e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017e38 <append_string>:
{
   17e38:	b570      	push	{r4, r5, r6, lr}
   17e3a:	4614      	mov	r4, r2
	if (cb == NULL) {
   17e3c:	b138      	cbz	r0, 17e4e <append_string+0x16>
   17e3e:	460d      	mov	r5, r1
   17e40:	4619      	mov	r1, r3
   17e42:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   17e44:	b143      	cbz	r3, 17e58 <append_string+0x20>
	return cb(str, strl, ctx);
   17e46:	462a      	mov	r2, r5
   17e48:	4620      	mov	r0, r4
   17e4a:	47b0      	blx	r6
}
   17e4c:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   17e4e:	4610      	mov	r0, r2
   17e50:	f002 f8b8 	bl	19fc4 <strlen>
   17e54:	3001      	adds	r0, #1
   17e56:	e7f9      	b.n	17e4c <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   17e58:	4610      	mov	r0, r2
   17e5a:	f002 f8b3 	bl	19fc4 <strlen>
   17e5e:	b283      	uxth	r3, r0
   17e60:	3301      	adds	r3, #1
   17e62:	b299      	uxth	r1, r3
   17e64:	e7ef      	b.n	17e46 <append_string+0xe>

00017e66 <cbpprintf_external>:
	if (buf == NULL) {
   17e66:	b353      	cbz	r3, 17ebe <cbpprintf_external+0x58>
{
   17e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e6c:	b082      	sub	sp, #8
   17e6e:	4607      	mov	r7, r0
   17e70:	4688      	mov	r8, r1
   17e72:	4691      	mov	r9, r2
   17e74:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   17e76:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   17e78:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   17e7a:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   17e7c:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   17e7e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   17e82:	441c      	add	r4, r3
   17e84:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   17e86:	f04f 0a00 	mov.w	sl, #0
   17e8a:	e00a      	b.n	17ea2 <cbpprintf_external+0x3c>
		s_idx = *(uint8_t *)s++;
   17e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   17e90:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   17e94:	4620      	mov	r0, r4
   17e96:	f002 f895 	bl	19fc4 <strlen>
   17e9a:	3001      	adds	r0, #1
   17e9c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   17e9e:	f10a 0a01 	add.w	sl, sl, #1
   17ea2:	45b2      	cmp	sl, r6
   17ea4:	d3f2      	bcc.n	17e8c <cbpprintf_external+0x26>
	buf += sizeof(*hdr);
   17ea6:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   17eaa:	9300      	str	r3, [sp, #0]
   17eac:	686b      	ldr	r3, [r5, #4]
   17eae:	464a      	mov	r2, r9
   17eb0:	4641      	mov	r1, r8
   17eb2:	4638      	mov	r0, r7
   17eb4:	f7ff ffa4 	bl	17e00 <cbprintf_via_va_list>
}
   17eb8:	b002      	add	sp, #8
   17eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   17ebe:	f06f 0015 	mvn.w	r0, #21
}
   17ec2:	4770      	bx	lr

00017ec4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   17ec4:	4602      	mov	r2, r0
   17ec6:	b1b0      	cbz	r0, 17ef6 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17ec8:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17eca:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   17ece:	2b02      	cmp	r3, #2
   17ed0:	d00b      	beq.n	17eea <sys_notify_validate+0x26>
   17ed2:	2b03      	cmp	r3, #3
   17ed4:	d004      	beq.n	17ee0 <sys_notify_validate+0x1c>
   17ed6:	2b01      	cmp	r3, #1
   17ed8:	d004      	beq.n	17ee4 <sys_notify_validate+0x20>
   17eda:	f06f 0015 	mvn.w	r0, #21
   17ede:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   17ee0:	6803      	ldr	r3, [r0, #0]
   17ee2:	b15b      	cbz	r3, 17efc <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   17ee4:	2000      	movs	r0, #0
   17ee6:	6090      	str	r0, [r2, #8]
   17ee8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   17eea:	6803      	ldr	r3, [r0, #0]
   17eec:	2b00      	cmp	r3, #0
   17eee:	d1f9      	bne.n	17ee4 <sys_notify_validate+0x20>
			rv = -EINVAL;
   17ef0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   17ef4:	4770      	bx	lr
		return -EINVAL;
   17ef6:	f06f 0015 	mvn.w	r0, #21
   17efa:	4770      	bx	lr
			rv = -EINVAL;
   17efc:	f06f 0015 	mvn.w	r0, #21
   17f00:	4770      	bx	lr

00017f02 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   17f02:	b510      	push	{r4, lr}
   17f04:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   17f06:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   17f08:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   17f0c:	6081      	str	r1, [r0, #8]
	switch (method) {
   17f0e:	2a02      	cmp	r2, #2
   17f10:	d004      	beq.n	17f1c <sys_notify_finalize+0x1a>
   17f12:	2a03      	cmp	r2, #3
   17f14:	d105      	bne.n	17f22 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   17f16:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   17f18:	2000      	movs	r0, #0
		break;
   17f1a:	e004      	b.n	17f26 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   17f1c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   17f1e:	2400      	movs	r4, #0
		break;
   17f20:	e001      	b.n	17f26 <sys_notify_finalize+0x24>
	switch (method) {
   17f22:	2400      	movs	r4, #0
   17f24:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   17f26:	2200      	movs	r2, #0
   17f28:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   17f2a:	b108      	cbz	r0, 17f30 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   17f2c:	f7ff fd64 	bl	179f8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   17f30:	4620      	mov	r0, r4
   17f32:	bd10      	pop	{r4, pc}

00017f34 <arch_printk_char_out>:
}
   17f34:	2000      	movs	r0, #0
   17f36:	4770      	bx	lr

00017f38 <str_out>:
{
   17f38:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   17f3a:	680c      	ldr	r4, [r1, #0]
   17f3c:	b154      	cbz	r4, 17f54 <str_out+0x1c>
   17f3e:	688a      	ldr	r2, [r1, #8]
   17f40:	684b      	ldr	r3, [r1, #4]
   17f42:	429a      	cmp	r2, r3
   17f44:	da06      	bge.n	17f54 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   17f46:	3b01      	subs	r3, #1
   17f48:	429a      	cmp	r2, r3
   17f4a:	d008      	beq.n	17f5e <str_out+0x26>
		ctx->str[ctx->count++] = c;
   17f4c:	1c53      	adds	r3, r2, #1
   17f4e:	608b      	str	r3, [r1, #8]
   17f50:	54a0      	strb	r0, [r4, r2]
   17f52:	e002      	b.n	17f5a <str_out+0x22>
		ctx->count++;
   17f54:	688b      	ldr	r3, [r1, #8]
   17f56:	3301      	adds	r3, #1
   17f58:	608b      	str	r3, [r1, #8]
}
   17f5a:	bc10      	pop	{r4}
   17f5c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   17f5e:	1c53      	adds	r3, r2, #1
   17f60:	608b      	str	r3, [r1, #8]
   17f62:	2300      	movs	r3, #0
   17f64:	54a3      	strb	r3, [r4, r2]
   17f66:	e7f8      	b.n	17f5a <str_out+0x22>

00017f68 <vprintk>:
{
   17f68:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   17f6a:	f001 f8b0 	bl	190ce <z_log_vprintk>
}
   17f6e:	bd08      	pop	{r3, pc}

00017f70 <printk>:
{
   17f70:	b40f      	push	{r0, r1, r2, r3}
   17f72:	b500      	push	{lr}
   17f74:	b083      	sub	sp, #12
   17f76:	a904      	add	r1, sp, #16
   17f78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   17f7c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   17f7e:	f7ff fff3 	bl	17f68 <vprintk>
}
   17f82:	b003      	add	sp, #12
   17f84:	f85d eb04 	ldr.w	lr, [sp], #4
   17f88:	b004      	add	sp, #16
   17f8a:	4770      	bx	lr

00017f8c <snprintk>:
{
   17f8c:	b40c      	push	{r2, r3}
   17f8e:	b500      	push	{lr}
   17f90:	b083      	sub	sp, #12
   17f92:	ab04      	add	r3, sp, #16
   17f94:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   17f98:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   17f9a:	f7ea fa0b 	bl	23b4 <vsnprintk>
}
   17f9e:	b003      	add	sp, #12
   17fa0:	f85d eb04 	ldr.w	lr, [sp], #4
   17fa4:	b002      	add	sp, #8
   17fa6:	4770      	bx	lr

00017fa8 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   17fa8:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   17fac:	8b01      	ldrh	r1, [r0, #24]
   17fae:	f021 0107 	bic.w	r1, r1, #7
   17fb2:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   17fb4:	8301      	strh	r1, [r0, #24]
}
   17fb6:	4770      	bx	lr

00017fb8 <notify_monitors>:
{
   17fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fbc:	4606      	mov	r6, r0
   17fbe:	460f      	mov	r7, r1
   17fc0:	4690      	mov	r8, r2
	return list->head;
   17fc2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   17fc4:	b119      	cbz	r1, 17fce <notify_monitors+0x16>
   17fc6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   17fc8:	b131      	cbz	r1, 17fd8 <notify_monitors+0x20>
	return node->next;
   17fca:	680c      	ldr	r4, [r1, #0]
   17fcc:	e004      	b.n	17fd8 <notify_monitors+0x20>
   17fce:	460c      	mov	r4, r1
   17fd0:	e002      	b.n	17fd8 <notify_monitors+0x20>
   17fd2:	4623      	mov	r3, r4
   17fd4:	4621      	mov	r1, r4
   17fd6:	461c      	mov	r4, r3
   17fd8:	b159      	cbz	r1, 17ff2 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   17fda:	684d      	ldr	r5, [r1, #4]
   17fdc:	4643      	mov	r3, r8
   17fde:	463a      	mov	r2, r7
   17fe0:	4630      	mov	r0, r6
   17fe2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   17fe4:	2c00      	cmp	r4, #0
   17fe6:	d0f4      	beq.n	17fd2 <notify_monitors+0x1a>
   17fe8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   17fea:	2c00      	cmp	r4, #0
   17fec:	d0f2      	beq.n	17fd4 <notify_monitors+0x1c>
	return node->next;
   17fee:	6823      	ldr	r3, [r4, #0]
   17ff0:	e7f0      	b.n	17fd4 <notify_monitors+0x1c>
}
   17ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017ff6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17ff6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   17ff8:	f013 0307 	ands.w	r3, r3, #7
   17ffc:	d103      	bne.n	18006 <process_recheck+0x10>
	return list->head;
   17ffe:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   18000:	b10a      	cbz	r2, 18006 <process_recheck+0x10>
		evt = EVT_START;
   18002:	2003      	movs	r0, #3
   18004:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   18006:	2b02      	cmp	r3, #2
   18008:	d003      	beq.n	18012 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1800a:	2b01      	cmp	r3, #1
   1800c:	d006      	beq.n	1801c <process_recheck+0x26>
	int evt = EVT_NOP;
   1800e:	2000      	movs	r0, #0
   18010:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   18012:	8b42      	ldrh	r2, [r0, #26]
   18014:	2a00      	cmp	r2, #0
   18016:	d1f8      	bne.n	1800a <process_recheck+0x14>
		evt = EVT_STOP;
   18018:	2004      	movs	r0, #4
   1801a:	4770      	bx	lr
   1801c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1801e:	b10b      	cbz	r3, 18024 <process_recheck+0x2e>
		evt = EVT_RESET;
   18020:	2005      	movs	r0, #5
}
   18022:	4770      	bx	lr
	int evt = EVT_NOP;
   18024:	2000      	movs	r0, #0
   18026:	4770      	bx	lr

00018028 <process_complete>:
{
   18028:	b510      	push	{r4, lr}
   1802a:	4604      	mov	r4, r0
   1802c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1802e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   18030:	2a00      	cmp	r2, #0
   18032:	db07      	blt.n	18044 <process_complete+0x1c>
   18034:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   18038:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1803a:	2a01      	cmp	r2, #1
   1803c:	d90e      	bls.n	1805c <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1803e:	2b04      	cmp	r3, #4
   18040:	d033      	beq.n	180aa <process_complete+0x82>
}
   18042:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   18044:	e9d0 0100 	ldrd	r0, r1, [r0]
   18048:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1804c:	2300      	movs	r3, #0
   1804e:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   18050:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   18052:	2101      	movs	r1, #1
   18054:	4620      	mov	r0, r4
   18056:	f7ff ffa7 	bl	17fa8 <set_state>
   1805a:	e7f2      	b.n	18042 <process_complete+0x1a>
		*clients = mgr->clients;
   1805c:	e9d0 0100 	ldrd	r0, r1, [r0]
   18060:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   18064:	2200      	movs	r2, #0
   18066:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   18068:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1806a:	2b06      	cmp	r3, #6
   1806c:	d118      	bne.n	180a0 <process_complete+0x78>
	return list->head;
   1806e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   18072:	b13b      	cbz	r3, 18084 <process_complete+0x5c>
				mgr->refs += 1U;
   18074:	8b62      	ldrh	r2, [r4, #26]
   18076:	3201      	adds	r2, #1
   18078:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1807a:	2b00      	cmp	r3, #0
   1807c:	d0f9      	beq.n	18072 <process_complete+0x4a>
	return node->next;
   1807e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   18080:	2b00      	cmp	r3, #0
   18082:	d1f6      	bne.n	18072 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   18084:	2102      	movs	r1, #2
   18086:	4620      	mov	r0, r4
   18088:	f7ff ff8e 	bl	17fa8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1808c:	4620      	mov	r0, r4
   1808e:	f7ff ffb2 	bl	17ff6 <process_recheck>
   18092:	2800      	cmp	r0, #0
   18094:	d0d5      	beq.n	18042 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   18096:	8b23      	ldrh	r3, [r4, #24]
   18098:	f043 0320 	orr.w	r3, r3, #32
   1809c:	8323      	strh	r3, [r4, #24]
   1809e:	e7d0      	b.n	18042 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   180a0:	2100      	movs	r1, #0
   180a2:	4620      	mov	r0, r4
   180a4:	f7ff ff80 	bl	17fa8 <set_state>
   180a8:	e7f0      	b.n	1808c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   180aa:	2100      	movs	r1, #0
   180ac:	f7ff ff7c 	bl	17fa8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   180b0:	4620      	mov	r0, r4
   180b2:	f7ff ffa0 	bl	17ff6 <process_recheck>
   180b6:	2800      	cmp	r0, #0
   180b8:	d0c3      	beq.n	18042 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   180ba:	8b23      	ldrh	r3, [r4, #24]
   180bc:	f043 0320 	orr.w	r3, r3, #32
   180c0:	8323      	strh	r3, [r4, #24]
}
   180c2:	e7be      	b.n	18042 <process_complete+0x1a>

000180c4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   180c4:	b158      	cbz	r0, 180de <validate_args+0x1a>
{
   180c6:	b510      	push	{r4, lr}
   180c8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   180ca:	b159      	cbz	r1, 180e4 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   180cc:	1d08      	adds	r0, r1, #4
   180ce:	f7ff fef9 	bl	17ec4 <sys_notify_validate>
	if ((rv == 0)
   180d2:	b918      	cbnz	r0, 180dc <validate_args+0x18>
	    && ((cli->notify.flags
   180d4:	68a3      	ldr	r3, [r4, #8]
   180d6:	f033 0303 	bics.w	r3, r3, #3
   180da:	d106      	bne.n	180ea <validate_args+0x26>
}
   180dc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   180de:	f06f 0015 	mvn.w	r0, #21
}
   180e2:	4770      	bx	lr
		return -EINVAL;
   180e4:	f06f 0015 	mvn.w	r0, #21
   180e8:	e7f8      	b.n	180dc <validate_args+0x18>
		rv = -EINVAL;
   180ea:	f06f 0015 	mvn.w	r0, #21
   180ee:	e7f5      	b.n	180dc <validate_args+0x18>

000180f0 <notify_one>:
{
   180f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180f4:	4607      	mov	r7, r0
   180f6:	460c      	mov	r4, r1
   180f8:	4616      	mov	r6, r2
   180fa:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   180fc:	4619      	mov	r1, r3
   180fe:	1d20      	adds	r0, r4, #4
   18100:	f7ff feff 	bl	17f02 <sys_notify_finalize>
	if (cb) {
   18104:	b128      	cbz	r0, 18112 <notify_one+0x22>
   18106:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   18108:	462b      	mov	r3, r5
   1810a:	4632      	mov	r2, r6
   1810c:	4621      	mov	r1, r4
   1810e:	4638      	mov	r0, r7
   18110:	47c0      	blx	r8
}
   18112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018116 <notify_all>:
{
   18116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1811a:	4680      	mov	r8, r0
   1811c:	460c      	mov	r4, r1
   1811e:	4617      	mov	r7, r2
   18120:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   18122:	e004      	b.n	1812e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   18124:	4633      	mov	r3, r6
   18126:	463a      	mov	r2, r7
   18128:	4640      	mov	r0, r8
   1812a:	f7ff ffe1 	bl	180f0 <notify_one>
	return list->head;
   1812e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   18130:	b131      	cbz	r1, 18140 <notify_all+0x2a>
	return node->next;
   18132:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   18134:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18136:	6863      	ldr	r3, [r4, #4]
   18138:	428b      	cmp	r3, r1
   1813a:	d1f3      	bne.n	18124 <notify_all+0xe>
	list->tail = node;
   1813c:	6065      	str	r5, [r4, #4]
}
   1813e:	e7f1      	b.n	18124 <notify_all+0xe>
}
   18140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018144 <transition_complete>:
{
   18144:	b508      	push	{r3, lr}
	__asm__ volatile(
   18146:	f04f 0c20 	mov.w	ip, #32
   1814a:	f3ef 8211 	mrs	r2, BASEPRI
   1814e:	f38c 8812 	msr	BASEPRI_MAX, ip
   18152:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   18156:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   18158:	2101      	movs	r1, #1
   1815a:	f7ea f943 	bl	23e4 <process_event>
}
   1815e:	bd08      	pop	{r3, pc}

00018160 <onoff_manager_init>:
	if ((mgr == NULL)
   18160:	4603      	mov	r3, r0
   18162:	b170      	cbz	r0, 18182 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   18164:	b181      	cbz	r1, 18188 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   18166:	680a      	ldr	r2, [r1, #0]
   18168:	b18a      	cbz	r2, 1818e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   1816a:	684a      	ldr	r2, [r1, #4]
   1816c:	b192      	cbz	r2, 18194 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1816e:	2000      	movs	r0, #0
   18170:	6018      	str	r0, [r3, #0]
   18172:	6058      	str	r0, [r3, #4]
   18174:	6098      	str	r0, [r3, #8]
   18176:	60d8      	str	r0, [r3, #12]
   18178:	6118      	str	r0, [r3, #16]
   1817a:	6158      	str	r0, [r3, #20]
   1817c:	6198      	str	r0, [r3, #24]
   1817e:	6119      	str	r1, [r3, #16]
	return 0;
   18180:	4770      	bx	lr
		return -EINVAL;
   18182:	f06f 0015 	mvn.w	r0, #21
   18186:	4770      	bx	lr
   18188:	f06f 0015 	mvn.w	r0, #21
   1818c:	4770      	bx	lr
   1818e:	f06f 0015 	mvn.w	r0, #21
   18192:	4770      	bx	lr
   18194:	f06f 0015 	mvn.w	r0, #21
}
   18198:	4770      	bx	lr

0001819a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1819a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1819c:	4604      	mov	r4, r0
   1819e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   181a0:	f7ff ff90 	bl	180c4 <validate_args>

	if (rv < 0) {
   181a4:	1e06      	subs	r6, r0, #0
   181a6:	db37      	blt.n	18218 <onoff_request+0x7e>
   181a8:	f04f 0320 	mov.w	r3, #32
   181ac:	f3ef 8211 	mrs	r2, BASEPRI
   181b0:	f383 8812 	msr	BASEPRI_MAX, r3
   181b4:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   181b8:	8b25      	ldrh	r5, [r4, #24]
   181ba:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   181be:	8b63      	ldrh	r3, [r4, #26]
   181c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   181c4:	428b      	cmp	r3, r1
   181c6:	d02f      	beq.n	18228 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   181c8:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   181ca:	2d02      	cmp	r5, #2
   181cc:	d00c      	beq.n	181e8 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   181ce:	b18d      	cbz	r5, 181f4 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   181d0:	2d04      	cmp	r5, #4
   181d2:	d00f      	beq.n	181f4 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   181d4:	2d06      	cmp	r5, #6
   181d6:	d00d      	beq.n	181f4 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   181d8:	2d05      	cmp	r5, #5
   181da:	d01f      	beq.n	1821c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   181dc:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   181e0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   181e2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   181e4:	4608      	mov	r0, r1
   181e6:	e00a      	b.n	181fe <onoff_request+0x64>
		mgr->refs += 1U;
   181e8:	3301      	adds	r3, #1
   181ea:	8363      	strh	r3, [r4, #26]
		notify = true;
   181ec:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   181ee:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   181f0:	4618      	mov	r0, r3
   181f2:	e004      	b.n	181fe <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   181f4:	fab5 f385 	clz	r3, r5
   181f8:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   181fa:	2100      	movs	r1, #0
		add_client = true;
   181fc:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   181fe:	b128      	cbz	r0, 1820c <onoff_request+0x72>
	parent->next = child;
   18200:	2000      	movs	r0, #0
   18202:	6038      	str	r0, [r7, #0]
	return list->tail;
   18204:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   18206:	b1a8      	cbz	r0, 18234 <onoff_request+0x9a>
	parent->next = child;
   18208:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1820a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1820c:	b9ab      	cbnz	r3, 1823a <onoff_request+0xa0>
	__asm__ volatile(
   1820e:	f382 8811 	msr	BASEPRI, r2
   18212:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   18216:	b9a9      	cbnz	r1, 18244 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   18218:	4630      	mov	r0, r6
   1821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1821c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   18220:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   18222:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   18224:	4608      	mov	r0, r1
   18226:	e7ea      	b.n	181fe <onoff_request+0x64>
		rv = -EAGAIN;
   18228:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1822c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1822e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   18230:	4608      	mov	r0, r1
   18232:	e7e4      	b.n	181fe <onoff_request+0x64>
   18234:	6067      	str	r7, [r4, #4]
	list->head = node;
   18236:	6027      	str	r7, [r4, #0]
}
   18238:	e7e8      	b.n	1820c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1823a:	2102      	movs	r1, #2
   1823c:	4620      	mov	r0, r4
   1823e:	f7ea f8d1 	bl	23e4 <process_event>
   18242:	e7e9      	b.n	18218 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   18244:	2300      	movs	r3, #0
   18246:	462a      	mov	r2, r5
   18248:	4639      	mov	r1, r7
   1824a:	4620      	mov	r0, r4
   1824c:	f7ff ff50 	bl	180f0 <notify_one>
   18250:	e7e2      	b.n	18218 <onoff_request+0x7e>

00018252 <onoff_sync_lock>:
	__asm__ volatile(
   18252:	f04f 0220 	mov.w	r2, #32
   18256:	f3ef 8311 	mrs	r3, BASEPRI
   1825a:	f382 8812 	msr	BASEPRI_MAX, r2
   1825e:	f3bf 8f6f 	isb	sy
}

int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
   18262:	600b      	str	r3, [r1, #0]
	return srv->count;
}
   18264:	6800      	ldr	r0, [r0, #0]
   18266:	4770      	bx	lr

00018268 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   18268:	b510      	push	{r4, lr}
   1826a:	468c      	mov	ip, r1
   1826c:	4611      	mov	r1, r2
   1826e:	f89d 4008 	ldrb.w	r4, [sp, #8]

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   18272:	6802      	ldr	r2, [r0, #0]
   18274:	2a00      	cmp	r2, #0
   18276:	db07      	blt.n	18288 <onoff_sync_finalize+0x20>
		srv->count = 0;
	}
	if (res < 0) {
   18278:	2b00      	cmp	r3, #0
   1827a:	db08      	blt.n	1828e <onoff_sync_finalize+0x26>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
	} else if (on) {
   1827c:	b1a4      	cbz	r4, 182a8 <onoff_sync_finalize+0x40>
		srv->count += 1;
   1827e:	6802      	ldr	r2, [r0, #0]
   18280:	3201      	adds	r2, #1
   18282:	6002      	str	r2, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   18284:	2202      	movs	r2, #2
   18286:	e004      	b.n	18292 <onoff_sync_finalize+0x2a>
		srv->count = 0;
   18288:	2200      	movs	r2, #0
   1828a:	6002      	str	r2, [r0, #0]
   1828c:	e7f4      	b.n	18278 <onoff_sync_finalize+0x10>
		srv->count = res;
   1828e:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   18290:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   18292:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   18294:	f38c 8811 	msr	BASEPRI, ip
   18298:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   1829c:	b111      	cbz	r1, 182a4 <onoff_sync_finalize+0x3c>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   1829e:	2000      	movs	r0, #0
   182a0:	f7ff ff26 	bl	180f0 <notify_one>
	}

	return rv;
}
   182a4:	4620      	mov	r0, r4
   182a6:	bd10      	pop	{r4, pc}
		srv->count -= 1;
   182a8:	6802      	ldr	r2, [r0, #0]
   182aa:	3a01      	subs	r2, #1
   182ac:	6002      	str	r2, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   182ae:	2202      	movs	r2, #2
   182b0:	e7ef      	b.n	18292 <onoff_sync_finalize+0x2a>

000182b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   182b2:	b508      	push	{r3, lr}
   182b4:	4604      	mov	r4, r0
   182b6:	4608      	mov	r0, r1
   182b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   182ba:	461a      	mov	r2, r3
   182bc:	47a0      	blx	r4
	return z_impl_z_current_get();
   182be:	f7fe fe6d 	bl	16f9c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   182c2:	f7ee fa05 	bl	66d0 <z_impl_k_thread_abort>

000182c6 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   182c6:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   182c8:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   182ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   182ce:	d303      	bcc.n	182d8 <chunk_mem+0x12>
   182d0:	2308      	movs	r3, #8
   182d2:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   182d4:	4408      	add	r0, r1
   182d6:	4770      	bx	lr
   182d8:	2304      	movs	r3, #4
   182da:	e7fa      	b.n	182d2 <chunk_mem+0xc>

000182dc <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   182dc:	b410      	push	{r4}
	void *cmem = &buf[c];
   182de:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   182e2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   182e4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   182e8:	d319      	bcc.n	1831e <free_list_remove_bidx+0x42>
		return ((uint32_t *)cmem)[f];
   182ea:	f8dc 300c 	ldr.w	r3, [ip, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   182ee:	4299      	cmp	r1, r3
   182f0:	d018      	beq.n	18324 <free_list_remove_bidx+0x48>
	if (big_heap(h)) {
   182f2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   182f6:	d322      	bcc.n	1833e <free_list_remove_bidx+0x62>
		return ((uint32_t *)cmem)[f];
   182f8:	f8dc 1008 	ldr.w	r1, [ip, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   182fc:	3204      	adds	r2, #4
   182fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   18302:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   18306:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1830a:	d31b      	bcc.n	18344 <free_list_remove_bidx+0x68>
		((uint32_t *)cmem)[f] = val;
   1830c:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   1830e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   18312:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   18314:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   18318:	d316      	bcc.n	18348 <free_list_remove_bidx+0x6c>
		((uint32_t *)cmem)[f] = val;
   1831a:	6099      	str	r1, [r3, #8]
   1831c:	e00d      	b.n	1833a <free_list_remove_bidx+0x5e>
		return ((uint16_t *)cmem)[f];
   1831e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
   18322:	e7e4      	b.n	182ee <free_list_remove_bidx+0x12>
		h->avail_buckets &= ~BIT(bidx);
   18324:	2301      	movs	r3, #1
   18326:	fa03 f102 	lsl.w	r1, r3, r2
   1832a:	68c3      	ldr	r3, [r0, #12]
   1832c:	ea23 0301 	bic.w	r3, r3, r1
   18330:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   18332:	3204      	adds	r2, #4
   18334:	2300      	movs	r3, #0
   18336:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1833a:	bc10      	pop	{r4}
   1833c:	4770      	bx	lr
   1833e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
   18342:	e7db      	b.n	182fc <free_list_remove_bidx+0x20>
		((uint16_t *)cmem)[f] = val;
   18344:	80d3      	strh	r3, [r2, #6]
   18346:	e7e2      	b.n	1830e <free_list_remove_bidx+0x32>
   18348:	8099      	strh	r1, [r3, #4]
   1834a:	e7f6      	b.n	1833a <free_list_remove_bidx+0x5e>

0001834c <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1834c:	1d13      	adds	r3, r2, #4
   1834e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   18352:	b9d3      	cbnz	r3, 1838a <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   18354:	2301      	movs	r3, #1
   18356:	fa03 fc02 	lsl.w	ip, r3, r2
   1835a:	68c3      	ldr	r3, [r0, #12]
   1835c:	ea43 030c 	orr.w	r3, r3, ip
   18360:	60c3      	str	r3, [r0, #12]
		b->next = c;
   18362:	3204      	adds	r2, #4
   18364:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   18368:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1836c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1836e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   18372:	d306      	bcc.n	18382 <free_list_add_bidx+0x36>
		((uint32_t *)cmem)[f] = val;
   18374:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   18376:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   18378:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1837c:	d303      	bcc.n	18386 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
   1837e:	60d9      	str	r1, [r3, #12]
   18380:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   18382:	8099      	strh	r1, [r3, #4]
   18384:	e7f7      	b.n	18376 <free_list_add_bidx+0x2a>
   18386:	80d9      	strh	r1, [r3, #6]
   18388:	4770      	bx	lr
{
   1838a:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
   1838c:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   18390:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   18392:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   18396:	d31c      	bcc.n	183d2 <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
   18398:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
   1839c:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
   183a0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   183a4:	d318      	bcc.n	183d8 <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
   183a6:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
   183aa:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   183ac:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   183b0:	d315      	bcc.n	183de <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
   183b2:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
   183b6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   183ba:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   183bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   183c0:	d310      	bcc.n	183e4 <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
   183c2:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   183c4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   183c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   183ca:	d30d      	bcc.n	183e8 <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
   183cc:	f8cc 1008 	str.w	r1, [ip, #8]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   183d0:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
   183d2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
   183d6:	e7e1      	b.n	1839c <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
   183d8:	f8ae 2004 	strh.w	r2, [lr, #4]
   183dc:	e7e5      	b.n	183aa <free_list_add_bidx+0x5e>
   183de:	f8ae 3006 	strh.w	r3, [lr, #6]
   183e2:	e7e8      	b.n	183b6 <free_list_add_bidx+0x6a>
   183e4:	80d1      	strh	r1, [r2, #6]
   183e6:	e7ed      	b.n	183c4 <free_list_add_bidx+0x78>
   183e8:	f8ac 1004 	strh.w	r1, [ip, #4]
   183ec:	e7f0      	b.n	183d0 <free_list_add_bidx+0x84>

000183ee <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   183ee:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   183f0:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   183f4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   183f6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   183fa:	d329      	bcc.n	18450 <split_chunks+0x62>
		return ((uint32_t *)cmem)[f];
   183fc:	f8dc 5004 	ldr.w	r5, [ip, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   18400:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   18402:	1a89      	subs	r1, r1, r2
   18404:	eb01 0155 	add.w	r1, r1, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18408:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
   1840a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1840e:	d322      	bcc.n	18456 <split_chunks+0x68>
		((uint32_t *)cmem)[f] = val;
   18410:	f8cc 5004 	str.w	r5, [ip, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18414:	004c      	lsls	r4, r1, #1
	void *cmem = &buf[c];
   18416:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
   1841a:	6885      	ldr	r5, [r0, #8]
   1841c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18420:	d31c      	bcc.n	1845c <split_chunks+0x6e>
		((uint32_t *)cmem)[f] = val;
   18422:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
   18426:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   18428:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1842c:	d319      	bcc.n	18462 <split_chunks+0x74>
		((uint32_t *)cmem)[f] = val;
   1842e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   18432:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   18434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18438:	d316      	bcc.n	18468 <split_chunks+0x7a>
		return ((uint32_t *)cmem)[f];
   1843a:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
   1843e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   18442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18446:	d312      	bcc.n	1846e <split_chunks+0x80>
		((uint32_t *)cmem)[f] = val;
   18448:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1844c:	bc30      	pop	{r4, r5}
   1844e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   18450:	f8bc 5002 	ldrh.w	r5, [ip, #2]
   18454:	e7d4      	b.n	18400 <split_chunks+0x12>
		((uint16_t *)cmem)[f] = val;
   18456:	f8ac 5002 	strh.w	r5, [ip, #2]
   1845a:	e7db      	b.n	18414 <split_chunks+0x26>
   1845c:	f8ac 4002 	strh.w	r4, [ip, #2]
   18460:	e7e1      	b.n	18426 <split_chunks+0x38>
   18462:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   18466:	e7e4      	b.n	18432 <split_chunks+0x44>
		return ((uint16_t *)cmem)[f];
   18468:	f8bc 4002 	ldrh.w	r4, [ip, #2]
   1846c:	e7e7      	b.n	1843e <split_chunks+0x50>
		((uint16_t *)cmem)[f] = val;
   1846e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   18472:	e7eb      	b.n	1844c <split_chunks+0x5e>

00018474 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   18474:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   18476:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1847a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1847c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   18480:	d31e      	bcc.n	184c0 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   18482:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   18484:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   18486:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
   1848a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1848e:	d319      	bcc.n	184c4 <merge_chunks+0x50>
		return ((uint32_t *)cmem)[f];
   18490:	f8dc 5004 	ldr.w	r5, [ip, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   18494:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18498:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
   1849a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1849e:	d314      	bcc.n	184ca <merge_chunks+0x56>
		((uint32_t *)cmem)[f] = val;
   184a0:	604d      	str	r5, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   184a2:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   184a4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   184a8:	d311      	bcc.n	184ce <merge_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   184aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
   184ae:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   184b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   184b6:	d30d      	bcc.n	184d4 <merge_chunks+0x60>
		((uint32_t *)cmem)[f] = val;
   184b8:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   184bc:	bc30      	pop	{r4, r5}
   184be:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   184c0:	884b      	ldrh	r3, [r1, #2]
   184c2:	e7df      	b.n	18484 <merge_chunks+0x10>
   184c4:	f8bc 5002 	ldrh.w	r5, [ip, #2]
   184c8:	e7e4      	b.n	18494 <merge_chunks+0x20>
		((uint16_t *)cmem)[f] = val;
   184ca:	804d      	strh	r5, [r1, #2]
   184cc:	e7e9      	b.n	184a2 <merge_chunks+0x2e>
		return ((uint16_t *)cmem)[f];
   184ce:	f8bc 4002 	ldrh.w	r4, [ip, #2]
   184d2:	e7ec      	b.n	184ae <merge_chunks+0x3a>
		((uint16_t *)cmem)[f] = val;
   184d4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   184d8:	e7f0      	b.n	184bc <merge_chunks+0x48>

000184da <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   184da:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   184dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   184e0:	d304      	bcc.n	184ec <mem_to_chunkid+0x12>
   184e2:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   184e4:	1ac9      	subs	r1, r1, r3
   184e6:	1a08      	subs	r0, r1, r0
}
   184e8:	08c0      	lsrs	r0, r0, #3
   184ea:	4770      	bx	lr
   184ec:	2304      	movs	r3, #4
   184ee:	e7f9      	b.n	184e4 <mem_to_chunkid+0xa>

000184f0 <free_list_remove>:
{
   184f0:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   184f2:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   184f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   184f8:	d307      	bcc.n	1850a <free_list_remove+0x1a>
	void *cmem = &buf[c];
   184fa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   184fe:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   18500:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   18502:	2a01      	cmp	r2, #1
   18504:	d002      	beq.n	1850c <free_list_remove+0x1c>
   18506:	2200      	movs	r2, #0
   18508:	e000      	b.n	1850c <free_list_remove+0x1c>
   1850a:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1850c:	b9a2      	cbnz	r2, 18538 <free_list_remove+0x48>
	void *cmem = &buf[c];
   1850e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   18512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18516:	d310      	bcc.n	1853a <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   18518:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1851a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1851c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18520:	d30d      	bcc.n	1853e <free_list_remove+0x4e>
   18522:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18524:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   18526:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1852a:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1852c:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   18530:	f1c2 021f 	rsb	r2, r2, #31
   18534:	f7ff fed2 	bl	182dc <free_list_remove_bidx>
}
   18538:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   1853a:	8852      	ldrh	r2, [r2, #2]
   1853c:	e7ed      	b.n	1851a <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   1853e:	2304      	movs	r3, #4
   18540:	e7f0      	b.n	18524 <free_list_remove+0x34>

00018542 <free_list_add>:
{
   18542:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   18544:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   18546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1854a:	d307      	bcc.n	1855c <free_list_add+0x1a>
	void *cmem = &buf[c];
   1854c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   18550:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   18552:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   18554:	2a01      	cmp	r2, #1
   18556:	d002      	beq.n	1855e <free_list_add+0x1c>
   18558:	2200      	movs	r2, #0
   1855a:	e000      	b.n	1855e <free_list_add+0x1c>
   1855c:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1855e:	b9a2      	cbnz	r2, 1858a <free_list_add+0x48>
	void *cmem = &buf[c];
   18560:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   18564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18568:	d310      	bcc.n	1858c <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   1856a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1856c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1856e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18572:	d30d      	bcc.n	18590 <free_list_add+0x4e>
   18574:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18576:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   18578:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1857c:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1857e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   18582:	f1c2 021f 	rsb	r2, r2, #31
   18586:	f7ff fee1 	bl	1834c <free_list_add_bidx>
}
   1858a:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   1858c:	8852      	ldrh	r2, [r2, #2]
   1858e:	e7ed      	b.n	1856c <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   18590:	2304      	movs	r3, #4
   18592:	e7f0      	b.n	18576 <free_list_add+0x34>

00018594 <free_chunk>:
{
   18594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18596:	4604      	mov	r4, r0
   18598:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   1859a:	00ce      	lsls	r6, r1, #3
   1859c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   185a0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   185a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   185a6:	d31f      	bcc.n	185e8 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   185a8:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   185aa:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   185ae:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   185b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   185b6:	d319      	bcc.n	185ec <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   185b8:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   185ba:	f013 0f01 	tst.w	r3, #1
   185be:	d017      	beq.n	185f0 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   185c0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   185c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   185c6:	d324      	bcc.n	18612 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   185c8:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   185ca:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   185cc:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   185d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   185d4:	d31f      	bcc.n	18616 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   185d6:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   185d8:	f013 0f01 	tst.w	r3, #1
   185dc:	d01d      	beq.n	1861a <free_chunk+0x86>
	free_list_add(h, c);
   185de:	4629      	mov	r1, r5
   185e0:	4620      	mov	r0, r4
   185e2:	f7ff ffae 	bl	18542 <free_list_add>
}
   185e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   185e8:	8879      	ldrh	r1, [r7, #2]
   185ea:	e7de      	b.n	185aa <free_chunk+0x16>
   185ec:	8853      	ldrh	r3, [r2, #2]
   185ee:	e7e4      	b.n	185ba <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   185f0:	4620      	mov	r0, r4
   185f2:	f7ff ff7d 	bl	184f0 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   185f6:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   185f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   185fc:	d307      	bcc.n	1860e <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   185fe:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   18600:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   18604:	4629      	mov	r1, r5
   18606:	4620      	mov	r0, r4
   18608:	f7ff ff34 	bl	18474 <merge_chunks>
   1860c:	e7d8      	b.n	185c0 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   1860e:	887a      	ldrh	r2, [r7, #2]
   18610:	e7f6      	b.n	18600 <free_chunk+0x6c>
   18612:	5ba1      	ldrh	r1, [r4, r6]
   18614:	e7d9      	b.n	185ca <free_chunk+0x36>
   18616:	8853      	ldrh	r3, [r2, #2]
   18618:	e7de      	b.n	185d8 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   1861a:	4620      	mov	r0, r4
   1861c:	f7ff ff68 	bl	184f0 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   18620:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   18622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18626:	d30c      	bcc.n	18642 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   18628:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1862a:	462a      	mov	r2, r5
   1862c:	1a69      	subs	r1, r5, r1
   1862e:	4620      	mov	r0, r4
   18630:	f7ff ff20 	bl	18474 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   18634:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   18636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1863a:	d304      	bcc.n	18646 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   1863c:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1863e:	1aed      	subs	r5, r5, r3
   18640:	e7cd      	b.n	185de <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   18642:	5ba1      	ldrh	r1, [r4, r6]
   18644:	e7f1      	b.n	1862a <free_chunk+0x96>
   18646:	5ba3      	ldrh	r3, [r4, r6]
   18648:	e7f9      	b.n	1863e <free_chunk+0xaa>

0001864a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1864a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   1864c:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   1864e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18652:	d310      	bcc.n	18676 <alloc_chunk+0x2c>
   18654:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18656:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   18658:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   1865c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1865e:	fab3 f383 	clz	r3, r3
   18662:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   18666:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   1866a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
   1866e:	b346      	cbz	r6, 186c2 <alloc_chunk+0x78>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   18670:	f04f 0c03 	mov.w	ip, #3
   18674:	e012      	b.n	1869c <alloc_chunk+0x52>
	return big_heap(h) ? 8 : 4;
   18676:	2304      	movs	r3, #4
   18678:	e7ed      	b.n	18656 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   1867a:	f8be 7002 	ldrh.w	r7, [lr, #2]
   1867e:	e017      	b.n	186b0 <alloc_chunk+0x66>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   18680:	4621      	mov	r1, r4
   18682:	f7ff fe2b 	bl	182dc <free_list_remove_bidx>
				return c;
   18686:	e024      	b.n	186d2 <alloc_chunk+0x88>
   18688:	f8be 4006 	ldrh.w	r4, [lr, #6]
			}
			b->next = next_free_chunk(h, c);
   1868c:	1d17      	adds	r7, r2, #4
   1868e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   18692:	f1bc 0c01 	subs.w	ip, ip, #1
   18696:	d014      	beq.n	186c2 <alloc_chunk+0x78>
   18698:	42a6      	cmp	r6, r4
   1869a:	d012      	beq.n	186c2 <alloc_chunk+0x78>
			chunkid_t c = b->next;
   1869c:	1d14      	adds	r4, r2, #4
   1869e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   186a2:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
	if (big_heap(h)) {
   186a6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   186aa:	d3e6      	bcc.n	1867a <alloc_chunk+0x30>
		return ((uint32_t *)cmem)[f];
   186ac:	f8de 7004 	ldr.w	r7, [lr, #4]
			if (chunk_size(h, c) >= sz) {
   186b0:	ebb1 0f57 	cmp.w	r1, r7, lsr #1
   186b4:	d9e4      	bls.n	18680 <alloc_chunk+0x36>
	if (big_heap(h)) {
   186b6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   186ba:	d3e5      	bcc.n	18688 <alloc_chunk+0x3e>
		return ((uint32_t *)cmem)[f];
   186bc:	f8de 400c 	ldr.w	r4, [lr, #12]
   186c0:	e7e4      	b.n	1868c <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   186c2:	68c4      	ldr	r4, [r0, #12]
   186c4:	f1c3 0220 	rsb	r2, r3, #32
   186c8:	2301      	movs	r3, #1
   186ca:	4093      	lsls	r3, r2
   186cc:	425b      	negs	r3, r3

	if (bmask != 0U) {
   186ce:	401c      	ands	r4, r3
   186d0:	d101      	bne.n	186d6 <alloc_chunk+0x8c>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   186d2:	4620      	mov	r0, r4
   186d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   186d6:	fa94 f2a4 	rbit	r2, r4
   186da:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   186de:	1d13      	adds	r3, r2, #4
   186e0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   186e4:	4621      	mov	r1, r4
   186e6:	f7ff fdf9 	bl	182dc <free_list_remove_bidx>
		return c;
   186ea:	e7f2      	b.n	186d2 <alloc_chunk+0x88>

000186ec <sys_heap_free>:
	if (mem == NULL) {
   186ec:	b1c1      	cbz	r1, 18720 <sys_heap_free+0x34>
{
   186ee:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   186f0:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   186f2:	4620      	mov	r0, r4
   186f4:	f7ff fef1 	bl	184da <mem_to_chunkid>
   186f8:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   186fa:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   186fe:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   18700:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   18704:	d307      	bcc.n	18716 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18706:	685a      	ldr	r2, [r3, #4]
   18708:	f022 0201 	bic.w	r2, r2, #1
   1870c:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   1870e:	4620      	mov	r0, r4
   18710:	f7ff ff40 	bl	18594 <free_chunk>
}
   18714:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18716:	885a      	ldrh	r2, [r3, #2]
   18718:	f022 0201 	bic.w	r2, r2, #1
   1871c:	805a      	strh	r2, [r3, #2]
   1871e:	e7f6      	b.n	1870e <sys_heap_free+0x22>
   18720:	4770      	bx	lr

00018722 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   18722:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   18724:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   18726:	2900      	cmp	r1, #0
   18728:	d03e      	beq.n	187a8 <sys_heap_alloc+0x86>
   1872a:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1872c:	68aa      	ldr	r2, [r5, #8]
   1872e:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   18732:	d93b      	bls.n	187ac <sys_heap_alloc+0x8a>
	return big_heap(h) ? 8 : 4;
   18734:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   18738:	d322      	bcc.n	18780 <sys_heap_alloc+0x5e>
   1873a:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1873c:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1873e:	3407      	adds	r4, #7
   18740:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   18742:	4621      	mov	r1, r4
   18744:	4628      	mov	r0, r5
   18746:	f7ff ff80 	bl	1864a <alloc_chunk>
	if (c == 0U) {
   1874a:	4606      	mov	r6, r0
   1874c:	b380      	cbz	r0, 187b0 <sys_heap_alloc+0x8e>
	void *cmem = &buf[c];
   1874e:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   18752:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
   18754:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   18758:	d314      	bcc.n	18784 <sys_heap_alloc+0x62>
		return ((uint32_t *)cmem)[f];
   1875a:	685b      	ldr	r3, [r3, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1875c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   18760:	d312      	bcc.n	18788 <sys_heap_alloc+0x66>
	void *cmem = &buf[c];
   18762:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
	return big_heap_chunks(h->end_chunk);
   18766:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
   18768:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1876c:	d317      	bcc.n	1879e <sys_heap_alloc+0x7c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1876e:	685a      	ldr	r2, [r3, #4]
   18770:	f042 0201 	orr.w	r2, r2, #1
   18774:	605a      	str	r2, [r3, #4]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   18776:	4631      	mov	r1, r6
   18778:	4628      	mov	r0, r5
   1877a:	f7ff fda4 	bl	182c6 <chunk_mem>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1877e:	bd70      	pop	{r4, r5, r6, pc}
	return big_heap(h) ? 8 : 4;
   18780:	2404      	movs	r4, #4
   18782:	e7db      	b.n	1873c <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   18784:	885b      	ldrh	r3, [r3, #2]
   18786:	e7e9      	b.n	1875c <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   18788:	4434      	add	r4, r6
   1878a:	4622      	mov	r2, r4
   1878c:	4631      	mov	r1, r6
   1878e:	4628      	mov	r0, r5
   18790:	f7ff fe2d 	bl	183ee <split_chunks>
		free_list_add(h, c + chunk_sz);
   18794:	4621      	mov	r1, r4
   18796:	4628      	mov	r0, r5
   18798:	f7ff fed3 	bl	18542 <free_list_add>
   1879c:	e7e1      	b.n	18762 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1879e:	885a      	ldrh	r2, [r3, #2]
   187a0:	f042 0201 	orr.w	r2, r2, #1
   187a4:	805a      	strh	r2, [r3, #2]
   187a6:	e7e6      	b.n	18776 <sys_heap_alloc+0x54>
		return NULL;
   187a8:	2000      	movs	r0, #0
   187aa:	e7e8      	b.n	1877e <sys_heap_alloc+0x5c>
   187ac:	2000      	movs	r0, #0
   187ae:	e7e6      	b.n	1877e <sys_heap_alloc+0x5c>
		return NULL;
   187b0:	2000      	movs	r0, #0
   187b2:	e7e4      	b.n	1877e <sys_heap_alloc+0x5c>

000187b4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   187b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187b8:	460d      	mov	r5, r1
   187ba:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   187bc:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   187be:	424b      	negs	r3, r1
   187c0:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   187c4:	ea31 0303 	bics.w	r3, r1, r3
   187c8:	d052      	beq.n	18870 <sys_heap_aligned_alloc+0xbc>
		align -= rew;
   187ca:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   187ce:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   187d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   187d4:	d34a      	bcc.n	1886c <sys_heap_aligned_alloc+0xb8>
   187d6:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   187d8:	4598      	cmp	r8, r3
   187da:	d200      	bcs.n	187de <sys_heap_aligned_alloc+0x2a>
   187dc:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   187de:	2c00      	cmp	r4, #0
   187e0:	d076      	beq.n	188d0 <sys_heap_aligned_alloc+0x11c>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   187e2:	68b2      	ldr	r2, [r6, #8]
   187e4:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   187e8:	d974      	bls.n	188d4 <sys_heap_aligned_alloc+0x120>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   187ea:	1929      	adds	r1, r5, r4
   187ec:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   187ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   187f2:	d34e      	bcc.n	18892 <sys_heap_aligned_alloc+0xde>
   187f4:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   187f6:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   187f8:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   187fa:	08c9      	lsrs	r1, r1, #3
   187fc:	4630      	mov	r0, r6
   187fe:	f7ff ff24 	bl	1864a <alloc_chunk>

	if (c0 == 0) {
   18802:	4607      	mov	r7, r0
   18804:	2800      	cmp	r0, #0
   18806:	d067      	beq.n	188d8 <sys_heap_aligned_alloc+0x124>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   18808:	4601      	mov	r1, r0
   1880a:	4630      	mov	r0, r6
   1880c:	f7ff fd5b 	bl	182c6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   18810:	4440      	add	r0, r8
   18812:	4428      	add	r0, r5
   18814:	3801      	subs	r0, #1
   18816:	426d      	negs	r5, r5
   18818:	4005      	ands	r5, r0
   1881a:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1881e:	442c      	add	r4, r5
   18820:	3407      	adds	r4, #7
   18822:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   18826:	4629      	mov	r1, r5
   18828:	4630      	mov	r0, r6
   1882a:	f7ff fe56 	bl	184da <mem_to_chunkid>
   1882e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   18830:	1ba4      	subs	r4, r4, r6
   18832:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   18834:	4287      	cmp	r7, r0
   18836:	d32e      	bcc.n	18896 <sys_heap_aligned_alloc+0xe2>
	void *cmem = &buf[c];
   18838:	eb06 02c8 	add.w	r2, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   1883c:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1883e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18842:	d332      	bcc.n	188aa <sys_heap_aligned_alloc+0xf6>
		return ((uint32_t *)cmem)[f];
   18844:	6853      	ldr	r3, [r2, #4]
	return c + chunk_size(h, c);
   18846:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1884a:	429c      	cmp	r4, r3
   1884c:	d32f      	bcc.n	188ae <sys_heap_aligned_alloc+0xfa>
	void *cmem = &buf[c];
   1884e:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   18852:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   18854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18858:	d333      	bcc.n	188c2 <sys_heap_aligned_alloc+0x10e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1885a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1885e:	f043 0301 	orr.w	r3, r3, #1
   18862:	f8c8 3004 	str.w	r3, [r8, #4]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   18866:	4628      	mov	r0, r5
   18868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   1886c:	2304      	movs	r3, #4
   1886e:	e7b3      	b.n	187d8 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   18870:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   18872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18876:	d305      	bcc.n	18884 <sys_heap_aligned_alloc+0xd0>
   18878:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   1887a:	429d      	cmp	r5, r3
   1887c:	d904      	bls.n	18888 <sys_heap_aligned_alloc+0xd4>
		rew = 0;
   1887e:	f04f 0800 	mov.w	r8, #0
   18882:	e7ac      	b.n	187de <sys_heap_aligned_alloc+0x2a>
   18884:	2304      	movs	r3, #4
   18886:	e7f8      	b.n	1887a <sys_heap_aligned_alloc+0xc6>
			return sys_heap_alloc(heap, bytes);
   18888:	4621      	mov	r1, r4
   1888a:	f7ff ff4a 	bl	18722 <sys_heap_alloc>
   1888e:	4605      	mov	r5, r0
   18890:	e7e9      	b.n	18866 <sys_heap_aligned_alloc+0xb2>
   18892:	2304      	movs	r3, #4
   18894:	e7af      	b.n	187f6 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   18896:	4602      	mov	r2, r0
   18898:	4639      	mov	r1, r7
   1889a:	4630      	mov	r0, r6
   1889c:	f7ff fda7 	bl	183ee <split_chunks>
		free_list_add(h, c0);
   188a0:	4639      	mov	r1, r7
   188a2:	4630      	mov	r0, r6
   188a4:	f7ff fe4d 	bl	18542 <free_list_add>
   188a8:	e7c6      	b.n	18838 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   188aa:	8853      	ldrh	r3, [r2, #2]
   188ac:	e7cb      	b.n	18846 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   188ae:	4622      	mov	r2, r4
   188b0:	4641      	mov	r1, r8
   188b2:	4630      	mov	r0, r6
   188b4:	f7ff fd9b 	bl	183ee <split_chunks>
		free_list_add(h, c_end);
   188b8:	4621      	mov	r1, r4
   188ba:	4630      	mov	r0, r6
   188bc:	f7ff fe41 	bl	18542 <free_list_add>
   188c0:	e7c5      	b.n	1884e <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   188c2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   188c6:	f043 0301 	orr.w	r3, r3, #1
   188ca:	f8a8 3002 	strh.w	r3, [r8, #2]
}
   188ce:	e7ca      	b.n	18866 <sys_heap_aligned_alloc+0xb2>
		return NULL;
   188d0:	2500      	movs	r5, #0
   188d2:	e7c8      	b.n	18866 <sys_heap_aligned_alloc+0xb2>
   188d4:	2500      	movs	r5, #0
   188d6:	e7c6      	b.n	18866 <sys_heap_aligned_alloc+0xb2>
		return NULL;
   188d8:	2500      	movs	r5, #0
   188da:	e7c4      	b.n	18866 <sys_heap_aligned_alloc+0xb2>

000188dc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   188dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188de:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   188e0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   188e4:	d324      	bcc.n	18930 <sys_heap_init+0x54>
   188e6:	f04f 0c08 	mov.w	ip, #8
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   188ea:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   188ee:	1dc8      	adds	r0, r1, #7
   188f0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   188f4:	448c      	add	ip, r1
   188f6:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   188fa:	ebac 0c00 	sub.w	ip, ip, r0
   188fe:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   18902:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   18904:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   18906:	2300      	movs	r3, #0
   18908:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   1890a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1890e:	d312      	bcc.n	18936 <sys_heap_init+0x5a>
   18910:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18912:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   18914:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
   18918:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1891a:	fab3 f383 	clz	r3, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1891e:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   18922:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   18926:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   18928:	1dde      	adds	r6, r3, #7
   1892a:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1892c:	2300      	movs	r3, #0
   1892e:	e009      	b.n	18944 <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
   18930:	f04f 0c04 	mov.w	ip, #4
   18934:	e7d9      	b.n	188ea <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
   18936:	2304      	movs	r3, #4
   18938:	e7eb      	b.n	18912 <sys_heap_init+0x36>
		h->buckets[i].next = 0;
   1893a:	1d1a      	adds	r2, r3, #4
   1893c:	2400      	movs	r4, #0
   1893e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   18942:	3301      	adds	r3, #1
   18944:	4573      	cmp	r3, lr
   18946:	dbf8      	blt.n	1893a <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18948:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1894a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1894e:	d336      	bcc.n	189be <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
   18950:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   18952:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18956:	d334      	bcc.n	189c2 <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
   18958:	2300      	movs	r3, #0
   1895a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1895c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18960:	d332      	bcc.n	189c8 <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   18962:	6843      	ldr	r3, [r0, #4]
   18964:	f043 0301 	orr.w	r3, r3, #1
   18968:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1896a:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1896c:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
   1896e:	f026 0307 	bic.w	r3, r6, #7
   18972:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   18974:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   18978:	d32b      	bcc.n	189d2 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
   1897a:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1897c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1897e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   18982:	d328      	bcc.n	189d6 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   18984:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   18986:	f02c 0307 	bic.w	r3, ip, #7
   1898a:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
   1898c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1898e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   18992:	d322      	bcc.n	189da <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
   18994:	2400      	movs	r4, #0
   18996:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
   1899a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1899c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   189a0:	d31f      	bcc.n	189e2 <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
   189a2:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
   189a4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
   189a8:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   189aa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   189ae:	d31a      	bcc.n	189e6 <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   189b0:	685a      	ldr	r2, [r3, #4]
   189b2:	f042 0201 	orr.w	r2, r2, #1
   189b6:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   189b8:	f7ff fdc3 	bl	18542 <free_list_add>
}
   189bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   189be:	8043      	strh	r3, [r0, #2]
   189c0:	e7c7      	b.n	18952 <sys_heap_init+0x76>
   189c2:	2300      	movs	r3, #0
   189c4:	8003      	strh	r3, [r0, #0]
   189c6:	e7c9      	b.n	1895c <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   189c8:	8843      	ldrh	r3, [r0, #2]
   189ca:	f043 0301 	orr.w	r3, r3, #1
   189ce:	8043      	strh	r3, [r0, #2]
   189d0:	e7cb      	b.n	1896a <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
   189d2:	8067      	strh	r7, [r4, #2]
   189d4:	e7d2      	b.n	1897c <sys_heap_init+0xa0>
   189d6:	52c1      	strh	r1, [r0, r3]
   189d8:	e7d5      	b.n	18986 <sys_heap_init+0xaa>
   189da:	2400      	movs	r4, #0
   189dc:	f8ac 4002 	strh.w	r4, [ip, #2]
   189e0:	e7db      	b.n	1899a <sys_heap_init+0xbe>
   189e2:	52c2      	strh	r2, [r0, r3]
   189e4:	e7de      	b.n	189a4 <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   189e6:	885a      	ldrh	r2, [r3, #2]
   189e8:	f042 0201 	orr.w	r2, r2, #1
   189ec:	805a      	strh	r2, [r3, #2]
   189ee:	e7e3      	b.n	189b8 <sys_heap_init+0xdc>

000189f0 <extract_decimal>:
{
   189f0:	4684      	mov	ip, r0
	const char *sp = *str;
   189f2:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   189f4:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   189f6:	e005      	b.n	18a04 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
   189f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   189fc:	3201      	adds	r2, #1
   189fe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   18a02:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   18a04:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   18a06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   18a0a:	2909      	cmp	r1, #9
   18a0c:	d9f4      	bls.n	189f8 <extract_decimal+0x8>
	*str = sp;
   18a0e:	f8cc 2000 	str.w	r2, [ip]
}
   18a12:	4770      	bx	lr

00018a14 <encode_uint>:
{
   18a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a18:	b083      	sub	sp, #12
   18a1a:	4604      	mov	r4, r0
   18a1c:	460d      	mov	r5, r1
   18a1e:	9201      	str	r2, [sp, #4]
   18a20:	469a      	mov	sl, r3
   18a22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   18a24:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   18a26:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   18a2a:	2b6f      	cmp	r3, #111	; 0x6f
   18a2c:	d00f      	beq.n	18a4e <encode_uint+0x3a>
   18a2e:	d906      	bls.n	18a3e <encode_uint+0x2a>
   18a30:	2b70      	cmp	r3, #112	; 0x70
   18a32:	d00f      	beq.n	18a54 <encode_uint+0x40>
   18a34:	2b78      	cmp	r3, #120	; 0x78
   18a36:	d110      	bne.n	18a5a <encode_uint+0x46>
		return 16;
   18a38:	f04f 0910 	mov.w	r9, #16
   18a3c:	e026      	b.n	18a8c <encode_uint+0x78>
	switch (specifier) {
   18a3e:	2b58      	cmp	r3, #88	; 0x58
   18a40:	d002      	beq.n	18a48 <encode_uint+0x34>
   18a42:	f04f 090a 	mov.w	r9, #10
   18a46:	e021      	b.n	18a8c <encode_uint+0x78>
		return 16;
   18a48:	f04f 0910 	mov.w	r9, #16
   18a4c:	e01e      	b.n	18a8c <encode_uint+0x78>
		return 8;
   18a4e:	f04f 0908 	mov.w	r9, #8
   18a52:	e01b      	b.n	18a8c <encode_uint+0x78>
		return 16;
   18a54:	f04f 0910 	mov.w	r9, #16
   18a58:	e018      	b.n	18a8c <encode_uint+0x78>
	switch (specifier) {
   18a5a:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   18a5e:	e015      	b.n	18a8c <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18a60:	f1bb 0f19 	cmp.w	fp, #25
   18a64:	d821      	bhi.n	18aaa <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   18a66:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18a68:	3237      	adds	r2, #55	; 0x37
   18a6a:	b2d2      	uxtb	r2, r2
   18a6c:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
   18a70:	463a      	mov	r2, r7
   18a72:	4643      	mov	r3, r8
   18a74:	4620      	mov	r0, r4
   18a76:	4629      	mov	r1, r5
   18a78:	f7e7 fe3c 	bl	6f4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   18a7c:	42bc      	cmp	r4, r7
   18a7e:	f175 0300 	sbcs.w	r3, r5, #0
   18a82:	d316      	bcc.n	18ab2 <encode_uint+0x9e>
   18a84:	4556      	cmp	r6, sl
   18a86:	d914      	bls.n	18ab2 <encode_uint+0x9e>
		value /= radix;
   18a88:	4604      	mov	r4, r0
   18a8a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   18a8c:	f04f 0800 	mov.w	r8, #0
   18a90:	464f      	mov	r7, r9
   18a92:	464a      	mov	r2, r9
   18a94:	4643      	mov	r3, r8
   18a96:	4620      	mov	r0, r4
   18a98:	4629      	mov	r1, r5
   18a9a:	f7e7 fe2b 	bl	6f4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18a9e:	2a09      	cmp	r2, #9
   18aa0:	d8de      	bhi.n	18a60 <encode_uint+0x4c>
   18aa2:	b2d2      	uxtb	r2, r2
   18aa4:	3230      	adds	r2, #48	; 0x30
   18aa6:	b2d2      	uxtb	r2, r2
   18aa8:	e7e0      	b.n	18a6c <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   18aaa:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18aac:	3257      	adds	r2, #87	; 0x57
   18aae:	b2d2      	uxtb	r2, r2
   18ab0:	e7dc      	b.n	18a6c <encode_uint+0x58>
	if (conv->flag_hash) {
   18ab2:	9b01      	ldr	r3, [sp, #4]
   18ab4:	781b      	ldrb	r3, [r3, #0]
   18ab6:	f013 0f20 	tst.w	r3, #32
   18aba:	d005      	beq.n	18ac8 <encode_uint+0xb4>
		if (radix == 8) {
   18abc:	f1b9 0f08 	cmp.w	r9, #8
   18ac0:	d006      	beq.n	18ad0 <encode_uint+0xbc>
		} else if (radix == 16) {
   18ac2:	f1b9 0f10 	cmp.w	r9, #16
   18ac6:	d009      	beq.n	18adc <encode_uint+0xc8>
}
   18ac8:	4630      	mov	r0, r6
   18aca:	b003      	add	sp, #12
   18acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   18ad0:	9a01      	ldr	r2, [sp, #4]
   18ad2:	7893      	ldrb	r3, [r2, #2]
   18ad4:	f043 0308 	orr.w	r3, r3, #8
   18ad8:	7093      	strb	r3, [r2, #2]
   18ada:	e7f5      	b.n	18ac8 <encode_uint+0xb4>
			conv->altform_0c = true;
   18adc:	9a01      	ldr	r2, [sp, #4]
   18ade:	7893      	ldrb	r3, [r2, #2]
   18ae0:	f043 0310 	orr.w	r3, r3, #16
   18ae4:	7093      	strb	r3, [r2, #2]
   18ae6:	e7ef      	b.n	18ac8 <encode_uint+0xb4>

00018ae8 <outs>:
{
   18ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18aec:	4607      	mov	r7, r0
   18aee:	460e      	mov	r6, r1
   18af0:	4614      	mov	r4, r2
   18af2:	4698      	mov	r8, r3
	size_t count = 0;
   18af4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18af6:	e006      	b.n	18b06 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   18af8:	4631      	mov	r1, r6
   18afa:	f814 0b01 	ldrb.w	r0, [r4], #1
   18afe:	47b8      	blx	r7
		if (rc < 0) {
   18b00:	2800      	cmp	r0, #0
   18b02:	db09      	blt.n	18b18 <outs+0x30>
		++count;
   18b04:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   18b06:	4544      	cmp	r4, r8
   18b08:	d3f6      	bcc.n	18af8 <outs+0x10>
   18b0a:	f1b8 0f00 	cmp.w	r8, #0
   18b0e:	d102      	bne.n	18b16 <outs+0x2e>
   18b10:	7823      	ldrb	r3, [r4, #0]
   18b12:	2b00      	cmp	r3, #0
   18b14:	d1f0      	bne.n	18af8 <outs+0x10>
	return (int)count;
   18b16:	4628      	mov	r0, r5
}
   18b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018b1c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   18b1c:	b40f      	push	{r0, r1, r2, r3}
   18b1e:	b500      	push	{lr}
   18b20:	b083      	sub	sp, #12
   18b22:	a904      	add	r1, sp, #16
   18b24:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   18b28:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   18b2a:	f7ff fa1d 	bl	17f68 <vprintk>

	va_end(ap);
}
   18b2e:	b003      	add	sp, #12
   18b30:	f85d eb04 	ldr.w	lr, [sp], #4
   18b34:	b004      	add	sp, #16
   18b36:	4770      	bx	lr

00018b38 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   18b38:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   18b3a:	2300      	movs	r3, #0
   18b3c:	f36f 0300 	bfc	r3, #0, #1
   18b40:	f043 0302 	orr.w	r3, r3, #2
   18b44:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   18b48:	69c2      	ldr	r2, [r0, #28]
   18b4a:	6804      	ldr	r4, [r0, #0]
   18b4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   18b50:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   18b52:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18b54:	6902      	ldr	r2, [r0, #16]
   18b56:	f012 0201 	ands.w	r2, r2, #1
   18b5a:	d104      	bne.n	18b66 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   18b5c:	6a04      	ldr	r4, [r0, #32]
   18b5e:	42a3      	cmp	r3, r4
   18b60:	d304      	bcc.n	18b6c <add_skip_item+0x34>
   18b62:	1b1b      	subs	r3, r3, r4
   18b64:	e002      	b.n	18b6c <add_skip_item+0x34>
		return i & (buffer->size - 1);
   18b66:	6a04      	ldr	r4, [r0, #32]
   18b68:	3c01      	subs	r4, #1
   18b6a:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   18b6c:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18b6e:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   18b70:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18b72:	b922      	cbnz	r2, 18b7e <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   18b74:	6a03      	ldr	r3, [r0, #32]
   18b76:	4299      	cmp	r1, r3
   18b78:	d304      	bcc.n	18b84 <add_skip_item+0x4c>
   18b7a:	1ac9      	subs	r1, r1, r3
   18b7c:	e002      	b.n	18b84 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   18b7e:	6a03      	ldr	r3, [r0, #32]
   18b80:	3b01      	subs	r3, #1
   18b82:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18b84:	6041      	str	r1, [r0, #4]
}
   18b86:	bc10      	pop	{r4}
   18b88:	4770      	bx	lr

00018b8a <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   18b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b8e:	b083      	sub	sp, #12
   18b90:	4604      	mov	r4, r0
   18b92:	9101      	str	r1, [sp, #4]
   18b94:	4615      	mov	r5, r2
   18b96:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   18b98:	2300      	movs	r3, #0
   18b9a:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   18b9c:	f8d0 801c 	ldr.w	r8, [r0, #28]
   18ba0:	f8d0 900c 	ldr.w	r9, [r0, #12]
   18ba4:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   18ba8:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   18bac:	f003 0303 	and.w	r3, r3, #3
   18bb0:	2b02      	cmp	r3, #2
   18bb2:	d012      	beq.n	18bda <drop_item_locked+0x50>
	return 0;
   18bb4:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   18bb8:	69a3      	ldr	r3, [r4, #24]
   18bba:	4650      	mov	r0, sl
   18bbc:	4798      	blx	r3
   18bbe:	4607      	mov	r7, r0
	if (skip_wlen) {
   18bc0:	f1bb 0f00 	cmp.w	fp, #0
   18bc4:	d151      	bne.n	18c6a <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
   18bc6:	2d00      	cmp	r5, #0
   18bc8:	d05c      	beq.n	18c84 <drop_item_locked+0xfa>
		if (item->hdr.busy) {
   18bca:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   18bce:	f013 0f02 	tst.w	r3, #2
   18bd2:	d109      	bne.n	18be8 <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
   18bd4:	2301      	movs	r3, #1
   18bd6:	7033      	strb	r3, [r6, #0]
   18bd8:	e048      	b.n	18c6c <drop_item_locked+0xe2>
		return item->skip.len;
   18bda:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   18bde:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   18be2:	d0e9      	beq.n	18bb8 <drop_item_locked+0x2e>
		return item->skip.len;
   18be4:	465f      	mov	r7, fp
   18be6:	e7eb      	b.n	18bc0 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
   18be8:	9901      	ldr	r1, [sp, #4]
   18bea:	3101      	adds	r1, #1
   18bec:	4620      	mov	r0, r4
   18bee:	f7ff ffa3 	bl	18b38 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   18bf2:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   18bf4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18bf6:	6922      	ldr	r2, [r4, #16]
   18bf8:	f012 0201 	ands.w	r2, r2, #1
   18bfc:	d104      	bne.n	18c08 <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
   18bfe:	6a21      	ldr	r1, [r4, #32]
   18c00:	428b      	cmp	r3, r1
   18c02:	d304      	bcc.n	18c0e <drop_item_locked+0x84>
   18c04:	1a5b      	subs	r3, r3, r1
   18c06:	e002      	b.n	18c0e <drop_item_locked+0x84>
		return i & (buffer->size - 1);
   18c08:	6a21      	ldr	r1, [r4, #32]
   18c0a:	3901      	subs	r1, #1
   18c0c:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   18c0e:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   18c10:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   18c12:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18c14:	b922      	cbnz	r2, 18c20 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
   18c16:	6a21      	ldr	r1, [r4, #32]
   18c18:	428b      	cmp	r3, r1
   18c1a:	d304      	bcc.n	18c26 <drop_item_locked+0x9c>
   18c1c:	1a5b      	subs	r3, r3, r1
   18c1e:	e002      	b.n	18c26 <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
   18c20:	6a21      	ldr	r1, [r4, #32]
   18c22:	3901      	subs	r1, #1
   18c24:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   18c26:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   18c28:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   18c2a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18c2c:	b922      	cbnz	r2, 18c38 <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
   18c2e:	6a22      	ldr	r2, [r4, #32]
   18c30:	4293      	cmp	r3, r2
   18c32:	d304      	bcc.n	18c3e <drop_item_locked+0xb4>
   18c34:	1a9b      	subs	r3, r3, r2
   18c36:	e002      	b.n	18c3e <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
   18c38:	6a22      	ldr	r2, [r4, #32]
   18c3a:	3a01      	subs	r2, #1
   18c3c:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   18c3e:	69e1      	ldr	r1, [r4, #28]
   18c40:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   18c44:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   18c48:	f002 0203 	and.w	r2, r2, #3
   18c4c:	2a02      	cmp	r2, #2
   18c4e:	d006      	beq.n	18c5e <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
   18c50:	69a3      	ldr	r3, [r4, #24]
   18c52:	4650      	mov	r0, sl
   18c54:	4798      	blx	r3
   18c56:	4407      	add	r7, r0
				*user_packet = true;
   18c58:	2301      	movs	r3, #1
   18c5a:	7033      	strb	r3, [r6, #0]
   18c5c:	e006      	b.n	18c6c <drop_item_locked+0xe2>
		return item->skip.len;
   18c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   18c62:	089b      	lsrs	r3, r3, #2
   18c64:	d0f4      	beq.n	18c50 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
   18c66:	441f      	add	r7, r3
   18c68:	e000      	b.n	18c6c <drop_item_locked+0xe2>
		allow_drop = true;
   18c6a:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
   18c6c:	b195      	cbz	r5, 18c94 <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   18c6e:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
   18c70:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18c72:	6923      	ldr	r3, [r4, #16]
   18c74:	f013 0f01 	tst.w	r3, #1
   18c78:	d107      	bne.n	18c8a <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
   18c7a:	6a23      	ldr	r3, [r4, #32]
   18c7c:	429f      	cmp	r7, r3
   18c7e:	d307      	bcc.n	18c90 <drop_item_locked+0x106>
   18c80:	1aff      	subs	r7, r7, r3
   18c82:	e005      	b.n	18c90 <drop_item_locked+0x106>
		item = NULL;
   18c84:	f04f 0a00 	mov.w	sl, #0
   18c88:	e7f0      	b.n	18c6c <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
   18c8a:	6a23      	ldr	r3, [r4, #32]
   18c8c:	3b01      	subs	r3, #1
   18c8e:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   18c90:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   18c92:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
   18c94:	4650      	mov	r0, sl
   18c96:	b003      	add	sp, #12
   18c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018c9c <mpsc_pbuf_init>:
{
   18c9c:	b538      	push	{r3, r4, r5, lr}
   18c9e:	4604      	mov	r4, r0
   18ca0:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   18ca2:	221c      	movs	r2, #28
   18ca4:	2100      	movs	r1, #0
   18ca6:	f001 f9ff 	bl	1a0a8 <memset>
	buffer->get_wlen = cfg->get_wlen;
   18caa:	68eb      	ldr	r3, [r5, #12]
   18cac:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   18cae:	68ab      	ldr	r3, [r5, #8]
   18cb0:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   18cb2:	682b      	ldr	r3, [r5, #0]
   18cb4:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   18cb6:	686b      	ldr	r3, [r5, #4]
   18cb8:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   18cba:	2200      	movs	r2, #0
   18cbc:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   18cbe:	692a      	ldr	r2, [r5, #16]
   18cc0:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   18cc2:	b123      	cbz	r3, 18cce <mpsc_pbuf_init+0x32>
   18cc4:	1e59      	subs	r1, r3, #1
   18cc6:	420b      	tst	r3, r1
   18cc8:	d00d      	beq.n	18ce6 <mpsc_pbuf_init+0x4a>
   18cca:	2300      	movs	r3, #0
   18ccc:	e000      	b.n	18cd0 <mpsc_pbuf_init+0x34>
   18cce:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
   18cd0:	b113      	cbz	r3, 18cd8 <mpsc_pbuf_init+0x3c>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   18cd2:	f042 0201 	orr.w	r2, r2, #1
   18cd6:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
   18cd8:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
   18cdc:	2201      	movs	r2, #1
   18cde:	2100      	movs	r1, #0
   18ce0:	f006 fce4 	bl	1f6ac <z_impl_k_sem_init>
}
   18ce4:	bd38      	pop	{r3, r4, r5, pc}
   18ce6:	2301      	movs	r3, #1
   18ce8:	e7f2      	b.n	18cd0 <mpsc_pbuf_init+0x34>

00018cea <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   18cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cee:	b085      	sub	sp, #20
   18cf0:	9200      	str	r2, [sp, #0]
   18cf2:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   18cf4:	6a03      	ldr	r3, [r0, #32]
   18cf6:	3b01      	subs	r3, #1
   18cf8:	428b      	cmp	r3, r1
   18cfa:	f0c0 808c 	bcc.w	18e16 <mpsc_pbuf_alloc+0x12c>
   18cfe:	4605      	mov	r5, r0
   18d00:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   18d02:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
   18d06:	46d3      	mov	fp, sl
   18d08:	e022      	b.n	18d50 <mpsc_pbuf_alloc+0x66>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   18d0a:	1b1c      	subs	r4, r3, r4
   18d0c:	3c01      	subs	r4, #1
		return false;
   18d0e:	2600      	movs	r6, #0
   18d10:	e030      	b.n	18d74 <mpsc_pbuf_alloc+0x8a>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   18d12:	6a2b      	ldr	r3, [r5, #32]
   18d14:	1b1c      	subs	r4, r3, r4
   18d16:	3c01      	subs	r4, #1
		return false;
   18d18:	2600      	movs	r6, #0
   18d1a:	e02b      	b.n	18d74 <mpsc_pbuf_alloc+0x8a>
		return i & (buffer->size - 1);
   18d1c:	6a2a      	ldr	r2, [r5, #32]
   18d1e:	3a01      	subs	r2, #1
   18d20:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   18d22:	602b      	str	r3, [r5, #0]
		cont = false;
   18d24:	2600      	movs	r6, #0
   18d26:	f387 8811 	msr	BASEPRI, r7
   18d2a:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   18d2e:	b16e      	cbz	r6, 18d4c <mpsc_pbuf_alloc+0x62>
   18d30:	f1ba 0f00 	cmp.w	sl, #0
   18d34:	d00a      	beq.n	18d4c <mpsc_pbuf_alloc+0x62>
   18d36:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18d3a:	b13b      	cbz	r3, 18d4c <mpsc_pbuf_alloc+0x62>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   18d3c:	696b      	ldr	r3, [r5, #20]
   18d3e:	2b00      	cmp	r3, #0
   18d40:	d066      	beq.n	18e10 <mpsc_pbuf_alloc+0x126>
				buffer->notify_drop(buffer, dropped_item);
   18d42:	4651      	mov	r1, sl
   18d44:	4628      	mov	r0, r5
   18d46:	4798      	blx	r3
			}
			dropped_item = NULL;
   18d48:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
   18d4c:	2e00      	cmp	r6, #0
   18d4e:	d064      	beq.n	18e1a <mpsc_pbuf_alloc+0x130>
	__asm__ volatile(
   18d50:	f04f 0320 	mov.w	r3, #32
   18d54:	f3ef 8811 	mrs	r8, BASEPRI
   18d58:	f383 8812 	msr	BASEPRI_MAX, r3
   18d5c:	f3bf 8f6f 	isb	sy
   18d60:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   18d62:	68eb      	ldr	r3, [r5, #12]
   18d64:	682c      	ldr	r4, [r5, #0]
   18d66:	42a3      	cmp	r3, r4
   18d68:	d8cf      	bhi.n	18d0a <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
   18d6a:	2b00      	cmp	r3, #0
   18d6c:	d0d1      	beq.n	18d12 <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
   18d6e:	6a2b      	ldr	r3, [r5, #32]
   18d70:	1b1c      	subs	r4, r3, r4
	return true;
   18d72:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
   18d74:	45a1      	cmp	r9, r4
   18d76:	d819      	bhi.n	18dac <mpsc_pbuf_alloc+0xc2>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   18d78:	69eb      	ldr	r3, [r5, #28]
   18d7a:	682a      	ldr	r2, [r5, #0]
			item =
   18d7c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
   18d80:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   18d84:	f36f 0100 	bfc	r1, #0, #1
   18d88:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   18d8c:	b2c9      	uxtb	r1, r1
   18d8e:	f36f 0141 	bfc	r1, #1, #1
   18d92:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   18d96:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   18d98:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18d9a:	692a      	ldr	r2, [r5, #16]
   18d9c:	f012 0f01 	tst.w	r2, #1
   18da0:	d1bc      	bne.n	18d1c <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
   18da2:	6a2a      	ldr	r2, [r5, #32]
   18da4:	4293      	cmp	r3, r2
   18da6:	d3bc      	bcc.n	18d22 <mpsc_pbuf_alloc+0x38>
   18da8:	1a9b      	subs	r3, r3, r2
   18daa:	e7ba      	b.n	18d22 <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
   18dac:	b9ae      	cbnz	r6, 18dda <mpsc_pbuf_alloc+0xf0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18dae:	9b01      	ldr	r3, [sp, #4]
   18db0:	9a00      	ldr	r2, [sp, #0]
   18db2:	4313      	orrs	r3, r2
   18db4:	d003      	beq.n	18dbe <mpsc_pbuf_alloc+0xd4>
			   !k_is_in_isr()) {
   18db6:	f006 fb36 	bl	1f426 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18dba:	4606      	mov	r6, r0
   18dbc:	b190      	cbz	r0, 18de4 <mpsc_pbuf_alloc+0xfa>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   18dbe:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   18dc0:	f10d 030f 	add.w	r3, sp, #15
   18dc4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18dc8:	4621      	mov	r1, r4
   18dca:	4628      	mov	r0, r5
   18dcc:	f7ff fedd 	bl	18b8a <drop_item_locked>
			cont = dropped_item != NULL;
   18dd0:	4682      	mov	sl, r0
   18dd2:	1e06      	subs	r6, r0, #0
   18dd4:	bf18      	it	ne
   18dd6:	2601      	movne	r6, #1
   18dd8:	e7a5      	b.n	18d26 <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
   18dda:	4621      	mov	r1, r4
   18ddc:	4628      	mov	r0, r5
   18dde:	f7ff feab 	bl	18b38 <add_skip_item>
			cont = true;
   18de2:	e7a0      	b.n	18d26 <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
   18de4:	f388 8811 	msr	BASEPRI, r8
   18de8:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   18dec:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
   18df0:	9a00      	ldr	r2, [sp, #0]
   18df2:	9b01      	ldr	r3, [sp, #4]
   18df4:	f7fd fb02 	bl	163fc <z_impl_k_sem_take>
	__asm__ volatile(
   18df8:	f04f 0320 	mov.w	r3, #32
   18dfc:	f3ef 8711 	mrs	r7, BASEPRI
   18e00:	f383 8812 	msr	BASEPRI_MAX, r3
   18e04:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   18e08:	2800      	cmp	r0, #0
   18e0a:	d18c      	bne.n	18d26 <mpsc_pbuf_alloc+0x3c>
				cont = true;
   18e0c:	2601      	movs	r6, #1
   18e0e:	e78a      	b.n	18d26 <mpsc_pbuf_alloc+0x3c>
			dropped_item = NULL;
   18e10:	f04f 0a00 	mov.w	sl, #0
   18e14:	e79a      	b.n	18d4c <mpsc_pbuf_alloc+0x62>
		return NULL;
   18e16:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   18e1a:	4658      	mov	r0, fp
   18e1c:	b005      	add	sp, #20
   18e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018e22 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   18e22:	b538      	push	{r3, r4, r5, lr}
   18e24:	4604      	mov	r4, r0
   18e26:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   18e28:	6983      	ldr	r3, [r0, #24]
   18e2a:	4608      	mov	r0, r1
   18e2c:	4798      	blx	r3
   18e2e:	f04f 0320 	mov.w	r3, #32
   18e32:	f3ef 8111 	mrs	r1, BASEPRI
   18e36:	f383 8812 	msr	BASEPRI_MAX, r3
   18e3a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   18e3e:	782b      	ldrb	r3, [r5, #0]
   18e40:	f043 0301 	orr.w	r3, r3, #1
   18e44:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18e46:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   18e48:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18e4a:	6923      	ldr	r3, [r4, #16]
   18e4c:	f013 0f01 	tst.w	r3, #1
   18e50:	d104      	bne.n	18e5c <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
   18e52:	6a23      	ldr	r3, [r4, #32]
   18e54:	4298      	cmp	r0, r3
   18e56:	d304      	bcc.n	18e62 <mpsc_pbuf_commit+0x40>
   18e58:	1ac0      	subs	r0, r0, r3
   18e5a:	e002      	b.n	18e62 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
   18e5c:	6a23      	ldr	r3, [r4, #32]
   18e5e:	3b01      	subs	r3, #1
   18e60:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   18e62:	6060      	str	r0, [r4, #4]
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   18e64:	6923      	ldr	r3, [r4, #16]
   18e66:	f013 0f04 	tst.w	r3, #4
   18e6a:	d104      	bne.n	18e76 <mpsc_pbuf_commit+0x54>
	__asm__ volatile(
   18e6c:	f381 8811 	msr	BASEPRI, r1
   18e70:	f3bf 8f6f 	isb	sy
	max_utilization_update(buffer);
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   18e74:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   18e76:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   18e78:	68e3      	ldr	r3, [r4, #12]
   18e7a:	6820      	ldr	r0, [r4, #0]
   18e7c:	4283      	cmp	r3, r0
   18e7e:	d80f      	bhi.n	18ea0 <mpsc_pbuf_commit+0x7e>
	} else if (!buffer->rd_idx) {
   18e80:	b193      	cbz	r3, 18ea8 <mpsc_pbuf_commit+0x86>
	*res = buffer->size - buffer->tmp_wr_idx;
   18e82:	6a23      	ldr	r3, [r4, #32]
   18e84:	1a1b      	subs	r3, r3, r0
	return true;
   18e86:	2201      	movs	r2, #1
	if (free_space(buffer, &f)) {
   18e88:	b112      	cbz	r2, 18e90 <mpsc_pbuf_commit+0x6e>
		f += (buffer->rd_idx - 1);
   18e8a:	68e2      	ldr	r2, [r4, #12]
   18e8c:	4413      	add	r3, r2
   18e8e:	3b01      	subs	r3, #1
	return buffer->size - 1 - f;
   18e90:	6a22      	ldr	r2, [r4, #32]
   18e92:	1ad3      	subs	r3, r2, r3
   18e94:	3b01      	subs	r3, #1
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   18e96:	429d      	cmp	r5, r3
   18e98:	d90b      	bls.n	18eb2 <mpsc_pbuf_commit+0x90>
   18e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18e9c:	6263      	str	r3, [r4, #36]	; 0x24
   18e9e:	e7e5      	b.n	18e6c <mpsc_pbuf_commit+0x4a>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   18ea0:	1a1b      	subs	r3, r3, r0
   18ea2:	3b01      	subs	r3, #1
		return false;
   18ea4:	2200      	movs	r2, #0
   18ea6:	e7ef      	b.n	18e88 <mpsc_pbuf_commit+0x66>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   18ea8:	6a22      	ldr	r2, [r4, #32]
   18eaa:	1a13      	subs	r3, r2, r0
   18eac:	3b01      	subs	r3, #1
		return false;
   18eae:	2200      	movs	r2, #0
   18eb0:	e7ea      	b.n	18e88 <mpsc_pbuf_commit+0x66>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   18eb2:	68e2      	ldr	r2, [r4, #12]
   18eb4:	6825      	ldr	r5, [r4, #0]
   18eb6:	42aa      	cmp	r2, r5
   18eb8:	d80b      	bhi.n	18ed2 <mpsc_pbuf_commit+0xb0>
	} else if (!buffer->rd_idx) {
   18eba:	b172      	cbz	r2, 18eda <mpsc_pbuf_commit+0xb8>
	*res = buffer->size - buffer->tmp_wr_idx;
   18ebc:	6a23      	ldr	r3, [r4, #32]
   18ebe:	1b5a      	subs	r2, r3, r5
	return true;
   18ec0:	2301      	movs	r3, #1
	if (free_space(buffer, &f)) {
   18ec2:	b113      	cbz	r3, 18eca <mpsc_pbuf_commit+0xa8>
		f += (buffer->rd_idx - 1);
   18ec4:	68e3      	ldr	r3, [r4, #12]
   18ec6:	4413      	add	r3, r2
   18ec8:	1e5a      	subs	r2, r3, #1
	return buffer->size - 1 - f;
   18eca:	6a23      	ldr	r3, [r4, #32]
   18ecc:	1a9b      	subs	r3, r3, r2
   18ece:	3b01      	subs	r3, #1
   18ed0:	e7e4      	b.n	18e9c <mpsc_pbuf_commit+0x7a>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   18ed2:	1b52      	subs	r2, r2, r5
   18ed4:	3a01      	subs	r2, #1
		return false;
   18ed6:	2300      	movs	r3, #0
   18ed8:	e7f3      	b.n	18ec2 <mpsc_pbuf_commit+0xa0>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   18eda:	6a20      	ldr	r0, [r4, #32]
   18edc:	1b42      	subs	r2, r0, r5
   18ede:	3a01      	subs	r2, #1
		return false;
   18ee0:	2300      	movs	r3, #0
   18ee2:	e7ee      	b.n	18ec2 <mpsc_pbuf_commit+0xa0>

00018ee4 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   18ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ee6:	4604      	mov	r4, r0
   18ee8:	e039      	b.n	18f5e <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   18eea:	1a9b      	subs	r3, r3, r2
		return false;
   18eec:	e045      	b.n	18f7a <mpsc_pbuf_claim+0x96>
		return item->skip.len;
   18eee:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   18ef2:	0880      	lsrs	r0, r0, #2
   18ef4:	d153      	bne.n	18f9e <mpsc_pbuf_claim+0xba>
   18ef6:	e04d      	b.n	18f94 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
   18ef8:	6a21      	ldr	r1, [r4, #32]
   18efa:	3901      	subs	r1, #1
   18efc:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   18efe:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   18f00:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   18f02:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18f04:	b922      	cbnz	r2, 18f10 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
   18f06:	6a23      	ldr	r3, [r4, #32]
   18f08:	4298      	cmp	r0, r3
   18f0a:	d304      	bcc.n	18f16 <mpsc_pbuf_claim+0x32>
   18f0c:	1ac0      	subs	r0, r0, r3
   18f0e:	e002      	b.n	18f16 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
   18f10:	6a23      	ldr	r3, [r4, #32]
   18f12:	3b01      	subs	r3, #1
   18f14:	4018      	ands	r0, r3
				buffer->rd_idx =
   18f16:	60e0      	str	r0, [r4, #12]
				cont = true;
   18f18:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
   18f1a:	e01b      	b.n	18f54 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
   18f1c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   18f20:	f043 0302 	orr.w	r3, r3, #2
   18f24:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   18f28:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   18f2a:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   18f2c:	4630      	mov	r0, r6
   18f2e:	4798      	blx	r3
	uint32_t i = idx + val;
   18f30:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18f32:	6923      	ldr	r3, [r4, #16]
   18f34:	f013 0f01 	tst.w	r3, #1
   18f38:	d104      	bne.n	18f44 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   18f3a:	6a23      	ldr	r3, [r4, #32]
   18f3c:	4298      	cmp	r0, r3
   18f3e:	d304      	bcc.n	18f4a <mpsc_pbuf_claim+0x66>
   18f40:	1ac0      	subs	r0, r0, r3
   18f42:	e002      	b.n	18f4a <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
   18f44:	6a23      	ldr	r3, [r4, #32]
   18f46:	3b01      	subs	r3, #1
   18f48:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   18f4a:	60a0      	str	r0, [r4, #8]
		cont = false;
   18f4c:	2300      	movs	r3, #0
   18f4e:	e001      	b.n	18f54 <mpsc_pbuf_claim+0x70>
   18f50:	2300      	movs	r3, #0
			item = NULL;
   18f52:	461e      	mov	r6, r3
   18f54:	f385 8811 	msr	BASEPRI, r5
   18f58:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   18f5c:	b38b      	cbz	r3, 18fc2 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
   18f5e:	f04f 0320 	mov.w	r3, #32
   18f62:	f3ef 8511 	mrs	r5, BASEPRI
   18f66:	f383 8812 	msr	BASEPRI_MAX, r3
   18f6a:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   18f6e:	68a2      	ldr	r2, [r4, #8]
   18f70:	6863      	ldr	r3, [r4, #4]
   18f72:	429a      	cmp	r2, r3
   18f74:	d9b9      	bls.n	18eea <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
   18f76:	6a23      	ldr	r3, [r4, #32]
   18f78:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   18f7a:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
   18f7c:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   18f80:	2b00      	cmp	r3, #0
   18f82:	d0e5      	beq.n	18f50 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
   18f84:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   18f88:	f013 0303 	ands.w	r3, r3, #3
   18f8c:	d016      	beq.n	18fbc <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
   18f8e:	2b02      	cmp	r3, #2
   18f90:	d0ad      	beq.n	18eee <mpsc_pbuf_claim+0xa>
	return 0;
   18f92:	2000      	movs	r0, #0
	return item->hdr.valid;
   18f94:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   18f98:	f013 0f01 	tst.w	r3, #1
   18f9c:	d1be      	bne.n	18f1c <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
   18f9e:	b910      	cbnz	r0, 18fa6 <mpsc_pbuf_claim+0xc2>
   18fa0:	69a3      	ldr	r3, [r4, #24]
   18fa2:	4630      	mov	r0, r6
   18fa4:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   18fa6:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   18fa8:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   18faa:	6922      	ldr	r2, [r4, #16]
   18fac:	f012 0201 	ands.w	r2, r2, #1
   18fb0:	d1a2      	bne.n	18ef8 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
   18fb2:	6a21      	ldr	r1, [r4, #32]
   18fb4:	428b      	cmp	r3, r1
   18fb6:	d3a2      	bcc.n	18efe <mpsc_pbuf_claim+0x1a>
   18fb8:	1a5b      	subs	r3, r3, r1
   18fba:	e7a0      	b.n	18efe <mpsc_pbuf_claim+0x1a>
		cont = false;
   18fbc:	2300      	movs	r3, #0
			item = NULL;
   18fbe:	461e      	mov	r6, r3
   18fc0:	e7c8      	b.n	18f54 <mpsc_pbuf_claim+0x70>

	return item;
}
   18fc2:	4630      	mov	r0, r6
   18fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018fc6 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   18fc6:	b538      	push	{r3, r4, r5, lr}
   18fc8:	4604      	mov	r4, r0
   18fca:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   18fcc:	6983      	ldr	r3, [r0, #24]
   18fce:	4608      	mov	r0, r1
   18fd0:	4798      	blx	r3
   18fd2:	f04f 0320 	mov.w	r3, #32
   18fd6:	f3ef 8211 	mrs	r2, BASEPRI
   18fda:	f383 8812 	msr	BASEPRI_MAX, r3
   18fde:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   18fe2:	782b      	ldrb	r3, [r5, #0]
   18fe4:	f36f 0300 	bfc	r3, #0, #1
   18fe8:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   18fea:	6923      	ldr	r3, [r4, #16]
   18fec:	f013 0f02 	tst.w	r3, #2
   18ff0:	d00a      	beq.n	19008 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   18ff2:	69e3      	ldr	r3, [r4, #28]
   18ff4:	68e1      	ldr	r1, [r4, #12]
   18ff6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   18ffa:	42ab      	cmp	r3, r5
   18ffc:	d004      	beq.n	19008 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   18ffe:	682b      	ldr	r3, [r5, #0]
   19000:	f360 039f 	bfi	r3, r0, #2, #30
   19004:	602b      	str	r3, [r5, #0]
   19006:	e012      	b.n	1902e <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
   19008:	782b      	ldrb	r3, [r5, #0]
   1900a:	f36f 0341 	bfc	r3, #1, #1
   1900e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   19010:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   19012:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   19014:	6923      	ldr	r3, [r4, #16]
   19016:	f013 0f01 	tst.w	r3, #1
   1901a:	d104      	bne.n	19026 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
   1901c:	6a23      	ldr	r3, [r4, #32]
   1901e:	4298      	cmp	r0, r3
   19020:	d304      	bcc.n	1902c <mpsc_pbuf_free+0x66>
   19022:	1ac0      	subs	r0, r0, r3
   19024:	e002      	b.n	1902c <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
   19026:	6a23      	ldr	r3, [r4, #32]
   19028:	3b01      	subs	r3, #1
   1902a:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1902c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1902e:	f382 8811 	msr	BASEPRI, r2
   19032:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   19036:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   1903a:	f7fd f9b7 	bl	163ac <z_impl_k_sem_give>
}
   1903e:	bd38      	pop	{r3, r4, r5, pc}

00019040 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   19040:	6883      	ldr	r3, [r0, #8]
   19042:	6842      	ldr	r2, [r0, #4]
   19044:	4293      	cmp	r3, r2
   19046:	d905      	bls.n	19054 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   19048:	6a00      	ldr	r0, [r0, #32]
   1904a:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   1904c:	3800      	subs	r0, #0
   1904e:	bf18      	it	ne
   19050:	2001      	movne	r0, #1
   19052:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   19054:	1ad0      	subs	r0, r2, r3
		return false;
   19056:	e7f9      	b.n	1904c <mpsc_pbuf_is_pending+0xc>

00019058 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   19058:	4770      	bx	lr

0001905a <pm_state_exit_post_ops>:
   1905a:	2300      	movs	r3, #0
   1905c:	f383 8811 	msr	BASEPRI, r3
   19060:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   19064:	4770      	bx	lr

00019066 <rtc_cb>:
{
   19066:	b510      	push	{r4, lr}
   19068:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
   1906a:	2100      	movs	r1, #0
   1906c:	4620      	mov	r0, r4
   1906e:	f7e9 ff95 	bl	2f9c <ppi_rtc_to_ipc>
		free_resources(channels);
   19072:	4620      	mov	r0, r4
   19074:	f7e9 ff80 	bl	2f78 <free_resources>
}
   19078:	bd10      	pop	{r4, pc}

0001907a <mbox_callback>:
{
   1907a:	b510      	push	{r4, lr}
   1907c:	b082      	sub	sp, #8
   1907e:	4614      	mov	r4, r2
	channel->dev = dev;
   19080:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
   19082:	9101      	str	r1, [sp, #4]
		(const struct mbox_driver_api *)channel->dev->api;
   19084:	9800      	ldr	r0, [sp, #0]
	const struct mbox_driver_api *api =
   19086:	6883      	ldr	r3, [r0, #8]
	if (api->set_enabled == NULL) {
   19088:	691b      	ldr	r3, [r3, #16]
   1908a:	b113      	cbz	r3, 19092 <mbox_callback+0x18>
	return api->set_enabled(channel->dev, channel->id, enable);
   1908c:	2200      	movs	r2, #0
   1908e:	9901      	ldr	r1, [sp, #4]
   19090:	4798      	blx	r3
	remote_callback(user_data);
   19092:	4620      	mov	r0, r4
   19094:	f7e9 ffbc 	bl	3010 <remote_callback>
}
   19098:	b002      	add	sp, #8
   1909a:	bd10      	pop	{r4, pc}

0001909c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   1909c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   1909e:	f013 0f04 	tst.w	r3, #4
   190a2:	d001      	beq.n	190a8 <log_msg_generic_get_wlen+0xc>
	return 0;
   190a4:	2000      	movs	r0, #0
}
   190a6:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   190a8:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   190aa:	f3c3 2049 	ubfx	r0, r3, #9, #10
   190ae:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   190b2:	4418      	add	r0, r3
   190b4:	3017      	adds	r0, #23
   190b6:	f020 0007 	bic.w	r0, r0, #7
   190ba:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   190bc:	4770      	bx	lr

000190be <dummy_timestamp>:
}
   190be:	2000      	movs	r0, #0
   190c0:	4770      	bx	lr

000190c2 <msg_filter_check>:
}
   190c2:	2001      	movs	r0, #1
   190c4:	4770      	bx	lr

000190c6 <default_get_timestamp>:
{
   190c6:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   190c8:	f004 ffe0 	bl	1e08c <sys_clock_cycle_get_32>
}
   190cc:	bd08      	pop	{r3, pc}

000190ce <z_log_vprintk>:
{
   190ce:	b500      	push	{lr}
   190d0:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   190d2:	9103      	str	r1, [sp, #12]
   190d4:	9002      	str	r0, [sp, #8]
   190d6:	2000      	movs	r0, #0
   190d8:	9001      	str	r0, [sp, #4]
   190da:	9000      	str	r0, [sp, #0]
   190dc:	4603      	mov	r3, r0
   190de:	4602      	mov	r2, r0
   190e0:	4601      	mov	r1, r0
   190e2:	f000 f839 	bl	19158 <z_impl_z_log_msg_runtime_vcreate>
}
   190e6:	b005      	add	sp, #20
   190e8:	f85d fb04 	ldr.w	pc, [sp], #4

000190ec <notify_drop>:
{
   190ec:	b508      	push	{r3, lr}
	z_log_dropped(true);
   190ee:	2001      	movs	r0, #1
   190f0:	f7ea f95e 	bl	33b0 <z_log_dropped>
}
   190f4:	bd08      	pop	{r3, pc}

000190f6 <z_log_get_tag>:
}
   190f6:	2000      	movs	r0, #0
   190f8:	4770      	bx	lr

000190fa <z_cbprintf_cpy>:
{
   190fa:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   190fc:	6853      	ldr	r3, [r2, #4]
   190fe:	6896      	ldr	r6, [r2, #8]
   19100:	1b9b      	subs	r3, r3, r6
   19102:	428b      	cmp	r3, r1
   19104:	d30c      	bcc.n	19120 <z_cbprintf_cpy+0x26>
   19106:	460c      	mov	r4, r1
   19108:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
   1910a:	6813      	ldr	r3, [r2, #0]
   1910c:	460a      	mov	r2, r1
   1910e:	4601      	mov	r1, r0
   19110:	1998      	adds	r0, r3, r6
   19112:	f000 ff9a 	bl	1a04a <memcpy>
	desc->off += len;
   19116:	68ab      	ldr	r3, [r5, #8]
   19118:	4423      	add	r3, r4
   1911a:	60ab      	str	r3, [r5, #8]
	return len;
   1911c:	4620      	mov	r0, r4
}
   1911e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   19120:	f06f 001b 	mvn.w	r0, #27
   19124:	e7fb      	b.n	1911e <z_cbprintf_cpy+0x24>

00019126 <z_log_msg_finalize>:
{
   19126:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   19128:	b198      	cbz	r0, 19152 <z_log_msg_finalize+0x2c>
   1912a:	460e      	mov	r6, r1
   1912c:	4614      	mov	r4, r2
   1912e:	4619      	mov	r1, r3
   19130:	4605      	mov	r5, r0
	if (data) {
   19132:	b143      	cbz	r3, 19146 <z_log_msg_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
   19134:	f100 0310 	add.w	r3, r0, #16
   19138:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
   1913c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   19140:	4418      	add	r0, r3
   19142:	f000 ff82 	bl	1a04a <memcpy>
	msg->hdr.desc = desc;
   19146:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   19148:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   1914a:	4628      	mov	r0, r5
   1914c:	f7ea fa52 	bl	35f4 <z_log_msg_commit>
}
   19150:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   19152:	f7ea f92d 	bl	33b0 <z_log_dropped>
		return;
   19156:	e7fb      	b.n	19150 <z_log_msg_finalize+0x2a>

00019158 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   19158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1915c:	b085      	sub	sp, #20
   1915e:	4681      	mov	r9, r0
   19160:	460d      	mov	r5, r1
   19162:	4690      	mov	r8, r2
   19164:	461e      	mov	r6, r3
   19166:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   1916a:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   1916c:	b3bf      	cbz	r7, 191de <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
   1916e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19170:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   19172:	9300      	str	r3, [sp, #0]
   19174:	463b      	mov	r3, r7
   19176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19178:	2110      	movs	r1, #16
   1917a:	2000      	movs	r0, #0
   1917c:	f7e8 fd24 	bl	1bc8 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   19180:	4682      	mov	sl, r0
   19182:	eb00 030b 	add.w	r3, r0, fp
   19186:	3317      	adds	r3, #23
   19188:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   1918c:	2400      	movs	r4, #0
   1918e:	f36f 0400 	bfc	r4, #0, #1
   19192:	f36f 0441 	bfc	r4, #1, #1
   19196:	f36f 0482 	bfc	r4, #2, #1
   1919a:	f369 04c5 	bfi	r4, r9, #3, #3
   1919e:	f368 1488 	bfi	r4, r8, #6, #3
   191a2:	f360 2452 	bfi	r4, r0, #9, #10
   191a6:	f36b 44de 	bfi	r4, fp, #19, #12
   191aa:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   191ae:	0898      	lsrs	r0, r3, #2
   191b0:	f7ea f96c 	bl	348c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   191b4:	4680      	mov	r8, r0
   191b6:	b148      	cbz	r0, 191cc <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   191b8:	3010      	adds	r0, #16
   191ba:	d007      	beq.n	191cc <z_impl_z_log_msg_runtime_vcreate+0x74>
   191bc:	b137      	cbz	r7, 191cc <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   191be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   191c0:	9300      	str	r3, [sp, #0]
   191c2:	463b      	mov	r3, r7
   191c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   191c6:	4651      	mov	r1, sl
   191c8:	f7e8 fcfe 	bl	1bc8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   191cc:	4633      	mov	r3, r6
   191ce:	4622      	mov	r2, r4
   191d0:	4629      	mov	r1, r5
   191d2:	4640      	mov	r0, r8
   191d4:	f7ff ffa7 	bl	19126 <z_log_msg_finalize>
	}
}
   191d8:	b005      	add	sp, #20
   191da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   191de:	2000      	movs	r0, #0
   191e0:	e7ce      	b.n	19180 <z_impl_z_log_msg_runtime_vcreate+0x28>

000191e2 <buffer_write>:
{
   191e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191e4:	4607      	mov	r7, r0
   191e6:	460d      	mov	r5, r1
   191e8:	4614      	mov	r4, r2
   191ea:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   191ec:	4632      	mov	r2, r6
   191ee:	4621      	mov	r1, r4
   191f0:	4628      	mov	r0, r5
   191f2:	47b8      	blx	r7
		buf += processed;
   191f4:	4405      	add	r5, r0
	} while (len != 0);
   191f6:	1a24      	subs	r4, r4, r0
   191f8:	d1f8      	bne.n	191ec <buffer_write+0xa>
}
   191fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000191fc <cbvprintf>:
{
   191fc:	b510      	push	{r4, lr}
   191fe:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   19200:	2400      	movs	r4, #0
   19202:	9400      	str	r4, [sp, #0]
   19204:	f7e9 fb24 	bl	2850 <z_cbvprintf_impl>
}
   19208:	b002      	add	sp, #8
   1920a:	bd10      	pop	{r4, pc}

0001920c <color_prefix>:
{
   1920c:	b508      	push	{r3, lr}
   1920e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   19210:	2201      	movs	r2, #1
   19212:	f7ea fb0b 	bl	382c <color_print>
}
   19216:	bd08      	pop	{r3, pc}

00019218 <color_postfix>:
{
   19218:	b508      	push	{r3, lr}
   1921a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   1921c:	2200      	movs	r2, #0
   1921e:	f7ea fb05 	bl	382c <color_print>
}
   19222:	bd08      	pop	{r3, pc}

00019224 <postfix_print>:
{
   19224:	b538      	push	{r3, r4, r5, lr}
   19226:	4605      	mov	r5, r0
   19228:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   1922a:	f001 0101 	and.w	r1, r1, #1
   1922e:	f7ff fff3 	bl	19218 <color_postfix>
	newline_print(output, flags);
   19232:	4621      	mov	r1, r4
   19234:	4628      	mov	r0, r5
   19236:	f7ea fb83 	bl	3940 <newline_print>
}
   1923a:	bd38      	pop	{r3, r4, r5, pc}

0001923c <log_msg_hexdump>:
{
   1923c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19240:	b083      	sub	sp, #12
   19242:	4680      	mov	r8, r0
   19244:	460e      	mov	r6, r1
   19246:	4615      	mov	r5, r2
   19248:	461f      	mov	r7, r3
   1924a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1924e:	462c      	mov	r4, r5
   19250:	2d10      	cmp	r5, #16
   19252:	bf28      	it	cs
   19254:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   19256:	f8cd 9000 	str.w	r9, [sp]
   1925a:	463b      	mov	r3, r7
   1925c:	4622      	mov	r2, r4
   1925e:	4631      	mov	r1, r6
   19260:	4640      	mov	r0, r8
   19262:	f7ea fb81 	bl	3968 <hexdump_line_print>
		data += length;
   19266:	4426      	add	r6, r4
	} while (len);
   19268:	1b2d      	subs	r5, r5, r4
   1926a:	d1f0      	bne.n	1924e <log_msg_hexdump+0x12>
}
   1926c:	b003      	add	sp, #12
   1926e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019272 <log_output_flush>:
{
   19272:	b510      	push	{r4, lr}
   19274:	4604      	mov	r4, r0
		     output->control_block->offset,
   19276:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   19278:	6853      	ldr	r3, [r2, #4]
   1927a:	6812      	ldr	r2, [r2, #0]
   1927c:	6881      	ldr	r1, [r0, #8]
   1927e:	6800      	ldr	r0, [r0, #0]
   19280:	f7ff ffaf 	bl	191e2 <buffer_write>
	output->control_block->offset = 0;
   19284:	6863      	ldr	r3, [r4, #4]
   19286:	2200      	movs	r2, #0
   19288:	601a      	str	r2, [r3, #0]
}
   1928a:	bd10      	pop	{r4, pc}

0001928c <out_func>:
{
   1928c:	b538      	push	{r3, r4, r5, lr}
   1928e:	4605      	mov	r5, r0
   19290:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   19292:	684b      	ldr	r3, [r1, #4]
   19294:	681a      	ldr	r2, [r3, #0]
   19296:	68cb      	ldr	r3, [r1, #12]
   19298:	429a      	cmp	r2, r3
   1929a:	d00b      	beq.n	192b4 <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
   1929c:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1929e:	e8d3 2fef 	ldaex	r2, [r3]
   192a2:	1c51      	adds	r1, r2, #1
   192a4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   192a8:	2800      	cmp	r0, #0
   192aa:	d1f8      	bne.n	1929e <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   192ac:	68a3      	ldr	r3, [r4, #8]
   192ae:	549d      	strb	r5, [r3, r2]
}
   192b0:	2000      	movs	r0, #0
   192b2:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   192b4:	4608      	mov	r0, r1
   192b6:	f7ff ffdc 	bl	19272 <log_output_flush>
   192ba:	e7ef      	b.n	1929c <out_func+0x10>

000192bc <cr_out_func>:
{
   192bc:	b538      	push	{r3, r4, r5, lr}
   192be:	4604      	mov	r4, r0
   192c0:	460d      	mov	r5, r1
	out_func(c, ctx);
   192c2:	f7ff ffe3 	bl	1928c <out_func>
	if (c == '\n') {
   192c6:	2c0a      	cmp	r4, #10
   192c8:	d001      	beq.n	192ce <cr_out_func+0x12>
}
   192ca:	2000      	movs	r0, #0
   192cc:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   192ce:	4629      	mov	r1, r5
   192d0:	200d      	movs	r0, #13
   192d2:	f7ff ffdb 	bl	1928c <out_func>
   192d6:	e7f8      	b.n	192ca <cr_out_func+0xe>

000192d8 <virtio_notify_cb>:
{
   192d8:	b508      	push	{r3, lr}
	if (conf->mbox_tx.dev) {
   192da:	68cb      	ldr	r3, [r1, #12]
   192dc:	b14b      	cbz	r3, 192f2 <virtio_notify_cb+0x1a>
		mbox_send(&conf->mbox_tx, NULL);
   192de:	f101 0c0c 	add.w	ip, r1, #12
		(const struct mbox_driver_api *)channel->dev->api;
   192e2:	68c8      	ldr	r0, [r1, #12]
	const struct mbox_driver_api *api =
   192e4:	6883      	ldr	r3, [r0, #8]
	if (api->send == NULL) {
   192e6:	681b      	ldr	r3, [r3, #0]
   192e8:	b11b      	cbz	r3, 192f2 <virtio_notify_cb+0x1a>
	return api->send(channel->dev, channel->id, msg);
   192ea:	2200      	movs	r2, #0
   192ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
   192f0:	4798      	blx	r3
}
   192f2:	bd08      	pop	{r3, pc}

000192f4 <get_tx_buffer_size>:
	struct backend_data_t *data = instance->data;
   192f4:	6903      	ldr	r3, [r0, #16]
}
   192f6:	f8d3 0388 	ldr.w	r0, [r3, #904]	; 0x388
   192fa:	4770      	bx	lr

000192fc <drop_tx_buffer>:
}
   192fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19300:	4770      	bx	lr

00019302 <release_rx_buffer>:
	if (!rpmsg_ept) {
   19302:	b131      	cbz	r1, 19312 <release_rx_buffer+0x10>
{
   19304:	b508      	push	{r3, lr}
   19306:	4608      	mov	r0, r1
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   19308:	4611      	mov	r1, r2
   1930a:	f005 fcdc 	bl	1ecc6 <rpmsg_release_rx_buffer>
	return 0;
   1930e:	2000      	movs	r0, #0
}
   19310:	bd08      	pop	{r3, pc}
		return -ENOENT;
   19312:	f06f 0001 	mvn.w	r0, #1
}
   19316:	4770      	bx	lr

00019318 <hold_rx_buffer>:
	if (!rpmsg_ept) {
   19318:	b131      	cbz	r1, 19328 <hold_rx_buffer+0x10>
{
   1931a:	b508      	push	{r3, lr}
   1931c:	4608      	mov	r0, r1
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1931e:	4611      	mov	r1, r2
   19320:	f005 fcc7 	bl	1ecb2 <rpmsg_hold_rx_buffer>
	return 0;
   19324:	2000      	movs	r0, #0
}
   19326:	bd08      	pop	{r3, pc}
		return -ENOENT;
   19328:	f06f 0001 	mvn.w	r0, #1
}
   1932c:	4770      	bx	lr

0001932e <send_nocopy>:
{
   1932e:	b510      	push	{r4, lr}
   19330:	b082      	sub	sp, #8
   19332:	460c      	mov	r4, r1
	struct backend_data_t *data = instance->data;
   19334:	6901      	ldr	r1, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   19336:	f501 7161 	add.w	r1, r1, #900	; 0x384
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1933a:	e8d1 1faf 	lda	r1, [r1]
   1933e:	2902      	cmp	r1, #2
   19340:	d10a      	bne.n	19358 <send_nocopy+0x2a>
	if (len == 0) {
   19342:	b163      	cbz	r3, 1935e <send_nocopy+0x30>
	if (!rpmsg_ept) {
   19344:	b174      	cbz	r4, 19364 <send_nocopy+0x36>
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   19346:	9300      	str	r3, [sp, #0]
   19348:	4613      	mov	r3, r2
   1934a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1934c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1934e:	4620      	mov	r0, r4
   19350:	f7fc f842 	bl	153d8 <rpmsg_send_offchannel_nocopy>
}
   19354:	b002      	add	sp, #8
   19356:	bd10      	pop	{r4, pc}
		return -EBUSY;
   19358:	f06f 000f 	mvn.w	r0, #15
   1935c:	e7fa      	b.n	19354 <send_nocopy+0x26>
		return -EBADMSG;
   1935e:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   19362:	e7f7      	b.n	19354 <send_nocopy+0x26>
		return -ENOENT;
   19364:	f06f 0001 	mvn.w	r0, #1
   19368:	e7f4      	b.n	19354 <send_nocopy+0x26>

0001936a <get_tx_buffer>:
{
   1936a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1936e:	4690      	mov	r8, r2
   19370:	461e      	mov	r6, r3
   19372:	9b06      	ldr	r3, [sp, #24]
   19374:	9a07      	ldr	r2, [sp, #28]
	struct backend_data_t *data = instance->data;
   19376:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   19378:	b3a1      	cbz	r1, 193e4 <get_tx_buffer+0x7a>
   1937a:	460f      	mov	r7, r1
	if (!r_data || !size) {
   1937c:	f1b8 0f00 	cmp.w	r8, #0
   19380:	d033      	beq.n	193ea <get_tx_buffer+0x80>
   19382:	b3ae      	cbz	r6, 193f0 <get_tx_buffer+0x86>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   19384:	461c      	mov	r4, r3
   19386:	4615      	mov	r5, r2
   19388:	f1b2 3fff 	cmp.w	r2, #4294967295
   1938c:	bf08      	it	eq
   1938e:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   19392:	d001      	beq.n	19398 <get_tx_buffer+0x2e>
   19394:	4313      	orrs	r3, r2
   19396:	d11e      	bne.n	193d6 <get_tx_buffer+0x6c>
	if ((*size) && (*size > data->tx_buffer_size)) {
   19398:	6833      	ldr	r3, [r6, #0]
   1939a:	b11b      	cbz	r3, 193a4 <get_tx_buffer+0x3a>
   1939c:	f8d0 2388 	ldr.w	r2, [r0, #904]	; 0x388
   193a0:	4293      	cmp	r3, r2
   193a2:	d81b      	bhi.n	193dc <get_tx_buffer+0x72>
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   193a4:	ea04 0205 	and.w	r2, r4, r5
   193a8:	f1b2 3fff 	cmp.w	r2, #4294967295
   193ac:	bf14      	ite	ne
   193ae:	2200      	movne	r2, #0
   193b0:	2201      	moveq	r2, #1
   193b2:	4631      	mov	r1, r6
   193b4:	4638      	mov	r0, r7
   193b6:	f005 fc90 	bl	1ecda <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   193ba:	4603      	mov	r3, r0
   193bc:	b928      	cbnz	r0, 193ca <get_tx_buffer+0x60>
   193be:	f1b5 3fff 	cmp.w	r5, #4294967295
   193c2:	bf08      	it	eq
   193c4:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   193c8:	d0ec      	beq.n	193a4 <get_tx_buffer+0x3a>
	if (!payload) {
   193ca:	b1a3      	cbz	r3, 193f6 <get_tx_buffer+0x8c>
	(*r_data) = payload;
   193cc:	f8c8 3000 	str.w	r3, [r8]
	return 0;
   193d0:	2000      	movs	r0, #0
}
   193d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
   193d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   193da:	e7fa      	b.n	193d2 <get_tx_buffer+0x68>
		*size = data->tx_buffer_size;
   193dc:	6032      	str	r2, [r6, #0]
		return -ENOMEM;
   193de:	f06f 000b 	mvn.w	r0, #11
   193e2:	e7f6      	b.n	193d2 <get_tx_buffer+0x68>
		return -ENOENT;
   193e4:	f06f 0001 	mvn.w	r0, #1
   193e8:	e7f3      	b.n	193d2 <get_tx_buffer+0x68>
		return -EINVAL;
   193ea:	f06f 0015 	mvn.w	r0, #21
   193ee:	e7f0      	b.n	193d2 <get_tx_buffer+0x68>
   193f0:	f06f 0015 	mvn.w	r0, #21
   193f4:	e7ed      	b.n	193d2 <get_tx_buffer+0x68>
		return -ENOBUFS;
   193f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   193fa:	e7ea      	b.n	193d2 <get_tx_buffer+0x68>

000193fc <get_ept_slot_with_name>:
{
   193fc:	b570      	push	{r4, r5, r6, lr}
   193fe:	4605      	mov	r5, r0
   19400:	460e      	mov	r6, r1
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   19402:	2400      	movs	r4, #0
   19404:	2c01      	cmp	r4, #1
   19406:	d80f      	bhi.n	19428 <get_ept_slot_with_name+0x2c>
		if (strcmp(name, rpmsg_ept->name) == 0) {
   19408:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1940c:	011b      	lsls	r3, r3, #4
   1940e:	3340      	adds	r3, #64	; 0x40
   19410:	18e9      	adds	r1, r5, r3
   19412:	4630      	mov	r0, r6
   19414:	f000 fde9 	bl	19fea <strcmp>
   19418:	b108      	cbz	r0, 1941e <get_ept_slot_with_name+0x22>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   1941a:	3401      	adds	r4, #1
   1941c:	e7f2      	b.n	19404 <get_ept_slot_with_name+0x8>
			return &rpmsg_inst->endpoint[i];
   1941e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19422:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   19426:	e000      	b.n	1942a <get_ept_slot_with_name+0x2e>
	return NULL;
   19428:	2000      	movs	r0, #0
}
   1942a:	bd70      	pop	{r4, r5, r6, pc}

0001942c <get_ept>:
{
   1942c:	b538      	push	{r3, r4, r5, lr}
   1942e:	4605      	mov	r5, r0
   19430:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   19432:	4611      	mov	r1, r2
   19434:	f7ff ffe2 	bl	193fc <get_ept_slot_with_name>
	if (ept != NULL) {
   19438:	b110      	cbz	r0, 19440 <get_ept+0x14>
		(*rpmsg_ept) = ept;
   1943a:	6020      	str	r0, [r4, #0]
		return true;
   1943c:	2001      	movs	r0, #1
}
   1943e:	bd38      	pop	{r3, r4, r5, pc}
	ept = get_available_ept_slot(rpmsg_inst);
   19440:	4628      	mov	r0, r5
   19442:	f7ea fdeb 	bl	401c <get_available_ept_slot>
	if (ept != NULL) {
   19446:	b110      	cbz	r0, 1944e <get_ept+0x22>
		(*rpmsg_ept) = ept;
   19448:	6020      	str	r0, [r4, #0]
		return false;
   1944a:	2000      	movs	r0, #0
   1944c:	e7f7      	b.n	1943e <get_ept+0x12>
	(*rpmsg_ept) = NULL;
   1944e:	2000      	movs	r0, #0
   19450:	6020      	str	r0, [r4, #0]
	return false;
   19452:	e7f4      	b.n	1943e <get_ept+0x12>

00019454 <rpmsg_service_unbind>:
{
   19454:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   19456:	f005 fc84 	bl	1ed62 <rpmsg_destroy_ept>
}
   1945a:	bd08      	pop	{r3, pc}

0001945c <register_ept_on_host>:
{
   1945c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1945e:	b083      	sub	sp, #12
   19460:	4607      	mov	r7, r0
   19462:	460d      	mov	r5, r1
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   19464:	f500 76ce 	add.w	r6, r0, #412	; 0x19c
	return z_impl_k_mutex_lock(mutex, timeout);
   19468:	f04f 32ff 	mov.w	r2, #4294967295
   1946c:	f04f 33ff 	mov.w	r3, #4294967295
   19470:	4630      	mov	r0, r6
   19472:	f7fc fe99 	bl	161a8 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   19476:	682a      	ldr	r2, [r5, #0]
   19478:	a901      	add	r1, sp, #4
   1947a:	4638      	mov	r0, r7
   1947c:	f7ff ffd6 	bl	1942c <get_ept>
	if (rpmsg_ept == NULL) {
   19480:	9c01      	ldr	r4, [sp, #4]
   19482:	b1b4      	cbz	r4, 194b2 <register_ept_on_host+0x56>
	rpmsg_ept->cb = &cfg->cb;
   19484:	f105 0308 	add.w	r3, r5, #8
   19488:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   1948a:	696b      	ldr	r3, [r5, #20]
   1948c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->bound = false;
   1948e:	2300      	movs	r3, #0
   19490:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   19494:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   19496:	b180      	cbz	r0, 194ba <register_ept_on_host+0x5e>
	return z_impl_k_mutex_unlock(mutex);
   19498:	4630      	mov	r0, r6
   1949a:	f7fc ff0f 	bl	162bc <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   1949e:	9901      	ldr	r1, [sp, #4]
   194a0:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   194a2:	682a      	ldr	r2, [r5, #0]
   194a4:	4638      	mov	r0, r7
   194a6:	f7ea fdc1 	bl	402c <advertise_ept>
	return rpmsg_ept;
   194aa:	9c01      	ldr	r4, [sp, #4]
}
   194ac:	4620      	mov	r0, r4
   194ae:	b003      	add	sp, #12
   194b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   194b2:	4630      	mov	r0, r6
   194b4:	f7fc ff02 	bl	162bc <z_impl_k_mutex_unlock>
		return NULL;
   194b8:	e7f8      	b.n	194ac <register_ept_on_host+0x50>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   194ba:	2220      	movs	r2, #32
   194bc:	6829      	ldr	r1, [r5, #0]
   194be:	f104 0040 	add.w	r0, r4, #64	; 0x40
   194c2:	f000 fd65 	bl	19f90 <strncpy>
   194c6:	4630      	mov	r0, r6
   194c8:	f7fc fef8 	bl	162bc <z_impl_k_mutex_unlock>
   194cc:	e7ed      	b.n	194aa <register_ept_on_host+0x4e>

000194ce <ns_bind_cb>:
{
   194ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   194d0:	b083      	sub	sp, #12
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   194d2:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
	if (name == NULL || name[0] == '\0') {
   194d6:	b129      	cbz	r1, 194e4 <ns_bind_cb+0x16>
   194d8:	4616      	mov	r6, r2
   194da:	f5a4 77c4 	sub.w	r7, r4, #392	; 0x188
   194de:	460d      	mov	r5, r1
   194e0:	780b      	ldrb	r3, [r1, #0]
   194e2:	b90b      	cbnz	r3, 194e8 <ns_bind_cb+0x1a>
}
   194e4:	b003      	add	sp, #12
   194e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   194e8:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   194ea:	f04f 32ff 	mov.w	r2, #4294967295
   194ee:	f04f 33ff 	mov.w	r3, #4294967295
   194f2:	4620      	mov	r0, r4
   194f4:	f7fc fe58 	bl	161a8 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   194f8:	462a      	mov	r2, r5
   194fa:	a901      	add	r1, sp, #4
   194fc:	4638      	mov	r0, r7
   194fe:	f7ff ff95 	bl	1942c <get_ept>
	if (rpmsg_ept == NULL) {
   19502:	9b01      	ldr	r3, [sp, #4]
   19504:	b153      	cbz	r3, 1951c <ns_bind_cb+0x4e>
	if (ept_cached) {
   19506:	b168      	cbz	r0, 19524 <ns_bind_cb+0x56>
	return z_impl_k_mutex_unlock(mutex);
   19508:	4620      	mov	r0, r4
   1950a:	f7fc fed7 	bl	162bc <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   1950e:	4633      	mov	r3, r6
   19510:	462a      	mov	r2, r5
   19512:	9901      	ldr	r1, [sp, #4]
   19514:	4638      	mov	r0, r7
   19516:	f7ea fd89 	bl	402c <advertise_ept>
   1951a:	e7e3      	b.n	194e4 <ns_bind_cb+0x16>
   1951c:	4620      	mov	r0, r4
   1951e:	f7fc fecd 	bl	162bc <z_impl_k_mutex_unlock>
		return;
   19522:	e7df      	b.n	194e4 <ns_bind_cb+0x16>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   19524:	2220      	movs	r2, #32
   19526:	4629      	mov	r1, r5
   19528:	f103 0040 	add.w	r0, r3, #64	; 0x40
   1952c:	f000 fd30 	bl	19f90 <strncpy>
		rpmsg_ept->dest = dest;
   19530:	9b01      	ldr	r3, [sp, #4]
   19532:	661e      	str	r6, [r3, #96]	; 0x60
   19534:	4620      	mov	r0, r4
   19536:	f7fc fec1 	bl	162bc <z_impl_k_mutex_unlock>
   1953a:	e7d3      	b.n	194e4 <ns_bind_cb+0x16>

0001953c <register_ept_on_remote>:
{
   1953c:	b570      	push	{r4, r5, r6, lr}
   1953e:	4606      	mov	r6, r0
   19540:	460d      	mov	r5, r1
	rpmsg_ept = get_available_ept_slot(rpmsg_inst);
   19542:	f7ea fd6b 	bl	401c <get_available_ept_slot>
	if (rpmsg_ept == NULL) {
   19546:	4604      	mov	r4, r0
   19548:	b198      	cbz	r0, 19572 <register_ept_on_remote+0x36>
	rpmsg_ept->cb = &cfg->cb;
   1954a:	f105 0308 	add.w	r3, r5, #8
   1954e:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   19550:	696b      	ldr	r3, [r5, #20]
   19552:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   19554:	2300      	movs	r3, #0
   19556:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   1955a:	63e0      	str	r0, [r4, #60]	; 0x3c
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   1955c:	2220      	movs	r2, #32
   1955e:	6829      	ldr	r1, [r5, #0]
   19560:	3040      	adds	r0, #64	; 0x40
   19562:	f000 fd15 	bl	19f90 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   19566:	4622      	mov	r2, r4
   19568:	2101      	movs	r1, #1
   1956a:	4630      	mov	r0, r6
   1956c:	f7ea feca 	bl	4304 <ipc_rpmsg_register_ept>
	if (err != 0) {
   19570:	b908      	cbnz	r0, 19576 <register_ept_on_remote+0x3a>
}
   19572:	4620      	mov	r0, r4
   19574:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   19576:	2400      	movs	r4, #0
   19578:	e7fb      	b.n	19572 <register_ept_on_remote+0x36>

0001957a <register_ept>:
	struct backend_data_t *data = instance->data;
   1957a:	6900      	ldr	r0, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   1957c:	f500 7361 	add.w	r3, r0, #900	; 0x384
   19580:	e8d3 3faf 	lda	r3, [r3]
   19584:	2b02      	cmp	r3, #2
   19586:	d112      	bne.n	195ae <register_ept+0x34>
{
   19588:	b510      	push	{r4, lr}
   1958a:	460c      	mov	r4, r1
   1958c:	4611      	mov	r1, r2
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   1958e:	6813      	ldr	r3, [r2, #0]
   19590:	b183      	cbz	r3, 195b4 <register_ept+0x3a>
   19592:	781b      	ldrb	r3, [r3, #0]
   19594:	b18b      	cbz	r3, 195ba <register_ept+0x40>
	rpmsg_ept = (data->role == ROLE_HOST) ?
   19596:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
			register_ept_on_host(rpmsg_inst, cfg) :
   1959a:	b92b      	cbnz	r3, 195a8 <register_ept+0x2e>
   1959c:	f7ff ff5e 	bl	1945c <register_ept_on_host>
	if (rpmsg_ept == NULL) {
   195a0:	b170      	cbz	r0, 195c0 <register_ept+0x46>
	(*token) = rpmsg_ept;
   195a2:	6020      	str	r0, [r4, #0]
	return 0;
   195a4:	2000      	movs	r0, #0
}
   195a6:	bd10      	pop	{r4, pc}
			register_ept_on_remote(rpmsg_inst, cfg);
   195a8:	f7ff ffc8 	bl	1953c <register_ept_on_remote>
   195ac:	e7f8      	b.n	195a0 <register_ept+0x26>
		return -EBUSY;
   195ae:	f06f 000f 	mvn.w	r0, #15
}
   195b2:	4770      	bx	lr
		return -EINVAL;
   195b4:	f06f 0015 	mvn.w	r0, #21
   195b8:	e7f5      	b.n	195a6 <register_ept+0x2c>
   195ba:	f06f 0015 	mvn.w	r0, #21
   195be:	e7f2      	b.n	195a6 <register_ept+0x2c>
		return -EINVAL;
   195c0:	f06f 0015 	mvn.w	r0, #21
   195c4:	e7ef      	b.n	195a6 <register_ept+0x2c>

000195c6 <ept_cb>:
{
   195c6:	b510      	push	{r4, lr}
   195c8:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   195ca:	b142      	cbz	r2, 195de <ept_cb+0x18>
   195cc:	4608      	mov	r0, r1
   195ce:	4611      	mov	r1, r2
	if (ept->cb->received) {
   195d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   195d2:	6854      	ldr	r4, [r2, #4]
   195d4:	b10c      	cbz	r4, 195da <ept_cb+0x14>
		ept->cb->received(data, len, ept->priv);
   195d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   195d8:	47a0      	blx	r4
}
   195da:	2000      	movs	r0, #0
   195dc:	bd10      	pop	{r4, pc}
		if (!ept->bound) {
   195de:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   195e2:	2a00      	cmp	r2, #0
   195e4:	d1f9      	bne.n	195da <ept_cb+0x14>
			ept->bound = true;
   195e6:	2201      	movs	r2, #1
   195e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   195ec:	4618      	mov	r0, r3
   195ee:	f7ea fd3b 	bl	4068 <bound_cb>
		return RPMSG_SUCCESS;
   195f2:	e7f2      	b.n	195da <ept_cb+0x14>

000195f4 <vr_shm_configure>:
{
   195f4:	b530      	push	{r4, r5, lr}
	num_desc = optimal_num_desc(conf->shm_size, conf->buffer_size);
   195f6:	688c      	ldr	r4, [r1, #8]
   195f8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   195fa:	3c04      	subs	r4, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   195fc:	3226      	adds	r2, #38	; 0x26
   195fe:	0052      	lsls	r2, r2, #1

	num_desc = (unsigned int) (available / single_alloc);
   19600:	fbb4 fcf2 	udiv	ip, r4, r2
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   19604:	42a2      	cmp	r2, r4
   19606:	d842      	bhi.n	1968e <vr_shm_configure+0x9a>
		return 0;
	}

	return 32 - __builtin_clz(op);
   19608:	fabc fc8c 	clz	ip, ip
   1960c:	f1cc 0c20 	rsb	ip, ip, #32

	return (1 << (find_msb_set(num_desc) - 1));
   19610:	f10c 3cff 	add.w	ip, ip, #4294967295
   19614:	2201      	movs	r2, #1
	if (num_desc == 0) {
   19616:	fa12 f20c 	lsls.w	r2, r2, ip
   1961a:	d03b      	beq.n	19694 <vr_shm_configure+0xa0>
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   1961c:	684c      	ldr	r4, [r1, #4]
   1961e:	1d25      	adds	r5, r4, #4
   19620:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   19624:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	return (buf_size * num);
   19626:	fb02 f303 	mul.w	r3, r2, r3
	return (VDEV_STATUS_SIZE + (VRING_COUNT * vq_ring_size(num, buf_size)) +
   1962a:	1c9c      	adds	r4, r3, #2
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1962c:	1cd3      	adds	r3, r2, #3
   1962e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
   19632:	eb0e 1302 	add.w	r3, lr, r2, lsl #4
	size = (size + align - 1) & ~(align - 1);
   19636:	3303      	adds	r3, #3
   19638:	f023 0303 	bic.w	r3, r3, #3
	size += sizeof(struct vring_used) +
   1963c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19640:	3306      	adds	r3, #6
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   19642:	005b      	lsls	r3, r3, #1
	return (VDEV_STATUS_SIZE + (VRING_COUNT * vq_ring_size(num, buf_size)) +
   19644:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   19648:	3b04      	subs	r3, #4
   1964a:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   1964e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return (buf_size * num);
   19650:	fa04 f40c 	lsl.w	r4, r4, ip
   19654:	eb05 0444 	add.w	r4, r5, r4, lsl #1
   19658:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
	size = num * sizeof(struct vring_desc);
   1965c:	2310      	movs	r3, #16
   1965e:	fa03 f30c 	lsl.w	r3, r3, ip
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   19662:	4473      	add	r3, lr
	size = (size + align - 1) & ~(align - 1);
   19664:	3303      	adds	r3, #3
   19666:	f023 0303 	bic.w	r3, r3, #3
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   1966a:	2508      	movs	r5, #8
   1966c:	fa05 fc0c 	lsl.w	ip, r5, ip
	size += sizeof(struct vring_used) +
   19670:	4463      	add	r3, ip
   19672:	3306      	adds	r3, #6
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   19674:	4423      	add	r3, r4
   19676:	3303      	adds	r3, #3
   19678:	f023 0303 	bic.w	r3, r3, #3
   1967c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	vr->status_reg_addr = conf->shm_addr;
   19680:	684b      	ldr	r3, [r1, #4]
   19682:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	vr->vring_size = num_desc;
   19686:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	return 0;
   1968a:	2000      	movs	r0, #0
}
   1968c:	bd30      	pop	{r4, r5, pc}
		return 0;
   1968e:	f04f 0c00 	mov.w	ip, #0
   19692:	e7bd      	b.n	19610 <vr_shm_configure+0x1c>
		return -ENOMEM;
   19694:	f06f 000b 	mvn.w	r0, #11
   19698:	e7f8      	b.n	1968c <vr_shm_configure+0x98>

0001969a <mbox_callback>:
{
   1969a:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   1969c:	f502 7126 	add.w	r1, r2, #664	; 0x298
   196a0:	f502 702a 	add.w	r0, r2, #680	; 0x2a8
   196a4:	f006 f89e 	bl	1f7e4 <k_work_submit_to_queue>
}
   196a8:	bd08      	pop	{r3, pc}

000196aa <mbox_callback_process>:
{
   196aa:	b508      	push	{r3, lr}
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   196ac:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   196b0:	f5a0 7026 	sub.w	r0, r0, #664	; 0x298
   196b4:	3b00      	subs	r3, #0
   196b6:	bf18      	it	ne
   196b8:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   196ba:	33a0      	adds	r3, #160	; 0xa0
   196bc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   196c0:	6840      	ldr	r0, [r0, #4]
   196c2:	f005 fa79 	bl	1ebb8 <virtqueue_notification>
}
   196c6:	bd08      	pop	{r3, pc}

000196c8 <backend_init>:
{
   196c8:	b510      	push	{r4, lr}
	const struct backend_config_t *conf = instance->config;
   196ca:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   196cc:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   196ce:	681b      	ldr	r3, [r3, #0]
   196d0:	f8c4 3380 	str.w	r3, [r4, #896]	; 0x380
	k_mutex_init(&data->rpmsg_inst.mtx);
   196d4:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
	return z_impl_k_mutex_init(mutex);
   196d8:	f005 fefa 	bl	1f4d0 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   196dc:	f504 7461 	add.w	r4, r4, #900	; 0x384
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   196e0:	2000      	movs	r0, #0
   196e2:	e8d4 3fef 	ldaex	r3, [r4]
   196e6:	e8c4 0fe2 	stlex	r2, r0, [r4]
   196ea:	2a00      	cmp	r2, #0
   196ec:	d1f9      	bne.n	196e2 <backend_init+0x1a>
}
   196ee:	bd10      	pop	{r4, pc}

000196f0 <rpmsg_service_unbind>:
{
   196f0:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   196f2:	f005 fb36 	bl	1ed62 <rpmsg_destroy_ept>
}
   196f6:	bd08      	pop	{r3, pc}

000196f8 <virtio_notify>:
{
   196f8:	b508      	push	{r3, lr}
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   196fa:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   196fc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   19700:	b113      	cbz	r3, 19708 <virtio_notify+0x10>
		vr->notify_cb(vq, vr->priv);
   19702:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   19706:	4798      	blx	r3
}
   19708:	bd08      	pop	{r3, pc}

0001970a <virtio_set_features>:
}
   1970a:	4770      	bx	lr

0001970c <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   1970c:	6983      	ldr	r3, [r0, #24]
   1970e:	b913      	cbnz	r3, 19716 <virtio_set_status+0xa>
	sys_write8(status, vr->status_reg_addr);
   19710:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   19714:	7019      	strb	r1, [r3, #0]
}
   19716:	4770      	bx	lr

00019718 <virtio_get_features>:
}
   19718:	2001      	movs	r0, #1
   1971a:	4770      	bx	lr

0001971c <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   1971c:	6983      	ldr	r3, [r0, #24]
   1971e:	2b01      	cmp	r3, #1
   19720:	d001      	beq.n	19726 <virtio_get_status+0xa>
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   19722:	2004      	movs	r0, #4
}
   19724:	4770      	bx	lr
		ret = sys_read8(vr->status_reg_addr);
   19726:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
   1972a:	7818      	ldrb	r0, [r3, #0]
   1972c:	b2c0      	uxtb	r0, r0
   1972e:	4770      	bx	lr

00019730 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   19730:	2000      	movs	r0, #0
   19732:	4770      	bx	lr

00019734 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   19734:	428b      	cmp	r3, r1
   19736:	d901      	bls.n	1973c <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   19738:	2000      	movs	r0, #0
	}
}
   1973a:	4770      	bx	lr
{
   1973c:	b510      	push	{r4, lr}
   1973e:	4694      	mov	ip, r2
   19740:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   19742:	461a      	mov	r2, r3
   19744:	4661      	mov	r1, ip
   19746:	f000 fc80 	bl	1a04a <memcpy>
		return from_len;
   1974a:	4620      	mov	r0, r4
}
   1974c:	bd10      	pop	{r4, pc}

0001974e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   1974e:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   19750:	f000 fcaa 	bl	1a0a8 <memset>
}
   19754:	bd08      	pop	{r3, pc}

00019756 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   19756:	09c3      	lsrs	r3, r0, #7
   19758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1975c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19760:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   19764:	b2c0      	uxtb	r0, r0
   19766:	4770      	bx	lr

00019768 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   19768:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1976a:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   1976e:	2a00      	cmp	r2, #0
   19770:	db04      	blt.n	1977c <gf_double+0x14>
   19772:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   19776:	f100 020f 	add.w	r2, r0, #15
   1977a:	e006      	b.n	1978a <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1977c:	f04f 0c87 	mov.w	ip, #135	; 0x87
   19780:	e7f9      	b.n	19776 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   19782:	f813 0901 	ldrb.w	r0, [r3], #-1
   19786:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   1978a:	7818      	ldrb	r0, [r3, #0]
   1978c:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   19790:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   19794:	428b      	cmp	r3, r1
   19796:	d1f4      	bne.n	19782 <gf_double+0x1a>
	}
}
   19798:	4770      	bx	lr

0001979a <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   1979a:	b130      	cbz	r0, 197aa <tc_cmac_erase+0x10>
{
   1979c:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1979e:	2258      	movs	r2, #88	; 0x58
   197a0:	2100      	movs	r1, #0
   197a2:	f7ff ffd4 	bl	1974e <_set>

	return TC_CRYPTO_SUCCESS;
   197a6:	2001      	movs	r0, #1
}
   197a8:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   197aa:	2000      	movs	r0, #0
}
   197ac:	4770      	bx	lr

000197ae <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   197ae:	b1a0      	cbz	r0, 197da <tc_cmac_init+0x2c>
{
   197b0:	b510      	push	{r4, lr}
   197b2:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   197b4:	2210      	movs	r2, #16
   197b6:	2100      	movs	r1, #0
   197b8:	f7ff ffc9 	bl	1974e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   197bc:	2210      	movs	r2, #16
   197be:	2100      	movs	r1, #0
   197c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   197c4:	f7ff ffc3 	bl	1974e <_set>
	s->leftover_offset = 0;
   197c8:	2300      	movs	r3, #0
   197ca:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   197cc:	2200      	movs	r2, #0
   197ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   197d2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   197d6:	2001      	movs	r0, #1
}
   197d8:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   197da:	2000      	movs	r0, #0
}
   197dc:	4770      	bx	lr

000197de <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   197de:	b338      	cbz	r0, 19830 <tc_cmac_setup+0x52>
{
   197e0:	b570      	push	{r4, r5, r6, lr}
   197e2:	460d      	mov	r5, r1
   197e4:	4616      	mov	r6, r2
   197e6:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   197e8:	b321      	cbz	r1, 19834 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   197ea:	2258      	movs	r2, #88	; 0x58
   197ec:	2100      	movs	r1, #0
   197ee:	f7ff ffae 	bl	1974e <_set>
	s->sched = sched;
   197f2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   197f4:	4629      	mov	r1, r5
   197f6:	4630      	mov	r0, r6
   197f8:	f7ea ffe2 	bl	47c0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   197fc:	2210      	movs	r2, #16
   197fe:	2100      	movs	r1, #0
   19800:	4620      	mov	r0, r4
   19802:	f7ff ffa4 	bl	1974e <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   19806:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19808:	4621      	mov	r1, r4
   1980a:	4620      	mov	r0, r4
   1980c:	f7eb f83a 	bl	4884 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   19810:	f104 0510 	add.w	r5, r4, #16
   19814:	4621      	mov	r1, r4
   19816:	4628      	mov	r0, r5
   19818:	f7ff ffa6 	bl	19768 <gf_double>
	gf_double (s->K2, s->K1);
   1981c:	4629      	mov	r1, r5
   1981e:	f104 0020 	add.w	r0, r4, #32
   19822:	f7ff ffa1 	bl	19768 <gf_double>
	tc_cmac_init(s);
   19826:	4620      	mov	r0, r4
   19828:	f7ff ffc1 	bl	197ae <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1982c:	2001      	movs	r0, #1
}
   1982e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19830:	2000      	movs	r0, #0
}
   19832:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19834:	2000      	movs	r0, #0
   19836:	e7fa      	b.n	1982e <tc_cmac_setup+0x50>

00019838 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19838:	2800      	cmp	r0, #0
   1983a:	d064      	beq.n	19906 <tc_cmac_update+0xce>
{
   1983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19840:	460d      	mov	r5, r1
   19842:	4616      	mov	r6, r2
   19844:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   19846:	2a00      	cmp	r2, #0
   19848:	d05f      	beq.n	1990a <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1984a:	2900      	cmp	r1, #0
   1984c:	d060      	beq.n	19910 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1984e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   19850:	6d42      	ldr	r2, [r0, #84]	; 0x54
   19852:	ea53 0102 	orrs.w	r1, r3, r2
   19856:	d05d      	beq.n	19914 <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   19858:	3b01      	subs	r3, #1
   1985a:	f142 32ff 	adc.w	r2, r2, #4294967295
   1985e:	6503      	str	r3, [r0, #80]	; 0x50
   19860:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   19862:	6c47      	ldr	r7, [r0, #68]	; 0x44
   19864:	2f00      	cmp	r7, #0
   19866:	d03d      	beq.n	198e4 <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   19868:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   1986c:	4546      	cmp	r6, r8
   1986e:	d30d      	bcc.n	1988c <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   19870:	f107 0030 	add.w	r0, r7, #48	; 0x30
   19874:	4643      	mov	r3, r8
   19876:	462a      	mov	r2, r5
   19878:	4641      	mov	r1, r8
   1987a:	4420      	add	r0, r4
   1987c:	f7ff ff5a 	bl	19734 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   19880:	3f10      	subs	r7, #16
   19882:	443e      	add	r6, r7
		data += remaining_space;
   19884:	4445      	add	r5, r8
		s->leftover_offset = 0;
   19886:	2300      	movs	r3, #0
   19888:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1988a:	e013      	b.n	198b4 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1988c:	f107 0030 	add.w	r0, r7, #48	; 0x30
   19890:	4633      	mov	r3, r6
   19892:	462a      	mov	r2, r5
   19894:	4631      	mov	r1, r6
   19896:	4420      	add	r0, r4
   19898:	f7ff ff4c 	bl	19734 <_copy>
			s->leftover_offset += data_length;
   1989c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1989e:	4433      	add	r3, r6
   198a0:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   198a2:	2001      	movs	r0, #1
   198a4:	e032      	b.n	1990c <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   198a6:	18e2      	adds	r2, r4, r3
   198a8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   198ac:	5ce1      	ldrb	r1, [r4, r3]
   198ae:	404a      	eors	r2, r1
   198b0:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   198b2:	3301      	adds	r3, #1
   198b4:	2b0f      	cmp	r3, #15
   198b6:	d9f6      	bls.n	198a6 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   198b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   198ba:	4621      	mov	r1, r4
   198bc:	4620      	mov	r0, r4
   198be:	f7ea ffe1 	bl	4884 <tc_aes_encrypt>
   198c2:	e00f      	b.n	198e4 <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   198c4:	5ce8      	ldrb	r0, [r5, r3]
   198c6:	f814 c003 	ldrb.w	ip, [r4, r3]
   198ca:	ea80 000c 	eor.w	r0, r0, ip
   198ce:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   198d0:	3301      	adds	r3, #1
   198d2:	2b0f      	cmp	r3, #15
   198d4:	d9f6      	bls.n	198c4 <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   198d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   198d8:	4621      	mov	r1, r4
   198da:	4620      	mov	r0, r4
   198dc:	f7ea ffd2 	bl	4884 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   198e0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   198e2:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   198e4:	2e10      	cmp	r6, #16
   198e6:	d901      	bls.n	198ec <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   198e8:	2300      	movs	r3, #0
   198ea:	e7f2      	b.n	198d2 <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   198ec:	b90e      	cbnz	r6, 198f2 <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   198ee:	2001      	movs	r0, #1
   198f0:	e00c      	b.n	1990c <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   198f2:	4633      	mov	r3, r6
   198f4:	462a      	mov	r2, r5
   198f6:	4631      	mov	r1, r6
   198f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   198fc:	f7ff ff1a 	bl	19734 <_copy>
		s->leftover_offset = data_length;
   19900:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   19902:	2001      	movs	r0, #1
   19904:	e002      	b.n	1990c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   19906:	2000      	movs	r0, #0
}
   19908:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   1990a:	2001      	movs	r0, #1
}
   1990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   19910:	2000      	movs	r0, #0
   19912:	e7fb      	b.n	1990c <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   19914:	2000      	movs	r0, #0
   19916:	e7f9      	b.n	1990c <tc_cmac_update+0xd4>

00019918 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19918:	b370      	cbz	r0, 19978 <tc_cmac_final+0x60>
{
   1991a:	b538      	push	{r3, r4, r5, lr}
   1991c:	460c      	mov	r4, r1
   1991e:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   19920:	b361      	cbz	r1, 1997c <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   19922:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   19924:	2a10      	cmp	r2, #16
   19926:	d102      	bne.n	1992e <tc_cmac_final+0x16>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   19928:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1992a:	2300      	movs	r3, #0
   1992c:	e018      	b.n	19960 <tc_cmac_final+0x48>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1992e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   19932:	f1c2 0210 	rsb	r2, r2, #16
   19936:	2100      	movs	r1, #0
   19938:	4420      	add	r0, r4
   1993a:	f7ff ff08 	bl	1974e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1993e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19940:	4423      	add	r3, r4
   19942:	2280      	movs	r2, #128	; 0x80
   19944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   19948:	f104 0120 	add.w	r1, r4, #32
   1994c:	e7ed      	b.n	1992a <tc_cmac_final+0x12>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1994e:	18e2      	adds	r2, r4, r3
   19950:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   19954:	5cc8      	ldrb	r0, [r1, r3]
   19956:	4050      	eors	r0, r2
   19958:	5ce2      	ldrb	r2, [r4, r3]
   1995a:	4042      	eors	r2, r0
   1995c:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1995e:	3301      	adds	r3, #1
   19960:	2b0f      	cmp	r3, #15
   19962:	d9f4      	bls.n	1994e <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   19964:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19966:	4621      	mov	r1, r4
   19968:	4628      	mov	r0, r5
   1996a:	f7ea ff8b 	bl	4884 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1996e:	4620      	mov	r0, r4
   19970:	f7ff ff13 	bl	1979a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   19974:	2001      	movs	r0, #1
}
   19976:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19978:	2000      	movs	r0, #0
}
   1997a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1997c:	2000      	movs	r0, #0
   1997e:	e7fa      	b.n	19976 <tc_cmac_final+0x5e>

00019980 <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
   19980:	b328      	cbz	r0, 199ce <tc_sha256_update+0x4e>
{
   19982:	b570      	push	{r4, r5, r6, lr}
   19984:	460c      	mov	r4, r1
   19986:	4605      	mov	r5, r0
	if (s == (TCSha256State_t) 0 ||
   19988:	b319      	cbz	r1, 199d2 <tc_sha256_update+0x52>
	} else if (datalen == 0) {
   1998a:	b912      	cbnz	r2, 19992 <tc_sha256_update+0x12>
		return TC_CRYPTO_SUCCESS;
   1998c:	2001      	movs	r0, #1
   1998e:	e01d      	b.n	199cc <tc_sha256_update+0x4c>
{
   19990:	4632      	mov	r2, r6
	while (datalen-- > 0) {
   19992:	1e56      	subs	r6, r2, #1
   19994:	b1ca      	cbz	r2, 199ca <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
   19996:	6eab      	ldr	r3, [r5, #104]	; 0x68
   19998:	1c5a      	adds	r2, r3, #1
   1999a:	66aa      	str	r2, [r5, #104]	; 0x68
   1999c:	f814 1b01 	ldrb.w	r1, [r4], #1
   199a0:	442b      	add	r3, r5
   199a2:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   199a6:	2a3f      	cmp	r2, #63	; 0x3f
   199a8:	d9f2      	bls.n	19990 <tc_sha256_update+0x10>
			compress(s->iv, s->leftover);
   199aa:	f105 0128 	add.w	r1, r5, #40	; 0x28
   199ae:	4628      	mov	r0, r5
   199b0:	f7eb fada 	bl	4f68 <compress>
			s->leftover_offset = 0;
   199b4:	2300      	movs	r3, #0
   199b6:	66ab      	str	r3, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   199b8:	6a2b      	ldr	r3, [r5, #32]
   199ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   199bc:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   199c0:	f142 0200 	adc.w	r2, r2, #0
   199c4:	622b      	str	r3, [r5, #32]
   199c6:	626a      	str	r2, [r5, #36]	; 0x24
   199c8:	e7e2      	b.n	19990 <tc_sha256_update+0x10>
	return TC_CRYPTO_SUCCESS;
   199ca:	2001      	movs	r0, #1
}
   199cc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   199ce:	2000      	movs	r0, #0
}
   199d0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   199d2:	2000      	movs	r0, #0
   199d4:	e7fa      	b.n	199cc <tc_sha256_update+0x4c>

000199d6 <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
   199d6:	2800      	cmp	r0, #0
   199d8:	d065      	beq.n	19aa6 <tc_sha256_final+0xd0>
{
   199da:	b570      	push	{r4, r5, r6, lr}
   199dc:	460d      	mov	r5, r1
   199de:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
   199e0:	2900      	cmp	r1, #0
   199e2:	d062      	beq.n	19aaa <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
   199e4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   199e6:	00d8      	lsls	r0, r3, #3
   199e8:	6a0a      	ldr	r2, [r1, #32]
   199ea:	6a49      	ldr	r1, [r1, #36]	; 0x24
   199ec:	1812      	adds	r2, r2, r0
   199ee:	f141 0100 	adc.w	r1, r1, #0
   199f2:	622a      	str	r2, [r5, #32]
   199f4:	6269      	str	r1, [r5, #36]	; 0x24
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   199f6:	1c58      	adds	r0, r3, #1
   199f8:	66a8      	str	r0, [r5, #104]	; 0x68
   199fa:	442b      	add	r3, r5
   199fc:	2280      	movs	r2, #128	; 0x80
   199fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   19a02:	2838      	cmp	r0, #56	; 0x38
   19a04:	d82a      	bhi.n	19a5c <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
   19a06:	f105 0628 	add.w	r6, r5, #40	; 0x28
   19a0a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   19a0c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   19a10:	2100      	movs	r1, #0
   19a12:	4430      	add	r0, r6
   19a14:	f7ff fe9b 	bl	1974e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   19a18:	6a2a      	ldr	r2, [r5, #32]
   19a1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19a1c:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
   19a20:	f3c2 2107 	ubfx	r1, r2, #8, #8
   19a24:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
   19a28:	f3c2 4107 	ubfx	r1, r2, #16, #8
   19a2c:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   19a30:	0e12      	lsrs	r2, r2, #24
   19a32:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   19a36:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   19a3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   19a3e:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   19a42:	f3c3 4207 	ubfx	r2, r3, #16, #8
   19a46:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   19a4a:	0e1b      	lsrs	r3, r3, #24
   19a4c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
   19a50:	4631      	mov	r1, r6
   19a52:	4628      	mov	r0, r5
   19a54:	f7eb fa88 	bl	4f68 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   19a58:	2200      	movs	r2, #0
   19a5a:	e01b      	b.n	19a94 <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
   19a5c:	f105 0628 	add.w	r6, r5, #40	; 0x28
   19a60:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   19a64:	2100      	movs	r1, #0
   19a66:	4430      	add	r0, r6
   19a68:	f7ff fe71 	bl	1974e <_set>
		compress(s->iv, s->leftover);
   19a6c:	4631      	mov	r1, r6
   19a6e:	4628      	mov	r0, r5
   19a70:	f7eb fa7a 	bl	4f68 <compress>
		s->leftover_offset = 0;
   19a74:	2300      	movs	r3, #0
   19a76:	66ab      	str	r3, [r5, #104]	; 0x68
   19a78:	e7c5      	b.n	19a06 <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
   19a7a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
   19a7e:	0e19      	lsrs	r1, r3, #24
   19a80:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
   19a82:	f3c3 4107 	ubfx	r1, r3, #16, #8
   19a86:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
   19a88:	f3c3 2107 	ubfx	r1, r3, #8, #8
   19a8c:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
   19a8e:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   19a90:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
   19a92:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   19a94:	2a07      	cmp	r2, #7
   19a96:	d9f0      	bls.n	19a7a <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
   19a98:	2270      	movs	r2, #112	; 0x70
   19a9a:	2100      	movs	r1, #0
   19a9c:	4628      	mov	r0, r5
   19a9e:	f7ff fe56 	bl	1974e <_set>
	return TC_CRYPTO_SUCCESS;
   19aa2:	2001      	movs	r0, #1
}
   19aa4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19aa6:	2000      	movs	r0, #0
}
   19aa8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19aaa:	2000      	movs	r0, #0
   19aac:	e7fa      	b.n	19aa4 <tc_sha256_final+0xce>

00019aae <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   19aae:	b500      	push	{lr}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   19ab0:	2300      	movs	r3, #0
   19ab2:	e00e      	b.n	19ad2 <rekey+0x24>
		key[i] = inner_pad ^ new_key[i];
   19ab4:	f811 c003 	ldrb.w	ip, [r1, r3]
   19ab8:	f08c 0c36 	eor.w	ip, ip, #54	; 0x36
   19abc:	f800 c003 	strb.w	ip, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   19ac0:	f811 c003 	ldrb.w	ip, [r1, r3]
   19ac4:	f103 0e40 	add.w	lr, r3, #64	; 0x40
   19ac8:	f08c 0c5c 	eor.w	ip, ip, #92	; 0x5c
   19acc:	f800 c00e 	strb.w	ip, [r0, lr]
	for (i = 0; i < key_size; ++i) {
   19ad0:	3301      	adds	r3, #1
   19ad2:	4293      	cmp	r3, r2
   19ad4:	d3ee      	bcc.n	19ab4 <rekey+0x6>
   19ad6:	e006      	b.n	19ae6 <rekey+0x38>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   19ad8:	2236      	movs	r2, #54	; 0x36
   19ada:	54c2      	strb	r2, [r0, r3]
   19adc:	f103 0240 	add.w	r2, r3, #64	; 0x40
   19ae0:	215c      	movs	r1, #92	; 0x5c
   19ae2:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   19ae4:	3301      	adds	r3, #1
   19ae6:	2b3f      	cmp	r3, #63	; 0x3f
   19ae8:	d9f6      	bls.n	19ad8 <rekey+0x2a>
	}
}
   19aea:	f85d fb04 	ldr.w	pc, [sp], #4

00019aee <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   19aee:	b388      	cbz	r0, 19b54 <tc_hmac_set_key+0x66>
{
   19af0:	b570      	push	{r4, r5, r6, lr}
   19af2:	b0cc      	sub	sp, #304	; 0x130
   19af4:	460d      	mov	r5, r1
   19af6:	4614      	mov	r4, r2
   19af8:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
   19afa:	b369      	cbz	r1, 19b58 <tc_hmac_set_key+0x6a>
	    key == (const uint8_t *) 0 ||
   19afc:	b372      	cbz	r2, 19b5c <tc_hmac_set_key+0x6e>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   19afe:	2a40      	cmp	r2, #64	; 0x40
   19b00:	d813      	bhi.n	19b2a <tc_hmac_set_key+0x3c>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   19b02:	4668      	mov	r0, sp
   19b04:	f7eb fb10 	bl	5128 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   19b08:	4622      	mov	r2, r4
   19b0a:	a93c      	add	r1, sp, #240	; 0xf0
   19b0c:	4668      	mov	r0, sp
   19b0e:	f7ff ff37 	bl	19980 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   19b12:	4669      	mov	r1, sp
   19b14:	a824      	add	r0, sp, #144	; 0x90
   19b16:	f7ff ff5e 	bl	199d6 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   19b1a:	4622      	mov	r2, r4
   19b1c:	4629      	mov	r1, r5
   19b1e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   19b22:	f7ff ffc4 	bl	19aae <rekey>
		rekey(ctx->key,
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   19b26:	2001      	movs	r0, #1
   19b28:	e019      	b.n	19b5e <tc_hmac_set_key+0x70>
		(void)tc_sha256_init(&ctx->hash_state);
   19b2a:	f7eb fafd 	bl	5128 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   19b2e:	4622      	mov	r2, r4
   19b30:	4629      	mov	r1, r5
   19b32:	4630      	mov	r0, r6
   19b34:	f7ff ff24 	bl	19980 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   19b38:	f106 0490 	add.w	r4, r6, #144	; 0x90
   19b3c:	4631      	mov	r1, r6
   19b3e:	4620      	mov	r0, r4
   19b40:	f7ff ff49 	bl	199d6 <tc_sha256_final>
		rekey(ctx->key,
   19b44:	2220      	movs	r2, #32
   19b46:	4621      	mov	r1, r4
   19b48:	f106 0070 	add.w	r0, r6, #112	; 0x70
   19b4c:	f7ff ffaf 	bl	19aae <rekey>
	return TC_CRYPTO_SUCCESS;
   19b50:	2001      	movs	r0, #1
   19b52:	e004      	b.n	19b5e <tc_hmac_set_key+0x70>
		return TC_CRYPTO_FAIL;
   19b54:	2000      	movs	r0, #0
}
   19b56:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19b58:	2000      	movs	r0, #0
   19b5a:	e000      	b.n	19b5e <tc_hmac_set_key+0x70>
   19b5c:	2000      	movs	r0, #0
}
   19b5e:	b04c      	add	sp, #304	; 0x130
   19b60:	bd70      	pop	{r4, r5, r6, pc}

00019b62 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   19b62:	b158      	cbz	r0, 19b7c <tc_hmac_init+0x1a>
{
   19b64:	b510      	push	{r4, lr}
   19b66:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   19b68:	f7eb fade 	bl	5128 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   19b6c:	2240      	movs	r2, #64	; 0x40
   19b6e:	f104 0170 	add.w	r1, r4, #112	; 0x70
   19b72:	4620      	mov	r0, r4
   19b74:	f7ff ff04 	bl	19980 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   19b78:	2001      	movs	r0, #1
}
   19b7a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   19b7c:	2000      	movs	r0, #0
}
   19b7e:	4770      	bx	lr

00019b80 <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   19b80:	b120      	cbz	r0, 19b8c <tc_hmac_update+0xc>
{
   19b82:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   19b84:	f7ff fefc 	bl	19980 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   19b88:	2001      	movs	r0, #1
}
   19b8a:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   19b8c:	2000      	movs	r0, #0
}
   19b8e:	4770      	bx	lr

00019b90 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19b90:	b308      	cbz	r0, 19bd6 <tc_hmac_final+0x46>
{
   19b92:	b538      	push	{r3, r4, r5, lr}
   19b94:	4614      	mov	r4, r2
   19b96:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   19b98:	2920      	cmp	r1, #32
   19b9a:	d11e      	bne.n	19bda <tc_hmac_final+0x4a>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   19b9c:	b1fa      	cbz	r2, 19bde <tc_hmac_final+0x4e>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   19b9e:	4611      	mov	r1, r2
   19ba0:	f7ff ff19 	bl	199d6 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   19ba4:	4620      	mov	r0, r4
   19ba6:	f7eb fabf 	bl	5128 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   19baa:	2240      	movs	r2, #64	; 0x40
   19bac:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   19bb0:	4620      	mov	r0, r4
   19bb2:	f7ff fee5 	bl	19980 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   19bb6:	2220      	movs	r2, #32
   19bb8:	4629      	mov	r1, r5
   19bba:	4620      	mov	r0, r4
   19bbc:	f7ff fee0 	bl	19980 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   19bc0:	4621      	mov	r1, r4
   19bc2:	4628      	mov	r0, r5
   19bc4:	f7ff ff07 	bl	199d6 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   19bc8:	22f0      	movs	r2, #240	; 0xf0
   19bca:	2100      	movs	r1, #0
   19bcc:	4620      	mov	r0, r4
   19bce:	f7ff fdbe 	bl	1974e <_set>

	return TC_CRYPTO_SUCCESS;
   19bd2:	2001      	movs	r0, #1
   19bd4:	e002      	b.n	19bdc <tc_hmac_final+0x4c>
		return TC_CRYPTO_FAIL;
   19bd6:	2000      	movs	r0, #0
}
   19bd8:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19bda:	2000      	movs	r0, #0
}
   19bdc:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   19bde:	2000      	movs	r0, #0
   19be0:	e7fc      	b.n	19bdc <tc_hmac_final+0x4c>

00019be2 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   19be2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   19be6:	b082      	sub	sp, #8
   19be8:	4604      	mov	r4, r0
   19bea:	460d      	mov	r5, r1
   19bec:	4691      	mov	r9, r2
   19bee:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   19bf0:	2300      	movs	r3, #0
   19bf2:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
   19bf6:	f04f 0b01 	mov.w	fp, #1
   19bfa:	f88d b006 	strb.w	fp, [sp, #6]

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   19bfe:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
   19c02:	2220      	movs	r2, #32
   19c04:	4641      	mov	r1, r8
   19c06:	f7ff ff72 	bl	19aee <tc_hmac_set_key>

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   19c0a:	4620      	mov	r0, r4
   19c0c:	f7ff ffa9 	bl	19b62 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   19c10:	f504 7688 	add.w	r6, r4, #272	; 0x110
   19c14:	2220      	movs	r2, #32
   19c16:	4631      	mov	r1, r6
   19c18:	4620      	mov	r0, r4
   19c1a:	f7ff ffb1 	bl	19b80 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   19c1e:	465a      	mov	r2, fp
   19c20:	f10d 0107 	add.w	r1, sp, #7
   19c24:	4620      	mov	r0, r4
   19c26:	f7ff ffab 	bl	19b80 <tc_hmac_update>

	if (data && datalen)
   19c2a:	b115      	cbz	r5, 19c32 <update+0x50>
   19c2c:	f1b9 0f00 	cmp.w	r9, #0
   19c30:	d120      	bne.n	19c74 <update+0x92>
		(void)tc_hmac_update(&prng->h, data, datalen);
	if (additional_data && additional_datalen)
   19c32:	b10f      	cbz	r7, 19c38 <update+0x56>
   19c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19c36:	bb1b      	cbnz	r3, 19c80 <update+0x9e>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   19c38:	4622      	mov	r2, r4
   19c3a:	2120      	movs	r1, #32
   19c3c:	4640      	mov	r0, r8
   19c3e:	f7ff ffa7 	bl	19b90 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   19c42:	2220      	movs	r2, #32
   19c44:	4641      	mov	r1, r8
   19c46:	4620      	mov	r0, r4
   19c48:	f7ff ff51 	bl	19aee <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   19c4c:	4620      	mov	r0, r4
   19c4e:	f7ff ff88 	bl	19b62 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   19c52:	2220      	movs	r2, #32
   19c54:	4631      	mov	r1, r6
   19c56:	4620      	mov	r0, r4
   19c58:	f7ff ff92 	bl	19b80 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   19c5c:	4622      	mov	r2, r4
   19c5e:	2120      	movs	r1, #32
   19c60:	4630      	mov	r0, r6
   19c62:	f7ff ff95 	bl	19b90 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   19c66:	b115      	cbz	r5, 19c6e <update+0x8c>
   19c68:	f1b9 0f00 	cmp.w	r9, #0
   19c6c:	d10e      	bne.n	19c8c <update+0xaa>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
}
   19c6e:	b002      	add	sp, #8
   19c70:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		(void)tc_hmac_update(&prng->h, data, datalen);
   19c74:	464a      	mov	r2, r9
   19c76:	4629      	mov	r1, r5
   19c78:	4620      	mov	r0, r4
   19c7a:	f7ff ff81 	bl	19b80 <tc_hmac_update>
   19c7e:	e7d8      	b.n	19c32 <update+0x50>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   19c80:	461a      	mov	r2, r3
   19c82:	4639      	mov	r1, r7
   19c84:	4620      	mov	r0, r4
   19c86:	f7ff ff7b 	bl	19b80 <tc_hmac_update>
   19c8a:	e7d5      	b.n	19c38 <update+0x56>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   19c8c:	2220      	movs	r2, #32
   19c8e:	4641      	mov	r1, r8
   19c90:	4620      	mov	r0, r4
   19c92:	f7ff ff2c 	bl	19aee <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   19c96:	4620      	mov	r0, r4
   19c98:	f7ff ff63 	bl	19b62 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   19c9c:	2220      	movs	r2, #32
   19c9e:	4631      	mov	r1, r6
   19ca0:	4620      	mov	r0, r4
   19ca2:	f7ff ff6d 	bl	19b80 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   19ca6:	2201      	movs	r2, #1
   19ca8:	f10d 0106 	add.w	r1, sp, #6
   19cac:	4620      	mov	r0, r4
   19cae:	f7ff ff67 	bl	19b80 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   19cb2:	464a      	mov	r2, r9
   19cb4:	4629      	mov	r1, r5
   19cb6:	4620      	mov	r0, r4
   19cb8:	f7ff ff62 	bl	19b80 <tc_hmac_update>
	if (additional_data && additional_datalen)
   19cbc:	b10f      	cbz	r7, 19cc2 <update+0xe0>
   19cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19cc0:	b9bb      	cbnz	r3, 19cf2 <update+0x110>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   19cc2:	4622      	mov	r2, r4
   19cc4:	2120      	movs	r1, #32
   19cc6:	4640      	mov	r0, r8
   19cc8:	f7ff ff62 	bl	19b90 <tc_hmac_final>
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   19ccc:	2220      	movs	r2, #32
   19cce:	4641      	mov	r1, r8
   19cd0:	4620      	mov	r0, r4
   19cd2:	f7ff ff0c 	bl	19aee <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   19cd6:	4620      	mov	r0, r4
   19cd8:	f7ff ff43 	bl	19b62 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   19cdc:	2220      	movs	r2, #32
   19cde:	4631      	mov	r1, r6
   19ce0:	4620      	mov	r0, r4
   19ce2:	f7ff ff4d 	bl	19b80 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   19ce6:	4622      	mov	r2, r4
   19ce8:	2120      	movs	r1, #32
   19cea:	4630      	mov	r0, r6
   19cec:	f7ff ff50 	bl	19b90 <tc_hmac_final>
   19cf0:	e7bd      	b.n	19c6e <update+0x8c>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   19cf2:	461a      	mov	r2, r3
   19cf4:	4639      	mov	r1, r7
   19cf6:	4620      	mov	r0, r4
   19cf8:	f7ff ff42 	bl	19b80 <tc_hmac_update>
   19cfc:	e7e1      	b.n	19cc2 <update+0xe0>

00019cfe <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   19cfe:	b1e8      	cbz	r0, 19d3c <tc_hmac_prng_init+0x3e>
{
   19d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d02:	b083      	sub	sp, #12
   19d04:	460c      	mov	r4, r1
   19d06:	4615      	mov	r5, r2
   19d08:	4606      	mov	r6, r0
	    personalization == (uint8_t *) 0 ||
   19d0a:	b1c9      	cbz	r1, 19d40 <tc_hmac_prng_init+0x42>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
   19d0c:	2220      	movs	r2, #32
   19d0e:	2100      	movs	r1, #0
   19d10:	30f0      	adds	r0, #240	; 0xf0
   19d12:	f7ff fd1c 	bl	1974e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   19d16:	2220      	movs	r2, #32
   19d18:	2101      	movs	r1, #1
   19d1a:	f506 7088 	add.w	r0, r6, #272	; 0x110
   19d1e:	f7ff fd16 	bl	1974e <_set>

	update(prng, personalization, plen, 0, 0);
   19d22:	2700      	movs	r7, #0
   19d24:	9700      	str	r7, [sp, #0]
   19d26:	463b      	mov	r3, r7
   19d28:	462a      	mov	r2, r5
   19d2a:	4621      	mov	r1, r4
   19d2c:	4630      	mov	r0, r6
   19d2e:	f7ff ff58 	bl	19be2 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
   19d32:	f8c6 7130 	str.w	r7, [r6, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
   19d36:	2001      	movs	r0, #1
}
   19d38:	b003      	add	sp, #12
   19d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   19d3c:	2000      	movs	r0, #0
}
   19d3e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19d40:	2000      	movs	r0, #0
   19d42:	e7f9      	b.n	19d38 <tc_hmac_prng_init+0x3a>

00019d44 <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   19d44:	b1d0      	cbz	r0, 19d7c <tc_hmac_prng_reseed+0x38>
{
   19d46:	b510      	push	{r4, lr}
   19d48:	b082      	sub	sp, #8
   19d4a:	4604      	mov	r4, r0
	if (prng == (TCHmacPrng_t) 0 ||
   19d4c:	b1c1      	cbz	r1, 19d80 <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   19d4e:	2a1f      	cmp	r2, #31
   19d50:	d918      	bls.n	19d84 <tc_hmac_prng_reseed+0x40>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   19d52:	b173      	cbz	r3, 19d72 <tc_hmac_prng_reseed+0x2e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   19d54:	9804      	ldr	r0, [sp, #16]
   19d56:	b908      	cbnz	r0, 19d5c <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
   19d58:	2000      	movs	r0, #0
   19d5a:	e008      	b.n	19d6e <tc_hmac_prng_reseed+0x2a>
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   19d5c:	9000      	str	r0, [sp, #0]
   19d5e:	4620      	mov	r0, r4
   19d60:	f7ff ff3f 	bl	19be2 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   19d64:	f04f 33ff 	mov.w	r3, #4294967295
   19d68:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
   19d6c:	2001      	movs	r0, #1
}
   19d6e:	b002      	add	sp, #8
   19d70:	bd10      	pop	{r4, pc}
		update(prng, seed, seedlen, 0, 0);
   19d72:	2300      	movs	r3, #0
   19d74:	9300      	str	r3, [sp, #0]
   19d76:	f7ff ff34 	bl	19be2 <update>
   19d7a:	e7f3      	b.n	19d64 <tc_hmac_prng_reseed+0x20>
		return TC_CRYPTO_FAIL;
   19d7c:	2000      	movs	r0, #0
}
   19d7e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19d80:	2000      	movs	r0, #0
   19d82:	e7f4      	b.n	19d6e <tc_hmac_prng_reseed+0x2a>
   19d84:	2000      	movs	r0, #0
   19d86:	e7f2      	b.n	19d6e <tc_hmac_prng_reseed+0x2a>

00019d88 <tc_hmac_prng_generate>:
int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   19d88:	2800      	cmp	r0, #0
   19d8a:	d045      	beq.n	19e18 <tc_hmac_prng_generate+0x90>
{
   19d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d90:	b082      	sub	sp, #8
   19d92:	460f      	mov	r7, r1
   19d94:	4614      	mov	r4, r2
   19d96:	4680      	mov	r8, r0
	if (out == (uint8_t *) 0 ||
   19d98:	2a00      	cmp	r2, #0
   19d9a:	d03f      	beq.n	19e1c <tc_hmac_prng_generate+0x94>
	    prng == (TCHmacPrng_t) 0 ||
   19d9c:	2900      	cmp	r1, #0
   19d9e:	d03f      	beq.n	19e20 <tc_hmac_prng_generate+0x98>
	    outlen == 0 ||
   19da0:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
   19da4:	d840      	bhi.n	19e28 <tc_hmac_prng_generate+0xa0>
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   19da6:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   19daa:	2b00      	cmp	r3, #0
   19dac:	d03e      	beq.n	19e2c <tc_hmac_prng_generate+0xa4>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   19dae:	3b01      	subs	r3, #1
   19db0:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
   19db4:	e025      	b.n	19e02 <tc_hmac_prng_generate+0x7a>
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   19db6:	2220      	movs	r2, #32
   19db8:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   19dbc:	4620      	mov	r0, r4
   19dbe:	f7ff fe96 	bl	19aee <tc_hmac_set_key>

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
   19dc2:	4620      	mov	r0, r4
   19dc4:	f7ff fecd 	bl	19b62 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   19dc8:	f504 7588 	add.w	r5, r4, #272	; 0x110
   19dcc:	2220      	movs	r2, #32
   19dce:	4629      	mov	r1, r5
   19dd0:	4620      	mov	r0, r4
   19dd2:	f7ff fed5 	bl	19b80 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   19dd6:	4622      	mov	r2, r4
   19dd8:	2120      	movs	r1, #32
   19dda:	4628      	mov	r0, r5
   19ddc:	f7ff fed8 	bl	19b90 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   19de0:	463e      	mov	r6, r7
   19de2:	2f20      	cmp	r7, #32
   19de4:	bf28      	it	cs
   19de6:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   19de8:	4633      	mov	r3, r6
   19dea:	462a      	mov	r2, r5
   19dec:	4631      	mov	r1, r6
   19dee:	4640      	mov	r0, r8
   19df0:	f7ff fca0 	bl	19734 <_copy>

		out += bufferlen;
   19df4:	44b0      	add	r8, r6
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   19df6:	4639      	mov	r1, r7
   19df8:	2f20      	cmp	r7, #32
   19dfa:	bf38      	it	cc
   19dfc:	2120      	movcc	r1, #32
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
   19dfe:	f1a1 0720 	sub.w	r7, r1, #32
	while (outlen != 0) {
   19e02:	2f00      	cmp	r7, #0
   19e04:	d1d7      	bne.n	19db6 <tc_hmac_prng_generate+0x2e>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   19e06:	2100      	movs	r1, #0
   19e08:	9100      	str	r1, [sp, #0]
   19e0a:	460b      	mov	r3, r1
   19e0c:	460a      	mov	r2, r1
   19e0e:	4620      	mov	r0, r4
   19e10:	f7ff fee7 	bl	19be2 <update>

	return TC_CRYPTO_SUCCESS;
   19e14:	2001      	movs	r0, #1
   19e16:	e004      	b.n	19e22 <tc_hmac_prng_generate+0x9a>
		return TC_CRYPTO_FAIL;
   19e18:	2000      	movs	r0, #0
}
   19e1a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   19e1c:	2000      	movs	r0, #0
   19e1e:	e000      	b.n	19e22 <tc_hmac_prng_generate+0x9a>
   19e20:	2000      	movs	r0, #0
}
   19e22:	b002      	add	sp, #8
   19e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   19e28:	2000      	movs	r0, #0
   19e2a:	e7fa      	b.n	19e22 <tc_hmac_prng_generate+0x9a>
		return TC_HMAC_PRNG_RESEED_REQ;
   19e2c:	f04f 30ff 	mov.w	r0, #4294967295
   19e30:	e7f7      	b.n	19e22 <tc_hmac_prng_generate+0x9a>

00019e32 <abort_function>:
{
   19e32:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   19e34:	2000      	movs	r0, #0
   19e36:	f7e8 fff3 	bl	2e20 <sys_reboot>

00019e3a <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   19e3a:	b538      	push	{r3, r4, r5, lr}
   19e3c:	4604      	mov	r4, r0

	if (esf != NULL) {
   19e3e:	460d      	mov	r5, r1
   19e40:	b111      	cbz	r1, 19e48 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   19e42:	4608      	mov	r0, r1
   19e44:	f7eb faa2 	bl	538c <esf_dump>
	}
	z_fatal_error(reason, esf);
   19e48:	4629      	mov	r1, r5
   19e4a:	4620      	mov	r0, r4
   19e4c:	f7fb fe3c 	bl	15ac8 <z_fatal_error>
}
   19e50:	bd38      	pop	{r3, r4, r5, pc}

00019e52 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   19e52:	b508      	push	{r3, lr}
   19e54:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   19e56:	6800      	ldr	r0, [r0, #0]
   19e58:	f7ff ffef 	bl	19e3a <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   19e5c:	bd08      	pop	{r3, pc}

00019e5e <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   19e5e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   19e60:	2100      	movs	r1, #0
   19e62:	2001      	movs	r0, #1
   19e64:	f7ff ffe9 	bl	19e3a <z_arm_fatal_error>
}
   19e68:	bd08      	pop	{r3, pc}

00019e6a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   19e6a:	b508      	push	{r3, lr}
	handler();
   19e6c:	f7eb fbf6 	bl	565c <z_SysNmiOnReset>
	z_arm_int_exit();
   19e70:	f7eb fcc6 	bl	5800 <z_arm_exc_exit>
}
   19e74:	bd08      	pop	{r3, pc}

00019e76 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   19e76:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   19e7a:	f383 880b 	msr	PSPLIM, r3
}
   19e7e:	4770      	bx	lr

00019e80 <memory_fault_recoverable>:
}
   19e80:	2000      	movs	r0, #0
   19e82:	4770      	bx	lr

00019e84 <fault_handle>:
{
   19e84:	b508      	push	{r3, lr}
	*recoverable = false;
   19e86:	2300      	movs	r3, #0
   19e88:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   19e8a:	1ecb      	subs	r3, r1, #3
   19e8c:	2b09      	cmp	r3, #9
   19e8e:	d81a      	bhi.n	19ec6 <fault_handle+0x42>
   19e90:	e8df f003 	tbb	[pc, r3]
   19e94:	110d0905 	.word	0x110d0905
   19e98:	19191919 	.word	0x19191919
   19e9c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   19e9e:	4611      	mov	r1, r2
   19ea0:	f7ec f936 	bl	6110 <hard_fault>
}
   19ea4:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   19ea6:	2100      	movs	r1, #0
   19ea8:	f7eb fcb8 	bl	581c <mem_manage_fault>
		break;
   19eac:	e7fa      	b.n	19ea4 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   19eae:	2100      	movs	r1, #0
   19eb0:	f7eb fe28 	bl	5b04 <bus_fault>
		break;
   19eb4:	e7f6      	b.n	19ea4 <fault_handle+0x20>
		reason = usage_fault(esf);
   19eb6:	f7eb ffb5 	bl	5e24 <usage_fault>
		break;
   19eba:	e7f3      	b.n	19ea4 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   19ebc:	4611      	mov	r1, r2
   19ebe:	f7ec fa43 	bl	6348 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   19ec2:	2000      	movs	r0, #0
		break;
   19ec4:	e7ee      	b.n	19ea4 <fault_handle+0x20>
		reserved_exception(esf, fault);
   19ec6:	f7ec fa6f 	bl	63a8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   19eca:	2000      	movs	r0, #0
	return reason;
   19ecc:	e7ea      	b.n	19ea4 <fault_handle+0x20>

00019ece <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   19ece:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   19ed2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   19ed6:	d001      	beq.n	19edc <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   19ed8:	b2c0      	uxtb	r0, r0
   19eda:	4770      	bx	lr
	}

	return -EINVAL;
   19edc:	f06f 0015 	mvn.w	r0, #21
}
   19ee0:	4770      	bx	lr

00019ee2 <region_init>:
{
   19ee2:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   19ee4:	680b      	ldr	r3, [r1, #0]
   19ee6:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   19eea:	7a0b      	ldrb	r3, [r1, #8]
   19eec:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   19ef0:	68ca      	ldr	r2, [r1, #12]
   19ef2:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   19ef6:	095b      	lsrs	r3, r3, #5
   19ef8:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   19efc:	f042 0201 	orr.w	r2, r2, #1
   19f00:	ea4c 010e 	orr.w	r1, ip, lr
   19f04:	f7ec fc28 	bl	6758 <mpu_set_region>
}
   19f08:	bd08      	pop	{r3, pc}

00019f0a <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   19f0a:	6843      	ldr	r3, [r0, #4]
		&&
   19f0c:	2b1f      	cmp	r3, #31
   19f0e:	d90a      	bls.n	19f26 <mpu_partition_is_valid+0x1c>
		&&
   19f10:	f013 0f1f 	tst.w	r3, #31
   19f14:	d001      	beq.n	19f1a <mpu_partition_is_valid+0x10>
		&&
   19f16:	2000      	movs	r0, #0
   19f18:	4770      	bx	lr
		((part->start &
   19f1a:	6803      	ldr	r3, [r0, #0]
		&&
   19f1c:	f013 0f1f 	tst.w	r3, #31
   19f20:	d003      	beq.n	19f2a <mpu_partition_is_valid+0x20>
   19f22:	2000      	movs	r0, #0
   19f24:	4770      	bx	lr
   19f26:	2000      	movs	r0, #0
   19f28:	4770      	bx	lr
   19f2a:	2001      	movs	r0, #1
}
   19f2c:	4770      	bx	lr

00019f2e <mpu_configure_region>:
{
   19f2e:	b510      	push	{r4, lr}
   19f30:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   19f32:	680b      	ldr	r3, [r1, #0]
   19f34:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   19f36:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   19f38:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   19f3c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   19f40:	f36c 0204 	bfi	r2, ip, #0, #5
   19f44:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   19f48:	8949      	ldrh	r1, [r1, #10]
   19f4a:	b2d2      	uxtb	r2, r2
   19f4c:	f361 1247 	bfi	r2, r1, #5, #3
   19f50:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   19f54:	f023 031f 	bic.w	r3, r3, #31
   19f58:	4423      	add	r3, r4
   19f5a:	3b01      	subs	r3, #1
   19f5c:	f023 031f 	bic.w	r3, r3, #31
   19f60:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   19f62:	4669      	mov	r1, sp
   19f64:	f7ec fc02 	bl	676c <region_allocate_and_init>
}
   19f68:	b004      	add	sp, #16
   19f6a:	bd10      	pop	{r4, pc}

00019f6c <arm_core_mpu_configure_static_mpu_regions>:
{
   19f6c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   19f6e:	f7ec fda3 	bl	6ab8 <mpu_configure_static_mpu_regions>
}
   19f72:	bd08      	pop	{r3, pc}

00019f74 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   19f74:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   19f76:	f7ec fda9 	bl	6acc <mpu_mark_areas_for_dynamic_regions>
}
   19f7a:	bd08      	pop	{r3, pc}

00019f7c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   19f7c:	4602      	mov	r2, r0
   19f7e:	e002      	b.n	19f86 <strcpy+0xa>
		*d = *s;
   19f80:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   19f84:	3101      	adds	r1, #1
	while (*s != '\0') {
   19f86:	780b      	ldrb	r3, [r1, #0]
   19f88:	2b00      	cmp	r3, #0
   19f8a:	d1f9      	bne.n	19f80 <strcpy+0x4>
	}

	*d = '\0';
   19f8c:	7013      	strb	r3, [r2, #0]

	return dest;
}
   19f8e:	4770      	bx	lr

00019f90 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   19f90:	4603      	mov	r3, r0
   19f92:	b1a2      	cbz	r2, 19fbe <strncpy+0x2e>
{
   19f94:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   19f96:	780c      	ldrb	r4, [r1, #0]
   19f98:	b12c      	cbz	r4, 19fa6 <strncpy+0x16>
		*d = *s;
   19f9a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   19f9e:	3101      	adds	r1, #1
		d++;
		n--;
   19fa0:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   19fa2:	2a00      	cmp	r2, #0
   19fa4:	d1f7      	bne.n	19f96 <strncpy+0x6>
	}

	while (n > 0) {
   19fa6:	b122      	cbz	r2, 19fb2 <strncpy+0x22>
		*d = '\0';
   19fa8:	2100      	movs	r1, #0
   19faa:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   19fae:	3a01      	subs	r2, #1
   19fb0:	e7f9      	b.n	19fa6 <strncpy+0x16>
	}

	return dest;
}
   19fb2:	bc10      	pop	{r4}
   19fb4:	4770      	bx	lr
		*d = '\0';
   19fb6:	2100      	movs	r1, #0
   19fb8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19fbc:	3a01      	subs	r2, #1
	while (n > 0) {
   19fbe:	2a00      	cmp	r2, #0
   19fc0:	d1f9      	bne.n	19fb6 <strncpy+0x26>
   19fc2:	4770      	bx	lr

00019fc4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   19fc4:	4603      	mov	r3, r0
	size_t n = 0;
   19fc6:	2000      	movs	r0, #0

	while (*s != '\0') {
   19fc8:	e001      	b.n	19fce <strlen+0xa>
		s++;
   19fca:	3301      	adds	r3, #1
		n++;
   19fcc:	3001      	adds	r0, #1
	while (*s != '\0') {
   19fce:	781a      	ldrb	r2, [r3, #0]
   19fd0:	2a00      	cmp	r2, #0
   19fd2:	d1fa      	bne.n	19fca <strlen+0x6>
	}

	return n;
}
   19fd4:	4770      	bx	lr

00019fd6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   19fd6:	4603      	mov	r3, r0
	size_t n = 0;
   19fd8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   19fda:	e001      	b.n	19fe0 <strnlen+0xa>
		s++;
   19fdc:	3301      	adds	r3, #1
		n++;
   19fde:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   19fe0:	781a      	ldrb	r2, [r3, #0]
   19fe2:	b10a      	cbz	r2, 19fe8 <strnlen+0x12>
   19fe4:	4288      	cmp	r0, r1
   19fe6:	d3f9      	bcc.n	19fdc <strnlen+0x6>
	}

	return n;
}
   19fe8:	4770      	bx	lr

00019fea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   19fea:	e001      	b.n	19ff0 <strcmp+0x6>
		s1++;
   19fec:	3001      	adds	r0, #1
		s2++;
   19fee:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   19ff0:	7803      	ldrb	r3, [r0, #0]
   19ff2:	780a      	ldrb	r2, [r1, #0]
   19ff4:	4293      	cmp	r3, r2
   19ff6:	d101      	bne.n	19ffc <strcmp+0x12>
   19ff8:	2b00      	cmp	r3, #0
   19ffa:	d1f7      	bne.n	19fec <strcmp+0x2>
	}

	return *s1 - *s2;
}
   19ffc:	1a98      	subs	r0, r3, r2
   19ffe:	4770      	bx	lr

0001a000 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1a000:	e002      	b.n	1a008 <strncmp+0x8>
		s1++;
   1a002:	3001      	adds	r0, #1
		s2++;
   1a004:	3101      	adds	r1, #1
		n--;
   1a006:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1a008:	b132      	cbz	r2, 1a018 <strncmp+0x18>
   1a00a:	7803      	ldrb	r3, [r0, #0]
   1a00c:	f891 c000 	ldrb.w	ip, [r1]
   1a010:	4563      	cmp	r3, ip
   1a012:	d101      	bne.n	1a018 <strncmp+0x18>
   1a014:	2b00      	cmp	r3, #0
   1a016:	d1f4      	bne.n	1a002 <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1a018:	b11a      	cbz	r2, 1a022 <strncmp+0x22>
   1a01a:	7800      	ldrb	r0, [r0, #0]
   1a01c:	780b      	ldrb	r3, [r1, #0]
   1a01e:	1ac0      	subs	r0, r0, r3
   1a020:	4770      	bx	lr
   1a022:	2000      	movs	r0, #0
}
   1a024:	4770      	bx	lr

0001a026 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1a026:	4613      	mov	r3, r2
   1a028:	b16a      	cbz	r2, 1a046 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1a02a:	3b01      	subs	r3, #1
   1a02c:	d007      	beq.n	1a03e <memcmp+0x18>
   1a02e:	f890 c000 	ldrb.w	ip, [r0]
   1a032:	780a      	ldrb	r2, [r1, #0]
   1a034:	4594      	cmp	ip, r2
   1a036:	d102      	bne.n	1a03e <memcmp+0x18>
		c1++;
   1a038:	3001      	adds	r0, #1
		c2++;
   1a03a:	3101      	adds	r1, #1
   1a03c:	e7f5      	b.n	1a02a <memcmp+0x4>
	}

	return *c1 - *c2;
   1a03e:	7800      	ldrb	r0, [r0, #0]
   1a040:	780b      	ldrb	r3, [r1, #0]
   1a042:	1ac0      	subs	r0, r0, r3
   1a044:	4770      	bx	lr
		return 0;
   1a046:	2000      	movs	r0, #0
}
   1a048:	4770      	bx	lr

0001a04a <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1a04a:	ea80 0301 	eor.w	r3, r0, r1
   1a04e:	f013 0f03 	tst.w	r3, #3
   1a052:	d001      	beq.n	1a058 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   1a054:	4603      	mov	r3, r0
   1a056:	e023      	b.n	1a0a0 <memcpy+0x56>
   1a058:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1a05a:	f013 0f03 	tst.w	r3, #3
   1a05e:	d00f      	beq.n	1a080 <memcpy+0x36>
			if (n == 0) {
   1a060:	b30a      	cbz	r2, 1a0a6 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   1a062:	f811 cb01 	ldrb.w	ip, [r1], #1
   1a066:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   1a06a:	3a01      	subs	r2, #1
   1a06c:	e7f5      	b.n	1a05a <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   1a06e:	f811 cb01 	ldrb.w	ip, [r1], #1
   1a072:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1a076:	3a01      	subs	r2, #1
	while (n > 0) {
   1a078:	2a00      	cmp	r2, #0
   1a07a:	d1f8      	bne.n	1a06e <memcpy+0x24>
	}

	return d;
}
   1a07c:	bc10      	pop	{r4}
   1a07e:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   1a080:	2a03      	cmp	r2, #3
   1a082:	d90d      	bls.n	1a0a0 <memcpy+0x56>
{
   1a084:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   1a086:	f851 4b04 	ldr.w	r4, [r1], #4
   1a08a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1a08e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   1a090:	2a03      	cmp	r2, #3
   1a092:	d8f8      	bhi.n	1a086 <memcpy+0x3c>
   1a094:	e7f0      	b.n	1a078 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   1a096:	f811 cb01 	ldrb.w	ip, [r1], #1
   1a09a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1a09e:	3a01      	subs	r2, #1
	while (n > 0) {
   1a0a0:	2a00      	cmp	r2, #0
   1a0a2:	d1f8      	bne.n	1a096 <memcpy+0x4c>
   1a0a4:	4770      	bx	lr
}
   1a0a6:	4770      	bx	lr

0001a0a8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1a0a8:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1a0ac:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1a0ae:	e002      	b.n	1a0b6 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   1a0b0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1a0b4:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1a0b6:	f013 0f03 	tst.w	r3, #3
   1a0ba:	d002      	beq.n	1a0c2 <memset+0x1a>
		if (n == 0) {
   1a0bc:	2a00      	cmp	r2, #0
   1a0be:	d1f7      	bne.n	1a0b0 <memset+0x8>
   1a0c0:	e00f      	b.n	1a0e2 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   1a0c2:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   1a0c4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   1a0c8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1a0cc:	2a03      	cmp	r2, #3
   1a0ce:	d906      	bls.n	1a0de <memset+0x36>
		*(d_word++) = c_word;
   1a0d0:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   1a0d4:	3a04      	subs	r2, #4
   1a0d6:	e7f9      	b.n	1a0cc <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   1a0d8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   1a0dc:	3a01      	subs	r2, #1
	while (n > 0) {
   1a0de:	2a00      	cmp	r2, #0
   1a0e0:	d1fa      	bne.n	1a0d8 <memset+0x30>
	}

	return buf;
}
   1a0e2:	4770      	bx	lr

0001a0e4 <_stdout_hook_default>:
}
   1a0e4:	f04f 30ff 	mov.w	r0, #4294967295
   1a0e8:	4770      	bx	lr

0001a0ea <setup>:

static int setup(const struct device *dev)
{
   1a0ea:	b508      	push	{r3, lr}
	return z_impl_k_sleep(timeout);
   1a0ec:	2042      	movs	r0, #66	; 0x42
   1a0ee:	2100      	movs	r1, #0
   1a0f0:	f7fc ff28 	bl	16f44 <z_impl_k_sleep>
	}

#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	if (IS_ENABLED(CONFIG_BOARD_ENABLE_CPUNET)) {
		enable_cpunet();
   1a0f4:	f7ec fd86 	bl	6c04 <enable_cpunet>
	}

	return 0;
}
   1a0f8:	2000      	movs	r0, #0
   1a0fa:	bd08      	pop	{r3, pc}

0001a0fc <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a0fc:	b510      	push	{r4, lr}
   1a0fe:	b08a      	sub	sp, #40	; 0x28
   1a100:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   1a102:	a905      	add	r1, sp, #20
   1a104:	f7ec fe6a 	bl	6ddc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1a108:	4669      	mov	r1, sp
   1a10a:	4620      	mov	r0, r4
   1a10c:	f7ec fe66 	bl	6ddc <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   1a110:	2210      	movs	r2, #16
   1a112:	f10d 0101 	add.w	r1, sp, #1
   1a116:	f10d 0015 	add.w	r0, sp, #21
   1a11a:	f7ff ff84 	bl	1a026 <memcmp>
}
   1a11e:	b00a      	add	sp, #40	; 0x28
   1a120:	bd10      	pop	{r4, pc}

0001a122 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1a122:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1a124:	7803      	ldrb	r3, [r0, #0]
   1a126:	780a      	ldrb	r2, [r1, #0]
   1a128:	4293      	cmp	r3, r2
   1a12a:	d107      	bne.n	1a13c <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   1a12c:	2b01      	cmp	r3, #1
   1a12e:	d00c      	beq.n	1a14a <bt_uuid_cmp+0x28>
   1a130:	2b02      	cmp	r3, #2
   1a132:	d00e      	beq.n	1a152 <bt_uuid_cmp+0x30>
   1a134:	b12b      	cbz	r3, 1a142 <bt_uuid_cmp+0x20>
   1a136:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1a13a:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   1a13c:	f7ff ffde 	bl	1a0fc <uuid128_cmp>
   1a140:	e7fb      	b.n	1a13a <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1a142:	8840      	ldrh	r0, [r0, #2]
   1a144:	884b      	ldrh	r3, [r1, #2]
   1a146:	1ac0      	subs	r0, r0, r3
   1a148:	e7f7      	b.n	1a13a <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1a14a:	6840      	ldr	r0, [r0, #4]
   1a14c:	684b      	ldr	r3, [r1, #4]
   1a14e:	1ac0      	subs	r0, r0, r3
   1a150:	e7f3      	b.n	1a13a <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1a152:	2210      	movs	r2, #16
   1a154:	3101      	adds	r1, #1
   1a156:	3001      	adds	r0, #1
   1a158:	f7ff ff65 	bl	1a026 <memcmp>
   1a15c:	e7ed      	b.n	1a13a <bt_uuid_cmp+0x18>

0001a15e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   1a15e:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1a160:	2a04      	cmp	r2, #4
   1a162:	d00e      	beq.n	1a182 <bt_uuid_create+0x24>
   1a164:	2a10      	cmp	r2, #16
   1a166:	d01d      	beq.n	1a1a4 <bt_uuid_create+0x46>
   1a168:	2a02      	cmp	r2, #2
   1a16a:	d001      	beq.n	1a170 <bt_uuid_create+0x12>
   1a16c:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   1a16e:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   1a170:	2300      	movs	r3, #0
   1a172:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1a174:	784a      	ldrb	r2, [r1, #1]
   1a176:	780b      	ldrb	r3, [r1, #0]
   1a178:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1a17c:	8043      	strh	r3, [r0, #2]
	return true;
   1a17e:	2001      	movs	r0, #1
		break;
   1a180:	e7f5      	b.n	1a16e <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   1a182:	2301      	movs	r3, #1
   1a184:	7003      	strb	r3, [r0, #0]
   1a186:	f891 c003 	ldrb.w	ip, [r1, #3]
   1a18a:	788a      	ldrb	r2, [r1, #2]
   1a18c:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
   1a190:	f891 e001 	ldrb.w	lr, [r1, #1]
   1a194:	780a      	ldrb	r2, [r1, #0]
   1a196:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1a19a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1a19e:	6042      	str	r2, [r0, #4]
	return true;
   1a1a0:	4618      	mov	r0, r3
		break;
   1a1a2:	e7e4      	b.n	1a16e <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   1a1a4:	2302      	movs	r3, #2
   1a1a6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1a1aa:	2210      	movs	r2, #16
   1a1ac:	f7ff ff4d 	bl	1a04a <memcpy>
	return true;
   1a1b0:	2001      	movs	r0, #1
		break;
   1a1b2:	e7dc      	b.n	1a16e <bt_uuid_create+0x10>

0001a1b4 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1a1b4:	b510      	push	{r4, lr}
   1a1b6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1a1b8:	2301      	movs	r3, #1
   1a1ba:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1a1be:	2106      	movs	r1, #6
   1a1c0:	f7f0 fe62 	bl	ae88 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1a1c4:	b918      	cbnz	r0, 1a1ce <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1a1c6:	79a3      	ldrb	r3, [r4, #6]
   1a1c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a1cc:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1a1ce:	bd10      	pop	{r4, pc}

0001a1d0 <skip_auto_phy_update_on_conn_establishment>:
}
   1a1d0:	2000      	movs	r0, #0
   1a1d2:	4770      	bx	lr

0001a1d4 <hci_vendor_event>:
}
   1a1d4:	4770      	bx	lr

0001a1d6 <hci_disconn_complete_prio>:
{
   1a1d6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1a1d8:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a1da:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   1a1de:	781b      	ldrb	r3, [r3, #0]
   1a1e0:	b103      	cbz	r3, 1a1e4 <hci_disconn_complete_prio+0xe>
}
   1a1e2:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   1a1e4:	4620      	mov	r0, r4
   1a1e6:	f7f1 fa05 	bl	b5f4 <bt_conn_lookup_handle>
	if (!conn) {
   1a1ea:	4605      	mov	r5, r0
   1a1ec:	b130      	cbz	r0, 1a1fc <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1a1ee:	2101      	movs	r1, #1
   1a1f0:	f7f1 fa0a 	bl	b608 <bt_conn_set_state>
	bt_conn_unref(conn);
   1a1f4:	4628      	mov	r0, r5
   1a1f6:	f000 fc02 	bl	1a9fe <bt_conn_unref>
   1a1fa:	e7f2      	b.n	1a1e2 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   1a1fc:	4620      	mov	r0, r4
   1a1fe:	f7ec fe97 	bl	6f30 <conn_handle_disconnected>
		return;
   1a202:	e7ee      	b.n	1a1e2 <hci_disconn_complete_prio+0xc>

0001a204 <set_event_mask>:
{
   1a204:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1a206:	2108      	movs	r1, #8
   1a208:	f640 4001 	movw	r0, #3073	; 0xc01
   1a20c:	f7ee f964 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a210:	b1b8      	cbz	r0, 1a242 <set_event_mask+0x3e>
   1a212:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1a214:	2108      	movs	r1, #8
   1a216:	4408      	add	r0, r1
   1a218:	f002 fc82 	bl	1cb20 <net_buf_simple_add>
	dst[0] = val;
   1a21c:	2310      	movs	r3, #16
   1a21e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1a220:	2388      	movs	r3, #136	; 0x88
   1a222:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1a224:	2200      	movs	r2, #0
   1a226:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1a228:	2302      	movs	r3, #2
   1a22a:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   1a22c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1a22e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1a230:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1a232:	2320      	movs	r3, #32
   1a234:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1a236:	4621      	mov	r1, r4
   1a238:	f640 4001 	movw	r0, #3073	; 0xc01
   1a23c:	f7ee f98a 	bl	8554 <bt_hci_cmd_send_sync>
}
   1a240:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1a242:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a246:	e7fb      	b.n	1a240 <set_event_mask+0x3c>

0001a248 <hci_le_read_remote_features>:
{
   1a248:	b538      	push	{r3, r4, r5, lr}
   1a24a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1a24c:	2102      	movs	r1, #2
   1a24e:	f242 0016 	movw	r0, #8214	; 0x2016
   1a252:	f7ee f941 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a256:	b168      	cbz	r0, 1a274 <hci_le_read_remote_features+0x2c>
   1a258:	4605      	mov	r5, r0
   1a25a:	2102      	movs	r1, #2
   1a25c:	3008      	adds	r0, #8
   1a25e:	f002 fc5f 	bl	1cb20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a262:	8823      	ldrh	r3, [r4, #0]
   1a264:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1a266:	2200      	movs	r2, #0
   1a268:	4629      	mov	r1, r5
   1a26a:	f242 0016 	movw	r0, #8214	; 0x2016
   1a26e:	f7ee f971 	bl	8554 <bt_hci_cmd_send_sync>
}
   1a272:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1a274:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a278:	e7fb      	b.n	1a272 <hci_le_read_remote_features+0x2a>

0001a27a <bt_hci_disconnect>:
{
   1a27a:	b570      	push	{r4, r5, r6, lr}
   1a27c:	4605      	mov	r5, r0
   1a27e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a280:	2103      	movs	r1, #3
   1a282:	f240 4006 	movw	r0, #1030	; 0x406
   1a286:	f7ee f927 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a28a:	b168      	cbz	r0, 1a2a8 <bt_hci_disconnect+0x2e>
   1a28c:	4606      	mov	r6, r0
   1a28e:	2103      	movs	r1, #3
   1a290:	3008      	adds	r0, #8
   1a292:	f002 fc45 	bl	1cb20 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1a296:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   1a298:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a29a:	2200      	movs	r2, #0
   1a29c:	4631      	mov	r1, r6
   1a29e:	f240 4006 	movw	r0, #1030	; 0x406
   1a2a2:	f7ee f957 	bl	8554 <bt_hci_cmd_send_sync>
}
   1a2a6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1a2a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a2ac:	e7fb      	b.n	1a2a6 <bt_hci_disconnect+0x2c>

0001a2ae <bt_le_set_data_len>:
{
   1a2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2b0:	4606      	mov	r6, r0
   1a2b2:	460f      	mov	r7, r1
   1a2b4:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a2b6:	2106      	movs	r1, #6
   1a2b8:	f242 0022 	movw	r0, #8226	; 0x2022
   1a2bc:	f7ee f90c 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a2c0:	b178      	cbz	r0, 1a2e2 <bt_le_set_data_len+0x34>
   1a2c2:	4605      	mov	r5, r0
   1a2c4:	2106      	movs	r1, #6
   1a2c6:	3008      	adds	r0, #8
   1a2c8:	f002 fc2a 	bl	1cb20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a2cc:	8833      	ldrh	r3, [r6, #0]
   1a2ce:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1a2d0:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1a2d2:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a2d4:	2200      	movs	r2, #0
   1a2d6:	4629      	mov	r1, r5
   1a2d8:	f242 0022 	movw	r0, #8226	; 0x2022
   1a2dc:	f7ee f93a 	bl	8554 <bt_hci_cmd_send_sync>
}
   1a2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1a2e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a2e6:	e7fb      	b.n	1a2e0 <bt_le_set_data_len+0x32>

0001a2e8 <bt_le_set_phy>:
{
   1a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2ec:	4607      	mov	r7, r0
   1a2ee:	460e      	mov	r6, r1
   1a2f0:	4615      	mov	r5, r2
   1a2f2:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a2f4:	2107      	movs	r1, #7
   1a2f6:	f242 0032 	movw	r0, #8242	; 0x2032
   1a2fa:	f7ee f8ed 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a2fe:	b1a8      	cbz	r0, 1a32c <bt_le_set_phy+0x44>
   1a300:	4680      	mov	r8, r0
   1a302:	2107      	movs	r1, #7
   1a304:	3008      	adds	r0, #8
   1a306:	f002 fc0b 	bl	1cb20 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a30a:	883b      	ldrh	r3, [r7, #0]
   1a30c:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   1a30e:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1a310:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1a312:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   1a314:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1a318:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a31c:	2200      	movs	r2, #0
   1a31e:	4641      	mov	r1, r8
   1a320:	f242 0032 	movw	r0, #8242	; 0x2032
   1a324:	f7ee f916 	bl	8554 <bt_hci_cmd_send_sync>
}
   1a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1a32c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a330:	e7fa      	b.n	1a328 <bt_le_set_phy+0x40>

0001a332 <enh_conn_complete>:
{
   1a332:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   1a334:	f7ee ff66 	bl	9204 <bt_hci_le_enh_conn_complete>
}
   1a338:	bd08      	pop	{r3, pc}

0001a33a <le_enh_conn_complete>:
{
   1a33a:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   1a33c:	6880      	ldr	r0, [r0, #8]
   1a33e:	f7ff fff8 	bl	1a332 <enh_conn_complete>
}
   1a342:	bd08      	pop	{r3, pc}

0001a344 <le_legacy_conn_complete>:
{
   1a344:	b510      	push	{r4, lr}
   1a346:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a348:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   1a34a:	780b      	ldrb	r3, [r1, #0]
   1a34c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1a350:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1a354:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1a358:	78cb      	ldrb	r3, [r1, #3]
   1a35a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1a35e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a362:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1a366:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1a36a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1a36e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1a372:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1a376:	7c4b      	ldrb	r3, [r1, #17]
   1a378:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   1a37c:	2207      	movs	r2, #7
   1a37e:	3104      	adds	r1, #4
   1a380:	a801      	add	r0, sp, #4
   1a382:	f7ff fe62 	bl	1a04a <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a386:	2400      	movs	r4, #0
   1a388:	940a      	str	r4, [sp, #40]	; 0x28
   1a38a:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   1a38e:	2206      	movs	r2, #6
   1a390:	a90a      	add	r1, sp, #40	; 0x28
   1a392:	f10d 000b 	add.w	r0, sp, #11
   1a396:	f7ff fe58 	bl	1a04a <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a39a:	9408      	str	r4, [sp, #32]
   1a39c:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   1a3a0:	2206      	movs	r2, #6
   1a3a2:	a908      	add	r1, sp, #32
   1a3a4:	f10d 0011 	add.w	r0, sp, #17
   1a3a8:	f7ff fe4f 	bl	1a04a <memcpy>
	enh_conn_complete(&enh);
   1a3ac:	4668      	mov	r0, sp
   1a3ae:	f7ff ffc0 	bl	1a332 <enh_conn_complete>
}
   1a3b2:	b00c      	add	sp, #48	; 0x30
   1a3b4:	bd10      	pop	{r4, pc}

0001a3b6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1a3b6:	8802      	ldrh	r2, [r0, #0]
   1a3b8:	8843      	ldrh	r3, [r0, #2]
   1a3ba:	429a      	cmp	r2, r3
   1a3bc:	d817      	bhi.n	1a3ee <bt_le_conn_params_valid+0x38>
   1a3be:	2a05      	cmp	r2, #5
   1a3c0:	d917      	bls.n	1a3f2 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a3c2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1a3c6:	d816      	bhi.n	1a3f6 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   1a3c8:	8881      	ldrh	r1, [r0, #4]
   1a3ca:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   1a3ce:	d214      	bcs.n	1a3fa <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a3d0:	88c0      	ldrh	r0, [r0, #6]
   1a3d2:	f1a0 020a 	sub.w	r2, r0, #10
   1a3d6:	b292      	uxth	r2, r2
   1a3d8:	f640 4c76 	movw	ip, #3190	; 0xc76
   1a3dc:	4562      	cmp	r2, ip
   1a3de:	d80e      	bhi.n	1a3fe <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   1a3e0:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a3e4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1a3e8:	d20b      	bcs.n	1a402 <bt_le_conn_params_valid+0x4c>
	return true;
   1a3ea:	2001      	movs	r0, #1
   1a3ec:	4770      	bx	lr
		return false;
   1a3ee:	2000      	movs	r0, #0
   1a3f0:	4770      	bx	lr
   1a3f2:	2000      	movs	r0, #0
   1a3f4:	4770      	bx	lr
   1a3f6:	2000      	movs	r0, #0
   1a3f8:	4770      	bx	lr
		return false;
   1a3fa:	2000      	movs	r0, #0
   1a3fc:	4770      	bx	lr
		return false;
   1a3fe:	2000      	movs	r0, #0
   1a400:	4770      	bx	lr
   1a402:	2000      	movs	r0, #0
}
   1a404:	4770      	bx	lr

0001a406 <le_conn_param_req_reply>:
{
   1a406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a408:	4606      	mov	r6, r0
   1a40a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a40c:	210e      	movs	r1, #14
   1a40e:	f242 0020 	movw	r0, #8224	; 0x2020
   1a412:	f7ee f861 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a416:	b1c0      	cbz	r0, 1a44a <le_conn_param_req_reply+0x44>
   1a418:	4607      	mov	r7, r0
   1a41a:	210e      	movs	r1, #14
   1a41c:	3008      	adds	r0, #8
   1a41e:	f002 fb7f 	bl	1cb20 <net_buf_simple_add>
   1a422:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1a424:	220e      	movs	r2, #14
   1a426:	2100      	movs	r1, #0
   1a428:	f7ff fe3e 	bl	1a0a8 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   1a42c:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a42e:	882b      	ldrh	r3, [r5, #0]
   1a430:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a432:	886b      	ldrh	r3, [r5, #2]
   1a434:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a436:	88ab      	ldrh	r3, [r5, #4]
   1a438:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a43a:	88eb      	ldrh	r3, [r5, #6]
   1a43c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a43e:	4639      	mov	r1, r7
   1a440:	f242 0020 	movw	r0, #8224	; 0x2020
   1a444:	f7ef f830 	bl	94a8 <bt_hci_cmd_send>
}
   1a448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1a44a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a44e:	e7fb      	b.n	1a448 <le_conn_param_req_reply+0x42>

0001a450 <bt_init>:
{
   1a450:	b510      	push	{r4, lr}
	err = hci_init();
   1a452:	f7ee fd47 	bl	8ee4 <hci_init>
	if (err) {
   1a456:	4604      	mov	r4, r0
   1a458:	b108      	cbz	r0, 1a45e <bt_init+0xe>
}
   1a45a:	4620      	mov	r0, r4
   1a45c:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   1a45e:	f7f1 fd7b 	bl	bf58 <bt_conn_init>
		if (err) {
   1a462:	4604      	mov	r4, r0
   1a464:	2800      	cmp	r0, #0
   1a466:	d1f8      	bne.n	1a45a <bt_init+0xa>
	bt_finalize_init();
   1a468:	f7ef fc58 	bl	9d1c <bt_finalize_init>
	return 0;
   1a46c:	e7f5      	b.n	1a45a <bt_init+0xa>

0001a46e <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1a46e:	2000      	movs	r0, #0
   1a470:	4770      	bx	lr

0001a472 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1a472:	2000      	movs	r0, #0
   1a474:	4770      	bx	lr

0001a476 <bt_lookup_id_addr>:
}
   1a476:	4608      	mov	r0, r1
   1a478:	4770      	bx	lr

0001a47a <bt_id_set_adv_random_addr>:
{
   1a47a:	b508      	push	{r3, lr}
		return set_random_address(addr);
   1a47c:	4608      	mov	r0, r1
   1a47e:	f7ef fd6f 	bl	9f60 <set_random_address>
}
   1a482:	bd08      	pop	{r3, pc}

0001a484 <bt_id_set_adv_private_addr>:
{
   1a484:	b510      	push	{r4, lr}
   1a486:	b082      	sub	sp, #8
   1a488:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a48a:	2106      	movs	r1, #6
   1a48c:	4668      	mov	r0, sp
   1a48e:	f7f0 fcfb 	bl	ae88 <bt_rand>
	if (err) {
   1a492:	b108      	cbz	r0, 1a498 <bt_id_set_adv_private_addr+0x14>
}
   1a494:	b002      	add	sp, #8
   1a496:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   1a498:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a49c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a4a0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a4a4:	4669      	mov	r1, sp
   1a4a6:	4620      	mov	r0, r4
   1a4a8:	f7ff ffe7 	bl	1a47a <bt_id_set_adv_random_addr>
	if (err) {
   1a4ac:	e7f2      	b.n	1a494 <bt_id_set_adv_private_addr+0x10>

0001a4ae <bt_id_adv_random_addr_check>:
}
   1a4ae:	2001      	movs	r0, #1
   1a4b0:	4770      	bx	lr

0001a4b2 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   1a4b2:	2300      	movs	r3, #0
   1a4b4:	428b      	cmp	r3, r1
   1a4b6:	d219      	bcs.n	1a4ec <ad_is_limited+0x3a>
{
   1a4b8:	b500      	push	{lr}
   1a4ba:	e002      	b.n	1a4c2 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   1a4bc:	3301      	adds	r3, #1
   1a4be:	428b      	cmp	r3, r1
   1a4c0:	d211      	bcs.n	1a4e6 <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   1a4c2:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   1a4c6:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   1a4ca:	f240 1201 	movw	r2, #257	; 0x101
   1a4ce:	4594      	cmp	ip, r2
   1a4d0:	d1f4      	bne.n	1a4bc <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   1a4d2:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1a4d6:	2a00      	cmp	r2, #0
   1a4d8:	d0f0      	beq.n	1a4bc <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1a4da:	7812      	ldrb	r2, [r2, #0]
   1a4dc:	f012 0f01 	tst.w	r2, #1
   1a4e0:	d0ec      	beq.n	1a4bc <ad_is_limited+0xa>
				return true;
   1a4e2:	2001      	movs	r0, #1
   1a4e4:	e000      	b.n	1a4e8 <ad_is_limited+0x36>
	return false;
   1a4e6:	2000      	movs	r0, #0
}
   1a4e8:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   1a4ec:	2000      	movs	r0, #0
}
   1a4ee:	4770      	bx	lr

0001a4f0 <get_filter_policy>:
}
   1a4f0:	2000      	movs	r0, #0
   1a4f2:	4770      	bx	lr

0001a4f4 <get_adv_channel_map>:
{
   1a4f4:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   1a4f6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1a4fa:	d10b      	bne.n	1a514 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   1a4fc:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1a4fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1a502:	d001      	beq.n	1a508 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   1a504:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1a508:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1a50c:	d001      	beq.n	1a512 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   1a50e:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   1a512:	4770      	bx	lr
		channel_map &= ~0x01;
   1a514:	2006      	movs	r0, #6
   1a516:	e7f2      	b.n	1a4fe <get_adv_channel_map+0xa>

0001a518 <hci_set_ad>:
{
   1a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a51c:	b082      	sub	sp, #8
   1a51e:	4607      	mov	r7, r0
   1a520:	460d      	mov	r5, r1
   1a522:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a524:	2120      	movs	r1, #32
   1a526:	f7ed ffd7 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a52a:	b300      	cbz	r0, 1a56e <hci_set_ad+0x56>
   1a52c:	4680      	mov	r8, r0
   1a52e:	2120      	movs	r1, #32
   1a530:	3008      	adds	r0, #8
   1a532:	f002 faf5 	bl	1cb20 <net_buf_simple_add>
   1a536:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1a538:	2220      	movs	r2, #32
   1a53a:	2100      	movs	r1, #0
   1a53c:	f7ff fdb4 	bl	1a0a8 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1a540:	9400      	str	r4, [sp, #0]
   1a542:	4633      	mov	r3, r6
   1a544:	462a      	mov	r2, r5
   1a546:	211f      	movs	r1, #31
   1a548:	1c60      	adds	r0, r4, #1
   1a54a:	f7f0 f82f 	bl	a5ac <set_data_add_complete>
	if (err) {
   1a54e:	4604      	mov	r4, r0
   1a550:	b948      	cbnz	r0, 1a566 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a552:	2200      	movs	r2, #0
   1a554:	4641      	mov	r1, r8
   1a556:	4638      	mov	r0, r7
   1a558:	f7ed fffc 	bl	8554 <bt_hci_cmd_send_sync>
   1a55c:	4604      	mov	r4, r0
}
   1a55e:	4620      	mov	r0, r4
   1a560:	b002      	add	sp, #8
   1a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1a566:	4640      	mov	r0, r8
   1a568:	f002 fa90 	bl	1ca8c <net_buf_unref>
		return err;
   1a56c:	e7f7      	b.n	1a55e <hci_set_ad+0x46>
		return -ENOBUFS;
   1a56e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a572:	e7f4      	b.n	1a55e <hci_set_ad+0x46>

0001a574 <set_ad>:
{
   1a574:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1a576:	f242 0008 	movw	r0, #8200	; 0x2008
   1a57a:	f7ff ffcd 	bl	1a518 <hci_set_ad>
}
   1a57e:	bd08      	pop	{r3, pc}

0001a580 <set_sd>:
{
   1a580:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a582:	f242 0009 	movw	r0, #8201	; 0x2009
   1a586:	f7ff ffc7 	bl	1a518 <hci_set_ad>
}
   1a58a:	bd08      	pop	{r3, pc}

0001a58c <le_adv_update>:
{
   1a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a590:	b089      	sub	sp, #36	; 0x24
   1a592:	4604      	mov	r4, r0
   1a594:	460e      	mov	r6, r1
   1a596:	4617      	mov	r7, r2
   1a598:	461d      	mov	r5, r3
   1a59a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   1a59e:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   1a5a2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   1a5a6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   1a5aa:	2300      	movs	r3, #0
   1a5ac:	9304      	str	r3, [sp, #16]
   1a5ae:	9305      	str	r3, [sp, #20]
   1a5b0:	9306      	str	r3, [sp, #24]
   1a5b2:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   1a5b4:	f1b9 0f00 	cmp.w	r9, #0
   1a5b8:	d12f      	bne.n	1a61a <le_adv_update+0x8e>
	if (!(ext_adv && scannable)) {
   1a5ba:	f1bb 0f00 	cmp.w	fp, #0
   1a5be:	d002      	beq.n	1a5c6 <le_adv_update+0x3a>
   1a5c0:	f1ba 0f00 	cmp.w	sl, #0
   1a5c4:	d10b      	bne.n	1a5de <le_adv_update+0x52>
		d[0].data = ad;
   1a5c6:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   1a5c8:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   1a5ca:	f1b9 0f01 	cmp.w	r9, #1
   1a5ce:	d052      	beq.n	1a676 <le_adv_update+0xea>
		d_len = 1;
   1a5d0:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   1a5d2:	a904      	add	r1, sp, #16
   1a5d4:	4620      	mov	r0, r4
   1a5d6:	f7ff ffcd 	bl	1a574 <set_ad>
		if (err) {
   1a5da:	4603      	mov	r3, r0
   1a5dc:	b9c8      	cbnz	r0, 1a612 <le_adv_update+0x86>
	if (scannable) {
   1a5de:	f1ba 0f00 	cmp.w	sl, #0
   1a5e2:	d00c      	beq.n	1a5fe <le_adv_update+0x72>
		d[0].data = sd;
   1a5e4:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   1a5e6:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   1a5ea:	f1b9 0f02 	cmp.w	r9, #2
   1a5ee:	d048      	beq.n	1a682 <le_adv_update+0xf6>
		d_len = 1;
   1a5f0:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   1a5f2:	a904      	add	r1, sp, #16
   1a5f4:	4620      	mov	r0, r4
   1a5f6:	f7ff ffc3 	bl	1a580 <set_sd>
		if (err) {
   1a5fa:	4603      	mov	r3, r0
   1a5fc:	b948      	cbnz	r0, 1a612 <le_adv_update+0x86>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   1a5fe:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a600:	e8d4 3fef 	ldaex	r3, [r4]
   1a604:	f043 0304 	orr.w	r3, r3, #4
   1a608:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1a60c:	2a00      	cmp	r2, #0
   1a60e:	d1f7      	bne.n	1a600 <le_adv_update+0x74>
	return 0;
   1a610:	2300      	movs	r3, #0
}
   1a612:	4618      	mov	r0, r3
   1a614:	b009      	add	sp, #36	; 0x24
   1a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1a61a:	f7ef fc81 	bl	9f20 <bt_get_name>
   1a61e:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   1a620:	b166      	cbz	r6, 1a63c <le_adv_update+0xb0>
	for (i = 0; i < ad_len; i++) {
   1a622:	2200      	movs	r2, #0
   1a624:	4297      	cmp	r7, r2
   1a626:	d907      	bls.n	1a638 <le_adv_update+0xac>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a628:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   1a62c:	3b08      	subs	r3, #8
   1a62e:	b2db      	uxtb	r3, r3
   1a630:	2b01      	cmp	r3, #1
   1a632:	d90f      	bls.n	1a654 <le_adv_update+0xc8>
	for (i = 0; i < ad_len; i++) {
   1a634:	3201      	adds	r2, #1
   1a636:	e7f5      	b.n	1a624 <le_adv_update+0x98>
	return false;
   1a638:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1a63a:	bb43      	cbnz	r3, 1a68e <le_adv_update+0x102>
   1a63c:	b175      	cbz	r5, 1a65c <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   1a63e:	2200      	movs	r2, #0
   1a640:	4590      	cmp	r8, r2
   1a642:	d909      	bls.n	1a658 <le_adv_update+0xcc>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a644:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   1a648:	3b08      	subs	r3, #8
   1a64a:	b2db      	uxtb	r3, r3
   1a64c:	2b01      	cmp	r3, #1
   1a64e:	d910      	bls.n	1a672 <le_adv_update+0xe6>
	for (i = 0; i < ad_len; i++) {
   1a650:	3201      	adds	r2, #1
   1a652:	e7f5      	b.n	1a640 <le_adv_update+0xb4>
			return true;
   1a654:	2301      	movs	r3, #1
   1a656:	e7f0      	b.n	1a63a <le_adv_update+0xae>
	return false;
   1a658:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   1a65a:	b9db      	cbnz	r3, 1a694 <le_adv_update+0x108>
		data = (struct bt_data)BT_DATA(
   1a65c:	9801      	ldr	r0, [sp, #4]
   1a65e:	f7ff fcb1 	bl	19fc4 <strlen>
   1a662:	2309      	movs	r3, #9
   1a664:	f88d 3008 	strb.w	r3, [sp, #8]
   1a668:	f88d 0009 	strb.w	r0, [sp, #9]
   1a66c:	9b01      	ldr	r3, [sp, #4]
   1a66e:	9303      	str	r3, [sp, #12]
   1a670:	e7a3      	b.n	1a5ba <le_adv_update+0x2e>
			return true;
   1a672:	2301      	movs	r3, #1
   1a674:	e7f1      	b.n	1a65a <le_adv_update+0xce>
			d[1].data = &data;
   1a676:	ab02      	add	r3, sp, #8
   1a678:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   1a67a:	2301      	movs	r3, #1
   1a67c:	9307      	str	r3, [sp, #28]
			d_len = 2;
   1a67e:	2202      	movs	r2, #2
   1a680:	e7a7      	b.n	1a5d2 <le_adv_update+0x46>
			d[1].data = &data;
   1a682:	ab02      	add	r3, sp, #8
   1a684:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   1a686:	2301      	movs	r3, #1
   1a688:	9307      	str	r3, [sp, #28]
			d_len = 2;
   1a68a:	2202      	movs	r2, #2
   1a68c:	e7b1      	b.n	1a5f2 <le_adv_update+0x66>
			return -EINVAL;
   1a68e:	f06f 0315 	mvn.w	r3, #21
   1a692:	e7be      	b.n	1a612 <le_adv_update+0x86>
   1a694:	f06f 0315 	mvn.w	r3, #21
   1a698:	e7bb      	b.n	1a612 <le_adv_update+0x86>

0001a69a <valid_adv_param>:
{
   1a69a:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1a69c:	6843      	ldr	r3, [r0, #4]
   1a69e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1a6a2:	d107      	bne.n	1a6b4 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1a6a4:	6902      	ldr	r2, [r0, #16]
   1a6a6:	b112      	cbz	r2, 1a6ae <valid_adv_param+0x14>
   1a6a8:	f013 0f01 	tst.w	r3, #1
   1a6ac:	d004      	beq.n	1a6b8 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   1a6ae:	f7ef ffef 	bl	a690 <valid_adv_ext_param>
}
   1a6b2:	bd08      	pop	{r3, pc}
		return false;
   1a6b4:	2000      	movs	r0, #0
   1a6b6:	e7fc      	b.n	1a6b2 <valid_adv_param+0x18>
		return false;
   1a6b8:	2000      	movs	r0, #0
   1a6ba:	e7fa      	b.n	1a6b2 <valid_adv_param+0x18>

0001a6bc <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1a6bc:	6843      	ldr	r3, [r0, #4]
   1a6be:	f013 0f08 	tst.w	r3, #8
   1a6c2:	d00b      	beq.n	1a6dc <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1a6c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1a6c8:	d10a      	bne.n	1a6e0 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1a6ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   1a6ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1a6d2:	d001      	beq.n	1a6d8 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   1a6d4:	2002      	movs	r0, #2
}
   1a6d6:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1a6d8:	2001      	movs	r0, #1
   1a6da:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   1a6dc:	2000      	movs	r0, #0
   1a6de:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1a6e0:	2001      	movs	r0, #1
   1a6e2:	4770      	bx	lr

0001a6e4 <bt_le_adv_set_enable_legacy>:
{
   1a6e4:	b570      	push	{r4, r5, r6, lr}
   1a6e6:	b086      	sub	sp, #24
   1a6e8:	4605      	mov	r5, r0
   1a6ea:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a6ec:	2101      	movs	r1, #1
   1a6ee:	f242 000a 	movw	r0, #8202	; 0x200a
   1a6f2:	f7ed fef1 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1a6f6:	b1d0      	cbz	r0, 1a72e <bt_le_adv_set_enable_legacy+0x4a>
   1a6f8:	4606      	mov	r6, r0
	if (enable) {
   1a6fa:	b19c      	cbz	r4, 1a724 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1a6fc:	2101      	movs	r1, #1
   1a6fe:	3008      	adds	r0, #8
   1a700:	f002 fa1f 	bl	1cb42 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1a704:	9400      	str	r4, [sp, #0]
   1a706:	2306      	movs	r3, #6
   1a708:	f105 0210 	add.w	r2, r5, #16
   1a70c:	a903      	add	r1, sp, #12
   1a70e:	4630      	mov	r0, r6
   1a710:	f7ed fed0 	bl	84b4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1a714:	2200      	movs	r2, #0
   1a716:	4631      	mov	r1, r6
   1a718:	f242 000a 	movw	r0, #8202	; 0x200a
   1a71c:	f7ed ff1a 	bl	8554 <bt_hci_cmd_send_sync>
}
   1a720:	b006      	add	sp, #24
   1a722:	bd70      	pop	{r4, r5, r6, pc}
   1a724:	2100      	movs	r1, #0
   1a726:	3008      	adds	r0, #8
   1a728:	f002 fa0b 	bl	1cb42 <net_buf_simple_add_u8>
   1a72c:	e7ea      	b.n	1a704 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   1a72e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a732:	e7f5      	b.n	1a720 <bt_le_adv_set_enable_legacy+0x3c>

0001a734 <bt_le_adv_set_enable>:
{
   1a734:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   1a736:	f7ff ffd5 	bl	1a6e4 <bt_le_adv_set_enable_legacy>
}
   1a73a:	bd08      	pop	{r3, pc}

0001a73c <bt_le_lim_adv_cancel_timeout>:
{
   1a73c:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1a73e:	3018      	adds	r0, #24
   1a740:	f005 f8c4 	bl	1f8cc <k_work_cancel_delayable>
}
   1a744:	bd08      	pop	{r3, pc}

0001a746 <bt_le_adv_resume>:
{
   1a746:	b570      	push	{r4, r5, r6, lr}
   1a748:	b082      	sub	sp, #8
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a74a:	f7f0 f86d 	bl	a828 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1a74e:	b138      	cbz	r0, 1a760 <bt_le_adv_resume+0x1a>
   1a750:	4605      	mov	r5, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1a752:	f100 0410 	add.w	r4, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a756:	e8d4 3faf 	lda	r3, [r4]
   1a75a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1a75e:	d101      	bne.n	1a764 <bt_le_adv_resume+0x1e>
}
   1a760:	b002      	add	sp, #8
   1a762:	bd70      	pop	{r4, r5, r6, pc}
   1a764:	e8d4 3faf 	lda	r3, [r4]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a768:	f3c3 1680 	ubfx	r6, r3, #6, #1
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1a76c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a770:	d1f6      	bne.n	1a760 <bt_le_adv_resume+0x1a>
   1a772:	e8d4 3faf 	lda	r3, [r4]
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1a776:	f413 7f00 	tst.w	r3, #512	; 0x200
   1a77a:	d0f1      	beq.n	1a760 <bt_le_adv_resume+0x1a>
	err = le_adv_start_add_conn(adv, &conn);
   1a77c:	a901      	add	r1, sp, #4
   1a77e:	f7ef ffd5 	bl	a72c <le_adv_start_add_conn>
	if (err) {
   1a782:	2800      	cmp	r0, #0
   1a784:	d1ec      	bne.n	1a760 <bt_le_adv_resume+0x1a>
	err = bt_le_adv_set_enable(adv, true);
   1a786:	2101      	movs	r1, #1
   1a788:	4628      	mov	r0, r5
   1a78a:	f7ff ffd3 	bl	1a734 <bt_le_adv_set_enable>
	if (err) {
   1a78e:	b168      	cbz	r0, 1a7ac <bt_le_adv_resume+0x66>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a790:	2100      	movs	r1, #0
   1a792:	9801      	ldr	r0, [sp, #4]
   1a794:	f7f0 ff38 	bl	b608 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a798:	e8d4 6fef 	ldaex	r6, [r4]
   1a79c:	f426 5300 	bic.w	r3, r6, #8192	; 0x2000
   1a7a0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1a7a4:	2a00      	cmp	r2, #0
   1a7a6:	d1f7      	bne.n	1a798 <bt_le_adv_resume+0x52>
	return (old & mask) != 0;
   1a7a8:	f3c6 3640 	ubfx	r6, r6, #13, #1
	bt_conn_unref(conn);
   1a7ac:	9801      	ldr	r0, [sp, #4]
   1a7ae:	f000 f926 	bl	1a9fe <bt_conn_unref>
	if (persist_paused) {
   1a7b2:	2e00      	cmp	r6, #0
   1a7b4:	d0d4      	beq.n	1a760 <bt_le_adv_resume+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a7b6:	e8d4 3fef 	ldaex	r3, [r4]
   1a7ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1a7be:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1a7c2:	2a00      	cmp	r2, #0
   1a7c4:	d0cc      	beq.n	1a760 <bt_le_adv_resume+0x1a>
   1a7c6:	e7f6      	b.n	1a7b6 <bt_le_adv_resume+0x70>

0001a7c8 <tx_notify>:
{
   1a7c8:	b570      	push	{r4, r5, r6, lr}
   1a7ca:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   1a7cc:	e00c      	b.n	1a7e8 <tx_notify+0x20>
   1a7ce:	f383 8811 	msr	BASEPRI, r3
   1a7d2:	f3bf 8f6f 	isb	sy
		if (!tx) {
   1a7d6:	b1c8      	cbz	r0, 1a80c <tx_notify+0x44>
		cb = tx->cb;
   1a7d8:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   1a7da:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   1a7dc:	f7f0 fbb6 	bl	af4c <tx_free>
		cb(conn, user_data, 0);
   1a7e0:	2200      	movs	r2, #0
   1a7e2:	4631      	mov	r1, r6
   1a7e4:	4620      	mov	r0, r4
   1a7e6:	47a8      	blx	r5
	__asm__ volatile(
   1a7e8:	f04f 0220 	mov.w	r2, #32
   1a7ec:	f3ef 8311 	mrs	r3, BASEPRI
   1a7f0:	f382 8812 	msr	BASEPRI_MAX, r2
   1a7f4:	f3bf 8f6f 	isb	sy
	return list->head;
   1a7f8:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1a7fa:	2800      	cmp	r0, #0
   1a7fc:	d0e7      	beq.n	1a7ce <tx_notify+0x6>
	return node->next;
   1a7fe:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1a800:	6222      	str	r2, [r4, #32]
	return list->tail;
   1a802:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a804:	4281      	cmp	r1, r0
   1a806:	d1e2      	bne.n	1a7ce <tx_notify+0x6>
	list->tail = node;
   1a808:	6262      	str	r2, [r4, #36]	; 0x24
}
   1a80a:	e7e0      	b.n	1a7ce <tx_notify+0x6>
}
   1a80c:	bd70      	pop	{r4, r5, r6, pc}

0001a80e <tx_complete_work>:
{
   1a80e:	b508      	push	{r3, lr}
	tx_notify(conn);
   1a810:	3828      	subs	r0, #40	; 0x28
   1a812:	f7ff ffd9 	bl	1a7c8 <tx_notify>
}
   1a816:	bd08      	pop	{r3, pc}

0001a818 <conn_tx_destroy>:
{
   1a818:	b570      	push	{r4, r5, r6, lr}
   1a81a:	4604      	mov	r4, r0
   1a81c:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   1a81e:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   1a820:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   1a822:	f7f0 fb93 	bl	af4c <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   1a826:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1a82a:	4631      	mov	r1, r6
   1a82c:	4620      	mov	r0, r4
   1a82e:	47a8      	blx	r5
}
   1a830:	bd70      	pop	{r4, r5, r6, pc}

0001a832 <send_acl>:
{
   1a832:	b570      	push	{r4, r5, r6, lr}
   1a834:	4605      	mov	r5, r0
   1a836:	460c      	mov	r4, r1
	switch (flags) {
   1a838:	2a03      	cmp	r2, #3
   1a83a:	d819      	bhi.n	1a870 <send_acl+0x3e>
   1a83c:	e8df f002 	tbb	[pc, r2]
   1a840:	16021602 	.word	0x16021602
   1a844:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   1a846:	2104      	movs	r1, #4
   1a848:	f104 0008 	add.w	r0, r4, #8
   1a84c:	f002 f989 	bl	1cb62 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1a850:	f9b5 3000 	ldrsh.w	r3, [r5]
   1a854:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   1a858:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a85a:	89a3      	ldrh	r3, [r4, #12]
   1a85c:	3b04      	subs	r3, #4
   1a85e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1a860:	2302      	movs	r3, #2
   1a862:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   1a864:	4620      	mov	r0, r4
   1a866:	f7ee fe15 	bl	9494 <bt_send>
}
   1a86a:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   1a86c:	2601      	movs	r6, #1
   1a86e:	e7ea      	b.n	1a846 <send_acl+0x14>
	switch (flags) {
   1a870:	f06f 0015 	mvn.w	r0, #21
   1a874:	e7f9      	b.n	1a86a <send_acl+0x38>

0001a876 <process_unack_tx>:
{
   1a876:	b510      	push	{r4, lr}
   1a878:	4604      	mov	r4, r0
   1a87a:	e028      	b.n	1a8ce <process_unack_tx+0x58>
			conn->pending_no_cb--;
   1a87c:	3b01      	subs	r3, #1
   1a87e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1a880:	f382 8811 	msr	BASEPRI, r2
   1a884:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1a888:	4620      	mov	r0, r4
   1a88a:	f7f0 fb83 	bl	af94 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1a88e:	f7fb fd8d 	bl	163ac <z_impl_k_sem_give>
			continue;
   1a892:	e01c      	b.n	1a8ce <process_unack_tx+0x58>
   1a894:	f382 8811 	msr	BASEPRI, r2
   1a898:	f3bf 8f6f 	isb	sy
		if (!node) {
   1a89c:	b361      	cbz	r1, 1a8f8 <process_unack_tx+0x82>
	__asm__ volatile(
   1a89e:	f04f 0220 	mov.w	r2, #32
   1a8a2:	f3ef 8311 	mrs	r3, BASEPRI
   1a8a6:	f382 8812 	msr	BASEPRI_MAX, r2
   1a8aa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1a8ae:	68ca      	ldr	r2, [r1, #12]
   1a8b0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1a8b2:	2200      	movs	r2, #0
   1a8b4:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   1a8b6:	f383 8811 	msr	BASEPRI, r3
   1a8ba:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1a8be:	4620      	mov	r0, r4
   1a8c0:	f7ff ffaa 	bl	1a818 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   1a8c4:	4620      	mov	r0, r4
   1a8c6:	f7f0 fb65 	bl	af94 <bt_conn_get_pkts>
   1a8ca:	f7fb fd6f 	bl	163ac <z_impl_k_sem_give>
	__asm__ volatile(
   1a8ce:	f04f 0320 	mov.w	r3, #32
   1a8d2:	f3ef 8211 	mrs	r2, BASEPRI
   1a8d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8da:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1a8de:	69e3      	ldr	r3, [r4, #28]
   1a8e0:	2b00      	cmp	r3, #0
   1a8e2:	d1cb      	bne.n	1a87c <process_unack_tx+0x6>
	return list->head;
   1a8e4:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1a8e6:	2900      	cmp	r1, #0
   1a8e8:	d0d4      	beq.n	1a894 <process_unack_tx+0x1e>
	return node->next;
   1a8ea:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1a8ec:	6163      	str	r3, [r4, #20]
	return list->tail;
   1a8ee:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a8f0:	4281      	cmp	r1, r0
   1a8f2:	d1cf      	bne.n	1a894 <process_unack_tx+0x1e>
	list->tail = node;
   1a8f4:	61a3      	str	r3, [r4, #24]
}
   1a8f6:	e7cd      	b.n	1a894 <process_unack_tx+0x1e>
}
   1a8f8:	bd10      	pop	{r4, pc}

0001a8fa <bt_conn_reset_rx_state>:
{
   1a8fa:	b510      	push	{r4, lr}
   1a8fc:	4604      	mov	r4, r0
	if (!conn->rx) {
   1a8fe:	6900      	ldr	r0, [r0, #16]
   1a900:	b118      	cbz	r0, 1a90a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1a902:	f002 f8c3 	bl	1ca8c <net_buf_unref>
	conn->rx = NULL;
   1a906:	2300      	movs	r3, #0
   1a908:	6123      	str	r3, [r4, #16]
}
   1a90a:	bd10      	pop	{r4, pc}

0001a90c <conn_cleanup>:
{
   1a90c:	b538      	push	{r3, r4, r5, lr}
   1a90e:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1a910:	2200      	movs	r2, #0
   1a912:	2300      	movs	r3, #0
   1a914:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a918:	f002 f82c 	bl	1c974 <net_buf_get>
   1a91c:	4603      	mov	r3, r0
   1a91e:	b160      	cbz	r0, 1a93a <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a920:	695c      	ldr	r4, [r3, #20]
		tx_data(buf)->tx = NULL;
   1a922:	2200      	movs	r2, #0
   1a924:	615a      	str	r2, [r3, #20]
		net_buf_unref(buf);
   1a926:	4618      	mov	r0, r3
   1a928:	f002 f8b0 	bl	1ca8c <net_buf_unref>
		if (tx) {
   1a92c:	2c00      	cmp	r4, #0
   1a92e:	d0ef      	beq.n	1a910 <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   1a930:	4621      	mov	r1, r4
   1a932:	4628      	mov	r0, r5
   1a934:	f7ff ff70 	bl	1a818 <conn_tx_destroy>
   1a938:	e7ea      	b.n	1a910 <conn_cleanup+0x4>
	bt_conn_reset_rx_state(conn);
   1a93a:	4628      	mov	r0, r5
   1a93c:	f7ff ffdd 	bl	1a8fa <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a940:	2200      	movs	r2, #0
   1a942:	2300      	movs	r3, #0
   1a944:	f105 0058 	add.w	r0, r5, #88	; 0x58
   1a948:	f7fb ff46 	bl	167d8 <k_work_reschedule>
}
   1a94c:	bd38      	pop	{r3, r4, r5, pc}

0001a94e <conn_prepare_events>:
	if (!atomic_get(&conn->ref)) {
   1a94e:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a952:	e8d3 3faf 	lda	r3, [r3]
   1a956:	b31b      	cbz	r3, 1a9a0 <conn_prepare_events+0x52>
{
   1a958:	b510      	push	{r4, lr}
   1a95a:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a95c:	7a83      	ldrb	r3, [r0, #10]
   1a95e:	b963      	cbnz	r3, 1a97a <conn_prepare_events+0x2c>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1a960:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a962:	e8d3 2fef 	ldaex	r2, [r3]
   1a966:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1a96a:	e8c3 1fec 	stlex	ip, r1, [r3]
   1a96e:	f1bc 0f00 	cmp.w	ip, #0
   1a972:	d1f6      	bne.n	1a962 <conn_prepare_events+0x14>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a974:	f012 0f40 	tst.w	r2, #64	; 0x40
   1a978:	d10d      	bne.n	1a996 <conn_prepare_events+0x48>
	if (conn->state != BT_CONN_CONNECTED) {
   1a97a:	7a83      	ldrb	r3, [r0, #10]
   1a97c:	2b07      	cmp	r3, #7
   1a97e:	d112      	bne.n	1a9a6 <conn_prepare_events+0x58>
	k_poll_event_init(&events[0],
   1a980:	f100 0338 	add.w	r3, r0, #56	; 0x38
   1a984:	2200      	movs	r2, #0
   1a986:	2104      	movs	r1, #4
   1a988:	4620      	mov	r0, r4
   1a98a:	f005 fad4 	bl	1ff36 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1a98e:	2301      	movs	r3, #1
   1a990:	7323      	strb	r3, [r4, #12]
	return 0;
   1a992:	2000      	movs	r0, #0
}
   1a994:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   1a996:	f7ff ffb9 	bl	1a90c <conn_cleanup>
		return -ENOTCONN;
   1a99a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a99e:	e7f9      	b.n	1a994 <conn_prepare_events+0x46>
		return -ENOTCONN;
   1a9a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1a9a4:	4770      	bx	lr
		return -ENOTCONN;
   1a9a6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a9aa:	e7f3      	b.n	1a994 <conn_prepare_events+0x46>

0001a9ac <bt_conn_recv>:
{
   1a9ac:	b570      	push	{r4, r5, r6, lr}
   1a9ae:	4604      	mov	r4, r0
   1a9b0:	460d      	mov	r5, r1
   1a9b2:	4616      	mov	r6, r2
	tx_notify(conn);
   1a9b4:	f7ff ff08 	bl	1a7c8 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   1a9b8:	4632      	mov	r2, r6
   1a9ba:	4629      	mov	r1, r5
   1a9bc:	4620      	mov	r0, r4
   1a9be:	f7f0 fbfb 	bl	b1b8 <bt_acl_recv>
}
   1a9c2:	bd70      	pop	{r4, r5, r6, pc}

0001a9c4 <bt_conn_ref>:
		old = atomic_get(&conn->ref);
   1a9c4:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a9c8:	e8d3 2faf 	lda	r2, [r3]
		if (!old) {
   1a9cc:	b1aa      	cbz	r2, 1a9fa <bt_conn_ref+0x36>
{
   1a9ce:	b500      	push	{lr}
   1a9d0:	e004      	b.n	1a9dc <bt_conn_ref+0x18>
		old = atomic_get(&conn->ref);
   1a9d2:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
   1a9d6:	e8d3 2faf 	lda	r2, [r3]
		if (!old) {
   1a9da:	b162      	cbz	r2, 1a9f6 <bt_conn_ref+0x32>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1a9dc:	1c51      	adds	r1, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a9de:	e8d3 cfef 	ldaex	ip, [r3]
   1a9e2:	4594      	cmp	ip, r2
   1a9e4:	d104      	bne.n	1a9f0 <bt_conn_ref+0x2c>
   1a9e6:	e8c3 1fee 	stlex	lr, r1, [r3]
   1a9ea:	f1be 0f00 	cmp.w	lr, #0
   1a9ee:	d1f6      	bne.n	1a9de <bt_conn_ref+0x1a>
   1a9f0:	d1ef      	bne.n	1a9d2 <bt_conn_ref+0xe>
}
   1a9f2:	f85d fb04 	ldr.w	pc, [sp], #4
			return NULL;
   1a9f6:	2000      	movs	r0, #0
   1a9f8:	e7fb      	b.n	1a9f2 <bt_conn_ref+0x2e>
   1a9fa:	2000      	movs	r0, #0
}
   1a9fc:	4770      	bx	lr

0001a9fe <bt_conn_unref>:
{
   1a9fe:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   1aa00:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aa04:	e8d3 2fef 	ldaex	r2, [r3]
   1aa08:	3a01      	subs	r2, #1
   1aa0a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1aa0e:	2900      	cmp	r1, #0
   1aa10:	d1f8      	bne.n	1aa04 <bt_conn_unref+0x6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1aa12:	7882      	ldrb	r2, [r0, #2]
   1aa14:	2a01      	cmp	r2, #1
   1aa16:	d000      	beq.n	1aa1a <bt_conn_unref+0x1c>
}
   1aa18:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aa1a:	e8d3 3faf 	lda	r3, [r3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1aa1e:	2b00      	cmp	r3, #0
   1aa20:	d1fa      	bne.n	1aa18 <bt_conn_unref+0x1a>
		bt_le_adv_resume();
   1aa22:	f7ff fe90 	bl	1a746 <bt_le_adv_resume>
}
   1aa26:	e7f7      	b.n	1aa18 <bt_conn_unref+0x1a>

0001aa28 <conn_lookup_handle>:
{
   1aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa2a:	4606      	mov	r6, r0
   1aa2c:	460d      	mov	r5, r1
   1aa2e:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   1aa30:	2400      	movs	r4, #0
   1aa32:	e003      	b.n	1aa3c <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   1aa34:	4660      	mov	r0, ip
   1aa36:	f7ff ffe2 	bl	1a9fe <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1aa3a:	3401      	adds	r4, #1
   1aa3c:	42ac      	cmp	r4, r5
   1aa3e:	d21c      	bcs.n	1aa7a <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1aa40:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1aa44:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   1aa48:	f7ff ffbc 	bl	1a9c4 <bt_conn_ref>
		if (!conn) {
   1aa4c:	4684      	mov	ip, r0
   1aa4e:	2800      	cmp	r0, #0
   1aa50:	d0f3      	beq.n	1aa3a <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1aa52:	7a83      	ldrb	r3, [r0, #10]
   1aa54:	2b01      	cmp	r3, #1
   1aa56:	d006      	beq.n	1aa66 <conn_lookup_handle+0x3e>
   1aa58:	b25a      	sxtb	r2, r3
   1aa5a:	2a00      	cmp	r2, #0
   1aa5c:	d0ea      	beq.n	1aa34 <conn_lookup_handle+0xc>
   1aa5e:	3b07      	subs	r3, #7
   1aa60:	b2db      	uxtb	r3, r3
   1aa62:	2b01      	cmp	r3, #1
   1aa64:	d8e6      	bhi.n	1aa34 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   1aa66:	f8bc 3000 	ldrh.w	r3, [ip]
   1aa6a:	42bb      	cmp	r3, r7
   1aa6c:	d101      	bne.n	1aa72 <conn_lookup_handle+0x4a>
}
   1aa6e:	4660      	mov	r0, ip
   1aa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1aa72:	4660      	mov	r0, ip
   1aa74:	f7ff ffc3 	bl	1a9fe <bt_conn_unref>
			continue;
   1aa78:	e7df      	b.n	1aa3a <conn_lookup_handle+0x12>
	return NULL;
   1aa7a:	f04f 0c00 	mov.w	ip, #0
   1aa7e:	e7f6      	b.n	1aa6e <conn_lookup_handle+0x46>

0001aa80 <bt_conn_connected>:
{
   1aa80:	b510      	push	{r4, lr}
   1aa82:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1aa84:	f7f1 fb64 	bl	c150 <bt_l2cap_connected>
	notify_connected(conn);
   1aa88:	4620      	mov	r0, r4
   1aa8a:	f7f0 fa1b 	bl	aec4 <notify_connected>
}
   1aa8e:	bd10      	pop	{r4, pc}

0001aa90 <bt_conn_get_security>:
}
   1aa90:	2001      	movs	r0, #1
   1aa92:	4770      	bx	lr

0001aa94 <bt_conn_add_le>:
{
   1aa94:	b570      	push	{r4, r5, r6, lr}
   1aa96:	4606      	mov	r6, r0
   1aa98:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   1aa9a:	f7f0 fb85 	bl	b1a8 <acl_conn_new>
	if (!conn) {
   1aa9e:	4604      	mov	r4, r0
   1aaa0:	b168      	cbz	r0, 1aabe <bt_conn_add_le+0x2a>
	conn->id = id;
   1aaa2:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   1aaa4:	2207      	movs	r2, #7
   1aaa6:	4629      	mov	r1, r5
   1aaa8:	3088      	adds	r0, #136	; 0x88
   1aaaa:	f7ff face 	bl	1a04a <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   1aaae:	2301      	movs	r3, #1
   1aab0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1aab2:	2318      	movs	r3, #24
   1aab4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   1aab8:	2328      	movs	r3, #40	; 0x28
   1aaba:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   1aabe:	4620      	mov	r0, r4
   1aac0:	bd70      	pop	{r4, r5, r6, pc}

0001aac2 <bt_conn_is_peer_addr_le>:
{
   1aac2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1aac4:	7a03      	ldrb	r3, [r0, #8]
   1aac6:	428b      	cmp	r3, r1
   1aac8:	d001      	beq.n	1aace <bt_conn_is_peer_addr_le+0xc>
		return false;
   1aaca:	2000      	movs	r0, #0
}
   1aacc:	bd38      	pop	{r3, r4, r5, pc}
   1aace:	4604      	mov	r4, r0
   1aad0:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   1aad2:	2207      	movs	r2, #7
   1aad4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1aad8:	4628      	mov	r0, r5
   1aada:	f7ff faa4 	bl	1a026 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1aade:	b1a8      	cbz	r0, 1ab0c <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1aae0:	78e3      	ldrb	r3, [r4, #3]
   1aae2:	b14b      	cbz	r3, 1aaf8 <bt_conn_is_peer_addr_le+0x36>
   1aae4:	2207      	movs	r2, #7
   1aae6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1aaea:	4628      	mov	r0, r5
   1aaec:	f7ff fa9b 	bl	1a026 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1aaf0:	fab0 f080 	clz	r0, r0
   1aaf4:	0940      	lsrs	r0, r0, #5
   1aaf6:	e7e9      	b.n	1aacc <bt_conn_is_peer_addr_le+0xa>
   1aaf8:	2207      	movs	r2, #7
   1aafa:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1aafe:	4628      	mov	r0, r5
   1ab00:	f7ff fa91 	bl	1a026 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   1ab04:	fab0 f080 	clz	r0, r0
   1ab08:	0940      	lsrs	r0, r0, #5
   1ab0a:	e7df      	b.n	1aacc <bt_conn_is_peer_addr_le+0xa>
		return true;
   1ab0c:	2001      	movs	r0, #1
   1ab0e:	e7dd      	b.n	1aacc <bt_conn_is_peer_addr_le+0xa>

0001ab10 <bt_conn_le_conn_update>:
{
   1ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab12:	4606      	mov	r6, r0
   1ab14:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ab16:	210e      	movs	r1, #14
   1ab18:	f242 0013 	movw	r0, #8211	; 0x2013
   1ab1c:	f7ed fcdc 	bl	84d8 <bt_hci_cmd_create>
	if (!buf) {
   1ab20:	b1d0      	cbz	r0, 1ab58 <bt_conn_le_conn_update+0x48>
   1ab22:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   1ab24:	210e      	movs	r1, #14
   1ab26:	3008      	adds	r0, #8
   1ab28:	f001 fffa 	bl	1cb20 <net_buf_simple_add>
   1ab2c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ab2e:	220e      	movs	r2, #14
   1ab30:	2100      	movs	r1, #0
   1ab32:	f7ff fab9 	bl	1a0a8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ab36:	8833      	ldrh	r3, [r6, #0]
   1ab38:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ab3a:	882b      	ldrh	r3, [r5, #0]
   1ab3c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ab3e:	886b      	ldrh	r3, [r5, #2]
   1ab40:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ab42:	88ab      	ldrh	r3, [r5, #4]
   1ab44:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ab46:	88eb      	ldrh	r3, [r5, #6]
   1ab48:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ab4a:	2200      	movs	r2, #0
   1ab4c:	4639      	mov	r1, r7
   1ab4e:	f242 0013 	movw	r0, #8211	; 0x2013
   1ab52:	f7ed fcff 	bl	8554 <bt_hci_cmd_send_sync>
}
   1ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1ab58:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ab5c:	e7fb      	b.n	1ab56 <bt_conn_le_conn_update+0x46>

0001ab5e <l2cap_connected>:
}
   1ab5e:	4770      	bx	lr

0001ab60 <l2cap_disconnected>:
}
   1ab60:	4770      	bx	lr

0001ab62 <l2cap_chan_recv>:
{
   1ab62:	b510      	push	{r4, lr}
   1ab64:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   1ab66:	6843      	ldr	r3, [r0, #4]
   1ab68:	691b      	ldr	r3, [r3, #16]
   1ab6a:	4798      	blx	r3
	net_buf_unref(buf);
   1ab6c:	4620      	mov	r0, r4
   1ab6e:	f001 ff8d 	bl	1ca8c <net_buf_unref>
}
   1ab72:	bd10      	pop	{r4, pc}

0001ab74 <bt_l2cap_chan_del>:
{
   1ab74:	b538      	push	{r3, r4, r5, lr}
   1ab76:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   1ab78:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   1ab7a:	6803      	ldr	r3, [r0, #0]
   1ab7c:	b123      	cbz	r3, 1ab88 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1ab7e:	686b      	ldr	r3, [r5, #4]
   1ab80:	b103      	cbz	r3, 1ab84 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1ab82:	4798      	blx	r3
	chan->conn = NULL;
   1ab84:	2300      	movs	r3, #0
   1ab86:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1ab88:	68e3      	ldr	r3, [r4, #12]
   1ab8a:	b10b      	cbz	r3, 1ab90 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1ab8c:	4620      	mov	r0, r4
   1ab8e:	4798      	blx	r3
	if (ops->released) {
   1ab90:	69eb      	ldr	r3, [r5, #28]
   1ab92:	b10b      	cbz	r3, 1ab98 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   1ab94:	4620      	mov	r0, r4
   1ab96:	4798      	blx	r3
}
   1ab98:	bd38      	pop	{r3, r4, r5, pc}

0001ab9a <bt_l2cap_chan_add>:
{
   1ab9a:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   1ab9c:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   1aba0:	2400      	movs	r4, #0
   1aba2:	608c      	str	r4, [r1, #8]
	return list->tail;
   1aba4:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   1aba6:	b12c      	cbz	r4, 1abb4 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   1aba8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1abaa:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   1abac:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   1abae:	60ca      	str	r2, [r1, #12]
}
   1abb0:	bc10      	pop	{r4}
   1abb2:	4770      	bx	lr
   1abb4:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   1abb6:	6503      	str	r3, [r0, #80]	; 0x50
}
   1abb8:	e7f8      	b.n	1abac <bt_l2cap_chan_add+0x12>

0001abba <bt_l2cap_disconnected>:
{
   1abba:	b510      	push	{r4, lr}
	return list->head;
   1abbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1abbe:	b140      	cbz	r0, 1abd2 <bt_l2cap_disconnected+0x18>
   1abc0:	3808      	subs	r0, #8
   1abc2:	d008      	beq.n	1abd6 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1abc4:	f110 0408 	adds.w	r4, r0, #8
   1abc8:	d00a      	beq.n	1abe0 <bt_l2cap_disconnected+0x26>
	return node->next;
   1abca:	6884      	ldr	r4, [r0, #8]
   1abcc:	b144      	cbz	r4, 1abe0 <bt_l2cap_disconnected+0x26>
   1abce:	3c08      	subs	r4, #8
   1abd0:	e006      	b.n	1abe0 <bt_l2cap_disconnected+0x26>
   1abd2:	4604      	mov	r4, r0
   1abd4:	e004      	b.n	1abe0 <bt_l2cap_disconnected+0x26>
   1abd6:	4604      	mov	r4, r0
   1abd8:	e002      	b.n	1abe0 <bt_l2cap_disconnected+0x26>
   1abda:	4623      	mov	r3, r4
   1abdc:	4620      	mov	r0, r4
   1abde:	461c      	mov	r4, r3
   1abe0:	b158      	cbz	r0, 1abfa <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   1abe2:	f7ff ffc7 	bl	1ab74 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1abe6:	2c00      	cmp	r4, #0
   1abe8:	d0f7      	beq.n	1abda <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1abea:	f114 0308 	adds.w	r3, r4, #8
   1abee:	d0f5      	beq.n	1abdc <bt_l2cap_disconnected+0x22>
	return node->next;
   1abf0:	68a3      	ldr	r3, [r4, #8]
   1abf2:	2b00      	cmp	r3, #0
   1abf4:	d0f2      	beq.n	1abdc <bt_l2cap_disconnected+0x22>
   1abf6:	3b08      	subs	r3, #8
   1abf8:	e7f0      	b.n	1abdc <bt_l2cap_disconnected+0x22>
}
   1abfa:	bd10      	pop	{r4, pc}

0001abfc <bt_l2cap_create_pdu_timeout>:
{
   1abfc:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   1abfe:	3104      	adds	r1, #4
   1ac00:	f7f0 fea4 	bl	b94c <bt_conn_create_pdu_timeout>
}
   1ac04:	bd08      	pop	{r3, pc}

0001ac06 <bt_l2cap_send_cb>:
{
   1ac06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac08:	4605      	mov	r5, r0
   1ac0a:	460f      	mov	r7, r1
   1ac0c:	4614      	mov	r4, r2
   1ac0e:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   1ac10:	2104      	movs	r1, #4
   1ac12:	f102 0008 	add.w	r0, r2, #8
   1ac16:	f001 ffa4 	bl	1cb62 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ac1a:	89a3      	ldrh	r3, [r4, #12]
   1ac1c:	3b04      	subs	r3, #4
   1ac1e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1ac20:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ac22:	9b06      	ldr	r3, [sp, #24]
   1ac24:	4632      	mov	r2, r6
   1ac26:	4621      	mov	r1, r4
   1ac28:	4628      	mov	r0, r5
   1ac2a:	f7f0 fc17 	bl	b45c <bt_conn_send_cb>
}
   1ac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ac30 <l2cap_send_reject>:
{
   1ac30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ac34:	b083      	sub	sp, #12
   1ac36:	4605      	mov	r5, r0
   1ac38:	4690      	mov	r8, r2
   1ac3a:	461c      	mov	r4, r3
   1ac3c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ac40:	1cbb      	adds	r3, r7, #2
   1ac42:	460a      	mov	r2, r1
   1ac44:	2101      	movs	r1, #1
   1ac46:	2000      	movs	r0, #0
   1ac48:	f7f1 fab8 	bl	c1bc <l2cap_create_le_sig_pdu>
	if (!buf) {
   1ac4c:	b1b0      	cbz	r0, 1ac7c <l2cap_send_reject+0x4c>
   1ac4e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1ac50:	f100 0908 	add.w	r9, r0, #8
   1ac54:	2102      	movs	r1, #2
   1ac56:	4648      	mov	r0, r9
   1ac58:	f001 ff62 	bl	1cb20 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ac5c:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   1ac60:	b124      	cbz	r4, 1ac6c <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ac62:	463a      	mov	r2, r7
   1ac64:	4621      	mov	r1, r4
   1ac66:	4648      	mov	r0, r9
   1ac68:	f001 ff60 	bl	1cb2c <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1ac6c:	2300      	movs	r3, #0
   1ac6e:	9300      	str	r3, [sp, #0]
   1ac70:	4632      	mov	r2, r6
   1ac72:	2105      	movs	r1, #5
   1ac74:	4628      	mov	r0, r5
   1ac76:	f7ff ffc6 	bl	1ac06 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1ac7a:	b910      	cbnz	r0, 1ac82 <l2cap_send_reject+0x52>
}
   1ac7c:	b003      	add	sp, #12
   1ac7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   1ac82:	4630      	mov	r0, r6
   1ac84:	f001 ff02 	bl	1ca8c <net_buf_unref>
}
   1ac88:	e7f8      	b.n	1ac7c <l2cap_send_reject+0x4c>

0001ac8a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ac8a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ac8c:	b110      	cbz	r0, 1ac94 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ac8e:	3808      	subs	r0, #8
   1ac90:	e000      	b.n	1ac94 <bt_l2cap_le_lookup_rx_cid+0xa>
   1ac92:	4618      	mov	r0, r3
   1ac94:	b148      	cbz	r0, 1acaa <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ac96:	8a83      	ldrh	r3, [r0, #20]
   1ac98:	428b      	cmp	r3, r1
   1ac9a:	d006      	beq.n	1acaa <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ac9c:	f110 0308 	adds.w	r3, r0, #8
   1aca0:	d0f7      	beq.n	1ac92 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   1aca2:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1aca4:	b108      	cbz	r0, 1acaa <bt_l2cap_le_lookup_rx_cid+0x20>
   1aca6:	3808      	subs	r0, #8
   1aca8:	e7f4      	b.n	1ac94 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   1acaa:	4770      	bx	lr

0001acac <bt_l2cap_update_conn_param>:
{
   1acac:	b570      	push	{r4, r5, r6, lr}
   1acae:	b082      	sub	sp, #8
   1acb0:	4605      	mov	r5, r0
   1acb2:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1acb4:	f7f1 f96c 	bl	bf90 <get_ident>
   1acb8:	4602      	mov	r2, r0
   1acba:	2308      	movs	r3, #8
   1acbc:	2112      	movs	r1, #18
   1acbe:	2000      	movs	r0, #0
   1acc0:	f7f1 fa7c 	bl	c1bc <l2cap_create_le_sig_pdu>
	if (!buf) {
   1acc4:	b1e0      	cbz	r0, 1ad00 <bt_l2cap_update_conn_param+0x54>
   1acc6:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1acc8:	2108      	movs	r1, #8
   1acca:	4408      	add	r0, r1
   1accc:	f001 ff28 	bl	1cb20 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1acd0:	8823      	ldrh	r3, [r4, #0]
   1acd2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1acd4:	8863      	ldrh	r3, [r4, #2]
   1acd6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1acd8:	88a3      	ldrh	r3, [r4, #4]
   1acda:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1acdc:	88e3      	ldrh	r3, [r4, #6]
   1acde:	80c3      	strh	r3, [r0, #6]
   1ace0:	2300      	movs	r3, #0
   1ace2:	9300      	str	r3, [sp, #0]
   1ace4:	4632      	mov	r2, r6
   1ace6:	2105      	movs	r1, #5
   1ace8:	4628      	mov	r0, r5
   1acea:	f7ff ff8c 	bl	1ac06 <bt_l2cap_send_cb>
	if (err) {
   1acee:	4604      	mov	r4, r0
   1acf0:	b910      	cbnz	r0, 1acf8 <bt_l2cap_update_conn_param+0x4c>
}
   1acf2:	4620      	mov	r0, r4
   1acf4:	b002      	add	sp, #8
   1acf6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1acf8:	4630      	mov	r0, r6
   1acfa:	f001 fec7 	bl	1ca8c <net_buf_unref>
		return err;
   1acfe:	e7f8      	b.n	1acf2 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   1ad00:	f06f 040b 	mvn.w	r4, #11
   1ad04:	e7f5      	b.n	1acf2 <bt_l2cap_update_conn_param+0x46>

0001ad06 <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1ad06:	4770      	bx	lr

0001ad08 <get_first_req_matching_chan>:
{
   1ad08:	4603      	mov	r3, r0
	return list->head;
   1ad0a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ad0c:	b120      	cbz	r0, 1ad18 <get_first_req_matching_chan+0x10>
	return node->next;
   1ad0e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ad10:	601a      	str	r2, [r3, #0]
	return list->tail;
   1ad12:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad14:	4288      	cmp	r0, r1
   1ad16:	d000      	beq.n	1ad1a <get_first_req_matching_chan+0x12>
}
   1ad18:	4770      	bx	lr
	list->tail = node;
   1ad1a:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   1ad1c:	e7fc      	b.n	1ad18 <get_first_req_matching_chan+0x10>

0001ad1e <range_is_valid>:
	if (!start || !end) {
   1ad1e:	b120      	cbz	r0, 1ad2a <range_is_valid+0xc>
   1ad20:	b119      	cbz	r1, 1ad2a <range_is_valid+0xc>
	if (start > end) {
   1ad22:	4288      	cmp	r0, r1
   1ad24:	d806      	bhi.n	1ad34 <range_is_valid+0x16>
	return true;
   1ad26:	2001      	movs	r0, #1
}
   1ad28:	4770      	bx	lr
		if (err) {
   1ad2a:	b10a      	cbz	r2, 1ad30 <range_is_valid+0x12>
			*err = 0U;
   1ad2c:	2300      	movs	r3, #0
   1ad2e:	8013      	strh	r3, [r2, #0]
		return false;
   1ad30:	2000      	movs	r0, #0
   1ad32:	4770      	bx	lr
		if (err) {
   1ad34:	b102      	cbz	r2, 1ad38 <range_is_valid+0x1a>
			*err = start;
   1ad36:	8010      	strh	r0, [r2, #0]
		return false;
   1ad38:	2000      	movs	r0, #0
   1ad3a:	4770      	bx	lr

0001ad3c <err_to_att>:
	if (err < 0 && err >= -0xff) {
   1ad3c:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1ad40:	d201      	bcs.n	1ad46 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   1ad42:	200e      	movs	r0, #14
}
   1ad44:	4770      	bx	lr
		return -err;
   1ad46:	4240      	negs	r0, r0
   1ad48:	b2c0      	uxtb	r0, r0
   1ad4a:	4770      	bx	lr

0001ad4c <attr_read_type_cb>:
{
   1ad4c:	b410      	push	{r4}
	if (!data->rsp->len) {
   1ad4e:	68d4      	ldr	r4, [r2, #12]
   1ad50:	7823      	ldrb	r3, [r4, #0]
   1ad52:	b923      	cbnz	r3, 1ad5e <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   1ad54:	3102      	adds	r1, #2
   1ad56:	7021      	strb	r1, [r4, #0]
	return true;
   1ad58:	2001      	movs	r0, #1
}
   1ad5a:	bc10      	pop	{r4}
   1ad5c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ad5e:	3102      	adds	r1, #2
   1ad60:	428b      	cmp	r3, r1
   1ad62:	d005      	beq.n	1ad70 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   1ad64:	8983      	ldrh	r3, [r0, #12]
   1ad66:	3b02      	subs	r3, #2
   1ad68:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ad6a:	2000      	movs	r0, #0
   1ad6c:	6110      	str	r0, [r2, #16]
		return false;
   1ad6e:	e7f4      	b.n	1ad5a <attr_read_type_cb+0xe>
	return true;
   1ad70:	2001      	movs	r0, #1
   1ad72:	e7f2      	b.n	1ad5a <attr_read_type_cb+0xe>

0001ad74 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ad74:	68d0      	ldr	r0, [r2, #12]
   1ad76:	7803      	ldrb	r3, [r0, #0]
   1ad78:	b91b      	cbnz	r3, 1ad82 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ad7a:	3104      	adds	r1, #4
   1ad7c:	7001      	strb	r1, [r0, #0]
	return true;
   1ad7e:	2001      	movs	r0, #1
   1ad80:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ad82:	3104      	adds	r1, #4
   1ad84:	428b      	cmp	r3, r1
   1ad86:	d006      	beq.n	1ad96 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   1ad88:	6891      	ldr	r1, [r2, #8]
   1ad8a:	898b      	ldrh	r3, [r1, #12]
   1ad8c:	3b04      	subs	r3, #4
   1ad8e:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1ad90:	2000      	movs	r0, #0
   1ad92:	6110      	str	r0, [r2, #16]
		return false;
   1ad94:	4770      	bx	lr
	return true;
   1ad96:	2001      	movs	r0, #1
}
   1ad98:	4770      	bx	lr

0001ad9a <att_prepare_write_req>:
}
   1ad9a:	2006      	movs	r0, #6
   1ad9c:	4770      	bx	lr

0001ad9e <att_exec_write_req>:
}
   1ad9e:	2006      	movs	r0, #6
   1ada0:	4770      	bx	lr

0001ada2 <att_op_get_type>:
	switch (op) {
   1ada2:	1e43      	subs	r3, r0, #1
   1ada4:	2bd1      	cmp	r3, #209	; 0xd1
   1ada6:	d874      	bhi.n	1ae92 <att_op_get_type+0xf0>
   1ada8:	e8df f003 	tbb	[pc, r3]
   1adac:	696d696d 	.word	0x696d696d
   1adb0:	696d696d 	.word	0x696d696d
   1adb4:	696d696d 	.word	0x696d696d
   1adb8:	696d696d 	.word	0x696d696d
   1adbc:	736d696d 	.word	0x736d696d
   1adc0:	696d6973 	.word	0x696d6973
   1adc4:	736f736d 	.word	0x736f736d
   1adc8:	69737871 	.word	0x69737871
   1adcc:	736f736d 	.word	0x736f736d
   1add0:	73737373 	.word	0x73737373
   1add4:	73737373 	.word	0x73737373
   1add8:	73737373 	.word	0x73737373
   1addc:	73737373 	.word	0x73737373
   1ade0:	73737373 	.word	0x73737373
   1ade4:	73737373 	.word	0x73737373
   1ade8:	73737373 	.word	0x73737373
   1adec:	73737373 	.word	0x73737373
   1adf0:	73737373 	.word	0x73737373
   1adf4:	73737373 	.word	0x73737373
   1adf8:	73737373 	.word	0x73737373
   1adfc:	73736b73 	.word	0x73736b73
   1ae00:	73737373 	.word	0x73737373
   1ae04:	73737373 	.word	0x73737373
   1ae08:	73737373 	.word	0x73737373
   1ae0c:	73737373 	.word	0x73737373
   1ae10:	73737373 	.word	0x73737373
   1ae14:	73737373 	.word	0x73737373
   1ae18:	73737373 	.word	0x73737373
   1ae1c:	73737373 	.word	0x73737373
   1ae20:	73737373 	.word	0x73737373
   1ae24:	73737373 	.word	0x73737373
   1ae28:	73737373 	.word	0x73737373
   1ae2c:	73737373 	.word	0x73737373
   1ae30:	73737373 	.word	0x73737373
   1ae34:	73737373 	.word	0x73737373
   1ae38:	73737373 	.word	0x73737373
   1ae3c:	73737373 	.word	0x73737373
   1ae40:	73737373 	.word	0x73737373
   1ae44:	73737373 	.word	0x73737373
   1ae48:	73737373 	.word	0x73737373
   1ae4c:	73737373 	.word	0x73737373
   1ae50:	73737373 	.word	0x73737373
   1ae54:	73737373 	.word	0x73737373
   1ae58:	73737373 	.word	0x73737373
   1ae5c:	73737373 	.word	0x73737373
   1ae60:	73737373 	.word	0x73737373
   1ae64:	73737373 	.word	0x73737373
   1ae68:	73737373 	.word	0x73737373
   1ae6c:	73737373 	.word	0x73737373
   1ae70:	73737373 	.word	0x73737373
   1ae74:	73737373 	.word	0x73737373
   1ae78:	73737373 	.word	0x73737373
   1ae7c:	6b73      	.short	0x6b73
   1ae7e:	2001      	movs	r0, #1
   1ae80:	4770      	bx	lr
		return ATT_COMMAND;
   1ae82:	2000      	movs	r0, #0
   1ae84:	4770      	bx	lr
		return ATT_RESPONSE;
   1ae86:	2002      	movs	r0, #2
   1ae88:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ae8a:	2003      	movs	r0, #3
   1ae8c:	4770      	bx	lr
		return ATT_INDICATION;
   1ae8e:	2005      	movs	r0, #5
   1ae90:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   1ae92:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ae96:	d103      	bne.n	1aea0 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   1ae98:	2006      	movs	r0, #6
   1ae9a:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1ae9c:	2004      	movs	r0, #4
   1ae9e:	4770      	bx	lr
		return ATT_COMMAND;
   1aea0:	2000      	movs	r0, #0
}
   1aea2:	4770      	bx	lr

0001aea4 <att_chan_attach>:
{
   1aea4:	b538      	push	{r3, r4, r5, lr}
   1aea6:	4604      	mov	r4, r0
   1aea8:	460d      	mov	r5, r1
	return list->head;
   1aeaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   1aeac:	b143      	cbz	r3, 1aec0 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   1aeae:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
   1aeb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1aeb4:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
	list->head = node;
   1aeb8:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   1aeba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1aebc:	b122      	cbz	r2, 1aec8 <att_chan_attach+0x24>
}
   1aebe:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   1aec0:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   1aec2:	f004 fb91 	bl	1f5e8 <z_impl_k_queue_init>
}
   1aec6:	e7f2      	b.n	1aeae <att_chan_attach+0xa>
	list->tail = node;
   1aec8:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1aeca:	e7f8      	b.n	1aebe <att_chan_attach+0x1a>

0001aecc <get_first_buf_matching_chan>:
{
   1aecc:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1aece:	2200      	movs	r2, #0
   1aed0:	2300      	movs	r3, #0
   1aed2:	f001 fd4f 	bl	1c974 <net_buf_get>
}
   1aed6:	bd08      	pop	{r3, pc}

0001aed8 <att_notify_mult>:
{
   1aed8:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1aeda:	6803      	ldr	r3, [r0, #0]
   1aedc:	898a      	ldrh	r2, [r1, #12]
   1aede:	6889      	ldr	r1, [r1, #8]
   1aee0:	6818      	ldr	r0, [r3, #0]
   1aee2:	f7f4 f8fb 	bl	f0dc <bt_gatt_mult_notification>
}
   1aee6:	2000      	movs	r0, #0
   1aee8:	bd08      	pop	{r3, pc}

0001aeea <att_notify>:
{
   1aeea:	b538      	push	{r3, r4, r5, lr}
   1aeec:	4605      	mov	r5, r0
   1aeee:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   1aef0:	f101 0008 	add.w	r0, r1, #8
   1aef4:	f001 fe54 	bl	1cba0 <net_buf_simple_pull_le16>
   1aef8:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1aefa:	682d      	ldr	r5, [r5, #0]
   1aefc:	89a3      	ldrh	r3, [r4, #12]
   1aefe:	68a2      	ldr	r2, [r4, #8]
   1af00:	6828      	ldr	r0, [r5, #0]
   1af02:	f001 fba2 	bl	1c64a <bt_gatt_notification>
}
   1af06:	2000      	movs	r0, #0
   1af08:	bd38      	pop	{r3, r4, r5, pc}

0001af0a <att_chan_mtu_updated>:
{
   1af0a:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   1af0c:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1af0e:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1af10:	b14c      	cbz	r4, 1af26 <att_chan_mtu_updated+0x1c>
   1af12:	3ce0      	subs	r4, #224	; 0xe0
   1af14:	d00b      	beq.n	1af2e <att_chan_mtu_updated+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1af16:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1af1a:	d005      	beq.n	1af28 <att_chan_mtu_updated+0x1e>
	return node->next;
   1af1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1af20:	b113      	cbz	r3, 1af28 <att_chan_mtu_updated+0x1e>
   1af22:	3be0      	subs	r3, #224	; 0xe0
   1af24:	e000      	b.n	1af28 <att_chan_mtu_updated+0x1e>
   1af26:	4623      	mov	r3, r4
   1af28:	2200      	movs	r2, #0
   1af2a:	4611      	mov	r1, r2
   1af2c:	e004      	b.n	1af38 <att_chan_mtu_updated+0x2e>
   1af2e:	4623      	mov	r3, r4
   1af30:	e7fa      	b.n	1af28 <att_chan_mtu_updated+0x1e>
   1af32:	461d      	mov	r5, r3
   1af34:	461c      	mov	r4, r3
   1af36:	462b      	mov	r3, r5
   1af38:	b1a4      	cbz	r4, 1af64 <att_chan_mtu_updated+0x5a>
		if (chan == updated_chan) {
   1af3a:	4284      	cmp	r4, r0
   1af3c:	d007      	beq.n	1af4e <att_chan_mtu_updated+0x44>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1af3e:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
   1af40:	42a9      	cmp	r1, r5
   1af42:	bf38      	it	cc
   1af44:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1af46:	8b64      	ldrh	r4, [r4, #26]
   1af48:	42a2      	cmp	r2, r4
   1af4a:	bf38      	it	cc
   1af4c:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1af4e:	2b00      	cmp	r3, #0
   1af50:	d0ef      	beq.n	1af32 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1af52:	f113 05e0 	adds.w	r5, r3, #224	; 0xe0
   1af56:	d0ed      	beq.n	1af34 <att_chan_mtu_updated+0x2a>
	return node->next;
   1af58:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
   1af5c:	2d00      	cmp	r5, #0
   1af5e:	d0e9      	beq.n	1af34 <att_chan_mtu_updated+0x2a>
   1af60:	3de0      	subs	r5, #224	; 0xe0
   1af62:	e7e7      	b.n	1af34 <att_chan_mtu_updated+0x2a>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1af64:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1af66:	428b      	cmp	r3, r1
   1af68:	d802      	bhi.n	1af70 <att_chan_mtu_updated+0x66>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1af6a:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1af6c:	4294      	cmp	r4, r2
   1af6e:	d909      	bls.n	1af84 <att_chan_mtu_updated+0x7a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   1af70:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1af72:	4282      	cmp	r2, r0
   1af74:	bf38      	it	cc
   1af76:	4602      	movcc	r2, r0
   1af78:	4299      	cmp	r1, r3
   1af7a:	bf38      	it	cc
   1af7c:	4619      	movcc	r1, r3
   1af7e:	6830      	ldr	r0, [r6, #0]
   1af80:	f7f4 f970 	bl	f264 <bt_gatt_att_max_mtu_changed>
}
   1af84:	bd70      	pop	{r4, r5, r6, pc}

0001af86 <write_cb>:
{
   1af86:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af88:	b083      	sub	sp, #12
   1af8a:	4606      	mov	r6, r0
   1af8c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1af8e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1af92:	4601      	mov	r1, r0
   1af94:	6820      	ldr	r0, [r4, #0]
   1af96:	f001 fa00 	bl	1c39a <bt_gatt_check_perm>
   1af9a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1af9c:	bb08      	cbnz	r0, 1afe2 <write_cb+0x5c>
   1af9e:	4605      	mov	r5, r0
	if (!data->req) {
   1afa0:	7a23      	ldrb	r3, [r4, #8]
   1afa2:	b11b      	cbz	r3, 1afac <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1afa4:	2b18      	cmp	r3, #24
   1afa6:	d016      	beq.n	1afd6 <write_cb+0x50>
	uint8_t flags = 0U;
   1afa8:	4603      	mov	r3, r0
   1afaa:	e000      	b.n	1afae <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1afac:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1afae:	68b7      	ldr	r7, [r6, #8]
   1afb0:	9301      	str	r3, [sp, #4]
   1afb2:	8a63      	ldrh	r3, [r4, #18]
   1afb4:	9300      	str	r3, [sp, #0]
   1afb6:	8a23      	ldrh	r3, [r4, #16]
   1afb8:	68e2      	ldr	r2, [r4, #12]
   1afba:	4631      	mov	r1, r6
   1afbc:	6820      	ldr	r0, [r4, #0]
   1afbe:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1afc0:	2800      	cmp	r0, #0
   1afc2:	db02      	blt.n	1afca <write_cb+0x44>
   1afc4:	8a23      	ldrh	r3, [r4, #16]
   1afc6:	4298      	cmp	r0, r3
   1afc8:	d007      	beq.n	1afda <write_cb+0x54>
		data->err = err_to_att(write);
   1afca:	f7ff feb7 	bl	1ad3c <err_to_att>
   1afce:	7520      	strb	r0, [r4, #20]
}
   1afd0:	4628      	mov	r0, r5
   1afd2:	b003      	add	sp, #12
   1afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   1afd6:	2304      	movs	r3, #4
   1afd8:	e7e9      	b.n	1afae <write_cb+0x28>
	data->err = 0U;
   1afda:	2300      	movs	r3, #0
   1afdc:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1afde:	2501      	movs	r5, #1
   1afe0:	e7f6      	b.n	1afd0 <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   1afe2:	2500      	movs	r5, #0
   1afe4:	e7f4      	b.n	1afd0 <write_cb+0x4a>

0001afe6 <att_chan_read>:
{
   1afe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afea:	b085      	sub	sp, #20
   1afec:	4680      	mov	r8, r0
   1afee:	4689      	mov	r9, r1
   1aff0:	9202      	str	r2, [sp, #8]
   1aff2:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1aff4:	6843      	ldr	r3, [r0, #4]
   1aff6:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1aff8:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
	while (buf) {
   1affa:	4613      	mov	r3, r2
	size_t bytes = 0;
   1affc:	2200      	movs	r2, #0
	while (buf) {
   1affe:	e002      	b.n	1b006 <att_chan_read+0x20>
		bytes += buf->len;
   1b000:	8999      	ldrh	r1, [r3, #12]
   1b002:	440a      	add	r2, r1
		buf = buf->frags;
   1b004:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b006:	2b00      	cmp	r3, #0
   1b008:	d1fa      	bne.n	1b000 <att_chan_read+0x1a>
   1b00a:	4290      	cmp	r0, r2
   1b00c:	d804      	bhi.n	1b018 <att_chan_read+0x32>
		return 0;
   1b00e:	2400      	movs	r4, #0
}
   1b010:	4620      	mov	r0, r4
   1b012:	b005      	add	sp, #20
   1b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   1b018:	9802      	ldr	r0, [sp, #8]
   1b01a:	f001 fd61 	bl	1cae0 <net_buf_frag_last>
   1b01e:	4607      	mov	r7, r0
	size_t len, total = 0;
   1b020:	f04f 0a00 	mov.w	sl, #0
   1b024:	e082      	b.n	1b12c <att_chan_read+0x146>
		bytes += buf->len;
   1b026:	8999      	ldrh	r1, [r3, #12]
   1b028:	440a      	add	r2, r1
		buf = buf->frags;
   1b02a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d1fa      	bne.n	1b026 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b030:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   1b032:	f107 0608 	add.w	r6, r7, #8
   1b036:	4630      	mov	r0, r6
   1b038:	f001 fdbe 	bl	1cbb8 <net_buf_simple_tailroom>
   1b03c:	4284      	cmp	r4, r0
   1b03e:	d326      	bcc.n	1b08e <att_chan_read+0xa8>
   1b040:	4630      	mov	r0, r6
   1b042:	f001 fdb9 	bl	1cbb8 <net_buf_simple_tailroom>
   1b046:	4606      	mov	r6, r0
		if (!len) {
   1b048:	b36e      	cbz	r6, 1b0a6 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b04a:	f8d9 4004 	ldr.w	r4, [r9, #4]
   1b04e:	68b9      	ldr	r1, [r7, #8]
   1b050:	89ba      	ldrh	r2, [r7, #12]
   1b052:	9500      	str	r5, [sp, #0]
   1b054:	b2b3      	uxth	r3, r6
   1b056:	440a      	add	r2, r1
   1b058:	4649      	mov	r1, r9
   1b05a:	9803      	ldr	r0, [sp, #12]
   1b05c:	47a0      	blx	r4
		if (read < 0) {
   1b05e:	1e04      	subs	r4, r0, #0
   1b060:	db55      	blt.n	1b10e <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   1b062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b064:	b12b      	cbz	r3, 1b072 <att_chan_read+0x8c>
   1b066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b068:	4621      	mov	r1, r4
   1b06a:	4638      	mov	r0, r7
   1b06c:	4798      	blx	r3
   1b06e:	2800      	cmp	r0, #0
   1b070:	d061      	beq.n	1b136 <att_chan_read+0x150>
		net_buf_add(frag, read);
   1b072:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   1b074:	4621      	mov	r1, r4
   1b076:	f107 0008 	add.w	r0, r7, #8
   1b07a:	f001 fd51 	bl	1cb20 <net_buf_simple_add>
		total += read;
   1b07e:	44a2      	add	sl, r4
		offset += read;
   1b080:	4425      	add	r5, r4
   1b082:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b084:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   1b088:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   1b08a:	2200      	movs	r2, #0
   1b08c:	e048      	b.n	1b120 <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b08e:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   1b092:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   1b094:	2200      	movs	r2, #0
	while (buf) {
   1b096:	e002      	b.n	1b09e <att_chan_read+0xb8>
		bytes += buf->len;
   1b098:	8999      	ldrh	r1, [r3, #12]
   1b09a:	440a      	add	r2, r1
		buf = buf->frags;
   1b09c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b09e:	2b00      	cmp	r3, #0
   1b0a0:	d1fa      	bne.n	1b098 <att_chan_read+0xb2>
   1b0a2:	1ab6      	subs	r6, r6, r2
   1b0a4:	e7d0      	b.n	1b048 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b0a6:	9b02      	ldr	r3, [sp, #8]
   1b0a8:	7998      	ldrb	r0, [r3, #6]
   1b0aa:	f7f4 f97b 	bl	f3a4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b0ae:	2200      	movs	r2, #0
   1b0b0:	2300      	movs	r3, #0
   1b0b2:	f001 fc58 	bl	1c966 <net_buf_alloc_fixed>
			if (!frag) {
   1b0b6:	4607      	mov	r7, r0
   1b0b8:	b150      	cbz	r0, 1b0d0 <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   1b0ba:	4601      	mov	r1, r0
   1b0bc:	f8dd b008 	ldr.w	fp, [sp, #8]
   1b0c0:	4658      	mov	r0, fp
   1b0c2:	f001 fd1e 	bl	1cb02 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b0c6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   1b0ca:	4632      	mov	r2, r6
	while (buf) {
   1b0cc:	465b      	mov	r3, fp
   1b0ce:	e004      	b.n	1b0da <att_chan_read+0xf4>
				return total;
   1b0d0:	4654      	mov	r4, sl
   1b0d2:	e79d      	b.n	1b010 <att_chan_read+0x2a>
		bytes += buf->len;
   1b0d4:	8999      	ldrh	r1, [r3, #12]
   1b0d6:	440a      	add	r2, r1
		buf = buf->frags;
   1b0d8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b0da:	2b00      	cmp	r3, #0
   1b0dc:	d1fa      	bne.n	1b0d4 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b0de:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   1b0e0:	f107 0b08 	add.w	fp, r7, #8
   1b0e4:	4658      	mov	r0, fp
   1b0e6:	f001 fd67 	bl	1cbb8 <net_buf_simple_tailroom>
   1b0ea:	4284      	cmp	r4, r0
   1b0ec:	d304      	bcc.n	1b0f8 <att_chan_read+0x112>
   1b0ee:	4658      	mov	r0, fp
   1b0f0:	f001 fd62 	bl	1cbb8 <net_buf_simple_tailroom>
   1b0f4:	4606      	mov	r6, r0
   1b0f6:	e7a8      	b.n	1b04a <att_chan_read+0x64>
   1b0f8:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   1b0fc:	9b02      	ldr	r3, [sp, #8]
   1b0fe:	e002      	b.n	1b106 <att_chan_read+0x120>
		bytes += buf->len;
   1b100:	899a      	ldrh	r2, [r3, #12]
   1b102:	4416      	add	r6, r2
		buf = buf->frags;
   1b104:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b106:	2b00      	cmp	r3, #0
   1b108:	d1fa      	bne.n	1b100 <att_chan_read+0x11a>
   1b10a:	1b8e      	subs	r6, r1, r6
   1b10c:	e79d      	b.n	1b04a <att_chan_read+0x64>
			if (total) {
   1b10e:	f1ba 0f00 	cmp.w	sl, #0
   1b112:	f43f af7d 	beq.w	1b010 <att_chan_read+0x2a>
				return total;
   1b116:	4654      	mov	r4, sl
   1b118:	e77a      	b.n	1b010 <att_chan_read+0x2a>
		bytes += buf->len;
   1b11a:	8999      	ldrh	r1, [r3, #12]
   1b11c:	440a      	add	r2, r1
		buf = buf->frags;
   1b11e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b120:	2b00      	cmp	r3, #0
   1b122:	d1fa      	bne.n	1b11a <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b124:	4290      	cmp	r0, r2
   1b126:	d906      	bls.n	1b136 <att_chan_read+0x150>
   1b128:	45b3      	cmp	fp, r6
   1b12a:	d104      	bne.n	1b136 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b12c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1b130:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   1b132:	2200      	movs	r2, #0
	while (buf) {
   1b134:	e77a      	b.n	1b02c <att_chan_read+0x46>
	return total;
   1b136:	4654      	mov	r4, sl
   1b138:	e76a      	b.n	1b010 <att_chan_read+0x2a>

0001b13a <read_vl_cb>:
{
   1b13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b13e:	b082      	sub	sp, #8
   1b140:	4606      	mov	r6, r0
   1b142:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b144:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b146:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   1b148:	2300      	movs	r3, #0
   1b14a:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b14c:	2295      	movs	r2, #149	; 0x95
   1b14e:	4631      	mov	r1, r6
   1b150:	f001 f923 	bl	1c39a <bt_gatt_check_perm>
   1b154:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1b156:	b9f0      	cbnz	r0, 1b196 <read_vl_cb+0x5c>
   1b158:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1b15a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1b15c:	68a0      	ldr	r0, [r4, #8]
   1b15e:	8982      	ldrh	r2, [r0, #12]
   1b160:	1a9b      	subs	r3, r3, r2
   1b162:	2b01      	cmp	r3, #1
   1b164:	dd18      	ble.n	1b198 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   1b166:	2102      	movs	r1, #2
   1b168:	3008      	adds	r0, #8
   1b16a:	f001 fcd9 	bl	1cb20 <net_buf_simple_add>
   1b16e:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b170:	2300      	movs	r3, #0
   1b172:	9301      	str	r3, [sp, #4]
   1b174:	9300      	str	r3, [sp, #0]
   1b176:	88a3      	ldrh	r3, [r4, #4]
   1b178:	68a2      	ldr	r2, [r4, #8]
   1b17a:	4631      	mov	r1, r6
   1b17c:	4638      	mov	r0, r7
   1b17e:	f7ff ff32 	bl	1afe6 <att_chan_read>
	if (read < 0) {
   1b182:	2800      	cmp	r0, #0
   1b184:	db03      	blt.n	1b18e <read_vl_cb+0x54>
	rsp->len = read;
   1b186:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   1b18a:	2501      	movs	r5, #1
   1b18c:	e004      	b.n	1b198 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   1b18e:	f7ff fdd5 	bl	1ad3c <err_to_att>
   1b192:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1b194:	e000      	b.n	1b198 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   1b196:	2500      	movs	r5, #0
}
   1b198:	4628      	mov	r0, r5
   1b19a:	b002      	add	sp, #8
   1b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b1a0 <read_cb>:
{
   1b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1a2:	b083      	sub	sp, #12
   1b1a4:	4606      	mov	r6, r0
   1b1a6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b1a8:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b1aa:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   1b1ac:	2300      	movs	r3, #0
   1b1ae:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b1b0:	2295      	movs	r2, #149	; 0x95
   1b1b2:	4631      	mov	r1, r6
   1b1b4:	f001 f8f1 	bl	1c39a <bt_gatt_check_perm>
   1b1b8:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1b1ba:	b118      	cbz	r0, 1b1c4 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   1b1bc:	2500      	movs	r5, #0
}
   1b1be:	4628      	mov	r0, r5
   1b1c0:	b003      	add	sp, #12
   1b1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b1c4:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b1c6:	2300      	movs	r3, #0
   1b1c8:	9301      	str	r3, [sp, #4]
   1b1ca:	9300      	str	r3, [sp, #0]
   1b1cc:	88a3      	ldrh	r3, [r4, #4]
   1b1ce:	68a2      	ldr	r2, [r4, #8]
   1b1d0:	4631      	mov	r1, r6
   1b1d2:	4638      	mov	r0, r7
   1b1d4:	f7ff ff07 	bl	1afe6 <att_chan_read>
	if (ret < 0) {
   1b1d8:	2800      	cmp	r0, #0
   1b1da:	db01      	blt.n	1b1e0 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   1b1dc:	2501      	movs	r5, #1
   1b1de:	e7ee      	b.n	1b1be <read_cb+0x1e>
		data->err = err_to_att(ret);
   1b1e0:	f7ff fdac 	bl	1ad3c <err_to_att>
   1b1e4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1b1e6:	e7ea      	b.n	1b1be <read_cb+0x1e>

0001b1e8 <find_info_cb>:
{
   1b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1ec:	4606      	mov	r6, r0
   1b1ee:	460f      	mov	r7, r1
   1b1f0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b1f2:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   1b1f6:	6893      	ldr	r3, [r2, #8]
   1b1f8:	b14b      	cbz	r3, 1b20e <find_info_cb+0x26>
	switch (data->rsp->format) {
   1b1fa:	68a3      	ldr	r3, [r4, #8]
   1b1fc:	781d      	ldrb	r5, [r3, #0]
   1b1fe:	2d01      	cmp	r5, #1
   1b200:	d013      	beq.n	1b22a <find_info_cb+0x42>
   1b202:	2d02      	cmp	r5, #2
   1b204:	d02d      	beq.n	1b262 <find_info_cb+0x7a>
   1b206:	2500      	movs	r5, #0
}
   1b208:	4628      	mov	r0, r5
   1b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b20e:	6850      	ldr	r0, [r2, #4]
   1b210:	2101      	movs	r1, #1
   1b212:	3008      	adds	r0, #8
   1b214:	f001 fc84 	bl	1cb20 <net_buf_simple_add>
   1b218:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b21a:	6833      	ldr	r3, [r6, #0]
   1b21c:	781b      	ldrb	r3, [r3, #0]
   1b21e:	b913      	cbnz	r3, 1b226 <find_info_cb+0x3e>
   1b220:	2301      	movs	r3, #1
   1b222:	7003      	strb	r3, [r0, #0]
   1b224:	e7e9      	b.n	1b1fa <find_info_cb+0x12>
   1b226:	2302      	movs	r3, #2
   1b228:	e7fb      	b.n	1b222 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b22a:	6833      	ldr	r3, [r6, #0]
   1b22c:	f893 9000 	ldrb.w	r9, [r3]
   1b230:	f1b9 0f00 	cmp.w	r9, #0
   1b234:	d001      	beq.n	1b23a <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   1b236:	2500      	movs	r5, #0
   1b238:	e7e6      	b.n	1b208 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b23a:	6860      	ldr	r0, [r4, #4]
   1b23c:	2104      	movs	r1, #4
   1b23e:	3008      	adds	r0, #8
   1b240:	f001 fc6e 	bl	1cb20 <net_buf_simple_add>
   1b244:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b246:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b248:	6832      	ldr	r2, [r6, #0]
   1b24a:	68e3      	ldr	r3, [r4, #12]
   1b24c:	8852      	ldrh	r2, [r2, #2]
   1b24e:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b250:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1b254:	6862      	ldr	r2, [r4, #4]
   1b256:	8992      	ldrh	r2, [r2, #12]
   1b258:	1a9b      	subs	r3, r3, r2
   1b25a:	2b04      	cmp	r3, #4
   1b25c:	d8d4      	bhi.n	1b208 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   1b25e:	464d      	mov	r5, r9
   1b260:	e7d2      	b.n	1b208 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b262:	6833      	ldr	r3, [r6, #0]
   1b264:	781b      	ldrb	r3, [r3, #0]
   1b266:	2b02      	cmp	r3, #2
   1b268:	d001      	beq.n	1b26e <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   1b26a:	2500      	movs	r5, #0
   1b26c:	e7cc      	b.n	1b208 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b26e:	6860      	ldr	r0, [r4, #4]
   1b270:	2112      	movs	r1, #18
   1b272:	3008      	adds	r0, #8
   1b274:	f001 fc54 	bl	1cb20 <net_buf_simple_add>
   1b278:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1b27a:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b27c:	68e0      	ldr	r0, [r4, #12]
   1b27e:	6831      	ldr	r1, [r6, #0]
   1b280:	2210      	movs	r2, #16
   1b282:	3101      	adds	r1, #1
   1b284:	3002      	adds	r0, #2
   1b286:	f7fe fee0 	bl	1a04a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1b28a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1b28e:	6862      	ldr	r2, [r4, #4]
   1b290:	8992      	ldrh	r2, [r2, #12]
   1b292:	1a9b      	subs	r3, r3, r2
   1b294:	2b12      	cmp	r3, #18
   1b296:	d801      	bhi.n	1b29c <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   1b298:	2500      	movs	r5, #0
   1b29a:	e7b5      	b.n	1b208 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   1b29c:	2501      	movs	r5, #1
   1b29e:	e7b3      	b.n	1b208 <find_info_cb+0x20>

0001b2a0 <bt_att_chan_send>:
{
   1b2a0:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   1b2a2:	f7f1 fdc3 	bl	ce2c <chan_send>
}
   1b2a6:	bd08      	pop	{r3, pc}

0001b2a8 <chan_req_send>:
{
   1b2a8:	b570      	push	{r4, r5, r6, lr}
   1b2aa:	4605      	mov	r5, r0
   1b2ac:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b2ae:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b2b0:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1b2b2:	2200      	movs	r2, #0
	while (buf) {
   1b2b4:	e003      	b.n	1b2be <chan_req_send+0x16>
		bytes += buf->len;
   1b2b6:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   1b2ba:	4462      	add	r2, ip
		buf = buf->frags;
   1b2bc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b2be:	2b00      	cmp	r3, #0
   1b2c0:	d1f9      	bne.n	1b2b6 <chan_req_send+0xe>
   1b2c2:	4291      	cmp	r1, r2
   1b2c4:	d30d      	bcc.n	1b2e2 <chan_req_send+0x3a>
	chan->req = req;
   1b2c6:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
	buf = req->buf;
   1b2ca:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   1b2cc:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   1b2ce:	4631      	mov	r1, r6
   1b2d0:	4628      	mov	r0, r5
   1b2d2:	f7ff ffe5 	bl	1b2a0 <bt_att_chan_send>
	if (err) {
   1b2d6:	b118      	cbz	r0, 1b2e0 <chan_req_send+0x38>
		req->buf = buf;
   1b2d8:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   1b2da:	2300      	movs	r3, #0
   1b2dc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
   1b2e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1b2e2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1b2e6:	e7fb      	b.n	1b2e0 <chan_req_send+0x38>

0001b2e8 <bt_att_chan_req_send>:
{
   1b2e8:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   1b2ea:	f7ff ffdd 	bl	1b2a8 <chan_req_send>
}
   1b2ee:	bd08      	pop	{r3, pc}

0001b2f0 <bt_att_status>:
{
   1b2f0:	b538      	push	{r3, r4, r5, lr}
   1b2f2:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1b2f6:	f013 0f01 	tst.w	r3, #1
   1b2fa:	d007      	beq.n	1b30c <bt_att_status+0x1c>
   1b2fc:	4604      	mov	r4, r0
   1b2fe:	3804      	subs	r0, #4
	if (!chan->att) {
   1b300:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1b304:	b113      	cbz	r3, 1b30c <bt_att_status+0x1c>
	if (chan->req) {
   1b306:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   1b30a:	b102      	cbz	r2, 1b30e <bt_att_status+0x1e>
}
   1b30c:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   1b30e:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1b310:	2d00      	cmp	r5, #0
   1b312:	d0fb      	beq.n	1b30c <bt_att_status+0x1c>
	return node->next;
   1b314:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1b316:	605a      	str	r2, [r3, #4]
	return list->tail;
   1b318:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b31a:	428d      	cmp	r5, r1
   1b31c:	d00e      	beq.n	1b33c <bt_att_status+0x4c>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b31e:	4629      	mov	r1, r5
   1b320:	f7ff ffe2 	bl	1b2e8 <bt_att_chan_req_send>
   1b324:	2800      	cmp	r0, #0
   1b326:	daf1      	bge.n	1b30c <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   1b328:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   1b32c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b32e:	602a      	str	r2, [r5, #0]
	list->head = node;
   1b330:	605d      	str	r5, [r3, #4]
	return list->tail;
   1b332:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   1b334:	2a00      	cmp	r2, #0
   1b336:	d1e9      	bne.n	1b30c <bt_att_status+0x1c>
	list->tail = node;
   1b338:	609d      	str	r5, [r3, #8]
}
   1b33a:	e7e7      	b.n	1b30c <bt_att_status+0x1c>
	list->tail = node;
   1b33c:	609a      	str	r2, [r3, #8]
}
   1b33e:	e7ee      	b.n	1b31e <bt_att_status+0x2e>

0001b340 <att_req_send_process>:
{
   1b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b342:	4607      	mov	r7, r0
	return list->head;
   1b344:	6a45      	ldr	r5, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b346:	b14d      	cbz	r5, 1b35c <att_req_send_process+0x1c>
   1b348:	3de0      	subs	r5, #224	; 0xe0
   1b34a:	d00b      	beq.n	1b364 <att_req_send_process+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b34c:	f115 04e0 	adds.w	r4, r5, #224	; 0xe0
   1b350:	d005      	beq.n	1b35e <att_req_send_process+0x1e>
	return node->next;
   1b352:	f8d5 40e0 	ldr.w	r4, [r5, #224]	; 0xe0
   1b356:	b114      	cbz	r4, 1b35e <att_req_send_process+0x1e>
   1b358:	3ce0      	subs	r4, #224	; 0xe0
   1b35a:	e000      	b.n	1b35e <att_req_send_process+0x1e>
   1b35c:	462c      	mov	r4, r5
   1b35e:	2200      	movs	r2, #0
   1b360:	4616      	mov	r6, r2
   1b362:	e02e      	b.n	1b3c2 <att_req_send_process+0x82>
   1b364:	462c      	mov	r4, r5
   1b366:	e7fa      	b.n	1b35e <att_req_send_process+0x1e>
		if (!req && prev &&
   1b368:	b196      	cbz	r6, 1b390 <att_req_send_process+0x50>
		req = get_first_req_matching_chan(&att->reqs, chan);
   1b36a:	4629      	mov	r1, r5
   1b36c:	1d38      	adds	r0, r7, #4
   1b36e:	f7ff fccb 	bl	1ad08 <get_first_req_matching_chan>
		if (!req) {
   1b372:	4606      	mov	r6, r0
   1b374:	b300      	cbz	r0, 1b3b8 <att_req_send_process+0x78>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1b376:	4601      	mov	r1, r0
   1b378:	4628      	mov	r0, r5
   1b37a:	f7ff ffb5 	bl	1b2e8 <bt_att_chan_req_send>
   1b37e:	2800      	cmp	r0, #0
   1b380:	da2f      	bge.n	1b3e2 <att_req_send_process+0xa2>
	return list->head;
   1b382:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   1b384:	6033      	str	r3, [r6, #0]
	list->head = node;
   1b386:	607e      	str	r6, [r7, #4]
	return list->tail;
   1b388:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   1b38a:	b193      	cbz	r3, 1b3b2 <att_req_send_process+0x72>
		prev = chan;
   1b38c:	462a      	mov	r2, r5
   1b38e:	e01d      	b.n	1b3cc <att_req_send_process+0x8c>
		if (!req && prev &&
   1b390:	2a00      	cmp	r2, #0
   1b392:	d0ea      	beq.n	1b36a <att_req_send_process+0x2a>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1b394:	f105 0390 	add.w	r3, r5, #144	; 0x90
   1b398:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b39c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1b3a0:	f102 0190 	add.w	r1, r2, #144	; 0x90
   1b3a4:	e8d1 1faf 	lda	r1, [r1]
   1b3a8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
		if (!req && prev &&
   1b3ac:	4299      	cmp	r1, r3
   1b3ae:	d1dc      	bne.n	1b36a <att_req_send_process+0x2a>
   1b3b0:	e00c      	b.n	1b3cc <att_req_send_process+0x8c>
	list->tail = node;
   1b3b2:	60be      	str	r6, [r7, #8]
		prev = chan;
   1b3b4:	462a      	mov	r2, r5
}
   1b3b6:	e009      	b.n	1b3cc <att_req_send_process+0x8c>
   1b3b8:	462a      	mov	r2, r5
   1b3ba:	e007      	b.n	1b3cc <att_req_send_process+0x8c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b3bc:	4623      	mov	r3, r4
   1b3be:	4625      	mov	r5, r4
   1b3c0:	461c      	mov	r4, r3
   1b3c2:	b175      	cbz	r5, 1b3e2 <att_req_send_process+0xa2>
		if (chan->req) {
   1b3c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1b3c8:	2b00      	cmp	r3, #0
   1b3ca:	d0cd      	beq.n	1b368 <att_req_send_process+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b3cc:	2c00      	cmp	r4, #0
   1b3ce:	d0f5      	beq.n	1b3bc <att_req_send_process+0x7c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b3d0:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1b3d4:	d0f3      	beq.n	1b3be <att_req_send_process+0x7e>
	return node->next;
   1b3d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1b3da:	2b00      	cmp	r3, #0
   1b3dc:	d0ef      	beq.n	1b3be <att_req_send_process+0x7e>
   1b3de:	3be0      	subs	r3, #224	; 0xe0
   1b3e0:	e7ed      	b.n	1b3be <att_req_send_process+0x7e>
}
   1b3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b3e4 <process_queue>:
{
   1b3e4:	b570      	push	{r4, r5, r6, lr}
   1b3e6:	4604      	mov	r4, r0
   1b3e8:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   1b3ea:	4601      	mov	r1, r0
   1b3ec:	4628      	mov	r0, r5
   1b3ee:	f7ff fd6d 	bl	1aecc <get_first_buf_matching_chan>
	if (buf) {
   1b3f2:	b168      	cbz	r0, 1b410 <process_queue+0x2c>
   1b3f4:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   1b3f6:	4601      	mov	r1, r0
   1b3f8:	4620      	mov	r0, r4
   1b3fa:	f7ff ff51 	bl	1b2a0 <bt_att_chan_send>
		if (err) {
   1b3fe:	4604      	mov	r4, r0
   1b400:	b908      	cbnz	r0, 1b406 <process_queue+0x22>
}
   1b402:	4620      	mov	r0, r4
   1b404:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   1b406:	4631      	mov	r1, r6
   1b408:	4628      	mov	r0, r5
   1b40a:	f004 f905 	bl	1f618 <k_queue_prepend>
			return err;
   1b40e:	e7f8      	b.n	1b402 <process_queue+0x1e>
	return -ENOENT;
   1b410:	f06f 0401 	mvn.w	r4, #1
   1b414:	e7f5      	b.n	1b402 <process_queue+0x1e>

0001b416 <bt_att_sent>:
{
   1b416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b418:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b41a:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   1b41c:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   1b420:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b424:	e8d3 2fef 	ldaex	r2, [r3]
   1b428:	f022 0210 	bic.w	r2, r2, #16
   1b42c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b430:	2900      	cmp	r1, #0
   1b432:	d1f7      	bne.n	1b424 <bt_att_sent+0xe>
	if (!att) {
   1b434:	b145      	cbz	r5, 1b448 <bt_att_sent+0x32>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b436:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1b43a:	b133      	cbz	r3, 1b44a <bt_att_sent+0x34>
	err = process_queue(chan, &chan->tx_queue);
   1b43c:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1b440:	4630      	mov	r0, r6
   1b442:	f7ff ffcf 	bl	1b3e4 <process_queue>
	if (!err) {
   1b446:	b9c0      	cbnz	r0, 1b47a <bt_att_sent+0x64>
}
   1b448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   1b44a:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b44c:	2f00      	cmp	r7, #0
   1b44e:	d0f5      	beq.n	1b43c <bt_att_sent+0x26>
	return node->next;
   1b450:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   1b452:	606b      	str	r3, [r5, #4]
	return list->tail;
   1b454:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b456:	42ba      	cmp	r2, r7
   1b458:	d00d      	beq.n	1b476 <bt_att_sent+0x60>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b45a:	4639      	mov	r1, r7
   1b45c:	4630      	mov	r0, r6
   1b45e:	f7ff ff23 	bl	1b2a8 <chan_req_send>
   1b462:	2800      	cmp	r0, #0
   1b464:	daf0      	bge.n	1b448 <bt_att_sent+0x32>
	return list->head;
   1b466:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1b468:	603b      	str	r3, [r7, #0]
	list->head = node;
   1b46a:	606f      	str	r7, [r5, #4]
	return list->tail;
   1b46c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   1b46e:	2b00      	cmp	r3, #0
   1b470:	d1e4      	bne.n	1b43c <bt_att_sent+0x26>
	list->tail = node;
   1b472:	60af      	str	r7, [r5, #8]
}
   1b474:	e7e2      	b.n	1b43c <bt_att_sent+0x26>
	list->tail = node;
   1b476:	60ab      	str	r3, [r5, #8]
}
   1b478:	e7ef      	b.n	1b45a <bt_att_sent+0x44>
	(void)process_queue(chan, &att->tx_queue);
   1b47a:	f105 010c 	add.w	r1, r5, #12
   1b47e:	4630      	mov	r0, r6
   1b480:	f7ff ffb0 	bl	1b3e4 <process_queue>
   1b484:	e7e0      	b.n	1b448 <bt_att_sent+0x32>

0001b486 <att_send_process>:
{
   1b486:	b570      	push	{r4, r5, r6, lr}
   1b488:	4606      	mov	r6, r0
	return list->head;
   1b48a:	6a45      	ldr	r5, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b48c:	b14d      	cbz	r5, 1b4a2 <att_send_process+0x1c>
   1b48e:	3de0      	subs	r5, #224	; 0xe0
   1b490:	d00b      	beq.n	1b4aa <att_send_process+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b492:	f115 04e0 	adds.w	r4, r5, #224	; 0xe0
   1b496:	d005      	beq.n	1b4a4 <att_send_process+0x1e>
	return node->next;
   1b498:	f8d5 40e0 	ldr.w	r4, [r5, #224]	; 0xe0
   1b49c:	b114      	cbz	r4, 1b4a4 <att_send_process+0x1e>
   1b49e:	3ce0      	subs	r4, #224	; 0xe0
   1b4a0:	e000      	b.n	1b4a4 <att_send_process+0x1e>
   1b4a2:	462c      	mov	r4, r5
   1b4a4:	2200      	movs	r2, #0
   1b4a6:	4611      	mov	r1, r2
   1b4a8:	e013      	b.n	1b4d2 <att_send_process+0x4c>
   1b4aa:	462c      	mov	r4, r5
   1b4ac:	e7fa      	b.n	1b4a4 <att_send_process+0x1e>
		err = process_queue(chan, &att->tx_queue);
   1b4ae:	f106 010c 	add.w	r1, r6, #12
   1b4b2:	4628      	mov	r0, r5
   1b4b4:	f7ff ff96 	bl	1b3e4 <process_queue>
		if (!err) {
   1b4b8:	4602      	mov	r2, r0
   1b4ba:	b310      	cbz	r0, 1b502 <att_send_process+0x7c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b4bc:	b1fc      	cbz	r4, 1b4fe <att_send_process+0x78>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b4be:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1b4c2:	d003      	beq.n	1b4cc <att_send_process+0x46>
	return node->next;
   1b4c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1b4c8:	b103      	cbz	r3, 1b4cc <att_send_process+0x46>
   1b4ca:	3be0      	subs	r3, #224	; 0xe0
   1b4cc:	4629      	mov	r1, r5
   1b4ce:	4625      	mov	r5, r4
   1b4d0:	461c      	mov	r4, r3
   1b4d2:	b1b5      	cbz	r5, 1b502 <att_send_process+0x7c>
		if (err == -ENOENT && prev &&
   1b4d4:	f112 0f02 	cmn.w	r2, #2
   1b4d8:	d1e9      	bne.n	1b4ae <att_send_process+0x28>
   1b4da:	2900      	cmp	r1, #0
   1b4dc:	d0e7      	beq.n	1b4ae <att_send_process+0x28>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1b4de:	f105 0390 	add.w	r3, r5, #144	; 0x90
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b4e2:	e8d3 3faf 	lda	r3, [r3]
   1b4e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1b4ea:	f101 0090 	add.w	r0, r1, #144	; 0x90
   1b4ee:	e8d0 0faf 	lda	r0, [r0]
   1b4f2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		if (err == -ENOENT && prev &&
   1b4f6:	4298      	cmp	r0, r3
   1b4f8:	d1d9      	bne.n	1b4ae <att_send_process+0x28>
   1b4fa:	460d      	mov	r5, r1
   1b4fc:	e7de      	b.n	1b4bc <att_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b4fe:	4623      	mov	r3, r4
   1b500:	e7e4      	b.n	1b4cc <att_send_process+0x46>
}
   1b502:	bd70      	pop	{r4, r5, r6, pc}

0001b504 <bt_att_chan_send_rsp>:
{
   1b504:	b538      	push	{r3, r4, r5, lr}
   1b506:	4604      	mov	r4, r0
   1b508:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1b50a:	f7f1 fc8f 	bl	ce2c <chan_send>
	if (err) {
   1b50e:	b900      	cbnz	r0, 1b512 <bt_att_chan_send_rsp+0xe>
}
   1b510:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   1b512:	4629      	mov	r1, r5
   1b514:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b518:	f001 faaa 	bl	1ca70 <net_buf_put>
}
   1b51c:	e7f8      	b.n	1b510 <bt_att_chan_send_rsp+0xc>

0001b51e <att_sent>:
{
   1b51e:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   1b520:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   1b522:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   1b524:	689b      	ldr	r3, [r3, #8]
   1b526:	695b      	ldr	r3, [r3, #20]
   1b528:	b103      	cbz	r3, 1b52c <att_sent+0xe>
		chan->ops->sent(chan);
   1b52a:	4798      	blx	r3
}
   1b52c:	bd08      	pop	{r3, pc}

0001b52e <att_unknown>:
{
   1b52e:	b570      	push	{r4, r5, r6, lr}
   1b530:	4604      	mov	r4, r0
   1b532:	460d      	mov	r5, r1
	if (!err) {
   1b534:	4616      	mov	r6, r2
   1b536:	b12a      	cbz	r2, 1b544 <att_unknown+0x16>
	chan_unknown(conn, user_data, err);
   1b538:	4632      	mov	r2, r6
   1b53a:	4629      	mov	r1, r5
   1b53c:	4620      	mov	r0, r4
   1b53e:	f7f1 fbfb 	bl	cd38 <chan_unknown>
}
   1b542:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   1b544:	f7ff ffeb 	bl	1b51e <att_sent>
   1b548:	e7f6      	b.n	1b538 <att_unknown+0xa>

0001b54a <att_tx_complete>:
{
   1b54a:	b570      	push	{r4, r5, r6, lr}
   1b54c:	4604      	mov	r4, r0
   1b54e:	460d      	mov	r5, r1
	if (!err) {
   1b550:	4616      	mov	r6, r2
   1b552:	b12a      	cbz	r2, 1b560 <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   1b554:	4632      	mov	r2, r6
   1b556:	4629      	mov	r1, r5
   1b558:	4620      	mov	r0, r4
   1b55a:	f7f1 fc43 	bl	cde4 <chan_tx_complete>
}
   1b55e:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   1b560:	f7ff ffdd 	bl	1b51e <att_sent>
   1b564:	e7f6      	b.n	1b554 <att_tx_complete+0xa>

0001b566 <att_req_sent>:
{
   1b566:	b570      	push	{r4, r5, r6, lr}
   1b568:	4604      	mov	r4, r0
   1b56a:	460d      	mov	r5, r1
	if (!err) {
   1b56c:	4616      	mov	r6, r2
   1b56e:	b12a      	cbz	r2, 1b57c <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   1b570:	4632      	mov	r2, r6
   1b572:	4629      	mov	r1, r5
   1b574:	4620      	mov	r0, r4
   1b576:	f7f1 fc1d 	bl	cdb4 <chan_req_sent>
}
   1b57a:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   1b57c:	f7ff ffcf 	bl	1b51e <att_sent>
   1b580:	e7f6      	b.n	1b570 <att_req_sent+0xa>

0001b582 <att_cfm_sent>:
{
   1b582:	b570      	push	{r4, r5, r6, lr}
   1b584:	4604      	mov	r4, r0
   1b586:	460d      	mov	r5, r1
	if (!err) {
   1b588:	4616      	mov	r6, r2
   1b58a:	b12a      	cbz	r2, 1b598 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   1b58c:	4632      	mov	r2, r6
   1b58e:	4629      	mov	r1, r5
   1b590:	4620      	mov	r0, r4
   1b592:	f7f1 fbdf 	bl	cd54 <chan_cfm_sent>
}
   1b596:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   1b598:	f7ff ffc1 	bl	1b51e <att_sent>
   1b59c:	e7f6      	b.n	1b58c <att_cfm_sent+0xa>

0001b59e <att_rsp_sent>:
{
   1b59e:	b570      	push	{r4, r5, r6, lr}
   1b5a0:	4604      	mov	r4, r0
   1b5a2:	460d      	mov	r5, r1
	if (!err) {
   1b5a4:	4616      	mov	r6, r2
   1b5a6:	b12a      	cbz	r2, 1b5b4 <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   1b5a8:	4632      	mov	r2, r6
   1b5aa:	4629      	mov	r1, r5
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	f7f1 fbe9 	bl	cd84 <chan_rsp_sent>
}
   1b5b2:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   1b5b4:	f7ff ffb3 	bl	1b51e <att_sent>
   1b5b8:	e7f6      	b.n	1b5a8 <att_rsp_sent+0xa>

0001b5ba <att_indicate>:
{
   1b5ba:	b538      	push	{r3, r4, r5, lr}
   1b5bc:	4605      	mov	r5, r0
   1b5be:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   1b5c0:	f101 0008 	add.w	r0, r1, #8
   1b5c4:	f001 faec 	bl	1cba0 <net_buf_simple_pull_le16>
   1b5c8:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b5ca:	89a3      	ldrh	r3, [r4, #12]
   1b5cc:	68a2      	ldr	r2, [r4, #8]
   1b5ce:	6828      	ldr	r0, [r5, #0]
   1b5d0:	6800      	ldr	r0, [r0, #0]
   1b5d2:	f001 f83a 	bl	1c64a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1b5d6:	2200      	movs	r2, #0
   1b5d8:	211e      	movs	r1, #30
   1b5da:	4628      	mov	r0, r5
   1b5dc:	f7f1 fc9e 	bl	cf1c <bt_att_chan_create_pdu>
	if (!buf) {
   1b5e0:	b118      	cbz	r0, 1b5ea <att_indicate+0x30>
   1b5e2:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf);
   1b5e4:	4628      	mov	r0, r5
   1b5e6:	f7ff ff8d 	bl	1b504 <bt_att_chan_send_rsp>
}
   1b5ea:	2000      	movs	r0, #0
   1b5ec:	bd38      	pop	{r3, r4, r5, pc}

0001b5ee <send_err_rsp>:
	if (!req) {
   1b5ee:	b901      	cbnz	r1, 1b5f2 <send_err_rsp+0x4>
   1b5f0:	4770      	bx	lr
{
   1b5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5f6:	4606      	mov	r6, r0
   1b5f8:	4615      	mov	r5, r2
   1b5fa:	461c      	mov	r4, r3
   1b5fc:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b5fe:	2204      	movs	r2, #4
   1b600:	2101      	movs	r1, #1
   1b602:	f7f1 fc8b 	bl	cf1c <bt_att_chan_create_pdu>
	if (!buf) {
   1b606:	4680      	mov	r8, r0
   1b608:	b158      	cbz	r0, 1b622 <send_err_rsp+0x34>
	return net_buf_simple_add(&buf->b, len);
   1b60a:	2104      	movs	r1, #4
   1b60c:	3008      	adds	r0, #8
   1b60e:	f001 fa87 	bl	1cb20 <net_buf_simple_add>
	rsp->request = req;
   1b612:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   1b614:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1b618:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1b61a:	4641      	mov	r1, r8
   1b61c:	4630      	mov	r0, r6
   1b61e:	f7ff ff71 	bl	1b504 <bt_att_chan_send_rsp>
}
   1b622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b626 <att_write_cmd>:
{
   1b626:	b530      	push	{r4, r5, lr}
   1b628:	b085      	sub	sp, #20
   1b62a:	4605      	mov	r5, r0
   1b62c:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   1b62e:	f101 0008 	add.w	r0, r1, #8
   1b632:	f001 fab5 	bl	1cba0 <net_buf_simple_pull_le16>
   1b636:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b638:	68a2      	ldr	r2, [r4, #8]
   1b63a:	89a1      	ldrh	r1, [r4, #12]
   1b63c:	9102      	str	r1, [sp, #8]
   1b63e:	9201      	str	r2, [sp, #4]
   1b640:	2100      	movs	r1, #0
   1b642:	9100      	str	r1, [sp, #0]
   1b644:	460a      	mov	r2, r1
   1b646:	4628      	mov	r0, r5
   1b648:	f7f1 feba 	bl	d3c0 <att_write_rsp>
}
   1b64c:	b005      	add	sp, #20
   1b64e:	bd30      	pop	{r4, r5, pc}

0001b650 <att_write_req>:
{
   1b650:	b530      	push	{r4, r5, lr}
   1b652:	b085      	sub	sp, #20
   1b654:	4605      	mov	r5, r0
   1b656:	460c      	mov	r4, r1
   1b658:	f101 0008 	add.w	r0, r1, #8
   1b65c:	f001 faa0 	bl	1cba0 <net_buf_simple_pull_le16>
   1b660:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   1b662:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b664:	89a1      	ldrh	r1, [r4, #12]
   1b666:	9102      	str	r1, [sp, #8]
   1b668:	9201      	str	r2, [sp, #4]
   1b66a:	2200      	movs	r2, #0
   1b66c:	9200      	str	r2, [sp, #0]
   1b66e:	2213      	movs	r2, #19
   1b670:	2112      	movs	r1, #18
   1b672:	4628      	mov	r0, r5
   1b674:	f7f1 fea4 	bl	d3c0 <att_write_rsp>
}
   1b678:	b005      	add	sp, #20
   1b67a:	bd30      	pop	{r4, r5, pc}

0001b67c <att_read_group_req>:
{
   1b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b67e:	b089      	sub	sp, #36	; 0x24
   1b680:	4605      	mov	r5, r0
   1b682:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b684:	7b0c      	ldrb	r4, [r1, #12]
   1b686:	3c04      	subs	r4, #4
   1b688:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b68a:	2c02      	cmp	r4, #2
   1b68c:	d001      	beq.n	1b692 <att_read_group_req+0x16>
   1b68e:	2c10      	cmp	r4, #16
   1b690:	d142      	bne.n	1b718 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b692:	2104      	movs	r1, #4
   1b694:	3008      	adds	r0, #8
   1b696:	f001 fa7b 	bl	1cb90 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b69a:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b69c:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b69e:	4622      	mov	r2, r4
   1b6a0:	1d01      	adds	r1, r0, #4
   1b6a2:	a801      	add	r0, sp, #4
   1b6a4:	f7fe fd5b 	bl	1a15e <bt_uuid_create>
   1b6a8:	b3c8      	cbz	r0, 1b71e <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1b6aa:	f10d 0216 	add.w	r2, sp, #22
   1b6ae:	4639      	mov	r1, r7
   1b6b0:	4630      	mov	r0, r6
   1b6b2:	f7ff fb34 	bl	1ad1e <range_is_valid>
   1b6b6:	b1f0      	cbz	r0, 1b6f6 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b6b8:	2300      	movs	r3, #0
   1b6ba:	f88d 3018 	strb.w	r3, [sp, #24]
   1b6be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b6c2:	f8ad 301a 	strh.w	r3, [sp, #26]
   1b6c6:	a906      	add	r1, sp, #24
   1b6c8:	a801      	add	r0, sp, #4
   1b6ca:	f7fe fd2a 	bl	1a122 <bt_uuid_cmp>
   1b6ce:	b158      	cbz	r0, 1b6e8 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	f88d 301c 	strb.w	r3, [sp, #28]
   1b6d6:	f642 0301 	movw	r3, #10241	; 0x2801
   1b6da:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b6de:	a907      	add	r1, sp, #28
   1b6e0:	a801      	add	r0, sp, #4
   1b6e2:	f7fe fd1e 	bl	1a122 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b6e6:	b978      	cbnz	r0, 1b708 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   1b6e8:	463b      	mov	r3, r7
   1b6ea:	4632      	mov	r2, r6
   1b6ec:	a901      	add	r1, sp, #4
   1b6ee:	4628      	mov	r0, r5
   1b6f0:	f7f1 ff5e 	bl	d5b0 <att_read_group_rsp>
   1b6f4:	e011      	b.n	1b71a <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   1b6f6:	2301      	movs	r3, #1
   1b6f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1b6fc:	2110      	movs	r1, #16
   1b6fe:	4628      	mov	r0, r5
   1b700:	f7ff ff75 	bl	1b5ee <send_err_rsp>
		return 0;
   1b704:	2000      	movs	r0, #0
   1b706:	e008      	b.n	1b71a <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1b708:	2310      	movs	r3, #16
   1b70a:	4632      	mov	r2, r6
   1b70c:	4619      	mov	r1, r3
   1b70e:	4628      	mov	r0, r5
   1b710:	f7ff ff6d 	bl	1b5ee <send_err_rsp>
		return 0;
   1b714:	2000      	movs	r0, #0
   1b716:	e000      	b.n	1b71a <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   1b718:	2004      	movs	r0, #4
}
   1b71a:	b009      	add	sp, #36	; 0x24
   1b71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   1b71e:	200e      	movs	r0, #14
   1b720:	e7fb      	b.n	1b71a <att_read_group_req+0x9e>

0001b722 <att_read_blob_req>:
{
   1b722:	b500      	push	{lr}
   1b724:	b083      	sub	sp, #12
	req = (void *)buf->data;
   1b726:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   1b728:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   1b72a:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b72c:	9200      	str	r2, [sp, #0]
   1b72e:	220d      	movs	r2, #13
   1b730:	210c      	movs	r1, #12
   1b732:	f7f2 f85b 	bl	d7ec <att_read_rsp>
}
   1b736:	b003      	add	sp, #12
   1b738:	f85d fb04 	ldr.w	pc, [sp], #4

0001b73c <att_read_req>:
{
   1b73c:	b500      	push	{lr}
   1b73e:	b083      	sub	sp, #12
	req = (void *)buf->data;
   1b740:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   1b742:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b744:	2200      	movs	r2, #0
   1b746:	9200      	str	r2, [sp, #0]
   1b748:	220b      	movs	r2, #11
   1b74a:	210a      	movs	r1, #10
   1b74c:	f7f2 f84e 	bl	d7ec <att_read_rsp>
}
   1b750:	b003      	add	sp, #12
   1b752:	f85d fb04 	ldr.w	pc, [sp], #4

0001b756 <att_read_type_req>:
{
   1b756:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b758:	b087      	sub	sp, #28
   1b75a:	4605      	mov	r5, r0
   1b75c:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b75e:	7b0c      	ldrb	r4, [r1, #12]
   1b760:	3c04      	subs	r4, #4
   1b762:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b764:	2c02      	cmp	r4, #2
   1b766:	d001      	beq.n	1b76c <att_read_type_req+0x16>
   1b768:	2c10      	cmp	r4, #16
   1b76a:	d123      	bne.n	1b7b4 <att_read_type_req+0x5e>
   1b76c:	2104      	movs	r1, #4
   1b76e:	3008      	adds	r0, #8
   1b770:	f001 fa0e 	bl	1cb90 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b774:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b776:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b778:	4622      	mov	r2, r4
   1b77a:	1d01      	adds	r1, r0, #4
   1b77c:	a801      	add	r0, sp, #4
   1b77e:	f7fe fcee 	bl	1a15e <bt_uuid_create>
   1b782:	b1c8      	cbz	r0, 1b7b8 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1b784:	f10d 0216 	add.w	r2, sp, #22
   1b788:	4639      	mov	r1, r7
   1b78a:	4630      	mov	r0, r6
   1b78c:	f7ff fac7 	bl	1ad1e <range_is_valid>
   1b790:	b138      	cbz	r0, 1b7a2 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   1b792:	463b      	mov	r3, r7
   1b794:	4632      	mov	r2, r6
   1b796:	a901      	add	r1, sp, #4
   1b798:	4628      	mov	r0, r5
   1b79a:	f7f2 f88f 	bl	d8bc <att_read_type_rsp>
}
   1b79e:	b007      	add	sp, #28
   1b7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   1b7a2:	2301      	movs	r3, #1
   1b7a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1b7a8:	2108      	movs	r1, #8
   1b7aa:	4628      	mov	r0, r5
   1b7ac:	f7ff ff1f 	bl	1b5ee <send_err_rsp>
		return 0;
   1b7b0:	2000      	movs	r0, #0
   1b7b2:	e7f4      	b.n	1b79e <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   1b7b4:	2004      	movs	r0, #4
   1b7b6:	e7f2      	b.n	1b79e <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   1b7b8:	200e      	movs	r0, #14
   1b7ba:	e7f0      	b.n	1b79e <att_read_type_req+0x48>

0001b7bc <att_find_type_req>:
{
   1b7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7c0:	b087      	sub	sp, #28
   1b7c2:	4607      	mov	r7, r0
   1b7c4:	460c      	mov	r4, r1
   1b7c6:	2106      	movs	r1, #6
   1b7c8:	f104 0008 	add.w	r0, r4, #8
   1b7cc:	f001 f9e0 	bl	1cb90 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b7d0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b7d2:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1b7d4:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   1b7d8:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1b7dc:	f10d 020e 	add.w	r2, sp, #14
   1b7e0:	4631      	mov	r1, r6
   1b7e2:	4628      	mov	r0, r5
   1b7e4:	f7ff fa9b 	bl	1ad1e <range_is_valid>
   1b7e8:	b1d0      	cbz	r0, 1b820 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b7ea:	2300      	movs	r3, #0
   1b7ec:	f88d 3010 	strb.w	r3, [sp, #16]
   1b7f0:	f8ad 8012 	strh.w	r8, [sp, #18]
   1b7f4:	f88d 3014 	strb.w	r3, [sp, #20]
   1b7f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b7fc:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b800:	a905      	add	r1, sp, #20
   1b802:	a804      	add	r0, sp, #16
   1b804:	f7fe fc8d 	bl	1a122 <bt_uuid_cmp>
   1b808:	b998      	cbnz	r0, 1b832 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b80a:	7b23      	ldrb	r3, [r4, #12]
   1b80c:	9300      	str	r3, [sp, #0]
   1b80e:	464b      	mov	r3, r9
   1b810:	4632      	mov	r2, r6
   1b812:	4629      	mov	r1, r5
   1b814:	4638      	mov	r0, r7
   1b816:	f7f2 f8a5 	bl	d964 <att_find_type_rsp>
}
   1b81a:	b007      	add	sp, #28
   1b81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   1b820:	2301      	movs	r3, #1
   1b822:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1b826:	2106      	movs	r1, #6
   1b828:	4638      	mov	r0, r7
   1b82a:	f7ff fee0 	bl	1b5ee <send_err_rsp>
		return 0;
   1b82e:	2000      	movs	r0, #0
   1b830:	e7f3      	b.n	1b81a <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1b832:	230a      	movs	r3, #10
   1b834:	462a      	mov	r2, r5
   1b836:	2106      	movs	r1, #6
   1b838:	4638      	mov	r0, r7
   1b83a:	f7ff fed8 	bl	1b5ee <send_err_rsp>
		return 0;
   1b83e:	2000      	movs	r0, #0
   1b840:	e7eb      	b.n	1b81a <att_find_type_req+0x5e>

0001b842 <att_find_info_req>:
{
   1b842:	b570      	push	{r4, r5, r6, lr}
   1b844:	b082      	sub	sp, #8
   1b846:	4604      	mov	r4, r0
	req = (void *)buf->data;
   1b848:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b84a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b84c:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1b84e:	f10d 0206 	add.w	r2, sp, #6
   1b852:	4631      	mov	r1, r6
   1b854:	4628      	mov	r0, r5
   1b856:	f7ff fa62 	bl	1ad1e <range_is_valid>
   1b85a:	b130      	cbz	r0, 1b86a <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b85c:	4632      	mov	r2, r6
   1b85e:	4629      	mov	r1, r5
   1b860:	4620      	mov	r0, r4
   1b862:	f7f2 f8d3 	bl	da0c <att_find_info_rsp>
}
   1b866:	b002      	add	sp, #8
   1b868:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   1b86a:	2301      	movs	r3, #1
   1b86c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1b870:	2104      	movs	r1, #4
   1b872:	4620      	mov	r0, r4
   1b874:	f7ff febb 	bl	1b5ee <send_err_rsp>
		return 0;
   1b878:	2000      	movs	r0, #0
   1b87a:	e7f4      	b.n	1b866 <att_find_info_req+0x24>

0001b87c <att_mtu_req>:
{
   1b87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->att->conn;
   1b880:	4603      	mov	r3, r0
   1b882:	f853 2b90 	ldr.w	r2, [r3], #144
   1b886:	6817      	ldr	r7, [r2, #0]
   1b888:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b88c:	f013 0f08 	tst.w	r3, #8
   1b890:	d12b      	bne.n	1b8ea <att_mtu_req+0x6e>
   1b892:	4604      	mov	r4, r0
	req = (void *)buf->data;
   1b894:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b896:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b898:	2e16      	cmp	r6, #22
   1b89a:	d928      	bls.n	1b8ee <att_mtu_req+0x72>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b89c:	2202      	movs	r2, #2
   1b89e:	2103      	movs	r1, #3
   1b8a0:	4638      	mov	r0, r7
   1b8a2:	f7f1 fe0d 	bl	d4c0 <bt_att_create_pdu>
	if (!pdu) {
   1b8a6:	4680      	mov	r8, r0
   1b8a8:	b318      	cbz	r0, 1b8f2 <att_mtu_req+0x76>
	return net_buf_simple_add(&buf->b, len);
   1b8aa:	2102      	movs	r1, #2
   1b8ac:	3008      	adds	r0, #8
   1b8ae:	f001 f937 	bl	1cb20 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b8b2:	2500      	movs	r5, #0
   1b8b4:	2317      	movs	r3, #23
   1b8b6:	7003      	strb	r3, [r0, #0]
   1b8b8:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1b8ba:	4641      	mov	r1, r8
   1b8bc:	4620      	mov	r0, r4
   1b8be:	f7ff fe21 	bl	1b504 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b8c2:	2e17      	cmp	r6, #23
   1b8c4:	bf28      	it	cs
   1b8c6:	2617      	movcs	r6, #23
   1b8c8:	8366      	strh	r6, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b8ca:	8566      	strh	r6, [r4, #42]	; 0x2a
	atomic_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED);
   1b8cc:	3704      	adds	r7, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b8ce:	e8d7 3fef 	ldaex	r3, [r7]
   1b8d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b8d6:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1b8da:	2a00      	cmp	r2, #0
   1b8dc:	d1f7      	bne.n	1b8ce <att_mtu_req+0x52>
	att_chan_mtu_updated(chan);
   1b8de:	4620      	mov	r0, r4
   1b8e0:	f7ff fb13 	bl	1af0a <att_chan_mtu_updated>
	return 0;
   1b8e4:	4628      	mov	r0, r5
}
   1b8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b8ea:	2006      	movs	r0, #6
   1b8ec:	e7fb      	b.n	1b8e6 <att_mtu_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1b8ee:	2004      	movs	r0, #4
   1b8f0:	e7f9      	b.n	1b8e6 <att_mtu_req+0x6a>
		return BT_ATT_ERR_UNLIKELY;
   1b8f2:	200e      	movs	r0, #14
   1b8f4:	e7f7      	b.n	1b8e6 <att_mtu_req+0x6a>

0001b8f6 <att_handle_exec_write_rsp>:
{
   1b8f6:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b8f8:	2300      	movs	r3, #0
   1b8fa:	898a      	ldrh	r2, [r1, #12]
   1b8fc:	6889      	ldr	r1, [r1, #8]
   1b8fe:	f7f2 f923 	bl	db48 <att_handle_rsp>
}
   1b902:	bd08      	pop	{r3, pc}

0001b904 <att_handle_prepare_write_rsp>:
{
   1b904:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b906:	2300      	movs	r3, #0
   1b908:	898a      	ldrh	r2, [r1, #12]
   1b90a:	6889      	ldr	r1, [r1, #8]
   1b90c:	f7f2 f91c 	bl	db48 <att_handle_rsp>
}
   1b910:	bd08      	pop	{r3, pc}

0001b912 <att_handle_write_rsp>:
{
   1b912:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b914:	2300      	movs	r3, #0
   1b916:	898a      	ldrh	r2, [r1, #12]
   1b918:	6889      	ldr	r1, [r1, #8]
   1b91a:	f7f2 f915 	bl	db48 <att_handle_rsp>
}
   1b91e:	bd08      	pop	{r3, pc}

0001b920 <att_handle_read_group_rsp>:
{
   1b920:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b922:	2300      	movs	r3, #0
   1b924:	898a      	ldrh	r2, [r1, #12]
   1b926:	6889      	ldr	r1, [r1, #8]
   1b928:	f7f2 f90e 	bl	db48 <att_handle_rsp>
}
   1b92c:	bd08      	pop	{r3, pc}

0001b92e <att_handle_read_mult_vl_rsp>:
{
   1b92e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b930:	2300      	movs	r3, #0
   1b932:	898a      	ldrh	r2, [r1, #12]
   1b934:	6889      	ldr	r1, [r1, #8]
   1b936:	f7f2 f907 	bl	db48 <att_handle_rsp>
}
   1b93a:	bd08      	pop	{r3, pc}

0001b93c <att_handle_read_mult_rsp>:
{
   1b93c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b93e:	2300      	movs	r3, #0
   1b940:	898a      	ldrh	r2, [r1, #12]
   1b942:	6889      	ldr	r1, [r1, #8]
   1b944:	f7f2 f900 	bl	db48 <att_handle_rsp>
}
   1b948:	bd08      	pop	{r3, pc}

0001b94a <att_handle_read_blob_rsp>:
{
   1b94a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b94c:	2300      	movs	r3, #0
   1b94e:	898a      	ldrh	r2, [r1, #12]
   1b950:	6889      	ldr	r1, [r1, #8]
   1b952:	f7f2 f8f9 	bl	db48 <att_handle_rsp>
}
   1b956:	bd08      	pop	{r3, pc}

0001b958 <att_handle_read_rsp>:
{
   1b958:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b95a:	2300      	movs	r3, #0
   1b95c:	898a      	ldrh	r2, [r1, #12]
   1b95e:	6889      	ldr	r1, [r1, #8]
   1b960:	f7f2 f8f2 	bl	db48 <att_handle_rsp>
}
   1b964:	bd08      	pop	{r3, pc}

0001b966 <att_handle_read_type_rsp>:
{
   1b966:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b968:	2300      	movs	r3, #0
   1b96a:	898a      	ldrh	r2, [r1, #12]
   1b96c:	6889      	ldr	r1, [r1, #8]
   1b96e:	f7f2 f8eb 	bl	db48 <att_handle_rsp>
}
   1b972:	bd08      	pop	{r3, pc}

0001b974 <att_handle_find_type_rsp>:
{
   1b974:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b976:	2300      	movs	r3, #0
   1b978:	898a      	ldrh	r2, [r1, #12]
   1b97a:	6889      	ldr	r1, [r1, #8]
   1b97c:	f7f2 f8e4 	bl	db48 <att_handle_rsp>
}
   1b980:	bd08      	pop	{r3, pc}

0001b982 <att_handle_find_info_rsp>:
{
   1b982:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b984:	2300      	movs	r3, #0
   1b986:	898a      	ldrh	r2, [r1, #12]
   1b988:	6889      	ldr	r1, [r1, #8]
   1b98a:	f7f2 f8dd 	bl	db48 <att_handle_rsp>
}
   1b98e:	bd08      	pop	{r3, pc}

0001b990 <att_mtu_rsp>:
{
   1b990:	b570      	push	{r4, r5, r6, lr}
   1b992:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   1b994:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   1b996:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1b998:	2b16      	cmp	r3, #22
   1b99a:	d90e      	bls.n	1b9ba <att_mtu_rsp+0x2a>
   1b99c:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1b99e:	2b17      	cmp	r3, #23
   1b9a0:	bf28      	it	cs
   1b9a2:	2317      	movcs	r3, #23
   1b9a4:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b9a6:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1b9a8:	f7ff faaf 	bl	1af0a <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1b9ac:	2300      	movs	r3, #0
   1b9ae:	89aa      	ldrh	r2, [r5, #12]
   1b9b0:	4631      	mov	r1, r6
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	f7f2 f8c8 	bl	db48 <att_handle_rsp>
}
   1b9b8:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1b9ba:	2304      	movs	r3, #4
   1b9bc:	2200      	movs	r2, #0
   1b9be:	4611      	mov	r1, r2
   1b9c0:	f7f2 f8c2 	bl	db48 <att_handle_rsp>
   1b9c4:	e7f8      	b.n	1b9b8 <att_mtu_rsp+0x28>

0001b9c6 <att_confirm>:
{
   1b9c6:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b9c8:	2300      	movs	r3, #0
   1b9ca:	898a      	ldrh	r2, [r1, #12]
   1b9cc:	6889      	ldr	r1, [r1, #8]
   1b9ce:	f7f2 f8bb 	bl	db48 <att_handle_rsp>
}
   1b9d2:	bd08      	pop	{r3, pc}

0001b9d4 <bt_att_disconnected>:
{
   1b9d4:	b538      	push	{r3, r4, r5, lr}
   1b9d6:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1b9d8:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   1b9dc:	b125      	cbz	r5, 1b9e8 <bt_att_disconnected+0x14>
   1b9de:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   1b9e0:	f7f2 f928 	bl	dc34 <att_chan_detach>
	return list->head;
   1b9e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   1b9e6:	b103      	cbz	r3, 1b9ea <bt_att_disconnected+0x16>
}
   1b9e8:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   1b9ea:	4628      	mov	r0, r5
   1b9ec:	f7f2 f96c 	bl	dcc8 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   1b9f0:	6820      	ldr	r0, [r4, #0]
   1b9f2:	f7f3 fc53 	bl	f29c <bt_gatt_disconnected>
   1b9f6:	e7f7      	b.n	1b9e8 <bt_att_disconnected+0x14>

0001b9f8 <bt_att_req_send>:
{
   1b9f8:	b510      	push	{r4, lr}
   1b9fa:	460c      	mov	r4, r1
	att = att_get(conn);
   1b9fc:	f7f0 fde4 	bl	c5c8 <att_get>
	if (!att) {
   1ba00:	b170      	cbz	r0, 1ba20 <bt_att_req_send+0x28>
   1ba02:	4603      	mov	r3, r0
	parent->next = child;
   1ba04:	2200      	movs	r2, #0
   1ba06:	6022      	str	r2, [r4, #0]
	return list->tail;
   1ba08:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1ba0a:	b132      	cbz	r2, 1ba1a <bt_att_req_send+0x22>
	parent->next = child;
   1ba0c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1ba0e:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   1ba10:	4618      	mov	r0, r3
   1ba12:	f7ff fc95 	bl	1b340 <att_req_send_process>
	return 0;
   1ba16:	2000      	movs	r0, #0
}
   1ba18:	bd10      	pop	{r4, pc}
   1ba1a:	6084      	str	r4, [r0, #8]
	list->head = node;
   1ba1c:	6044      	str	r4, [r0, #4]
}
   1ba1e:	e7f7      	b.n	1ba10 <bt_att_req_send+0x18>
		return -ENOTCONN;
   1ba20:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ba24:	e7f8      	b.n	1ba18 <bt_att_req_send+0x20>

0001ba26 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1ba26:	2800      	cmp	r0, #0
   1ba28:	d048      	beq.n	1babc <bt_att_req_cancel+0x96>
{
   1ba2a:	b570      	push	{r4, r5, r6, lr}
   1ba2c:	460d      	mov	r5, r1
	if (!conn || !req) {
   1ba2e:	2900      	cmp	r1, #0
   1ba30:	d03a      	beq.n	1baa8 <bt_att_req_cancel+0x82>
		return;
	}

	att = att_get(conn);
   1ba32:	f7f0 fdc9 	bl	c5c8 <att_get>
	if (!att) {
   1ba36:	4606      	mov	r6, r0
   1ba38:	2800      	cmp	r0, #0
   1ba3a:	d035      	beq.n	1baa8 <bt_att_req_cancel+0x82>
	return list->head;
   1ba3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba3e:	b148      	cbz	r0, 1ba54 <bt_att_req_cancel+0x2e>
   1ba40:	38e0      	subs	r0, #224	; 0xe0
   1ba42:	d009      	beq.n	1ba58 <bt_att_req_cancel+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ba44:	f110 04e0 	adds.w	r4, r0, #224	; 0xe0
   1ba48:	d00b      	beq.n	1ba62 <bt_att_req_cancel+0x3c>
	return node->next;
   1ba4a:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
   1ba4e:	b144      	cbz	r4, 1ba62 <bt_att_req_cancel+0x3c>
   1ba50:	3ce0      	subs	r4, #224	; 0xe0
   1ba52:	e006      	b.n	1ba62 <bt_att_req_cancel+0x3c>
   1ba54:	4604      	mov	r4, r0
   1ba56:	e004      	b.n	1ba62 <bt_att_req_cancel+0x3c>
   1ba58:	4604      	mov	r4, r0
   1ba5a:	e002      	b.n	1ba62 <bt_att_req_cancel+0x3c>
   1ba5c:	4623      	mov	r3, r4
   1ba5e:	4620      	mov	r0, r4
   1ba60:	461c      	mov	r4, r3
   1ba62:	b170      	cbz	r0, 1ba82 <bt_att_req_cancel+0x5c>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   1ba64:	4629      	mov	r1, r5
   1ba66:	f7f2 f9a1 	bl	ddac <bt_att_chan_req_cancel>
   1ba6a:	b9e8      	cbnz	r0, 1baa8 <bt_att_req_cancel+0x82>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba6c:	2c00      	cmp	r4, #0
   1ba6e:	d0f5      	beq.n	1ba5c <bt_att_req_cancel+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ba70:	f114 03e0 	adds.w	r3, r4, #224	; 0xe0
   1ba74:	d0f3      	beq.n	1ba5e <bt_att_req_cancel+0x38>
	return node->next;
   1ba76:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1ba7a:	2b00      	cmp	r3, #0
   1ba7c:	d0ef      	beq.n	1ba5e <bt_att_req_cancel+0x38>
   1ba7e:	3be0      	subs	r3, #224	; 0xe0
   1ba80:	e7ed      	b.n	1ba5e <bt_att_req_cancel+0x38>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1ba82:	1d32      	adds	r2, r6, #4
	return list->head;
   1ba84:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba86:	b163      	cbz	r3, 1baa2 <bt_att_req_cancel+0x7c>
   1ba88:	429d      	cmp	r5, r3
   1ba8a:	d002      	beq.n	1ba92 <bt_att_req_cancel+0x6c>
   1ba8c:	4618      	mov	r0, r3
   1ba8e:	681b      	ldr	r3, [r3, #0]
   1ba90:	e7f9      	b.n	1ba86 <bt_att_req_cancel+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1ba92:	b150      	cbz	r0, 1baaa <bt_att_req_cancel+0x84>
	return node->next;
   1ba94:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
   1ba96:	6003      	str	r3, [r0, #0]
	return list->tail;
   1ba98:	6853      	ldr	r3, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ba9a:	429d      	cmp	r5, r3
   1ba9c:	d00c      	beq.n	1bab8 <bt_att_req_cancel+0x92>
	parent->next = child;
   1ba9e:	2300      	movs	r3, #0
   1baa0:	602b      	str	r3, [r5, #0]

	bt_att_req_free(req);
   1baa2:	4628      	mov	r0, r5
   1baa4:	f7f2 f830 	bl	db08 <bt_att_req_free>
}
   1baa8:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   1baaa:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1baac:	6073      	str	r3, [r6, #4]
	return list->tail;
   1baae:	6851      	ldr	r1, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bab0:	428d      	cmp	r5, r1
   1bab2:	d1f4      	bne.n	1ba9e <bt_att_req_cancel+0x78>
	list->tail = node;
   1bab4:	6053      	str	r3, [r2, #4]
}
   1bab6:	e7f2      	b.n	1ba9e <bt_att_req_cancel+0x78>
	list->tail = node;
   1bab8:	6050      	str	r0, [r2, #4]
}
   1baba:	e7f0      	b.n	1ba9e <bt_att_req_cancel+0x78>
   1babc:	4770      	bx	lr

0001babe <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   1babe:	b510      	push	{r4, lr}
   1bac0:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   1bac2:	f7f0 fd81 	bl	c5c8 <att_get>
	if (!att) {
   1bac6:	4601      	mov	r1, r0
   1bac8:	b1f8      	cbz	r0, 1bb0a <bt_att_find_req_by_user_data+0x4c>
	return list->head;
   1baca:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bacc:	b113      	cbz	r3, 1bad4 <bt_att_find_req_by_user_data+0x16>
   1bace:	3be0      	subs	r3, #224	; 0xe0
   1bad0:	e000      	b.n	1bad4 <bt_att_find_req_by_user_data+0x16>
   1bad2:	4613      	mov	r3, r2
   1bad4:	b163      	cbz	r3, 1baf0 <bt_att_find_req_by_user_data+0x32>
		if (chan->req->user_data == user_data) {
   1bad6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
   1bada:	68c2      	ldr	r2, [r0, #12]
   1badc:	42a2      	cmp	r2, r4
   1bade:	d014      	beq.n	1bb0a <bt_att_find_req_by_user_data+0x4c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bae0:	f113 02e0 	adds.w	r2, r3, #224	; 0xe0
   1bae4:	d0f5      	beq.n	1bad2 <bt_att_find_req_by_user_data+0x14>
	return node->next;
   1bae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1baea:	b10b      	cbz	r3, 1baf0 <bt_att_find_req_by_user_data+0x32>
   1baec:	3be0      	subs	r3, #224	; 0xe0
   1baee:	e7f1      	b.n	1bad4 <bt_att_find_req_by_user_data+0x16>
	return list->head;
   1baf0:	684b      	ldr	r3, [r1, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   1baf2:	b14b      	cbz	r3, 1bb08 <bt_att_find_req_by_user_data+0x4a>
		if (req->user_data == user_data) {
   1baf4:	68da      	ldr	r2, [r3, #12]
   1baf6:	42a2      	cmp	r2, r4
   1baf8:	d008      	beq.n	1bb0c <bt_att_find_req_by_user_data+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   1bafa:	4618      	mov	r0, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bafc:	b12b      	cbz	r3, 1bb0a <bt_att_find_req_by_user_data+0x4c>
	return node->next;
   1bafe:	681b      	ldr	r3, [r3, #0]
   1bb00:	2b00      	cmp	r3, #0
   1bb02:	d1f6      	bne.n	1baf2 <bt_att_find_req_by_user_data+0x34>
			return req;
		}
	}

	return NULL;
   1bb04:	4618      	mov	r0, r3
   1bb06:	e000      	b.n	1bb0a <bt_att_find_req_by_user_data+0x4c>
   1bb08:	4618      	mov	r0, r3
}
   1bb0a:	bd10      	pop	{r4, pc}
   1bb0c:	4618      	mov	r0, r3
   1bb0e:	e7fc      	b.n	1bb0a <bt_att_find_req_by_user_data+0x4c>

0001bb10 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1bb10:	2001      	movs	r0, #1
   1bb12:	4770      	bx	lr

0001bb14 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1bb14:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1bb16:	f7f0 fd57 	bl	c5c8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1bb1a:	b1b8      	cbz	r0, 1bb4c <bt_att_clear_out_of_sync_sent+0x38>
	return list->head;
   1bb1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bb1e:	b113      	cbz	r3, 1bb26 <bt_att_clear_out_of_sync_sent+0x12>
   1bb20:	3be0      	subs	r3, #224	; 0xe0
   1bb22:	e000      	b.n	1bb26 <bt_att_clear_out_of_sync_sent+0x12>
   1bb24:	4613      	mov	r3, r2
   1bb26:	b18b      	cbz	r3, 1bb4c <bt_att_clear_out_of_sync_sent+0x38>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   1bb28:	f103 0290 	add.w	r2, r3, #144	; 0x90
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bb2c:	e8d2 1fef 	ldaex	r1, [r2]
   1bb30:	f021 0120 	bic.w	r1, r1, #32
   1bb34:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1bb38:	2800      	cmp	r0, #0
   1bb3a:	d1f7      	bne.n	1bb2c <bt_att_clear_out_of_sync_sent+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bb3c:	f113 02e0 	adds.w	r2, r3, #224	; 0xe0
   1bb40:	d0f0      	beq.n	1bb24 <bt_att_clear_out_of_sync_sent+0x10>
	return node->next;
   1bb42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1bb46:	b10b      	cbz	r3, 1bb4c <bt_att_clear_out_of_sync_sent+0x38>
   1bb48:	3be0      	subs	r3, #224	; 0xe0
   1bb4a:	e7ec      	b.n	1bb26 <bt_att_clear_out_of_sync_sent+0x12>
	}
}
   1bb4c:	bd08      	pop	{r3, pc}

0001bb4e <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1bb4e:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1bb50:	2104      	movs	r1, #4
   1bb52:	f7ff f89a 	bl	1ac8a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1bb56:	b130      	cbz	r0, 1bb66 <bt_att_out_of_sync_sent_on_fixed+0x18>
   1bb58:	4603      	mov	r3, r0
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1bb5a:	338c      	adds	r3, #140	; 0x8c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bb5c:	e8d3 0faf 	lda	r0, [r3]
   1bb60:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1bb64:	bd08      	pop	{r3, pc}
		return false;
   1bb66:	2000      	movs	r0, #0
   1bb68:	e7fc      	b.n	1bb64 <bt_att_out_of_sync_sent_on_fixed+0x16>

0001bb6a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1bb6a:	6940      	ldr	r0, [r0, #20]

	data->func = func;
   1bb6c:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   1bb6e:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   1bb70:	2201      	movs	r2, #1
   1bb72:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   1bb74:	7403      	strb	r3, [r0, #16]
}
   1bb76:	4770      	bx	lr

0001bb78 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   1bb78:	f8b0 c000 	ldrh.w	ip, [r0]
   1bb7c:	4562      	cmp	r2, ip
   1bb7e:	d312      	bcc.n	1bba6 <update_range+0x2e>
{
   1bb80:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   1bb82:	f8b1 e000 	ldrh.w	lr, [r1]
   1bb86:	4573      	cmp	r3, lr
   1bb88:	d908      	bls.n	1bb9c <update_range+0x24>
	if (*start > new_start) {
   1bb8a:	4562      	cmp	r2, ip
   1bb8c:	d200      	bcs.n	1bb90 <update_range+0x18>
		*start = new_start;
   1bb8e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   1bb90:	880a      	ldrh	r2, [r1, #0]
   1bb92:	4293      	cmp	r3, r2
   1bb94:	d904      	bls.n	1bba0 <update_range+0x28>
		*end = new_end;
   1bb96:	800b      	strh	r3, [r1, #0]
	return true;
   1bb98:	2001      	movs	r0, #1
   1bb9a:	e002      	b.n	1bba2 <update_range+0x2a>
		return false;
   1bb9c:	2000      	movs	r0, #0
   1bb9e:	e000      	b.n	1bba2 <update_range+0x2a>
	return true;
   1bba0:	2001      	movs	r0, #1
}
   1bba2:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   1bba6:	4562      	cmp	r2, ip
   1bba8:	d200      	bcs.n	1bbac <update_range+0x34>
		*start = new_start;
   1bbaa:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   1bbac:	880a      	ldrh	r2, [r1, #0]
   1bbae:	4293      	cmp	r3, r2
   1bbb0:	d902      	bls.n	1bbb8 <update_range+0x40>
		*end = new_end;
   1bbb2:	800b      	strh	r3, [r1, #0]
	return true;
   1bbb4:	2001      	movs	r0, #1
   1bbb6:	4770      	bx	lr
   1bbb8:	2001      	movs	r0, #1
}
   1bbba:	4770      	bx	lr

0001bbbc <cf_set_value>:
{
   1bbbc:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1bbbe:	2300      	movs	r3, #0
   1bbc0:	e001      	b.n	1bbc6 <cf_set_value+0xa>
   1bbc2:	3301      	adds	r3, #1
   1bbc4:	b29b      	uxth	r3, r3
   1bbc6:	2b02      	cmp	r3, #2
   1bbc8:	d819      	bhi.n	1bbfe <cf_set_value+0x42>
   1bbca:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   1bbce:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   1bbd2:	d912      	bls.n	1bbfa <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bbd4:	eb00 040c 	add.w	r4, r0, ip
   1bbd8:	7a24      	ldrb	r4, [r4, #8]
   1bbda:	f003 0e07 	and.w	lr, r3, #7
   1bbde:	fa24 f40e 	lsr.w	r4, r4, lr
   1bbe2:	f014 0f01 	tst.w	r4, #1
   1bbe6:	d0ec      	beq.n	1bbc2 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   1bbe8:	f811 400c 	ldrb.w	r4, [r1, ip]
   1bbec:	fa24 fe0e 	lsr.w	lr, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1bbf0:	f01e 0f01 	tst.w	lr, #1
   1bbf4:	d1e5      	bne.n	1bbc2 <cf_set_value+0x6>
			return false;
   1bbf6:	2000      	movs	r0, #0
   1bbf8:	e017      	b.n	1bc2a <cf_set_value+0x6e>
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	e000      	b.n	1bc00 <cf_set_value+0x44>
   1bbfe:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1bc00:	4293      	cmp	r3, r2
   1bc02:	d211      	bcs.n	1bc28 <cf_set_value+0x6c>
   1bc04:	b973      	cbnz	r3, 1bc24 <cf_set_value+0x68>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1bc06:	f811 c003 	ldrb.w	ip, [r1, r3]
   1bc0a:	f00c 0c07 	and.w	ip, ip, #7
   1bc0e:	eb00 0e03 	add.w	lr, r0, r3
   1bc12:	f89e 4008 	ldrb.w	r4, [lr, #8]
   1bc16:	ea4c 0c04 	orr.w	ip, ip, r4
   1bc1a:	f88e c008 	strb.w	ip, [lr, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1bc1e:	3301      	adds	r3, #1
   1bc20:	b29b      	uxth	r3, r3
   1bc22:	e7ed      	b.n	1bc00 <cf_set_value+0x44>
	return true;
   1bc24:	2001      	movs	r0, #1
   1bc26:	e000      	b.n	1bc2a <cf_set_value+0x6e>
   1bc28:	2001      	movs	r0, #1
}
   1bc2a:	bd10      	pop	{r4, pc}

0001bc2c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1bc2c:	6010      	str	r0, [r2, #0]
}
   1bc2e:	2000      	movs	r0, #0
   1bc30:	4770      	bx	lr

0001bc32 <gatt_ccc_changed>:
{
   1bc32:	b508      	push	{r3, lr}
   1bc34:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   1bc36:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bc38:	460b      	mov	r3, r1
   1bc3a:	b13b      	cbz	r3, 1bc4c <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   1bc3c:	8953      	ldrh	r3, [r2, #10]
   1bc3e:	4299      	cmp	r1, r3
   1bc40:	d003      	beq.n	1bc4a <gatt_ccc_changed+0x18>
		ccc->value = value;
   1bc42:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   1bc44:	68d3      	ldr	r3, [r2, #12]
   1bc46:	b103      	cbz	r3, 1bc4a <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   1bc48:	4798      	blx	r3
}
   1bc4a:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   1bc4c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1bc50:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   1bc54:	f8bc c008 	ldrh.w	ip, [ip, #8]
   1bc58:	458c      	cmp	ip, r1
   1bc5a:	d900      	bls.n	1bc5e <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   1bc5c:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bc5e:	3301      	adds	r3, #1
   1bc60:	e7eb      	b.n	1bc3a <gatt_ccc_changed+0x8>

0001bc62 <gatt_indicate_rsp>:
{
   1bc62:	b510      	push	{r4, lr}
   1bc64:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1bc66:	68a3      	ldr	r3, [r4, #8]
   1bc68:	b113      	cbz	r3, 1bc70 <gatt_indicate_rsp+0xe>
   1bc6a:	460a      	mov	r2, r1
		params->func(conn, params, err);
   1bc6c:	4621      	mov	r1, r4
   1bc6e:	4798      	blx	r3
	params->_ref--;
   1bc70:	7da3      	ldrb	r3, [r4, #22]
   1bc72:	3b01      	subs	r3, #1
   1bc74:	b2db      	uxtb	r3, r3
   1bc76:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1bc78:	68e2      	ldr	r2, [r4, #12]
   1bc7a:	b112      	cbz	r2, 1bc82 <gatt_indicate_rsp+0x20>
   1bc7c:	b90b      	cbnz	r3, 1bc82 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   1bc7e:	4620      	mov	r0, r4
   1bc80:	4790      	blx	r2
}
   1bc82:	bd10      	pop	{r4, pc}

0001bc84 <match_uuid>:
	data->attr = attr;
   1bc84:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1bc86:	8091      	strh	r1, [r2, #4]
}
   1bc88:	2000      	movs	r0, #0
   1bc8a:	4770      	bx	lr

0001bc8c <gatt_sub_is_empty>:
	return list->head;
   1bc8c:	6880      	ldr	r0, [r0, #8]
}
   1bc8e:	fab0 f080 	clz	r0, r0
   1bc92:	0940      	lsrs	r0, r0, #5
   1bc94:	4770      	bx	lr

0001bc96 <check_subscribe_security_level>:
}
   1bc96:	2001      	movs	r0, #1
   1bc98:	4770      	bx	lr

0001bc9a <gen_hash_m>:
{
   1bc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc9c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bc9e:	6806      	ldr	r6, [r0, #0]
   1bca0:	7835      	ldrb	r5, [r6, #0]
   1bca2:	2d00      	cmp	r5, #0
   1bca4:	d160      	bne.n	1bd68 <gen_hash_m+0xce>
   1bca6:	4607      	mov	r7, r0
   1bca8:	4614      	mov	r4, r2
	switch (u16->val) {
   1bcaa:	8873      	ldrh	r3, [r6, #2]
   1bcac:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1bcb0:	d019      	beq.n	1bce6 <gen_hash_m+0x4c>
   1bcb2:	d913      	bls.n	1bcdc <gen_hash_m+0x42>
   1bcb4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1bcb8:	33ff      	adds	r3, #255	; 0xff
   1bcba:	b29b      	uxth	r3, r3
   1bcbc:	2b04      	cmp	r3, #4
   1bcbe:	d859      	bhi.n	1bd74 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   1bcc0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bcc4:	2202      	movs	r2, #2
   1bcc6:	f10d 010a 	add.w	r1, sp, #10
   1bcca:	4620      	mov	r0, r4
   1bccc:	f7fd fdb4 	bl	19838 <tc_cmac_update>
   1bcd0:	2800      	cmp	r0, #0
   1bcd2:	d139      	bne.n	1bd48 <gen_hash_m+0xae>
			state->err = -EINVAL;
   1bcd4:	f06f 0315 	mvn.w	r3, #21
   1bcd8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bcda:	e046      	b.n	1bd6a <gen_hash_m+0xd0>
	switch (u16->val) {
   1bcdc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1bce0:	b29b      	uxth	r3, r3
   1bce2:	2b03      	cmp	r3, #3
   1bce4:	d844      	bhi.n	1bd70 <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   1bce6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bcea:	2202      	movs	r2, #2
   1bcec:	f10d 010a 	add.w	r1, sp, #10
   1bcf0:	4620      	mov	r0, r4
   1bcf2:	f7fd fda1 	bl	19838 <tc_cmac_update>
   1bcf6:	b918      	cbnz	r0, 1bd00 <gen_hash_m+0x66>
			state->err = -EINVAL;
   1bcf8:	f06f 0315 	mvn.w	r3, #21
   1bcfc:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bcfe:	e034      	b.n	1bd6a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   1bd00:	8873      	ldrh	r3, [r6, #2]
   1bd02:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd06:	2202      	movs	r2, #2
   1bd08:	f10d 010a 	add.w	r1, sp, #10
   1bd0c:	4620      	mov	r0, r4
   1bd0e:	f7fd fd93 	bl	19838 <tc_cmac_update>
   1bd12:	b178      	cbz	r0, 1bd34 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1bd14:	687e      	ldr	r6, [r7, #4]
   1bd16:	2000      	movs	r0, #0
   1bd18:	9000      	str	r0, [sp, #0]
   1bd1a:	2313      	movs	r3, #19
   1bd1c:	aa03      	add	r2, sp, #12
   1bd1e:	4639      	mov	r1, r7
   1bd20:	47b0      	blx	r6
		if (len < 0) {
   1bd22:	1e02      	subs	r2, r0, #0
   1bd24:	db0a      	blt.n	1bd3c <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   1bd26:	a903      	add	r1, sp, #12
   1bd28:	4620      	mov	r0, r4
   1bd2a:	f7fd fd85 	bl	19838 <tc_cmac_update>
   1bd2e:	b138      	cbz	r0, 1bd40 <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   1bd30:	2501      	movs	r5, #1
   1bd32:	e01a      	b.n	1bd6a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   1bd34:	f06f 0315 	mvn.w	r3, #21
   1bd38:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bd3a:	e016      	b.n	1bd6a <gen_hash_m+0xd0>
			state->err = len;
   1bd3c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bd3e:	e014      	b.n	1bd6a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   1bd40:	f06f 0315 	mvn.w	r3, #21
   1bd44:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bd46:	e010      	b.n	1bd6a <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   1bd48:	8873      	ldrh	r3, [r6, #2]
   1bd4a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd4e:	2202      	movs	r2, #2
   1bd50:	f10d 010a 	add.w	r1, sp, #10
   1bd54:	4620      	mov	r0, r4
   1bd56:	f7fd fd6f 	bl	19838 <tc_cmac_update>
   1bd5a:	b108      	cbz	r0, 1bd60 <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   1bd5c:	2501      	movs	r5, #1
   1bd5e:	e004      	b.n	1bd6a <gen_hash_m+0xd0>
			state->err = -EINVAL;
   1bd60:	f06f 0315 	mvn.w	r3, #21
   1bd64:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bd66:	e000      	b.n	1bd6a <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   1bd68:	2501      	movs	r5, #1
}
   1bd6a:	4628      	mov	r0, r5
   1bd6c:	b009      	add	sp, #36	; 0x24
   1bd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1bd70:	2501      	movs	r5, #1
   1bd72:	e7fa      	b.n	1bd6a <gen_hash_m+0xd0>
   1bd74:	2501      	movs	r5, #1
   1bd76:	e7f8      	b.n	1bd6a <gen_hash_m+0xd0>

0001bd78 <find_ccc_cfg>:
{
   1bd78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd7a:	b083      	sub	sp, #12
   1bd7c:	4607      	mov	r7, r0
   1bd7e:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bd80:	2400      	movs	r4, #0
   1bd82:	b11c      	cbz	r4, 1bd8c <find_ccc_cfg+0x14>
	return NULL;
   1bd84:	2600      	movs	r6, #0
}
   1bd86:	4630      	mov	r0, r6
   1bd88:	b003      	add	sp, #12
   1bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1bd8c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1bd90:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   1bd94:	b167      	cbz	r7, 1bdb0 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   1bd96:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1bd9a:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1bd9c:	3201      	adds	r2, #1
   1bd9e:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   1bda2:	4638      	mov	r0, r7
   1bda4:	f7fe fe8d 	bl	1aac2 <bt_conn_is_peer_addr_le>
   1bda8:	2800      	cmp	r0, #0
   1bdaa:	d1ec      	bne.n	1bd86 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bdac:	3401      	adds	r4, #1
   1bdae:	e7e8      	b.n	1bd82 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bdb0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1bdb4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1bdb8:	2300      	movs	r3, #0
   1bdba:	9300      	str	r3, [sp, #0]
   1bdbc:	f8cd 3003 	str.w	r3, [sp, #3]
   1bdc0:	2207      	movs	r2, #7
   1bdc2:	4669      	mov	r1, sp
   1bdc4:	3001      	adds	r0, #1
   1bdc6:	f7fe f92e 	bl	1a026 <memcmp>
   1bdca:	2800      	cmp	r0, #0
   1bdcc:	d1ee      	bne.n	1bdac <find_ccc_cfg+0x34>
   1bdce:	e7da      	b.n	1bd86 <find_ccc_cfg+0xe>

0001bdd0 <clear_ccc_cfg>:
{
   1bdd0:	b530      	push	{r4, r5, lr}
   1bdd2:	b083      	sub	sp, #12
   1bdd4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bdd6:	2500      	movs	r5, #0
   1bdd8:	9500      	str	r5, [sp, #0]
   1bdda:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   1bdde:	2207      	movs	r2, #7
   1bde0:	4669      	mov	r1, sp
   1bde2:	3001      	adds	r0, #1
   1bde4:	f7fe f931 	bl	1a04a <memcpy>
	cfg->id = 0U;
   1bde8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bdea:	8125      	strh	r5, [r4, #8]
}
   1bdec:	b003      	add	sp, #12
   1bdee:	bd30      	pop	{r4, r5, pc}

0001bdf0 <gatt_sub_free>:
{
   1bdf0:	b500      	push	{lr}
   1bdf2:	b083      	sub	sp, #12
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bdf4:	2300      	movs	r3, #0
   1bdf6:	9300      	str	r3, [sp, #0]
   1bdf8:	f8cd 3003 	str.w	r3, [sp, #3]
   1bdfc:	2207      	movs	r2, #7
   1bdfe:	4669      	mov	r1, sp
   1be00:	3001      	adds	r0, #1
   1be02:	f7fe f922 	bl	1a04a <memcpy>
}
   1be06:	b003      	add	sp, #12
   1be08:	f85d fb04 	ldr.w	pc, [sp], #4

0001be0c <gatt_sub_remove>:
{
   1be0c:	b538      	push	{r3, r4, r5, lr}
   1be0e:	460c      	mov	r4, r1
	if (params) {
   1be10:	b193      	cbz	r3, 1be38 <gatt_sub_remove+0x2c>
   1be12:	4619      	mov	r1, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   1be14:	f104 0308 	add.w	r3, r4, #8
   1be18:	f101 0518 	add.w	r5, r1, #24
Z_GENLIST_REMOVE(slist, snode)
   1be1c:	b18a      	cbz	r2, 1be42 <gatt_sub_remove+0x36>
	parent->next = child;
   1be1e:	f8d1 c018 	ldr.w	ip, [r1, #24]
   1be22:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_REMOVE(slist, snode)
   1be26:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1be2a:	4565      	cmp	r5, ip
   1be2c:	d011      	beq.n	1be52 <gatt_sub_remove+0x46>
	parent->next = child;
   1be2e:	2200      	movs	r2, #0
   1be30:	618a      	str	r2, [r1, #24]
		params->notify(conn, params, NULL, 0);
   1be32:	680d      	ldr	r5, [r1, #0]
   1be34:	4613      	mov	r3, r2
   1be36:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   1be38:	4620      	mov	r0, r4
   1be3a:	f7ff ff27 	bl	1bc8c <gatt_sub_is_empty>
   1be3e:	b950      	cbnz	r0, 1be56 <gatt_sub_remove+0x4a>
}
   1be40:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
   1be42:	698a      	ldr	r2, [r1, #24]
	list->head = node;
   1be44:	60a2      	str	r2, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1be46:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1be4a:	4565      	cmp	r5, ip
   1be4c:	d1ef      	bne.n	1be2e <gatt_sub_remove+0x22>
	list->tail = node;
   1be4e:	605a      	str	r2, [r3, #4]
}
   1be50:	e7ed      	b.n	1be2e <gatt_sub_remove+0x22>
	list->tail = node;
   1be52:	605a      	str	r2, [r3, #4]
}
   1be54:	e7eb      	b.n	1be2e <gatt_sub_remove+0x22>
		gatt_sub_free(sub);
   1be56:	4620      	mov	r0, r4
   1be58:	f7ff ffca 	bl	1bdf0 <gatt_sub_free>
}
   1be5c:	e7f0      	b.n	1be40 <gatt_sub_remove+0x34>

0001be5e <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1be5e:	784a      	ldrb	r2, [r1, #1]
   1be60:	b902      	cbnz	r2, 1be64 <gatt_sub_update+0x6>
   1be62:	4770      	bx	lr
{
   1be64:	b508      	push	{r3, lr}
   1be66:	460b      	mov	r3, r1
   1be68:	2207      	movs	r2, #7
   1be6a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1be6e:	1c58      	adds	r0, r3, #1
   1be70:	f7fe f8eb 	bl	1a04a <memcpy>
}
   1be74:	bd08      	pop	{r3, pc}

0001be76 <clear_sc_cfg>:
{
   1be76:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   1be78:	220c      	movs	r2, #12
   1be7a:	2100      	movs	r1, #0
   1be7c:	f7fe f914 	bl	1a0a8 <memset>
}
   1be80:	bd08      	pop	{r3, pc}

0001be82 <bt_gatt_clear_sc>:
{
   1be82:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1be84:	f7f2 f810 	bl	dea8 <find_sc_cfg>
	if (!cfg) {
   1be88:	b108      	cbz	r0, 1be8e <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   1be8a:	f7ff fff4 	bl	1be76 <clear_sc_cfg>
}
   1be8e:	2000      	movs	r0, #0
   1be90:	bd08      	pop	{r3, pc}

0001be92 <sc_ccc_cfg_write>:
{
   1be92:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1be94:	2a02      	cmp	r2, #2
   1be96:	d003      	beq.n	1bea0 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   1be98:	f7f2 f998 	bl	e1cc <sc_clear>
}
   1be9c:	2002      	movs	r0, #2
   1be9e:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1bea0:	2300      	movs	r3, #0
   1bea2:	461a      	mov	r2, r3
   1bea4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1bea8:	7a00      	ldrb	r0, [r0, #8]
   1beaa:	f7f2 f8b3 	bl	e014 <sc_save>
   1beae:	e7f5      	b.n	1be9c <sc_ccc_cfg_write+0xa>

0001beb0 <sc_reset>:
{
   1beb0:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1beb2:	2204      	movs	r2, #4
   1beb4:	2100      	movs	r1, #0
   1beb6:	3008      	adds	r0, #8
   1beb8:	f7fe f8f6 	bl	1a0a8 <memset>
}
   1bebc:	bd08      	pop	{r3, pc}

0001bebe <sc_restore_rsp>:
{
   1bebe:	b538      	push	{r3, r4, r5, lr}
   1bec0:	4605      	mov	r5, r0
   1bec2:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   1bec4:	f7ff fe24 	bl	1bb10 <bt_att_fixed_chan_only>
   1bec8:	b908      	cbnz	r0, 1bece <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1beca:	b1a4      	cbz	r4, 1bef6 <sc_restore_rsp+0x38>
}
   1becc:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   1bece:	4628      	mov	r0, r5
   1bed0:	f7f1 ffc0 	bl	de54 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1bed4:	4603      	mov	r3, r0
   1bed6:	2800      	cmp	r0, #0
   1bed8:	d0f7      	beq.n	1beca <sc_restore_rsp+0xc>
   1beda:	7a02      	ldrb	r2, [r0, #8]
   1bedc:	f012 0f01 	tst.w	r2, #1
   1bee0:	d0f3      	beq.n	1beca <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1bee2:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bee4:	e8d3 2fef 	ldaex	r2, [r3]
   1bee8:	f042 0201 	orr.w	r2, r2, #1
   1beec:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bef0:	2900      	cmp	r1, #0
   1bef2:	d0ea      	beq.n	1beca <sc_restore_rsp+0xc>
   1bef4:	e7f6      	b.n	1bee4 <sc_restore_rsp+0x26>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1bef6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1befa:	7a28      	ldrb	r0, [r5, #8]
   1befc:	f7f1 ffd4 	bl	dea8 <find_sc_cfg>
		if (sc_cfg) {
   1bf00:	2800      	cmp	r0, #0
   1bf02:	d0e3      	beq.n	1becc <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   1bf04:	f7ff ffd4 	bl	1beb0 <sc_reset>
}
   1bf08:	e7e0      	b.n	1becc <sc_restore_rsp+0xe>

0001bf0a <gatt_foreach_iter>:
	if (handle > end_handle) {
   1bf0a:	4299      	cmp	r1, r3
   1bf0c:	d822      	bhi.n	1bf54 <gatt_foreach_iter+0x4a>
{
   1bf0e:	b538      	push	{r3, r4, r5, lr}
   1bf10:	4605      	mov	r5, r0
   1bf12:	460c      	mov	r4, r1
	if (handle < start_handle) {
   1bf14:	4291      	cmp	r1, r2
   1bf16:	d31f      	bcc.n	1bf58 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1bf18:	9b04      	ldr	r3, [sp, #16]
   1bf1a:	b123      	cbz	r3, 1bf26 <gatt_foreach_iter+0x1c>
   1bf1c:	6801      	ldr	r1, [r0, #0]
   1bf1e:	4618      	mov	r0, r3
   1bf20:	f7fe f8ff 	bl	1a122 <bt_uuid_cmp>
   1bf24:	b9d0      	cbnz	r0, 1bf5c <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   1bf26:	9b05      	ldr	r3, [sp, #20]
   1bf28:	b12b      	cbz	r3, 1bf36 <gatt_foreach_iter+0x2c>
   1bf2a:	68eb      	ldr	r3, [r5, #12]
   1bf2c:	9a05      	ldr	r2, [sp, #20]
   1bf2e:	4293      	cmp	r3, r2
   1bf30:	d001      	beq.n	1bf36 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   1bf32:	2001      	movs	r0, #1
   1bf34:	e011      	b.n	1bf5a <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   1bf36:	9b06      	ldr	r3, [sp, #24]
   1bf38:	881b      	ldrh	r3, [r3, #0]
   1bf3a:	3b01      	subs	r3, #1
   1bf3c:	9a06      	ldr	r2, [sp, #24]
   1bf3e:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   1bf40:	9a08      	ldr	r2, [sp, #32]
   1bf42:	4621      	mov	r1, r4
   1bf44:	4628      	mov	r0, r5
   1bf46:	9b07      	ldr	r3, [sp, #28]
   1bf48:	4798      	blx	r3
	if (!*num_matches) {
   1bf4a:	9b06      	ldr	r3, [sp, #24]
   1bf4c:	881b      	ldrh	r3, [r3, #0]
   1bf4e:	b923      	cbnz	r3, 1bf5a <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   1bf50:	2000      	movs	r0, #0
   1bf52:	e002      	b.n	1bf5a <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   1bf54:	2000      	movs	r0, #0
}
   1bf56:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   1bf58:	2001      	movs	r0, #1
}
   1bf5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   1bf5c:	2001      	movs	r0, #1
   1bf5e:	e7fc      	b.n	1bf5a <gatt_foreach_iter+0x50>

0001bf60 <gatt_req_alloc>:
{
   1bf60:	b538      	push	{r3, r4, r5, lr}
   1bf62:	4605      	mov	r5, r0
   1bf64:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1bf66:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1bf6a:	2100      	movs	r1, #0
   1bf6c:	f7f1 fda8 	bl	dac0 <bt_att_req_alloc>
	if (!req) {
   1bf70:	4603      	mov	r3, r0
   1bf72:	b108      	cbz	r0, 1bf78 <gatt_req_alloc+0x18>
	req->func = func;
   1bf74:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   1bf76:	60c4      	str	r4, [r0, #12]
}
   1bf78:	4618      	mov	r0, r3
   1bf7a:	bd38      	pop	{r3, r4, r5, pc}

0001bf7c <gatt_req_send>:
{
   1bf7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bf80:	b083      	sub	sp, #12
   1bf82:	4606      	mov	r6, r0
   1bf84:	4608      	mov	r0, r1
   1bf86:	4615      	mov	r5, r2
   1bf88:	461c      	mov	r4, r3
   1bf8a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   1bf8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   1bf90:	9700      	str	r7, [sp, #0]
   1bf92:	4643      	mov	r3, r8
   1bf94:	4622      	mov	r2, r4
   1bf96:	4629      	mov	r1, r5
   1bf98:	f7ff ffe2 	bl	1bf60 <gatt_req_alloc>
	if (!req) {
   1bf9c:	b368      	cbz	r0, 1bffa <gatt_req_send+0x7e>
   1bf9e:	4681      	mov	r9, r0
	buf = bt_att_create_pdu(conn, op, len);
   1bfa0:	463a      	mov	r2, r7
   1bfa2:	4641      	mov	r1, r8
   1bfa4:	4630      	mov	r0, r6
   1bfa6:	f7f1 fa8b 	bl	d4c0 <bt_att_create_pdu>
	if (!buf) {
   1bfaa:	4680      	mov	r8, r0
   1bfac:	b1b8      	cbz	r0, 1bfde <gatt_req_send+0x62>
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   1bfae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1bfb2:	2200      	movs	r2, #0
   1bfb4:	4611      	mov	r1, r2
   1bfb6:	f7ff fdd8 	bl	1bb6a <bt_att_set_tx_meta_data>
	req->buf = buf;
   1bfba:	f8c9 8008 	str.w	r8, [r9, #8]
	err = encode(buf, len, params);
   1bfbe:	462a      	mov	r2, r5
   1bfc0:	4639      	mov	r1, r7
   1bfc2:	4640      	mov	r0, r8
   1bfc4:	47a0      	blx	r4
	if (err) {
   1bfc6:	4604      	mov	r4, r0
   1bfc8:	b978      	cbnz	r0, 1bfea <gatt_req_send+0x6e>
	err = bt_att_req_send(conn, req);
   1bfca:	4649      	mov	r1, r9
   1bfcc:	4630      	mov	r0, r6
   1bfce:	f7ff fd13 	bl	1b9f8 <bt_att_req_send>
	if (err) {
   1bfd2:	4604      	mov	r4, r0
   1bfd4:	b968      	cbnz	r0, 1bff2 <gatt_req_send+0x76>
}
   1bfd6:	4620      	mov	r0, r4
   1bfd8:	b003      	add	sp, #12
   1bfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   1bfde:	4648      	mov	r0, r9
   1bfe0:	f7f1 fd92 	bl	db08 <bt_att_req_free>
		return -ENOMEM;
   1bfe4:	f06f 040b 	mvn.w	r4, #11
   1bfe8:	e7f5      	b.n	1bfd6 <gatt_req_send+0x5a>
		bt_att_req_free(req);
   1bfea:	4648      	mov	r0, r9
   1bfec:	f7f1 fd8c 	bl	db08 <bt_att_req_free>
		return err;
   1bff0:	e7f1      	b.n	1bfd6 <gatt_req_send+0x5a>
		bt_att_req_free(req);
   1bff2:	4648      	mov	r0, r9
   1bff4:	f7f1 fd88 	bl	db08 <bt_att_req_free>
   1bff8:	e7ed      	b.n	1bfd6 <gatt_req_send+0x5a>
		return -ENOMEM;
   1bffa:	f06f 040b 	mvn.w	r4, #11
   1bffe:	e7ea      	b.n	1bfd6 <gatt_req_send+0x5a>

0001c000 <gatt_write_ccc_buf>:
{
   1c000:	b538      	push	{r3, r4, r5, lr}
   1c002:	4614      	mov	r4, r2
   1c004:	f100 0508 	add.w	r5, r0, #8
   1c008:	2102      	movs	r1, #2
   1c00a:	4628      	mov	r0, r5
   1c00c:	f000 fd88 	bl	1cb20 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   1c010:	89e3      	ldrh	r3, [r4, #14]
   1c012:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   1c014:	8a21      	ldrh	r1, [r4, #16]
   1c016:	4628      	mov	r0, r5
   1c018:	f000 fd9a 	bl	1cb50 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   1c01c:	3414      	adds	r4, #20
   1c01e:	e8d4 3fef 	ldaex	r3, [r4]
   1c022:	f043 0304 	orr.w	r3, r3, #4
   1c026:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c02a:	2a00      	cmp	r2, #0
   1c02c:	d1f7      	bne.n	1c01e <gatt_write_ccc_buf+0x1e>
}
   1c02e:	2000      	movs	r0, #0
   1c030:	bd38      	pop	{r3, r4, r5, pc}

0001c032 <clear_cf_cfg>:
{
   1c032:	b530      	push	{r4, r5, lr}
   1c034:	b083      	sub	sp, #12
   1c036:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c038:	2500      	movs	r5, #0
   1c03a:	9500      	str	r5, [sp, #0]
   1c03c:	f8cd 5003 	str.w	r5, [sp, #3]
   1c040:	2207      	movs	r2, #7
   1c042:	4669      	mov	r1, sp
   1c044:	3001      	adds	r0, #1
   1c046:	f7fe f800 	bl	1a04a <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1c04a:	2201      	movs	r2, #1
   1c04c:	4629      	mov	r1, r5
   1c04e:	f104 0008 	add.w	r0, r4, #8
   1c052:	f7fe f829 	bl	1a0a8 <memset>
	atomic_set(cfg->flags, 0);
   1c056:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c058:	e8d4 3fef 	ldaex	r3, [r4]
   1c05c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1c060:	2a00      	cmp	r2, #0
   1c062:	d1f9      	bne.n	1c058 <clear_cf_cfg+0x26>
}
   1c064:	b003      	add	sp, #12
   1c066:	bd30      	pop	{r4, r5, pc}

0001c068 <remove_cf_cfg>:
{
   1c068:	b570      	push	{r4, r5, r6, lr}
   1c06a:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   1c06c:	f7f1 fef2 	bl	de54 <find_cf_cfg>
	if (!cfg) {
   1c070:	b150      	cbz	r0, 1c088 <remove_cf_cfg+0x20>
   1c072:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c074:	f104 0588 	add.w	r5, r4, #136	; 0x88
   1c078:	4629      	mov	r1, r5
   1c07a:	7a20      	ldrb	r0, [r4, #8]
   1c07c:	f7fe f9f9 	bl	1a472 <bt_addr_le_is_bonded>
   1c080:	b918      	cbnz	r0, 1c08a <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   1c082:	4630      	mov	r0, r6
   1c084:	f7ff ffd5 	bl	1c032 <clear_cf_cfg>
}
   1c088:	bd70      	pop	{r4, r5, r6, pc}
   1c08a:	2207      	movs	r2, #7
   1c08c:	4629      	mov	r1, r5
   1c08e:	1c70      	adds	r0, r6, #1
   1c090:	f7fd ffdb 	bl	1a04a <memcpy>
}
   1c094:	e7f8      	b.n	1c088 <remove_cf_cfg+0x20>

0001c096 <add_subscriptions>:
{
   1c096:	b538      	push	{r3, r4, r5, lr}
   1c098:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   1c09a:	f7f1 ff29 	bl	def0 <gatt_sub_find>
	if (!sub) {
   1c09e:	b1f8      	cbz	r0, 1c0e0 <add_subscriptions+0x4a>
	return list->head;
   1c0a0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c0a2:	b13c      	cbz	r4, 1c0b4 <add_subscriptions+0x1e>
   1c0a4:	3c18      	subs	r4, #24
   1c0a6:	e005      	b.n	1c0b4 <add_subscriptions+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c0a8:	f114 0318 	adds.w	r3, r4, #24
   1c0ac:	d016      	beq.n	1c0dc <add_subscriptions+0x46>
	return node->next;
   1c0ae:	69a4      	ldr	r4, [r4, #24]
   1c0b0:	b1b4      	cbz	r4, 1c0e0 <add_subscriptions+0x4a>
   1c0b2:	3c18      	subs	r4, #24
   1c0b4:	b1a4      	cbz	r4, 1c0e0 <add_subscriptions+0x4a>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1c0b6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1c0ba:	7a28      	ldrb	r0, [r5, #8]
   1c0bc:	f7fe f9d9 	bl	1a472 <bt_addr_le_is_bonded>
   1c0c0:	2800      	cmp	r0, #0
   1c0c2:	d0f1      	beq.n	1c0a8 <add_subscriptions+0x12>
		    !atomic_test_bit(params->flags,
   1c0c4:	f104 0314 	add.w	r3, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c0c8:	e8d3 3faf 	lda	r3, [r3]
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1c0cc:	f013 0f02 	tst.w	r3, #2
   1c0d0:	d1ea      	bne.n	1c0a8 <add_subscriptions+0x12>
			gatt_write_ccc(conn, params);
   1c0d2:	4621      	mov	r1, r4
   1c0d4:	4628      	mov	r0, r5
   1c0d6:	f7f2 f9db 	bl	e490 <gatt_write_ccc>
   1c0da:	e7e5      	b.n	1c0a8 <add_subscriptions+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c0dc:	461c      	mov	r4, r3
   1c0de:	e7e9      	b.n	1c0b4 <add_subscriptions+0x1e>
}
   1c0e0:	bd38      	pop	{r3, r4, r5, pc}

0001c0e2 <remove_subscriptions>:
{
   1c0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0e6:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   1c0e8:	f7f1 ff02 	bl	def0 <gatt_sub_find>
	if (!sub) {
   1c0ec:	2800      	cmp	r0, #0
   1c0ee:	d03a      	beq.n	1c166 <remove_subscriptions+0x84>
   1c0f0:	4607      	mov	r7, r0
	return list->head;
   1c0f2:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c0f4:	b37d      	cbz	r5, 1c156 <remove_subscriptions+0x74>
   1c0f6:	3d18      	subs	r5, #24
   1c0f8:	d031      	beq.n	1c15e <remove_subscriptions+0x7c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c0fa:	f115 0418 	adds.w	r4, r5, #24
   1c0fe:	d02b      	beq.n	1c158 <remove_subscriptions+0x76>
	return node->next;
   1c100:	69ac      	ldr	r4, [r5, #24]
   1c102:	b34c      	cbz	r4, 1c158 <remove_subscriptions+0x76>
   1c104:	3c18      	subs	r4, #24
   1c106:	e027      	b.n	1c158 <remove_subscriptions+0x76>
			params->value = 0U;
   1c108:	2300      	movs	r3, #0
   1c10a:	822b      	strh	r3, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   1c10c:	462b      	mov	r3, r5
   1c10e:	4642      	mov	r2, r8
   1c110:	4639      	mov	r1, r7
   1c112:	4630      	mov	r0, r6
   1c114:	f7ff fe7a 	bl	1be0c <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c118:	b31c      	cbz	r4, 1c162 <remove_subscriptions+0x80>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c11a:	f114 0318 	adds.w	r3, r4, #24
   1c11e:	d002      	beq.n	1c126 <remove_subscriptions+0x44>
	return node->next;
   1c120:	69a3      	ldr	r3, [r4, #24]
   1c122:	b103      	cbz	r3, 1c126 <remove_subscriptions+0x44>
   1c124:	3b18      	subs	r3, #24
   1c126:	4625      	mov	r5, r4
   1c128:	461c      	mov	r4, r3
   1c12a:	b1e5      	cbz	r5, 1c166 <remove_subscriptions+0x84>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c12c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c130:	7a30      	ldrb	r0, [r6, #8]
   1c132:	f7fe f99e 	bl	1a472 <bt_addr_le_is_bonded>
   1c136:	2800      	cmp	r0, #0
   1c138:	d0e6      	beq.n	1c108 <remove_subscriptions+0x26>
		    (atomic_test_bit(params->flags,
   1c13a:	f105 0314 	add.w	r3, r5, #20
   1c13e:	e8d3 3faf 	lda	r3, [r3]
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1c142:	f013 0f01 	tst.w	r3, #1
   1c146:	d1df      	bne.n	1c108 <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   1c148:	4639      	mov	r1, r7
   1c14a:	4630      	mov	r0, r6
   1c14c:	f7ff fe87 	bl	1be5e <gatt_sub_update>
			prev = &params->node;
   1c150:	f105 0818 	add.w	r8, r5, #24
   1c154:	e7e0      	b.n	1c118 <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c156:	462c      	mov	r4, r5
   1c158:	f04f 0800 	mov.w	r8, #0
   1c15c:	e7e5      	b.n	1c12a <remove_subscriptions+0x48>
   1c15e:	462c      	mov	r4, r5
   1c160:	e7fa      	b.n	1c158 <remove_subscriptions+0x76>
   1c162:	4623      	mov	r3, r4
   1c164:	e7df      	b.n	1c126 <remove_subscriptions+0x44>
}
   1c166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c16a <bt_gatt_attr_read>:
{
   1c16a:	b510      	push	{r4, lr}
   1c16c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1c170:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   1c174:	42a1      	cmp	r1, r4
   1c176:	d80c      	bhi.n	1c192 <bt_gatt_attr_read+0x28>
   1c178:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   1c17a:	1a64      	subs	r4, r4, r1
   1c17c:	42a3      	cmp	r3, r4
   1c17e:	bfa8      	it	ge
   1c180:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c182:	b29c      	uxth	r4, r3
   1c184:	4622      	mov	r2, r4
   1c186:	9b03      	ldr	r3, [sp, #12]
   1c188:	4419      	add	r1, r3
   1c18a:	f7fd ff5e 	bl	1a04a <memcpy>
}
   1c18e:	4620      	mov	r0, r4
   1c190:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c192:	f06f 0406 	mvn.w	r4, #6
   1c196:	e7fa      	b.n	1c18e <bt_gatt_attr_read+0x24>

0001c198 <read_ppcp>:
{
   1c198:	b510      	push	{r4, lr}
   1c19a:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1c19c:	2418      	movs	r4, #24
   1c19e:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1c1a2:	2428      	movs	r4, #40	; 0x28
   1c1a4:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1c1a8:	2400      	movs	r4, #0
   1c1aa:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1c1ae:	242a      	movs	r4, #42	; 0x2a
   1c1b0:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1c1b4:	2408      	movs	r4, #8
   1c1b6:	9402      	str	r4, [sp, #8]
   1c1b8:	ac04      	add	r4, sp, #16
   1c1ba:	9401      	str	r4, [sp, #4]
   1c1bc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1c1c0:	9400      	str	r4, [sp, #0]
   1c1c2:	f7ff ffd2 	bl	1c16a <bt_gatt_attr_read>
}
   1c1c6:	b006      	add	sp, #24
   1c1c8:	bd10      	pop	{r4, pc}

0001c1ca <read_appearance>:
{
   1c1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1cc:	b087      	sub	sp, #28
   1c1ce:	4604      	mov	r4, r0
   1c1d0:	460d      	mov	r5, r1
   1c1d2:	4616      	mov	r6, r2
   1c1d4:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1c1d6:	f7fe f94a 	bl	1a46e <bt_get_appearance>
   1c1da:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1c1de:	2302      	movs	r3, #2
   1c1e0:	9302      	str	r3, [sp, #8]
   1c1e2:	f10d 0316 	add.w	r3, sp, #22
   1c1e6:	9301      	str	r3, [sp, #4]
   1c1e8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1c1ec:	9300      	str	r3, [sp, #0]
   1c1ee:	463b      	mov	r3, r7
   1c1f0:	4632      	mov	r2, r6
   1c1f2:	4629      	mov	r1, r5
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f7ff ffb8 	bl	1c16a <bt_gatt_attr_read>
}
   1c1fa:	b007      	add	sp, #28
   1c1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c1fe <read_name>:
{
   1c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c202:	b084      	sub	sp, #16
   1c204:	4604      	mov	r4, r0
   1c206:	460d      	mov	r5, r1
   1c208:	4616      	mov	r6, r2
   1c20a:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   1c20c:	f7ed fe88 	bl	9f20 <bt_get_name>
   1c210:	4680      	mov	r8, r0
				 strlen(name));
   1c212:	f7fd fed7 	bl	19fc4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1c216:	b280      	uxth	r0, r0
   1c218:	9002      	str	r0, [sp, #8]
   1c21a:	f8cd 8004 	str.w	r8, [sp, #4]
   1c21e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c222:	9300      	str	r3, [sp, #0]
   1c224:	463b      	mov	r3, r7
   1c226:	4632      	mov	r2, r6
   1c228:	4629      	mov	r1, r5
   1c22a:	4620      	mov	r0, r4
   1c22c:	f7ff ff9d 	bl	1c16a <bt_gatt_attr_read>
}
   1c230:	b004      	add	sp, #16
   1c232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c236 <cf_read>:
{
   1c236:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c238:	b087      	sub	sp, #28
   1c23a:	4604      	mov	r4, r0
   1c23c:	460d      	mov	r5, r1
   1c23e:	4616      	mov	r6, r2
   1c240:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1c242:	2300      	movs	r3, #0
   1c244:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   1c248:	f7f1 fe04 	bl	de54 <find_cf_cfg>
	if (cfg) {
   1c24c:	b128      	cbz	r0, 1c25a <cf_read+0x24>
   1c24e:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   1c250:	2201      	movs	r2, #1
   1c252:	3108      	adds	r1, #8
   1c254:	a805      	add	r0, sp, #20
   1c256:	f7fd fef8 	bl	1a04a <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1c25a:	2301      	movs	r3, #1
   1c25c:	9302      	str	r3, [sp, #8]
   1c25e:	ab05      	add	r3, sp, #20
   1c260:	9301      	str	r3, [sp, #4]
   1c262:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1c266:	9300      	str	r3, [sp, #0]
   1c268:	463b      	mov	r3, r7
   1c26a:	4632      	mov	r2, r6
   1c26c:	4629      	mov	r1, r5
   1c26e:	4620      	mov	r0, r4
   1c270:	f7ff ff7b 	bl	1c16a <bt_gatt_attr_read>
}
   1c274:	b007      	add	sp, #28
   1c276:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c278 <bt_gatt_attr_read_service>:
{
   1c278:	b570      	push	{r4, r5, r6, lr}
   1c27a:	b086      	sub	sp, #24
   1c27c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   1c280:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1c282:	7826      	ldrb	r6, [r4, #0]
   1c284:	b146      	cbz	r6, 1c298 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   1c286:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1c288:	2610      	movs	r6, #16
   1c28a:	9602      	str	r6, [sp, #8]
   1c28c:	9401      	str	r4, [sp, #4]
   1c28e:	9500      	str	r5, [sp, #0]
   1c290:	f7ff ff6b 	bl	1c16a <bt_gatt_attr_read>
}
   1c294:	b006      	add	sp, #24
   1c296:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1c298:	8864      	ldrh	r4, [r4, #2]
   1c29a:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1c29e:	2402      	movs	r4, #2
   1c2a0:	9402      	str	r4, [sp, #8]
   1c2a2:	f10d 0416 	add.w	r4, sp, #22
   1c2a6:	9401      	str	r4, [sp, #4]
   1c2a8:	9500      	str	r5, [sp, #0]
   1c2aa:	f7ff ff5e 	bl	1c16a <bt_gatt_attr_read>
   1c2ae:	e7f1      	b.n	1c294 <bt_gatt_attr_read_service+0x1c>

0001c2b0 <bt_gatt_attr_read_ccc>:
{
   1c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2b2:	b087      	sub	sp, #28
   1c2b4:	4605      	mov	r5, r0
   1c2b6:	460c      	mov	r4, r1
   1c2b8:	4616      	mov	r6, r2
   1c2ba:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1c2bc:	68c9      	ldr	r1, [r1, #12]
   1c2be:	f7ff fd5b 	bl	1bd78 <find_ccc_cfg>
	if (cfg) {
   1c2c2:	b190      	cbz	r0, 1c2ea <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   1c2c4:	8903      	ldrh	r3, [r0, #8]
   1c2c6:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1c2ca:	2302      	movs	r3, #2
   1c2cc:	9302      	str	r3, [sp, #8]
   1c2ce:	f10d 0316 	add.w	r3, sp, #22
   1c2d2:	9301      	str	r3, [sp, #4]
   1c2d4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1c2d8:	9300      	str	r3, [sp, #0]
   1c2da:	463b      	mov	r3, r7
   1c2dc:	4632      	mov	r2, r6
   1c2de:	4621      	mov	r1, r4
   1c2e0:	4628      	mov	r0, r5
   1c2e2:	f7ff ff42 	bl	1c16a <bt_gatt_attr_read>
}
   1c2e6:	b007      	add	sp, #28
   1c2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   1c2ea:	2300      	movs	r3, #0
   1c2ec:	f8ad 3016 	strh.w	r3, [sp, #22]
   1c2f0:	e7eb      	b.n	1c2ca <bt_gatt_attr_read_ccc+0x1a>

0001c2f2 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c2f2:	b1b8      	cbz	r0, 1c324 <bt_gatt_attr_value_handle+0x32>
{
   1c2f4:	b510      	push	{r4, lr}
   1c2f6:	b082      	sub	sp, #8
   1c2f8:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c2fa:	2300      	movs	r3, #0
   1c2fc:	f88d 3004 	strb.w	r3, [sp, #4]
   1c300:	f642 0303 	movw	r3, #10243	; 0x2803
   1c304:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c308:	a901      	add	r1, sp, #4
   1c30a:	6800      	ldr	r0, [r0, #0]
   1c30c:	f7fd ff09 	bl	1a122 <bt_uuid_cmp>
   1c310:	b950      	cbnz	r0, 1c328 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   1c312:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   1c314:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1c316:	b940      	cbnz	r0, 1c32a <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1c318:	4620      	mov	r0, r4
   1c31a:	f7f2 f8fd 	bl	e518 <bt_gatt_attr_get_handle>
   1c31e:	3001      	adds	r0, #1
   1c320:	b280      	uxth	r0, r0
   1c322:	e002      	b.n	1c32a <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   1c324:	2000      	movs	r0, #0
}
   1c326:	4770      	bx	lr
	uint16_t handle = 0;
   1c328:	2000      	movs	r0, #0
}
   1c32a:	b002      	add	sp, #8
   1c32c:	bd10      	pop	{r4, pc}

0001c32e <bt_gatt_attr_read_chrc>:
{
   1c32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c332:	b08a      	sub	sp, #40	; 0x28
   1c334:	4605      	mov	r5, r0
   1c336:	460c      	mov	r4, r1
   1c338:	4616      	mov	r6, r2
   1c33a:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   1c33c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   1c340:	f898 3006 	ldrb.w	r3, [r8, #6]
   1c344:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c348:	4608      	mov	r0, r1
   1c34a:	f7ff ffd2 	bl	1c2f2 <bt_gatt_attr_value_handle>
   1c34e:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c352:	f8d8 1000 	ldr.w	r1, [r8]
   1c356:	780b      	ldrb	r3, [r1, #0]
   1c358:	b993      	cbnz	r3, 1c380 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c35a:	884b      	ldrh	r3, [r1, #2]
   1c35c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   1c360:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1c362:	9302      	str	r3, [sp, #8]
   1c364:	ab05      	add	r3, sp, #20
   1c366:	9301      	str	r3, [sp, #4]
   1c368:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1c36c:	9300      	str	r3, [sp, #0]
   1c36e:	463b      	mov	r3, r7
   1c370:	4632      	mov	r2, r6
   1c372:	4621      	mov	r1, r4
   1c374:	4628      	mov	r0, r5
   1c376:	f7ff fef8 	bl	1c16a <bt_gatt_attr_read>
}
   1c37a:	b00a      	add	sp, #40	; 0x28
   1c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1c380:	2210      	movs	r2, #16
   1c382:	3101      	adds	r1, #1
   1c384:	f10d 0017 	add.w	r0, sp, #23
   1c388:	f7fd fe5f 	bl	1a04a <memcpy>
		value_len += 16U;
   1c38c:	2313      	movs	r3, #19
   1c38e:	e7e8      	b.n	1c362 <bt_gatt_attr_read_chrc+0x34>

0001c390 <db_hash_process>:
{
   1c390:	b508      	push	{r3, lr}
	db_hash_gen(true);
   1c392:	2001      	movs	r0, #1
   1c394:	f7f2 f93a 	bl	e60c <db_hash_gen>
}
   1c398:	bd08      	pop	{r3, pc}

0001c39a <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1c39a:	f012 0f01 	tst.w	r2, #1
   1c39e:	d005      	beq.n	1c3ac <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c3a0:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1c3a2:	f013 0f95 	tst.w	r3, #149	; 0x95
   1c3a6:	d01e      	beq.n	1c3e6 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c3a8:	684b      	ldr	r3, [r1, #4]
   1c3aa:	b1f3      	cbz	r3, 1c3ea <bt_gatt_check_perm+0x50>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1c3ac:	f012 0f02 	tst.w	r2, #2
   1c3b0:	d005      	beq.n	1c3be <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1c3b2:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   1c3b4:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1c3b8:	d019      	beq.n	1c3ee <bt_gatt_check_perm+0x54>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1c3ba:	688b      	ldr	r3, [r1, #8]
   1c3bc:	b1cb      	cbz	r3, 1c3f2 <bt_gatt_check_perm+0x58>
{
   1c3be:	b510      	push	{r4, lr}
	mask &= attr->perm;
   1c3c0:	8a4c      	ldrh	r4, [r1, #18]
   1c3c2:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1c3c4:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1c3c8:	d115      	bne.n	1c3f6 <bt_gatt_check_perm+0x5c>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1c3ca:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c3ce:	d104      	bne.n	1c3da <bt_gatt_check_perm+0x40>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1c3d0:	f014 0f0c 	tst.w	r4, #12
   1c3d4:	d111      	bne.n	1c3fa <bt_gatt_check_perm+0x60>
	return 0;
   1c3d6:	2000      	movs	r0, #0
}
   1c3d8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1c3da:	f7fe fb59 	bl	1aa90 <bt_conn_get_security>
   1c3de:	2802      	cmp	r0, #2
   1c3e0:	d8f6      	bhi.n	1c3d0 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   1c3e2:	2005      	movs	r0, #5
   1c3e4:	e7f8      	b.n	1c3d8 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1c3e6:	2002      	movs	r0, #2
   1c3e8:	4770      	bx	lr
   1c3ea:	2002      	movs	r0, #2
   1c3ec:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1c3ee:	2003      	movs	r0, #3
   1c3f0:	4770      	bx	lr
   1c3f2:	2003      	movs	r0, #3
}
   1c3f4:	4770      	bx	lr
			return BT_ATT_ERR_AUTHENTICATION;
   1c3f6:	2005      	movs	r0, #5
   1c3f8:	e7ee      	b.n	1c3d8 <bt_gatt_check_perm+0x3e>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1c3fa:	200f      	movs	r0, #15
   1c3fc:	e7ec      	b.n	1c3d8 <bt_gatt_check_perm+0x3e>

0001c3fe <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   1c3fe:	7a83      	ldrb	r3, [r0, #10]
   1c400:	2b07      	cmp	r3, #7
   1c402:	d001      	beq.n	1c408 <bt_gatt_is_subscribed+0xa>
		return false;
   1c404:	2000      	movs	r0, #0
}
   1c406:	4770      	bx	lr
{
   1c408:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c40a:	b089      	sub	sp, #36	; 0x24
   1c40c:	4605      	mov	r5, r0
   1c40e:	460c      	mov	r4, r1
   1c410:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1c412:	6808      	ldr	r0, [r1, #0]
   1c414:	2300      	movs	r3, #0
   1c416:	f88d 3004 	strb.w	r3, [sp, #4]
   1c41a:	f642 0303 	movw	r3, #10243	; 0x2803
   1c41e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c422:	a901      	add	r1, sp, #4
   1c424:	f7fd fe7d 	bl	1a122 <bt_uuid_cmp>
   1c428:	b950      	cbnz	r0, 1c440 <bt_gatt_is_subscribed+0x42>
		struct bt_gatt_chrc *chrc = attr->user_data;
   1c42a:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   1c42c:	799b      	ldrb	r3, [r3, #6]
   1c42e:	f013 0f30 	tst.w	r3, #48	; 0x30
   1c432:	d101      	bne.n	1c438 <bt_gatt_is_subscribed+0x3a>
}
   1c434:	b009      	add	sp, #36	; 0x24
   1c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   1c438:	4620      	mov	r0, r4
   1c43a:	f7f2 f9d1 	bl	e7e0 <bt_gatt_attr_next>
   1c43e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1c440:	6820      	ldr	r0, [r4, #0]
   1c442:	2300      	movs	r3, #0
   1c444:	f88d 3008 	strb.w	r3, [sp, #8]
   1c448:	f642 1302 	movw	r3, #10498	; 0x2902
   1c44c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c450:	a902      	add	r1, sp, #8
   1c452:	f7fd fe66 	bl	1a122 <bt_uuid_cmp>
   1c456:	2800      	cmp	r0, #0
   1c458:	d136      	bne.n	1c4c8 <bt_gatt_is_subscribed+0xca>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1c45a:	6820      	ldr	r0, [r4, #0]
   1c45c:	2300      	movs	r3, #0
   1c45e:	f88d 300c 	strb.w	r3, [sp, #12]
   1c462:	f642 1302 	movw	r3, #10498	; 0x2902
   1c466:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c46a:	a903      	add	r1, sp, #12
   1c46c:	f7fd fe59 	bl	1a122 <bt_uuid_cmp>
   1c470:	b378      	cbz	r0, 1c4d2 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1c472:	6820      	ldr	r0, [r4, #0]
   1c474:	2300      	movs	r3, #0
   1c476:	f88d 3010 	strb.w	r3, [sp, #16]
   1c47a:	f642 0303 	movw	r3, #10243	; 0x2803
   1c47e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c482:	a904      	add	r1, sp, #16
   1c484:	f7fd fe4d 	bl	1a122 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1c488:	b318      	cbz	r0, 1c4d2 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c48a:	6820      	ldr	r0, [r4, #0]
   1c48c:	2300      	movs	r3, #0
   1c48e:	f88d 3014 	strb.w	r3, [sp, #20]
   1c492:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c496:	f8ad 3016 	strh.w	r3, [sp, #22]
   1c49a:	a905      	add	r1, sp, #20
   1c49c:	f7fd fe41 	bl	1a122 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1c4a0:	b1b8      	cbz	r0, 1c4d2 <bt_gatt_is_subscribed+0xd4>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1c4a2:	6820      	ldr	r0, [r4, #0]
   1c4a4:	2300      	movs	r3, #0
   1c4a6:	f88d 3018 	strb.w	r3, [sp, #24]
   1c4aa:	f642 0301 	movw	r3, #10241	; 0x2801
   1c4ae:	f8ad 301a 	strh.w	r3, [sp, #26]
   1c4b2:	a906      	add	r1, sp, #24
   1c4b4:	f7fd fe35 	bl	1a122 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1c4b8:	b158      	cbz	r0, 1c4d2 <bt_gatt_is_subscribed+0xd4>
		attr = bt_gatt_attr_next(attr);
   1c4ba:	4620      	mov	r0, r4
   1c4bc:	f7f2 f990 	bl	e7e0 <bt_gatt_attr_next>
		if (!attr) {
   1c4c0:	4604      	mov	r4, r0
   1c4c2:	2800      	cmp	r0, #0
   1c4c4:	d1c9      	bne.n	1c45a <bt_gatt_is_subscribed+0x5c>
   1c4c6:	e7b5      	b.n	1c434 <bt_gatt_is_subscribed+0x36>
		attr = bt_gatt_attr_next(attr);
   1c4c8:	4620      	mov	r0, r4
   1c4ca:	f7f2 f989 	bl	e7e0 <bt_gatt_attr_next>
   1c4ce:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1c4d0:	e7c3      	b.n	1c45a <bt_gatt_is_subscribed+0x5c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1c4d2:	6820      	ldr	r0, [r4, #0]
   1c4d4:	2300      	movs	r3, #0
   1c4d6:	f88d 301c 	strb.w	r3, [sp, #28]
   1c4da:	f642 1302 	movw	r3, #10498	; 0x2902
   1c4de:	f8ad 301e 	strh.w	r3, [sp, #30]
   1c4e2:	a907      	add	r1, sp, #28
   1c4e4:	f7fd fe1d 	bl	1a122 <bt_uuid_cmp>
   1c4e8:	b920      	cbnz	r0, 1c4f4 <bt_gatt_is_subscribed+0xf6>
	ccc = attr->user_data;
   1c4ea:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1c4ec:	2400      	movs	r4, #0
   1c4ee:	b11c      	cbz	r4, 1c4f8 <bt_gatt_is_subscribed+0xfa>
	return false;
   1c4f0:	2000      	movs	r0, #0
   1c4f2:	e79f      	b.n	1c434 <bt_gatt_is_subscribed+0x36>
		return false;
   1c4f4:	2000      	movs	r0, #0
   1c4f6:	e79d      	b.n	1c434 <bt_gatt_is_subscribed+0x36>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1c4f8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c4fc:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   1c500:	3201      	adds	r2, #1
   1c502:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1c506:	4628      	mov	r0, r5
   1c508:	f7fe fadb 	bl	1aac2 <bt_conn_is_peer_addr_le>
   1c50c:	b130      	cbz	r0, 1c51c <bt_gatt_is_subscribed+0x11e>
		    (ccc_type & ccc->cfg[i].value)) {
   1c50e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c512:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1c516:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1c518:	4233      	tst	r3, r6
   1c51a:	d18b      	bne.n	1c434 <bt_gatt_is_subscribed+0x36>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1c51c:	3401      	adds	r4, #1
   1c51e:	e7e6      	b.n	1c4ee <bt_gatt_is_subscribed+0xf0>

0001c520 <bt_gatt_cancel>:
{
   1c520:	b570      	push	{r4, r5, r6, lr}
   1c522:	b082      	sub	sp, #8
   1c524:	4604      	mov	r4, r0
   1c526:	460d      	mov	r5, r1
	k_sched_lock();
   1c528:	f7fa f9d8 	bl	168dc <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   1c52c:	4629      	mov	r1, r5
   1c52e:	4620      	mov	r0, r4
   1c530:	f7ff fac5 	bl	1babe <bt_att_find_req_by_user_data>
	if (req) {
   1c534:	b178      	cbz	r0, 1c556 <bt_gatt_cancel+0x36>
   1c536:	4601      	mov	r1, r0
		func = req->func;
   1c538:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   1c53a:	4620      	mov	r0, r4
   1c53c:	f7ff fa73 	bl	1ba26 <bt_att_req_cancel>
	k_sched_unlock();
   1c540:	f7fa fbee 	bl	16d20 <k_sched_unlock>
	if (func) {
   1c544:	b12e      	cbz	r6, 1c552 <bt_gatt_cancel+0x32>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   1c546:	9500      	str	r5, [sp, #0]
   1c548:	2300      	movs	r3, #0
   1c54a:	461a      	mov	r2, r3
   1c54c:	210e      	movs	r1, #14
   1c54e:	4620      	mov	r0, r4
   1c550:	47b0      	blx	r6
}
   1c552:	b002      	add	sp, #8
   1c554:	bd70      	pop	{r4, r5, r6, pc}
	k_sched_unlock();
   1c556:	f7fa fbe3 	bl	16d20 <k_sched_unlock>
	if (func) {
   1c55a:	e7fa      	b.n	1c552 <bt_gatt_cancel+0x32>

0001c55c <bt_gatt_unsubscribe>:
	if (conn->state != BT_CONN_CONNECTED) {
   1c55c:	7a83      	ldrb	r3, [r0, #10]
   1c55e:	2b07      	cmp	r3, #7
   1c560:	d167      	bne.n	1c632 <bt_gatt_unsubscribe+0xd6>
{
   1c562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c566:	4606      	mov	r6, r0
   1c568:	460d      	mov	r5, r1
	sub = gatt_sub_find(conn);
   1c56a:	f7f1 fcc1 	bl	def0 <gatt_sub_find>
	if (!sub) {
   1c56e:	4680      	mov	r8, r0
   1c570:	2800      	cmp	r0, #0
   1c572:	d061      	beq.n	1c638 <bt_gatt_unsubscribe+0xdc>
	return list->head;
   1c574:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c576:	b104      	cbz	r4, 1c57a <bt_gatt_unsubscribe+0x1e>
   1c578:	3c18      	subs	r4, #24
   1c57a:	2100      	movs	r1, #0
   1c57c:	460f      	mov	r7, r1
   1c57e:	e006      	b.n	1c58e <bt_gatt_unsubscribe+0x32>
			found = true;
   1c580:	2101      	movs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c582:	f114 0318 	adds.w	r3, r4, #24
   1c586:	d00b      	beq.n	1c5a0 <bt_gatt_unsubscribe+0x44>
	return node->next;
   1c588:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c58a:	b104      	cbz	r4, 1c58e <bt_gatt_unsubscribe+0x32>
   1c58c:	3c18      	subs	r4, #24
   1c58e:	b14c      	cbz	r4, 1c5a4 <bt_gatt_unsubscribe+0x48>
		if (params == tmp) {
   1c590:	42ac      	cmp	r4, r5
   1c592:	d0f5      	beq.n	1c580 <bt_gatt_unsubscribe+0x24>
		if (tmp->value_handle == params->value_handle) {
   1c594:	89a2      	ldrh	r2, [r4, #12]
   1c596:	89ab      	ldrh	r3, [r5, #12]
   1c598:	429a      	cmp	r2, r3
   1c59a:	d1f2      	bne.n	1c582 <bt_gatt_unsubscribe+0x26>
			has_subscription = true;
   1c59c:	2701      	movs	r7, #1
   1c59e:	e7f0      	b.n	1c582 <bt_gatt_unsubscribe+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c5a0:	461c      	mov	r4, r3
   1c5a2:	e7f4      	b.n	1c58e <bt_gatt_unsubscribe+0x32>
	if (!found) {
   1c5a4:	2900      	cmp	r1, #0
   1c5a6:	d04a      	beq.n	1c63e <bt_gatt_unsubscribe+0xe2>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   1c5a8:	f105 0314 	add.w	r3, r5, #20
   1c5ac:	e8d3 3faf 	lda	r3, [r3]
   1c5b0:	f013 0f04 	tst.w	r3, #4
   1c5b4:	d10f      	bne.n	1c5d6 <bt_gatt_unsubscribe+0x7a>
	if (!has_subscription) {
   1c5b6:	b93f      	cbnz	r7, 1c5c8 <bt_gatt_unsubscribe+0x6c>
		params->value = 0x0000;
   1c5b8:	2300      	movs	r3, #0
   1c5ba:	822b      	strh	r3, [r5, #16]
		err = gatt_write_ccc(conn, params);
   1c5bc:	4629      	mov	r1, r5
   1c5be:	4630      	mov	r0, r6
   1c5c0:	f7f1 ff66 	bl	e490 <gatt_write_ccc>
		if (err) {
   1c5c4:	2800      	cmp	r0, #0
   1c5c6:	d13e      	bne.n	1c646 <bt_gatt_unsubscribe+0xea>
	sys_slist_find_and_remove(&sub->list, &params->node);
   1c5c8:	f108 0108 	add.w	r1, r8, #8
   1c5cc:	f105 0218 	add.w	r2, r5, #24
	return list->head;
   1c5d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c5d4:	e010      	b.n	1c5f8 <bt_gatt_unsubscribe+0x9c>
		bt_gatt_cancel(conn, params);
   1c5d6:	4629      	mov	r1, r5
   1c5d8:	4630      	mov	r0, r6
   1c5da:	f7ff ffa1 	bl	1c520 <bt_gatt_cancel>
   1c5de:	e7ea      	b.n	1c5b6 <bt_gatt_unsubscribe+0x5a>
	return node->next;
   1c5e0:	69ab      	ldr	r3, [r5, #24]
	list->head = node;
   1c5e2:	f8c8 3008 	str.w	r3, [r8, #8]
	return list->tail;
   1c5e6:	6848      	ldr	r0, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c5e8:	4282      	cmp	r2, r0
   1c5ea:	d10f      	bne.n	1c60c <bt_gatt_unsubscribe+0xb0>
	list->tail = node;
   1c5ec:	604b      	str	r3, [r1, #4]
}
   1c5ee:	e00d      	b.n	1c60c <bt_gatt_unsubscribe+0xb0>
	list->tail = node;
   1c5f0:	604c      	str	r4, [r1, #4]
}
   1c5f2:	e00b      	b.n	1c60c <bt_gatt_unsubscribe+0xb0>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c5f4:	461c      	mov	r4, r3
   1c5f6:	681b      	ldr	r3, [r3, #0]
   1c5f8:	b153      	cbz	r3, 1c610 <bt_gatt_unsubscribe+0xb4>
   1c5fa:	429a      	cmp	r2, r3
   1c5fc:	d1fa      	bne.n	1c5f4 <bt_gatt_unsubscribe+0x98>
Z_GENLIST_REMOVE(slist, snode)
   1c5fe:	2c00      	cmp	r4, #0
   1c600:	d0ee      	beq.n	1c5e0 <bt_gatt_unsubscribe+0x84>
	return node->next;
   1c602:	69ab      	ldr	r3, [r5, #24]
	parent->next = child;
   1c604:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c606:	684b      	ldr	r3, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c608:	429a      	cmp	r2, r3
   1c60a:	d0f1      	beq.n	1c5f0 <bt_gatt_unsubscribe+0x94>
	parent->next = child;
   1c60c:	2300      	movs	r3, #0
   1c60e:	61ab      	str	r3, [r5, #24]
	if (gatt_sub_is_empty(sub)) {
   1c610:	4640      	mov	r0, r8
   1c612:	f7ff fb3b 	bl	1bc8c <gatt_sub_is_empty>
   1c616:	b940      	cbnz	r0, 1c62a <bt_gatt_unsubscribe+0xce>
	if (has_subscription) {
   1c618:	b1a7      	cbz	r7, 1c644 <bt_gatt_unsubscribe+0xe8>
		params->notify(conn, params, NULL, 0);
   1c61a:	682c      	ldr	r4, [r5, #0]
   1c61c:	2300      	movs	r3, #0
   1c61e:	461a      	mov	r2, r3
   1c620:	4629      	mov	r1, r5
   1c622:	4630      	mov	r0, r6
   1c624:	47a0      	blx	r4
	return 0;
   1c626:	2000      	movs	r0, #0
   1c628:	e00d      	b.n	1c646 <bt_gatt_unsubscribe+0xea>
		gatt_sub_free(sub);
   1c62a:	4640      	mov	r0, r8
   1c62c:	f7ff fbe0 	bl	1bdf0 <gatt_sub_free>
   1c630:	e7f2      	b.n	1c618 <bt_gatt_unsubscribe+0xbc>
		return -ENOTCONN;
   1c632:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1c636:	4770      	bx	lr
		return -EINVAL;
   1c638:	f06f 0015 	mvn.w	r0, #21
   1c63c:	e003      	b.n	1c646 <bt_gatt_unsubscribe+0xea>
		return -EINVAL;
   1c63e:	f06f 0015 	mvn.w	r0, #21
   1c642:	e000      	b.n	1c646 <bt_gatt_unsubscribe+0xea>
	return 0;
   1c644:	2000      	movs	r0, #0
}
   1c646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c64a <bt_gatt_notification>:
{
   1c64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c64e:	4680      	mov	r8, r0
   1c650:	460f      	mov	r7, r1
   1c652:	4691      	mov	r9, r2
   1c654:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1c656:	f7f1 fc4b 	bl	def0 <gatt_sub_find>
	if (!sub) {
   1c65a:	b380      	cbz	r0, 1c6be <bt_gatt_notification+0x74>
	return list->head;
   1c65c:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c65e:	b145      	cbz	r5, 1c672 <bt_gatt_notification+0x28>
   1c660:	3d18      	subs	r5, #24
   1c662:	d008      	beq.n	1c676 <bt_gatt_notification+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c664:	f115 0418 	adds.w	r4, r5, #24
   1c668:	d010      	beq.n	1c68c <bt_gatt_notification+0x42>
	return node->next;
   1c66a:	69ac      	ldr	r4, [r5, #24]
   1c66c:	b174      	cbz	r4, 1c68c <bt_gatt_notification+0x42>
   1c66e:	3c18      	subs	r4, #24
   1c670:	e00c      	b.n	1c68c <bt_gatt_notification+0x42>
   1c672:	462c      	mov	r4, r5
   1c674:	e00a      	b.n	1c68c <bt_gatt_notification+0x42>
   1c676:	462c      	mov	r4, r5
   1c678:	e008      	b.n	1c68c <bt_gatt_notification+0x42>
   1c67a:	b1f4      	cbz	r4, 1c6ba <bt_gatt_notification+0x70>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c67c:	f114 0618 	adds.w	r6, r4, #24
   1c680:	d002      	beq.n	1c688 <bt_gatt_notification+0x3e>
	return node->next;
   1c682:	69a6      	ldr	r6, [r4, #24]
   1c684:	b106      	cbz	r6, 1c688 <bt_gatt_notification+0x3e>
   1c686:	3e18      	subs	r6, #24
   1c688:	4625      	mov	r5, r4
   1c68a:	4634      	mov	r4, r6
   1c68c:	b1bd      	cbz	r5, 1c6be <bt_gatt_notification+0x74>
		if (handle != params->value_handle) {
   1c68e:	89ab      	ldrh	r3, [r5, #12]
   1c690:	429f      	cmp	r7, r3
   1c692:	d1f2      	bne.n	1c67a <bt_gatt_notification+0x30>
		if (check_subscribe_security_level(conn, params)) {
   1c694:	4629      	mov	r1, r5
   1c696:	4640      	mov	r0, r8
   1c698:	f7ff fafd 	bl	1bc96 <check_subscribe_security_level>
   1c69c:	2800      	cmp	r0, #0
   1c69e:	d0ec      	beq.n	1c67a <bt_gatt_notification+0x30>
			if (params->notify(conn, params, data, length) ==
   1c6a0:	682e      	ldr	r6, [r5, #0]
   1c6a2:	4653      	mov	r3, sl
   1c6a4:	464a      	mov	r2, r9
   1c6a6:	4629      	mov	r1, r5
   1c6a8:	4640      	mov	r0, r8
   1c6aa:	47b0      	blx	r6
   1c6ac:	2800      	cmp	r0, #0
   1c6ae:	d1e4      	bne.n	1c67a <bt_gatt_notification+0x30>
				bt_gatt_unsubscribe(conn, params);
   1c6b0:	4629      	mov	r1, r5
   1c6b2:	4640      	mov	r0, r8
   1c6b4:	f7ff ff52 	bl	1c55c <bt_gatt_unsubscribe>
   1c6b8:	e7df      	b.n	1c67a <bt_gatt_notification+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c6ba:	4626      	mov	r6, r4
   1c6bc:	e7e4      	b.n	1c688 <bt_gatt_notification+0x3e>
}
   1c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c6c2 <bt_gatt_change_aware>:
{
   1c6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6c4:	4607      	mov	r7, r0
   1c6c6:	460e      	mov	r6, r1
	cfg = find_cf_cfg(conn);
   1c6c8:	f7f1 fbc4 	bl	de54 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c6cc:	2800      	cmp	r0, #0
   1c6ce:	d049      	beq.n	1c764 <bt_gatt_change_aware+0xa2>
   1c6d0:	7a02      	ldrb	r2, [r0, #8]
   1c6d2:	f012 0f01 	tst.w	r2, #1
   1c6d6:	d102      	bne.n	1c6de <bt_gatt_change_aware+0x1c>
		return true;
   1c6d8:	2401      	movs	r4, #1
}
   1c6da:	4620      	mov	r0, r4
   1c6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c6de:	f100 050c 	add.w	r5, r0, #12
   1c6e2:	e8d5 4faf 	lda	r4, [r5]
   1c6e6:	f014 0401 	ands.w	r4, r4, #1
   1c6ea:	d1f6      	bne.n	1c6da <bt_gatt_change_aware+0x18>
	if (!req) {
   1c6ec:	b90e      	cbnz	r6, 1c6f2 <bt_gatt_change_aware+0x30>
		return false;
   1c6ee:	4634      	mov	r4, r6
   1c6f0:	e7f3      	b.n	1c6da <bt_gatt_change_aware+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c6f2:	e8d5 3fef 	ldaex	r3, [r5]
   1c6f6:	f023 0202 	bic.w	r2, r3, #2
   1c6fa:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1c6fe:	2900      	cmp	r1, #0
   1c700:	d1f7      	bne.n	1c6f2 <bt_gatt_change_aware+0x30>
	return (old & mask) != 0;
   1c702:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1c706:	f013 0f02 	tst.w	r3, #2
   1c70a:	d11f      	bne.n	1c74c <bt_gatt_change_aware+0x8a>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1c70c:	4638      	mov	r0, r7
   1c70e:	f7ff f9ff 	bl	1bb10 <bt_att_fixed_chan_only>
   1c712:	4604      	mov	r4, r0
   1c714:	2800      	cmp	r0, #0
   1c716:	d0e0      	beq.n	1c6da <bt_gatt_change_aware+0x18>
   1c718:	4638      	mov	r0, r7
   1c71a:	f7ff fa18 	bl	1bb4e <bt_att_out_of_sync_sent_on_fixed>
   1c71e:	4604      	mov	r4, r0
   1c720:	2800      	cmp	r0, #0
   1c722:	d0da      	beq.n	1c6da <bt_gatt_change_aware+0x18>
   1c724:	e8d5 3fef 	ldaex	r3, [r5]
   1c728:	f023 0302 	bic.w	r3, r3, #2
   1c72c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c730:	2a00      	cmp	r2, #0
   1c732:	d1f7      	bne.n	1c724 <bt_gatt_change_aware+0x62>
		bt_att_clear_out_of_sync_sent(conn);
   1c734:	4638      	mov	r0, r7
   1c736:	f7ff f9ed 	bl	1bb14 <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c73a:	e8d5 3fef 	ldaex	r3, [r5]
   1c73e:	f043 0301 	orr.w	r3, r3, #1
   1c742:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c746:	2a00      	cmp	r2, #0
   1c748:	d0c7      	beq.n	1c6da <bt_gatt_change_aware+0x18>
   1c74a:	e7f6      	b.n	1c73a <bt_gatt_change_aware+0x78>
		bt_att_clear_out_of_sync_sent(conn);
   1c74c:	4638      	mov	r0, r7
   1c74e:	f7ff f9e1 	bl	1bb14 <bt_att_clear_out_of_sync_sent>
   1c752:	e8d5 3fef 	ldaex	r3, [r5]
   1c756:	f043 0301 	orr.w	r3, r3, #1
   1c75a:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c75e:	2a00      	cmp	r2, #0
   1c760:	d0bb      	beq.n	1c6da <bt_gatt_change_aware+0x18>
   1c762:	e7f6      	b.n	1c752 <bt_gatt_change_aware+0x90>
		return true;
   1c764:	2401      	movs	r4, #1
   1c766:	e7b8      	b.n	1c6da <bt_gatt_change_aware+0x18>

0001c768 <bt_smp_recv>:
{
   1c768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c76a:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   1c76c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c76e:	f04f 32ff 	mov.w	r2, #4294967295
   1c772:	f04f 33ff 	mov.w	r3, #4294967295
   1c776:	2100      	movs	r1, #0
   1c778:	4608      	mov	r0, r1
   1c77a:	f7fe fa3f 	bl	1abfc <bt_l2cap_create_pdu_timeout>
   1c77e:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1c780:	f100 0608 	add.w	r6, r0, #8
   1c784:	2101      	movs	r1, #1
   1c786:	4630      	mov	r0, r6
   1c788:	f000 f9ca 	bl	1cb20 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1c78c:	2505      	movs	r5, #5
   1c78e:	7005      	strb	r5, [r0, #0]
   1c790:	2101      	movs	r1, #1
   1c792:	4630      	mov	r0, r6
   1c794:	f000 f9c4 	bl	1cb20 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1c798:	7005      	strb	r5, [r0, #0]
   1c79a:	2300      	movs	r3, #0
   1c79c:	9300      	str	r3, [sp, #0]
   1c79e:	4622      	mov	r2, r4
   1c7a0:	2106      	movs	r1, #6
   1c7a2:	4638      	mov	r0, r7
   1c7a4:	f7fe fa2f 	bl	1ac06 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1c7a8:	b910      	cbnz	r0, 1c7b0 <bt_smp_recv+0x48>
}
   1c7aa:	2000      	movs	r0, #0
   1c7ac:	b003      	add	sp, #12
   1c7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1c7b0:	4620      	mov	r0, r4
   1c7b2:	f000 f96b 	bl	1ca8c <net_buf_unref>
   1c7b6:	e7f8      	b.n	1c7aa <bt_smp_recv+0x42>

0001c7b8 <bt_smp_sign>:
}
   1c7b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c7bc:	4770      	bx	lr

0001c7be <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1c7be:	2000      	movs	r0, #0
   1c7c0:	4770      	bx	lr

0001c7c2 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1c7c2:	4770      	bx	lr

0001c7c4 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7c8:	4604      	mov	r4, r0
   1c7ca:	460d      	mov	r5, r1
   1c7cc:	4617      	mov	r7, r2
   1c7ce:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c7d0:	7980      	ldrb	r0, [r0, #6]
   1c7d2:	f7f2 fde7 	bl	f3a4 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1c7d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c7d8:	681b      	ldr	r3, [r3, #0]
   1c7da:	f8d3 8000 	ldr.w	r8, [r3]
   1c7de:	463a      	mov	r2, r7
   1c7e0:	4633      	mov	r3, r6
   1c7e2:	4629      	mov	r1, r5
   1c7e4:	4620      	mov	r0, r4
   1c7e6:	47c0      	blx	r8
}
   1c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c7ec <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1c7ec:	b538      	push	{r3, r4, r5, lr}
   1c7ee:	4604      	mov	r4, r0
   1c7f0:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c7f2:	7980      	ldrb	r0, [r0, #6]
   1c7f4:	f7f2 fdd6 	bl	f3a4 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c7f8:	7963      	ldrb	r3, [r4, #5]
   1c7fa:	f013 0f02 	tst.w	r3, #2
   1c7fe:	d105      	bne.n	1c80c <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1c800:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c802:	681b      	ldr	r3, [r3, #0]
   1c804:	689b      	ldr	r3, [r3, #8]
   1c806:	4629      	mov	r1, r5
   1c808:	4620      	mov	r0, r4
   1c80a:	4798      	blx	r3
}
   1c80c:	bd38      	pop	{r3, r4, r5, pc}

0001c80e <net_buf_id>:
{
   1c80e:	b510      	push	{r4, lr}
   1c810:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c812:	7980      	ldrb	r0, [r0, #6]
   1c814:	f7f2 fdc6 	bl	f3a4 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c818:	7f03      	ldrb	r3, [r0, #28]
   1c81a:	3317      	adds	r3, #23
   1c81c:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c820:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1c822:	1a20      	subs	r0, r4, r0
}
   1c824:	fbb0 f0f3 	udiv	r0, r0, r3
   1c828:	bd10      	pop	{r4, pc}

0001c82a <fixed_data_alloc>:
{
   1c82a:	b570      	push	{r4, r5, r6, lr}
   1c82c:	4604      	mov	r4, r0
   1c82e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c830:	7980      	ldrb	r0, [r0, #6]
   1c832:	f7f2 fdb7 	bl	f3a4 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c836:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c838:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c83a:	682a      	ldr	r2, [r5, #0]
   1c83c:	6819      	ldr	r1, [r3, #0]
   1c83e:	428a      	cmp	r2, r1
   1c840:	bf28      	it	cs
   1c842:	460a      	movcs	r2, r1
   1c844:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c846:	685d      	ldr	r5, [r3, #4]
   1c848:	681e      	ldr	r6, [r3, #0]
   1c84a:	4620      	mov	r0, r4
   1c84c:	f7ff ffdf 	bl	1c80e <net_buf_id>
}
   1c850:	fb00 5006 	mla	r0, r0, r6, r5
   1c854:	bd70      	pop	{r4, r5, r6, pc}

0001c856 <net_buf_reset>:
	buf->len  = 0U;
   1c856:	2300      	movs	r3, #0
   1c858:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1c85a:	6903      	ldr	r3, [r0, #16]
   1c85c:	6083      	str	r3, [r0, #8]
}
   1c85e:	4770      	bx	lr

0001c860 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c864:	b082      	sub	sp, #8
   1c866:	4605      	mov	r5, r0
   1c868:	9101      	str	r1, [sp, #4]
   1c86a:	4616      	mov	r6, r2
   1c86c:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c86e:	4610      	mov	r0, r2
   1c870:	4619      	mov	r1, r3
   1c872:	f003 fa9e 	bl	1fdb2 <sys_clock_timeout_end_calc>
   1c876:	4680      	mov	r8, r0
   1c878:	4689      	mov	r9, r1
   1c87a:	f04f 0320 	mov.w	r3, #32
   1c87e:	f3ef 8a11 	mrs	sl, BASEPRI
   1c882:	f383 8812 	msr	BASEPRI_MAX, r3
   1c886:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c88a:	8b6b      	ldrh	r3, [r5, #26]
   1c88c:	2b00      	cmp	r3, #0
   1c88e:	d040      	beq.n	1c912 <net_buf_alloc_len+0xb2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c890:	8b2a      	ldrh	r2, [r5, #24]
   1c892:	4293      	cmp	r3, r2
   1c894:	d20b      	bcs.n	1c8ae <net_buf_alloc_len+0x4e>
	return z_impl_k_queue_get(queue, timeout);
   1c896:	2200      	movs	r2, #0
   1c898:	2300      	movs	r3, #0
   1c89a:	4628      	mov	r0, r5
   1c89c:	f7f9 fd4c 	bl	16338 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c8a0:	4604      	mov	r4, r0
   1c8a2:	b120      	cbz	r0, 1c8ae <net_buf_alloc_len+0x4e>
	__asm__ volatile(
   1c8a4:	f38a 8811 	msr	BASEPRI, sl
   1c8a8:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1c8ac:	e015      	b.n	1c8da <net_buf_alloc_len+0x7a>
			}
		}

		uninit_count = pool->uninit_count--;
   1c8ae:	8b6a      	ldrh	r2, [r5, #26]
   1c8b0:	1e53      	subs	r3, r2, #1
   1c8b2:	836b      	strh	r3, [r5, #26]
   1c8b4:	f38a 8811 	msr	BASEPRI, sl
   1c8b8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c8bc:	7f2c      	ldrb	r4, [r5, #28]
   1c8be:	3417      	adds	r4, #23
   1c8c0:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c8c4:	8b2c      	ldrh	r4, [r5, #24]
   1c8c6:	1aa2      	subs	r2, r4, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c8c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1c8ca:	fb02 4403 	mla	r4, r2, r3, r4
	buf->pool_id = pool_id(pool);
   1c8ce:	4628      	mov	r0, r5
   1c8d0:	f7f2 fd5c 	bl	f38c <pool_id>
   1c8d4:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1c8d6:	7f2b      	ldrb	r3, [r5, #28]
   1c8d8:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c8da:	9b01      	ldr	r3, [sp, #4]
   1c8dc:	b39b      	cbz	r3, 1c946 <net_buf_alloc_len+0xe6>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c8de:	ea56 0307 	orrs.w	r3, r6, r7
   1c8e2:	d005      	beq.n	1c8f0 <net_buf_alloc_len+0x90>
   1c8e4:	f1b7 3fff 	cmp.w	r7, #4294967295
   1c8e8:	bf08      	it	eq
   1c8ea:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1c8ee:	d11d      	bne.n	1c92c <net_buf_alloc_len+0xcc>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c8f0:	4632      	mov	r2, r6
   1c8f2:	463b      	mov	r3, r7
   1c8f4:	a901      	add	r1, sp, #4
   1c8f6:	4620      	mov	r0, r4
   1c8f8:	f7ff ff64 	bl	1c7c4 <data_alloc>
   1c8fc:	4605      	mov	r5, r0
   1c8fe:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1c900:	bb18      	cbnz	r0, 1c94a <net_buf_alloc_len+0xea>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c902:	79a0      	ldrb	r0, [r4, #6]
   1c904:	f7f2 fd4e 	bl	f3a4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1c908:	4621      	mov	r1, r4
   1c90a:	f002 fe85 	bl	1f618 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1c90e:	462c      	mov	r4, r5
}
   1c910:	e025      	b.n	1c95e <net_buf_alloc_len+0xfe>
   1c912:	f38a 8811 	msr	BASEPRI, sl
   1c916:	f3bf 8f6f 	isb	sy
   1c91a:	4632      	mov	r2, r6
   1c91c:	463b      	mov	r3, r7
   1c91e:	4628      	mov	r0, r5
   1c920:	f7f9 fd0a 	bl	16338 <z_impl_k_queue_get>
	if (!buf) {
   1c924:	4604      	mov	r4, r0
   1c926:	2800      	cmp	r0, #0
   1c928:	d1d7      	bne.n	1c8da <net_buf_alloc_len+0x7a>
   1c92a:	e018      	b.n	1c95e <net_buf_alloc_len+0xfe>
			int64_t remaining = end - sys_clock_tick_get();
   1c92c:	f7fa fcd8 	bl	172e0 <sys_clock_tick_get>
   1c930:	ebb8 0600 	subs.w	r6, r8, r0
   1c934:	eb69 0701 	sbc.w	r7, r9, r1
			if (remaining <= 0) {
   1c938:	2e01      	cmp	r6, #1
   1c93a:	f177 0300 	sbcs.w	r3, r7, #0
   1c93e:	dad7      	bge.n	1c8f0 <net_buf_alloc_len+0x90>
				timeout = K_NO_WAIT;
   1c940:	2600      	movs	r6, #0
   1c942:	4637      	mov	r7, r6
   1c944:	e7d4      	b.n	1c8f0 <net_buf_alloc_len+0x90>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1c946:	2300      	movs	r3, #0
   1c948:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1c94a:	2301      	movs	r3, #1
   1c94c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1c94e:	2300      	movs	r3, #0
   1c950:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1c952:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1c954:	9b01      	ldr	r3, [sp, #4]
   1c956:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1c958:	4620      	mov	r0, r4
   1c95a:	f7ff ff7c 	bl	1c856 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c95e:	4620      	mov	r0, r4
   1c960:	b002      	add	sp, #8
   1c962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c966 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   1c966:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c968:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1c96a:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c96c:	6809      	ldr	r1, [r1, #0]
   1c96e:	f7ff ff77 	bl	1c860 <net_buf_alloc_len>
}
   1c972:	bd08      	pop	{r3, pc}

0001c974 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1c974:	b570      	push	{r4, r5, r6, lr}
   1c976:	4605      	mov	r5, r0
   1c978:	f7f9 fcde 	bl	16338 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1c97c:	4606      	mov	r6, r0
   1c97e:	b190      	cbz	r0, 1c9a6 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c980:	4604      	mov	r4, r0
   1c982:	e00a      	b.n	1c99a <net_buf_get+0x26>
   1c984:	2200      	movs	r2, #0
   1c986:	2300      	movs	r3, #0
   1c988:	4628      	mov	r0, r5
   1c98a:	f7f9 fcd5 	bl	16338 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c98e:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1c990:	7963      	ldrb	r3, [r4, #5]
   1c992:	f023 0301 	bic.w	r3, r3, #1
   1c996:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c998:	4604      	mov	r4, r0
   1c99a:	7963      	ldrb	r3, [r4, #5]
   1c99c:	f013 0f01 	tst.w	r3, #1
   1c9a0:	d1f0      	bne.n	1c984 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c9a2:	2300      	movs	r3, #0
   1c9a4:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c9a6:	4630      	mov	r0, r6
   1c9a8:	bd70      	pop	{r4, r5, r6, pc}

0001c9aa <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   1c9aa:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1c9ac:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1c9ae:	b292      	uxth	r2, r2
   1c9b0:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1c9b2:	8082      	strh	r2, [r0, #4]
}
   1c9b4:	4770      	bx	lr

0001c9b6 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c9b6:	6883      	ldr	r3, [r0, #8]
   1c9b8:	440b      	add	r3, r1
   1c9ba:	6003      	str	r3, [r0, #0]
}
   1c9bc:	4770      	bx	lr

0001c9be <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1c9be:	b410      	push	{r4}
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c9c0:	460b      	mov	r3, r1
   1c9c2:	e004      	b.n	1c9ce <net_buf_slist_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1c9c4:	795a      	ldrb	r2, [r3, #5]
   1c9c6:	f042 0201 	orr.w	r2, r2, #1
   1c9ca:	715a      	strb	r2, [r3, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1c9cc:	4623      	mov	r3, r4
   1c9ce:	681c      	ldr	r4, [r3, #0]
   1c9d0:	2c00      	cmp	r4, #0
   1c9d2:	d1f7      	bne.n	1c9c4 <net_buf_slist_put+0x6>
	__asm__ volatile(
   1c9d4:	f04f 0420 	mov.w	r4, #32
   1c9d8:	f3ef 8211 	mrs	r2, BASEPRI
   1c9dc:	f384 8812 	msr	BASEPRI_MAX, r4
   1c9e0:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
   1c9e4:	461c      	mov	r4, r3
Z_GENLIST_APPEND_LIST(slist, snode)
   1c9e6:	b121      	cbz	r1, 1c9f2 <net_buf_slist_put+0x34>
   1c9e8:	b11b      	cbz	r3, 1c9f2 <net_buf_slist_put+0x34>
	return list->tail;
   1c9ea:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   1c9ec:	b13b      	cbz	r3, 1c9fe <net_buf_slist_put+0x40>
	parent->next = child;
   1c9ee:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1c9f0:	6044      	str	r4, [r0, #4]
	__asm__ volatile(
   1c9f2:	f382 8811 	msr	BASEPRI, r2
   1c9f6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1c9fa:	bc10      	pop	{r4}
   1c9fc:	4770      	bx	lr
	list->head = node;
   1c9fe:	6001      	str	r1, [r0, #0]
}
   1ca00:	e7f6      	b.n	1c9f0 <net_buf_slist_put+0x32>

0001ca02 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1ca02:	b510      	push	{r4, lr}
   1ca04:	4684      	mov	ip, r0
	__asm__ volatile(
   1ca06:	f04f 0320 	mov.w	r3, #32
   1ca0a:	f3ef 8e11 	mrs	lr, BASEPRI
   1ca0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca12:	f3bf 8f6f 	isb	sy
	return list->head;
   1ca16:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ca18:	b328      	cbz	r0, 1ca66 <net_buf_slist_get+0x64>
	return node->next;
   1ca1a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1ca1c:	f8cc 3000 	str.w	r3, [ip]
	return list->tail;
   1ca20:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ca24:	4290      	cmp	r0, r2
   1ca26:	d001      	beq.n	1ca2c <net_buf_slist_get+0x2a>
   1ca28:	4602      	mov	r2, r0
   1ca2a:	e008      	b.n	1ca3e <net_buf_slist_get+0x3c>
	list->tail = node;
   1ca2c:	f8cc 3004 	str.w	r3, [ip, #4]
}
   1ca30:	e7fa      	b.n	1ca28 <net_buf_slist_get+0x26>
	buf = (void *)sys_slist_get(list);

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
   1ca32:	6013      	str	r3, [r2, #0]
			__ASSERT_NO_MSG(frag->frags);

			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
   1ca34:	7951      	ldrb	r1, [r2, #5]
   1ca36:	f021 0101 	bic.w	r1, r1, #1
   1ca3a:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ca3c:	461a      	mov	r2, r3
   1ca3e:	7953      	ldrb	r3, [r2, #5]
   1ca40:	f013 0f01 	tst.w	r3, #1
   1ca44:	d00d      	beq.n	1ca62 <net_buf_slist_get+0x60>
	return list->head;
   1ca46:	f8dc 3000 	ldr.w	r3, [ip]
Z_GENLIST_GET(slist, snode)
   1ca4a:	2b00      	cmp	r3, #0
   1ca4c:	d0f1      	beq.n	1ca32 <net_buf_slist_get+0x30>
	return node->next;
   1ca4e:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1ca50:	f8cc 1000 	str.w	r1, [ip]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ca54:	f8dc 4004 	ldr.w	r4, [ip, #4]
   1ca58:	42a3      	cmp	r3, r4
   1ca5a:	d1ea      	bne.n	1ca32 <net_buf_slist_get+0x30>
	list->tail = node;
   1ca5c:	f8cc 1004 	str.w	r1, [ip, #4]
}
   1ca60:	e7e7      	b.n	1ca32 <net_buf_slist_get+0x30>
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   1ca62:	2300      	movs	r3, #0
   1ca64:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   1ca66:	f38e 8811 	msr	BASEPRI, lr
   1ca6a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1ca6e:	bd10      	pop	{r4, pc}

0001ca70 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ca70:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ca72:	460a      	mov	r2, r1
   1ca74:	e004      	b.n	1ca80 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1ca76:	7953      	ldrb	r3, [r2, #5]
   1ca78:	f043 0301 	orr.w	r3, r3, #1
   1ca7c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1ca7e:	4622      	mov	r2, r4
   1ca80:	6814      	ldr	r4, [r2, #0]
   1ca82:	2c00      	cmp	r4, #0
   1ca84:	d1f7      	bne.n	1ca76 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1ca86:	f002 fdd2 	bl	1f62e <k_queue_append_list>
}
   1ca8a:	bd10      	pop	{r4, pc}

0001ca8c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ca8c:	b538      	push	{r3, r4, r5, lr}
   1ca8e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   1ca90:	e00a      	b.n	1caa8 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   1ca92:	2300      	movs	r3, #0
   1ca94:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1ca96:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1ca98:	79a0      	ldrb	r0, [r4, #6]
   1ca9a:	f7f2 fc83 	bl	f3a4 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ca9e:	6a03      	ldr	r3, [r0, #32]
   1caa0:	b193      	cbz	r3, 1cac8 <net_buf_unref+0x3c>
			pool->destroy(buf);
   1caa2:	4620      	mov	r0, r4
   1caa4:	4798      	blx	r3
{
   1caa6:	462c      	mov	r4, r5
	while (buf) {
   1caa8:	b1ac      	cbz	r4, 1cad6 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   1caaa:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1caac:	7923      	ldrb	r3, [r4, #4]
   1caae:	3b01      	subs	r3, #1
   1cab0:	b2db      	uxtb	r3, r3
   1cab2:	7123      	strb	r3, [r4, #4]
   1cab4:	b97b      	cbnz	r3, 1cad6 <net_buf_unref+0x4a>
		if (buf->__buf) {
   1cab6:	6921      	ldr	r1, [r4, #16]
   1cab8:	2900      	cmp	r1, #0
   1caba:	d0ea      	beq.n	1ca92 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   1cabc:	4620      	mov	r0, r4
   1cabe:	f7ff fe95 	bl	1c7ec <data_unref>
			buf->__buf = NULL;
   1cac2:	2300      	movs	r3, #0
   1cac4:	6123      	str	r3, [r4, #16]
   1cac6:	e7e4      	b.n	1ca92 <net_buf_unref+0x6>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cac8:	79a0      	ldrb	r0, [r4, #6]
   1caca:	f7f2 fc6b 	bl	f3a4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1cace:	4621      	mov	r1, r4
   1cad0:	f002 fda2 	bl	1f618 <k_queue_prepend>
}
   1cad4:	e7e7      	b.n	1caa6 <net_buf_unref+0x1a>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1cad6:	bd38      	pop	{r3, r4, r5, pc}

0001cad8 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1cad8:	7902      	ldrb	r2, [r0, #4]
   1cada:	3201      	adds	r2, #1
   1cadc:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1cade:	4770      	bx	lr

0001cae0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1cae0:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1cae2:	4618      	mov	r0, r3
   1cae4:	681b      	ldr	r3, [r3, #0]
   1cae6:	2b00      	cmp	r3, #0
   1cae8:	d1fb      	bne.n	1cae2 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1caea:	4770      	bx	lr

0001caec <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1caec:	b570      	push	{r4, r5, r6, lr}
   1caee:	4604      	mov	r4, r0
   1caf0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1caf2:	6806      	ldr	r6, [r0, #0]
   1caf4:	b11e      	cbz	r6, 1cafe <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1caf6:	4608      	mov	r0, r1
   1caf8:	f7ff fff2 	bl	1cae0 <net_buf_frag_last>
   1cafc:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1cafe:	6025      	str	r5, [r4, #0]
}
   1cb00:	bd70      	pop	{r4, r5, r6, pc}

0001cb02 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1cb02:	b538      	push	{r3, r4, r5, lr}
   1cb04:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1cb06:	b138      	cbz	r0, 1cb18 <net_buf_frag_add+0x16>
   1cb08:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1cb0a:	f7ff ffe9 	bl	1cae0 <net_buf_frag_last>
   1cb0e:	4629      	mov	r1, r5
   1cb10:	f7ff ffec 	bl	1caec <net_buf_frag_insert>

	return head;
   1cb14:	4620      	mov	r0, r4
}
   1cb16:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1cb18:	4608      	mov	r0, r1
   1cb1a:	f7ff ffdd 	bl	1cad8 <net_buf_ref>
   1cb1e:	e7fa      	b.n	1cb16 <net_buf_frag_add+0x14>

0001cb20 <net_buf_simple_add>:
	return buf->data + buf->len;
   1cb20:	6802      	ldr	r2, [r0, #0]
   1cb22:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1cb24:	4419      	add	r1, r3
   1cb26:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1cb28:	18d0      	adds	r0, r2, r3
   1cb2a:	4770      	bx	lr

0001cb2c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1cb2c:	b538      	push	{r3, r4, r5, lr}
   1cb2e:	460d      	mov	r5, r1
   1cb30:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cb32:	4611      	mov	r1, r2
   1cb34:	f7ff fff4 	bl	1cb20 <net_buf_simple_add>
   1cb38:	4622      	mov	r2, r4
   1cb3a:	4629      	mov	r1, r5
   1cb3c:	f7fd fa85 	bl	1a04a <memcpy>
}
   1cb40:	bd38      	pop	{r3, r4, r5, pc}

0001cb42 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1cb42:	b510      	push	{r4, lr}
   1cb44:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1cb46:	2101      	movs	r1, #1
   1cb48:	f7ff ffea 	bl	1cb20 <net_buf_simple_add>
	*u8 = val;
   1cb4c:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1cb4e:	bd10      	pop	{r4, pc}

0001cb50 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   1cb50:	b510      	push	{r4, lr}
   1cb52:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1cb54:	2102      	movs	r1, #2
   1cb56:	f7ff ffe3 	bl	1cb20 <net_buf_simple_add>
	dst[0] = val;
   1cb5a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1cb5c:	0a24      	lsrs	r4, r4, #8
   1cb5e:	7044      	strb	r4, [r0, #1]
}
   1cb60:	bd10      	pop	{r4, pc}

0001cb62 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1cb62:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1cb64:	6800      	ldr	r0, [r0, #0]
   1cb66:	1a40      	subs	r0, r0, r1
   1cb68:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1cb6a:	889a      	ldrh	r2, [r3, #4]
   1cb6c:	4411      	add	r1, r2
   1cb6e:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1cb70:	4770      	bx	lr

0001cb72 <net_buf_simple_push_u8>:

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
   1cb72:	b510      	push	{r4, lr}
   1cb74:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1cb76:	2101      	movs	r1, #1
   1cb78:	f7ff fff3 	bl	1cb62 <net_buf_simple_push>

	*data = val;
   1cb7c:	7004      	strb	r4, [r0, #0]
}
   1cb7e:	bd10      	pop	{r4, pc}

0001cb80 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1cb80:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1cb82:	8882      	ldrh	r2, [r0, #4]
   1cb84:	1a52      	subs	r2, r2, r1
   1cb86:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1cb88:	6800      	ldr	r0, [r0, #0]
   1cb8a:	4408      	add	r0, r1
   1cb8c:	6018      	str	r0, [r3, #0]
}
   1cb8e:	4770      	bx	lr

0001cb90 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1cb90:	4603      	mov	r3, r0
	void *data = buf->data;
   1cb92:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1cb94:	889a      	ldrh	r2, [r3, #4]
   1cb96:	1a52      	subs	r2, r2, r1
   1cb98:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1cb9a:	4401      	add	r1, r0
   1cb9c:	6019      	str	r1, [r3, #0]

	return data;
}
   1cb9e:	4770      	bx	lr

0001cba0 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1cba0:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1cba2:	6803      	ldr	r3, [r0, #0]
   1cba4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1cba6:	2102      	movs	r1, #2
   1cba8:	f7ff ffea 	bl	1cb80 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1cbac:	4620      	mov	r0, r4
   1cbae:	bd10      	pop	{r4, pc}

0001cbb0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1cbb0:	6802      	ldr	r2, [r0, #0]
   1cbb2:	6880      	ldr	r0, [r0, #8]
}
   1cbb4:	1a10      	subs	r0, r2, r0
   1cbb6:	4770      	bx	lr

0001cbb8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1cbb8:	b538      	push	{r3, r4, r5, lr}
   1cbba:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1cbbc:	88c5      	ldrh	r5, [r0, #6]
   1cbbe:	f7ff fff7 	bl	1cbb0 <net_buf_simple_headroom>
   1cbc2:	1a2d      	subs	r5, r5, r0
   1cbc4:	88a0      	ldrh	r0, [r4, #4]
}
   1cbc6:	1a28      	subs	r0, r5, r0
   1cbc8:	bd38      	pop	{r3, r4, r5, pc}

0001cbca <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1cbca:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1cbcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1cbd0:	0089      	lsls	r1, r1, #2
   1cbd2:	3170      	adds	r1, #112	; 0x70
}
   1cbd4:	4408      	add	r0, r1
   1cbd6:	4770      	bx	lr

0001cbd8 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1cbd8:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   1cbda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   1cbde:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1cbe2:	4770      	bx	lr

0001cbe4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1cbe4:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1cbe6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1cbea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1cbee:	4770      	bx	lr

0001cbf0 <get_status>:
{
   1cbf0:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1cbf2:	b2c9      	uxtb	r1, r1
   1cbf4:	f7ff ffe9 	bl	1cbca <get_sub_data>
   1cbf8:	6880      	ldr	r0, [r0, #8]
}
   1cbfa:	f000 0007 	and.w	r0, r0, #7
   1cbfe:	bd08      	pop	{r3, pc}

0001cc00 <set_off_state>:
	__asm__ volatile(
   1cc00:	f04f 0320 	mov.w	r3, #32
   1cc04:	f3ef 8211 	mrs	r2, BASEPRI
   1cc08:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc0c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1cc10:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1cc12:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1cc16:	d001      	beq.n	1cc1c <set_off_state+0x1c>
   1cc18:	428b      	cmp	r3, r1
   1cc1a:	d107      	bne.n	1cc2c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1cc1c:	2301      	movs	r3, #1
   1cc1e:	6003      	str	r3, [r0, #0]
	int err = 0;
   1cc20:	2000      	movs	r0, #0
	__asm__ volatile(
   1cc22:	f382 8811 	msr	BASEPRI, r2
   1cc26:	f3bf 8f6f 	isb	sy
}
   1cc2a:	4770      	bx	lr
		err = -EPERM;
   1cc2c:	f04f 30ff 	mov.w	r0, #4294967295
   1cc30:	e7f7      	b.n	1cc22 <set_off_state+0x22>

0001cc32 <set_starting_state>:
	__asm__ volatile(
   1cc32:	f04f 0320 	mov.w	r3, #32
   1cc36:	f3ef 8211 	mrs	r2, BASEPRI
   1cc3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc3e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1cc42:	6803      	ldr	r3, [r0, #0]
   1cc44:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1cc48:	f003 0307 	and.w	r3, r3, #7
   1cc4c:	2b01      	cmp	r3, #1
   1cc4e:	d008      	beq.n	1cc62 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   1cc50:	458c      	cmp	ip, r1
   1cc52:	d009      	beq.n	1cc68 <set_starting_state+0x36>
		err = -EPERM;
   1cc54:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1cc58:	f382 8811 	msr	BASEPRI, r2
   1cc5c:	f3bf 8f6f 	isb	sy
}
   1cc60:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1cc62:	6001      	str	r1, [r0, #0]
	int err = 0;
   1cc64:	2000      	movs	r0, #0
   1cc66:	e7f7      	b.n	1cc58 <set_starting_state+0x26>
		err = -EALREADY;
   1cc68:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1cc6c:	e7f4      	b.n	1cc58 <set_starting_state+0x26>

0001cc6e <set_on_state>:
	__asm__ volatile(
   1cc6e:	f04f 0320 	mov.w	r3, #32
   1cc72:	f3ef 8211 	mrs	r2, BASEPRI
   1cc76:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc7a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1cc7e:	6803      	ldr	r3, [r0, #0]
   1cc80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cc84:	f043 0302 	orr.w	r3, r3, #2
   1cc88:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1cc8a:	f382 8811 	msr	BASEPRI, r2
   1cc8e:	f3bf 8f6f 	isb	sy
}
   1cc92:	4770      	bx	lr

0001cc94 <clkstarted_handle>:
{
   1cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc96:	4606      	mov	r6, r0
   1cc98:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1cc9a:	f7ff ff96 	bl	1cbca <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1cc9e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1cca0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1cca2:	2300      	movs	r3, #0
   1cca4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1cca8:	f7ff ffe1 	bl	1cc6e <set_on_state>
	if (callback) {
   1ccac:	b11d      	cbz	r5, 1ccb6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ccae:	463a      	mov	r2, r7
   1ccb0:	4621      	mov	r1, r4
   1ccb2:	4630      	mov	r0, r6
   1ccb4:	47a8      	blx	r5
}
   1ccb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ccb8 <stop>:
{
   1ccb8:	b570      	push	{r4, r5, r6, lr}
   1ccba:	4606      	mov	r6, r0
   1ccbc:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1ccbe:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1ccc0:	4621      	mov	r1, r4
   1ccc2:	f7ff ff82 	bl	1cbca <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1ccc6:	4629      	mov	r1, r5
   1ccc8:	3008      	adds	r0, #8
   1ccca:	f7ff ff99 	bl	1cc00 <set_off_state>
	if (err < 0) {
   1ccce:	2800      	cmp	r0, #0
   1ccd0:	db06      	blt.n	1cce0 <stop+0x28>
	get_sub_config(dev, type)->stop();
   1ccd2:	4621      	mov	r1, r4
   1ccd4:	4630      	mov	r0, r6
   1ccd6:	f7ff ff7f 	bl	1cbd8 <get_sub_config>
   1ccda:	6843      	ldr	r3, [r0, #4]
   1ccdc:	4798      	blx	r3
	return 0;
   1ccde:	2000      	movs	r0, #0
}
   1cce0:	bd70      	pop	{r4, r5, r6, pc}

0001cce2 <api_stop>:
{
   1cce2:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1cce4:	2280      	movs	r2, #128	; 0x80
   1cce6:	f7ff ffe7 	bl	1ccb8 <stop>
}
   1ccea:	bd08      	pop	{r3, pc}

0001ccec <async_start>:
{
   1ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccf0:	4606      	mov	r6, r0
   1ccf2:	4690      	mov	r8, r2
   1ccf4:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1ccf6:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1ccf8:	4629      	mov	r1, r5
   1ccfa:	f7ff ff66 	bl	1cbca <get_sub_data>
   1ccfe:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1cd00:	9906      	ldr	r1, [sp, #24]
   1cd02:	3008      	adds	r0, #8
   1cd04:	f7ff ff95 	bl	1cc32 <set_starting_state>
	if (err < 0) {
   1cd08:	2800      	cmp	r0, #0
   1cd0a:	db09      	blt.n	1cd20 <async_start+0x34>
	subdata->cb = cb;
   1cd0c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1cd10:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1cd12:	4629      	mov	r1, r5
   1cd14:	4630      	mov	r0, r6
   1cd16:	f7ff ff5f 	bl	1cbd8 <get_sub_config>
   1cd1a:	6803      	ldr	r3, [r0, #0]
   1cd1c:	4798      	blx	r3
	return 0;
   1cd1e:	2000      	movs	r0, #0
}
   1cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cd24 <api_start>:
{
   1cd24:	b510      	push	{r4, lr}
   1cd26:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1cd28:	2480      	movs	r4, #128	; 0x80
   1cd2a:	9400      	str	r4, [sp, #0]
   1cd2c:	f7ff ffde 	bl	1ccec <async_start>
}
   1cd30:	b002      	add	sp, #8
   1cd32:	bd10      	pop	{r4, pc}

0001cd34 <onoff_started_callback>:
{
   1cd34:	b510      	push	{r4, lr}
   1cd36:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1cd38:	b2c9      	uxtb	r1, r1
   1cd3a:	f7ff ff53 	bl	1cbe4 <get_onoff_manager>
	notify(mgr, 0);
   1cd3e:	2100      	movs	r1, #0
   1cd40:	47a0      	blx	r4
}
   1cd42:	bd10      	pop	{r4, pc}

0001cd44 <hfclk_start>:
{
   1cd44:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1cd46:	2001      	movs	r0, #1
   1cd48:	f001 faa4 	bl	1e294 <nrfx_clock_start>
}
   1cd4c:	bd08      	pop	{r3, pc}

0001cd4e <hfclkaudio_start>:
{
   1cd4e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1cd50:	2003      	movs	r0, #3
   1cd52:	f001 fa9f 	bl	1e294 <nrfx_clock_start>
}
   1cd56:	bd08      	pop	{r3, pc}

0001cd58 <hfclk192m_start>:
{
   1cd58:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1cd5a:	2002      	movs	r0, #2
   1cd5c:	f001 fa9a 	bl	1e294 <nrfx_clock_start>
}
   1cd60:	bd08      	pop	{r3, pc}

0001cd62 <lfclk_start>:
{
   1cd62:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1cd64:	2000      	movs	r0, #0
   1cd66:	f001 fa95 	bl	1e294 <nrfx_clock_start>
}
   1cd6a:	bd08      	pop	{r3, pc}

0001cd6c <hfclk_stop>:
{
   1cd6c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1cd6e:	2001      	movs	r0, #1
   1cd70:	f001 fb05 	bl	1e37e <nrfx_clock_stop>
}
   1cd74:	bd08      	pop	{r3, pc}

0001cd76 <hfclkaudio_stop>:
{
   1cd76:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1cd78:	2003      	movs	r0, #3
   1cd7a:	f001 fb00 	bl	1e37e <nrfx_clock_stop>
}
   1cd7e:	bd08      	pop	{r3, pc}

0001cd80 <hfclk192m_stop>:
{
   1cd80:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1cd82:	2002      	movs	r0, #2
   1cd84:	f001 fafb 	bl	1e37e <nrfx_clock_stop>
}
   1cd88:	bd08      	pop	{r3, pc}

0001cd8a <lfclk_stop>:
{
   1cd8a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1cd8c:	2000      	movs	r0, #0
   1cd8e:	f001 faf6 	bl	1e37e <nrfx_clock_stop>
}
   1cd92:	bd08      	pop	{r3, pc}

0001cd94 <blocking_start_callback>:
{
   1cd94:	b508      	push	{r3, lr}
   1cd96:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1cd98:	f7f9 fb08 	bl	163ac <z_impl_k_sem_give>
}
   1cd9c:	bd08      	pop	{r3, pc}

0001cd9e <wait>:
{
   1cd9e:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1cda0:	f002 fb41 	bl	1f426 <k_is_in_isr>
   1cda4:	b100      	cbz	r0, 1cda8 <wait+0xa>
}
   1cda6:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1cda8:	2042      	movs	r0, #66	; 0x42
   1cdaa:	2100      	movs	r1, #0
   1cdac:	f7fa f8ca 	bl	16f44 <z_impl_k_sleep>
   1cdb0:	e7f9      	b.n	1cda6 <wait+0x8>

0001cdb2 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cdb2:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   1cdb6:	0580      	lsls	r0, r0, #22
   1cdb8:	0d80      	lsrs	r0, r0, #22
   1cdba:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   1cdbe:	d033      	beq.n	1ce28 <get_drive+0x76>
   1cdc0:	d816      	bhi.n	1cdf0 <get_drive+0x3e>
   1cdc2:	2806      	cmp	r0, #6
   1cdc4:	d02c      	beq.n	1ce20 <get_drive+0x6e>
   1cdc6:	d906      	bls.n	1cdd6 <get_drive+0x24>
   1cdc8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1cdcc:	d10d      	bne.n	1cdea <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   1cdce:	2301      	movs	r3, #1
   1cdd0:	700b      	strb	r3, [r1, #0]
	return 0;
   1cdd2:	2000      	movs	r0, #0
		break;
   1cdd4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cdd6:	b300      	cbz	r0, 1ce1a <get_drive+0x68>
   1cdd8:	2802      	cmp	r0, #2
   1cdda:	d103      	bne.n	1cde4 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   1cddc:	2304      	movs	r3, #4
   1cdde:	700b      	strb	r3, [r1, #0]
	return 0;
   1cde0:	2000      	movs	r0, #0
		break;
   1cde2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cde4:	f06f 0015 	mvn.w	r0, #21
   1cde8:	4770      	bx	lr
   1cdea:	f06f 0015 	mvn.w	r0, #21
   1cdee:	4770      	bx	lr
   1cdf0:	f240 2302 	movw	r3, #514	; 0x202
   1cdf4:	4298      	cmp	r0, r3
   1cdf6:	d01b      	beq.n	1ce30 <get_drive+0x7e>
   1cdf8:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   1cdfc:	d103      	bne.n	1ce06 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   1cdfe:	2303      	movs	r3, #3
   1ce00:	700b      	strb	r3, [r1, #0]
	return 0;
   1ce02:	2000      	movs	r0, #0
		break;
   1ce04:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ce06:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1ce0a:	d103      	bne.n	1ce14 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   1ce0c:	2302      	movs	r3, #2
   1ce0e:	700b      	strb	r3, [r1, #0]
	return 0;
   1ce10:	2000      	movs	r0, #0
		break;
   1ce12:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1ce14:	f06f 0015 	mvn.w	r0, #21
   1ce18:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1ce1a:	2000      	movs	r0, #0
   1ce1c:	7008      	strb	r0, [r1, #0]
		break;
   1ce1e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1ce20:	2306      	movs	r3, #6
   1ce22:	700b      	strb	r3, [r1, #0]
	return 0;
   1ce24:	2000      	movs	r0, #0
		break;
   1ce26:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1ce28:	2307      	movs	r3, #7
   1ce2a:	700b      	strb	r3, [r1, #0]
	return 0;
   1ce2c:	2000      	movs	r0, #0
		break;
   1ce2e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   1ce30:	2305      	movs	r3, #5
   1ce32:	700b      	strb	r3, [r1, #0]
	return 0;
   1ce34:	2000      	movs	r0, #0
}
   1ce36:	4770      	bx	lr

0001ce38 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1ce38:	f010 0f10 	tst.w	r0, #16
   1ce3c:	d104      	bne.n	1ce48 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   1ce3e:	f010 0f20 	tst.w	r0, #32
   1ce42:	d103      	bne.n	1ce4c <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1ce44:	2000      	movs	r0, #0
   1ce46:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1ce48:	2003      	movs	r0, #3
   1ce4a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1ce4c:	2001      	movs	r0, #1
}
   1ce4e:	4770      	bx	lr

0001ce50 <gpio_nrfx_port_get_raw>:
	return port->config;
   1ce50:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce52:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1ce54:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1ce56:	600b      	str	r3, [r1, #0]
}
   1ce58:	2000      	movs	r0, #0
   1ce5a:	4770      	bx	lr

0001ce5c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1ce5c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce5e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1ce60:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1ce64:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1ce68:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   1ce6a:	60d9      	str	r1, [r3, #12]
}
   1ce6c:	2000      	movs	r0, #0
   1ce6e:	4770      	bx	lr

0001ce70 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1ce70:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce72:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1ce74:	6099      	str	r1, [r3, #8]
}
   1ce76:	2000      	movs	r0, #0
   1ce78:	4770      	bx	lr

0001ce7a <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1ce7a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce7c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1ce7e:	60d9      	str	r1, [r3, #12]
}
   1ce80:	2000      	movs	r0, #0
   1ce82:	4770      	bx	lr

0001ce84 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1ce84:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ce86:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1ce88:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1ce8a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1ce8e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1ce90:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   1ce92:	60d3      	str	r3, [r2, #12]
}
   1ce94:	2000      	movs	r0, #0
   1ce96:	4770      	bx	lr

0001ce98 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ce98:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1ce9c:	d007      	beq.n	1ceae <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1ce9e:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1cea2:	d00d      	beq.n	1cec0 <get_trigger+0x28>
   1cea4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1cea8:	d008      	beq.n	1cebc <get_trigger+0x24>
   1ceaa:	2001      	movs	r0, #1
}
   1ceac:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1ceae:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1ceb2:	d001      	beq.n	1ceb8 <get_trigger+0x20>
   1ceb4:	2005      	movs	r0, #5
   1ceb6:	4770      	bx	lr
   1ceb8:	2004      	movs	r0, #4
   1ceba:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1cebc:	2002      	movs	r0, #2
   1cebe:	4770      	bx	lr
   1cec0:	2003      	movs	r0, #3
   1cec2:	4770      	bx	lr

0001cec4 <gpio_nrfx_manage_callback>:
{
   1cec4:	b410      	push	{r4}
	return port->data;
   1cec6:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cec8:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
   1cecc:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1cece:	b1fb      	cbz	r3, 1cf10 <gpio_nrfx_manage_callback+0x4c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ced0:	2000      	movs	r0, #0
   1ced2:	e00d      	b.n	1cef0 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
   1ced4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1ced6:	6063      	str	r3, [r4, #4]
	return list->tail;
   1ced8:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cedc:	4281      	cmp	r1, r0
   1cede:	d112      	bne.n	1cf06 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   1cee0:	f8cc 3004 	str.w	r3, [ip, #4]
}
   1cee4:	e00f      	b.n	1cf06 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   1cee6:	f8cc 0004 	str.w	r0, [ip, #4]
}
   1ceea:	e00c      	b.n	1cf06 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ceec:	4618      	mov	r0, r3
   1ceee:	681b      	ldr	r3, [r3, #0]
   1cef0:	b163      	cbz	r3, 1cf0c <gpio_nrfx_manage_callback+0x48>
   1cef2:	4299      	cmp	r1, r3
   1cef4:	d1fa      	bne.n	1ceec <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
   1cef6:	2800      	cmp	r0, #0
   1cef8:	d0ec      	beq.n	1ced4 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   1cefa:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1cefc:	6003      	str	r3, [r0, #0]
	return list->tail;
   1cefe:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cf02:	4299      	cmp	r1, r3
   1cf04:	d0ef      	beq.n	1cee6 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
   1cf06:	2300      	movs	r3, #0
   1cf08:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cf0a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1cf0c:	b903      	cbnz	r3, 1cf10 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
   1cf0e:	b162      	cbz	r2, 1cf2a <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1cf10:	b172      	cbz	r2, 1cf30 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
   1cf12:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1cf14:	600b      	str	r3, [r1, #0]
	list->head = node;
   1cf16:	6061      	str	r1, [r4, #4]
	return list->tail;
   1cf18:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cf1c:	b10b      	cbz	r3, 1cf22 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1cf1e:	2000      	movs	r0, #0
   1cf20:	e007      	b.n	1cf32 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
   1cf22:	f8cc 1004 	str.w	r1, [ip, #4]
   1cf26:	2000      	movs	r0, #0
}
   1cf28:	e003      	b.n	1cf32 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
   1cf2a:	f06f 0015 	mvn.w	r0, #21
   1cf2e:	e000      	b.n	1cf32 <gpio_nrfx_manage_callback+0x6e>
	return 0;
   1cf30:	2000      	movs	r0, #0
}
   1cf32:	bc10      	pop	{r4}
   1cf34:	4770      	bx	lr

0001cf36 <nrfx_gpio_handler>:
{
   1cf36:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   1cf38:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1cf3c:	0940      	lsrs	r0, r0, #5
   1cf3e:	f7f2 fc31 	bl	f7a4 <get_dev>
	if (port == NULL) {
   1cf42:	b1d8      	cbz	r0, 1cf7c <nrfx_gpio_handler+0x46>
   1cf44:	4606      	mov	r6, r0
	return port->data;
   1cf46:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1cf48:	2501      	movs	r5, #1
   1cf4a:	40a5      	lsls	r5, r4
	return list->head;
   1cf4c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cf4e:	b119      	cbz	r1, 1cf58 <nrfx_gpio_handler+0x22>
   1cf50:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cf52:	b149      	cbz	r1, 1cf68 <nrfx_gpio_handler+0x32>
	return node->next;
   1cf54:	680c      	ldr	r4, [r1, #0]
   1cf56:	e007      	b.n	1cf68 <nrfx_gpio_handler+0x32>
   1cf58:	460c      	mov	r4, r1
   1cf5a:	e005      	b.n	1cf68 <nrfx_gpio_handler+0x32>
   1cf5c:	b164      	cbz	r4, 1cf78 <nrfx_gpio_handler+0x42>
   1cf5e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cf60:	b104      	cbz	r4, 1cf64 <nrfx_gpio_handler+0x2e>
	return node->next;
   1cf62:	6823      	ldr	r3, [r4, #0]
   1cf64:	4621      	mov	r1, r4
   1cf66:	461c      	mov	r4, r3
   1cf68:	b141      	cbz	r1, 1cf7c <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   1cf6a:	688a      	ldr	r2, [r1, #8]
   1cf6c:	402a      	ands	r2, r5
   1cf6e:	d0f5      	beq.n	1cf5c <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1cf70:	684b      	ldr	r3, [r1, #4]
   1cf72:	4630      	mov	r0, r6
   1cf74:	4798      	blx	r3
   1cf76:	e7f1      	b.n	1cf5c <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cf78:	4623      	mov	r3, r4
   1cf7a:	e7f3      	b.n	1cf64 <nrfx_gpio_handler+0x2e>
}
   1cf7c:	bd70      	pop	{r4, r5, r6, pc}

0001cf7e <irq_connect1>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   1cf7e:	b508      	push	{r3, lr}
   1cf80:	2200      	movs	r2, #0
   1cf82:	2101      	movs	r1, #1
   1cf84:	2009      	movs	r0, #9
   1cf86:	f7e8 fb53 	bl	5630 <z_arm_irq_priority_set>
   1cf8a:	bd08      	pop	{r3, pc}

0001cf8c <adxl362_reg_access>:
{
   1cf8c:	b510      	push	{r4, lr}
   1cf8e:	b08a      	sub	sp, #40	; 0x28
   1cf90:	468c      	mov	ip, r1
	const struct adxl362_config *cfg = dev->config;
   1cf92:	6841      	ldr	r1, [r0, #4]
	uint8_t access[2] = { cmd, reg_addr };
   1cf94:	f88d c024 	strb.w	ip, [sp, #36]	; 0x24
   1cf98:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	const struct spi_buf buf[2] = {
   1cf9c:	aa09      	add	r2, sp, #36	; 0x24
   1cf9e:	9205      	str	r2, [sp, #20]
   1cfa0:	2202      	movs	r2, #2
   1cfa2:	9206      	str	r2, [sp, #24]
   1cfa4:	9307      	str	r3, [sp, #28]
   1cfa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cfa8:	9308      	str	r3, [sp, #32]
	struct spi_buf_set tx = {
   1cfaa:	2300      	movs	r3, #0
   1cfac:	9303      	str	r3, [sp, #12]
   1cfae:	9304      	str	r3, [sp, #16]
   1cfb0:	ab05      	add	r3, sp, #20
   1cfb2:	9303      	str	r3, [sp, #12]
	if (cmd == ADXL362_READ_REG) {
   1cfb4:	f1bc 0f0b 	cmp.w	ip, #11
   1cfb8:	d00a      	beq.n	1cfd0 <adxl362_reg_access+0x44>
	tx.count = 2;
   1cfba:	2302      	movs	r3, #2
   1cfbc:	9304      	str	r3, [sp, #16]
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
   1cfbe:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   1cfc2:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1cfc4:	681c      	ldr	r4, [r3, #0]
   1cfc6:	2300      	movs	r3, #0
   1cfc8:	aa03      	add	r2, sp, #12
   1cfca:	47a0      	blx	r4
}
   1cfcc:	b00a      	add	sp, #40	; 0x28
   1cfce:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
   1cfd0:	9301      	str	r3, [sp, #4]
   1cfd2:	9202      	str	r2, [sp, #8]
		tx.count = 1;
   1cfd4:	2301      	movs	r3, #1
   1cfd6:	9304      	str	r3, [sp, #16]
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   1cfd8:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_driver_api *api =
   1cfdc:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   1cfde:	681c      	ldr	r4, [r3, #0]
   1cfe0:	ab01      	add	r3, sp, #4
   1cfe2:	aa03      	add	r2, sp, #12
   1cfe4:	47a0      	blx	r4
   1cfe6:	e7f1      	b.n	1cfcc <adxl362_reg_access+0x40>

0001cfe8 <adxl362_software_reset>:
{
   1cfe8:	b500      	push	{lr}
   1cfea:	b085      	sub	sp, #20
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   1cfec:	2352      	movs	r3, #82	; 0x52
   1cfee:	f8ad 300e 	strh.w	r3, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1cff2:	2301      	movs	r3, #1
   1cff4:	9300      	str	r3, [sp, #0]
   1cff6:	f10d 030e 	add.w	r3, sp, #14
   1cffa:	221f      	movs	r2, #31
   1cffc:	210a      	movs	r1, #10
   1cffe:	f7ff ffc5 	bl	1cf8c <adxl362_reg_access>
}
   1d002:	b005      	add	sp, #20
   1d004:	f85d fb04 	ldr.w	pc, [sp], #4

0001d008 <adxl362_set_range>:
{
   1d008:	b570      	push	{r4, r5, r6, lr}
   1d00a:	b084      	sub	sp, #16
   1d00c:	4604      	mov	r4, r0
   1d00e:	460d      	mov	r5, r1
	struct adxl362_data *adxl362_data = dev->data;
   1d010:	6906      	ldr	r6, [r0, #16]
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   1d012:	2301      	movs	r3, #1
   1d014:	9300      	str	r3, [sp, #0]
   1d016:	f10d 030f 	add.w	r3, sp, #15
   1d01a:	222c      	movs	r2, #44	; 0x2c
   1d01c:	210b      	movs	r1, #11
   1d01e:	f7ff ffb5 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d022:	b108      	cbz	r0, 1d028 <adxl362_set_range+0x20>
}
   1d024:	b004      	add	sp, #16
   1d026:	bd70      	pop	{r4, r5, r6, pc}
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   1d028:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d02c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_RANGE(range);
   1d030:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   1d034:	b2db      	uxtb	r3, r3
   1d036:	f8ad 300c 	strh.w	r3, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d03a:	2301      	movs	r3, #1
   1d03c:	9300      	str	r3, [sp, #0]
   1d03e:	ab03      	add	r3, sp, #12
   1d040:	222c      	movs	r2, #44	; 0x2c
   1d042:	210a      	movs	r1, #10
   1d044:	4620      	mov	r0, r4
   1d046:	f7ff ffa1 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d04a:	2800      	cmp	r0, #0
   1d04c:	d1ea      	bne.n	1d024 <adxl362_set_range+0x1c>
	adxl362_data->selected_range = range;
   1d04e:	7235      	strb	r5, [r6, #8]
	return 0;
   1d050:	e7e8      	b.n	1d024 <adxl362_set_range+0x1c>

0001d052 <adxl362_set_output_rate>:
{
   1d052:	b570      	push	{r4, r5, r6, lr}
   1d054:	b084      	sub	sp, #16
   1d056:	4605      	mov	r5, r0
   1d058:	460c      	mov	r4, r1
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   1d05a:	2601      	movs	r6, #1
   1d05c:	9600      	str	r6, [sp, #0]
   1d05e:	f10d 030f 	add.w	r3, sp, #15
   1d062:	222c      	movs	r2, #44	; 0x2c
   1d064:	210b      	movs	r1, #11
   1d066:	f7ff ff91 	bl	1cf8c <adxl362_reg_access>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   1d06a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1d06e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_ODR(out_rate);
   1d072:	f004 0407 	and.w	r4, r4, #7
	adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   1d076:	430c      	orrs	r4, r1
   1d078:	f8ad 400c 	strh.w	r4, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d07c:	9600      	str	r6, [sp, #0]
   1d07e:	ab03      	add	r3, sp, #12
   1d080:	222c      	movs	r2, #44	; 0x2c
   1d082:	210a      	movs	r1, #10
   1d084:	4628      	mov	r0, r5
   1d086:	f7ff ff81 	bl	1cf8c <adxl362_reg_access>
}
   1d08a:	2000      	movs	r0, #0
   1d08c:	b004      	add	sp, #16
   1d08e:	bd70      	pop	{r4, r5, r6, pc}

0001d090 <adxl362_attr_set_thresh>:
	uint16_t threshold = val->val1;
   1d090:	881b      	ldrh	r3, [r3, #0]
	if (chan != SENSOR_CHAN_ACCEL_X &&
   1d092:	2902      	cmp	r1, #2
   1d094:	d817      	bhi.n	1d0c6 <adxl362_attr_set_thresh+0x36>
	if (threshold > 2047) {
   1d096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1d09a:	d217      	bcs.n	1d0cc <adxl362_attr_set_thresh+0x3c>
{
   1d09c:	b500      	push	{lr}
   1d09e:	b085      	sub	sp, #20
	if (attr == SENSOR_ATTR_UPPER_THRESH) {
   1d0a0:	2a02      	cmp	r2, #2
   1d0a2:	d00e      	beq.n	1d0c2 <adxl362_attr_set_thresh+0x32>
		reg = ADXL362_REG_THRESH_INACT_L;
   1d0a4:	2223      	movs	r2, #35	; 0x23
	ret = adxl362_set_reg(dev, (threshold & 0x7FF), reg, 2);
   1d0a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1d0aa:	f8ad 300e 	strh.w	r3, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d0ae:	2302      	movs	r3, #2
   1d0b0:	9300      	str	r3, [sp, #0]
   1d0b2:	f10d 030e 	add.w	r3, sp, #14
   1d0b6:	210a      	movs	r1, #10
   1d0b8:	f7ff ff68 	bl	1cf8c <adxl362_reg_access>
}
   1d0bc:	b005      	add	sp, #20
   1d0be:	f85d fb04 	ldr.w	pc, [sp], #4
		reg = ADXL362_REG_THRESH_ACT_L;
   1d0c2:	2220      	movs	r2, #32
   1d0c4:	e7ef      	b.n	1d0a6 <adxl362_attr_set_thresh+0x16>
		return -EINVAL;
   1d0c6:	f06f 0015 	mvn.w	r0, #21
   1d0ca:	4770      	bx	lr
		return -EINVAL;
   1d0cc:	f06f 0015 	mvn.w	r0, #21
}
   1d0d0:	4770      	bx	lr

0001d0d2 <adxl362_attr_set>:
{
   1d0d2:	b510      	push	{r4, lr}
   1d0d4:	b084      	sub	sp, #16
	switch (attr) {
   1d0d6:	2a02      	cmp	r2, #2
   1d0d8:	d90f      	bls.n	1d0fa <adxl362_attr_set+0x28>
   1d0da:	2a05      	cmp	r2, #5
   1d0dc:	d10f      	bne.n	1d0fe <adxl362_attr_set+0x2c>
		uint16_t timeout = val->val1;
   1d0de:	881b      	ldrh	r3, [r3, #0]
		return adxl362_set_reg(dev, (timeout & 0x7FF), ADXL362_REG_TIME_INACT_L, 2);
   1d0e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1d0e4:	f8ad 300e 	strh.w	r3, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d0e8:	2302      	movs	r3, #2
   1d0ea:	9300      	str	r3, [sp, #0]
   1d0ec:	f10d 030e 	add.w	r3, sp, #14
   1d0f0:	2225      	movs	r2, #37	; 0x25
   1d0f2:	210a      	movs	r1, #10
   1d0f4:	f7ff ff4a 	bl	1cf8c <adxl362_reg_access>
		return adxl362_set_reg(dev, (timeout & 0x7FF), ADXL362_REG_TIME_INACT_L, 2);
   1d0f8:	e008      	b.n	1d10c <adxl362_attr_set+0x3a>
	switch (attr) {
   1d0fa:	b214      	sxth	r4, r2
   1d0fc:	b924      	cbnz	r4, 1d108 <adxl362_attr_set+0x36>
	switch (chan) {
   1d0fe:	2903      	cmp	r1, #3
   1d100:	d806      	bhi.n	1d110 <adxl362_attr_set+0x3e>
		return axl362_acc_config(dev, chan, attr, val);
   1d102:	f7e3 fc65 	bl	9d0 <axl362_acc_config>
   1d106:	e001      	b.n	1d10c <adxl362_attr_set+0x3a>
		return adxl362_attr_set_thresh(dev, chan, attr, val);
   1d108:	f7ff ffc2 	bl	1d090 <adxl362_attr_set_thresh>
}
   1d10c:	b004      	add	sp, #16
   1d10e:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1d110:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d114:	e7fa      	b.n	1d10c <adxl362_attr_set+0x3a>

0001d116 <adxl362_fifo_setup>:
{
   1d116:	b530      	push	{r4, r5, lr}
   1d118:	b085      	sub	sp, #20
   1d11a:	4604      	mov	r4, r0
   1d11c:	4615      	mov	r5, r2
	write_val = ADXL362_FIFO_CTL_FIFO_MODE(mode) |
   1d11e:	f001 0103 	and.w	r1, r1, #3
   1d122:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
   1d126:	b249      	sxtb	r1, r1
		   (en_temp_read * ADXL362_FIFO_CTL_FIFO_TEMP) |
   1d128:	f041 0108 	orr.w	r1, r1, #8
	ret = adxl362_set_reg(dev, write_val, ADXL362_REG_FIFO_CTL, 1);
   1d12c:	b2c9      	uxtb	r1, r1
   1d12e:	f8ad 100e 	strh.w	r1, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d132:	2301      	movs	r3, #1
   1d134:	9300      	str	r3, [sp, #0]
   1d136:	f10d 030e 	add.w	r3, sp, #14
   1d13a:	2228      	movs	r2, #40	; 0x28
   1d13c:	210a      	movs	r1, #10
   1d13e:	f7ff ff25 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d142:	b108      	cbz	r0, 1d148 <adxl362_fifo_setup+0x32>
}
   1d144:	b005      	add	sp, #20
   1d146:	bd30      	pop	{r4, r5, pc}
	ret = adxl362_set_reg(dev, water_mark_lvl, ADXL362_REG_FIFO_SAMPLES, 1);
   1d148:	f8ad 500e 	strh.w	r5, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d14c:	2301      	movs	r3, #1
   1d14e:	9300      	str	r3, [sp, #0]
   1d150:	f10d 030e 	add.w	r3, sp, #14
   1d154:	2229      	movs	r2, #41	; 0x29
   1d156:	210a      	movs	r1, #10
   1d158:	4620      	mov	r0, r4
   1d15a:	f7ff ff17 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d15e:	e7f1      	b.n	1d144 <adxl362_fifo_setup+0x2e>

0001d160 <adxl362_setup_activity_detection>:
{
   1d160:	b570      	push	{r4, r5, r6, lr}
   1d162:	b084      	sub	sp, #16
   1d164:	4604      	mov	r4, r0
   1d166:	460e      	mov	r6, r1
   1d168:	461d      	mov	r5, r3
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   1d16a:	f3c2 020a 	ubfx	r2, r2, #0, #11
   1d16e:	f8ad 200c 	strh.w	r2, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d172:	2302      	movs	r3, #2
   1d174:	9300      	str	r3, [sp, #0]
   1d176:	ab03      	add	r3, sp, #12
   1d178:	2220      	movs	r2, #32
   1d17a:	210a      	movs	r1, #10
   1d17c:	f7ff ff06 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d180:	4603      	mov	r3, r0
   1d182:	b110      	cbz	r0, 1d18a <adxl362_setup_activity_detection+0x2a>
}
   1d184:	4618      	mov	r0, r3
   1d186:	b004      	add	sp, #16
   1d188:	bd70      	pop	{r4, r5, r6, pc}
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_ACT, 1);
   1d18a:	f8ad 500c 	strh.w	r5, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d18e:	2301      	movs	r3, #1
   1d190:	9300      	str	r3, [sp, #0]
   1d192:	ab03      	add	r3, sp, #12
   1d194:	2222      	movs	r2, #34	; 0x22
   1d196:	210a      	movs	r1, #10
   1d198:	4620      	mov	r0, r4
   1d19a:	f7ff fef7 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d19e:	4603      	mov	r3, r0
   1d1a0:	2800      	cmp	r0, #0
   1d1a2:	d1ef      	bne.n	1d184 <adxl362_setup_activity_detection+0x24>
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   1d1a4:	2301      	movs	r3, #1
   1d1a6:	9300      	str	r3, [sp, #0]
   1d1a8:	f10d 030f 	add.w	r3, sp, #15
   1d1ac:	2227      	movs	r2, #39	; 0x27
   1d1ae:	210b      	movs	r1, #11
   1d1b0:	4620      	mov	r0, r4
   1d1b2:	f7ff feeb 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d1b6:	4603      	mov	r3, r0
   1d1b8:	2800      	cmp	r0, #0
   1d1ba:	d1e3      	bne.n	1d184 <adxl362_setup_activity_detection+0x24>
	new_act_inact_reg = old_act_inact_reg & ~ADXL362_ACT_INACT_CTL_ACT_REF;
   1d1bc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1d1c0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
	new_act_inact_reg |= ADXL362_ACT_INACT_CTL_ACT_EN |
   1d1c4:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
   1d1c8:	b2f6      	uxtb	r6, r6
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   1d1ca:	f046 0601 	orr.w	r6, r6, #1
   1d1ce:	f8ad 600c 	strh.w	r6, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d1d2:	2301      	movs	r3, #1
   1d1d4:	9300      	str	r3, [sp, #0]
   1d1d6:	ab03      	add	r3, sp, #12
   1d1d8:	2227      	movs	r2, #39	; 0x27
   1d1da:	210a      	movs	r1, #10
   1d1dc:	4620      	mov	r0, r4
   1d1de:	f7ff fed5 	bl	1cf8c <adxl362_reg_access>
   1d1e2:	4603      	mov	r3, r0
	if (ret) {
   1d1e4:	e7ce      	b.n	1d184 <adxl362_setup_activity_detection+0x24>

0001d1e6 <adxl362_setup_inactivity_detection>:
{
   1d1e6:	b570      	push	{r4, r5, r6, lr}
   1d1e8:	b084      	sub	sp, #16
   1d1ea:	4604      	mov	r4, r0
   1d1ec:	460e      	mov	r6, r1
   1d1ee:	461d      	mov	r5, r3
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   1d1f0:	f3c2 020a 	ubfx	r2, r2, #0, #11
   1d1f4:	f8ad 200c 	strh.w	r2, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d1f8:	2302      	movs	r3, #2
   1d1fa:	9300      	str	r3, [sp, #0]
   1d1fc:	ab03      	add	r3, sp, #12
   1d1fe:	2223      	movs	r2, #35	; 0x23
   1d200:	210a      	movs	r1, #10
   1d202:	f7ff fec3 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d206:	4603      	mov	r3, r0
   1d208:	b110      	cbz	r0, 1d210 <adxl362_setup_inactivity_detection+0x2a>
}
   1d20a:	4618      	mov	r0, r3
   1d20c:	b004      	add	sp, #16
   1d20e:	bd70      	pop	{r4, r5, r6, pc}
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_INACT_L, 2);
   1d210:	f8ad 500c 	strh.w	r5, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d214:	2302      	movs	r3, #2
   1d216:	9300      	str	r3, [sp, #0]
   1d218:	ab03      	add	r3, sp, #12
   1d21a:	2225      	movs	r2, #37	; 0x25
   1d21c:	210a      	movs	r1, #10
   1d21e:	4620      	mov	r0, r4
   1d220:	f7ff feb4 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d224:	4603      	mov	r3, r0
   1d226:	2800      	cmp	r0, #0
   1d228:	d1ef      	bne.n	1d20a <adxl362_setup_inactivity_detection+0x24>
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   1d22a:	2301      	movs	r3, #1
   1d22c:	9300      	str	r3, [sp, #0]
   1d22e:	f10d 030f 	add.w	r3, sp, #15
   1d232:	2227      	movs	r2, #39	; 0x27
   1d234:	210b      	movs	r1, #11
   1d236:	4620      	mov	r0, r4
   1d238:	f7ff fea8 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d23c:	4603      	mov	r3, r0
   1d23e:	2800      	cmp	r0, #0
   1d240:	d1e3      	bne.n	1d20a <adxl362_setup_inactivity_detection+0x24>
	new_act_inact_reg = old_act_inact_reg &
   1d242:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1d246:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
	new_act_inact_reg |= ADXL362_ACT_INACT_CTL_INACT_EN |
   1d24a:	ea41 06c6 	orr.w	r6, r1, r6, lsl #3
   1d24e:	b2f6      	uxtb	r6, r6
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   1d250:	f046 0604 	orr.w	r6, r6, #4
   1d254:	f8ad 600c 	strh.w	r6, [sp, #12]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d258:	2301      	movs	r3, #1
   1d25a:	9300      	str	r3, [sp, #0]
   1d25c:	ab03      	add	r3, sp, #12
   1d25e:	2227      	movs	r2, #39	; 0x27
   1d260:	210a      	movs	r1, #10
   1d262:	4620      	mov	r0, r4
   1d264:	f7ff fe92 	bl	1cf8c <adxl362_reg_access>
   1d268:	4603      	mov	r3, r0
	if (ret) {
   1d26a:	e7ce      	b.n	1d20a <adxl362_setup_inactivity_detection+0x24>

0001d26c <adxl362_sample_fetch>:
{
   1d26c:	b510      	push	{r4, lr}
   1d26e:	b084      	sub	sp, #16
	struct adxl362_data *data = dev->data;
   1d270:	6904      	ldr	r4, [r0, #16]
	return adxl362_reg_access(dev, ADXL362_READ_REG,
   1d272:	2308      	movs	r3, #8
   1d274:	9300      	str	r3, [sp, #0]
   1d276:	446b      	add	r3, sp
   1d278:	220e      	movs	r2, #14
   1d27a:	210b      	movs	r1, #11
   1d27c:	f7ff fe86 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d280:	b958      	cbnz	r0, 1d29a <adxl362_sample_fetch+0x2e>
	data->acc_x = sys_le16_to_cpu(buf[0]);
   1d282:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
   1d286:	8023      	strh	r3, [r4, #0]
	data->acc_y = sys_le16_to_cpu(buf[1]);
   1d288:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
   1d28c:	8063      	strh	r3, [r4, #2]
	data->acc_z = sys_le16_to_cpu(buf[2]);
   1d28e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   1d292:	80a3      	strh	r3, [r4, #4]
	data->temp = sys_le16_to_cpu(buf[3]);
   1d294:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
   1d298:	80e3      	strh	r3, [r4, #6]
}
   1d29a:	b004      	add	sp, #16
   1d29c:	bd10      	pop	{r4, pc}

0001d29e <adxl362_channel_get>:
{
   1d29e:	b570      	push	{r4, r5, r6, lr}
   1d2a0:	4614      	mov	r4, r2
	struct adxl362_data *data = dev->data;
   1d2a2:	6905      	ldr	r5, [r0, #16]
	switch (chan) {
   1d2a4:	290c      	cmp	r1, #12
   1d2a6:	d835      	bhi.n	1d314 <adxl362_channel_get+0x76>
   1d2a8:	e8df f001 	tbb	[pc, r1]
   1d2ac:	1f170f07 	.word	0x1f170f07
   1d2b0:	34343434 	.word	0x34343434
   1d2b4:	34343434 	.word	0x34343434
   1d2b8:	2d          	.byte	0x2d
   1d2b9:	00          	.byte	0x00
		adxl362_accel_convert(val, data->acc_x, data->selected_range);
   1d2ba:	7a2a      	ldrb	r2, [r5, #8]
   1d2bc:	f9b5 1000 	ldrsh.w	r1, [r5]
   1d2c0:	4620      	mov	r0, r4
   1d2c2:	f7f2 ff31 	bl	10128 <adxl362_accel_convert>
	return 0;
   1d2c6:	2000      	movs	r0, #0
		break;
   1d2c8:	e026      	b.n	1d318 <adxl362_channel_get+0x7a>
		adxl362_accel_convert(val, data->acc_y, data->selected_range);
   1d2ca:	7a2a      	ldrb	r2, [r5, #8]
   1d2cc:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   1d2d0:	4620      	mov	r0, r4
   1d2d2:	f7f2 ff29 	bl	10128 <adxl362_accel_convert>
	return 0;
   1d2d6:	2000      	movs	r0, #0
		break;
   1d2d8:	e01e      	b.n	1d318 <adxl362_channel_get+0x7a>
		adxl362_accel_convert(val, data->acc_z,  data->selected_range);
   1d2da:	7a2a      	ldrb	r2, [r5, #8]
   1d2dc:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   1d2e0:	4620      	mov	r0, r4
   1d2e2:	f7f2 ff21 	bl	10128 <adxl362_accel_convert>
	return 0;
   1d2e6:	2000      	movs	r0, #0
		break;
   1d2e8:	e016      	b.n	1d318 <adxl362_channel_get+0x7a>
	switch (chan) {
   1d2ea:	2600      	movs	r6, #0
		for (size_t i = 0; i < 3; i++) {
   1d2ec:	2e02      	cmp	r6, #2
   1d2ee:	d808      	bhi.n	1d302 <adxl362_channel_get+0x64>
			adxl362_accel_convert(&val[i], data->acc_xyz[i], data->selected_range);
   1d2f0:	7a2a      	ldrb	r2, [r5, #8]
   1d2f2:	f935 1016 	ldrsh.w	r1, [r5, r6, lsl #1]
   1d2f6:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
   1d2fa:	f7f2 ff15 	bl	10128 <adxl362_accel_convert>
		for (size_t i = 0; i < 3; i++) {
   1d2fe:	3601      	adds	r6, #1
   1d300:	e7f4      	b.n	1d2ec <adxl362_channel_get+0x4e>
	return 0;
   1d302:	2000      	movs	r0, #0
   1d304:	e008      	b.n	1d318 <adxl362_channel_get+0x7a>
		adxl362_temp_convert(val, data->temp);
   1d306:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
   1d30a:	4610      	mov	r0, r2
   1d30c:	f7f2 ff3a 	bl	10184 <adxl362_temp_convert>
	return 0;
   1d310:	2000      	movs	r0, #0
		break;
   1d312:	e001      	b.n	1d318 <adxl362_channel_get+0x7a>
	switch (chan) {
   1d314:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1d318:	bd70      	pop	{r4, r5, r6, pc}

0001d31a <adxl362_chip_init>:
{
   1d31a:	b530      	push	{r4, r5, lr}
   1d31c:	b085      	sub	sp, #20
   1d31e:	4604      	mov	r4, r0
	const struct adxl362_config *config = dev->config;
   1d320:	6845      	ldr	r5, [r0, #4]
	adxl362_setup_activity_detection(dev,
   1d322:	2301      	movs	r3, #1
   1d324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d328:	2100      	movs	r1, #0
   1d32a:	f7ff ff19 	bl	1d160 <adxl362_setup_activity_detection>
	if (ret) {
   1d32e:	b108      	cbz	r0, 1d334 <adxl362_chip_init+0x1a>
}
   1d330:	b005      	add	sp, #20
   1d332:	bd30      	pop	{r4, r5, pc}
	adxl362_setup_inactivity_detection(dev,
   1d334:	2301      	movs	r3, #1
   1d336:	2264      	movs	r2, #100	; 0x64
   1d338:	2100      	movs	r1, #0
   1d33a:	4620      	mov	r0, r4
   1d33c:	f7ff ff53 	bl	1d1e6 <adxl362_setup_inactivity_detection>
   1d340:	4603      	mov	r3, r0
	if (ret) {
   1d342:	2800      	cmp	r0, #0
   1d344:	d1f4      	bne.n	1d330 <adxl362_chip_init+0x16>
	ret = adxl362_fifo_setup(dev, ADXL362_FIFO_DISABLE, 0, 0);
   1d346:	4602      	mov	r2, r0
   1d348:	4601      	mov	r1, r0
   1d34a:	4620      	mov	r0, r4
   1d34c:	f7ff fee3 	bl	1d116 <adxl362_fifo_setup>
	if (ret) {
   1d350:	2800      	cmp	r0, #0
   1d352:	d1ed      	bne.n	1d330 <adxl362_chip_init+0x16>
	ret = adxl362_set_range(dev, ADXL362_DEFAULT_RANGE_ACC);
   1d354:	2100      	movs	r1, #0
   1d356:	4620      	mov	r0, r4
   1d358:	f7ff fe56 	bl	1d008 <adxl362_set_range>
	if (ret) {
   1d35c:	2800      	cmp	r0, #0
   1d35e:	d1e7      	bne.n	1d330 <adxl362_chip_init+0x16>
	ret = adxl362_set_output_rate(dev, ADXL362_DEFAULT_ODR_ACC);
   1d360:	2100      	movs	r1, #0
   1d362:	4620      	mov	r0, r4
   1d364:	f7ff fe75 	bl	1d052 <adxl362_set_output_rate>
	if (ret) {
   1d368:	2800      	cmp	r0, #0
   1d36a:	d1e1      	bne.n	1d330 <adxl362_chip_init+0x16>
	ret = adxl362_set_reg(dev, config->power_ctl, ADXL362_REG_POWER_CTL, 1);
   1d36c:	7c2b      	ldrb	r3, [r5, #16]
   1d36e:	f8ad 300e 	strh.w	r3, [sp, #14]
	return adxl362_reg_access(dev, ADXL362_WRITE_REG,
   1d372:	2301      	movs	r3, #1
   1d374:	9300      	str	r3, [sp, #0]
   1d376:	f10d 030e 	add.w	r3, sp, #14
   1d37a:	222d      	movs	r2, #45	; 0x2d
   1d37c:	210a      	movs	r1, #10
   1d37e:	4620      	mov	r0, r4
   1d380:	f7ff fe04 	bl	1cf8c <adxl362_reg_access>
	if (ret) {
   1d384:	e7d4      	b.n	1d330 <adxl362_chip_init+0x16>

0001d386 <bme680_calc_temp>:
{
   1d386:	b500      	push	{lr}
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   1d388:	89c3      	ldrh	r3, [r0, #14]
   1d38a:	005b      	lsls	r3, r3, #1
   1d38c:	ebc3 01e1 	rsb	r1, r3, r1, asr #3
   1d390:	ea4f 7ce1 	mov.w	ip, r1, asr #31
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   1d394:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   1d398:	17da      	asrs	r2, r3, #31
   1d39a:	fb03 fe0c 	mul.w	lr, r3, ip
   1d39e:	fb01 ee02 	mla	lr, r1, r2, lr
   1d3a2:	fba3 3201 	umull	r3, r2, r3, r1
   1d3a6:	4496      	add	lr, r2
   1d3a8:	0ada      	lsrs	r2, r3, #11
   1d3aa:	ea42 524e 	orr.w	r2, r2, lr, lsl #21
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   1d3ae:	0849      	lsrs	r1, r1, #1
   1d3b0:	ea41 71cc 	orr.w	r1, r1, ip, lsl #31
   1d3b4:	fb01 f30c 	mul.w	r3, r1, ip
   1d3b8:	fba1 1c01 	umull	r1, ip, r1, r1
   1d3bc:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
   1d3c0:	0b0b      	lsrs	r3, r1, #12
   1d3c2:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
   1d3c6:	ea4f 3c2c 	mov.w	ip, ip, asr #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1d3ca:	f990 e012 	ldrsb.w	lr, [r0, #18]
   1d3ce:	ea4f 110e 	mov.w	r1, lr, lsl #4
   1d3d2:	ea4f 7eee 	mov.w	lr, lr, asr #31
   1d3d6:	fb01 fc0c 	mul.w	ip, r1, ip
   1d3da:	fb03 cc0e 	mla	ip, r3, lr, ip
   1d3de:	fba1 1303 	umull	r1, r3, r1, r3
   1d3e2:	4463      	add	r3, ip
   1d3e4:	0b89      	lsrs	r1, r1, #14
   1d3e6:	ea41 4183 	orr.w	r1, r1, r3, lsl #18
	data->t_fine = var2 + var3;
   1d3ea:	1853      	adds	r3, r2, r1
   1d3ec:	63c3      	str	r3, [r0, #60]	; 0x3c
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   1d3ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1d3f2:	3380      	adds	r3, #128	; 0x80
   1d3f4:	121b      	asrs	r3, r3, #8
   1d3f6:	6283      	str	r3, [r0, #40]	; 0x28
}
   1d3f8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3fc <bme680_calc_press>:
{
   1d3fc:	b510      	push	{r4, lr}
	var1 = (((int32_t)data->t_fine) >> 1) - 64000;
   1d3fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d400:	105b      	asrs	r3, r3, #1
   1d402:	f5a3 4e7a 	sub.w	lr, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   1d406:	ea4f 02ae 	mov.w	r2, lr, asr #2
   1d40a:	fb02 f202 	mul.w	r2, r2, r2
   1d40e:	12d4      	asrs	r4, r2, #11
		(int32_t)data->par_p6) >> 2;
   1d410:	f990 c01e 	ldrsb.w	ip, [r0, #30]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   1d414:	fb0c f404 	mul.w	r4, ip, r4
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   1d418:	f9b0 c01c 	ldrsh.w	ip, [r0, #28]
   1d41c:	fb0e fc0c 	mul.w	ip, lr, ip
   1d420:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1d424:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   1d428:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
   1d42c:	041b      	lsls	r3, r3, #16
   1d42e:	eb03 0ca4 	add.w	ip, r3, r4, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1d432:	1352      	asrs	r2, r2, #13
		 ((int32_t)data->par_p3 << 5)) >> 3)
   1d434:	f990 3018 	ldrsb.w	r3, [r0, #24]
   1d438:	015b      	lsls	r3, r3, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1d43a:	fb03 f202 	mul.w	r2, r3, r2
	       + (((int32_t)data->par_p2 * var1) >> 1);
   1d43e:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
   1d442:	fb0e f303 	mul.w	r3, lr, r3
   1d446:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1d448:	eb03 03e2 	add.w	r3, r3, r2, asr #3
	var1 = var1 >> 18;
   1d44c:	149b      	asrs	r3, r3, #18
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   1d44e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1d452:	8a82      	ldrh	r2, [r0, #20]
   1d454:	fb02 f303 	mul.w	r3, r2, r3
   1d458:	13da      	asrs	r2, r3, #15
	calc_press = 1048576 - adc_press;
   1d45a:	f5c1 1380 	rsb	r3, r1, #1048576	; 0x100000
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   1d45e:	eba3 332c 	sub.w	r3, r3, ip, asr #12
   1d462:	f640 4135 	movw	r1, #3125	; 0xc35
   1d466:	fb01 f303 	mul.w	r3, r1, r3
	if (calc_press >= (int32_t)0x40000000) {
   1d46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   1d46e:	db25      	blt.n	1d4bc <bme680_calc_press+0xc0>
		calc_press = ((calc_press / var1) << 1);
   1d470:	fb93 f3f2 	sdiv	r3, r3, r2
   1d474:	005b      	lsls	r3, r3, #1
	var1 = ((int32_t)data->par_p9 *
   1d476:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
		(int32_t)(((calc_press >> 3)
   1d47a:	10d9      	asrs	r1, r3, #3
			 * (calc_press >> 3)) >> 13)) >> 12;
   1d47c:	fb01 f101 	mul.w	r1, r1, r1
   1d480:	1349      	asrs	r1, r1, #13
	var1 = ((int32_t)data->par_p9 *
   1d482:	fb01 f402 	mul.w	r4, r1, r2
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
   1d486:	109a      	asrs	r2, r3, #2
   1d488:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
   1d48c:	fb01 f202 	mul.w	r2, r1, r2
   1d490:	1352      	asrs	r2, r2, #13
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
   1d492:	1219      	asrs	r1, r3, #8
   1d494:	fb01 fc01 	mul.w	ip, r1, r1
		* (int32_t)(calc_press >> 8)
   1d498:	fb0c f101 	mul.w	r1, ip, r1
		* (int32_t)data->par_p10) >> 17;
   1d49c:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
   1d4a0:	fb0c f101 	mul.w	r1, ip, r1
			   + ((var1 + var2 + var3
   1d4a4:	eb02 3224 	add.w	r2, r2, r4, asr #12
   1d4a8:	eb02 4261 	add.w	r2, r2, r1, asr #17
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   1d4ac:	f990 101f 	ldrsb.w	r1, [r0, #31]
   1d4b0:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			   + ((var1 + var2 + var3
   1d4b4:	eb03 1322 	add.w	r3, r3, r2, asr #4
	data->calc_press = calc_press
   1d4b8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   1d4ba:	bd10      	pop	{r4, pc}
		calc_press = ((calc_press << 1) / var1);
   1d4bc:	005b      	lsls	r3, r3, #1
   1d4be:	fb93 f3f2 	sdiv	r3, r3, r2
   1d4c2:	e7d8      	b.n	1d476 <bme680_calc_press+0x7a>

0001d4c4 <bme680_calc_gas_wait>:
	if (dur >= 0xfc0) {
   1d4c4:	f5b0 6f7c 	cmp.w	r0, #4032	; 0xfc0
   1d4c8:	d20c      	bcs.n	1d4e4 <bme680_calc_gas_wait+0x20>
	uint8_t factor = 0, durval;
   1d4ca:	2300      	movs	r3, #0
   1d4cc:	e002      	b.n	1d4d4 <bme680_calc_gas_wait+0x10>
			dur = dur / 4;
   1d4ce:	0880      	lsrs	r0, r0, #2
			factor += 1;
   1d4d0:	3301      	adds	r3, #1
   1d4d2:	b2db      	uxtb	r3, r3
		while (dur > 0x3F) {
   1d4d4:	283f      	cmp	r0, #63	; 0x3f
   1d4d6:	d8fa      	bhi.n	1d4ce <bme680_calc_gas_wait+0xa>
		durval = dur + (factor * 64);
   1d4d8:	019b      	lsls	r3, r3, #6
   1d4da:	b2db      	uxtb	r3, r3
   1d4dc:	fa53 f080 	uxtab	r0, r3, r0
   1d4e0:	b2c0      	uxtb	r0, r0
   1d4e2:	4770      	bx	lr
		durval = 0xff; /* Max duration*/
   1d4e4:	20ff      	movs	r0, #255	; 0xff
}
   1d4e6:	4770      	bx	lr

0001d4e8 <bme680_sample_fetch>:
{
   1d4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d4ec:	b084      	sub	sp, #16
   1d4ee:	4604      	mov	r4, r0
	struct bme680_data *data = dev->data;
   1d4f0:	6905      	ldr	r5, [r0, #16]
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   1d4f2:	2300      	movs	r3, #0
   1d4f4:	9300      	str	r3, [sp, #0]
   1d4f6:	9301      	str	r3, [sp, #4]
   1d4f8:	9302      	str	r3, [sp, #8]
   1d4fa:	f8cd 300b 	str.w	r3, [sp, #11]
	const struct bme680_config *config = dev->config;
   1d4fe:	6843      	ldr	r3, [r0, #4]
	return config->bus_io->read(dev, start, buf, size);
   1d500:	689b      	ldr	r3, [r3, #8]
   1d502:	685e      	ldr	r6, [r3, #4]
   1d504:	230f      	movs	r3, #15
   1d506:	466a      	mov	r2, sp
   1d508:	211d      	movs	r1, #29
   1d50a:	47b0      	blx	r6
	if (ret < 0) {
   1d50c:	2800      	cmp	r0, #0
   1d50e:	db3a      	blt.n	1d586 <bme680_sample_fetch+0x9e>
	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
   1d510:	f89d 7000 	ldrb.w	r7, [sp]
   1d514:	f007 0780 	and.w	r7, r7, #128	; 0x80
   1d518:	f885 7038 	strb.w	r7, [r5, #56]	; 0x38
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   1d51c:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1d520:	f000 0310 	and.w	r3, r0, #16
   1d524:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   1d528:	f89d 2002 	ldrb.w	r2, [sp, #2]
   1d52c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1d530:	011b      	lsls	r3, r3, #4
   1d532:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
			    | ((uint32_t)buff[4] >> 4));
   1d536:	f89d 6004 	ldrb.w	r6, [sp, #4]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   1d53a:	ea43 1616 	orr.w	r6, r3, r6, lsr #4
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   1d53e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1d542:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1d546:	0109      	lsls	r1, r1, #4
   1d548:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
			   | ((uint32_t)buff[7] >> 4));
   1d54c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   1d550:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
	adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
   1d554:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1d558:	f89d 9009 	ldrb.w	r9, [sp, #9]
   1d55c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   1d560:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d564:	ea4f 1890 	mov.w	r8, r0, lsr #6
   1d568:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
	gas_range = buff[14] & BME680_MSK_GAS_RANGE;
   1d56c:	f000 0a0f 	and.w	sl, r0, #15
	if (data->new_data) {
   1d570:	b967      	cbnz	r7, 1d58c <bme680_sample_fetch+0xa4>
	const struct bme680_config *config = dev->config;
   1d572:	6863      	ldr	r3, [r4, #4]
	return config->bus_io->write(dev, reg, val);
   1d574:	689b      	ldr	r3, [r3, #8]
   1d576:	689b      	ldr	r3, [r3, #8]
   1d578:	2255      	movs	r2, #85	; 0x55
   1d57a:	2174      	movs	r1, #116	; 0x74
   1d57c:	4620      	mov	r0, r4
   1d57e:	4798      	blx	r3
	if (ret < 0) {
   1d580:	2800      	cmp	r0, #0
   1d582:	db00      	blt.n	1d586 <bme680_sample_fetch+0x9e>
	return 0;
   1d584:	2000      	movs	r0, #0
}
   1d586:	b004      	add	sp, #16
   1d588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bme680_calc_temp(data, adc_temp);
   1d58c:	4628      	mov	r0, r5
   1d58e:	f7ff fefa 	bl	1d386 <bme680_calc_temp>
		bme680_calc_press(data, adc_press);
   1d592:	4631      	mov	r1, r6
   1d594:	4628      	mov	r0, r5
   1d596:	f7ff ff31 	bl	1d3fc <bme680_calc_press>
		bme680_calc_humidity(data, adc_hum);
   1d59a:	4649      	mov	r1, r9
   1d59c:	4628      	mov	r0, r5
   1d59e:	f7f2 fec1 	bl	10324 <bme680_calc_humidity>
		bme680_calc_gas_resistance(data, gas_range, adc_gas_res);
   1d5a2:	4642      	mov	r2, r8
   1d5a4:	4651      	mov	r1, sl
   1d5a6:	4628      	mov	r0, r5
   1d5a8:	f7f2 ff20 	bl	103ec <bme680_calc_gas_resistance>
   1d5ac:	e7e1      	b.n	1d572 <bme680_sample_fetch+0x8a>

0001d5ae <bme680_read_compensation>:
{
   1d5ae:	b570      	push	{r4, r5, r6, lr}
   1d5b0:	b08c      	sub	sp, #48	; 0x30
   1d5b2:	4605      	mov	r5, r0
	struct bme680_data *data = dev->data;
   1d5b4:	6904      	ldr	r4, [r0, #16]
	const struct bme680_config *config = dev->config;
   1d5b6:	6843      	ldr	r3, [r0, #4]
	return config->bus_io->read(dev, start, buf, size);
   1d5b8:	689b      	ldr	r3, [r3, #8]
   1d5ba:	685e      	ldr	r6, [r3, #4]
   1d5bc:	2317      	movs	r3, #23
   1d5be:	aa01      	add	r2, sp, #4
   1d5c0:	218a      	movs	r1, #138	; 0x8a
   1d5c2:	47b0      	blx	r6
	if (err < 0) {
   1d5c4:	2800      	cmp	r0, #0
   1d5c6:	f2c0 809d 	blt.w	1d704 <bme680_read_compensation+0x156>
	const struct bme680_config *config = dev->config;
   1d5ca:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->read(dev, start, buf, size);
   1d5cc:	689b      	ldr	r3, [r3, #8]
   1d5ce:	685e      	ldr	r6, [r3, #4]
   1d5d0:	230e      	movs	r3, #14
   1d5d2:	f10d 021b 	add.w	r2, sp, #27
   1d5d6:	21e1      	movs	r1, #225	; 0xe1
   1d5d8:	4628      	mov	r0, r5
   1d5da:	47b0      	blx	r6
	if (err < 0) {
   1d5dc:	2800      	cmp	r0, #0
   1d5de:	f2c0 8091 	blt.w	1d704 <bme680_read_compensation+0x156>
	const struct bme680_config *config = dev->config;
   1d5e2:	686b      	ldr	r3, [r5, #4]
	return config->bus_io->read(dev, start, buf, size);
   1d5e4:	689b      	ldr	r3, [r3, #8]
   1d5e6:	685e      	ldr	r6, [r3, #4]
   1d5e8:	2305      	movs	r3, #5
   1d5ea:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   1d5ee:	2100      	movs	r1, #0
   1d5f0:	4628      	mov	r0, r5
   1d5f2:	47b0      	blx	r6
	if (err < 0) {
   1d5f4:	2800      	cmp	r0, #0
   1d5f6:	f2c0 8085 	blt.w	1d704 <bme680_read_compensation+0x156>
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   1d5fa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1d5fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1d602:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d606:	81e3      	strh	r3, [r4, #14]
	data->par_t2 = (int16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
   1d608:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1d60c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d614:	8223      	strh	r3, [r4, #16]
	data->par_t3 = (uint8_t)(buff[2]);
   1d616:	f99d 3006 	ldrsb.w	r3, [sp, #6]
   1d61a:	74a3      	strb	r3, [r4, #18]
	data->par_p1 = (uint16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
   1d61c:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1d620:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1d624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d628:	82a3      	strh	r3, [r4, #20]
	data->par_p2 = (int16_t)(BME680_CONCAT_BYTES(buff[7], buff[6]));
   1d62a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1d62e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1d632:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d636:	82e3      	strh	r3, [r4, #22]
	data->par_p3 = (int8_t)buff[8];
   1d638:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   1d63c:	7623      	strb	r3, [r4, #24]
	data->par_p4 = (int16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
   1d63e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1d642:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1d646:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d64a:	8363      	strh	r3, [r4, #26]
	data->par_p5 = (int16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
   1d64c:	f89d 2011 	ldrb.w	r2, [sp, #17]
   1d650:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1d654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d658:	83a3      	strh	r3, [r4, #28]
	data->par_p6 = (int8_t)(buff[15]);
   1d65a:	f99d 3013 	ldrsb.w	r3, [sp, #19]
   1d65e:	77a3      	strb	r3, [r4, #30]
	data->par_p7 = (int8_t)(buff[14]);
   1d660:	f99d 3012 	ldrsb.w	r3, [sp, #18]
   1d664:	77e3      	strb	r3, [r4, #31]
	data->par_p8 = (int16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
   1d666:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1d66a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1d66e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d672:	8423      	strh	r3, [r4, #32]
	data->par_p9 = (int16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
   1d674:	f89d 2019 	ldrb.w	r2, [sp, #25]
   1d678:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1d67c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d680:	8463      	strh	r3, [r4, #34]	; 0x22
	data->par_p10 = (uint8_t)(buff[22]);
   1d682:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1d686:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	data->par_h1 = (uint16_t)(((uint16_t)buff[25] << 4) | (buff[24] & 0x0f));
   1d68a:	f89d 201d 	ldrb.w	r2, [sp, #29]
   1d68e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d692:	f003 030f 	and.w	r3, r3, #15
   1d696:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   1d69a:	8023      	strh	r3, [r4, #0]
	data->par_h2 = (uint16_t)(((uint16_t)buff[23] << 4) | ((buff[24]) >> 4));
   1d69c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   1d6a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1d6a4:	091b      	lsrs	r3, r3, #4
   1d6a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   1d6aa:	8063      	strh	r3, [r4, #2]
	data->par_h3 = (int8_t)buff[26];
   1d6ac:	f99d 301e 	ldrsb.w	r3, [sp, #30]
   1d6b0:	7123      	strb	r3, [r4, #4]
	data->par_h4 = (int8_t)buff[27];
   1d6b2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1d6b6:	7163      	strb	r3, [r4, #5]
	data->par_h5 = (int8_t)buff[28];
   1d6b8:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   1d6bc:	71a3      	strb	r3, [r4, #6]
	data->par_h6 = (uint8_t)buff[29];
   1d6be:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1d6c2:	71e3      	strb	r3, [r4, #7]
	data->par_h7 = (int8_t)buff[30];
   1d6c4:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
   1d6c8:	7223      	strb	r3, [r4, #8]
	data->par_gh1 = (int8_t)buff[35];
   1d6ca:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
   1d6ce:	7263      	strb	r3, [r4, #9]
	data->par_gh2 = (int16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
   1d6d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1d6d4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1d6d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d6dc:	8163      	strh	r3, [r4, #10]
	data->par_gh3 = (int8_t)buff[36];
   1d6de:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
   1d6e2:	7323      	strb	r3, [r4, #12]
	data->res_heat_val = (int8_t)buff[37];
   1d6e4:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
   1d6e8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
   1d6ec:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1d6f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1d6f4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	data->range_sw_err = ((int8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
   1d6f8:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
   1d6fc:	111b      	asrs	r3, r3, #4
   1d6fe:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return 0;
   1d702:	2000      	movs	r0, #0
}
   1d704:	b00c      	add	sp, #48	; 0x30
   1d706:	bd70      	pop	{r4, r5, r6, pc}

0001d708 <bme680_reg_read_i2c>:
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
}

static int bme680_reg_read_i2c(const struct device *dev,
			       uint8_t start, uint8_t *buf, int size)
{
   1d708:	b530      	push	{r4, r5, lr}
   1d70a:	b089      	sub	sp, #36	; 0x24
   1d70c:	461d      	mov	r5, r3
	const struct bme680_config *config = dev->config;
   1d70e:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read(spec->bus, spec->addr,
   1d710:	6820      	ldr	r0, [r4, #0]
   1d712:	88a3      	ldrh	r3, [r4, #4]
   1d714:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1d718:	f10d 0107 	add.w	r1, sp, #7
   1d71c:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1d71e:	2101      	movs	r1, #1
   1d720:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1d722:	2100      	movs	r1, #0
   1d724:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1d728:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1d72a:	9506      	str	r5, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d72c:	2207      	movs	r2, #7
   1d72e:	f88d 201c 	strb.w	r2, [sp, #28]
	const struct i2c_driver_api *api =
   1d732:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d734:	6894      	ldr	r4, [r2, #8]
   1d736:	2202      	movs	r2, #2
   1d738:	a902      	add	r1, sp, #8
   1d73a:	47a0      	blx	r4

	return i2c_burst_read_dt(&config->bus.i2c, start, buf, size);
}
   1d73c:	b009      	add	sp, #36	; 0x24
   1d73e:	bd30      	pop	{r4, r5, pc}

0001d740 <bme680_reg_write_i2c>:

static int bme680_reg_write_i2c(const struct device *dev,
				uint8_t reg, uint8_t val)
{
   1d740:	b510      	push	{r4, lr}
   1d742:	b084      	sub	sp, #16
	const struct bme680_config *config = dev->config;
   1d744:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1d746:	6818      	ldr	r0, [r3, #0]
   1d748:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   1d74a:	f88d 1000 	strb.w	r1, [sp]
   1d74e:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.buf = (uint8_t *)buf;
   1d752:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   1d756:	2202      	movs	r2, #2
   1d758:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1d75a:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
   1d75e:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d760:	6894      	ldr	r4, [r2, #8]
   1d762:	2201      	movs	r2, #1
   1d764:	a901      	add	r1, sp, #4
   1d766:	47a0      	blx	r4

	return i2c_reg_write_byte_dt(&config->bus.i2c, reg, val);
}
   1d768:	b004      	add	sp, #16
   1d76a:	bd10      	pop	{r4, pc}

0001d76c <bme680_bus_check_i2c>:
{
   1d76c:	b508      	push	{r3, lr}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
   1d76e:	6800      	ldr	r0, [r0, #0]
   1d770:	f001 fd79 	bl	1f266 <z_device_is_ready>
   1d774:	b108      	cbz	r0, 1d77a <bme680_bus_check_i2c+0xe>
   1d776:	2000      	movs	r0, #0
}
   1d778:	bd08      	pop	{r3, pc}
	return device_is_ready(bus->i2c.bus) ? 0 : -ENODEV;
   1d77a:	f06f 0012 	mvn.w	r0, #18
   1d77e:	e7fb      	b.n	1d778 <bme680_bus_check_i2c+0xc>

0001d780 <bmm150_compensate_xy>:
	if (xy == BMM150_XY_OVERFLOW_VAL) {
   1d780:	f511 5f80 	cmn.w	r1, #4096	; 0x1000
   1d784:	d034      	beq.n	1d7f0 <bmm150_compensate_xy+0x70>
{
   1d786:	b510      	push	{r4, lr}
	if (!rhall) {
   1d788:	b90a      	cbnz	r2, 1d78e <bmm150_compensate_xy+0xe>
		rhall = tregs->xyz1;
   1d78a:	f8b0 200f 	ldrh.w	r2, [r0, #15]
	if (is_x) {
   1d78e:	b353      	cbz	r3, 1d7e6 <bmm150_compensate_xy+0x66>
		txy1 = tregs->x1;
   1d790:	f990 c000 	ldrsb.w	ip, [r0]
		txy2 = tregs->x2;
   1d794:	f990 e007 	ldrsb.w	lr, [r0, #7]
	prevalue = (uint16_t)((((int32_t)tregs->xyz1) << 14) / rhall);
   1d798:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   1d79c:	039b      	lsls	r3, r3, #14
   1d79e:	fb93 f3f2 	sdiv	r3, r3, r2
   1d7a2:	b29b      	uxth	r3, r3
	val = (int16_t)((prevalue) - ((uint16_t)0x4000));
   1d7a4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
   1d7a8:	b21b      	sxth	r3, r3
	temp1 = (((int32_t)tregs->xy2) * ((((int32_t)val) * ((int32_t)val)) >> 7));
   1d7aa:	f990 4013 	ldrsb.w	r4, [r0, #19]
   1d7ae:	fb03 f203 	mul.w	r2, r3, r3
   1d7b2:	11d2      	asrs	r2, r2, #7
	temp2 = ((int32_t)val) * ((int32_t)(((int16_t)tregs->xy1) << 7));
   1d7b4:	7d00      	ldrb	r0, [r0, #20]
   1d7b6:	01c0      	lsls	r0, r0, #7
   1d7b8:	fb00 f303 	mul.w	r3, r0, r3
	temp3 = (((((temp1 + temp2) >> 9) +
   1d7bc:	fb02 3304 	mla	r3, r2, r4, r3
   1d7c0:	125b      	asrs	r3, r3, #9
   1d7c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
		((int32_t)0x100000)) * ((int32_t)(((int16_t)txy2) +
   1d7c6:	f10e 0ea0 	add.w	lr, lr, #160	; 0xa0
   1d7ca:	fb0e f303 	mul.w	r3, lr, r3
	temp3 = (((((temp1 + temp2) >> 9) +
   1d7ce:	131b      	asrs	r3, r3, #12
	val = ((int16_t)((((int32_t)xy) * temp3) >> 13)) + (((int16_t)txy1) << 3);
   1d7d0:	fb03 f001 	mul.w	r0, r3, r1
   1d7d4:	f3c0 304f 	ubfx	r0, r0, #13, #16
   1d7d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   1d7dc:	fa1f fc8c 	uxth.w	ip, ip
   1d7e0:	4460      	add	r0, ip
   1d7e2:	b200      	sxth	r0, r0
}
   1d7e4:	bd10      	pop	{r4, pc}
		txy1 = tregs->y1;
   1d7e6:	f990 c001 	ldrsb.w	ip, [r0, #1]
		txy2 = tregs->y2;
   1d7ea:	f990 e008 	ldrsb.w	lr, [r0, #8]
   1d7ee:	e7d3      	b.n	1d798 <bmm150_compensate_xy+0x18>
		return INT32_MIN;
   1d7f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
   1d7f4:	4770      	bx	lr

0001d7f6 <bmm150_compensate_z>:
	if (z == BMM150_Z_OVERFLOW_VAL) {
   1d7f6:	f511 4f80 	cmn.w	r1, #16384	; 0x4000
   1d7fa:	d01c      	beq.n	1d836 <bmm150_compensate_z+0x40>
	temp1 = (((int32_t)(z - tregs->z4)) << 15);
   1d7fc:	f9b0 3005 	ldrsh.w	r3, [r0, #5]
   1d800:	1acb      	subs	r3, r1, r3
	temp2 = ((((int32_t)tregs->z3) *
   1d802:	f9b0 1011 	ldrsh.w	r1, [r0, #17]
		((int32_t)(((int16_t)rhall) - ((int16_t)tregs->xyz1)))) >> 2);
   1d806:	b212      	sxth	r2, r2
   1d808:	f9b0 c00f 	ldrsh.w	ip, [r0, #15]
   1d80c:	eba2 0c0c 	sub.w	ip, r2, ip
	temp2 = ((((int32_t)tregs->z3) *
   1d810:	fb0c f101 	mul.w	r1, ip, r1
   1d814:	1089      	asrs	r1, r1, #2
	temp3 = ((int16_t)(((((int32_t)tregs->z1) *
   1d816:	f8b0 c00d 	ldrh.w	ip, [r0, #13]
		((((int16_t)rhall) << 1))) + (1 << 15)) >> 16));
   1d81a:	0052      	lsls	r2, r2, #1
	temp3 = ((int16_t)(((((int32_t)tregs->z1) *
   1d81c:	fb02 f20c 	mul.w	r2, r2, ip
		((((int16_t)rhall) << 1))) + (1 << 15)) >> 16));
   1d820:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
	val = ((temp1 - temp2) / (tregs->z2 + temp3));
   1d824:	ebc1 31c3 	rsb	r1, r1, r3, lsl #15
   1d828:	f9b0 000b 	ldrsh.w	r0, [r0, #11]
   1d82c:	eb00 4022 	add.w	r0, r0, r2, asr #16
   1d830:	fb91 f0f0 	sdiv	r0, r1, r0
	return val;
   1d834:	4770      	bx	lr
		return INT32_MIN;
   1d836:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
   1d83a:	4770      	bx	lr

0001d83c <bmm150_channel_get>:
{
   1d83c:	b538      	push	{r3, r4, r5, lr}
   1d83e:	4614      	mov	r4, r2
	struct bmm150_data *drv_data = dev->data;
   1d840:	6905      	ldr	r5, [r0, #16]
	switch (chan) {
   1d842:	3908      	subs	r1, #8
   1d844:	2903      	cmp	r1, #3
   1d846:	d825      	bhi.n	1d894 <bmm150_channel_get+0x58>
   1d848:	e8df f001 	tbb	[pc, r1]
   1d84c:	140e0802 	.word	0x140e0802
		bmm150_convert(val, drv_data->sample_x);
   1d850:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d852:	4610      	mov	r0, r2
   1d854:	f7f2 ffb4 	bl	107c0 <bmm150_convert>
	return 0;
   1d858:	2000      	movs	r0, #0
}
   1d85a:	bd38      	pop	{r3, r4, r5, pc}
		bmm150_convert(val, drv_data->sample_y);
   1d85c:	6c69      	ldr	r1, [r5, #68]	; 0x44
   1d85e:	4610      	mov	r0, r2
   1d860:	f7f2 ffae 	bl	107c0 <bmm150_convert>
	return 0;
   1d864:	2000      	movs	r0, #0
		break;
   1d866:	e7f8      	b.n	1d85a <bmm150_channel_get+0x1e>
		bmm150_convert(val, drv_data->sample_z);
   1d868:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   1d86a:	4610      	mov	r0, r2
   1d86c:	f7f2 ffa8 	bl	107c0 <bmm150_convert>
	return 0;
   1d870:	2000      	movs	r0, #0
		break;
   1d872:	e7f2      	b.n	1d85a <bmm150_channel_get+0x1e>
		bmm150_convert(val, drv_data->sample_x);
   1d874:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1d876:	4610      	mov	r0, r2
   1d878:	f7f2 ffa2 	bl	107c0 <bmm150_convert>
		bmm150_convert(val + 1, drv_data->sample_y);
   1d87c:	6c69      	ldr	r1, [r5, #68]	; 0x44
   1d87e:	f104 0008 	add.w	r0, r4, #8
   1d882:	f7f2 ff9d 	bl	107c0 <bmm150_convert>
		bmm150_convert(val + 2, drv_data->sample_z);
   1d886:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   1d888:	f104 0010 	add.w	r0, r4, #16
   1d88c:	f7f2 ff98 	bl	107c0 <bmm150_convert>
	return 0;
   1d890:	2000      	movs	r0, #0
		break;
   1d892:	e7e2      	b.n	1d85a <bmm150_channel_get+0x1e>
	switch (chan) {
   1d894:	f06f 0015 	mvn.w	r0, #21
   1d898:	e7df      	b.n	1d85a <bmm150_channel_get+0x1e>

0001d89a <bmm150_set_power_mode>:
{
   1d89a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d89c:	b089      	sub	sp, #36	; 0x24
	const struct bmm150_config *config = dev->config;
   1d89e:	6843      	ldr	r3, [r0, #4]
	switch (mode) {
   1d8a0:	2901      	cmp	r1, #1
   1d8a2:	d04a      	beq.n	1d93a <bmm150_set_power_mode+0xa0>
   1d8a4:	2902      	cmp	r1, #2
   1d8a6:	f000 8081 	beq.w	1d9ac <bmm150_set_power_mode+0x112>
   1d8aa:	b119      	cbz	r1, 1d8b4 <bmm150_set_power_mode+0x1a>
   1d8ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1d8b0:	b009      	add	sp, #36	; 0x24
   1d8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i2c_reg_update_byte_dt(&config->i2c,
   1d8b4:	fab2 f482 	clz	r4, r2
   1d8b8:	0964      	lsrs	r4, r4, #5
	return i2c_reg_update_byte(spec->bus, spec->addr,
   1d8ba:	681d      	ldr	r5, [r3, #0]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   1d8bc:	791e      	ldrb	r6, [r3, #4]
   1d8be:	234b      	movs	r3, #75	; 0x4b
   1d8c0:	f88d 3004 	strb.w	r3, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   1d8c4:	ab01      	add	r3, sp, #4
   1d8c6:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1d8c8:	2301      	movs	r3, #1
   1d8ca:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1d8cc:	2200      	movs	r2, #0
   1d8ce:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1d8d2:	f10d 0203 	add.w	r2, sp, #3
   1d8d6:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1d8d8:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d8da:	2307      	movs	r3, #7
   1d8dc:	f88d 301c 	strb.w	r3, [sp, #28]
	const struct i2c_driver_api *api =
   1d8e0:	68ab      	ldr	r3, [r5, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d8e2:	689f      	ldr	r7, [r3, #8]
   1d8e4:	4633      	mov	r3, r6
   1d8e6:	2202      	movs	r2, #2
   1d8e8:	a902      	add	r1, sp, #8
   1d8ea:	4628      	mov	r0, r5
   1d8ec:	47b8      	blx	r7
	if (rc != 0) {
   1d8ee:	4603      	mov	r3, r0
   1d8f0:	b9d8      	cbnz	r0, 1d92a <bmm150_set_power_mode+0x90>
	new_value = (old_value & ~mask) | (value & mask);
   1d8f2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1d8f6:	f021 0201 	bic.w	r2, r1, #1
   1d8fa:	b252      	sxtb	r2, r2
   1d8fc:	4322      	orrs	r2, r4
   1d8fe:	b2d2      	uxtb	r2, r2
	if (new_value == old_value) {
   1d900:	4291      	cmp	r1, r2
   1d902:	d012      	beq.n	1d92a <bmm150_set_power_mode+0x90>
	uint8_t tx_buf[2] = {reg_addr, value};
   1d904:	234b      	movs	r3, #75	; 0x4b
   1d906:	f88d 3004 	strb.w	r3, [sp, #4]
   1d90a:	f88d 2005 	strb.w	r2, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1d90e:	ab01      	add	r3, sp, #4
   1d910:	9302      	str	r3, [sp, #8]
	msg.len = num_bytes;
   1d912:	2302      	movs	r3, #2
   1d914:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1d916:	f88d 3010 	strb.w	r3, [sp, #16]
	const struct i2c_driver_api *api =
   1d91a:	68ab      	ldr	r3, [r5, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d91c:	689c      	ldr	r4, [r3, #8]
   1d91e:	4633      	mov	r3, r6
   1d920:	2201      	movs	r2, #1
   1d922:	a902      	add	r1, sp, #8
   1d924:	4628      	mov	r0, r5
   1d926:	47a0      	blx	r4
   1d928:	4603      	mov	r3, r0
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	db76      	blt.n	1da1c <bmm150_set_power_mode+0x182>
	z_impl_k_busy_wait(usec_to_wait);
   1d92e:	f241 3088 	movw	r0, #5000	; 0x1388
   1d932:	f002 fa38 	bl	1fda6 <z_impl_k_busy_wait>
		return 0;
   1d936:	2000      	movs	r0, #0
   1d938:	e7ba      	b.n	1d8b0 <bmm150_set_power_mode+0x16>
	return i2c_reg_update_byte(spec->bus, spec->addr,
   1d93a:	681c      	ldr	r4, [r3, #0]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   1d93c:	791d      	ldrb	r5, [r3, #4]
   1d93e:	234c      	movs	r3, #76	; 0x4c
   1d940:	f88d 3004 	strb.w	r3, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   1d944:	ab01      	add	r3, sp, #4
   1d946:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1d948:	2301      	movs	r3, #1
   1d94a:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1d94c:	2200      	movs	r2, #0
   1d94e:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1d952:	f10d 0203 	add.w	r2, sp, #3
   1d956:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1d958:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d95a:	2307      	movs	r3, #7
   1d95c:	f88d 301c 	strb.w	r3, [sp, #28]
	const struct i2c_driver_api *api =
   1d960:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d962:	689e      	ldr	r6, [r3, #8]
   1d964:	462b      	mov	r3, r5
   1d966:	2202      	movs	r2, #2
   1d968:	a902      	add	r1, sp, #8
   1d96a:	4620      	mov	r0, r4
   1d96c:	47b0      	blx	r6
	if (rc != 0) {
   1d96e:	2800      	cmp	r0, #0
   1d970:	d19e      	bne.n	1d8b0 <bmm150_set_power_mode+0x16>
	new_value = (old_value & ~mask) | (value & mask);
   1d972:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1d976:	f022 0306 	bic.w	r3, r2, #6
   1d97a:	b25b      	sxtb	r3, r3
   1d97c:	f043 0306 	orr.w	r3, r3, #6
   1d980:	b2db      	uxtb	r3, r3
	if (new_value == old_value) {
   1d982:	429a      	cmp	r2, r3
   1d984:	d094      	beq.n	1d8b0 <bmm150_set_power_mode+0x16>
	uint8_t tx_buf[2] = {reg_addr, value};
   1d986:	224c      	movs	r2, #76	; 0x4c
   1d988:	f88d 2004 	strb.w	r2, [sp, #4]
   1d98c:	f88d 3005 	strb.w	r3, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1d990:	ab01      	add	r3, sp, #4
   1d992:	9302      	str	r3, [sp, #8]
	msg.len = num_bytes;
   1d994:	2302      	movs	r3, #2
   1d996:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1d998:	f88d 3010 	strb.w	r3, [sp, #16]
	const struct i2c_driver_api *api =
   1d99c:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d99e:	689e      	ldr	r6, [r3, #8]
   1d9a0:	462b      	mov	r3, r5
   1d9a2:	2201      	movs	r2, #1
   1d9a4:	a902      	add	r1, sp, #8
   1d9a6:	4620      	mov	r0, r4
   1d9a8:	47b0      	blx	r6
		return i2c_reg_update_byte_dt(&config->i2c,
   1d9aa:	e781      	b.n	1d8b0 <bmm150_set_power_mode+0x16>
	return i2c_reg_update_byte(spec->bus, spec->addr,
   1d9ac:	681c      	ldr	r4, [r3, #0]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   1d9ae:	791d      	ldrb	r5, [r3, #4]
   1d9b0:	234c      	movs	r3, #76	; 0x4c
   1d9b2:	f88d 3004 	strb.w	r3, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   1d9b6:	ab01      	add	r3, sp, #4
   1d9b8:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1d9ba:	2301      	movs	r3, #1
   1d9bc:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1d9be:	2200      	movs	r2, #0
   1d9c0:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1d9c4:	f10d 0203 	add.w	r2, sp, #3
   1d9c8:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1d9ca:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1d9cc:	2307      	movs	r3, #7
   1d9ce:	f88d 301c 	strb.w	r3, [sp, #28]
	const struct i2c_driver_api *api =
   1d9d2:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1d9d4:	689e      	ldr	r6, [r3, #8]
   1d9d6:	462b      	mov	r3, r5
   1d9d8:	2202      	movs	r2, #2
   1d9da:	a902      	add	r1, sp, #8
   1d9dc:	4620      	mov	r0, r4
   1d9de:	47b0      	blx	r6
	if (rc != 0) {
   1d9e0:	2800      	cmp	r0, #0
   1d9e2:	f47f af65 	bne.w	1d8b0 <bmm150_set_power_mode+0x16>
	new_value = (old_value & ~mask) | (value & mask);
   1d9e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1d9ea:	f003 02f9 	and.w	r2, r3, #249	; 0xf9
	if (new_value == old_value) {
   1d9ee:	f033 03f9 	bics.w	r3, r3, #249	; 0xf9
   1d9f2:	f43f af5d 	beq.w	1d8b0 <bmm150_set_power_mode+0x16>
	uint8_t tx_buf[2] = {reg_addr, value};
   1d9f6:	234c      	movs	r3, #76	; 0x4c
   1d9f8:	f88d 3004 	strb.w	r3, [sp, #4]
   1d9fc:	f88d 2005 	strb.w	r2, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1da00:	ab01      	add	r3, sp, #4
   1da02:	9302      	str	r3, [sp, #8]
	msg.len = num_bytes;
   1da04:	2302      	movs	r3, #2
   1da06:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1da08:	f88d 3010 	strb.w	r3, [sp, #16]
	const struct i2c_driver_api *api =
   1da0c:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1da0e:	689e      	ldr	r6, [r3, #8]
   1da10:	462b      	mov	r3, r5
   1da12:	2201      	movs	r2, #1
   1da14:	a902      	add	r1, sp, #8
   1da16:	4620      	mov	r0, r4
   1da18:	47b0      	blx	r6
		return i2c_reg_update_byte_dt(&config->i2c,
   1da1a:	e749      	b.n	1d8b0 <bmm150_set_power_mode+0x16>
			return -EIO;
   1da1c:	f06f 0004 	mvn.w	r0, #4
   1da20:	e746      	b.n	1d8b0 <bmm150_set_power_mode+0x16>

0001da22 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   1da22:	b508      	push	{r3, lr}
   1da24:	2200      	movs	r2, #0
   1da26:	2101      	movs	r1, #1
   1da28:	200c      	movs	r0, #12
   1da2a:	f7e7 fe01 	bl	5630 <z_arm_irq_priority_set>
   1da2e:	bd08      	pop	{r3, pc}

0001da30 <spi_nrfx_release>:
{
   1da30:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1da32:	6904      	ldr	r4, [r0, #16]
	return !!(ctx->config == config);
   1da34:	6823      	ldr	r3, [r4, #0]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1da36:	428b      	cmp	r3, r1
   1da38:	d131      	bne.n	1da9e <spi_nrfx_release+0x6e>
	if (dev_data->busy) {
   1da3a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   1da3e:	2b00      	cmp	r3, #0
   1da40:	d130      	bne.n	1daa4 <spi_nrfx_release+0x74>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1da42:	6823      	ldr	r3, [r4, #0]
   1da44:	b1c3      	cbz	r3, 1da78 <spi_nrfx_release+0x48>
   1da46:	689b      	ldr	r3, [r3, #8]
   1da48:	b1b3      	cbz	r3, 1da78 <spi_nrfx_release+0x48>
   1da4a:	681a      	ldr	r2, [r3, #0]
   1da4c:	b1a2      	cbz	r2, 1da78 <spi_nrfx_release+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1da4e:	6898      	ldr	r0, [r3, #8]
   1da50:	f002 f9a9 	bl	1fda6 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1da54:	6823      	ldr	r3, [r4, #0]
   1da56:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1da58:	6818      	ldr	r0, [r3, #0]
   1da5a:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1da5c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1da5e:	681a      	ldr	r2, [r3, #0]
   1da60:	2301      	movs	r3, #1
   1da62:	408b      	lsls	r3, r1
   1da64:	421a      	tst	r2, r3
   1da66:	d10b      	bne.n	1da80 <spi_nrfx_release+0x50>
   1da68:	2300      	movs	r3, #0
	if (value != 0)	{
   1da6a:	b15b      	cbz	r3, 1da84 <spi_nrfx_release+0x54>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1da6c:	2301      	movs	r3, #1
   1da6e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1da72:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1da74:	68db      	ldr	r3, [r3, #12]
   1da76:	4798      	blx	r3
   1da78:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1da7a:	b153      	cbz	r3, 1da92 <spi_nrfx_release+0x62>
	return 0;
   1da7c:	2000      	movs	r0, #0
}
   1da7e:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
   1da80:	2301      	movs	r3, #1
   1da82:	e7f2      	b.n	1da6a <spi_nrfx_release+0x3a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1da84:	2301      	movs	r3, #1
   1da86:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1da8a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1da8c:	691b      	ldr	r3, [r3, #16]
   1da8e:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1da90:	e7f2      	b.n	1da78 <spi_nrfx_release+0x48>
		ctx->owner = NULL;
   1da92:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1da94:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1da98:	f7f8 fc88 	bl	163ac <z_impl_k_sem_give>
}
   1da9c:	e7ee      	b.n	1da7c <spi_nrfx_release+0x4c>
		return -EINVAL;
   1da9e:	f06f 0015 	mvn.w	r0, #21
   1daa2:	e7ec      	b.n	1da7e <spi_nrfx_release+0x4e>
		return -EBUSY;
   1daa4:	f06f 000f 	mvn.w	r0, #15
   1daa8:	e7e9      	b.n	1da7e <spi_nrfx_release+0x4e>

0001daaa <spi_nrfx_transceive>:
{
   1daaa:	b510      	push	{r4, lr}
   1daac:	b082      	sub	sp, #8
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   1daae:	2400      	movs	r4, #0
   1dab0:	9401      	str	r4, [sp, #4]
   1dab2:	9400      	str	r4, [sp, #0]
   1dab4:	f7f3 fd88 	bl	115c8 <transceive>
}
   1dab8:	b002      	add	sp, #8
   1daba:	bd10      	pop	{r4, pc}

0001dabc <spi_nrfx_init>:
{
   1dabc:	b570      	push	{r4, r5, r6, lr}
   1dabe:	b082      	sub	sp, #8
	const struct spi_nrfx_config *dev_config = dev->config;
   1dac0:	6845      	ldr	r5, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1dac2:	6904      	ldr	r4, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1dac4:	6aae      	ldr	r6, [r5, #40]	; 0x28
	ret = pinctrl_lookup_state(config, id, &state);
   1dac6:	aa01      	add	r2, sp, #4
   1dac8:	2100      	movs	r1, #0
   1daca:	4630      	mov	r0, r6
   1dacc:	f000 fae2 	bl	1e094 <pinctrl_lookup_state>
	if (ret < 0) {
   1dad0:	2800      	cmp	r0, #0
   1dad2:	db05      	blt.n	1dae0 <spi_nrfx_init+0x24>
	return pinctrl_apply_state_direct(config, state);
   1dad4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1dad6:	6832      	ldr	r2, [r6, #0]
   1dad8:	7919      	ldrb	r1, [r3, #4]
   1dada:	6818      	ldr	r0, [r3, #0]
   1dadc:	f7f5 f906 	bl	12cec <pinctrl_configure_pins>
	if (err < 0) {
   1dae0:	2800      	cmp	r0, #0
   1dae2:	db24      	blt.n	1db2e <spi_nrfx_init+0x72>
	dev_config->irq_connect();
   1dae4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1dae6:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   1dae8:	4620      	mov	r0, r4
   1daea:	f7f3 fc41 	bl	11370 <spi_context_cs_configure_all>
	if (err < 0) {
   1daee:	2800      	cmp	r0, #0
   1daf0:	db1d      	blt.n	1db2e <spi_nrfx_init+0x72>
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   1daf2:	6823      	ldr	r3, [r4, #0]
   1daf4:	b1c3      	cbz	r3, 1db28 <spi_nrfx_init+0x6c>
   1daf6:	689b      	ldr	r3, [r3, #8]
   1daf8:	b1b3      	cbz	r3, 1db28 <spi_nrfx_init+0x6c>
   1dafa:	681a      	ldr	r2, [r3, #0]
   1dafc:	b1a2      	cbz	r2, 1db28 <spi_nrfx_init+0x6c>
			k_busy_wait(ctx->config->cs->delay);
   1dafe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1db00:	f002 f951 	bl	1fda6 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   1db04:	6823      	ldr	r3, [r4, #0]
   1db06:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   1db08:	6818      	ldr	r0, [r3, #0]
   1db0a:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
   1db0c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1db0e:	681a      	ldr	r2, [r3, #0]
   1db10:	2301      	movs	r3, #1
   1db12:	408b      	lsls	r3, r1
   1db14:	421a      	tst	r2, r3
   1db16:	d10c      	bne.n	1db32 <spi_nrfx_init+0x76>
   1db18:	2300      	movs	r3, #0
	if (value != 0)	{
   1db1a:	b163      	cbz	r3, 1db36 <spi_nrfx_init+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1db1c:	2301      	movs	r3, #1
   1db1e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1db22:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1db24:	68db      	ldr	r3, [r3, #12]
   1db26:	4798      	blx	r3
   1db28:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   1db2a:	b15b      	cbz	r3, 1db44 <spi_nrfx_init+0x88>
	return 0;
   1db2c:	2000      	movs	r0, #0
}
   1db2e:	b002      	add	sp, #8
   1db30:	bd70      	pop	{r4, r5, r6, pc}
		value = (value != 0) ? 0 : 1;
   1db32:	2301      	movs	r3, #1
   1db34:	e7f1      	b.n	1db1a <spi_nrfx_init+0x5e>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1db36:	2301      	movs	r3, #1
   1db38:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1db3c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1db3e:	691b      	ldr	r3, [r3, #16]
   1db40:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
   1db42:	e7f1      	b.n	1db28 <spi_nrfx_init+0x6c>
		ctx->owner = NULL;
   1db44:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   1db46:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   1db4a:	f7f8 fc2f 	bl	163ac <z_impl_k_sem_give>
}
   1db4e:	e7ed      	b.n	1db2c <spi_nrfx_init+0x70>

0001db50 <disable_sync>:
{
   1db50:	b530      	push	{r4, r5, lr}
   1db52:	b085      	sub	sp, #20
	struct driver_data_sync *data = dev->data;
   1db54:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1db56:	6845      	ldr	r5, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
   1db58:	a903      	add	r1, sp, #12
   1db5a:	4620      	mov	r0, r4
   1db5c:	f7fa fb79 	bl	18252 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1db60:	7d2a      	ldrb	r2, [r5, #20]
   1db62:	f012 0f01 	tst.w	r2, #1
   1db66:	d120      	bne.n	1dbaa <disable_sync+0x5a>
   1db68:	4603      	mov	r3, r0
	} else if (rc == 1) {
   1db6a:	2801      	cmp	r0, #1
   1db6c:	d003      	beq.n	1db76 <disable_sync+0x26>
	} else if (rc == 0) {
   1db6e:	b9e8      	cbnz	r0, 1dbac <disable_sync+0x5c>
		rc = -EINVAL;
   1db70:	f06f 0315 	mvn.w	r3, #21
   1db74:	e01a      	b.n	1dbac <disable_sync+0x5c>
	return gpio_pin_set(spec->port, spec->pin, value);
   1db76:	68e8      	ldr	r0, [r5, #12]
   1db78:	7c29      	ldrb	r1, [r5, #16]
	const struct gpio_driver_data *const data =
   1db7a:	6902      	ldr	r2, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1db7c:	6815      	ldr	r5, [r2, #0]
   1db7e:	2201      	movs	r2, #1
   1db80:	408a      	lsls	r2, r1
   1db82:	4215      	tst	r5, r2
   1db84:	d100      	bne.n	1db88 <disable_sync+0x38>
   1db86:	2300      	movs	r3, #0
	if (value != 0)	{
   1db88:	b13b      	cbz	r3, 1db9a <disable_sync+0x4a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1db8a:	2301      	movs	r3, #1
   1db8c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1db90:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1db92:	68db      	ldr	r3, [r3, #12]
   1db94:	4798      	blx	r3
   1db96:	4603      	mov	r3, r0
   1db98:	e008      	b.n	1dbac <disable_sync+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1db9a:	2301      	movs	r3, #1
   1db9c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1dba0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1dba2:	691b      	ldr	r3, [r3, #16]
   1dba4:	4798      	blx	r3
   1dba6:	4603      	mov	r3, r0
	return ret;
   1dba8:	e000      	b.n	1dbac <disable_sync+0x5c>
		rc = 0;
   1dbaa:	2300      	movs	r3, #0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   1dbac:	2200      	movs	r2, #0
   1dbae:	9200      	str	r2, [sp, #0]
   1dbb0:	9903      	ldr	r1, [sp, #12]
   1dbb2:	4620      	mov	r0, r4
   1dbb4:	f7fa fb58 	bl	18268 <onoff_sync_finalize>
}
   1dbb8:	b005      	add	sp, #20
   1dbba:	bd30      	pop	{r4, r5, pc}

0001dbbc <enable_sync>:
{
   1dbbc:	b570      	push	{r4, r5, r6, lr}
   1dbbe:	b084      	sub	sp, #16
   1dbc0:	460c      	mov	r4, r1
	struct driver_data_sync *data = dev->data;
   1dbc2:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1dbc4:	6846      	ldr	r6, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
   1dbc6:	a903      	add	r1, sp, #12
   1dbc8:	4628      	mov	r0, r5
   1dbca:	f7fa fb42 	bl	18252 <onoff_sync_lock>
	if ((rc == 0)
   1dbce:	4603      	mov	r3, r0
   1dbd0:	b918      	cbnz	r0, 1dbda <enable_sync+0x1e>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   1dbd2:	7d32      	ldrb	r2, [r6, #20]
   1dbd4:	f012 0f01 	tst.w	r2, #1
   1dbd8:	d008      	beq.n	1dbec <enable_sync+0x30>
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   1dbda:	2201      	movs	r2, #1
   1dbdc:	9200      	str	r2, [sp, #0]
   1dbde:	4622      	mov	r2, r4
   1dbe0:	9903      	ldr	r1, [sp, #12]
   1dbe2:	4628      	mov	r0, r5
   1dbe4:	f7fa fb40 	bl	18268 <onoff_sync_finalize>
}
   1dbe8:	b004      	add	sp, #16
   1dbea:	bd70      	pop	{r4, r5, r6, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1dbec:	68f0      	ldr	r0, [r6, #12]
   1dbee:	7c31      	ldrb	r1, [r6, #16]
	const struct gpio_driver_data *const data =
   1dbf0:	6902      	ldr	r2, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1dbf2:	6816      	ldr	r6, [r2, #0]
   1dbf4:	2201      	movs	r2, #1
   1dbf6:	408a      	lsls	r2, r1
   1dbf8:	4216      	tst	r6, r2
   1dbfa:	d100      	bne.n	1dbfe <enable_sync+0x42>
   1dbfc:	2301      	movs	r3, #1
	if (value != 0)	{
   1dbfe:	b13b      	cbz	r3, 1dc10 <enable_sync+0x54>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1dc00:	2301      	movs	r3, #1
   1dc02:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1dc06:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1dc08:	68db      	ldr	r3, [r3, #12]
   1dc0a:	4798      	blx	r3
   1dc0c:	4603      	mov	r3, r0
   1dc0e:	e7e4      	b.n	1dbda <enable_sync+0x1e>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1dc10:	2301      	movs	r3, #1
   1dc12:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1dc16:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1dc18:	691b      	ldr	r3, [r3, #16]
   1dc1a:	4798      	blx	r3
   1dc1c:	4603      	mov	r3, r0
	return ret;
   1dc1e:	e7dc      	b.n	1dbda <enable_sync+0x1e>

0001dc20 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   1dc20:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1dc22:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1dc24:	f04f 0120 	mov.w	r1, #32
   1dc28:	f3ef 8211 	mrs	r2, BASEPRI
   1dc2c:	f381 8812 	msr	BASEPRI_MAX, r1
   1dc30:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc34:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dc38:	b131      	cbz	r1, 1dc48 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc3a:	2100      	movs	r1, #0
   1dc3c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1dc40:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dc44:	2101      	movs	r1, #1
   1dc46:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1dc48:	f382 8811 	msr	BASEPRI, r2
   1dc4c:	f3bf 8f6f 	isb	sy
}
   1dc50:	4770      	bx	lr

0001dc52 <uarte_nrfx_isr_int>:
{
   1dc52:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1dc54:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   1dc56:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   1dc58:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1dc5c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1dc60:	d002      	beq.n	1dc68 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1dc66:	b9d3      	cbnz	r3, 1dc9e <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dc68:	686b      	ldr	r3, [r5, #4]
   1dc6a:	f013 0f10 	tst.w	r3, #16
   1dc6e:	d015      	beq.n	1dc9c <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   1dc70:	f04f 0220 	mov.w	r2, #32
   1dc74:	f3ef 8311 	mrs	r3, BASEPRI
   1dc78:	f382 8812 	msr	BASEPRI_MAX, r2
   1dc7c:	f3bf 8f6f 	isb	sy
   1dc80:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1dc84:	b112      	cbz	r2, 1dc8c <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1dc86:	2200      	movs	r2, #0
   1dc88:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1dc8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1dc90:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   1dc94:	f383 8811 	msr	BASEPRI, r3
   1dc98:	f3bf 8f6f 	isb	sy
}
   1dc9c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1dc9e:	f7ff ffbf 	bl	1dc20 <endtx_isr>
   1dca2:	e7e1      	b.n	1dc68 <uarte_nrfx_isr_int+0x16>

0001dca4 <uarte_nrfx_configure>:
{
   1dca4:	b570      	push	{r4, r5, r6, lr}
   1dca6:	b082      	sub	sp, #8
   1dca8:	4605      	mov	r5, r0
   1dcaa:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   1dcac:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   1dcae:	794b      	ldrb	r3, [r1, #5]
   1dcb0:	2b01      	cmp	r3, #1
   1dcb2:	d006      	beq.n	1dcc2 <uarte_nrfx_configure+0x1e>
   1dcb4:	2b03      	cmp	r3, #3
   1dcb6:	d011      	beq.n	1dcdc <uarte_nrfx_configure+0x38>
   1dcb8:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   1dcbc:	4610      	mov	r0, r2
   1dcbe:	b002      	add	sp, #8
   1dcc0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1dcc8:	79a3      	ldrb	r3, [r4, #6]
   1dcca:	2b03      	cmp	r3, #3
   1dccc:	d146      	bne.n	1dd5c <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   1dcce:	79e3      	ldrb	r3, [r4, #7]
   1dcd0:	b143      	cbz	r3, 1dce4 <uarte_nrfx_configure+0x40>
   1dcd2:	2b01      	cmp	r3, #1
   1dcd4:	d015      	beq.n	1dd02 <uarte_nrfx_configure+0x5e>
   1dcd6:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1dcda:	e7ef      	b.n	1dcbc <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1dcdc:	2310      	movs	r3, #16
   1dcde:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   1dce2:	e7f1      	b.n	1dcc8 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1dce4:	2300      	movs	r3, #0
   1dce6:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1dcea:	2300      	movs	r3, #0
   1dcec:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   1dcf0:	7923      	ldrb	r3, [r4, #4]
   1dcf2:	2b01      	cmp	r3, #1
   1dcf4:	d02a      	beq.n	1dd4c <uarte_nrfx_configure+0xa8>
   1dcf6:	2b02      	cmp	r3, #2
   1dcf8:	d024      	beq.n	1dd44 <uarte_nrfx_configure+0xa0>
   1dcfa:	b133      	cbz	r3, 1dd0a <uarte_nrfx_configure+0x66>
   1dcfc:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1dd00:	e7dc      	b.n	1dcbc <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1dd02:	2301      	movs	r3, #1
   1dd04:	f88d 3000 	strb.w	r3, [sp]
		break;
   1dd08:	e7ef      	b.n	1dcea <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1dd0a:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1dd0e:	6821      	ldr	r1, [r4, #0]
   1dd10:	4628      	mov	r0, r5
   1dd12:	f7f3 fef7 	bl	11b04 <baudrate_set>
   1dd16:	4602      	mov	r2, r0
   1dd18:	bb18      	cbnz	r0, 1dd62 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   1dd1a:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   1dd1c:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1dd1e:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   1dd22:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1dd26:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   1dd28:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1dd2c:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   1dd2e:	f89d 0000 	ldrb.w	r0, [sp]
   1dd32:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1dd34:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   1dd38:	3604      	adds	r6, #4
   1dd3a:	e894 0003 	ldmia.w	r4, {r0, r1}
   1dd3e:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   1dd42:	e7bb      	b.n	1dcbc <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1dd44:	230e      	movs	r3, #14
   1dd46:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   1dd4a:	e7e0      	b.n	1dd0e <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1dd4c:	230e      	movs	r3, #14
   1dd4e:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1dd52:	f44f 7380 	mov.w	r3, #256	; 0x100
   1dd56:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   1dd5a:	e7d8      	b.n	1dd0e <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   1dd5c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1dd60:	e7ac      	b.n	1dcbc <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1dd62:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1dd66:	e7a9      	b.n	1dcbc <uarte_nrfx_configure+0x18>

0001dd68 <uarte_nrfx_config_get>:
{
   1dd68:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1dd6a:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1dd6c:	3304      	adds	r3, #4
   1dd6e:	e893 0003 	ldmia.w	r3, {r0, r1}
   1dd72:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1dd76:	2000      	movs	r0, #0
   1dd78:	4770      	bx	lr

0001dd7a <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1dd7a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1dd7c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1dd7e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1dd82:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1dd86:	4770      	bx	lr

0001dd88 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1dd88:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1dd8a:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1dd8c:	685b      	ldr	r3, [r3, #4]
   1dd8e:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd92:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1dd96:	b929      	cbnz	r1, 1dda4 <is_tx_ready+0x1c>
   1dd98:	b933      	cbnz	r3, 1dda8 <is_tx_ready+0x20>
   1dd9a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1dd9e:	b92b      	cbnz	r3, 1ddac <is_tx_ready+0x24>
   1dda0:	2000      	movs	r0, #0
   1dda2:	4770      	bx	lr
   1dda4:	2001      	movs	r0, #1
   1dda6:	4770      	bx	lr
   1dda8:	2000      	movs	r0, #0
   1ddaa:	4770      	bx	lr
   1ddac:	2001      	movs	r0, #1
}
   1ddae:	4770      	bx	lr

0001ddb0 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1ddb0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ddb2:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ddb4:	2208      	movs	r2, #8
   1ddb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1ddba:	4770      	bx	lr

0001ddbc <tx_start>:
{
   1ddbc:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1ddbe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ddc0:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ddc2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ddc6:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddca:	2200      	movs	r2, #0
   1ddcc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1ddd0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1ddd4:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1ddd8:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dddc:	685b      	ldr	r3, [r3, #4]
   1ddde:	f013 0f10 	tst.w	r3, #16
   1dde2:	d102      	bne.n	1ddea <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dde4:	2301      	movs	r3, #1
   1dde6:	60a3      	str	r3, [r4, #8]
}
   1dde8:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1ddea:	2101      	movs	r1, #1
   1ddec:	f7ff ffe0 	bl	1ddb0 <uarte_enable>
    p_reg->INTENSET = mask;
   1ddf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ddf4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1ddf8:	e7f4      	b.n	1dde4 <tx_start+0x28>

0001ddfa <uarte_nrfx_poll_in>:
{
   1ddfa:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1ddfc:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1ddfe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1de00:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1de02:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1de06:	b15a      	cbz	r2, 1de20 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
   1de08:	6962      	ldr	r2, [r4, #20]
   1de0a:	7812      	ldrb	r2, [r2, #0]
   1de0c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de0e:	2000      	movs	r0, #0
   1de10:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1de14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de18:	2201      	movs	r2, #1
   1de1a:	601a      	str	r2, [r3, #0]
}
   1de1c:	bc10      	pop	{r4}
   1de1e:	4770      	bx	lr
		return -1;
   1de20:	f04f 30ff 	mov.w	r0, #4294967295
   1de24:	e7fa      	b.n	1de1c <uarte_nrfx_poll_in+0x22>

0001de26 <wait_tx_ready>:
{
   1de26:	b570      	push	{r4, r5, r6, lr}
   1de28:	4606      	mov	r6, r0
   1de2a:	e014      	b.n	1de56 <wait_tx_ready+0x30>
		if (res) {
   1de2c:	b17d      	cbz	r5, 1de4e <wait_tx_ready+0x28>
	__asm__ volatile(
   1de2e:	f04f 0320 	mov.w	r3, #32
   1de32:	f3ef 8411 	mrs	r4, BASEPRI
   1de36:	f383 8812 	msr	BASEPRI_MAX, r3
   1de3a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1de3e:	4630      	mov	r0, r6
   1de40:	f7ff ffa2 	bl	1dd88 <is_tx_ready>
   1de44:	b9a0      	cbnz	r0, 1de70 <wait_tx_ready+0x4a>
	__asm__ volatile(
   1de46:	f384 8811 	msr	BASEPRI, r4
   1de4a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   1de4e:	2021      	movs	r0, #33	; 0x21
   1de50:	2100      	movs	r1, #0
   1de52:	f7f9 f877 	bl	16f44 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1de56:	2464      	movs	r4, #100	; 0x64
   1de58:	4630      	mov	r0, r6
   1de5a:	f7ff ff95 	bl	1dd88 <is_tx_ready>
   1de5e:	4605      	mov	r5, r0
   1de60:	2800      	cmp	r0, #0
   1de62:	d1e3      	bne.n	1de2c <wait_tx_ready+0x6>
   1de64:	2001      	movs	r0, #1
   1de66:	f000 f9e5 	bl	1e234 <nrfx_busy_wait>
   1de6a:	3c01      	subs	r4, #1
   1de6c:	d1f4      	bne.n	1de58 <wait_tx_ready+0x32>
   1de6e:	e7dd      	b.n	1de2c <wait_tx_ready+0x6>
}
   1de70:	4620      	mov	r0, r4
   1de72:	bd70      	pop	{r4, r5, r6, pc}

0001de74 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1de74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1de78:	b083      	sub	sp, #12
   1de7a:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   1de7c:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1de7e:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1de80:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1de84:	2100      	movs	r1, #0
   1de86:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1de8a:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1de8e:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
   1de92:	aa01      	add	r2, sp, #4
   1de94:	4648      	mov	r0, r9
   1de96:	f000 f8fd 	bl	1e094 <pinctrl_lookup_state>
	if (ret < 0) {
   1de9a:	1e04      	subs	r4, r0, #0
   1de9c:	db07      	blt.n	1deae <uarte_instance_init+0x3a>
	return pinctrl_apply_state_direct(config, state);
   1de9e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1dea0:	f8d9 2000 	ldr.w	r2, [r9]
   1dea4:	7919      	ldrb	r1, [r3, #4]
   1dea6:	6818      	ldr	r0, [r3, #0]
   1dea8:	f7f4 ff20 	bl	12cec <pinctrl_configure_pins>
   1deac:	4604      	mov	r4, r0
	if (err < 0) {
   1deae:	2c00      	cmp	r4, #0
   1deb0:	db35      	blt.n	1df1e <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1deb2:	f108 0104 	add.w	r1, r8, #4
   1deb6:	4628      	mov	r0, r5
   1deb8:	f7ff fef4 	bl	1dca4 <uarte_nrfx_configure>
	if (err) {
   1debc:	4604      	mov	r4, r0
   1debe:	bb70      	cbnz	r0, 1df1e <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1dec0:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1dec2:	f013 0f02 	tst.w	r3, #2
   1dec6:	d12e      	bne.n	1df26 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1dec8:	2308      	movs	r3, #8
   1deca:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1dece:	7a3b      	ldrb	r3, [r7, #8]
   1ded0:	b95b      	cbnz	r3, 1deea <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ded2:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1ded6:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   1deda:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1dede:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1dee2:	2301      	movs	r3, #1
   1dee4:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dee8:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1deea:	687b      	ldr	r3, [r7, #4]
   1deec:	f013 0f02 	tst.w	r3, #2
   1def0:	d103      	bne.n	1defa <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
   1def2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1def6:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1defa:	687b      	ldr	r3, [r7, #4]
   1defc:	f013 0f10 	tst.w	r3, #16
   1df00:	d003      	beq.n	1df0a <uarte_instance_init+0x96>
   1df02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1df06:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   1df0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1df0e:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1df12:	2300      	movs	r3, #0
   1df14:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1df18:	2301      	movs	r3, #1
   1df1a:	60b3      	str	r3, [r6, #8]
   1df1c:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1df1e:	4620      	mov	r0, r4
   1df20:	b003      	add	sp, #12
   1df22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1df26:	4641      	mov	r1, r8
   1df28:	4630      	mov	r0, r6
   1df2a:	f7f3 fecd 	bl	11cc8 <endtx_stoptx_ppi_init>
		if (err < 0) {
   1df2e:	2800      	cmp	r0, #0
   1df30:	daca      	bge.n	1dec8 <uarte_instance_init+0x54>
			return err;
   1df32:	4604      	mov	r4, r0
   1df34:	e7f3      	b.n	1df1e <uarte_instance_init+0xaa>

0001df36 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1df36:	b510      	push	{r4, lr}
   1df38:	4604      	mov	r4, r0
   1df3a:	2200      	movs	r2, #0
   1df3c:	2101      	movs	r1, #1
   1df3e:	2008      	movs	r0, #8
   1df40:	f7e7 fb76 	bl	5630 <z_arm_irq_priority_set>
   1df44:	2008      	movs	r0, #8
   1df46:	f7e7 fb43 	bl	55d0 <arch_irq_enable>
   1df4a:	2100      	movs	r1, #0
   1df4c:	4620      	mov	r0, r4
   1df4e:	f7ff ff91 	bl	1de74 <uarte_instance_init>
   1df52:	bd10      	pop	{r4, pc}

0001df54 <is_hci_event_discardable>:
	uint8_t evt_type = evt_data[0];
   1df54:	7803      	ldrb	r3, [r0, #0]
	switch (evt_type) {
   1df56:	2b3e      	cmp	r3, #62	; 0x3e
   1df58:	d001      	beq.n	1df5e <is_hci_event_discardable+0xa>
		return false;
   1df5a:	2000      	movs	r0, #0
   1df5c:	4770      	bx	lr
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
   1df5e:	7883      	ldrb	r3, [r0, #2]
		switch (subevt_type) {
   1df60:	2b02      	cmp	r3, #2
   1df62:	d001      	beq.n	1df68 <is_hci_event_discardable+0x14>
			return false;
   1df64:	2000      	movs	r0, #0
}
   1df66:	4770      	bx	lr
			return true;
   1df68:	2001      	movs	r0, #1
   1df6a:	4770      	bx	lr

0001df6c <hci_ept_recv>:
{
   1df6c:	b508      	push	{r3, lr}
	bt_rpmsg_rx(data, len);
   1df6e:	f7f4 fbaf 	bl	126d0 <bt_rpmsg_rx>
}
   1df72:	bd08      	pop	{r3, pc}

0001df74 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1df74:	4770      	bx	lr

0001df76 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1df76:	1a40      	subs	r0, r0, r1
}
   1df78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1df7c:	4770      	bx	lr

0001df7e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1df7e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1df82:	009b      	lsls	r3, r3, #2
   1df84:	b29b      	uxth	r3, r3
   1df86:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   1df8a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1df8e:	2200      	movs	r2, #0
   1df90:	601a      	str	r2, [r3, #0]
   1df92:	681b      	ldr	r3, [r3, #0]
}
   1df94:	4770      	bx	lr

0001df96 <absolute_time_to_cc>:
}
   1df96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1df9a:	4770      	bx	lr

0001df9c <full_int_lock>:
	__asm__ volatile(
   1df9c:	f04f 0320 	mov.w	r3, #32
   1dfa0:	f3ef 8011 	mrs	r0, BASEPRI
   1dfa4:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfa8:	f3bf 8f6f 	isb	sy
}
   1dfac:	4770      	bx	lr

0001dfae <full_int_unlock>:
	__asm__ volatile(
   1dfae:	f380 8811 	msr	BASEPRI, r0
   1dfb2:	f3bf 8f6f 	isb	sy
}
   1dfb6:	4770      	bx	lr

0001dfb8 <set_absolute_alarm>:
{
   1dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfba:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1dfbc:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1dfc0:	f7f4 fbea 	bl	12798 <get_comparator>
   1dfc4:	4607      	mov	r7, r0
   1dfc6:	e019      	b.n	1dffc <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1dfc8:	2013      	movs	r0, #19
   1dfca:	f001 feec 	bl	1fda6 <z_impl_k_busy_wait>
}
   1dfce:	e022      	b.n	1e016 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1dfd0:	4630      	mov	r0, r6
   1dfd2:	f7ff ffd4 	bl	1df7e <event_clear>
		event_enable(chan);
   1dfd6:	4630      	mov	r0, r6
   1dfd8:	f7f4 fbe6 	bl	127a8 <event_enable>
		set_comparator(chan, cc_val);
   1dfdc:	4629      	mov	r1, r5
   1dfde:	4630      	mov	r0, r6
   1dfe0:	f7f4 fbd0 	bl	12784 <set_comparator>
		now2 = counter();
   1dfe4:	f7f4 fbf4 	bl	127d0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1dfe8:	4284      	cmp	r4, r0
   1dfea:	d01e      	beq.n	1e02a <set_absolute_alarm+0x72>
   1dfec:	1c81      	adds	r1, r0, #2
   1dfee:	4628      	mov	r0, r5
   1dff0:	f7ff ffc1 	bl	1df76 <counter_sub>
	} while ((now2 != now) &&
   1dff4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1dff8:	d917      	bls.n	1e02a <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1dffa:	462f      	mov	r7, r5
		now = counter();
   1dffc:	f7f4 fbe8 	bl	127d0 <counter>
   1e000:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1e002:	4601      	mov	r1, r0
   1e004:	4630      	mov	r0, r6
   1e006:	f7f4 fbbd 	bl	12784 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1e00a:	4621      	mov	r1, r4
   1e00c:	4638      	mov	r0, r7
   1e00e:	f7ff ffb2 	bl	1df76 <counter_sub>
   1e012:	2801      	cmp	r0, #1
   1e014:	d0d8      	beq.n	1dfc8 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e016:	1ca7      	adds	r7, r4, #2
   1e018:	4639      	mov	r1, r7
   1e01a:	4628      	mov	r0, r5
   1e01c:	f7ff ffab 	bl	1df76 <counter_sub>
   1e020:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e024:	d9d4      	bls.n	1dfd0 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1e026:	463d      	mov	r5, r7
   1e028:	e7d2      	b.n	1dfd0 <set_absolute_alarm+0x18>
}
   1e02a:	4628      	mov	r0, r5
   1e02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e02e <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   1e02e:	b138      	cbz	r0, 1e040 <z_nrf_rtc_timer_capture_task_address_get+0x12>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   1e030:	3010      	adds	r0, #16
   1e032:	0080      	lsls	r0, r0, #2
   1e034:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
   1e036:	f100 2050 	add.w	r0, r0, #1342197760	; 0x50005000
   1e03a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
	return nrf_rtc_task_address_get(RTC, task);
   1e03e:	4770      	bx	lr
		return 0;
   1e040:	2000      	movs	r0, #0
}
   1e042:	4770      	bx	lr

0001e044 <compare_set>:
{
   1e044:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e046:	b083      	sub	sp, #12
   1e048:	4604      	mov	r4, r0
   1e04a:	4617      	mov	r7, r2
   1e04c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1e04e:	f7f4 fbc5 	bl	127dc <compare_int_lock>
   1e052:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1e054:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e056:	9301      	str	r3, [sp, #4]
   1e058:	9b08      	ldr	r3, [sp, #32]
   1e05a:	9300      	str	r3, [sp, #0]
   1e05c:	463a      	mov	r2, r7
   1e05e:	462b      	mov	r3, r5
   1e060:	4620      	mov	r0, r4
   1e062:	f7f4 fcab 	bl	129bc <compare_set_nolocks>
   1e066:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1e068:	4631      	mov	r1, r6
   1e06a:	4620      	mov	r0, r4
   1e06c:	f7f4 fc10 	bl	12890 <compare_int_unlock>
}
   1e070:	4628      	mov	r0, r5
   1e072:	b003      	add	sp, #12
   1e074:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e076 <z_nrf_rtc_timer_set>:
{
   1e076:	b500      	push	{lr}
   1e078:	b083      	sub	sp, #12
	return compare_set(chan, target_time, handler, user_data);
   1e07a:	9905      	ldr	r1, [sp, #20]
   1e07c:	9101      	str	r1, [sp, #4]
   1e07e:	9904      	ldr	r1, [sp, #16]
   1e080:	9100      	str	r1, [sp, #0]
   1e082:	f7ff ffdf 	bl	1e044 <compare_set>
}
   1e086:	b003      	add	sp, #12
   1e088:	f85d fb04 	ldr.w	pc, [sp], #4

0001e08c <sys_clock_cycle_get_32>:
{
   1e08c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1e08e:	f7f4 fc75 	bl	1297c <z_nrf_rtc_timer_read>
}
   1e092:	bd08      	pop	{r3, pc}

0001e094 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1e094:	b410      	push	{r4}
	*state = &config->states[0];
   1e096:	6843      	ldr	r3, [r0, #4]
   1e098:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e09a:	e001      	b.n	1e0a0 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1e09c:	3408      	adds	r4, #8
   1e09e:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1e0a0:	6814      	ldr	r4, [r2, #0]
   1e0a2:	7a03      	ldrb	r3, [r0, #8]
   1e0a4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1e0a8:	3b01      	subs	r3, #1
   1e0aa:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1e0ae:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   1e0b2:	429c      	cmp	r4, r3
   1e0b4:	d804      	bhi.n	1e0c0 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1e0b6:	7963      	ldrb	r3, [r4, #5]
   1e0b8:	428b      	cmp	r3, r1
   1e0ba:	d1ef      	bne.n	1e09c <pinctrl_lookup_state+0x8>
			return 0;
   1e0bc:	2000      	movs	r0, #0
   1e0be:	e001      	b.n	1e0c4 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   1e0c0:	f06f 0001 	mvn.w	r0, #1
}
   1e0c4:	bc10      	pop	{r4}
   1e0c6:	4770      	bx	lr

0001e0c8 <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
   1e0c8:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1e0ca:	290f      	cmp	r1, #15
   1e0cc:	d806      	bhi.n	1e0dc <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
   1e0ce:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1e0d2:	3110      	adds	r1, #16
   1e0d4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
   1e0d8:	2000      	movs	r0, #0
   1e0da:	4770      	bx	lr
		return -EINVAL;
   1e0dc:	f06f 0015 	mvn.w	r0, #21
}
   1e0e0:	4770      	bx	lr

0001e0e2 <mbox_nrf_mtu_get>:
}
   1e0e2:	2000      	movs	r0, #0
   1e0e4:	4770      	bx	lr

0001e0e6 <mbox_nrf_max_channels_get>:
}
   1e0e6:	2010      	movs	r0, #16
   1e0e8:	4770      	bx	lr

0001e0ea <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   1e0ea:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1e0ec:	f7f9 fce2 	bl	17ab4 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   1e0f0:	bd08      	pop	{r3, pc}

0001e0f2 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1e0f2:	b510      	push	{r4, lr}
   1e0f4:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1e0f6:	f7e7 f845 	bl	5184 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1e0fa:	f7e7 f915 	bl	5328 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1e0fe:	4620      	mov	r0, r4
   1e100:	f7ff fff3 	bl	1e0ea <hw_cc3xx_init_internal>
	return res;
}
   1e104:	bd10      	pop	{r4, pc}

0001e106 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e106:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e10a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e10e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   1e112:	2a07      	cmp	r2, #7
   1e114:	d001      	beq.n	1e11a <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1e116:	2000      	movs	r0, #0
   1e118:	4770      	bx	lr
                    switch(var2)
   1e11a:	3b02      	subs	r3, #2
   1e11c:	2b00      	cmp	r3, #0
   1e11e:	d804      	bhi.n	1e12a <nrf53_errata_42+0x24>
   1e120:	e8df f003 	tbb	[pc, r3]
   1e124:	01          	.byte	0x01
   1e125:	00          	.byte	0x00
   1e126:	2001      	movs	r0, #1
   1e128:	4770      	bx	lr
                            return false;
   1e12a:	2000      	movs	r0, #0
    #endif
}
   1e12c:	4770      	bx	lr

0001e12e <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e12e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e132:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e136:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   1e13a:	2a07      	cmp	r2, #7
   1e13c:	d001      	beq.n	1e142 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1e13e:	2000      	movs	r0, #0
   1e140:	4770      	bx	lr
                    switch(var2)
   1e142:	2b04      	cmp	r3, #4
   1e144:	d007      	beq.n	1e156 <nrf53_errata_46+0x28>
   1e146:	d808      	bhi.n	1e15a <nrf53_errata_46+0x2c>
   1e148:	3b02      	subs	r3, #2
   1e14a:	2b01      	cmp	r3, #1
   1e14c:	d801      	bhi.n	1e152 <nrf53_errata_46+0x24>
   1e14e:	2001      	movs	r0, #1
    #endif
}
   1e150:	4770      	bx	lr
                            return false;
   1e152:	2000      	movs	r0, #0
   1e154:	4770      	bx	lr
                            return false;
   1e156:	2000      	movs	r0, #0
   1e158:	4770      	bx	lr
                            return false;
   1e15a:	2000      	movs	r0, #0
   1e15c:	4770      	bx	lr

0001e15e <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e15e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e162:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e166:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   1e16a:	2a07      	cmp	r2, #7
   1e16c:	d001      	beq.n	1e172 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1e16e:	2000      	movs	r0, #0
   1e170:	4770      	bx	lr
                    switch(var2)
   1e172:	3b02      	subs	r3, #2
   1e174:	2b00      	cmp	r3, #0
   1e176:	d804      	bhi.n	1e182 <nrf53_errata_49+0x24>
   1e178:	e8df f003 	tbb	[pc, r3]
   1e17c:	01          	.byte	0x01
   1e17d:	00          	.byte	0x00
   1e17e:	2001      	movs	r0, #1
   1e180:	4770      	bx	lr
                            return false;
   1e182:	2000      	movs	r0, #0
    #endif
}
   1e184:	4770      	bx	lr

0001e186 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e186:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e18a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e18e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   1e192:	2a07      	cmp	r2, #7
   1e194:	d001      	beq.n	1e19a <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
   1e196:	2000      	movs	r0, #0
   1e198:	4770      	bx	lr
                            return true;
   1e19a:	2001      	movs	r0, #1
    #endif
}
   1e19c:	4770      	bx	lr

0001e19e <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e19e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e1a2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e1a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   1e1aa:	2a07      	cmp	r2, #7
   1e1ac:	d001      	beq.n	1e1b2 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1e1ae:	2000      	movs	r0, #0
   1e1b0:	4770      	bx	lr
                    switch(var2)
   1e1b2:	3b02      	subs	r3, #2
   1e1b4:	2b00      	cmp	r3, #0
   1e1b6:	d804      	bhi.n	1e1c2 <nrf53_errata_64+0x24>
   1e1b8:	e8df f003 	tbb	[pc, r3]
   1e1bc:	01          	.byte	0x01
   1e1bd:	00          	.byte	0x00
   1e1be:	2001      	movs	r0, #1
   1e1c0:	4770      	bx	lr
                            return false;
   1e1c2:	2000      	movs	r0, #0
    #endif
}
   1e1c4:	4770      	bx	lr

0001e1c6 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e1c6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e1ca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e1ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   1e1d2:	2a07      	cmp	r2, #7
   1e1d4:	d001      	beq.n	1e1da <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1e1d6:	2000      	movs	r0, #0
   1e1d8:	4770      	bx	lr
                    switch(var2)
   1e1da:	3b02      	subs	r3, #2
   1e1dc:	2b00      	cmp	r3, #0
   1e1de:	d804      	bhi.n	1e1ea <nrf53_errata_69+0x24>
   1e1e0:	e8df f003 	tbb	[pc, r3]
   1e1e4:	01          	.byte	0x01
   1e1e5:	00          	.byte	0x00
   1e1e6:	2001      	movs	r0, #1
   1e1e8:	4770      	bx	lr
                            return false;
   1e1ea:	2000      	movs	r0, #0
    #endif
}
   1e1ec:	4770      	bx	lr

0001e1ee <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e1ee:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e1f2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e1f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   1e1fa:	2a07      	cmp	r2, #7
   1e1fc:	d001      	beq.n	1e202 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
   1e1fe:	2000      	movs	r0, #0
   1e200:	4770      	bx	lr
                    switch(var2)
   1e202:	3b02      	subs	r3, #2
   1e204:	2b00      	cmp	r3, #0
   1e206:	d804      	bhi.n	1e212 <nrf53_errata_97+0x24>
   1e208:	e8df f003 	tbb	[pc, r3]
   1e20c:	01          	.byte	0x01
   1e20d:	00          	.byte	0x00
   1e20e:	2001      	movs	r0, #1
   1e210:	4770      	bx	lr
                            return false;
   1e212:	2000      	movs	r0, #0
    #endif
}
   1e214:	4770      	bx	lr

0001e216 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
   1e216:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1e21a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
   1e21e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   1e222:	2a07      	cmp	r2, #7
   1e224:	d001      	beq.n	1e22a <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
   1e226:	2000      	movs	r0, #0
   1e228:	4770      	bx	lr
                            return true;
   1e22a:	2001      	movs	r0, #1
    #endif
}
   1e22c:	4770      	bx	lr

0001e22e <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   1e22e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1e230:	4780      	blx	r0
}
   1e232:	bd08      	pop	{r3, pc}

0001e234 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1e234:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1e236:	f001 fdb6 	bl	1fda6 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   1e23a:	bd08      	pop	{r3, pc}

0001e23c <clock_initial_lfclksrc_get>:
}
   1e23c:	2001      	movs	r0, #1
   1e23e:	4770      	bx	lr

0001e240 <clock_lfclksrc_tweak>:
{
   1e240:	b538      	push	{r3, r4, r5, lr}
   1e242:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   1e244:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e246:	2b02      	cmp	r3, #2
   1e248:	d006      	beq.n	1e258 <clock_lfclksrc_tweak+0x18>
   1e24a:	2b01      	cmp	r3, #1
   1e24c:	d000      	beq.n	1e250 <clock_lfclksrc_tweak+0x10>
   1e24e:	2300      	movs	r3, #0
    if (!is_correct_clk)
   1e250:	461d      	mov	r5, r3
   1e252:	b11b      	cbz	r3, 1e25c <clock_lfclksrc_tweak+0x1c>
}
   1e254:	4628      	mov	r0, r5
   1e256:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1e258:	2301      	movs	r3, #1
   1e25a:	e7f9      	b.n	1e250 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e25c:	2000      	movs	r0, #0
   1e25e:	f7f5 fa4b 	bl	136f8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1e262:	f7ff ffeb 	bl	1e23c <clock_initial_lfclksrc_get>
   1e266:	7020      	strb	r0, [r4, #0]
   1e268:	e7f4      	b.n	1e254 <clock_lfclksrc_tweak+0x14>

0001e26a <nrfx_clock_enable>:
{
   1e26a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e26c:	2005      	movs	r0, #5
   1e26e:	f7e7 f9d1 	bl	5614 <arch_irq_is_enabled>
   1e272:	b158      	cbz	r0, 1e28c <nrfx_clock_enable+0x22>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   1e274:	f7ff ffe2 	bl	1e23c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e278:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e27c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1e280:	2201      	movs	r2, #1
   1e282:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1e286:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   1e28a:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e28c:	2005      	movs	r0, #5
   1e28e:	f7e7 f99f 	bl	55d0 <arch_irq_enable>
   1e292:	e7ef      	b.n	1e274 <nrfx_clock_enable+0xa>

0001e294 <nrfx_clock_start>:
    switch (domain)
   1e294:	2803      	cmp	r0, #3
   1e296:	d871      	bhi.n	1e37c <nrfx_clock_start+0xe8>
   1e298:	e8df f000 	tbb	[pc, r0]
   1e29c:	62544802 	.word	0x62544802
{
   1e2a0:	b500      	push	{lr}
   1e2a2:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e2a4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   1e2a8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1e2ac:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1e2b0:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e2b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1e2b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1e2bc:	d11d      	bne.n	1e2fa <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1e2be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e2c2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1e2c6:	f013 0f01 	tst.w	r3, #1
   1e2ca:	d11b      	bne.n	1e304 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
   1e2cc:	f7ff ffb6 	bl	1e23c <clock_initial_lfclksrc_get>
   1e2d0:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   1e2d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e2d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e2dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e2e0:	2200      	movs	r2, #0
   1e2e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e2e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1e2ea:	2202      	movs	r2, #2
   1e2ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e2f0:	2201      	movs	r2, #1
   1e2f2:	609a      	str	r2, [r3, #8]
}
   1e2f4:	b003      	add	sp, #12
   1e2f6:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   1e2fa:	f10d 0007 	add.w	r0, sp, #7
   1e2fe:	f7ff ff9f 	bl	1e240 <clock_lfclksrc_tweak>
   1e302:	e7e7      	b.n	1e2d4 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e304:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e308:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1e30c:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   1e310:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   1e314:	f10d 0007 	add.w	r0, sp, #7
   1e318:	f7ff ff92 	bl	1e240 <clock_lfclksrc_tweak>
   1e31c:	2800      	cmp	r0, #0
   1e31e:	d0d9      	beq.n	1e2d4 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
   1e320:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e324:	2202      	movs	r2, #2
   1e326:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   1e32a:	e7e3      	b.n	1e2f4 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e32c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e330:	2200      	movs	r2, #0
   1e332:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e336:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e33a:	2201      	movs	r2, #1
   1e33c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e340:	601a      	str	r2, [r3, #0]
}
   1e342:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e344:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e348:	2200      	movs	r2, #0
   1e34a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1e34e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1e352:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e356:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e35a:	2201      	movs	r2, #1
   1e35c:	621a      	str	r2, [r3, #32]
}
   1e35e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e360:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1e364:	2200      	movs	r2, #0
   1e366:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1e36a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1e36e:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e372:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e376:	2201      	movs	r2, #1
   1e378:	619a      	str	r2, [r3, #24]
}
   1e37a:	4770      	bx	lr
   1e37c:	4770      	bx	lr

0001e37e <nrfx_clock_stop>:
{
   1e37e:	b508      	push	{r3, lr}
    clock_stop(domain);
   1e380:	f7f5 f9ba 	bl	136f8 <clock_stop>
}
   1e384:	bd08      	pop	{r3, pc}

0001e386 <pin_is_task_output>:
{
   1e386:	b510      	push	{r4, lr}
   1e388:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e38a:	f7f5 fb09 	bl	139a0 <pin_is_output>
   1e38e:	b128      	cbz	r0, 1e39c <pin_is_task_output+0x16>
   1e390:	4620      	mov	r0, r4
   1e392:	f7f5 faef 	bl	13974 <pin_in_use_by_te>
   1e396:	b118      	cbz	r0, 1e3a0 <pin_is_task_output+0x1a>
   1e398:	2001      	movs	r0, #1
   1e39a:	e000      	b.n	1e39e <pin_is_task_output+0x18>
   1e39c:	2000      	movs	r0, #0
}
   1e39e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e3a0:	2000      	movs	r0, #0
   1e3a2:	e7fc      	b.n	1e39e <pin_is_task_output+0x18>

0001e3a4 <pin_is_input>:
{
   1e3a4:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1e3a6:	f7f5 fafb 	bl	139a0 <pin_is_output>
   1e3aa:	f080 0001 	eor.w	r0, r0, #1
}
   1e3ae:	b2c0      	uxtb	r0, r0
   1e3b0:	bd08      	pop	{r3, pc}

0001e3b2 <gpiote_polarity_to_trigger>:
}
   1e3b2:	4770      	bx	lr

0001e3b4 <gpiote_trigger_to_polarity>:
}
   1e3b4:	4770      	bx	lr

0001e3b6 <is_level>:
}
   1e3b6:	2803      	cmp	r0, #3
   1e3b8:	bf94      	ite	ls
   1e3ba:	2000      	movls	r0, #0
   1e3bc:	2001      	movhi	r0, #1
   1e3be:	4770      	bx	lr

0001e3c0 <spim_int_enable>:
    if (!enable)
   1e3c0:	b919      	cbnz	r1, 1e3ca <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   1e3c2:	2340      	movs	r3, #64	; 0x40
   1e3c4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1e3c8:	4770      	bx	lr
    p_reg->INTENSET = mask;
   1e3ca:	2340      	movs	r3, #64	; 0x40
   1e3cc:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   1e3d0:	4770      	bx	lr

0001e3d2 <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   1e3d2:	f011 0f01 	tst.w	r1, #1
   1e3d6:	d009      	beq.n	1e3ec <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1e3d8:	2301      	movs	r3, #1
   1e3da:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   1e3de:	f011 0f02 	tst.w	r1, #2
   1e3e2:	d007      	beq.n	1e3f4 <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   1e3e4:	2301      	movs	r3, #1
   1e3e6:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1e3ea:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   1e3ec:	2300      	movs	r3, #0
   1e3ee:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   1e3f2:	e7f4      	b.n	1e3de <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   1e3f4:	2300      	movs	r3, #0
   1e3f6:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1e3fa:	4770      	bx	lr

0001e3fc <spim_abort>:
{
   1e3fc:	b570      	push	{r4, r5, r6, lr}
   1e3fe:	4605      	mov	r5, r0
   1e400:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e402:	2301      	movs	r3, #1
   1e404:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   1e406:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e408:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1e40c:	b923      	cbnz	r3, 1e418 <spim_abort+0x1c>
   1e40e:	2001      	movs	r0, #1
   1e410:	f7ff ff10 	bl	1e234 <nrfx_busy_wait>
   1e414:	3c01      	subs	r4, #1
   1e416:	d1f7      	bne.n	1e408 <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   1e418:	2300      	movs	r3, #0
   1e41a:	7773      	strb	r3, [r6, #29]
}
   1e41c:	bd70      	pop	{r4, r5, r6, pc}

0001e41e <finish_transfer>:
{
   1e41e:	b510      	push	{r4, lr}
   1e420:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
   1e422:	2100      	movs	r1, #0
   1e424:	f7f6 f806 	bl	14434 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   1e428:	2300      	movs	r3, #0
   1e42a:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1e42c:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e42e:	4620      	mov	r0, r4
   1e430:	f850 3b08 	ldr.w	r3, [r0], #8
   1e434:	6861      	ldr	r1, [r4, #4]
   1e436:	4798      	blx	r3
}
   1e438:	bd10      	pop	{r4, pc}

0001e43a <irq_handler>:
   1e43a:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1e43e:	b902      	cbnz	r2, 1e442 <irq_handler+0x8>
   1e440:	4770      	bx	lr
{
   1e442:	b508      	push	{r3, lr}
   1e444:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e446:	2200      	movs	r2, #0
   1e448:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1e44c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        finish_transfer(p_cb);
   1e450:	4608      	mov	r0, r1
   1e452:	f7ff ffe4 	bl	1e41e <finish_transfer>
}
   1e456:	bd08      	pop	{r3, pc}

0001e458 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1e458:	7b0b      	ldrb	r3, [r1, #12]
   1e45a:	2b03      	cmp	r3, #3
   1e45c:	d839      	bhi.n	1e4d2 <xfer_completeness_check+0x7a>
   1e45e:	e8df f003 	tbb	[pc, r3]
   1e462:	312a      	.short	0x312a
   1e464:	0216      	.short	0x0216
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1e466:	688b      	ldr	r3, [r1, #8]
   1e468:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1e46c:	d004      	beq.n	1e478 <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   1e46e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1e472:	690a      	ldr	r2, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1e474:	429a      	cmp	r2, r3
   1e476:	d10f      	bne.n	1e498 <xfer_completeness_check+0x40>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1e478:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1e47a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1e47e:	d12a      	bne.n	1e4d6 <xfer_completeness_check+0x7e>
   1e480:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
   1e484:	694a      	ldr	r2, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1e486:	429a      	cmp	r2, r3
   1e488:	d106      	bne.n	1e498 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   1e48a:	2001      	movs	r0, #1
   1e48c:	4770      	bx	lr
   1e48e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1e492:	690a      	ldr	r2, [r1, #16]
   1e494:	429a      	cmp	r2, r3
   1e496:	d007      	beq.n	1e4a8 <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1e498:	2300      	movs	r3, #0
   1e49a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1e49e:	2206      	movs	r2, #6
   1e4a0:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   1e4a4:	4618      	mov	r0, r3
   1e4a6:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1e4a8:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
   1e4ac:	694a      	ldr	r2, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1e4ae:	429a      	cmp	r2, r3
   1e4b0:	d1f2      	bne.n	1e498 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   1e4b2:	2001      	movs	r0, #1
   1e4b4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1e4b6:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1e4ba:	690a      	ldr	r2, [r1, #16]
   1e4bc:	429a      	cmp	r2, r3
   1e4be:	d1eb      	bne.n	1e498 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   1e4c0:	2001      	movs	r0, #1
   1e4c2:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
   1e4c4:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1e4c8:	690a      	ldr	r2, [r1, #16]
   1e4ca:	429a      	cmp	r2, r3
   1e4cc:	d1e4      	bne.n	1e498 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   1e4ce:	2001      	movs	r0, #1
}
   1e4d0:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
   1e4d2:	2001      	movs	r0, #1
   1e4d4:	4770      	bx	lr
    bool transfer_complete = true;
   1e4d6:	2001      	movs	r0, #1
   1e4d8:	4770      	bx	lr

0001e4da <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1e4da:	f011 0f01 	tst.w	r1, #1
   1e4de:	d009      	beq.n	1e4f4 <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1e4e0:	2301      	movs	r3, #1
   1e4e2:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1e4e6:	f011 0f02 	tst.w	r1, #2
   1e4ea:	d007      	beq.n	1e4fc <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1e4ec:	2301      	movs	r3, #1
   1e4ee:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1e4f2:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1e4f4:	2300      	movs	r3, #0
   1e4f6:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   1e4fa:	e7f4      	b.n	1e4e6 <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1e4fc:	2300      	movs	r3, #0
   1e4fe:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   1e502:	4770      	bx	lr

0001e504 <metal_device_open>:
	if (!bus_name || !strlen(bus_name) ||
   1e504:	b300      	cbz	r0, 1e548 <metal_device_open+0x44>
{
   1e506:	b570      	push	{r4, r5, r6, lr}
   1e508:	b082      	sub	sp, #8
   1e50a:	460c      	mov	r4, r1
   1e50c:	4615      	mov	r5, r2
   1e50e:	4606      	mov	r6, r0
	if (!bus_name || !strlen(bus_name) ||
   1e510:	f7fb fd58 	bl	19fc4 <strlen>
   1e514:	b190      	cbz	r0, 1e53c <metal_device_open+0x38>
   1e516:	b18c      	cbz	r4, 1e53c <metal_device_open+0x38>
	    !dev_name || !strlen(dev_name) ||
   1e518:	4620      	mov	r0, r4
   1e51a:	f7fb fd53 	bl	19fc4 <strlen>
   1e51e:	b168      	cbz	r0, 1e53c <metal_device_open+0x38>
   1e520:	b165      	cbz	r5, 1e53c <metal_device_open+0x38>
	error = metal_bus_find(bus_name, &bus);
   1e522:	a901      	add	r1, sp, #4
   1e524:	4630      	mov	r0, r6
   1e526:	f7f6 fdd9 	bl	150dc <metal_bus_find>
	if (error)
   1e52a:	b928      	cbnz	r0, 1e538 <metal_device_open+0x34>
	if (!bus->ops.dev_open)
   1e52c:	9801      	ldr	r0, [sp, #4]
   1e52e:	6883      	ldr	r3, [r0, #8]
   1e530:	b13b      	cbz	r3, 1e542 <metal_device_open+0x3e>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1e532:	462a      	mov	r2, r5
   1e534:	4621      	mov	r1, r4
   1e536:	4798      	blx	r3
}
   1e538:	b002      	add	sp, #8
   1e53a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e53c:	f06f 0015 	mvn.w	r0, #21
   1e540:	e7fa      	b.n	1e538 <metal_device_open+0x34>
		return -ENODEV;
   1e542:	f06f 0012 	mvn.w	r0, #18
   1e546:	e7f7      	b.n	1e538 <metal_device_open+0x34>
		return -EINVAL;
   1e548:	f06f 0015 	mvn.w	r0, #21
}
   1e54c:	4770      	bx	lr

0001e54e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   1e54e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e552:	b089      	sub	sp, #36	; 0x24
   1e554:	4604      	mov	r4, r0
   1e556:	4688      	mov	r8, r1
   1e558:	4617      	mov	r7, r2
   1e55a:	461e      	mov	r6, r3
   1e55c:	9d10      	ldr	r5, [sp, #64]	; 0x40
	const struct metal_io_ops nops = {
   1e55e:	2220      	movs	r2, #32
   1e560:	2100      	movs	r1, #0
   1e562:	4668      	mov	r0, sp
   1e564:	f7fb fda0 	bl	1a0a8 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
   1e568:	f8c4 8000 	str.w	r8, [r4]
	io->physmap = physmap;
   1e56c:	6067      	str	r7, [r4, #4]
	io->size = size;
   1e56e:	60a6      	str	r6, [r4, #8]
	io->page_shift = page_shift;
   1e570:	60e5      	str	r5, [r4, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1e572:	2d1f      	cmp	r5, #31
   1e574:	d912      	bls.n	1e59c <metal_io_init+0x4e>
		/* avoid overflow */
		io->page_mask = -1UL;
   1e576:	f04f 33ff 	mov.w	r3, #4294967295
   1e57a:	6123      	str	r3, [r4, #16]
	else
		io->page_mask = (1UL << page_shift) - 1UL;
	io->mem_flags = mem_flags;
   1e57c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e57e:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   1e580:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e582:	b193      	cbz	r3, 1e5aa <metal_io_init+0x5c>
   1e584:	3418      	adds	r4, #24
   1e586:	469c      	mov	ip, r3
   1e588:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1e58c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e58e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1e592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   1e596:	b009      	add	sp, #36	; 0x24
   1e598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		io->page_mask = (1UL << page_shift) - 1UL;
   1e59c:	2301      	movs	r3, #1
   1e59e:	fa03 f905 	lsl.w	r9, r3, r5
   1e5a2:	f109 33ff 	add.w	r3, r9, #4294967295
   1e5a6:	6123      	str	r3, [r4, #16]
   1e5a8:	e7e8      	b.n	1e57c <metal_io_init+0x2e>
	io->ops = ops ? *ops : nops;
   1e5aa:	3418      	adds	r4, #24
   1e5ac:	466d      	mov	r5, sp
   1e5ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e5b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e5b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e5b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e5ba:	e7ec      	b.n	1e596 <metal_io_init+0x48>

0001e5bc <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1e5bc:	b530      	push	{r4, r5, lr}
   1e5be:	b083      	sub	sp, #12
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e5c0:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e5c2:	f1b4 3fff 	cmp.w	r4, #4294967295
   1e5c6:	d032      	beq.n	1e62e <metal_io_block_read+0x72>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e5c8:	6885      	ldr	r5, [r0, #8]
   1e5ca:	42a9      	cmp	r1, r5
   1e5cc:	d232      	bcs.n	1e634 <metal_io_block_read+0x78>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   1e5ce:	eb11 0c04 	adds.w	ip, r1, r4
   1e5d2:	d032      	beq.n	1e63a <metal_io_block_read+0x7e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e5d4:	185c      	adds	r4, r3, r1
   1e5d6:	42ac      	cmp	r4, r5
   1e5d8:	d900      	bls.n	1e5dc <metal_io_block_read+0x20>
		len = io->size - offset;
   1e5da:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1e5dc:	6a04      	ldr	r4, [r0, #32]
   1e5de:	b124      	cbz	r4, 1e5ea <metal_io_block_read+0x2e>
		retlen = (*io->ops.block_read)(
   1e5e0:	9300      	str	r3, [sp, #0]
   1e5e2:	2305      	movs	r3, #5
   1e5e4:	47a0      	blx	r4
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1e5e6:	b003      	add	sp, #12
   1e5e8:	bd30      	pop	{r4, r5, pc}
		atomic_thread_fence(memory_order_seq_cst);
   1e5ea:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1e5ee:	4619      	mov	r1, r3
   1e5f0:	e004      	b.n	1e5fc <metal_io_block_read+0x40>
				*(const unsigned char *)ptr;
   1e5f2:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   1e5f6:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   1e5fa:	3901      	subs	r1, #1
		while ( len && (
   1e5fc:	b159      	cbz	r1, 1e616 <metal_io_block_read+0x5a>
   1e5fe:	f012 0f03 	tst.w	r2, #3
   1e602:	d1f6      	bne.n	1e5f2 <metal_io_block_read+0x36>
			((uintptr_t)dest % sizeof(int)) ||
   1e604:	f01c 0f03 	tst.w	ip, #3
   1e608:	d1f3      	bne.n	1e5f2 <metal_io_block_read+0x36>
   1e60a:	e004      	b.n	1e616 <metal_io_block_read+0x5a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1e60c:	f85c 0b04 	ldr.w	r0, [ip], #4
   1e610:	f842 0b04 	str.w	r0, [r2], #4
					len -= sizeof(int))
   1e614:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1e616:	2903      	cmp	r1, #3
   1e618:	dcf8      	bgt.n	1e60c <metal_io_block_read+0x50>
   1e61a:	e004      	b.n	1e626 <metal_io_block_read+0x6a>
				*(const unsigned char *)ptr;
   1e61c:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   1e620:	f802 0b01 	strb.w	r0, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1e624:	3901      	subs	r1, #1
   1e626:	2900      	cmp	r1, #0
   1e628:	d1f8      	bne.n	1e61c <metal_io_block_read+0x60>
	retlen = len;
   1e62a:	4618      	mov	r0, r3
   1e62c:	e7db      	b.n	1e5e6 <metal_io_block_read+0x2a>
		return -ERANGE;
   1e62e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e632:	e7d8      	b.n	1e5e6 <metal_io_block_read+0x2a>
   1e634:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e638:	e7d5      	b.n	1e5e6 <metal_io_block_read+0x2a>
   1e63a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e63e:	e7d2      	b.n	1e5e6 <metal_io_block_read+0x2a>

0001e640 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1e640:	b530      	push	{r4, r5, lr}
   1e642:	b083      	sub	sp, #12
   1e644:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e646:	f1b4 3fff 	cmp.w	r4, #4294967295
   1e64a:	d031      	beq.n	1e6b0 <metal_io_block_write+0x70>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e64c:	6885      	ldr	r5, [r0, #8]
   1e64e:	42a9      	cmp	r1, r5
   1e650:	d231      	bcs.n	1e6b6 <metal_io_block_write+0x76>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   1e652:	eb11 0c04 	adds.w	ip, r1, r4
   1e656:	d031      	beq.n	1e6bc <metal_io_block_write+0x7c>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e658:	185c      	adds	r4, r3, r1
   1e65a:	42ac      	cmp	r4, r5
   1e65c:	d900      	bls.n	1e660 <metal_io_block_write+0x20>
		len = io->size - offset;
   1e65e:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1e660:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1e662:	b18c      	cbz	r4, 1e688 <metal_io_block_write+0x48>
		retlen = (*io->ops.block_write)(
   1e664:	9300      	str	r3, [sp, #0]
   1e666:	2305      	movs	r3, #5
   1e668:	47a0      	blx	r4
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1e66a:	b003      	add	sp, #12
   1e66c:	bd30      	pop	{r4, r5, pc}
				*(const unsigned char *)source;
   1e66e:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   1e672:	f80c 0b01 	strb.w	r0, [ip], #1
			len--;
   1e676:	3901      	subs	r1, #1
		while ( len && (
   1e678:	b169      	cbz	r1, 1e696 <metal_io_block_write+0x56>
   1e67a:	f01c 0f03 	tst.w	ip, #3
   1e67e:	d1f6      	bne.n	1e66e <metal_io_block_write+0x2e>
			((uintptr_t)ptr % sizeof(int)) ||
   1e680:	f012 0f03 	tst.w	r2, #3
   1e684:	d1f3      	bne.n	1e66e <metal_io_block_write+0x2e>
   1e686:	e006      	b.n	1e696 <metal_io_block_write+0x56>
   1e688:	4619      	mov	r1, r3
   1e68a:	e7f5      	b.n	1e678 <metal_io_block_write+0x38>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1e68c:	f852 0b04 	ldr.w	r0, [r2], #4
   1e690:	f84c 0b04 	str.w	r0, [ip], #4
					len -= sizeof(int))
   1e694:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e696:	2903      	cmp	r1, #3
   1e698:	dcf8      	bgt.n	1e68c <metal_io_block_write+0x4c>
		for (; len != 0; ptr++, source++, len--)
   1e69a:	b129      	cbz	r1, 1e6a8 <metal_io_block_write+0x68>
				*(const unsigned char *)source;
   1e69c:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   1e6a0:	f80c 0b01 	strb.w	r0, [ip], #1
		for (; len != 0; ptr++, source++, len--)
   1e6a4:	3901      	subs	r1, #1
   1e6a6:	e7f8      	b.n	1e69a <metal_io_block_write+0x5a>
		atomic_thread_fence(memory_order_seq_cst);
   1e6a8:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1e6ac:	4618      	mov	r0, r3
   1e6ae:	e7dc      	b.n	1e66a <metal_io_block_write+0x2a>
		return -ERANGE;
   1e6b0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e6b4:	e7d9      	b.n	1e66a <metal_io_block_write+0x2a>
   1e6b6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e6ba:	e7d6      	b.n	1e66a <metal_io_block_write+0x2a>
   1e6bc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e6c0:	e7d3      	b.n	1e66a <metal_io_block_write+0x2a>

0001e6c2 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1e6c2:	b530      	push	{r4, r5, lr}
   1e6c4:	b083      	sub	sp, #12
   1e6c6:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1e6c8:	f1b4 3fff 	cmp.w	r4, #4294967295
   1e6cc:	d034      	beq.n	1e738 <metal_io_block_set+0x76>
   1e6ce:	461d      	mov	r5, r3
	return (io->virt != METAL_BAD_VA && offset < io->size
   1e6d0:	6883      	ldr	r3, [r0, #8]
   1e6d2:	4299      	cmp	r1, r3
   1e6d4:	d233      	bcs.n	1e73e <metal_io_block_set+0x7c>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   1e6d6:	eb11 0c04 	adds.w	ip, r1, r4
   1e6da:	d033      	beq.n	1e744 <metal_io_block_set+0x82>
		return -ERANGE;
	if ((offset + len) > io->size)
   1e6dc:	186c      	adds	r4, r5, r1
   1e6de:	429c      	cmp	r4, r3
   1e6e0:	d900      	bls.n	1e6e4 <metal_io_block_set+0x22>
		len = io->size - offset;
   1e6e2:	1a5d      	subs	r5, r3, r1
	retlen = len;
	if (io->ops.block_set) {
   1e6e4:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1e6e6:	b12c      	cbz	r4, 1e6f4 <metal_io_block_set+0x32>
		(*io->ops.block_set)(
   1e6e8:	9500      	str	r5, [sp, #0]
   1e6ea:	2305      	movs	r3, #5
   1e6ec:	47a0      	blx	r4
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   1e6ee:	4628      	mov	r0, r5
}
   1e6f0:	b003      	add	sp, #12
   1e6f2:	bd30      	pop	{r4, r5, pc}
		unsigned int cint = value;
   1e6f4:	4613      	mov	r3, r2
		for (i = 1; i < sizeof(int); i++)
   1e6f6:	2101      	movs	r1, #1
   1e6f8:	e004      	b.n	1e704 <metal_io_block_set+0x42>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1e6fa:	00c8      	lsls	r0, r1, #3
   1e6fc:	fa02 f000 	lsl.w	r0, r2, r0
   1e700:	4303      	orrs	r3, r0
		for (i = 1; i < sizeof(int); i++)
   1e702:	3101      	adds	r1, #1
   1e704:	2903      	cmp	r1, #3
   1e706:	d9f8      	bls.n	1e6fa <metal_io_block_set+0x38>
   1e708:	4629      	mov	r1, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e70a:	b149      	cbz	r1, 1e720 <metal_io_block_set+0x5e>
   1e70c:	f01c 0f03 	tst.w	ip, #3
   1e710:	d006      	beq.n	1e720 <metal_io_block_set+0x5e>
			*(unsigned char *)ptr = (unsigned char) value;
   1e712:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1e716:	3901      	subs	r1, #1
   1e718:	e7f7      	b.n	1e70a <metal_io_block_set+0x48>
			*(unsigned int *)ptr = cint;
   1e71a:	f84c 3b04 	str.w	r3, [ip], #4
						len -= sizeof(int))
   1e71e:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1e720:	2903      	cmp	r1, #3
   1e722:	dcfa      	bgt.n	1e71a <metal_io_block_set+0x58>
   1e724:	e002      	b.n	1e72c <metal_io_block_set+0x6a>
			*(unsigned char *)ptr = (unsigned char) value;
   1e726:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len != 0; ptr++, len--)
   1e72a:	3901      	subs	r1, #1
   1e72c:	2900      	cmp	r1, #0
   1e72e:	d1fa      	bne.n	1e726 <metal_io_block_set+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   1e730:	f3bf 8f5b 	dmb	ish
	return retlen;
   1e734:	4628      	mov	r0, r5
   1e736:	e7db      	b.n	1e6f0 <metal_io_block_set+0x2e>
		return -ERANGE;
   1e738:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e73c:	e7d8      	b.n	1e6f0 <metal_io_block_set+0x2e>
   1e73e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e742:	e7d5      	b.n	1e6f0 <metal_io_block_set+0x2e>
   1e744:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1e748:	e7d2      	b.n	1e6f0 <metal_io_block_set+0x2e>

0001e74a <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1e74a:	2000      	movs	r0, #0
   1e74c:	4770      	bx	lr

0001e74e <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
   1e74e:	b510      	push	{r4, lr}
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	/* CACHE: desc is never written by slave, no need to invalidate */
	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
   1e750:	6984      	ldr	r4, [r0, #24]
   1e752:	eb04 1301 	add.w	r3, r4, r1, lsl #4
	dxp = &vq->vq_descx[desc_idx];

	if (vq->vq_free_cnt == 0) {
   1e756:	f8b0 e024 	ldrh.w	lr, [r0, #36]	; 0x24
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
   1e75a:	1d8a      	adds	r2, r1, #6
   1e75c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1e760:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   1e764:	44e6      	add	lr, ip
   1e766:	f8a0 e024 	strh.w	lr, [r0, #36]	; 0x24
	dxp->ndescs--;
   1e76a:	f10c 3cff 	add.w	ip, ip, #4294967295
   1e76e:	f8a2 c008 	strh.w	ip, [r2, #8]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1e772:	899a      	ldrh	r2, [r3, #12]
   1e774:	f012 0f04 	tst.w	r2, #4
   1e778:	d00f      	beq.n	1e79a <vq_ring_free_chain+0x4c>
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 *
	 * CACHE: desc.next is never read by slave, no need to flush it.
	 */
	dp->next = vq->vq_desc_head_idx;
   1e77a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1e77c:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
   1e77e:	8581      	strh	r1, [r0, #44]	; 0x2c
}
   1e780:	bd10      	pop	{r4, pc}
			dp = &vq->vq_ring.desc[dp->next];
   1e782:	89db      	ldrh	r3, [r3, #14]
   1e784:	eb04 1303 	add.w	r3, r4, r3, lsl #4
			dxp->ndescs--;
   1e788:	1d8a      	adds	r2, r1, #6
   1e78a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   1e78e:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   1e792:	f10c 3cff 	add.w	ip, ip, #4294967295
   1e796:	f8a2 c008 	strh.w	ip, [r2, #8]
		while (dp->flags & VRING_DESC_F_NEXT) {
   1e79a:	899a      	ldrh	r2, [r3, #12]
   1e79c:	f012 0f01 	tst.w	r2, #1
   1e7a0:	d1ef      	bne.n	1e782 <vq_ring_free_chain+0x34>
   1e7a2:	e7ea      	b.n	1e77a <vq_ring_free_chain+0x2c>

0001e7a4 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
   1e7a4:	b410      	push	{r4}
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
   1e7a6:	8944      	ldrh	r4, [r0, #10]
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
   1e7a8:	6144      	str	r4, [r0, #20]
	vr->desc = (struct vring_desc *)p;
   1e7aa:	6181      	str	r1, [r0, #24]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1e7ac:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1e7b0:	61c1      	str	r1, [r0, #28]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1e7b2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
   1e7b6:	1d0b      	adds	r3, r1, #4
   1e7b8:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
   1e7ba:	3301      	adds	r3, #1
   1e7bc:	4252      	negs	r2, r2
   1e7be:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
   1e7c0:	6203      	str	r3, [r0, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e7c2:	6803      	ldr	r3, [r0, #0]
   1e7c4:	699b      	ldr	r3, [r3, #24]
   1e7c6:	b19b      	cbz	r3, 1e7f0 <vq_ring_init+0x4c>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_DEVICE_ONLY*/
}
   1e7c8:	bc10      	pop	{r4}
   1e7ca:	4770      	bx	lr
			vr->desc[i].next = i + 1;
   1e7cc:	6982      	ldr	r2, [r0, #24]
   1e7ce:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1e7d2:	1c59      	adds	r1, r3, #1
   1e7d4:	81d1      	strh	r1, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1e7d6:	460b      	mov	r3, r1
   1e7d8:	1e62      	subs	r2, r4, #1
   1e7da:	429a      	cmp	r2, r3
   1e7dc:	dcf6      	bgt.n	1e7cc <vq_ring_init+0x28>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1e7de:	6982      	ldr	r2, [r0, #24]
   1e7e0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1e7e4:	2200      	movs	r2, #0
   1e7e6:	739a      	strb	r2, [r3, #14]
   1e7e8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1e7ec:	73da      	strb	r2, [r3, #15]
}
   1e7ee:	e7eb      	b.n	1e7c8 <vq_ring_init+0x24>
		for (i = 0; i < size - 1; i++)
   1e7f0:	2300      	movs	r3, #0
   1e7f2:	e7f1      	b.n	1e7d8 <vq_ring_init+0x34>

0001e7f4 <vq_ring_must_notify>:
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1e7f4:	6803      	ldr	r3, [r0, #0]
   1e7f6:	691a      	ldr	r2, [r3, #16]
   1e7f8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1e7fc:	d027      	beq.n	1e84e <vq_ring_must_notify+0x5a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e7fe:	699b      	ldr	r3, [r3, #24]
   1e800:	b11b      	cbz	r3, 1e80a <vq_ring_must_notify+0x16>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e802:	2b01      	cmp	r3, #1
   1e804:	d012      	beq.n	1e82c <vq_ring_must_notify+0x38>
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	}

	return 0;
   1e806:	2000      	movs	r0, #0
   1e808:	4770      	bx	lr
			new_idx = vq->vq_ring.avail->idx;
   1e80a:	69c3      	ldr	r3, [r0, #28]
   1e80c:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   1e80e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_avail_event(&vq->vq_ring);
   1e810:	6a01      	ldr	r1, [r0, #32]
   1e812:	6940      	ldr	r0, [r0, #20]
   1e814:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1e818:	8888      	ldrh	r0, [r1, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1e81a:	1a10      	subs	r0, r2, r0
   1e81c:	b280      	uxth	r0, r0
   1e81e:	3801      	subs	r0, #1
   1e820:	b280      	uxth	r0, r0
   1e822:	4283      	cmp	r3, r0
   1e824:	bf94      	ite	ls
   1e826:	2000      	movls	r0, #0
   1e828:	2001      	movhi	r0, #1
						prev_idx) != 0;
   1e82a:	4770      	bx	lr
			new_idx = vq->vq_ring.used->idx;
   1e82c:	6a03      	ldr	r3, [r0, #32]
   1e82e:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   1e830:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_used_event(&vq->vq_ring);
   1e832:	69c1      	ldr	r1, [r0, #28]
   1e834:	6940      	ldr	r0, [r0, #20]
   1e836:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   1e83a:	8888      	ldrh	r0, [r1, #4]
   1e83c:	1a10      	subs	r0, r2, r0
   1e83e:	b280      	uxth	r0, r0
   1e840:	3801      	subs	r0, #1
   1e842:	b280      	uxth	r0, r0
   1e844:	4283      	cmp	r3, r0
   1e846:	bf94      	ite	ls
   1e848:	2000      	movls	r0, #0
   1e84a:	2001      	movhi	r0, #1
						prev_idx) != 0;
   1e84c:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1e84e:	699b      	ldr	r3, [r3, #24]
   1e850:	b11b      	cbz	r3, 1e85a <vq_ring_must_notify+0x66>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1e852:	2b01      	cmp	r3, #1
   1e854:	d008      	beq.n	1e868 <vq_ring_must_notify+0x74>
	return 0;
   1e856:	2000      	movs	r0, #0
}
   1e858:	4770      	bx	lr
			return (vq->vq_ring.used->flags &
   1e85a:	6a03      	ldr	r3, [r0, #32]
   1e85c:	8818      	ldrh	r0, [r3, #0]
				VRING_USED_F_NO_NOTIFY) == 0;
   1e85e:	f080 0001 	eor.w	r0, r0, #1
   1e862:	f000 0001 	and.w	r0, r0, #1
   1e866:	4770      	bx	lr
			return (vq->vq_ring.avail->flags &
   1e868:	69c3      	ldr	r3, [r0, #28]
   1e86a:	8818      	ldrh	r0, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1e86c:	f080 0001 	eor.w	r0, r0, #1
   1e870:	f000 0001 	and.w	r0, r0, #1
   1e874:	4770      	bx	lr

0001e876 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
   1e876:	b508      	push	{r3, lr}
	if (vq->notify)
   1e878:	6903      	ldr	r3, [r0, #16]
   1e87a:	b103      	cbz	r3, 1e87e <vq_ring_notify+0x8>
		vq->notify(vq);
   1e87c:	4798      	blx	r3
}
   1e87e:	bd08      	pop	{r3, pc}

0001e880 <vq_ring_update_avail>:
{
   1e880:	b410      	push	{r4}
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1e882:	69c4      	ldr	r4, [r0, #28]
   1e884:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1e888:	8942      	ldrh	r2, [r0, #10]
   1e88a:	3a01      	subs	r2, #1
   1e88c:	b212      	sxth	r2, r2
   1e88e:	4013      	ands	r3, r2
   1e890:	b29b      	uxth	r3, r3
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1e892:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   1e896:	8099      	strh	r1, [r3, #4]
	atomic_thread_fence(memory_order_seq_cst);
   1e898:	f3bf 8f5b 	dmb	ish
	vq->vq_ring.avail->idx++;
   1e89c:	69c2      	ldr	r2, [r0, #28]
   1e89e:	8853      	ldrh	r3, [r2, #2]
   1e8a0:	3301      	adds	r3, #1
   1e8a2:	8053      	strh	r3, [r2, #2]
	vq->vq_queued_cnt++;
   1e8a4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1e8a6:	3301      	adds	r3, #1
   1e8a8:	84c3      	strh	r3, [r0, #38]	; 0x26
}
   1e8aa:	bc10      	pop	{r4}
   1e8ac:	4770      	bx	lr

0001e8ae <vq_ring_add_buffer>:
{
   1e8ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8b2:	4683      	mov	fp, r0
   1e8b4:	4688      	mov	r8, r1
   1e8b6:	4610      	mov	r0, r2
   1e8b8:	461f      	mov	r7, r3
	needed = readable + writable;
   1e8ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1e8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e8be:	441e      	add	r6, r3
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1e8c0:	2500      	movs	r5, #0
   1e8c2:	e01d      	b.n	1e900 <vq_ring_add_buffer+0x52>
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e8c4:	f04f 31ff 	mov.w	r1, #4294967295
   1e8c8:	e02b      	b.n	1e922 <vq_ring_add_buffer+0x74>
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
	if (!io->ops.offset_to_phys) {
		unsigned long page = (io->page_shift >=
   1e8ca:	68c3      	ldr	r3, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   1e8cc:	2b1f      	cmp	r3, #31
   1e8ce:	d80d      	bhi.n	1e8ec <vq_ring_add_buffer+0x3e>
   1e8d0:	fa21 f303 	lsr.w	r3, r1, r3
		return (io->physmap && offset < io->size
   1e8d4:	6842      	ldr	r2, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1e8d6:	b15a      	cbz	r2, 1e8f0 <vq_ring_add_buffer+0x42>
		return (io->physmap && offset < io->size
   1e8d8:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1e8dc:	4561      	cmp	r1, ip
   1e8de:	d20a      	bcs.n	1e8f6 <vq_ring_add_buffer+0x48>
			? io->physmap[page] + (offset & io->page_mask)
   1e8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1e8e4:	6900      	ldr	r0, [r0, #16]
   1e8e6:	4008      	ands	r0, r1
			: METAL_BAD_PHYS);
   1e8e8:	4418      	add	r0, r3
   1e8ea:	e01e      	b.n	1e92a <vq_ring_add_buffer+0x7c>
				     0 : offset >> io->page_shift);
   1e8ec:	2300      	movs	r3, #0
   1e8ee:	e7f1      	b.n	1e8d4 <vq_ring_add_buffer+0x26>
			: METAL_BAD_PHYS);
   1e8f0:	f04f 30ff 	mov.w	r0, #4294967295
   1e8f4:	e019      	b.n	1e92a <vq_ring_add_buffer+0x7c>
   1e8f6:	f04f 30ff 	mov.w	r0, #4294967295
   1e8fa:	e016      	b.n	1e92a <vq_ring_add_buffer+0x7c>
   1e8fc:	3501      	adds	r5, #1
   1e8fe:	89e0      	ldrh	r0, [r4, #14]
   1e900:	42b5      	cmp	r5, r6
   1e902:	da2a      	bge.n	1e95a <vq_ring_add_buffer+0xac>
		dp = &desc[idx];
   1e904:	ea4f 1a00 	mov.w	sl, r0, lsl #4
   1e908:	eb08 1400 	add.w	r4, r8, r0, lsl #4
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1e90c:	eb07 09c5 	add.w	r9, r7, r5, lsl #3
   1e910:	f857 3035 	ldr.w	r3, [r7, r5, lsl #3]
	struct metal_io_region *io = vq->shm_io;
   1e914:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1e918:	6801      	ldr	r1, [r0, #0]
   1e91a:	1a59      	subs	r1, r3, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e91c:	6883      	ldr	r3, [r0, #8]
   1e91e:	4299      	cmp	r1, r3
   1e920:	d2d0      	bcs.n	1e8c4 <vq_ring_add_buffer+0x16>
	if (!io->ops.offset_to_phys) {
   1e922:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1e924:	2b00      	cmp	r3, #0
   1e926:	d0d0      	beq.n	1e8ca <vq_ring_add_buffer+0x1c>
	}

	return io->ops.offset_to_phys(io, offset);
   1e928:	4798      	blx	r3
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1e92a:	2300      	movs	r3, #0
   1e92c:	f848 000a 	str.w	r0, [r8, sl]
   1e930:	6063      	str	r3, [r4, #4]
		dp->len = buf_list[i].len;
   1e932:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e936:	60a2      	str	r2, [r4, #8]
		dp->flags = 0;
   1e938:	7323      	strb	r3, [r4, #12]
   1e93a:	7363      	strb	r3, [r4, #13]
		if (i < needed - 1)
   1e93c:	1e73      	subs	r3, r6, #1
   1e93e:	42ab      	cmp	r3, r5
   1e940:	dd03      	ble.n	1e94a <vq_ring_add_buffer+0x9c>
			dp->flags |= VRING_DESC_F_NEXT;
   1e942:	2301      	movs	r3, #1
   1e944:	7323      	strb	r3, [r4, #12]
   1e946:	2300      	movs	r3, #0
   1e948:	7363      	strb	r3, [r4, #13]
		if (i >= readable)
   1e94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e94c:	429d      	cmp	r5, r3
   1e94e:	dbd5      	blt.n	1e8fc <vq_ring_add_buffer+0x4e>
			dp->flags |= VRING_DESC_F_WRITE;
   1e950:	89a3      	ldrh	r3, [r4, #12]
   1e952:	f043 0302 	orr.w	r3, r3, #2
   1e956:	81a3      	strh	r3, [r4, #12]
   1e958:	e7d0      	b.n	1e8fc <vq_ring_add_buffer+0x4e>
}
   1e95a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001e95e <virtqueue_create>:
{
   1e95e:	b510      	push	{r4, lr}
   1e960:	4604      	mov	r4, r0
   1e962:	9804      	ldr	r0, [sp, #16]
		vq->vq_dev = virt_dev;
   1e964:	6004      	str	r4, [r0, #0]
		vq->vq_name = name;
   1e966:	6042      	str	r2, [r0, #4]
		vq->vq_queue_index = id;
   1e968:	8101      	strh	r1, [r0, #8]
		vq->vq_nentries = ring->num_descs;
   1e96a:	891a      	ldrh	r2, [r3, #8]
   1e96c:	8142      	strh	r2, [r0, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1e96e:	8482      	strh	r2, [r0, #36]	; 0x24
		vq->callback = callback;
   1e970:	9a02      	ldr	r2, [sp, #8]
   1e972:	60c2      	str	r2, [r0, #12]
		vq->notify = notify;
   1e974:	9a03      	ldr	r2, [sp, #12]
   1e976:	6102      	str	r2, [r0, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1e978:	685a      	ldr	r2, [r3, #4]
   1e97a:	6819      	ldr	r1, [r3, #0]
   1e97c:	f7ff ff12 	bl	1e7a4 <vq_ring_init>
}
   1e980:	2000      	movs	r0, #0
   1e982:	bd10      	pop	{r4, pc}

0001e984 <virtqueue_add_buffer>:
{
   1e984:	b570      	push	{r4, r5, r6, lr}
   1e986:	b082      	sub	sp, #8
   1e988:	4604      	mov	r4, r0
	needed = readable + writable;
   1e98a:	18d5      	adds	r5, r2, r3
		head_idx = vq->vq_desc_head_idx;
   1e98c:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
		dxp->cookie = cookie;
   1e98e:	f106 0c06 	add.w	ip, r6, #6
   1e992:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   1e996:	f8dd e018 	ldr.w	lr, [sp, #24]
   1e99a:	f8cc e004 	str.w	lr, [ip, #4]
		dxp->ndescs = needed;
   1e99e:	b2ad      	uxth	r5, r5
   1e9a0:	f8ac 5008 	strh.w	r5, [ip, #8]
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1e9a4:	9301      	str	r3, [sp, #4]
   1e9a6:	9200      	str	r2, [sp, #0]
   1e9a8:	460b      	mov	r3, r1
   1e9aa:	4632      	mov	r2, r6
   1e9ac:	6981      	ldr	r1, [r0, #24]
   1e9ae:	f7ff ff7e 	bl	1e8ae <vq_ring_add_buffer>
		vq->vq_desc_head_idx = idx;
   1e9b2:	85a0      	strh	r0, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1e9b4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1e9b6:	1b5d      	subs	r5, r3, r5
   1e9b8:	84a5      	strh	r5, [r4, #36]	; 0x24
		vq_ring_update_avail(vq, head_idx);
   1e9ba:	4631      	mov	r1, r6
   1e9bc:	4620      	mov	r0, r4
   1e9be:	f7ff ff5f 	bl	1e880 <vq_ring_update_avail>
}
   1e9c2:	2000      	movs	r0, #0
   1e9c4:	b002      	add	sp, #8
   1e9c6:	bd70      	pop	{r4, r5, r6, pc}

0001e9c8 <virtqueue_get_buffer>:
{
   1e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1e9ca:	4607      	mov	r7, r0
   1e9cc:	b330      	cbz	r0, 1ea1c <virtqueue_get_buffer+0x54>
   1e9ce:	468c      	mov	ip, r1
   1e9d0:	4616      	mov	r6, r2
   1e9d2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1e9d4:	6a02      	ldr	r2, [r0, #32]
   1e9d6:	8851      	ldrh	r1, [r2, #2]
   1e9d8:	428b      	cmp	r3, r1
   1e9da:	d020      	beq.n	1ea1e <virtqueue_get_buffer+0x56>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1e9dc:	1c59      	adds	r1, r3, #1
   1e9de:	85c1      	strh	r1, [r0, #46]	; 0x2e
   1e9e0:	b21b      	sxth	r3, r3
   1e9e2:	8945      	ldrh	r5, [r0, #10]
   1e9e4:	3d01      	subs	r5, #1
   1e9e6:	b22d      	sxth	r5, r5
   1e9e8:	401d      	ands	r5, r3
   1e9ea:	b2ad      	uxth	r5, r5
	atomic_thread_fence(memory_order_seq_cst);
   1e9ec:	f3bf 8f5b 	dmb	ish
	desc_idx = (uint16_t)uep->id;
   1e9f0:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   1e9f4:	685c      	ldr	r4, [r3, #4]
   1e9f6:	b2a1      	uxth	r1, r4
	if (len)
   1e9f8:	f1bc 0f00 	cmp.w	ip, #0
   1e9fc:	d002      	beq.n	1ea04 <virtqueue_get_buffer+0x3c>
		*len = uep->len;
   1e9fe:	689b      	ldr	r3, [r3, #8]
   1ea00:	f8cc 3000 	str.w	r3, [ip]
	vq_ring_free_chain(vq, desc_idx);
   1ea04:	4638      	mov	r0, r7
   1ea06:	f7ff fea2 	bl	1e74e <vq_ring_free_chain>
	cookie = vq->vq_descx[desc_idx].cookie;
   1ea0a:	b2a4      	uxth	r4, r4
   1ea0c:	3406      	adds	r4, #6
   1ea0e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
   1ea12:	6860      	ldr	r0, [r4, #4]
	vq->vq_descx[desc_idx].cookie = NULL;
   1ea14:	2300      	movs	r3, #0
   1ea16:	6063      	str	r3, [r4, #4]
	if (idx)
   1ea18:	b106      	cbz	r6, 1ea1c <virtqueue_get_buffer+0x54>
		*idx = used_idx;
   1ea1a:	8035      	strh	r5, [r6, #0]
}
   1ea1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   1ea1e:	2000      	movs	r0, #0
   1ea20:	e7fc      	b.n	1ea1c <virtqueue_get_buffer+0x54>

0001ea22 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1ea22:	6983      	ldr	r3, [r0, #24]
   1ea24:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1ea28:	6898      	ldr	r0, [r3, #8]
   1ea2a:	4770      	bx	lr

0001ea2c <virtqueue_get_available_buffer>:
{
   1ea2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ea30:	460f      	mov	r7, r1
   1ea32:	4691      	mov	r9, r2
	atomic_thread_fence(memory_order_seq_cst);
   1ea34:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ea38:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1ea3a:	69c1      	ldr	r1, [r0, #28]
   1ea3c:	884a      	ldrh	r2, [r1, #2]
   1ea3e:	4293      	cmp	r3, r2
   1ea40:	d063      	beq.n	1eb0a <virtqueue_get_available_buffer+0xde>
   1ea42:	4606      	mov	r6, r0
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1ea44:	1c5a      	adds	r2, r3, #1
   1ea46:	8602      	strh	r2, [r0, #48]	; 0x30
   1ea48:	b21b      	sxth	r3, r3
   1ea4a:	8942      	ldrh	r2, [r0, #10]
   1ea4c:	3a01      	subs	r2, #1
   1ea4e:	b212      	sxth	r2, r2
   1ea50:	4013      	ands	r3, r2
   1ea52:	b29b      	uxth	r3, r3
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1ea54:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1ea58:	889a      	ldrh	r2, [r3, #4]
   1ea5a:	b293      	uxth	r3, r2
   1ea5c:	803a      	strh	r2, [r7, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1ea5e:	6982      	ldr	r2, [r0, #24]
   1ea60:	011b      	lsls	r3, r3, #4
   1ea62:	f852 8003 	ldr.w	r8, [r2, r3]
	struct metal_io_region *io = vq->shm_io;
   1ea66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
	if (!io->ops.phys_to_offset) {
   1ea68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea6a:	b1a3      	cbz	r3, 1ea96 <virtqueue_get_available_buffer+0x6a>
			offset += io->page_mask + 1;
		} while (offset < io->size);
		return METAL_BAD_OFFSET;
	}

	return (*io->ops.phys_to_offset)(io, phys);
   1ea6c:	4641      	mov	r1, r8
   1ea6e:	4620      	mov	r0, r4
   1ea70:	4798      	blx	r3
   1ea72:	4605      	mov	r5, r0
	return (io->virt != METAL_BAD_VA && offset < io->size
   1ea74:	6820      	ldr	r0, [r4, #0]
		: NULL);
   1ea76:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ea7a:	d042      	beq.n	1eb02 <virtqueue_get_available_buffer+0xd6>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1ea7c:	68a3      	ldr	r3, [r4, #8]
   1ea7e:	42ab      	cmp	r3, r5
   1ea80:	d941      	bls.n	1eb06 <virtqueue_get_available_buffer+0xda>
		? (void *)((uintptr_t)io->virt + offset)
   1ea82:	4428      	add	r0, r5
	*len = vq->vq_ring.desc[*avail_idx].len;
   1ea84:	69b3      	ldr	r3, [r6, #24]
   1ea86:	883a      	ldrh	r2, [r7, #0]
   1ea88:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ea8c:	689b      	ldr	r3, [r3, #8]
   1ea8e:	f8c9 3000 	str.w	r3, [r9]
}
   1ea92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1ea96:	6925      	ldr	r5, [r4, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1ea98:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ea9c:	d002      	beq.n	1eaa4 <virtqueue_get_available_buffer+0x78>
   1ea9e:	ea08 0505 	and.w	r5, r8, r5
   1eaa2:	e017      	b.n	1ead4 <virtqueue_get_available_buffer+0xa8>
   1eaa4:	6863      	ldr	r3, [r4, #4]
   1eaa6:	681d      	ldr	r5, [r3, #0]
   1eaa8:	eba8 0505 	sub.w	r5, r8, r5
   1eaac:	e012      	b.n	1ead4 <virtqueue_get_available_buffer+0xa8>
				     0 : offset >> io->page_shift);
   1eaae:	2300      	movs	r3, #0
   1eab0:	e018      	b.n	1eae4 <virtqueue_get_available_buffer+0xb8>
			: METAL_BAD_PHYS);
   1eab2:	f04f 30ff 	mov.w	r0, #4294967295
   1eab6:	e005      	b.n	1eac4 <virtqueue_get_available_buffer+0x98>
   1eab8:	f04f 30ff 	mov.w	r0, #4294967295
   1eabc:	e002      	b.n	1eac4 <virtqueue_get_available_buffer+0x98>
	return io->ops.offset_to_phys(io, offset);
   1eabe:	4629      	mov	r1, r5
   1eac0:	4620      	mov	r0, r4
   1eac2:	4798      	blx	r3
			if (metal_io_phys(io, offset) == phys)
   1eac4:	4580      	cmp	r8, r0
   1eac6:	d0d5      	beq.n	1ea74 <virtqueue_get_available_buffer+0x48>
			offset += io->page_mask + 1;
   1eac8:	6920      	ldr	r0, [r4, #16]
   1eaca:	4428      	add	r0, r5
   1eacc:	1c45      	adds	r5, r0, #1
		} while (offset < io->size);
   1eace:	68a3      	ldr	r3, [r4, #8]
   1ead0:	429d      	cmp	r5, r3
   1ead2:	d213      	bcs.n	1eafc <virtqueue_get_available_buffer+0xd0>
	if (!io->ops.offset_to_phys) {
   1ead4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ead6:	2b00      	cmp	r3, #0
   1ead8:	d1f1      	bne.n	1eabe <virtqueue_get_available_buffer+0x92>
		unsigned long page = (io->page_shift >=
   1eada:	68e3      	ldr	r3, [r4, #12]
				     0 : offset >> io->page_shift);
   1eadc:	2b1f      	cmp	r3, #31
   1eade:	d8e6      	bhi.n	1eaae <virtqueue_get_available_buffer+0x82>
   1eae0:	fa25 f303 	lsr.w	r3, r5, r3
		return (io->physmap && offset < io->size
   1eae4:	6862      	ldr	r2, [r4, #4]
			: METAL_BAD_PHYS);
   1eae6:	2a00      	cmp	r2, #0
   1eae8:	d0e3      	beq.n	1eab2 <virtqueue_get_available_buffer+0x86>
		return (io->physmap && offset < io->size
   1eaea:	68a1      	ldr	r1, [r4, #8]
   1eaec:	428d      	cmp	r5, r1
   1eaee:	d2e3      	bcs.n	1eab8 <virtqueue_get_available_buffer+0x8c>
			? io->physmap[page] + (offset & io->page_mask)
   1eaf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   1eaf4:	6923      	ldr	r3, [r4, #16]
   1eaf6:	402b      	ands	r3, r5
			: METAL_BAD_PHYS);
   1eaf8:	4418      	add	r0, r3
   1eafa:	e7e3      	b.n	1eac4 <virtqueue_get_available_buffer+0x98>
		return METAL_BAD_OFFSET;
   1eafc:	f04f 35ff 	mov.w	r5, #4294967295
   1eb00:	e7b8      	b.n	1ea74 <virtqueue_get_available_buffer+0x48>
		: NULL);
   1eb02:	2000      	movs	r0, #0
   1eb04:	e7be      	b.n	1ea84 <virtqueue_get_available_buffer+0x58>
   1eb06:	2000      	movs	r0, #0
   1eb08:	e7bc      	b.n	1ea84 <virtqueue_get_available_buffer+0x58>
		return NULL;
   1eb0a:	2000      	movs	r0, #0
   1eb0c:	e7c1      	b.n	1ea92 <virtqueue_get_available_buffer+0x66>

0001eb0e <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1eb0e:	6803      	ldr	r3, [r0, #0]
   1eb10:	691a      	ldr	r2, [r3, #16]
   1eb12:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1eb16:	d01b      	beq.n	1eb50 <virtqueue_disable_cb+0x42>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1eb18:	699b      	ldr	r3, [r3, #24]
   1eb1a:	b94b      	cbnz	r3, 1eb30 <virtqueue_disable_cb+0x22>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1eb1c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1eb1e:	8942      	ldrh	r2, [r0, #10]
   1eb20:	1a9b      	subs	r3, r3, r2
   1eb22:	b29b      	uxth	r3, r3
			vring_used_event(&vq->vq_ring) =
   1eb24:	69c2      	ldr	r2, [r0, #28]
   1eb26:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1eb28:	3b01      	subs	r3, #1
			vring_used_event(&vq->vq_ring) =
   1eb2a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1eb2e:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1eb30:	6803      	ldr	r3, [r0, #0]
   1eb32:	699b      	ldr	r3, [r3, #24]
   1eb34:	2b01      	cmp	r3, #1
   1eb36:	d000      	beq.n	1eb3a <virtqueue_disable_cb+0x2c>
}
   1eb38:	4770      	bx	lr
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1eb3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1eb3c:	8942      	ldrh	r2, [r0, #10]
   1eb3e:	1a9b      	subs	r3, r3, r2
   1eb40:	b29b      	uxth	r3, r3
			vring_avail_event(&vq->vq_ring) =
   1eb42:	6a02      	ldr	r2, [r0, #32]
   1eb44:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1eb46:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1eb48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1eb4c:	8093      	strh	r3, [r2, #4]
   1eb4e:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1eb50:	699b      	ldr	r3, [r3, #24]
   1eb52:	b923      	cbnz	r3, 1eb5e <virtqueue_disable_cb+0x50>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1eb54:	69c2      	ldr	r2, [r0, #28]
   1eb56:	8813      	ldrh	r3, [r2, #0]
   1eb58:	f043 0301 	orr.w	r3, r3, #1
   1eb5c:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1eb5e:	6803      	ldr	r3, [r0, #0]
   1eb60:	699b      	ldr	r3, [r3, #24]
   1eb62:	2b01      	cmp	r3, #1
   1eb64:	d1e8      	bne.n	1eb38 <virtqueue_disable_cb+0x2a>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1eb66:	6a02      	ldr	r2, [r0, #32]
   1eb68:	8813      	ldrh	r3, [r2, #0]
   1eb6a:	f043 0301 	orr.w	r3, r3, #1
   1eb6e:	8013      	strh	r3, [r2, #0]
}
   1eb70:	e7e2      	b.n	1eb38 <virtqueue_disable_cb+0x2a>

0001eb72 <virtqueue_kick>:
{
   1eb72:	b510      	push	{r4, lr}
   1eb74:	4604      	mov	r4, r0
	atomic_thread_fence(memory_order_seq_cst);
   1eb76:	f3bf 8f5b 	dmb	ish
	if (vq_ring_must_notify(vq))
   1eb7a:	f7ff fe3b 	bl	1e7f4 <vq_ring_must_notify>
   1eb7e:	b910      	cbnz	r0, 1eb86 <virtqueue_kick+0x14>
	vq->vq_queued_cnt = 0;
   1eb80:	2300      	movs	r3, #0
   1eb82:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1eb84:	bd10      	pop	{r4, pc}
		vq_ring_notify(vq);
   1eb86:	4620      	mov	r0, r4
   1eb88:	f7ff fe75 	bl	1e876 <vq_ring_notify>
   1eb8c:	e7f8      	b.n	1eb80 <virtqueue_kick+0xe>

0001eb8e <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1eb8e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1eb90:	69c1      	ldr	r1, [r0, #28]
   1eb92:	884a      	ldrh	r2, [r1, #2]
   1eb94:	4293      	cmp	r3, r2
   1eb96:	d00d      	beq.n	1ebb4 <virtqueue_get_desc_size+0x26>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1eb98:	b21b      	sxth	r3, r3
   1eb9a:	8942      	ldrh	r2, [r0, #10]
   1eb9c:	3a01      	subs	r2, #1
   1eb9e:	b212      	sxth	r2, r2
   1eba0:	4013      	ands	r3, r2
   1eba2:	b29b      	uxth	r3, r3
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1eba4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1eba8:	889a      	ldrh	r2, [r3, #4]
	len = vq->vq_ring.desc[avail_idx].len;
   1ebaa:	6983      	ldr	r3, [r0, #24]
   1ebac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ebb0:	6898      	ldr	r0, [r3, #8]
	return len;
   1ebb2:	4770      	bx	lr
		return 0;
   1ebb4:	2000      	movs	r0, #0
}
   1ebb6:	4770      	bx	lr

0001ebb8 <virtqueue_notification>:
{
   1ebb8:	b508      	push	{r3, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1ebba:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1ebbe:	68c3      	ldr	r3, [r0, #12]
   1ebc0:	b103      	cbz	r3, 1ebc4 <virtqueue_notification+0xc>
		vq->callback(vq);
   1ebc2:	4798      	blx	r3
}
   1ebc4:	bd08      	pop	{r3, pc}

0001ebc6 <rpmsg_get_address>:
{
   1ebc6:	b500      	push	{lr}
   1ebc8:	4686      	mov	lr, r0
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1ebca:	2300      	movs	r3, #0
   1ebcc:	e000      	b.n	1ebd0 <rpmsg_get_address+0xa>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
   1ebce:	3301      	adds	r3, #1
	for (bit = start;
   1ebd0:	4299      	cmp	r1, r3
   1ebd2:	d909      	bls.n	1ebe8 <rpmsg_get_address+0x22>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1ebd4:	095a      	lsrs	r2, r3, #5
   1ebd6:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1ebda:	f003 0c1f 	and.w	ip, r3, #31
   1ebde:	fa22 f20c 	lsr.w	r2, r2, ip
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   1ebe2:	f012 0f01 	tst.w	r2, #1
   1ebe6:	d1f2      	bne.n	1ebce <rpmsg_get_address+0x8>
	if (nextbit < (uint32_t)size) {
   1ebe8:	4299      	cmp	r1, r3
   1ebea:	d90e      	bls.n	1ec0a <rpmsg_get_address+0x44>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1ebec:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1ebf0:	0959      	lsrs	r1, r3, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1ebf2:	f003 031f 	and.w	r3, r3, #31
   1ebf6:	2201      	movs	r2, #1
   1ebf8:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1ebfc:	f85e 2021 	ldr.w	r2, [lr, r1, lsl #2]
   1ec00:	431a      	orrs	r2, r3
   1ec02:	f84e 2021 	str.w	r2, [lr, r1, lsl #2]
}
   1ec06:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned int addr = RPMSG_ADDR_ANY;
   1ec0a:	f04f 30ff 	mov.w	r0, #4294967295
	return addr;
   1ec0e:	e7fa      	b.n	1ec06 <rpmsg_get_address+0x40>

0001ec10 <rpmsg_release_address>:
	if (addr >= 0 && addr < size)
   1ec10:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   1ec14:	d40d      	bmi.n	1ec32 <rpmsg_release_address+0x22>
   1ec16:	428a      	cmp	r2, r1
   1ec18:	da0b      	bge.n	1ec32 <rpmsg_release_address+0x22>
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1ec1a:	0951      	lsrs	r1, r2, #5
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1ec1c:	f002 021f 	and.w	r2, r2, #31
   1ec20:	2301      	movs	r3, #1
   1ec22:	fa03 f202 	lsl.w	r2, r3, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1ec26:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   1ec2a:	ea23 0302 	bic.w	r3, r3, r2
   1ec2e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1ec32:	4770      	bx	lr

0001ec34 <rpmsg_unregister_endpoint>:
{
   1ec34:	b570      	push	{r4, r5, r6, lr}
   1ec36:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1ec38:	6a06      	ldr	r6, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1ec3a:	f106 0558 	add.w	r5, r6, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   1ec3e:	f04f 32ff 	mov.w	r2, #4294967295
   1ec42:	f04f 33ff 	mov.w	r3, #4294967295
   1ec46:	4628      	mov	r0, r5
   1ec48:	f7f7 fbd8 	bl	163fc <z_impl_k_sem_take>
	if (ept->addr != RPMSG_ADDR_ANY)
   1ec4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ec4e:	f1b2 3fff 	cmp.w	r2, #4294967295
   1ec52:	d10e      	bne.n	1ec72 <rpmsg_unregister_endpoint+0x3e>
	metal_list_del(&ept->node);
   1ec54:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1ec58:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ec5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1ec5c:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1ec5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ec60:	6011      	str	r1, [r2, #0]
	node->prev = node;
   1ec62:	63a3      	str	r3, [r4, #56]	; 0x38
	node->next = node;
   1ec64:	6363      	str	r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1ec66:	2300      	movs	r3, #0
   1ec68:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1ec6a:	4628      	mov	r0, r5
   1ec6c:	f7f7 fb9e 	bl	163ac <z_impl_k_sem_give>
}
   1ec70:	bd70      	pop	{r4, r5, r6, pc}
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1ec72:	2180      	movs	r1, #128	; 0x80
   1ec74:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1ec78:	f7ff ffca 	bl	1ec10 <rpmsg_release_address>
   1ec7c:	e7ea      	b.n	1ec54 <rpmsg_unregister_endpoint+0x20>

0001ec7e <rpmsg_send_ns_message>:
{
   1ec7e:	b510      	push	{r4, lr}
   1ec80:	b08c      	sub	sp, #48	; 0x30
   1ec82:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1ec84:	910b      	str	r1, [sp, #44]	; 0x2c
	ns_msg.addr = ept->addr;
   1ec86:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ec88:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1ec8a:	2220      	movs	r2, #32
   1ec8c:	4601      	mov	r1, r0
   1ec8e:	a802      	add	r0, sp, #8
   1ec90:	f7fb f97e 	bl	19f90 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1ec94:	2301      	movs	r3, #1
   1ec96:	9301      	str	r3, [sp, #4]
   1ec98:	2328      	movs	r3, #40	; 0x28
   1ec9a:	9300      	str	r3, [sp, #0]
   1ec9c:	ab02      	add	r3, sp, #8
   1ec9e:	2235      	movs	r2, #53	; 0x35
   1eca0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1eca2:	4620      	mov	r0, r4
   1eca4:	f7f6 fb76 	bl	15394 <rpmsg_send_offchannel_raw>
	if (ret < 0)
   1eca8:	2800      	cmp	r0, #0
   1ecaa:	db00      	blt.n	1ecae <rpmsg_send_ns_message+0x30>
		return RPMSG_SUCCESS;
   1ecac:	2000      	movs	r0, #0
}
   1ecae:	b00c      	add	sp, #48	; 0x30
   1ecb0:	bd10      	pop	{r4, pc}

0001ecb2 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1ecb2:	b138      	cbz	r0, 1ecc4 <rpmsg_hold_rx_buffer+0x12>
{
   1ecb4:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   1ecb6:	6a00      	ldr	r0, [r0, #32]
   1ecb8:	b118      	cbz	r0, 1ecc2 <rpmsg_hold_rx_buffer+0x10>
   1ecba:	b111      	cbz	r1, 1ecc2 <rpmsg_hold_rx_buffer+0x10>
	if (rdev->ops.hold_rx_buffer)
   1ecbc:	6f83      	ldr	r3, [r0, #120]	; 0x78
   1ecbe:	b103      	cbz	r3, 1ecc2 <rpmsg_hold_rx_buffer+0x10>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1ecc0:	4798      	blx	r3
}
   1ecc2:	bd08      	pop	{r3, pc}
   1ecc4:	4770      	bx	lr

0001ecc6 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1ecc6:	b138      	cbz	r0, 1ecd8 <rpmsg_release_rx_buffer+0x12>
{
   1ecc8:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   1ecca:	6a00      	ldr	r0, [r0, #32]
   1eccc:	b118      	cbz	r0, 1ecd6 <rpmsg_release_rx_buffer+0x10>
   1ecce:	b111      	cbz	r1, 1ecd6 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   1ecd0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1ecd2:	b103      	cbz	r3, 1ecd6 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1ecd4:	4798      	blx	r3
}
   1ecd6:	bd08      	pop	{r3, pc}
   1ecd8:	4770      	bx	lr

0001ecda <rpmsg_get_tx_payload_buffer>:
{
   1ecda:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !len)
   1ecdc:	b130      	cbz	r0, 1ecec <rpmsg_get_tx_payload_buffer+0x12>
   1ecde:	6a00      	ldr	r0, [r0, #32]
   1ece0:	b120      	cbz	r0, 1ecec <rpmsg_get_tx_payload_buffer+0x12>
   1ece2:	b121      	cbz	r1, 1ecee <rpmsg_get_tx_payload_buffer+0x14>
	if (rdev->ops.get_tx_payload_buffer)
   1ece4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1ece8:	b11b      	cbz	r3, 1ecf2 <rpmsg_get_tx_payload_buffer+0x18>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1ecea:	4798      	blx	r3
}
   1ecec:	bd08      	pop	{r3, pc}
		return NULL;
   1ecee:	4608      	mov	r0, r1
   1ecf0:	e7fc      	b.n	1ecec <rpmsg_get_tx_payload_buffer+0x12>
	return NULL;
   1ecf2:	2000      	movs	r0, #0
   1ecf4:	e7fa      	b.n	1ecec <rpmsg_get_tx_payload_buffer+0x12>

0001ecf6 <rpmsg_get_endpoint>:
{
   1ecf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ecfa:	4680      	mov	r8, r0
   1ecfc:	460e      	mov	r6, r1
   1ecfe:	4617      	mov	r7, r2
   1ed00:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1ed02:	6804      	ldr	r4, [r0, #0]
   1ed04:	e005      	b.n	1ed12 <rpmsg_get_endpoint+0x1c>
		int name_match = 0;
   1ed06:	2000      	movs	r0, #0
   1ed08:	e017      	b.n	1ed3a <rpmsg_get_endpoint+0x44>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1ed0a:	f1b7 3fff 	cmp.w	r7, #4294967295
   1ed0e:	d01f      	beq.n	1ed50 <rpmsg_get_endpoint+0x5a>
	metal_list_for_each(&rdev->endpoints, node) {
   1ed10:	6824      	ldr	r4, [r4, #0]
   1ed12:	45a0      	cmp	r8, r4
   1ed14:	d021      	beq.n	1ed5a <rpmsg_get_endpoint+0x64>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1ed16:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ed1a:	f1b7 3fff 	cmp.w	r7, #4294967295
   1ed1e:	d002      	beq.n	1ed26 <rpmsg_get_endpoint+0x30>
   1ed20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ed22:	42bb      	cmp	r3, r7
   1ed24:	d01a      	beq.n	1ed5c <rpmsg_get_endpoint+0x66>
		if (name)
   1ed26:	2e00      	cmp	r6, #0
   1ed28:	d0ed      	beq.n	1ed06 <rpmsg_get_endpoint+0x10>
			name_match = !strncmp(ept->name, name,
   1ed2a:	2220      	movs	r2, #32
   1ed2c:	4631      	mov	r1, r6
   1ed2e:	4628      	mov	r0, r5
   1ed30:	f7fb f966 	bl	1a000 <strncmp>
   1ed34:	fab0 f080 	clz	r0, r0
   1ed38:	0940      	lsrs	r0, r0, #5
		if (!name || !name_match)
   1ed3a:	2e00      	cmp	r6, #0
   1ed3c:	d0e8      	beq.n	1ed10 <rpmsg_get_endpoint+0x1a>
   1ed3e:	2800      	cmp	r0, #0
   1ed40:	d0e6      	beq.n	1ed10 <rpmsg_get_endpoint+0x1a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1ed42:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ed46:	d0e0      	beq.n	1ed0a <rpmsg_get_endpoint+0x14>
   1ed48:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ed4a:	454b      	cmp	r3, r9
   1ed4c:	d1dd      	bne.n	1ed0a <rpmsg_get_endpoint+0x14>
   1ed4e:	e005      	b.n	1ed5c <rpmsg_get_endpoint+0x66>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1ed50:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ed52:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ed56:	d1db      	bne.n	1ed10 <rpmsg_get_endpoint+0x1a>
   1ed58:	e000      	b.n	1ed5c <rpmsg_get_endpoint+0x66>
	return NULL;
   1ed5a:	2500      	movs	r5, #0
}
   1ed5c:	4628      	mov	r0, r5
   1ed5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ed62 <rpmsg_destroy_ept>:
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
   1ed62:	b1a0      	cbz	r0, 1ed8e <rpmsg_destroy_ept+0x2c>
{
   1ed64:	b510      	push	{r4, lr}
   1ed66:	4604      	mov	r4, r0
		return;

	rdev = ept->rdev;
   1ed68:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1ed6a:	b15b      	cbz	r3, 1ed84 <rpmsg_destroy_ept+0x22>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1ed6c:	7802      	ldrb	r2, [r0, #0]
   1ed6e:	b132      	cbz	r2, 1ed7e <rpmsg_destroy_ept+0x1c>
   1ed70:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   1ed74:	b11b      	cbz	r3, 1ed7e <rpmsg_destroy_ept+0x1c>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
   1ed76:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (ept->name[0] && rdev->support_ns &&
   1ed78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ed7c:	d203      	bcs.n	1ed86 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	rpmsg_unregister_endpoint(ept);
   1ed7e:	4620      	mov	r0, r4
   1ed80:	f7ff ff58 	bl	1ec34 <rpmsg_unregister_endpoint>
}
   1ed84:	bd10      	pop	{r4, pc}
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1ed86:	2101      	movs	r1, #1
   1ed88:	f7ff ff79 	bl	1ec7e <rpmsg_send_ns_message>
   1ed8c:	e7f7      	b.n	1ed7e <rpmsg_destroy_ept+0x1c>
   1ed8e:	4770      	bx	lr

0001ed90 <rpmsg_virtio_wait_remote_ready>:
{
   1ed90:	b510      	push	{r4, lr}
   1ed92:	4604      	mov	r4, r0
   1ed94:	e005      	b.n	1eda2 <rpmsg_virtio_wait_remote_ready+0x12>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1ed96:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1ed9a:	6a03      	ldr	r3, [r0, #32]
   1ed9c:	685b      	ldr	r3, [r3, #4]
   1ed9e:	2100      	movs	r1, #0
   1eda0:	4798      	blx	r3
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1eda2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1eda6:	6a03      	ldr	r3, [r0, #32]
   1eda8:	681b      	ldr	r3, [r3, #0]
   1edaa:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1edac:	f010 0f40 	tst.w	r0, #64	; 0x40
   1edb0:	d1f1      	bne.n	1ed96 <rpmsg_virtio_wait_remote_ready+0x6>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1edb2:	f010 0f04 	tst.w	r0, #4
   1edb6:	d0f4      	beq.n	1eda2 <rpmsg_virtio_wait_remote_ready+0x12>
}
   1edb8:	2001      	movs	r0, #1
   1edba:	bd10      	pop	{r4, pc}

0001edbc <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1edbc:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1edc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1edc4:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1edc8:	4770      	bx	lr

0001edca <rpmsg_virtio_tx_callback>:
}
   1edca:	4770      	bx	lr

0001edcc <rpmsg_virtio_ns_callback>:
{
   1edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1edd0:	b088      	sub	sp, #32
	struct rpmsg_device *rdev = ept->rdev;
   1edd2:	6a05      	ldr	r5, [r0, #32]
	struct metal_io_region *io = rvdev->shbuf_io;
   1edd4:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
	if (len != sizeof(*ns_msg))
   1edd8:	2a28      	cmp	r2, #40	; 0x28
   1edda:	d136      	bne.n	1ee4a <rpmsg_virtio_ns_callback+0x7e>
   1eddc:	460c      	mov	r4, r1
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1edde:	6801      	ldr	r1, [r0, #0]
   1ede0:	1a61      	subs	r1, r4, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1ede2:	6883      	ldr	r3, [r0, #8]
   1ede4:	4299      	cmp	r1, r3
   1ede6:	d227      	bcs.n	1ee38 <rpmsg_virtio_ns_callback+0x6c>
	metal_io_block_read(io,
   1ede8:	2320      	movs	r3, #32
   1edea:	466a      	mov	r2, sp
   1edec:	f7ff fbe6 	bl	1e5bc <metal_io_block_read>
	dest = ns_msg->addr;
   1edf0:	f8d4 8020 	ldr.w	r8, [r4, #32]
	metal_mutex_acquire(&rdev->lock);
   1edf4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   1edf8:	f04f 32ff 	mov.w	r2, #4294967295
   1edfc:	f04f 33ff 	mov.w	r3, #4294967295
   1ee00:	4638      	mov	r0, r7
   1ee02:	f7f7 fafb 	bl	163fc <z_impl_k_sem_take>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1ee06:	4643      	mov	r3, r8
   1ee08:	f04f 32ff 	mov.w	r2, #4294967295
   1ee0c:	4669      	mov	r1, sp
   1ee0e:	4628      	mov	r0, r5
   1ee10:	f7ff ff71 	bl	1ecf6 <rpmsg_get_endpoint>
   1ee14:	4606      	mov	r6, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1ee16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ee18:	f013 0f01 	tst.w	r3, #1
   1ee1c:	d00f      	beq.n	1ee3e <rpmsg_virtio_ns_callback+0x72>
		if (_ept)
   1ee1e:	b110      	cbz	r0, 1ee26 <rpmsg_virtio_ns_callback+0x5a>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1ee20:	f04f 33ff 	mov.w	r3, #4294967295
   1ee24:	6283      	str	r3, [r0, #40]	; 0x28
	z_impl_k_sem_give(sem);
   1ee26:	4638      	mov	r0, r7
   1ee28:	f7f7 fac0 	bl	163ac <z_impl_k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1ee2c:	b16e      	cbz	r6, 1ee4a <rpmsg_virtio_ns_callback+0x7e>
   1ee2e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1ee30:	b15b      	cbz	r3, 1ee4a <rpmsg_virtio_ns_callback+0x7e>
			_ept->ns_unbind_cb(_ept);
   1ee32:	4630      	mov	r0, r6
   1ee34:	4798      	blx	r3
   1ee36:	e008      	b.n	1ee4a <rpmsg_virtio_ns_callback+0x7e>
   1ee38:	f04f 31ff 	mov.w	r1, #4294967295
   1ee3c:	e7d4      	b.n	1ede8 <rpmsg_virtio_ns_callback+0x1c>
		if (!_ept) {
   1ee3e:	b140      	cbz	r0, 1ee52 <rpmsg_virtio_ns_callback+0x86>
			_ept->dest_addr = dest;
   1ee40:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1ee44:	4638      	mov	r0, r7
   1ee46:	f7f7 fab1 	bl	163ac <z_impl_k_sem_give>
}
   1ee4a:	2000      	movs	r0, #0
   1ee4c:	b008      	add	sp, #32
   1ee4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee52:	4638      	mov	r0, r7
   1ee54:	f7f7 faaa 	bl	163ac <z_impl_k_sem_give>
			if (rdev->ns_bind_cb)
   1ee58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1ee5a:	2b00      	cmp	r3, #0
   1ee5c:	d0f5      	beq.n	1ee4a <rpmsg_virtio_ns_callback+0x7e>
				rdev->ns_bind_cb(rdev, name, dest);
   1ee5e:	4642      	mov	r2, r8
   1ee60:	4669      	mov	r1, sp
   1ee62:	4628      	mov	r0, r5
   1ee64:	4798      	blx	r3
   1ee66:	e7f0      	b.n	1ee4a <rpmsg_virtio_ns_callback+0x7e>

0001ee68 <rpmsg_virtio_return_buffer>:
{
   1ee68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee6a:	b085      	sub	sp, #20
   1ee6c:	4604      	mov	r4, r0
   1ee6e:	4615      	mov	r5, r2
   1ee70:	461e      	mov	r6, r3
	return rvdev->vdev->role;
   1ee72:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1ee76:	699f      	ldr	r7, [r3, #24]
	if (role == RPMSG_HOST) {
   1ee78:	b11f      	cbz	r7, 1ee82 <rpmsg_virtio_return_buffer+0x1a>
	if (role == RPMSG_REMOTE) {
   1ee7a:	2f01      	cmp	r7, #1
   1ee7c:	d00c      	beq.n	1ee98 <rpmsg_virtio_return_buffer+0x30>
}
   1ee7e:	b005      	add	sp, #20
   1ee80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vqbuf.buf = buffer;
   1ee82:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   1ee84:	9203      	str	r2, [sp, #12]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1ee86:	9100      	str	r1, [sp, #0]
   1ee88:	2301      	movs	r3, #1
   1ee8a:	2200      	movs	r2, #0
   1ee8c:	a902      	add	r1, sp, #8
   1ee8e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1ee92:	f7ff fd77 	bl	1e984 <virtqueue_add_buffer>
   1ee96:	e7f0      	b.n	1ee7a <rpmsg_virtio_return_buffer+0x12>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1ee98:	462a      	mov	r2, r5
   1ee9a:	4631      	mov	r1, r6
   1ee9c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1eea0:	f7f6 fa2a 	bl	152f8 <virtqueue_add_consumed_buffer>
}
   1eea4:	e7eb      	b.n	1ee7e <rpmsg_virtio_return_buffer+0x16>

0001eea6 <rpmsg_virtio_enqueue_buffer>:
{
   1eea6:	b510      	push	{r4, lr}
   1eea8:	b084      	sub	sp, #16
   1eeaa:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
   1eeae:	69a4      	ldr	r4, [r4, #24]
	if (role == RPMSG_HOST) {
   1eeb0:	b124      	cbz	r4, 1eebc <rpmsg_virtio_enqueue_buffer+0x16>
	if (role == RPMSG_REMOTE) {
   1eeb2:	2c01      	cmp	r4, #1
   1eeb4:	d00d      	beq.n	1eed2 <rpmsg_virtio_enqueue_buffer+0x2c>
	return 0;
   1eeb6:	2000      	movs	r0, #0
}
   1eeb8:	b004      	add	sp, #16
   1eeba:	bd10      	pop	{r4, pc}
		vqbuf.buf = buffer;
   1eebc:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   1eebe:	9203      	str	r2, [sp, #12]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1eec0:	9100      	str	r1, [sp, #0]
   1eec2:	2300      	movs	r3, #0
   1eec4:	2201      	movs	r2, #1
   1eec6:	a902      	add	r1, sp, #8
   1eec8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   1eecc:	f7ff fd5a 	bl	1e984 <virtqueue_add_buffer>
   1eed0:	e7f2      	b.n	1eeb8 <rpmsg_virtio_enqueue_buffer+0x12>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1eed2:	4619      	mov	r1, r3
   1eed4:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   1eed8:	f7f6 fa0e 	bl	152f8 <virtqueue_add_consumed_buffer>
   1eedc:	e7ec      	b.n	1eeb8 <rpmsg_virtio_enqueue_buffer+0x12>

0001eede <rpmsg_virtio_get_rx_buffer>:
{
   1eede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eee0:	4604      	mov	r4, r0
   1eee2:	460e      	mov	r6, r1
   1eee4:	4615      	mov	r5, r2
   1eee6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1eeea:	699f      	ldr	r7, [r3, #24]
	if (role == RPMSG_HOST) {
   1eeec:	b11f      	cbz	r7, 1eef6 <rpmsg_virtio_get_rx_buffer+0x18>
	void *data = NULL;
   1eeee:	2000      	movs	r0, #0
	if (role == RPMSG_REMOTE) {
   1eef0:	2f01      	cmp	r7, #1
   1eef2:	d005      	beq.n	1ef00 <rpmsg_virtio_get_rx_buffer+0x22>
}
   1eef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1eef6:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   1eefa:	f7ff fd65 	bl	1e9c8 <virtqueue_get_buffer>
   1eefe:	e7f7      	b.n	1eef0 <rpmsg_virtio_get_rx_buffer+0x12>
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1ef00:	4632      	mov	r2, r6
   1ef02:	4629      	mov	r1, r5
   1ef04:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ef08:	f7ff fd90 	bl	1ea2c <virtqueue_get_available_buffer>
	return data;
   1ef0c:	e7f2      	b.n	1eef4 <rpmsg_virtio_get_rx_buffer+0x16>

0001ef0e <rpmsg_virtio_release_rx_buffer>:
{
   1ef0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef10:	4604      	mov	r4, r0
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
   1ef12:	f1a1 0710 	sub.w	r7, r1, #16
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1ef16:	f851 5c08 	ldr.w	r5, [r1, #-8]
   1ef1a:	b2ad      	uxth	r5, r5
	metal_mutex_acquire(&rdev->lock);
   1ef1c:	f100 0658 	add.w	r6, r0, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   1ef20:	f04f 32ff 	mov.w	r2, #4294967295
   1ef24:	f04f 33ff 	mov.w	r3, #4294967295
   1ef28:	4630      	mov	r0, r6
   1ef2a:	f7f7 fa67 	bl	163fc <z_impl_k_sem_take>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1ef2e:	4629      	mov	r1, r5
   1ef30:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ef34:	f7ff fd75 	bl	1ea22 <virtqueue_get_buffer_length>
   1ef38:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1ef3a:	462b      	mov	r3, r5
   1ef3c:	4639      	mov	r1, r7
   1ef3e:	4620      	mov	r0, r4
   1ef40:	f7ff ff92 	bl	1ee68 <rpmsg_virtio_return_buffer>
	z_impl_k_sem_give(sem);
   1ef44:	4630      	mov	r0, r6
   1ef46:	f7f7 fa31 	bl	163ac <z_impl_k_sem_give>
}
   1ef4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ef4c <rpmsg_virtio_send_offchannel_nocopy>:
{
   1ef4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef50:	b084      	sub	sp, #16
   1ef52:	4604      	mov	r4, r0
   1ef54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	hdr = RPMSG_LOCATE_HDR(data);
   1ef56:	f1a3 0710 	sub.w	r7, r3, #16
	idx = hdr->reserved;
   1ef5a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   1ef5e:	b2ad      	uxth	r5, r5
	rp_hdr.dst = dst;
   1ef60:	9201      	str	r2, [sp, #4]
	rp_hdr.src = src;
   1ef62:	9100      	str	r1, [sp, #0]
	rp_hdr.len = len;
   1ef64:	f8ad 600c 	strh.w	r6, [sp, #12]
	rp_hdr.reserved = 0;
   1ef68:	2300      	movs	r3, #0
   1ef6a:	9302      	str	r3, [sp, #8]
	rp_hdr.flags = 0;
   1ef6c:	f8ad 300e 	strh.w	r3, [sp, #14]
	io = rvdev->shbuf_io;
   1ef70:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1ef74:	6801      	ldr	r1, [r0, #0]
   1ef76:	1a79      	subs	r1, r7, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1ef78:	6883      	ldr	r3, [r0, #8]
   1ef7a:	4299      	cmp	r1, r3
   1ef7c:	d222      	bcs.n	1efc4 <rpmsg_virtio_send_offchannel_nocopy+0x78>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1ef7e:	2310      	movs	r3, #16
   1ef80:	466a      	mov	r2, sp
   1ef82:	f7ff fb5d 	bl	1e640 <metal_io_block_write>
	metal_mutex_acquire(&rdev->lock);
   1ef86:	f104 0858 	add.w	r8, r4, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   1ef8a:	f04f 32ff 	mov.w	r2, #4294967295
   1ef8e:	f04f 33ff 	mov.w	r3, #4294967295
   1ef92:	4640      	mov	r0, r8
   1ef94:	f7f7 fa32 	bl	163fc <z_impl_k_sem_take>
   1ef98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ef9c:	699b      	ldr	r3, [r3, #24]
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1ef9e:	b9a3      	cbnz	r3, 1efca <rpmsg_virtio_send_offchannel_nocopy+0x7e>
		buff_len = rvdev->config.h2r_buf_size;
   1efa0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
   1efa4:	462b      	mov	r3, r5
   1efa6:	4639      	mov	r1, r7
   1efa8:	4620      	mov	r0, r4
   1efaa:	f7ff ff7c 	bl	1eea6 <rpmsg_virtio_enqueue_buffer>
	virtqueue_kick(rvdev->svq);
   1efae:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1efb2:	f7ff fdde 	bl	1eb72 <virtqueue_kick>
	z_impl_k_sem_give(sem);
   1efb6:	4640      	mov	r0, r8
   1efb8:	f7f7 f9f8 	bl	163ac <z_impl_k_sem_give>
}
   1efbc:	4630      	mov	r0, r6
   1efbe:	b004      	add	sp, #16
   1efc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1efc4:	f04f 31ff 	mov.w	r1, #4294967295
   1efc8:	e7d9      	b.n	1ef7e <rpmsg_virtio_send_offchannel_nocopy+0x32>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1efca:	4629      	mov	r1, r5
   1efcc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1efd0:	f7ff fd27 	bl	1ea22 <virtqueue_get_buffer_length>
   1efd4:	4602      	mov	r2, r0
   1efd6:	e7e5      	b.n	1efa4 <rpmsg_virtio_send_offchannel_nocopy+0x58>

0001efd8 <rpmsg_virtio_rx_callback>:
{
   1efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efdc:	b084      	sub	sp, #16
	struct virtio_device *vdev = vq->vq_dev;
   1efde:	6803      	ldr	r3, [r0, #0]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1efe0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1efe2:	f107 0658 	add.w	r6, r7, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   1efe6:	f04f 32ff 	mov.w	r2, #4294967295
   1efea:	f04f 33ff 	mov.w	r3, #4294967295
   1efee:	4630      	mov	r0, r6
   1eff0:	f7f7 fa04 	bl	163fc <z_impl_k_sem_take>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1eff4:	f10d 020a 	add.w	r2, sp, #10
   1eff8:	a903      	add	r1, sp, #12
   1effa:	4638      	mov	r0, r7
   1effc:	f7ff ff6f 	bl	1eede <rpmsg_virtio_get_rx_buffer>
   1f000:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1f002:	4630      	mov	r0, r6
   1f004:	f7f7 f9d2 	bl	163ac <z_impl_k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1f008:	e01e      	b.n	1f048 <rpmsg_virtio_rx_callback+0x70>
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1f00a:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
					 rp_hdr->len, rp_hdr->src, ept->priv);
   1f00e:	89a2      	ldrh	r2, [r4, #12]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1f010:	4621      	mov	r1, r4
   1f012:	f851 3b10 	ldr.w	r3, [r1], #16
   1f016:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1f018:	9000      	str	r0, [sp, #0]
   1f01a:	4628      	mov	r0, r5
   1f01c:	47c0      	blx	r8
	return z_impl_k_sem_take(sem, timeout);
   1f01e:	f04f 32ff 	mov.w	r2, #4294967295
   1f022:	f04f 33ff 	mov.w	r3, #4294967295
   1f026:	4630      	mov	r0, r6
   1f028:	f7f7 f9e8 	bl	163fc <z_impl_k_sem_take>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1f02c:	68a3      	ldr	r3, [r4, #8]
   1f02e:	2b00      	cmp	r3, #0
   1f030:	da29      	bge.n	1f086 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1f032:	f10d 020a 	add.w	r2, sp, #10
   1f036:	a903      	add	r1, sp, #12
   1f038:	4638      	mov	r0, r7
   1f03a:	f7ff ff50 	bl	1eede <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1f03e:	4604      	mov	r4, r0
   1f040:	b348      	cbz	r0, 1f096 <rpmsg_virtio_rx_callback+0xbe>
	z_impl_k_sem_give(sem);
   1f042:	4630      	mov	r0, r6
   1f044:	f7f7 f9b2 	bl	163ac <z_impl_k_sem_give>
	while (rp_hdr) {
   1f048:	b354      	cbz	r4, 1f0a0 <rpmsg_virtio_rx_callback+0xc8>
		rp_hdr->reserved = idx;
   1f04a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f04e:	60a3      	str	r3, [r4, #8]
	return z_impl_k_sem_take(sem, timeout);
   1f050:	f04f 32ff 	mov.w	r2, #4294967295
   1f054:	f04f 33ff 	mov.w	r3, #4294967295
   1f058:	4630      	mov	r0, r6
   1f05a:	f7f7 f9cf 	bl	163fc <z_impl_k_sem_take>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1f05e:	f04f 33ff 	mov.w	r3, #4294967295
   1f062:	6862      	ldr	r2, [r4, #4]
   1f064:	2100      	movs	r1, #0
   1f066:	4638      	mov	r0, r7
   1f068:	f7ff fe45 	bl	1ecf6 <rpmsg_get_endpoint>
   1f06c:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f06e:	4630      	mov	r0, r6
   1f070:	f7f7 f99c 	bl	163ac <z_impl_k_sem_give>
		if (ept) {
   1f074:	2d00      	cmp	r5, #0
   1f076:	d0d2      	beq.n	1f01e <rpmsg_virtio_rx_callback+0x46>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1f078:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f07a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f07e:	d1c4      	bne.n	1f00a <rpmsg_virtio_rx_callback+0x32>
				ept->dest_addr = rp_hdr->src;
   1f080:	6823      	ldr	r3, [r4, #0]
   1f082:	62ab      	str	r3, [r5, #40]	; 0x28
   1f084:	e7c1      	b.n	1f00a <rpmsg_virtio_rx_callback+0x32>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1f086:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f08a:	9a03      	ldr	r2, [sp, #12]
   1f08c:	4621      	mov	r1, r4
   1f08e:	4638      	mov	r0, r7
   1f090:	f7ff feea 	bl	1ee68 <rpmsg_virtio_return_buffer>
   1f094:	e7cd      	b.n	1f032 <rpmsg_virtio_rx_callback+0x5a>
			virtqueue_kick(rvdev->rvq);
   1f096:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   1f09a:	f7ff fd6a 	bl	1eb72 <virtqueue_kick>
   1f09e:	e7d0      	b.n	1f042 <rpmsg_virtio_rx_callback+0x6a>
}
   1f0a0:	b004      	add	sp, #16
   1f0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f0a6 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1f0a6:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1f0a8:	6842      	ldr	r2, [r0, #4]
   1f0aa:	428a      	cmp	r2, r1
   1f0ac:	d308      	bcc.n	1f0c0 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1f0ae:	6800      	ldr	r0, [r0, #0]
   1f0b0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   1f0b4:	ebac 0c02 	sub.w	ip, ip, r2
   1f0b8:	4460      	add	r0, ip
	shpool->avail -= size;
   1f0ba:	1a52      	subs	r2, r2, r1
   1f0bc:	605a      	str	r2, [r3, #4]
	return buffer;
   1f0be:	4770      	bx	lr
		return NULL;
   1f0c0:	2000      	movs	r0, #0
}
   1f0c2:	4770      	bx	lr

0001f0c4 <rpmsg_virtio_get_tx_buffer>:
{
   1f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0c6:	4604      	mov	r4, r0
   1f0c8:	460f      	mov	r7, r1
   1f0ca:	4616      	mov	r6, r2
   1f0cc:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1f0d0:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1f0d2:	b11d      	cbz	r5, 1f0dc <rpmsg_virtio_get_tx_buffer+0x18>
	void *data = NULL;
   1f0d4:	2000      	movs	r0, #0
	if (role == RPMSG_REMOTE) {
   1f0d6:	2d01      	cmp	r5, #1
   1f0d8:	d017      	beq.n	1f10a <rpmsg_virtio_get_tx_buffer+0x46>
}
   1f0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1f0dc:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   1f0e0:	f7ff fc72 	bl	1e9c8 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1f0e4:	2800      	cmp	r0, #0
   1f0e6:	d1f6      	bne.n	1f0d6 <rpmsg_virtio_get_tx_buffer+0x12>
   1f0e8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   1f0ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1f0ee:	2b00      	cmp	r3, #0
   1f0f0:	d0f1      	beq.n	1f0d6 <rpmsg_virtio_get_tx_buffer+0x12>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1f0f2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
   1f0f6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1f0fa:	f7ff ffd4 	bl	1f0a6 <rpmsg_virtio_shm_pool_get_buffer>
			*len = rvdev->config.h2r_buf_size;
   1f0fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   1f102:	603b      	str	r3, [r7, #0]
			*idx = 0;
   1f104:	2300      	movs	r3, #0
   1f106:	8033      	strh	r3, [r6, #0]
   1f108:	e7e5      	b.n	1f0d6 <rpmsg_virtio_get_tx_buffer+0x12>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1f10a:	463a      	mov	r2, r7
   1f10c:	4631      	mov	r1, r6
   1f10e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1f112:	f7ff fc8b 	bl	1ea2c <virtqueue_get_available_buffer>
	return data;
   1f116:	e7e0      	b.n	1f0da <rpmsg_virtio_get_tx_buffer+0x16>

0001f118 <rpmsg_virtio_get_tx_payload_buffer>:
{
   1f118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f11c:	b082      	sub	sp, #8
   1f11e:	4607      	mov	r7, r0
   1f120:	4688      	mov	r8, r1
   1f122:	4616      	mov	r6, r2
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1f124:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1f128:	6a03      	ldr	r3, [r0, #32]
   1f12a:	681b      	ldr	r3, [r3, #0]
   1f12c:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1f12e:	f010 0f04 	tst.w	r0, #4
   1f132:	d02b      	beq.n	1f18c <rpmsg_virtio_get_tx_payload_buffer+0x74>
	if (wait)
   1f134:	b10e      	cbz	r6, 1f13a <rpmsg_virtio_get_tx_payload_buffer+0x22>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1f136:	f643 2698 	movw	r6, #15000	; 0x3a98
		metal_mutex_acquire(&rdev->lock);
   1f13a:	f107 0458 	add.w	r4, r7, #88	; 0x58
	return z_impl_k_sem_take(sem, timeout);
   1f13e:	f04f 32ff 	mov.w	r2, #4294967295
   1f142:	f04f 33ff 	mov.w	r3, #4294967295
   1f146:	4620      	mov	r0, r4
   1f148:	f7f7 f958 	bl	163fc <z_impl_k_sem_take>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
   1f14c:	f10d 0206 	add.w	r2, sp, #6
   1f150:	4641      	mov	r1, r8
   1f152:	4638      	mov	r0, r7
   1f154:	f7ff ffb6 	bl	1f0c4 <rpmsg_virtio_get_tx_buffer>
   1f158:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f15a:	4620      	mov	r0, r4
   1f15c:	f7f7 f926 	bl	163ac <z_impl_k_sem_give>
		if (rp_hdr || !tick_count)
   1f160:	b935      	cbnz	r5, 1f170 <rpmsg_virtio_get_tx_payload_buffer+0x58>
   1f162:	b12e      	cbz	r6, 1f170 <rpmsg_virtio_get_tx_payload_buffer+0x58>
	return z_impl_k_sleep(timeout);
   1f164:	2021      	movs	r0, #33	; 0x21
   1f166:	2100      	movs	r1, #0
   1f168:	f7f7 feec 	bl	16f44 <z_impl_k_sleep>
		tick_count--;
   1f16c:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   1f16e:	e7e4      	b.n	1f13a <rpmsg_virtio_get_tx_payload_buffer+0x22>
	if (!rp_hdr)
   1f170:	b145      	cbz	r5, 1f184 <rpmsg_virtio_get_tx_payload_buffer+0x6c>
	rp_hdr->reserved = idx;
   1f172:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f176:	60ab      	str	r3, [r5, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1f178:	f8d8 3000 	ldr.w	r3, [r8]
   1f17c:	3b10      	subs	r3, #16
   1f17e:	f8c8 3000 	str.w	r3, [r8]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1f182:	3510      	adds	r5, #16
}
   1f184:	4628      	mov	r0, r5
   1f186:	b002      	add	sp, #8
   1f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1f18c:	2500      	movs	r5, #0
   1f18e:	e7f9      	b.n	1f184 <rpmsg_virtio_get_tx_payload_buffer+0x6c>

0001f190 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1f190:	b110      	cbz	r0, 1f198 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->base = shb;
   1f192:	6001      	str	r1, [r0, #0]
	shpool->size = size;
   1f194:	6082      	str	r2, [r0, #8]
	shpool->avail = size;
   1f196:	6042      	str	r2, [r0, #4]
}
   1f198:	4770      	bx	lr

0001f19a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1f19a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1f19c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1f19e:	4293      	cmp	r3, r2
   1f1a0:	d804      	bhi.n	1f1ac <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1f1a2:	6880      	ldr	r0, [r0, #8]
   1f1a4:	1a80      	subs	r0, r0, r2
   1f1a6:	4403      	add	r3, r0
   1f1a8:	1e58      	subs	r0, r3, #1
   1f1aa:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   1f1ac:	1a9b      	subs	r3, r3, r2
   1f1ae:	1e58      	subs	r0, r3, #1
}
   1f1b0:	4770      	bx	lr

0001f1b2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f1b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f1b6:	4604      	mov	r4, r0
   1f1b8:	4688      	mov	r8, r1
   1f1ba:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   1f1bc:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   1f1be:	6887      	ldr	r7, [r0, #8]
   1f1c0:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   1f1c4:	4591      	cmp	r9, r2
   1f1c6:	d907      	bls.n	1f1d8 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f1c8:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
   1f1ca:	4428      	add	r0, r5
   1f1cc:	f7fa ff3d 	bl	1a04a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1f1d0:	4435      	add	r5, r6
   1f1d2:	60e5      	str	r5, [r4, #12]
}
   1f1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f1d8:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1f1da:	464a      	mov	r2, r9
   1f1dc:	4428      	add	r0, r5
   1f1de:	f7fa ff34 	bl	1a04a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   1f1e2:	1bed      	subs	r5, r5, r7
   1f1e4:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1f1e6:	462a      	mov	r2, r5
   1f1e8:	eb08 0109 	add.w	r1, r8, r9
   1f1ec:	6860      	ldr	r0, [r4, #4]
   1f1ee:	f7fa ff2c 	bl	1a04a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1f1f2:	60e5      	str	r5, [r4, #12]
}
   1f1f4:	e7ee      	b.n	1f1d4 <_WriteNoCheck+0x22>

0001f1f6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f1f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f1fa:	4606      	mov	r6, r0
   1f1fc:	4688      	mov	r8, r1
   1f1fe:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   1f200:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   1f202:	f04f 0900 	mov.w	r9, #0
   1f206:	e018      	b.n	1f23a <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   1f208:	1b64      	subs	r4, r4, r5
   1f20a:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1f20c:	68b3      	ldr	r3, [r6, #8]
   1f20e:	1b5c      	subs	r4, r3, r5
   1f210:	4294      	cmp	r4, r2
   1f212:	bf28      	it	cs
   1f214:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1f216:	42bc      	cmp	r4, r7
   1f218:	bf28      	it	cs
   1f21a:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f21c:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1f21e:	4622      	mov	r2, r4
   1f220:	4641      	mov	r1, r8
   1f222:	4428      	add	r0, r5
   1f224:	f7fa ff11 	bl	1a04a <memcpy>
    NumBytesWritten += NumBytesToWrite;
   1f228:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   1f22a:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   1f22c:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   1f22e:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   1f230:	68b3      	ldr	r3, [r6, #8]
   1f232:	42ab      	cmp	r3, r5
   1f234:	d009      	beq.n	1f24a <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   1f236:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1f238:	b14f      	cbz	r7, 1f24e <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1f23a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   1f23c:	42a5      	cmp	r5, r4
   1f23e:	d3e3      	bcc.n	1f208 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f240:	68b2      	ldr	r2, [r6, #8]
   1f242:	1b64      	subs	r4, r4, r5
   1f244:	4414      	add	r4, r2
   1f246:	1e62      	subs	r2, r4, #1
   1f248:	e7e0      	b.n	1f20c <_WriteBlocking+0x16>
      WrOff = 0u;
   1f24a:	2500      	movs	r5, #0
   1f24c:	e7f3      	b.n	1f236 <_WriteBlocking+0x40>
}
   1f24e:	4648      	mov	r0, r9
   1f250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f254 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1f254:	b508      	push	{r3, lr}
  _DoInit();
   1f256:	f7f6 fae5 	bl	15824 <_DoInit>
}
   1f25a:	bd08      	pop	{r3, pc}

0001f25c <rtt_init>:
{
   1f25c:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   1f25e:	f7ff fff9 	bl	1f254 <SEGGER_RTT_Init>
}
   1f262:	2000      	movs	r0, #0
   1f264:	bd08      	pop	{r3, pc}

0001f266 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1f266:	b148      	cbz	r0, 1f27c <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1f268:	68c3      	ldr	r3, [r0, #12]
   1f26a:	8818      	ldrh	r0, [r3, #0]
   1f26c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1f270:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1f274:	bf14      	ite	ne
   1f276:	2000      	movne	r0, #0
   1f278:	2001      	moveq	r0, #1
   1f27a:	4770      	bx	lr
		return false;
   1f27c:	2000      	movs	r0, #0
}
   1f27e:	4770      	bx	lr

0001f280 <z_early_memset>:
{
   1f280:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   1f282:	f7fa ff11 	bl	1a0a8 <memset>
}
   1f286:	bd08      	pop	{r3, pc}

0001f288 <z_early_memcpy>:
{
   1f288:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   1f28a:	f7fa fede 	bl	1a04a <memcpy>
}
   1f28e:	bd08      	pop	{r3, pc}

0001f290 <k_heap_init>:
{
   1f290:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   1f292:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1f296:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1f298:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1f29a:	f7f9 fb1f 	bl	188dc <sys_heap_init>
}
   1f29e:	bd10      	pop	{r4, pc}

0001f2a0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2a4:	b085      	sub	sp, #20
   1f2a6:	4607      	mov	r7, r0
   1f2a8:	468a      	mov	sl, r1
   1f2aa:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f2ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1f2b0:	f000 fd7f 	bl	1fdb2 <sys_clock_timeout_end_calc>
   1f2b4:	4606      	mov	r6, r0
   1f2b6:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f2b8:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   1f2bc:	f04f 0320 	mov.w	r3, #32
   1f2c0:	f3ef 8511 	mrs	r5, BASEPRI
   1f2c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2c8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1f2cc:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   1f2d0:	4644      	mov	r4, r8

	while (ret == NULL) {
   1f2d2:	e00f      	b.n	1f2f4 <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f2d4:	9000      	str	r0, [sp, #0]
   1f2d6:	9101      	str	r1, [sp, #4]
   1f2d8:	f107 020c 	add.w	r2, r7, #12
   1f2dc:	4629      	mov	r1, r5
   1f2de:	4658      	mov	r0, fp
   1f2e0:	f7f7 fc68 	bl	16bb4 <z_pend_curr>
   1f2e4:	f04f 0320 	mov.w	r3, #32
   1f2e8:	f3ef 8511 	mrs	r5, BASEPRI
   1f2ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2f0:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1f2f4:	b9ac      	cbnz	r4, 1f322 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f2f6:	9a03      	ldr	r2, [sp, #12]
   1f2f8:	4651      	mov	r1, sl
   1f2fa:	4638      	mov	r0, r7
   1f2fc:	f7f9 fa5a 	bl	187b4 <sys_heap_aligned_alloc>
   1f300:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1f302:	f7f7 ffed 	bl	172e0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1f306:	b964      	cbnz	r4, 1f322 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
   1f308:	1a30      	subs	r0, r6, r0
   1f30a:	eb69 0101 	sbc.w	r1, r9, r1
   1f30e:	2801      	cmp	r0, #1
   1f310:	f171 0300 	sbcs.w	r3, r1, #0
   1f314:	db05      	blt.n	1f322 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
   1f316:	f1b8 0f00 	cmp.w	r8, #0
   1f31a:	d1db      	bne.n	1f2d4 <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
   1f31c:	f04f 0801 	mov.w	r8, #1
   1f320:	e7d8      	b.n	1f2d4 <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
   1f322:	f385 8811 	msr	BASEPRI, r5
   1f326:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f32a:	4620      	mov	r0, r4
   1f32c:	b005      	add	sp, #20
   1f32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001f332 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f332:	b570      	push	{r4, r5, r6, lr}
   1f334:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f336:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1f33a:	f04f 0320 	mov.w	r3, #32
   1f33e:	f3ef 8511 	mrs	r5, BASEPRI
   1f342:	f383 8812 	msr	BASEPRI_MAX, r3
   1f346:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1f34a:	f7f9 f9cf 	bl	186ec <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f34e:	f104 000c 	add.w	r0, r4, #12
   1f352:	f000 fc5e 	bl	1fc12 <z_unpend_all>
   1f356:	b920      	cbnz	r0, 1f362 <k_heap_free+0x30>
	__asm__ volatile(
   1f358:	f385 8811 	msr	BASEPRI, r5
   1f35c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f360:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   1f362:	4629      	mov	r1, r5
   1f364:	4630      	mov	r0, r6
   1f366:	f7f7 fa9d 	bl	168a4 <z_reschedule>
   1f36a:	e7f9      	b.n	1f360 <k_heap_free+0x2e>

0001f36c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f36c:	68c2      	ldr	r2, [r0, #12]
   1f36e:	6903      	ldr	r3, [r0, #16]
   1f370:	431a      	orrs	r2, r3
   1f372:	f012 0203 	ands.w	r2, r2, #3
   1f376:	d10d      	bne.n	1f394 <create_free_list+0x28>
	slab->free_list = NULL;
   1f378:	2100      	movs	r1, #0
   1f37a:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f37c:	e005      	b.n	1f38a <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1f37e:	6941      	ldr	r1, [r0, #20]
   1f380:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   1f382:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   1f384:	68c1      	ldr	r1, [r0, #12]
   1f386:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1f388:	3201      	adds	r2, #1
   1f38a:	6881      	ldr	r1, [r0, #8]
   1f38c:	4291      	cmp	r1, r2
   1f38e:	d8f6      	bhi.n	1f37e <create_free_list+0x12>
	return 0;
   1f390:	2000      	movs	r0, #0
   1f392:	4770      	bx	lr
		return -EINVAL;
   1f394:	f06f 0015 	mvn.w	r0, #21
}
   1f398:	4770      	bx	lr

0001f39a <k_mem_slab_init>:
{
   1f39a:	b510      	push	{r4, lr}
   1f39c:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1f39e:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   1f3a0:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   1f3a2:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   1f3a4:	2300      	movs	r3, #0
   1f3a6:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   1f3a8:	f7ff ffe0 	bl	1f36c <create_free_list>
	if (rc < 0) {
   1f3ac:	2800      	cmp	r0, #0
   1f3ae:	db01      	blt.n	1f3b4 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   1f3b0:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   1f3b2:	6064      	str	r4, [r4, #4]
}
   1f3b4:	bd10      	pop	{r4, pc}

0001f3b6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3b8:	4604      	mov	r4, r0
   1f3ba:	460d      	mov	r5, r1
	__asm__ volatile(
   1f3bc:	f04f 0320 	mov.w	r3, #32
   1f3c0:	f3ef 8611 	mrs	r6, BASEPRI
   1f3c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f3cc:	6943      	ldr	r3, [r0, #20]
   1f3ce:	b163      	cbz	r3, 1f3ea <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1f3d0:	682b      	ldr	r3, [r5, #0]
   1f3d2:	6962      	ldr	r2, [r4, #20]
   1f3d4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f3d6:	682b      	ldr	r3, [r5, #0]
   1f3d8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1f3da:	69a3      	ldr	r3, [r4, #24]
   1f3dc:	3b01      	subs	r3, #1
   1f3de:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f3e0:	f386 8811 	msr	BASEPRI, r6
   1f3e4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3ea:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f3ee:	f000 fbe5 	bl	1fbbc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1f3f2:	2800      	cmp	r0, #0
   1f3f4:	d0ec      	beq.n	1f3d0 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f3f6:	682a      	ldr	r2, [r5, #0]
   1f3f8:	2100      	movs	r1, #0
   1f3fa:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f3fe:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1f400:	f000 fb15 	bl	1fa2e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f404:	4631      	mov	r1, r6
   1f406:	4638      	mov	r0, r7
   1f408:	f7f7 fa4c 	bl	168a4 <z_reschedule>
			return;
   1f40c:	e7ec      	b.n	1f3e8 <k_mem_slab_free+0x32>

0001f40e <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f40e:	3207      	adds	r2, #7
   1f410:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1f414:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   1f418:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   1f41c:	2300      	movs	r3, #0
   1f41e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   1f422:	1888      	adds	r0, r1, r2
   1f424:	4770      	bx	lr

0001f426 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f426:	f3ef 8005 	mrs	r0, IPSR
}
   1f42a:	3800      	subs	r0, #0
   1f42c:	bf18      	it	ne
   1f42e:	2001      	movne	r0, #1
   1f430:	4770      	bx	lr

0001f432 <k_thread_name_get>:
}
   1f432:	3078      	adds	r0, #120	; 0x78
   1f434:	4770      	bx	lr

0001f436 <z_impl_k_thread_start>:
{
   1f436:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1f438:	f7f7 fb82 	bl	16b40 <z_sched_start>
}
   1f43c:	bd08      	pop	{r3, pc}

0001f43e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1f43e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1f440:	2400      	movs	r4, #0
   1f442:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1f444:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f446:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1f448:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1f44a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1f44c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1f44e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1f450:	bc10      	pop	{r4}
   1f452:	4770      	bx	lr

0001f454 <z_impl_k_thread_create>:
{
   1f454:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f456:	b087      	sub	sp, #28
   1f458:	4604      	mov	r4, r0
   1f45a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1f45c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f45e:	2700      	movs	r7, #0
   1f460:	9705      	str	r7, [sp, #20]
   1f462:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1f464:	9704      	str	r7, [sp, #16]
   1f466:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1f468:	9703      	str	r7, [sp, #12]
   1f46a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1f46c:	9702      	str	r7, [sp, #8]
   1f46e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1f470:	9701      	str	r7, [sp, #4]
   1f472:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1f474:	9700      	str	r7, [sp, #0]
   1f476:	f7f6 fdcb 	bl	16010 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f47a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1f47e:	bf08      	it	eq
   1f480:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1f484:	d102      	bne.n	1f48c <z_impl_k_thread_create+0x38>
}
   1f486:	4620      	mov	r0, r4
   1f488:	b007      	add	sp, #28
   1f48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1f48c:	4632      	mov	r2, r6
   1f48e:	462b      	mov	r3, r5
   1f490:	4620      	mov	r0, r4
   1f492:	f7f6 fdaf 	bl	15ff4 <schedule_new_thread>
   1f496:	e7f6      	b.n	1f486 <z_impl_k_thread_create+0x32>

0001f498 <z_pm_save_idle_exit>:
{
   1f498:	b508      	push	{r3, lr}
	pm_system_resume();
   1f49a:	f7e5 f837 	bl	450c <pm_system_resume>
	sys_clock_idle_exit();
   1f49e:	f7fe fd69 	bl	1df74 <sys_clock_idle_exit>
}
   1f4a2:	bd08      	pop	{r3, pc}

0001f4a4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1f4a4:	4288      	cmp	r0, r1
   1f4a6:	da00      	bge.n	1f4aa <new_prio_for_inheritance+0x6>
   1f4a8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1f4aa:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1f4ae:	db01      	blt.n	1f4b4 <new_prio_for_inheritance+0x10>
   1f4b0:	4608      	mov	r0, r1
   1f4b2:	4770      	bx	lr
   1f4b4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1f4b8:	4770      	bx	lr

0001f4ba <adjust_owner_prio>:
{
   1f4ba:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1f4bc:	6880      	ldr	r0, [r0, #8]
   1f4be:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f4c2:	428b      	cmp	r3, r1
   1f4c4:	d101      	bne.n	1f4ca <adjust_owner_prio+0x10>
	return false;
   1f4c6:	2000      	movs	r0, #0
}
   1f4c8:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1f4ca:	f7f7 fb87 	bl	16bdc <z_set_prio>
   1f4ce:	e7fb      	b.n	1f4c8 <adjust_owner_prio+0xe>

0001f4d0 <z_impl_k_mutex_init>:
{
   1f4d0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1f4d2:	2000      	movs	r0, #0
   1f4d4:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1f4d6:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1f4d8:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1f4da:	605b      	str	r3, [r3, #4]
}
   1f4dc:	4770      	bx	lr

0001f4de <prepare_thread_to_run>:
{
   1f4de:	b508      	push	{r3, lr}
   1f4e0:	2200      	movs	r2, #0
   1f4e2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   1f4e6:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   1f4e8:	f000 faa1 	bl	1fa2e <z_ready_thread>
}
   1f4ec:	bd08      	pop	{r3, pc}

0001f4ee <queue_insert>:
{
   1f4ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f4f2:	4605      	mov	r5, r0
   1f4f4:	460e      	mov	r6, r1
   1f4f6:	4614      	mov	r4, r2
   1f4f8:	4699      	mov	r9, r3
   1f4fa:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f4fe:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1f502:	f04f 0320 	mov.w	r3, #32
   1f506:	f3ef 8811 	mrs	r8, BASEPRI
   1f50a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f50e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1f512:	b102      	cbz	r2, 1f516 <queue_insert+0x28>
	return list->tail;
   1f514:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f516:	4638      	mov	r0, r7
   1f518:	f000 fb50 	bl	1fbbc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1f51c:	b9f8      	cbnz	r0, 1f55e <queue_insert+0x70>
	if (alloc) {
   1f51e:	f1b9 0f00 	cmp.w	r9, #0
   1f522:	d125      	bne.n	1f570 <queue_insert+0x82>
	node->next_and_flags = flags;
   1f524:	2300      	movs	r3, #0
   1f526:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f528:	b39e      	cbz	r6, 1f592 <queue_insert+0xa4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f52a:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f52c:	f033 0303 	bics.w	r3, r3, #3
   1f530:	d03b      	beq.n	1f5aa <queue_insert+0xbc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f532:	6822      	ldr	r2, [r4, #0]
   1f534:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f538:	4313      	orrs	r3, r2
   1f53a:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f53c:	6833      	ldr	r3, [r6, #0]
   1f53e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f542:	431c      	orrs	r4, r3
   1f544:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f546:	2104      	movs	r1, #4
   1f548:	f105 0010 	add.w	r0, r5, #16
   1f54c:	f000 fd0b 	bl	1ff66 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f550:	4641      	mov	r1, r8
   1f552:	4638      	mov	r0, r7
   1f554:	f7f7 f9a6 	bl	168a4 <z_reschedule>
	return 0;
   1f558:	2000      	movs	r0, #0
}
   1f55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prepare_thread_to_run(first_pending_thread, data);
   1f55e:	4621      	mov	r1, r4
   1f560:	f7ff ffbd 	bl	1f4de <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1f564:	4641      	mov	r1, r8
   1f566:	4638      	mov	r0, r7
   1f568:	f7f7 f99c 	bl	168a4 <z_reschedule>
		return 0;
   1f56c:	2000      	movs	r0, #0
   1f56e:	e7f4      	b.n	1f55a <queue_insert+0x6c>
	return z_thread_aligned_alloc(0, size);
   1f570:	2108      	movs	r1, #8
   1f572:	2000      	movs	r0, #0
   1f574:	f7f8 fa7a 	bl	17a6c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1f578:	b120      	cbz	r0, 1f584 <queue_insert+0x96>
		anode->data = data;
   1f57a:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   1f57c:	2201      	movs	r2, #1
   1f57e:	6002      	str	r2, [r0, #0]
		data = anode;
   1f580:	4604      	mov	r4, r0
   1f582:	e7d1      	b.n	1f528 <queue_insert+0x3a>
	__asm__ volatile(
   1f584:	f388 8811 	msr	BASEPRI, r8
   1f588:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f58c:	f06f 000b 	mvn.w	r0, #11
   1f590:	e7e3      	b.n	1f55a <queue_insert+0x6c>
	return list->head;
   1f592:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f594:	6823      	ldr	r3, [r4, #0]
   1f596:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f59a:	4313      	orrs	r3, r2
   1f59c:	6023      	str	r3, [r4, #0]
	list->head = node;
   1f59e:	602c      	str	r4, [r5, #0]
	return list->tail;
   1f5a0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f5a2:	2b00      	cmp	r3, #0
   1f5a4:	d1cf      	bne.n	1f546 <queue_insert+0x58>
	list->tail = node;
   1f5a6:	606c      	str	r4, [r5, #4]
}
   1f5a8:	e7cd      	b.n	1f546 <queue_insert+0x58>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f5aa:	6823      	ldr	r3, [r4, #0]
   1f5ac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f5b0:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f5b2:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f5b4:	b132      	cbz	r2, 1f5c4 <queue_insert+0xd6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f5b6:	6813      	ldr	r3, [r2, #0]
   1f5b8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f5bc:	4323      	orrs	r3, r4
   1f5be:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f5c0:	606c      	str	r4, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f5c2:	e7c0      	b.n	1f546 <queue_insert+0x58>
	list->tail = node;
   1f5c4:	606c      	str	r4, [r5, #4]
	list->head = node;
   1f5c6:	602c      	str	r4, [r5, #0]
}
   1f5c8:	e7bd      	b.n	1f546 <queue_insert+0x58>

0001f5ca <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f5ca:	b160      	cbz	r0, 1f5e6 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f5cc:	6803      	ldr	r3, [r0, #0]
   1f5ce:	f013 0f03 	tst.w	r3, #3
   1f5d2:	d008      	beq.n	1f5e6 <z_queue_node_peek+0x1c>
{
   1f5d4:	b510      	push	{r4, lr}
		ret = anode->data;
   1f5d6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f5d8:	b909      	cbnz	r1, 1f5de <z_queue_node_peek+0x14>
		ret = anode->data;
   1f5da:	4620      	mov	r0, r4
}
   1f5dc:	bd10      	pop	{r4, pc}
			k_free(anode);
   1f5de:	f000 fcf0 	bl	1ffc2 <k_free>
		ret = anode->data;
   1f5e2:	4620      	mov	r0, r4
   1f5e4:	e7fa      	b.n	1f5dc <z_queue_node_peek+0x12>
}
   1f5e6:	4770      	bx	lr

0001f5e8 <z_impl_k_queue_init>:
	list->head = NULL;
   1f5e8:	2300      	movs	r3, #0
   1f5ea:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   1f5ec:	6043      	str	r3, [r0, #4]
   1f5ee:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1f5f2:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1f5f4:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1f5f6:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1f5fa:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1f5fc:	6143      	str	r3, [r0, #20]
}
   1f5fe:	4770      	bx	lr

0001f600 <k_queue_append>:
{
   1f600:	b500      	push	{lr}
   1f602:	b083      	sub	sp, #12
   1f604:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f606:	2301      	movs	r3, #1
   1f608:	9300      	str	r3, [sp, #0]
   1f60a:	2300      	movs	r3, #0
   1f60c:	4619      	mov	r1, r3
   1f60e:	f7ff ff6e 	bl	1f4ee <queue_insert>
}
   1f612:	b003      	add	sp, #12
   1f614:	f85d fb04 	ldr.w	pc, [sp], #4

0001f618 <k_queue_prepend>:
{
   1f618:	b500      	push	{lr}
   1f61a:	b083      	sub	sp, #12
   1f61c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f61e:	2100      	movs	r1, #0
   1f620:	9100      	str	r1, [sp, #0]
   1f622:	460b      	mov	r3, r1
   1f624:	f7ff ff63 	bl	1f4ee <queue_insert>
}
   1f628:	b003      	add	sp, #12
   1f62a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f62e <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   1f62e:	2900      	cmp	r1, #0
   1f630:	d036      	beq.n	1f6a0 <k_queue_append_list+0x72>
{
   1f632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f636:	4606      	mov	r6, r0
   1f638:	4617      	mov	r7, r2
   1f63a:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   1f63c:	b39a      	cbz	r2, 1f6a6 <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f63e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f642:	f04f 0320 	mov.w	r3, #32
   1f646:	f3ef 8811 	mrs	r8, BASEPRI
   1f64a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f64e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1f652:	4628      	mov	r0, r5
   1f654:	f000 fab2 	bl	1fbbc <z_unpend_first_thread>
   1f658:	e006      	b.n	1f668 <k_queue_append_list+0x3a>
		prepare_thread_to_run(thread, head);
   1f65a:	4621      	mov	r1, r4
   1f65c:	f7ff ff3f 	bl	1f4de <prepare_thread_to_run>
		head = *(void **)head;
   1f660:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1f662:	4628      	mov	r0, r5
   1f664:	f000 faaa 	bl	1fbbc <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1f668:	b10c      	cbz	r4, 1f66e <k_queue_append_list+0x40>
   1f66a:	2800      	cmp	r0, #0
   1f66c:	d1f5      	bne.n	1f65a <k_queue_append_list+0x2c>
	if (head != NULL) {
   1f66e:	b14c      	cbz	r4, 1f684 <k_queue_append_list+0x56>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f670:	b144      	cbz	r4, 1f684 <k_queue_append_list+0x56>
   1f672:	b13f      	cbz	r7, 1f684 <k_queue_append_list+0x56>
	return list->tail;
   1f674:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f676:	b18a      	cbz	r2, 1f69c <k_queue_append_list+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f678:	6813      	ldr	r3, [r2, #0]
   1f67a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f67e:	431c      	orrs	r4, r3
   1f680:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1f682:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f684:	2104      	movs	r1, #4
   1f686:	f106 0010 	add.w	r0, r6, #16
   1f68a:	f000 fc6c 	bl	1ff66 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f68e:	4641      	mov	r1, r8
   1f690:	4628      	mov	r0, r5
   1f692:	f7f7 f907 	bl	168a4 <z_reschedule>
	return 0;
   1f696:	2000      	movs	r0, #0
}
   1f698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   1f69c:	6034      	str	r4, [r6, #0]
}
   1f69e:	e7f0      	b.n	1f682 <k_queue_append_list+0x54>
		return -EINVAL;
   1f6a0:	f06f 0015 	mvn.w	r0, #21
}
   1f6a4:	4770      	bx	lr
		return -EINVAL;
   1f6a6:	f06f 0015 	mvn.w	r0, #21
   1f6aa:	e7f5      	b.n	1f698 <k_queue_append_list+0x6a>

0001f6ac <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f6ac:	b15a      	cbz	r2, 1f6c6 <z_impl_k_sem_init+0x1a>
   1f6ae:	428a      	cmp	r2, r1
   1f6b0:	d30c      	bcc.n	1f6cc <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1f6b2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1f6b4:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1f6b6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1f6b8:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   1f6ba:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1f6be:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1f6c0:	6143      	str	r3, [r0, #20]
	return 0;
   1f6c2:	2000      	movs	r0, #0
   1f6c4:	4770      	bx	lr
		return -EINVAL;
   1f6c6:	f06f 0015 	mvn.w	r0, #21
   1f6ca:	4770      	bx	lr
   1f6cc:	f06f 0015 	mvn.w	r0, #21
}
   1f6d0:	4770      	bx	lr

0001f6d2 <cancel_async_locked>:
{
   1f6d2:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   1f6d4:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f6d6:	f012 0f02 	tst.w	r2, #2
   1f6da:	d009      	beq.n	1f6f0 <cancel_async_locked+0x1e>
	return *flagp;
   1f6dc:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1f6de:	f012 000f 	ands.w	r0, r2, #15
   1f6e2:	d004      	beq.n	1f6ee <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
   1f6e4:	f042 0202 	orr.w	r2, r2, #2
   1f6e8:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f6ea:	f002 000f 	and.w	r0, r2, #15
}
   1f6ee:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
   1f6f0:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
   1f6f2:	f022 0104 	bic.w	r1, r2, #4
   1f6f6:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f6f8:	f012 0f04 	tst.w	r2, #4
   1f6fc:	d0ee      	beq.n	1f6dc <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   1f6fe:	f100 0cb8 	add.w	ip, r0, #184	; 0xb8
	return list->head;
   1f702:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f706:	2100      	movs	r1, #0
   1f708:	2a00      	cmp	r2, #0
   1f70a:	d0e7      	beq.n	1f6dc <cancel_async_locked+0xa>
   1f70c:	4293      	cmp	r3, r2
   1f70e:	d002      	beq.n	1f716 <cancel_async_locked+0x44>
   1f710:	4611      	mov	r1, r2
   1f712:	6812      	ldr	r2, [r2, #0]
   1f714:	e7f8      	b.n	1f708 <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f716:	b141      	cbz	r1, 1f72a <cancel_async_locked+0x58>
	return node->next;
   1f718:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1f71a:	600a      	str	r2, [r1, #0]
	return list->tail;
   1f71c:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f720:	4293      	cmp	r3, r2
   1f722:	d00c      	beq.n	1f73e <cancel_async_locked+0x6c>
	parent->next = child;
   1f724:	2200      	movs	r2, #0
   1f726:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f728:	e7d8      	b.n	1f6dc <cancel_async_locked+0xa>
	return node->next;
   1f72a:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1f72c:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
	return list->tail;
   1f730:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f734:	428b      	cmp	r3, r1
   1f736:	d1f5      	bne.n	1f724 <cancel_async_locked+0x52>
	list->tail = node;
   1f738:	f8cc 2004 	str.w	r2, [ip, #4]
}
   1f73c:	e7f2      	b.n	1f724 <cancel_async_locked+0x52>
	list->tail = node;
   1f73e:	f8cc 1004 	str.w	r1, [ip, #4]
}
   1f742:	e7ef      	b.n	1f724 <cancel_async_locked+0x52>

0001f744 <work_timeout>:
{
   1f744:	b510      	push	{r4, lr}
   1f746:	b082      	sub	sp, #8
   1f748:	4603      	mov	r3, r0
   1f74a:	f04f 0220 	mov.w	r2, #32
   1f74e:	f3ef 8411 	mrs	r4, BASEPRI
   1f752:	f382 8812 	msr	BASEPRI_MAX, r2
   1f756:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1f75a:	2200      	movs	r2, #0
   1f75c:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   1f75e:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   1f762:	f022 0108 	bic.w	r1, r2, #8
   1f766:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f76a:	f012 0f08 	tst.w	r2, #8
   1f76e:	d105      	bne.n	1f77c <work_timeout+0x38>
	__asm__ volatile(
   1f770:	f384 8811 	msr	BASEPRI, r4
   1f774:	f3bf 8f6f 	isb	sy
}
   1f778:	b002      	add	sp, #8
   1f77a:	bd10      	pop	{r4, pc}
   1f77c:	3810      	subs	r0, #16
		queue = dw->queue;
   1f77e:	699b      	ldr	r3, [r3, #24]
   1f780:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1f782:	a901      	add	r1, sp, #4
   1f784:	f7f6 fe7c 	bl	16480 <submit_to_queue_locked>
   1f788:	e7f2      	b.n	1f770 <work_timeout+0x2c>

0001f78a <cancel_delayable_async_locked>:
{
   1f78a:	b510      	push	{r4, lr}
   1f78c:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   1f78e:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   1f790:	f023 0208 	bic.w	r2, r3, #8
   1f794:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f796:	f013 0f08 	tst.w	r3, #8
   1f79a:	d103      	bne.n	1f7a4 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   1f79c:	4620      	mov	r0, r4
   1f79e:	f7ff ff98 	bl	1f6d2 <cancel_async_locked>
}
   1f7a2:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   1f7a4:	3010      	adds	r0, #16
   1f7a6:	f000 fa96 	bl	1fcd6 <z_abort_timeout>
		ret = true;
   1f7aa:	e7f7      	b.n	1f79c <cancel_delayable_async_locked+0x12>

0001f7ac <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1f7ac:	2300      	movs	r3, #0
   1f7ae:	6003      	str	r3, [r0, #0]
   1f7b0:	6043      	str	r3, [r0, #4]
   1f7b2:	6083      	str	r3, [r0, #8]
   1f7b4:	60c3      	str	r3, [r0, #12]
   1f7b6:	6041      	str	r1, [r0, #4]
}
   1f7b8:	4770      	bx	lr

0001f7ba <z_work_submit_to_queue>:
{
   1f7ba:	b510      	push	{r4, lr}
   1f7bc:	b082      	sub	sp, #8
   1f7be:	9001      	str	r0, [sp, #4]
   1f7c0:	4608      	mov	r0, r1
	__asm__ volatile(
   1f7c2:	f04f 0320 	mov.w	r3, #32
   1f7c6:	f3ef 8411 	mrs	r4, BASEPRI
   1f7ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7ce:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1f7d2:	a901      	add	r1, sp, #4
   1f7d4:	f7f6 fe54 	bl	16480 <submit_to_queue_locked>
	__asm__ volatile(
   1f7d8:	f384 8811 	msr	BASEPRI, r4
   1f7dc:	f3bf 8f6f 	isb	sy
}
   1f7e0:	b002      	add	sp, #8
   1f7e2:	bd10      	pop	{r4, pc}

0001f7e4 <k_work_submit_to_queue>:
{
   1f7e4:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1f7e6:	f7ff ffe8 	bl	1f7ba <z_work_submit_to_queue>
	if (ret > 0) {
   1f7ea:	1e04      	subs	r4, r0, #0
   1f7ec:	dc01      	bgt.n	1f7f2 <k_work_submit_to_queue+0xe>
}
   1f7ee:	4620      	mov	r0, r4
   1f7f0:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   1f7f2:	f04f 0320 	mov.w	r3, #32
   1f7f6:	f3ef 8011 	mrs	r0, BASEPRI
   1f7fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7fe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f802:	f000 f8cc 	bl	1f99e <z_reschedule_irqlock>
	return ret;
   1f806:	e7f2      	b.n	1f7ee <k_work_submit_to_queue+0xa>

0001f808 <k_work_queue_init>:
{
   1f808:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1f80a:	22d8      	movs	r2, #216	; 0xd8
   1f80c:	2100      	movs	r1, #0
   1f80e:	f7fa fc4b 	bl	1a0a8 <memset>
}
   1f812:	bd08      	pop	{r3, pc}

0001f814 <k_work_init_delayable>:
{
   1f814:	b538      	push	{r3, r4, r5, lr}
   1f816:	4604      	mov	r4, r0
   1f818:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1f81a:	2230      	movs	r2, #48	; 0x30
   1f81c:	2100      	movs	r1, #0
   1f81e:	f7fa fc43 	bl	1a0a8 <memset>
   1f822:	6065      	str	r5, [r4, #4]
   1f824:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f828:	60e3      	str	r3, [r4, #12]
}
   1f82a:	bd38      	pop	{r3, r4, r5, pc}

0001f82c <k_work_delayable_busy_get>:
   1f82c:	f04f 0220 	mov.w	r2, #32
   1f830:	f3ef 8311 	mrs	r3, BASEPRI
   1f834:	f382 8812 	msr	BASEPRI_MAX, r2
   1f838:	f3bf 8f6f 	isb	sy
	return *flagp;
   1f83c:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1f83e:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1f842:	f383 8811 	msr	BASEPRI, r3
   1f846:	f3bf 8f6f 	isb	sy
}
   1f84a:	4770      	bx	lr

0001f84c <k_work_schedule_for_queue>:
{
   1f84c:	b510      	push	{r4, lr}
   1f84e:	b082      	sub	sp, #8
   1f850:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1f852:	f04f 0020 	mov.w	r0, #32
   1f856:	f3ef 8411 	mrs	r4, BASEPRI
   1f85a:	f380 8812 	msr	BASEPRI_MAX, r0
   1f85e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1f862:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1f864:	f010 0f0e 	tst.w	r0, #14
   1f868:	d006      	beq.n	1f878 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1f86a:	2000      	movs	r0, #0
	__asm__ volatile(
   1f86c:	f384 8811 	msr	BASEPRI, r4
   1f870:	f3bf 8f6f 	isb	sy
}
   1f874:	b002      	add	sp, #8
   1f876:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   1f878:	a801      	add	r0, sp, #4
   1f87a:	f7f6 fe8f 	bl	1659c <schedule_for_queue_locked>
   1f87e:	e7f5      	b.n	1f86c <k_work_schedule_for_queue+0x20>

0001f880 <k_work_reschedule_for_queue>:
{
   1f880:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f882:	b083      	sub	sp, #12
   1f884:	9001      	str	r0, [sp, #4]
   1f886:	460c      	mov	r4, r1
   1f888:	4616      	mov	r6, r2
   1f88a:	461d      	mov	r5, r3
	__asm__ volatile(
   1f88c:	f04f 0320 	mov.w	r3, #32
   1f890:	f3ef 8711 	mrs	r7, BASEPRI
   1f894:	f383 8812 	msr	BASEPRI_MAX, r3
   1f898:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   1f89c:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   1f89e:	f023 0208 	bic.w	r2, r3, #8
   1f8a2:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f8a4:	f013 0f08 	tst.w	r3, #8
   1f8a8:	d10b      	bne.n	1f8c2 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   1f8aa:	4632      	mov	r2, r6
   1f8ac:	462b      	mov	r3, r5
   1f8ae:	4621      	mov	r1, r4
   1f8b0:	a801      	add	r0, sp, #4
   1f8b2:	f7f6 fe73 	bl	1659c <schedule_for_queue_locked>
	__asm__ volatile(
   1f8b6:	f387 8811 	msr	BASEPRI, r7
   1f8ba:	f3bf 8f6f 	isb	sy
}
   1f8be:	b003      	add	sp, #12
   1f8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   1f8c2:	f101 0010 	add.w	r0, r1, #16
   1f8c6:	f000 fa06 	bl	1fcd6 <z_abort_timeout>
		ret = true;
   1f8ca:	e7ee      	b.n	1f8aa <k_work_reschedule_for_queue+0x2a>

0001f8cc <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1f8cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f8ce:	f04f 0320 	mov.w	r3, #32
   1f8d2:	f3ef 8411 	mrs	r4, BASEPRI
   1f8d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8da:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   1f8de:	f7ff ff54 	bl	1f78a <cancel_delayable_async_locked>
	__asm__ volatile(
   1f8e2:	f384 8811 	msr	BASEPRI, r4
   1f8e6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1f8ea:	bd10      	pop	{r4, pc}

0001f8ec <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8ee:	460f      	mov	r7, r1
	__asm__ volatile(
   1f8f0:	f04f 0320 	mov.w	r3, #32
   1f8f4:	f3ef 8611 	mrs	r6, BASEPRI
   1f8f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8fc:	f3bf 8f6f 	isb	sy
	return *flagp;
   1f900:	68c3      	ldr	r3, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1f902:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1f906:	2b00      	cmp	r3, #0
   1f908:	bf14      	ite	ne
   1f90a:	2501      	movne	r5, #1
   1f90c:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   1f90e:	d107      	bne.n	1f920 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   1f910:	2000      	movs	r0, #0
	__asm__ volatile(
   1f912:	f386 8811 	msr	BASEPRI, r6
   1f916:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1f91a:	b948      	cbnz	r0, 1f930 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1f91c:	4628      	mov	r0, r5
   1f91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f920:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   1f922:	f7ff ff32 	bl	1f78a <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1f926:	4639      	mov	r1, r7
   1f928:	4620      	mov	r0, r4
   1f92a:	f7f6 fe15 	bl	16558 <cancel_sync_locked>
   1f92e:	e7f0      	b.n	1f912 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   1f930:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   1f934:	f04f 32ff 	mov.w	r2, #4294967295
   1f938:	f04f 33ff 	mov.w	r3, #4294967295
   1f93c:	f7f6 fd5e 	bl	163fc <z_impl_k_sem_take>
   1f940:	e7ec      	b.n	1f91c <k_work_cancel_delayable_sync+0x30>

0001f942 <thread_active_elsewhere>:
}
   1f942:	2000      	movs	r0, #0
   1f944:	4770      	bx	lr

0001f946 <pended_on_thread>:
}
   1f946:	6880      	ldr	r0, [r0, #8]
   1f948:	4770      	bx	lr

0001f94a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f94a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f94e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f952:	4283      	cmp	r3, r0
   1f954:	d001      	beq.n	1f95a <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1f956:	1ac0      	subs	r0, r0, r3
   1f958:	4770      	bx	lr
	return 0;
   1f95a:	2000      	movs	r0, #0
}
   1f95c:	4770      	bx	lr

0001f95e <z_unpend_thread_no_timeout>:
{
   1f95e:	b538      	push	{r3, r4, r5, lr}
   1f960:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1f962:	2300      	movs	r3, #0
	__asm__ volatile(
   1f964:	f04f 0220 	mov.w	r2, #32
   1f968:	f3ef 8511 	mrs	r5, BASEPRI
   1f96c:	f382 8812 	msr	BASEPRI_MAX, r2
   1f970:	f3bf 8f6f 	isb	sy
   1f974:	e010      	b.n	1f998 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1f976:	4620      	mov	r0, r4
   1f978:	f7ff ffe5 	bl	1f946 <pended_on_thread>
   1f97c:	4621      	mov	r1, r4
   1f97e:	f000 f823 	bl	1f9c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f982:	7b63      	ldrb	r3, [r4, #13]
   1f984:	f023 0302 	bic.w	r3, r3, #2
   1f988:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1f98a:	2300      	movs	r3, #0
   1f98c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1f98e:	f385 8811 	msr	BASEPRI, r5
   1f992:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1f996:	2301      	movs	r3, #1
   1f998:	2b00      	cmp	r3, #0
   1f99a:	d0ec      	beq.n	1f976 <z_unpend_thread_no_timeout+0x18>
}
   1f99c:	bd38      	pop	{r3, r4, r5, pc}

0001f99e <z_reschedule_irqlock>:
{
   1f99e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f9a0:	4603      	mov	r3, r0
   1f9a2:	b920      	cbnz	r0, 1f9ae <z_reschedule_irqlock+0x10>
   1f9a4:	f3ef 8205 	mrs	r2, IPSR
   1f9a8:	b942      	cbnz	r2, 1f9bc <z_reschedule_irqlock+0x1e>
   1f9aa:	2201      	movs	r2, #1
   1f9ac:	e000      	b.n	1f9b0 <z_reschedule_irqlock+0x12>
   1f9ae:	2200      	movs	r2, #0
	if (resched(key)) {
   1f9b0:	b932      	cbnz	r2, 1f9c0 <z_reschedule_irqlock+0x22>
   1f9b2:	f383 8811 	msr	BASEPRI, r3
   1f9b6:	f3bf 8f6f 	isb	sy
}
   1f9ba:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f9bc:	2200      	movs	r2, #0
   1f9be:	e7f7      	b.n	1f9b0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1f9c0:	4618      	mov	r0, r3
   1f9c2:	f7e5 fe6b 	bl	569c <arch_swap>
	return ret;
   1f9c6:	e7f8      	b.n	1f9ba <z_reschedule_irqlock+0x1c>

0001f9c8 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   1f9c8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1f9ca:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   1f9cc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f9ce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f9d0:	2300      	movs	r3, #0
   1f9d2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1f9d4:	604b      	str	r3, [r1, #4]
}
   1f9d6:	4770      	bx	lr

0001f9d8 <z_unpend_thread>:
{
   1f9d8:	b538      	push	{r3, r4, r5, lr}
   1f9da:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1f9dc:	2300      	movs	r3, #0
	__asm__ volatile(
   1f9de:	f04f 0220 	mov.w	r2, #32
   1f9e2:	f3ef 8511 	mrs	r5, BASEPRI
   1f9e6:	f382 8812 	msr	BASEPRI_MAX, r2
   1f9ea:	f3bf 8f6f 	isb	sy
   1f9ee:	e010      	b.n	1fa12 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1f9f0:	4620      	mov	r0, r4
   1f9f2:	f7ff ffa8 	bl	1f946 <pended_on_thread>
   1f9f6:	4621      	mov	r1, r4
   1f9f8:	f7ff ffe6 	bl	1f9c8 <z_priq_dumb_remove>
   1f9fc:	7b63      	ldrb	r3, [r4, #13]
   1f9fe:	f023 0302 	bic.w	r3, r3, #2
   1fa02:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1fa04:	2300      	movs	r3, #0
   1fa06:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1fa08:	f385 8811 	msr	BASEPRI, r5
   1fa0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fa10:	2301      	movs	r3, #1
   1fa12:	2b00      	cmp	r3, #0
   1fa14:	d0ec      	beq.n	1f9f0 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   1fa16:	f104 0018 	add.w	r0, r4, #24
   1fa1a:	f000 f95c 	bl	1fcd6 <z_abort_timeout>
}
   1fa1e:	bd38      	pop	{r3, r4, r5, pc}

0001fa20 <z_priq_dumb_best>:
{
   1fa20:	4603      	mov	r3, r0
	return list->head == list;
   1fa22:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa24:	4283      	cmp	r3, r0
   1fa26:	d000      	beq.n	1fa2a <z_priq_dumb_best+0xa>
}
   1fa28:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1fa2a:	2000      	movs	r0, #0
	return thread;
   1fa2c:	e7fc      	b.n	1fa28 <z_priq_dumb_best+0x8>

0001fa2e <z_ready_thread>:
{
   1fa2e:	b538      	push	{r3, r4, r5, lr}
   1fa30:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1fa32:	2300      	movs	r3, #0
	__asm__ volatile(
   1fa34:	f04f 0220 	mov.w	r2, #32
   1fa38:	f3ef 8511 	mrs	r5, BASEPRI
   1fa3c:	f382 8812 	msr	BASEPRI_MAX, r2
   1fa40:	f3bf 8f6f 	isb	sy
   1fa44:	e004      	b.n	1fa50 <z_ready_thread+0x22>
	__asm__ volatile(
   1fa46:	f385 8811 	msr	BASEPRI, r5
   1fa4a:	f3bf 8f6f 	isb	sy
   1fa4e:	2301      	movs	r3, #1
   1fa50:	b943      	cbnz	r3, 1fa64 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1fa52:	4620      	mov	r0, r4
   1fa54:	f7ff ff75 	bl	1f942 <thread_active_elsewhere>
   1fa58:	2800      	cmp	r0, #0
   1fa5a:	d1f4      	bne.n	1fa46 <z_ready_thread+0x18>
			ready_thread(thread);
   1fa5c:	4620      	mov	r0, r4
   1fa5e:	f7f7 f82f 	bl	16ac0 <ready_thread>
   1fa62:	e7f0      	b.n	1fa46 <z_ready_thread+0x18>
}
   1fa64:	bd38      	pop	{r3, r4, r5, pc}

0001fa66 <z_thread_timeout>:
{
   1fa66:	b570      	push	{r4, r5, r6, lr}
   1fa68:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1fa6a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   1fa6e:	2300      	movs	r3, #0
	__asm__ volatile(
   1fa70:	f04f 0220 	mov.w	r2, #32
   1fa74:	f3ef 8611 	mrs	r6, BASEPRI
   1fa78:	f382 8812 	msr	BASEPRI_MAX, r2
   1fa7c:	f3bf 8f6f 	isb	sy
   1fa80:	e011      	b.n	1faa6 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fa82:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1fa86:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1fa8a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1fa8e:	f023 0310 	bic.w	r3, r3, #16
   1fa92:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1fa96:	4628      	mov	r0, r5
   1fa98:	f7f7 f812 	bl	16ac0 <ready_thread>
	__asm__ volatile(
   1fa9c:	f386 8811 	msr	BASEPRI, r6
   1faa0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1faa4:	2301      	movs	r3, #1
   1faa6:	b9ab      	cbnz	r3, 1fad4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1faa8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1faac:	f013 0f28 	tst.w	r3, #40	; 0x28
   1fab0:	d1f4      	bne.n	1fa9c <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   1fab2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1fab6:	2b00      	cmp	r3, #0
   1fab8:	d0e3      	beq.n	1fa82 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1faba:	4628      	mov	r0, r5
   1fabc:	f7ff ff43 	bl	1f946 <pended_on_thread>
   1fac0:	4629      	mov	r1, r5
   1fac2:	f7ff ff81 	bl	1f9c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fac6:	7b6b      	ldrb	r3, [r5, #13]
   1fac8:	f023 0302 	bic.w	r3, r3, #2
   1facc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1face:	2300      	movs	r3, #0
   1fad0:	60ab      	str	r3, [r5, #8]
}
   1fad2:	e7d6      	b.n	1fa82 <z_thread_timeout+0x1c>
}
   1fad4:	bd70      	pop	{r4, r5, r6, pc}

0001fad6 <add_to_waitq_locked>:
{
   1fad6:	b570      	push	{r4, r5, r6, lr}
   1fad8:	4605      	mov	r5, r0
   1fada:	460e      	mov	r6, r1
	unready_thread(thread);
   1fadc:	f7f7 f84e 	bl	16b7c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1fae0:	7b6b      	ldrb	r3, [r5, #13]
   1fae2:	f043 0302 	orr.w	r3, r3, #2
   1fae6:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1fae8:	b1b6      	cbz	r6, 1fb18 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   1faea:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1faec:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1faee:	42a6      	cmp	r6, r4
   1faf0:	d019      	beq.n	1fb26 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1faf2:	b164      	cbz	r4, 1fb0e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1faf4:	4621      	mov	r1, r4
   1faf6:	4628      	mov	r0, r5
   1faf8:	f7ff ff27 	bl	1f94a <z_sched_prio_cmp>
   1fafc:	2800      	cmp	r0, #0
   1fafe:	dc0c      	bgt.n	1fb1a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fb00:	b12c      	cbz	r4, 1fb0e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1fb02:	6873      	ldr	r3, [r6, #4]
   1fb04:	429c      	cmp	r4, r3
   1fb06:	d002      	beq.n	1fb0e <add_to_waitq_locked+0x38>
   1fb08:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fb0a:	2c00      	cmp	r4, #0
   1fb0c:	d1f1      	bne.n	1faf2 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   1fb0e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1fb10:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1fb12:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1fb14:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1fb16:	6075      	str	r5, [r6, #4]
}
   1fb18:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   1fb1a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1fb1c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1fb1e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1fb20:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1fb22:	6065      	str	r5, [r4, #4]
}
   1fb24:	e7f8      	b.n	1fb18 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fb26:	2400      	movs	r4, #0
   1fb28:	e7e3      	b.n	1faf2 <add_to_waitq_locked+0x1c>

0001fb2a <pend>:
{
   1fb2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fb2e:	4605      	mov	r5, r0
   1fb30:	460e      	mov	r6, r1
   1fb32:	4691      	mov	r9, r2
   1fb34:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1fb36:	2400      	movs	r4, #0
	__asm__ volatile(
   1fb38:	f04f 0320 	mov.w	r3, #32
   1fb3c:	f3ef 8711 	mrs	r7, BASEPRI
   1fb40:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb44:	f3bf 8f6f 	isb	sy
   1fb48:	e008      	b.n	1fb5c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
   1fb4a:	4631      	mov	r1, r6
   1fb4c:	4628      	mov	r0, r5
   1fb4e:	f7ff ffc2 	bl	1fad6 <add_to_waitq_locked>
	__asm__ volatile(
   1fb52:	f387 8811 	msr	BASEPRI, r7
   1fb56:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fb5a:	2401      	movs	r4, #1
   1fb5c:	2c00      	cmp	r4, #0
   1fb5e:	d0f4      	beq.n	1fb4a <pend+0x20>
	add_thread_timeout(thread, timeout);
   1fb60:	464a      	mov	r2, r9
   1fb62:	4643      	mov	r3, r8
   1fb64:	4628      	mov	r0, r5
   1fb66:	f7f6 fe3f 	bl	167e8 <add_thread_timeout>
}
   1fb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fb6e <z_unpend1_no_timeout>:
{
   1fb6e:	b570      	push	{r4, r5, r6, lr}
   1fb70:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   1fb72:	2300      	movs	r3, #0
	__asm__ volatile(
   1fb74:	f04f 0220 	mov.w	r2, #32
   1fb78:	f3ef 8611 	mrs	r6, BASEPRI
   1fb7c:	f382 8812 	msr	BASEPRI_MAX, r2
   1fb80:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1fb84:	461c      	mov	r4, r3
   1fb86:	e004      	b.n	1fb92 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
   1fb88:	f386 8811 	msr	BASEPRI, r6
   1fb8c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fb90:	2301      	movs	r3, #1
   1fb92:	b98b      	cbnz	r3, 1fbb8 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   1fb94:	4628      	mov	r0, r5
   1fb96:	f7ff ff43 	bl	1fa20 <z_priq_dumb_best>
		if (thread != NULL) {
   1fb9a:	4604      	mov	r4, r0
   1fb9c:	2800      	cmp	r0, #0
   1fb9e:	d0f3      	beq.n	1fb88 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1fba0:	f7ff fed1 	bl	1f946 <pended_on_thread>
   1fba4:	4621      	mov	r1, r4
   1fba6:	f7ff ff0f 	bl	1f9c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fbaa:	7b63      	ldrb	r3, [r4, #13]
   1fbac:	f023 0302 	bic.w	r3, r3, #2
   1fbb0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1fbb2:	2300      	movs	r3, #0
   1fbb4:	60a3      	str	r3, [r4, #8]
}
   1fbb6:	e7e7      	b.n	1fb88 <z_unpend1_no_timeout+0x1a>
}
   1fbb8:	4620      	mov	r0, r4
   1fbba:	bd70      	pop	{r4, r5, r6, pc}

0001fbbc <z_unpend_first_thread>:
{
   1fbbc:	b570      	push	{r4, r5, r6, lr}
   1fbbe:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   1fbc0:	2300      	movs	r3, #0
	__asm__ volatile(
   1fbc2:	f04f 0220 	mov.w	r2, #32
   1fbc6:	f3ef 8611 	mrs	r6, BASEPRI
   1fbca:	f382 8812 	msr	BASEPRI_MAX, r2
   1fbce:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1fbd2:	461c      	mov	r4, r3
   1fbd4:	e004      	b.n	1fbe0 <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1fbd6:	f386 8811 	msr	BASEPRI, r6
   1fbda:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fbde:	2301      	movs	r3, #1
   1fbe0:	b9ab      	cbnz	r3, 1fc0e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1fbe2:	4628      	mov	r0, r5
   1fbe4:	f7ff ff1c 	bl	1fa20 <z_priq_dumb_best>
		if (thread != NULL) {
   1fbe8:	4604      	mov	r4, r0
   1fbea:	2800      	cmp	r0, #0
   1fbec:	d0f3      	beq.n	1fbd6 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1fbee:	f7ff feaa 	bl	1f946 <pended_on_thread>
   1fbf2:	4621      	mov	r1, r4
   1fbf4:	f7ff fee8 	bl	1f9c8 <z_priq_dumb_remove>
   1fbf8:	7b63      	ldrb	r3, [r4, #13]
   1fbfa:	f023 0302 	bic.w	r3, r3, #2
   1fbfe:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1fc00:	2300      	movs	r3, #0
   1fc02:	60a3      	str	r3, [r4, #8]
   1fc04:	f104 0018 	add.w	r0, r4, #24
   1fc08:	f000 f865 	bl	1fcd6 <z_abort_timeout>
   1fc0c:	e7e3      	b.n	1fbd6 <z_unpend_first_thread+0x1a>
}
   1fc0e:	4620      	mov	r0, r4
   1fc10:	bd70      	pop	{r4, r5, r6, pc}

0001fc12 <z_unpend_all>:
{
   1fc12:	b538      	push	{r3, r4, r5, lr}
   1fc14:	4605      	mov	r5, r0
	int need_sched = 0;
   1fc16:	2000      	movs	r0, #0
	return list->head == list;
   1fc18:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc1a:	42a5      	cmp	r5, r4
   1fc1c:	d008      	beq.n	1fc30 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1fc1e:	b13c      	cbz	r4, 1fc30 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   1fc20:	4620      	mov	r0, r4
   1fc22:	f7ff fed9 	bl	1f9d8 <z_unpend_thread>
		z_ready_thread(thread);
   1fc26:	4620      	mov	r0, r4
   1fc28:	f7ff ff01 	bl	1fa2e <z_ready_thread>
		need_sched = 1;
   1fc2c:	2001      	movs	r0, #1
   1fc2e:	e7f3      	b.n	1fc18 <z_unpend_all+0x6>
}
   1fc30:	bd38      	pop	{r3, r4, r5, pc}

0001fc32 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1fc32:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1fc34:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1fc36:	6083      	str	r3, [r0, #8]
}
   1fc38:	4770      	bx	lr

0001fc3a <z_sched_wake>:
{
   1fc3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fc3e:	4605      	mov	r5, r0
   1fc40:	4688      	mov	r8, r1
   1fc42:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   1fc44:	2300      	movs	r3, #0
	__asm__ volatile(
   1fc46:	f04f 0220 	mov.w	r2, #32
   1fc4a:	f3ef 8611 	mrs	r6, BASEPRI
   1fc4e:	f382 8812 	msr	BASEPRI_MAX, r2
   1fc52:	f3bf 8f6f 	isb	sy
	bool ret = false;
   1fc56:	4699      	mov	r9, r3
   1fc58:	e004      	b.n	1fc64 <z_sched_wake+0x2a>
	__asm__ volatile(
   1fc5a:	f386 8811 	msr	BASEPRI, r6
   1fc5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1fc62:	2301      	movs	r3, #1
   1fc64:	b9eb      	cbnz	r3, 1fca2 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   1fc66:	4628      	mov	r0, r5
   1fc68:	f7ff feda 	bl	1fa20 <z_priq_dumb_best>
		if (thread != NULL) {
   1fc6c:	4604      	mov	r4, r0
   1fc6e:	2800      	cmp	r0, #0
   1fc70:	d0f3      	beq.n	1fc5a <z_sched_wake+0x20>
   1fc72:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   1fc76:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1fc78:	f7ff fe65 	bl	1f946 <pended_on_thread>
   1fc7c:	4621      	mov	r1, r4
   1fc7e:	f7ff fea3 	bl	1f9c8 <z_priq_dumb_remove>
   1fc82:	7b63      	ldrb	r3, [r4, #13]
   1fc84:	f023 0302 	bic.w	r3, r3, #2
   1fc88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1fc8a:	2300      	movs	r3, #0
   1fc8c:	60a3      	str	r3, [r4, #8]
   1fc8e:	f104 0018 	add.w	r0, r4, #24
   1fc92:	f000 f820 	bl	1fcd6 <z_abort_timeout>
			ready_thread(thread);
   1fc96:	4620      	mov	r0, r4
   1fc98:	f7f6 ff12 	bl	16ac0 <ready_thread>
			ret = true;
   1fc9c:	f04f 0901 	mov.w	r9, #1
   1fca0:	e7db      	b.n	1fc5a <z_sched_wake+0x20>
}
   1fca2:	4648      	mov	r0, r9
   1fca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fca8 <remove_timeout>:
{
   1fca8:	b510      	push	{r4, lr}
   1fcaa:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1fcac:	f7f7 f9ec 	bl	17088 <next>
   1fcb0:	b148      	cbz	r0, 1fcc6 <remove_timeout+0x1e>
   1fcb2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1fcb4:	6920      	ldr	r0, [r4, #16]
   1fcb6:	6961      	ldr	r1, [r4, #20]
   1fcb8:	6913      	ldr	r3, [r2, #16]
   1fcba:	181b      	adds	r3, r3, r0
   1fcbc:	6950      	ldr	r0, [r2, #20]
   1fcbe:	eb41 0100 	adc.w	r1, r1, r0
   1fcc2:	6113      	str	r3, [r2, #16]
   1fcc4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1fcc6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1fcc8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1fcca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1fccc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fcce:	2300      	movs	r3, #0
   1fcd0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1fcd2:	6063      	str	r3, [r4, #4]
}
   1fcd4:	bd10      	pop	{r4, pc}

0001fcd6 <z_abort_timeout>:
{
   1fcd6:	b570      	push	{r4, r5, r6, lr}
   1fcd8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1fcda:	2300      	movs	r3, #0
	__asm__ volatile(
   1fcdc:	f04f 0220 	mov.w	r2, #32
   1fce0:	f3ef 8611 	mrs	r6, BASEPRI
   1fce4:	f382 8812 	msr	BASEPRI_MAX, r2
   1fce8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1fcec:	f06f 0015 	mvn.w	r0, #21
   1fcf0:	e004      	b.n	1fcfc <z_abort_timeout+0x26>
	__asm__ volatile(
   1fcf2:	f386 8811 	msr	BASEPRI, r6
   1fcf6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1fcfa:	2301      	movs	r3, #1
   1fcfc:	461d      	mov	r5, r3
   1fcfe:	b93b      	cbnz	r3, 1fd10 <z_abort_timeout+0x3a>
	return node->next != NULL;
   1fd00:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1fd02:	2b00      	cmp	r3, #0
   1fd04:	d0f5      	beq.n	1fcf2 <z_abort_timeout+0x1c>
			remove_timeout(to);
   1fd06:	4620      	mov	r0, r4
   1fd08:	f7ff ffce 	bl	1fca8 <remove_timeout>
			ret = 0;
   1fd0c:	4628      	mov	r0, r5
   1fd0e:	e7f0      	b.n	1fcf2 <z_abort_timeout+0x1c>
}
   1fd10:	bd70      	pop	{r4, r5, r6, pc}

0001fd12 <z_get_next_timeout_expiry>:
{
   1fd12:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1fd14:	2300      	movs	r3, #0
	__asm__ volatile(
   1fd16:	f04f 0220 	mov.w	r2, #32
   1fd1a:	f3ef 8411 	mrs	r4, BASEPRI
   1fd1e:	f382 8812 	msr	BASEPRI_MAX, r2
   1fd22:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1fd26:	f04f 30ff 	mov.w	r0, #4294967295
   1fd2a:	e006      	b.n	1fd3a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1fd2c:	f7f7 f9c4 	bl	170b8 <next_timeout>
	__asm__ volatile(
   1fd30:	f384 8811 	msr	BASEPRI, r4
   1fd34:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1fd38:	2301      	movs	r3, #1
   1fd3a:	2b00      	cmp	r3, #0
   1fd3c:	d0f6      	beq.n	1fd2c <z_get_next_timeout_expiry+0x1a>
}
   1fd3e:	bd10      	pop	{r4, pc}

0001fd40 <z_set_timeout_expiry>:
{
   1fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd42:	4605      	mov	r5, r0
   1fd44:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1fd46:	2300      	movs	r3, #0
	__asm__ volatile(
   1fd48:	f04f 0220 	mov.w	r2, #32
   1fd4c:	f3ef 8611 	mrs	r6, BASEPRI
   1fd50:	f382 8812 	msr	BASEPRI_MAX, r2
   1fd54:	f3bf 8f6f 	isb	sy
   1fd58:	e00a      	b.n	1fd70 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1fd5a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1fd5c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1fd60:	2801      	cmp	r0, #1
   1fd62:	dd00      	ble.n	1fd66 <z_set_timeout_expiry+0x26>
   1fd64:	b97c      	cbnz	r4, 1fd86 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1fd66:	f386 8811 	msr	BASEPRI, r6
   1fd6a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1fd6e:	2301      	movs	r3, #1
   1fd70:	461c      	mov	r4, r3
   1fd72:	b97b      	cbnz	r3, 1fd94 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1fd74:	f7f7 f9a0 	bl	170b8 <next_timeout>
			      || (ticks <= next_to);
   1fd78:	f1b0 3fff 	cmp.w	r0, #4294967295
   1fd7c:	d0ed      	beq.n	1fd5a <z_set_timeout_expiry+0x1a>
   1fd7e:	42a8      	cmp	r0, r5
   1fd80:	dbec      	blt.n	1fd5c <z_set_timeout_expiry+0x1c>
   1fd82:	2401      	movs	r4, #1
   1fd84:	e7ea      	b.n	1fd5c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1fd86:	4639      	mov	r1, r7
   1fd88:	42a8      	cmp	r0, r5
   1fd8a:	bfa8      	it	ge
   1fd8c:	4628      	movge	r0, r5
   1fd8e:	f7f2 ff4d 	bl	12c2c <sys_clock_set_timeout>
   1fd92:	e7e8      	b.n	1fd66 <z_set_timeout_expiry+0x26>
}
   1fd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fd96 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1fd96:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1fd98:	f7f7 faa2 	bl	172e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1fd9c:	bd08      	pop	{r3, pc}

0001fd9e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1fd9e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   1fda0:	f7f7 fa9e 	bl	172e0 <sys_clock_tick_get>
}
   1fda4:	bd08      	pop	{r3, pc}

0001fda6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1fda6:	b900      	cbnz	r0, 1fdaa <z_impl_k_busy_wait+0x4>
   1fda8:	4770      	bx	lr
{
   1fdaa:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1fdac:	f7e3 f89c 	bl	2ee8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1fdb0:	bd08      	pop	{r3, pc}

0001fdb2 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fdb2:	f1b1 3fff 	cmp.w	r1, #4294967295
   1fdb6:	bf08      	it	eq
   1fdb8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1fdbc:	d021      	beq.n	1fe02 <sys_clock_timeout_end_calc+0x50>
{
   1fdbe:	b538      	push	{r3, r4, r5, lr}
   1fdc0:	4605      	mov	r5, r0
   1fdc2:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fdc4:	ea51 0300 	orrs.w	r3, r1, r0
   1fdc8:	d009      	beq.n	1fdde <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1fdca:	f06f 0301 	mvn.w	r3, #1
   1fdce:	1a18      	subs	r0, r3, r0
   1fdd0:	f04f 33ff 	mov.w	r3, #4294967295
   1fdd4:	eb63 0101 	sbc.w	r1, r3, r1
   1fdd8:	2900      	cmp	r1, #0
   1fdda:	db03      	blt.n	1fde4 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1fddc:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   1fdde:	f7f7 fa7f 	bl	172e0 <sys_clock_tick_get>
   1fde2:	e7fb      	b.n	1fddc <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   1fde4:	f7f7 fa7c 	bl	172e0 <sys_clock_tick_get>
   1fde8:	4603      	mov	r3, r0
   1fdea:	4628      	mov	r0, r5
   1fdec:	4622      	mov	r2, r4
   1fdee:	2d01      	cmp	r5, #1
   1fdf0:	f174 0400 	sbcs.w	r4, r4, #0
   1fdf4:	da01      	bge.n	1fdfa <sys_clock_timeout_end_calc+0x48>
   1fdf6:	2001      	movs	r0, #1
   1fdf8:	2200      	movs	r2, #0
   1fdfa:	1818      	adds	r0, r3, r0
   1fdfc:	eb41 0102 	adc.w	r1, r1, r2
   1fe00:	e7ec      	b.n	1fddc <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   1fe02:	f04f 30ff 	mov.w	r0, #4294967295
   1fe06:	4601      	mov	r1, r0
}
   1fe08:	4770      	bx	lr

0001fe0a <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   1fe0a:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   1fe0c:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1fe0e:	2300      	movs	r3, #0
   1fe10:	6303      	str	r3, [r0, #48]	; 0x30
   1fe12:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   1fe16:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   1fe18:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   1fe1a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1fe1c:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   1fe1e:	6343      	str	r3, [r0, #52]	; 0x34
}
   1fe20:	4770      	bx	lr

0001fe22 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1fe22:	b510      	push	{r4, lr}
   1fe24:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1fe26:	f7ff ff56 	bl	1fcd6 <z_abort_timeout>

	if (inactive) {
   1fe2a:	b9a0      	cbnz	r0, 1fe56 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   1fe2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe2e:	b10b      	cbz	r3, 1fe34 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1fe30:	4620      	mov	r0, r4
   1fe32:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1fe34:	f104 0018 	add.w	r0, r4, #24
   1fe38:	f7ff fe99 	bl	1fb6e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1fe3c:	b158      	cbz	r0, 1fe56 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   1fe3e:	f7ff fdf6 	bl	1fa2e <z_ready_thread>
	__asm__ volatile(
   1fe42:	f04f 0320 	mov.w	r3, #32
   1fe46:	f3ef 8011 	mrs	r0, BASEPRI
   1fe4a:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe4e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fe52:	f7ff fda4 	bl	1f99e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   1fe56:	bd10      	pop	{r4, pc}

0001fe58 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1fe58:	b108      	cbz	r0, 1fe5e <poller_thread+0x6>
   1fe5a:	3860      	subs	r0, #96	; 0x60
   1fe5c:	4770      	bx	lr
}
   1fe5e:	4770      	bx	lr

0001fe60 <signal_poller>:
{
   1fe60:	b538      	push	{r3, r4, r5, lr}
   1fe62:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   1fe64:	6880      	ldr	r0, [r0, #8]
   1fe66:	f7ff fff7 	bl	1fe58 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1fe6a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   1fe6c:	f013 0f02 	tst.w	r3, #2
   1fe70:	d025      	beq.n	1febe <signal_poller+0x5e>
   1fe72:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   1fe74:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1fe76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   1fe78:	f1b3 3fff 	cmp.w	r3, #4294967295
   1fe7c:	bf08      	it	eq
   1fe7e:	f112 0f02 	cmneq.w	r2, #2
   1fe82:	d01e      	beq.n	1fec2 <signal_poller+0x62>
	z_unpend_thread(thread);
   1fe84:	f7ff fda8 	bl	1f9d8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1fe88:	2d08      	cmp	r5, #8
   1fe8a:	d00a      	beq.n	1fea2 <signal_poller+0x42>
   1fe8c:	2300      	movs	r3, #0
   1fe8e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   1fe92:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fe94:	f013 0f1f 	tst.w	r3, #31
   1fe98:	d108      	bne.n	1feac <signal_poller+0x4c>
	return node->next != NULL;
   1fe9a:	69a3      	ldr	r3, [r4, #24]
   1fe9c:	b123      	cbz	r3, 1fea8 <signal_poller+0x48>
   1fe9e:	2300      	movs	r3, #0
   1fea0:	e005      	b.n	1feae <signal_poller+0x4e>
   1fea2:	f06f 0303 	mvn.w	r3, #3
   1fea6:	e7f2      	b.n	1fe8e <signal_poller+0x2e>
   1fea8:	2301      	movs	r3, #1
   1feaa:	e000      	b.n	1feae <signal_poller+0x4e>
   1feac:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   1feae:	b90b      	cbnz	r3, 1feb4 <signal_poller+0x54>
		return 0;
   1feb0:	2000      	movs	r0, #0
   1feb2:	e005      	b.n	1fec0 <signal_poller+0x60>
	z_ready_thread(thread);
   1feb4:	4620      	mov	r0, r4
   1feb6:	f7ff fdba 	bl	1fa2e <z_ready_thread>
	return 0;
   1feba:	2000      	movs	r0, #0
   1febc:	e000      	b.n	1fec0 <signal_poller+0x60>
		return 0;
   1febe:	2000      	movs	r0, #0
}
   1fec0:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1fec2:	f06f 000a 	mvn.w	r0, #10
   1fec6:	e7fb      	b.n	1fec0 <signal_poller+0x60>

0001fec8 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   1fec8:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   1feca:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1fecc:	7823      	ldrb	r3, [r4, #0]
   1fece:	b173      	cbz	r3, 1feee <signal_triggered_work+0x26>
   1fed0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1fed4:	b15d      	cbz	r5, 1feee <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1fed6:	f1a4 0614 	sub.w	r6, r4, #20
   1feda:	f104 0014 	add.w	r0, r4, #20
   1fede:	f7ff fefa 	bl	1fcd6 <z_abort_timeout>
		twork->poll_result = 0;
   1fee2:	2300      	movs	r3, #0
   1fee4:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1fee6:	4631      	mov	r1, r6
   1fee8:	4628      	mov	r0, r5
   1feea:	f7ff fc66 	bl	1f7ba <z_work_submit_to_queue>
	}

	return 0;
}
   1feee:	2000      	movs	r0, #0
   1fef0:	bd70      	pop	{r4, r5, r6, pc}

0001fef2 <signal_poll_event>:
{
   1fef2:	b570      	push	{r4, r5, r6, lr}
   1fef4:	4604      	mov	r4, r0
   1fef6:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   1fef8:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   1fefa:	b1d6      	cbz	r6, 1ff32 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   1fefc:	7873      	ldrb	r3, [r6, #1]
   1fefe:	2b01      	cmp	r3, #1
   1ff00:	d00d      	beq.n	1ff1e <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   1ff02:	2b02      	cmp	r3, #2
   1ff04:	d012      	beq.n	1ff2c <signal_poll_event+0x3a>
		poller->is_polling = false;
   1ff06:	2000      	movs	r0, #0
   1ff08:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   1ff0a:	2300      	movs	r3, #0
   1ff0c:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   1ff0e:	68e3      	ldr	r3, [r4, #12]
   1ff10:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1ff14:	430d      	orrs	r5, r1
   1ff16:	f365 3352 	bfi	r3, r5, #13, #6
   1ff1a:	60e3      	str	r3, [r4, #12]
}
   1ff1c:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   1ff1e:	f7ff ff9f 	bl	1fe60 <signal_poller>
		poller->is_polling = false;
   1ff22:	2300      	movs	r3, #0
   1ff24:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   1ff26:	4298      	cmp	r0, r3
   1ff28:	daef      	bge.n	1ff0a <signal_poll_event+0x18>
   1ff2a:	e7f7      	b.n	1ff1c <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   1ff2c:	f7ff ffcc 	bl	1fec8 <signal_triggered_work>
   1ff30:	e7f7      	b.n	1ff22 <signal_poll_event+0x30>
	int retcode = 0;
   1ff32:	2000      	movs	r0, #0
   1ff34:	e7e9      	b.n	1ff0a <signal_poll_event+0x18>

0001ff36 <k_poll_event_init>:
{
   1ff36:	b410      	push	{r4}
	event->poller = NULL;
   1ff38:	2400      	movs	r4, #0
   1ff3a:	6084      	str	r4, [r0, #8]
	event->type = type;
   1ff3c:	f890 c00d 	ldrb.w	ip, [r0, #13]
   1ff40:	f361 0c04 	bfi	ip, r1, #0, #5
   1ff44:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   1ff48:	68c1      	ldr	r1, [r0, #12]
   1ff4a:	f364 3152 	bfi	r1, r4, #13, #6
   1ff4e:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   1ff50:	7b81      	ldrb	r1, [r0, #14]
   1ff52:	f362 01c3 	bfi	r1, r2, #3, #1
   1ff56:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   1ff58:	89c2      	ldrh	r2, [r0, #14]
   1ff5a:	f364 120f 	bfi	r2, r4, #4, #12
   1ff5e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1ff60:	6103      	str	r3, [r0, #16]
}
   1ff62:	bc10      	pop	{r4}
   1ff64:	4770      	bx	lr

0001ff66 <z_handle_obj_poll_events>:
{
   1ff66:	b508      	push	{r3, lr}
   1ff68:	4603      	mov	r3, r0
	return list->head == list;
   1ff6a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1ff6c:	4283      	cmp	r3, r0
   1ff6e:	d009      	beq.n	1ff84 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   1ff70:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1ff72:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1ff74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ff76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ff78:	2300      	movs	r3, #0
   1ff7a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1ff7c:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   1ff7e:	b108      	cbz	r0, 1ff84 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   1ff80:	f7ff ffb7 	bl	1fef2 <signal_poll_event>
}
   1ff84:	bd08      	pop	{r3, pc}

0001ff86 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   1ff86:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1ff88:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   1ff8a:	2300      	movs	r3, #0
   1ff8c:	6083      	str	r3, [r0, #8]
}
   1ff8e:	4770      	bx	lr

0001ff90 <z_heap_aligned_alloc>:
{
   1ff90:	b5d0      	push	{r4, r6, r7, lr}
   1ff92:	b082      	sub	sp, #8
   1ff94:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1ff96:	2300      	movs	r3, #0
   1ff98:	3204      	adds	r2, #4
   1ff9a:	d20e      	bcs.n	1ffba <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1ff9c:	b97b      	cbnz	r3, 1ffbe <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1ff9e:	2600      	movs	r6, #0
   1ffa0:	2700      	movs	r7, #0
   1ffa2:	e9cd 6700 	strd	r6, r7, [sp]
   1ffa6:	f041 0104 	orr.w	r1, r1, #4
   1ffaa:	4620      	mov	r0, r4
   1ffac:	f7ff f978 	bl	1f2a0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1ffb0:	b108      	cbz	r0, 1ffb6 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   1ffb2:	f840 4b04 	str.w	r4, [r0], #4
}
   1ffb6:	b002      	add	sp, #8
   1ffb8:	bdd0      	pop	{r4, r6, r7, pc}
   1ffba:	2301      	movs	r3, #1
   1ffbc:	e7ee      	b.n	1ff9c <z_heap_aligned_alloc+0xc>
		return NULL;
   1ffbe:	2000      	movs	r0, #0
   1ffc0:	e7f9      	b.n	1ffb6 <z_heap_aligned_alloc+0x26>

0001ffc2 <k_free>:
	if (ptr != NULL) {
   1ffc2:	b130      	cbz	r0, 1ffd2 <k_free+0x10>
{
   1ffc4:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1ffc6:	1f01      	subs	r1, r0, #4
   1ffc8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ffcc:	f7ff f9b1 	bl	1f332 <k_heap_free>
}
   1ffd0:	bd08      	pop	{r3, pc}
   1ffd2:	4770      	bx	lr

0001ffd4 <k_malloc>:
{
   1ffd4:	b508      	push	{r3, lr}
   1ffd6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1ffd8:	2004      	movs	r0, #4
   1ffda:	f7f7 fd37 	bl	17a4c <k_aligned_alloc>
}
   1ffde:	bd08      	pop	{r3, pc}

0001ffe0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1ffe0:	4770      	bx	lr
